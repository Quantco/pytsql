
// Generated from tsql.g4 by ANTLR 4.11.1


#include "tsqlVisitor.h"

#include "tsqlParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct TsqlParserStaticData final {
  TsqlParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  TsqlParserStaticData(const TsqlParserStaticData&) = delete;
  TsqlParserStaticData(TsqlParserStaticData&&) = delete;
  TsqlParserStaticData& operator=(const TsqlParserStaticData&) = delete;
  TsqlParserStaticData& operator=(TsqlParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag tsqlParserOnceFlag;
TsqlParserStaticData *tsqlParserStaticData = nullptr;

void tsqlParserInitialize() {
  assert(tsqlParserStaticData == nullptr);
  auto staticData = std::make_unique<TsqlParserStaticData>(
    std::vector<std::string>{
      "tsql_file", "batch", "sql_clauses", "sql_clause", "dml_clause", "ddl_clause", 
      "cfl_statement", "cfl_clause", "block_statement", "break_statement", 
      "continue_statement", "goto_statement", "if_statement", "if_block", 
      "return_statement", "throw_statement", "try_catch_statement", "waitfor_statement", 
      "while_statement", "print_statement", "raiseerror_statement", "another_statement", 
      "delete_statement", "delete_statement_from", "insert_statement", "insert_statement_value", 
      "select_statement", "update_statement", "where_clause_dml", "output_clause", 
      "output_dml_list_elem", "output_column_name", "create_database", "create_index", 
      "create_statistics", "create_table", "create_schema", "create_synonym", 
      "create_view", "view_attribute", "alter_table", "alter_database", 
      "database_optionspec", "auto_option", "change_tracking_option", "change_tracking_option_list", 
      "containment_option", "cursor_option", "date_correlation_optimization_option", 
      "db_encryption_option", "db_state_option", "db_update_option", "db_user_access_option", 
      "delayed_durability_option", "external_access_option", "hadr_options", 
      "mixed_page_allocation_option", "parameterization_option", "recovery_option", 
      "service_broker_option", "snapshot_option", "sql_option", "target_recovery_time_option", 
      "termination", "drop_index", "drop_procedure", "drop_statistics", 
      "drop_table", "drop_database", "drop_synonym", "drop_view", "drop_schema", 
      "drop_function", "create_type", "drop_type", "rowset_function_limited", 
      "openquery", "opendatasource", "declare_statement", "cursor_statement", 
      "execute_statement", "execute_statement_arg", "execute_var_string", 
      "security_statement", "grant_permission", "set_statement", "transaction_statement", 
      "go_statement", "use_statement", "execute_clause", "declare_local", 
      "table_type_definition", "column_def_table_constraints", "column_def_table_constraint", 
      "column_definition", "column_constraint", "table_constraint", "index_options", 
      "index_option", "declare_cursor", "declare_set_cursor_common", "fetch_cursor", 
      "set_special", "constant_LOCAL_ID", "expression", "xml_method_call", 
      "simple_xml_method_name", "constant_expression", "subquery", "with_expression", 
      "common_table_expression", "update_elem", "search_condition_list", 
      "search_condition", "predicate", "query_expression", "union_op", "cross_apply_expression", 
      "query_specification", "group_by_grouping_sets", "grouping_set", "top_clause", 
      "top_clause_dm", "order_by_clause", "fetch_expression", "for_clause", 
      "xml_common_directives", "order_by_expression", "group_by_item", "option_clause", 
      "option", "optimize_for_arg", "select_list", "select_list_elem", "table_sources", 
      "table_source", "table_source_item", "tablesample_clause", "sample_number", 
      "repeat_seed", "table_alias", "change_table", "join_type", "table_name_with_hint", 
      "rowset_function", "bulk_option", "derived_table", "function_call", 
      "switch_section", "switch_search_condition_section", "with_table_hints", 
      "insert_with_table_hints", "table_hint", "index_value", "column_alias_list", 
      "column_alias", "a_star", "table_value_constructor", "expression_list", 
      "value_list", "next_value_for", "next_value_for_function", "ranking_windowed_function", 
      "aggregate_windowed_function", "all_distinct", "over_clause", "row_or_range_clause", 
      "window_frame_extent", "window_frame_bound", "window_frame_preceding", 
      "window_frame_following", "create_database_option", "database_filestream_option", 
      "database_file_spec", "file_group", "file_spec", "full_table_name", 
      "simple_name", "func_proc_name", "ddl_object", "full_column_name", 
      "column_name_list", "cursor_name", "on_off", "clustered", "null_notnull", 
      "scalar_function_name", "default_value", "constant", "sign", "r_id", 
      "simple_id", "comparison_operator", "assignment_operator", "file_size", 
      "create_or_alter_procedure", "create_or_alter_function", "func_body_returns_select", 
      "func_body_returns_table", "func_body_returns_scalar", "procedure_param", 
      "procedure_option", "function_option", "percentile_cont", "string_agg", 
      "data_type"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "'='", "'>'", 
      "'<'", "'!'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'^='", 
      "'|='", "'.'", "'_'", "'@'", "'#'", "'$'", "'('", "')'", "','", "';'", 
      "':'", "'*'", "'/'", "'%'", "'+'", "'-'", "'~'", "'|'", "'&'", "'^'"
    },
    std::vector<std::string>{
      "", "ADD", "ALL", "ALTER", "AND", "ANY", "AS", "ASC", "AUTHORIZATION", 
      "BACKUP", "BEGIN", "BETWEEN", "BREAK", "BROWSE", "BULK", "BY", "CALLED", 
      "CASCADE", "CASE", "CHANGETABLE", "CHANGES", "CHECK", "CHECKPOINT", 
      "CLOSE", "CLUSTERED", "COALESCE", "COLLATE", "COLUMN", "COMMIT", "COMPUTE", 
      "CONSTRAINT", "CONTAINMENT", "CONTAINS", "CONTAINSTABLE", "CONTINUE", 
      "CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", 
      "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "DATABASE", "DBCC", 
      "DEALLOCATE", "DECLARE", "DEFAULT", "DELETE", "DENY", "DESC", "DISK", 
      "DISTINCT", "DISTRIBUTED", "DOUBLE", "DROP", "DUMP", "ELSE", "END", 
      "ERRLVL", "ESCAPE", "EXCEPT", "EXECUTE", "EXISTS", "EXIT", "EXP", 
      "EXTERNAL", "FETCH", "FILE", "FILENAME", "FILLFACTOR", "FOR", "FORCESEEK", 
      "FOREIGN", "FREETEXT", "FREETEXTTABLE", "FROM", "FULL", "FUNCTION", 
      "GOTO", "GRANT", "GROUP", "HAVING", "IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT", 
      "IIF", "IF", "IN", "INDEX", "INCLUDE", "INNER", "INSERT", "INTERSECT", 
      "INTO", "IS", "JOIN", "KEY", "KILL", "LEFT", "LIKE", "LINENO", "LOAD", 
      "LOG", "LOG10", "MERGE", "NATIONAL", "NEXT", "NOCHECK", "NONCLUSTERED", 
      "NONE", "NOT", "NULL_", "NULLIF", "NUMERIC", "OF", "OFF", "OFFSETS", 
      "ON", "OPEN", "OPENDATASOURCE", "OPENQUERY", "OPENROWSET", "OPENXML", 
      "OPTION", "OR", "ORDER", "OUTER", "OVER", "PARTIAL", "PERCENT", "PIVOT", 
      "PLAN", "PRECISION", "PRIMARY", "PRINT", "PROC", "PROCEDURE", "PUBLIC", 
      "RAISERROR", "READ", "READTEXT", "RECONFIGURE", "REFERENCES", "REPLICATION", 
      "RESTORE", "RESTRICT", "RETURN", "RETURNS", "REVERT", "REVOKE", "RIGHT", 
      "ROLLBACK", "ROWCOUNT", "ROWGUIDCOL", "RULE", "SAVE", "SCHEMA", "SECURITYAUDIT", 
      "SELECT", "SEMANTICKEYPHRASETABLE", "SEMANTICSIMILARITYDETAILSTABLE", 
      "SEMANTICSIMILARITYTABLE", "SESSION_USER", "SET", "SETUSER", "SHUTDOWN", 
      "SIGN", "SOME", "STATISTICS", "SYNONYM", "SYSTEM", "SYSTEM_USER", 
      "TABLE", "TABLESAMPLE", "TEXTSIZE", "THEN", "TO", "TOP", "TRAN", "TRANSACTION", 
      "TRIGGER", "TRUNCATE", "TRY_CAST", "TRY_CONVERT", "TRY_PARSE", "TSEQUAL", 
      "UNION", "UNIQUE", "UNPIVOT", "UPDATE", "UPDATETEXT", "USE", "USER", 
      "VALUES", "VALUE", "VARYING", "VIEW", "WAITFOR", "WHEN", "WHERE", 
      "WHILE", "WITH", "WITHIN", "WRITETEXT", "ABSOLUTE", "AFTER", "ALLOWED", 
      "ALLOW_SNAPSHOT_ISOLATION", "ANSI_NULLS", "ANSI_NULL_DEFAULT", "ANSI_PADDING", 
      "ANSI_WARNINGS", "APPLY", "ARITHABORT", "AT", "AUTO", "AUTO_CLEANUP", 
      "AUTO_CLOSE", "AUTO_CREATE_STATISTICS", "AUTO_SHRINK", "AUTO_UPDATE_STATISTICS", 
      "AUTO_UPDATE_STATISTICS_ASYNC", "AVG", "BASE64", "BIGINT", "BINARY_CHECKSUM", 
      "BULK_LOGGED", "CALLER", "CAST", "CATCH", "CEILING", "CHANGE_RETENTION", 
      "CHANGE_TRACKING", "CHECKSUM", "CHECKSUM_AGG", "COMMITTED", "COMPATIBILITY_LEVEL", 
      "CONCAT", "CONCAT_NULL_YIELDS_NULL", "CONTROL", "COOKIE", "COS", "COUNT", 
      "COUNT_BIG", "CUBE", "CURSOR_CLOSE_ON_COMMIT", "CURSOR_DEFAULT", "DATE", 
      "DATEADD", "DATEDIFF", "DATENAME", "DATEPART", "DATETIME2", "DATETIMEOFFSETFROMPARTS", 
      "DATE_CORRELATION_OPTIMIZATION", "DAYS", "DB_CHAINING", "DEFAULT_FULLTEXT_LANGUAGE", 
      "DEFAULT_LANGUAGE", "DELAY", "DELAYED_DURABILITY", "DELETED", "DENSE_RANK", 
      "DIRECTORY_NAME", "DISABLE", "DISABLED", "DISABLE_BROKER", "DYNAMIC", 
      "EMERGENCY", "ENABLE_BROKER", "ENCRYPTION", "ERROR_BROKER_CONVERSATIONS", 
      "EXIST", "EXPAND", "FAST", "FAST_FORWARD", "FILEGROUP", "FILEGROWTH", 
      "FILESTREAM", "FIRST", "FIRST_VALUE", "FLOOR", "FOLLOWING", "FORCE", 
      "FORCED", "FORWARD_ONLY", "FULLSCAN", "GB", "GLOBAL", "GO", "GROUPING", 
      "GROUPING_ID", "HADR", "HASH", "HONOR_BROKER_PRIORITY", "HOURS", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", 
      "IMMEDIATE", "IMPERSONATE", "INCREMENTAL", "INPUT", "INT", "INSENSITIVE", 
      "INSERTED", "ISOLATION", "IO", "KB", "KEEP", "KEEPFIXED", "KEYSET", 
      "LAG", "LAST", "LAST_VALUE", "LEAD", "LEVEL", "LOCAL", "LOCK_ESCALATION", 
      "LOGIN", "LOOP", "MARK", "MAX", "MAXDOP", "MAXRECURSION", "MAXSIZE", 
      "MB", "MEMORY_OPTIMIZED_DATA", "MIN", "MINUTES", "MIN_ACTIVE_ROWVERSION", 
      "MIXED_PAGE_ALLOCATION", "MODIFY", "MULTI_USER", "NAME", "NESTED_TRIGGERS", 
      "NEW_BROKER", "NOCOUNT", "NODES", "NOEXPAND", "NON_TRANSACTED_ACCESS", 
      "NORECOMPUTE", "NO_WAIT", "NTILE", "NUMBER", "NUMERIC_ROUNDABORT", 
      "OFFLINE", "OFFSET", "ONLINE", "ONLY", "OPTIMISTIC", "OPTIMIZE", "OUT", 
      "OUTPUT", "OWNER", "PAGE_VERIFY", "PARAMETERIZATION", "PARSE", "PARTITION", 
      "PATH", "PERCENTILE_CONT", "POWER", "PRECEDING", "PRIOR", "PRIVILEGES", 
      "QUERY", "QUOTED_IDENTIFIER", "RANGE", "RANK", "READONLY", "READ_COMMITTED_SNAPSHOT", 
      "READ_ONLY", "READ_WRITE", "RECOMPILE", "RECOVERY", "RECURSIVE_TRIGGERS", 
      "RELATIVE", "REMOTE", "REPEATABLE", "RESTRICTED_USER", "ROBUST", "ROLLUP", 
      "ROOT", "ROUND", "ROW", "ROWGUID", "ROWS", "ROW_NUMBER", "SAMPLE", 
      "SCHEMABINDING", "SCROLL", "SCROLL_LOCKS", "SECONDS", "SELF", "SERIALIZABLE", 
      "SETS", "SHOWPLAN", "SIMPLE", "SIN", "SINGLE_USER", "SIZE", "SMALLINT", 
      "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", "STATIC", "STATS_STREAM", 
      "STDEV", "STDEVP", "STRING_AGG", "STRING_SPLIT", "SUM", "SQRT", "SQUARE", 
      "TAKE", "TAN", "TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", "THROW", 
      "TIES", "TIME", "TINYINT", "TORN_PAGE_DETECTION", "TRANSFORM_NOISE_WORDS", 
      "TRUSTWORTHY", "TRY", "TWO_DIGIT_YEAR_CUTOFF", "TYPE", "TYPE_WARNING", 
      "UNBOUNDED", "UNCOMMITTED", "UNKNOWN", "UNLIMITED", "USING", "VAR", 
      "VARP", "VIEWS", "VIEW_METADATA", "WORK", "XML", "XMLNAMESPACES", 
      "ZONE", "DOLLAR_ACTION", "SPACE", "COMMENT", "LINE_COMMENT", "DOUBLE_QUOTE_ID", 
      "SQUARE_BRACKET_ID", "LOCAL_ID", "DECIMAL", "ID", "STRING", "BINARY", 
      "FLOAT", "REAL", "EQUAL", "GREATER", "LESS", "EXCLAMATION", "PLUS_ASSIGN", 
      "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", 
      "XOR_ASSIGN", "OR_ASSIGN", "DOT", "UNDERLINE", "AT_SIGN", "SHARP", 
      "DOLLAR", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "COLON", "STAR", 
      "DIVIDE", "MODULE", "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_AND", 
      "BIT_XOR"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,485,3725,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,
  	7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,
  	7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,
  	7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,
  	7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,
  	7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,1,0,
  	5,0,414,8,0,10,0,12,0,417,9,0,1,0,1,0,1,1,3,1,422,8,1,1,1,1,1,3,1,426,
  	8,1,1,2,1,2,3,2,430,8,2,4,2,432,8,2,11,2,12,2,433,1,3,1,3,1,3,1,3,1,3,
  	1,3,1,3,3,3,443,8,3,1,4,1,4,1,4,1,4,3,4,449,8,4,1,5,1,5,1,5,1,5,1,5,1,
  	5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,
  	473,8,5,1,6,1,6,1,6,1,6,3,6,479,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,488,
  	8,7,1,8,1,8,3,8,492,8,8,1,8,3,8,495,8,8,1,8,1,8,3,8,499,8,8,1,9,1,9,3,
  	9,503,8,9,1,10,1,10,3,10,507,8,10,1,11,1,11,1,11,3,11,512,8,11,1,11,1,
  	11,1,11,3,11,517,8,11,3,11,519,8,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
  	3,13,528,8,13,1,13,3,13,531,8,13,1,13,1,13,1,13,3,13,536,8,13,1,13,3,
  	13,539,8,13,3,13,541,8,13,1,14,1,14,3,14,545,8,14,1,14,3,14,548,8,14,
  	1,15,1,15,1,15,1,15,1,15,1,15,3,15,556,8,15,1,15,3,15,559,8,15,1,16,1,
  	16,1,16,3,16,564,8,16,1,16,3,16,567,8,16,1,16,1,16,1,16,3,16,572,8,16,
  	1,16,1,16,1,16,3,16,577,8,16,1,16,3,16,580,8,16,1,16,1,16,1,16,3,16,585,
  	8,16,1,17,1,17,1,17,1,17,3,17,591,8,17,1,18,1,18,1,18,1,18,1,18,3,18,
  	598,8,18,1,18,1,18,3,18,602,8,18,3,18,604,8,18,1,19,1,19,1,19,3,19,609,
  	8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,5,20,620,8,20,10,20,
  	12,20,623,9,20,1,20,1,20,3,20,627,8,20,1,21,1,21,1,21,1,21,1,21,1,21,
  	3,21,635,8,21,1,22,3,22,638,8,22,1,22,1,22,3,22,642,8,22,1,22,3,22,645,
  	8,22,1,22,1,22,3,22,649,8,22,1,22,3,22,652,8,22,1,22,1,22,3,22,656,8,
  	22,1,22,3,22,659,8,22,1,22,3,22,662,8,22,1,22,3,22,665,8,22,1,22,3,22,
  	668,8,22,1,23,1,23,3,23,672,8,23,1,23,1,23,1,23,3,23,677,8,23,1,24,3,
  	24,680,8,24,1,24,1,24,3,24,684,8,24,1,24,3,24,687,8,24,1,24,1,24,3,24,
  	691,8,24,1,24,3,24,694,8,24,1,24,1,24,3,24,698,8,24,1,24,1,24,1,24,1,
  	24,3,24,704,8,24,1,24,3,24,707,8,24,1,24,1,24,3,24,711,8,24,1,24,3,24,
  	714,8,24,1,24,3,24,717,8,24,1,25,1,25,1,25,1,25,1,25,3,25,724,8,25,1,
  	26,3,26,727,8,26,1,26,1,26,3,26,731,8,26,1,26,3,26,734,8,26,1,26,3,26,
  	737,8,26,1,26,3,26,740,8,26,1,27,3,27,743,8,27,1,27,1,27,3,27,747,8,27,
  	1,27,1,27,3,27,751,8,27,1,27,3,27,754,8,27,1,27,1,27,1,27,1,27,5,27,760,
  	8,27,10,27,12,27,763,9,27,1,27,3,27,766,8,27,1,27,1,27,3,27,770,8,27,
  	1,27,3,27,773,8,27,1,27,3,27,776,8,27,1,27,3,27,779,8,27,1,27,3,27,782,
  	8,27,1,28,1,28,1,28,1,28,1,28,3,28,789,8,28,1,28,1,28,3,28,793,8,28,3,
  	28,795,8,28,1,29,1,29,1,29,1,29,5,29,801,8,29,10,29,12,29,804,9,29,1,
  	29,1,29,1,29,1,29,1,29,1,29,3,29,812,8,29,3,29,814,8,29,1,30,1,30,3,30,
  	818,8,30,1,30,3,30,821,8,30,1,30,3,30,824,8,30,1,31,1,31,1,31,3,31,829,
  	8,31,1,31,1,31,1,31,3,31,834,8,31,1,31,3,31,837,8,31,1,32,1,32,1,32,1,
  	32,1,32,1,32,3,32,845,8,32,1,32,1,32,3,32,849,8,32,1,32,1,32,1,32,5,32,
  	854,8,32,10,32,12,32,857,9,32,3,32,859,8,32,1,32,1,32,1,32,1,32,1,32,
  	5,32,866,8,32,10,32,12,32,869,9,32,3,32,871,8,32,1,32,1,32,3,32,875,8,
  	32,1,32,1,32,1,32,1,32,5,32,881,8,32,10,32,12,32,884,9,32,3,32,886,8,
  	32,1,33,1,33,3,33,890,8,33,1,33,3,33,893,8,33,1,33,1,33,1,33,1,33,1,33,
  	1,33,1,33,3,33,902,8,33,1,33,1,33,1,33,1,33,1,33,3,33,909,8,33,1,33,1,
  	33,3,33,913,8,33,1,33,1,33,3,33,917,8,33,1,33,3,33,920,8,33,1,33,1,33,
  	3,33,924,8,33,1,33,3,33,927,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
  	34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,943,8,34,1,34,1,34,3,34,947,8,34,
  	1,34,1,34,1,34,1,34,3,34,953,8,34,3,34,955,8,34,1,34,3,34,958,8,34,1,
  	35,1,35,1,35,1,35,1,35,1,35,3,35,966,8,35,1,35,1,35,1,35,1,35,3,35,972,
  	8,35,1,35,1,35,1,35,3,35,977,8,35,1,35,3,35,980,8,35,1,36,1,36,1,36,1,
  	36,3,36,986,8,36,1,37,1,37,1,37,1,37,1,37,1,37,3,37,994,8,37,1,38,1,38,
  	1,38,1,38,1,38,1,38,1,38,3,38,1003,8,38,1,38,1,38,1,38,1,38,5,38,1009,
  	8,38,10,38,12,38,1012,9,38,3,38,1014,8,38,1,38,1,38,1,38,1,38,1,38,3,
  	38,1021,8,38,1,38,3,38,1024,8,38,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,
  	40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
  	40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
  	40,1,40,1,40,3,40,1064,8,40,1,40,3,40,1067,8,40,1,41,1,41,1,41,1,41,3,
  	41,1073,8,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,1085,
  	8,41,3,41,1087,8,41,1,41,3,41,1090,8,41,1,42,1,42,1,42,1,42,1,42,1,42,
  	1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
  	1,42,1,42,3,42,1114,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
  	3,43,1125,8,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,1133,8,43,1,44,1,44,
  	1,44,1,44,1,44,1,44,1,44,5,44,1142,8,44,10,44,12,44,1145,9,44,5,44,1147,
  	8,44,10,44,12,44,1150,9,44,3,44,1152,8,44,1,45,1,45,1,45,1,45,1,45,1,
  	45,3,45,1160,8,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,3,47,1170,8,
  	47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,
  	53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,1196,8,54,1,
  	54,1,54,1,54,1,54,3,54,1202,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
  	54,1,54,3,54,1213,8,54,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,57,1,
  	57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,3,58,1232,8,58,1,59,1,59,1,59,1,
  	59,1,59,1,59,3,59,1240,8,59,1,60,1,60,1,60,1,60,1,60,3,60,1247,8,60,1,
  	61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
  	61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,1270,8,61,1,62,1,62,1,62,1,62,1,
  	62,1,63,1,63,1,63,1,63,1,63,1,63,3,63,1283,8,63,1,64,1,64,1,64,1,64,3,
  	64,1289,8,64,1,64,1,64,1,64,3,64,1294,8,64,1,64,3,64,1297,8,64,1,65,1,
  	65,1,65,1,65,3,65,1303,8,65,1,65,1,65,3,65,1307,8,65,1,66,1,66,1,66,1,
  	66,1,66,3,66,1314,8,66,1,66,1,66,3,66,1318,8,66,1,67,1,67,1,67,1,67,3,
  	67,1324,8,67,1,67,1,67,3,67,1328,8,67,1,68,1,68,1,68,1,68,3,68,1334,8,
  	68,1,68,1,68,3,68,1338,8,68,1,68,3,68,1341,8,68,1,69,1,69,1,69,1,69,3,
  	69,1347,8,69,1,69,1,69,3,69,1351,8,69,1,70,1,70,1,70,1,70,3,70,1357,8,
  	70,1,70,1,70,1,70,5,70,1362,8,70,10,70,12,70,1365,9,70,1,70,3,70,1368,
  	8,70,1,71,1,71,1,71,1,71,3,71,1374,8,71,1,71,1,71,3,71,1378,8,71,1,72,
  	1,72,1,72,1,72,3,72,1384,8,72,1,72,1,72,3,72,1388,8,72,1,73,1,73,1,73,
  	1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1405,
  	8,73,1,73,1,73,3,73,1409,8,73,1,74,1,74,1,74,1,74,3,74,1415,8,74,1,74,
  	1,74,1,75,1,75,3,75,1421,8,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,77,
  	1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1438,8,77,1,77,1,77,3,77,1442,
  	8,77,1,77,1,77,1,77,1,78,1,78,1,78,3,78,1450,8,78,1,78,1,78,3,78,1454,
  	8,78,1,78,3,78,1457,8,78,1,78,1,78,1,78,1,78,5,78,1463,8,78,10,78,12,
  	78,1466,9,78,1,78,3,78,1469,8,78,3,78,1471,8,78,1,79,1,79,3,79,1475,8,
  	79,1,79,1,79,3,79,1479,8,79,1,79,1,79,3,79,1483,8,79,1,79,1,79,3,79,1487,
  	8,79,1,79,1,79,1,79,1,79,3,79,1493,8,79,1,79,1,79,3,79,1497,8,79,3,79,
  	1499,8,79,1,80,1,80,1,80,3,80,1504,8,80,1,80,1,80,1,80,1,80,5,80,1510,
  	8,80,10,80,12,80,1513,9,80,3,80,1515,8,80,1,80,3,80,1518,8,80,1,80,1,
  	80,1,80,1,80,1,80,5,80,1525,8,80,10,80,12,80,1528,9,80,1,80,1,80,3,80,
  	1532,8,80,1,80,1,80,1,80,3,80,1537,8,80,1,80,3,80,1540,8,80,3,80,1542,
  	8,80,1,81,1,81,3,81,1546,8,81,1,81,1,81,3,81,1550,8,81,1,81,3,81,1553,
  	8,81,1,81,1,81,3,81,1557,8,81,1,82,1,82,1,83,1,83,3,83,1563,8,83,1,83,
  	1,83,1,83,3,83,1568,8,83,1,83,1,83,1,83,1,83,1,83,3,83,1575,8,83,3,83,
  	1577,8,83,1,83,1,83,3,83,1581,8,83,1,83,1,83,1,83,1,83,1,83,3,83,1588,
  	8,83,1,83,1,83,3,83,1592,8,83,1,83,3,83,1595,8,83,1,83,1,83,1,83,1,83,
  	1,83,1,83,1,83,3,83,1604,8,83,1,83,3,83,1607,8,83,3,83,1609,8,83,1,84,
  	1,84,1,84,1,84,1,84,1,84,1,84,3,84,1618,8,84,1,84,1,84,1,84,1,84,1,84,
  	1,84,1,84,1,84,1,84,3,84,1629,8,84,1,84,1,84,3,84,1633,8,84,3,84,1635,
  	8,84,3,84,1637,8,84,1,85,1,85,1,85,1,85,3,85,1643,8,85,1,85,1,85,1,85,
  	3,85,1648,8,85,1,85,1,85,1,85,1,85,1,85,3,85,1655,8,85,1,85,1,85,1,85,
  	1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1668,8,85,3,85,1670,8,85,
  	3,85,1672,8,85,1,85,3,85,1675,8,85,1,85,3,85,1678,8,85,1,86,1,86,1,86,
  	1,86,1,86,3,86,1685,8,86,1,86,3,86,1688,8,86,1,86,1,86,1,86,1,86,3,86,
  	1694,8,86,1,86,1,86,1,86,3,86,1699,8,86,3,86,1701,8,86,1,86,3,86,1704,
  	8,86,1,86,1,86,1,86,1,86,3,86,1710,8,86,1,86,1,86,1,86,1,86,1,86,1,86,
  	3,86,1718,8,86,3,86,1720,8,86,1,86,3,86,1723,8,86,1,86,1,86,3,86,1727,
  	8,86,1,86,3,86,1730,8,86,1,86,1,86,1,86,1,86,3,86,1736,8,86,1,86,3,86,
  	1739,8,86,1,86,1,86,3,86,1743,8,86,1,86,3,86,1746,8,86,1,86,1,86,1,86,
  	1,86,3,86,1752,8,86,1,86,3,86,1755,8,86,3,86,1757,8,86,1,87,1,87,3,87,
  	1761,8,87,1,88,1,88,1,88,3,88,1766,8,88,1,89,1,89,1,89,1,89,1,90,1,90,
  	3,90,1774,8,90,1,90,1,90,1,90,3,90,1779,8,90,1,91,1,91,1,91,1,91,1,91,
  	1,92,1,92,3,92,1788,8,92,1,92,5,92,1791,8,92,10,92,12,92,1794,9,92,1,
  	93,1,93,3,93,1798,8,93,1,94,1,94,1,94,1,94,3,94,1804,8,94,1,94,1,94,3,
  	94,1808,8,94,1,94,3,94,1811,8,94,1,94,1,94,3,94,1815,8,94,1,94,1,94,1,
  	94,1,94,3,94,1821,8,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,1829,8,94,1,
  	94,1,94,1,94,3,94,1834,8,94,3,94,1836,8,94,1,94,3,94,1839,8,94,1,94,5,
  	94,1842,8,94,10,94,12,94,1845,9,94,1,95,1,95,3,95,1849,8,95,1,95,3,95,
  	1852,8,95,1,95,1,95,1,95,3,95,1857,8,95,1,95,3,95,1860,8,95,1,95,3,95,
  	1863,8,95,1,95,1,95,1,95,1,95,3,95,1869,8,95,1,95,1,95,1,95,1,95,3,95,
  	1875,8,95,1,96,1,96,3,96,1879,8,96,1,96,1,96,1,96,3,96,1884,8,96,1,96,
  	3,96,1887,8,96,1,96,1,96,1,96,3,96,1892,8,96,1,96,1,96,1,96,3,96,1897,
  	8,96,5,96,1899,8,96,10,96,12,96,1902,9,96,1,96,1,96,3,96,1906,8,96,1,
  	96,1,96,3,96,1910,8,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,
  	96,1,96,1,96,1,96,1,96,1,96,3,96,1927,8,96,1,96,1,96,1,96,1,96,3,96,1933,
  	8,96,1,97,1,97,1,97,1,97,1,97,5,97,1940,8,97,10,97,12,97,1943,9,97,1,
  	97,1,97,1,98,1,98,1,98,1,98,1,98,3,98,1952,8,98,1,99,1,99,1,99,1,99,1,
  	99,1,99,1,99,1,99,3,99,1962,8,99,3,99,1964,8,99,3,99,1966,8,99,1,99,3,
  	99,1969,8,99,1,99,3,99,1972,8,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,
  	99,1,99,3,99,1983,8,99,3,99,1985,8,99,3,99,1987,8,99,1,99,3,99,1990,8,
  	99,1,100,3,100,1993,8,100,1,100,3,100,1996,8,100,1,100,3,100,1999,8,100,
  	1,100,3,100,2002,8,100,1,100,3,100,2005,8,100,1,100,1,100,1,100,1,101,
  	1,101,1,101,1,101,1,101,1,101,1,101,3,101,2017,8,101,1,101,3,101,2020,
  	8,101,1,101,3,101,2023,8,101,1,101,1,101,1,101,1,101,1,101,5,101,2030,
  	8,101,10,101,12,101,2033,9,101,3,101,2035,8,101,1,101,3,101,2038,8,101,
  	1,102,1,102,1,102,1,102,1,102,3,102,2045,8,102,1,102,3,102,2048,8,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
  	3,102,2062,8,102,1,102,3,102,2065,8,102,1,102,1,102,1,102,1,102,1,102,
  	3,102,2072,8,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,1,102,3,102,2087,8,102,1,103,1,103,3,103,2091,8,103,
  	1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,4,104,2102,8,104,
  	11,104,12,104,2103,1,104,1,104,3,104,2108,8,104,1,104,1,104,1,104,1,104,
  	4,104,2114,8,104,11,104,12,104,2115,1,104,1,104,3,104,2120,8,104,1,104,
  	1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
  	1,104,1,104,1,104,1,104,1,104,3,104,2140,8,104,1,104,1,104,1,104,1,104,
  	1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
  	1,104,1,104,1,104,1,104,1,104,5,104,2163,8,104,10,104,12,104,2166,9,104,
  	1,105,1,105,1,105,3,105,2171,8,105,1,105,1,105,1,105,1,105,1,105,3,105,
  	2178,8,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,3,105,2187,8,105,
  	1,106,1,106,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,3,107,2199,
  	8,107,1,108,1,108,1,109,1,109,1,109,3,109,2206,8,109,1,109,1,109,1,109,
  	5,109,2211,8,109,10,109,12,109,2214,9,109,1,110,1,110,1,110,1,110,1,110,
  	3,110,2221,8,110,1,110,1,110,1,110,1,110,1,110,1,111,1,111,3,111,2230,
  	8,111,1,111,1,111,3,111,2234,8,111,1,111,1,111,1,111,1,111,1,111,1,111,
  	1,111,1,111,3,111,2244,8,111,1,112,1,112,1,112,5,112,2249,8,112,10,112,
  	12,112,2252,9,112,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
  	5,113,2263,8,113,10,113,12,113,2266,9,113,1,114,1,114,1,114,1,114,1,114,
  	1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,
  	1,114,1,114,1,114,3,114,2288,8,114,1,114,1,114,1,114,1,114,1,114,1,114,
  	1,114,3,114,2297,8,114,1,114,1,114,1,114,1,114,3,114,2303,8,114,1,114,
  	1,114,1,114,1,114,3,114,2309,8,114,1,114,1,114,1,114,1,114,3,114,2315,
  	8,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,3,114,2326,
  	8,114,1,115,1,115,1,115,1,115,1,115,1,115,3,115,2334,8,115,1,115,1,115,
  	1,115,1,115,5,115,2340,8,115,10,115,12,115,2343,9,115,1,116,1,116,3,116,
  	2347,8,116,1,116,1,116,3,116,2351,8,116,1,117,1,117,1,117,1,117,1,117,
  	1,117,1,117,3,117,2360,8,117,1,118,1,118,3,118,2364,8,118,1,118,3,118,
  	2367,8,118,1,118,1,118,1,118,3,118,2372,8,118,1,118,1,118,3,118,2376,
  	8,118,1,118,1,118,1,118,1,118,3,118,2382,8,118,3,118,2384,8,118,1,118,
  	1,118,3,118,2388,8,118,1,118,1,118,1,118,1,118,1,118,5,118,2395,8,118,
  	10,118,12,118,2398,9,118,3,118,2400,8,118,1,118,3,118,2403,8,118,1,118,
  	1,118,3,118,2407,8,118,1,118,1,118,3,118,2411,8,118,1,119,1,119,1,119,
  	1,119,1,119,1,119,1,119,1,119,5,119,2421,8,119,10,119,12,119,2424,9,119,
  	1,119,1,119,1,120,1,120,1,120,1,120,1,120,1,120,1,120,5,120,2435,8,120,
  	10,120,12,120,2438,9,120,1,120,1,120,3,120,2442,8,120,1,121,1,121,1,121,
  	3,121,2447,8,121,1,121,1,121,3,121,2451,8,121,1,122,1,122,1,122,1,122,
  	1,122,3,122,2458,8,122,1,123,1,123,1,123,1,123,1,123,5,123,2465,8,123,
  	10,123,12,123,2468,9,123,1,123,1,123,1,123,1,123,3,123,2474,8,123,3,123,
  	2476,8,123,1,124,1,124,1,124,1,124,1,124,1,124,1,125,1,125,1,125,1,125,
  	1,125,1,125,3,125,2490,8,125,1,125,1,125,1,125,1,125,1,125,1,125,3,125,
  	2498,8,125,1,125,3,125,2501,8,125,3,125,2503,8,125,1,126,1,126,1,126,
  	1,126,1,126,3,126,2510,8,126,1,127,1,127,3,127,2514,8,127,1,128,1,128,
  	1,129,1,129,1,129,1,129,1,129,5,129,2523,8,129,10,129,12,129,2526,9,129,
  	1,129,1,129,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,
  	1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,
  	1,130,1,130,1,130,1,130,1,130,5,130,2557,8,130,10,130,12,130,2560,9,130,
  	1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,
  	1,130,3,130,2575,8,130,1,131,1,131,1,131,1,131,3,131,2581,8,131,1,132,
  	1,132,1,132,5,132,2586,8,132,10,132,12,132,2589,9,132,1,133,1,133,1,133,
  	3,133,2594,8,133,1,133,1,133,1,133,3,133,2599,8,133,1,133,1,133,1,133,
  	1,133,1,133,1,133,3,133,2607,8,133,1,133,3,133,2610,8,133,3,133,2612,
  	8,133,1,134,1,134,1,134,5,134,2617,8,134,10,134,12,134,2620,9,134,1,135,
  	1,135,1,135,1,135,1,135,1,135,3,135,2628,8,135,1,135,1,135,1,135,1,135,
  	1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,5,135,
  	2645,8,135,10,135,12,135,2648,9,135,1,136,1,136,3,136,2652,8,136,1,136,
  	3,136,2655,8,136,1,136,3,136,2658,8,136,1,136,1,136,3,136,2662,8,136,
  	1,136,1,136,1,136,3,136,2667,8,136,3,136,2669,8,136,1,136,1,136,3,136,
  	2673,8,136,1,136,1,136,3,136,2677,8,136,1,136,1,136,3,136,2681,8,136,
  	1,136,1,136,1,136,1,136,1,136,3,136,2688,8,136,3,136,2690,8,136,3,136,
  	2692,8,136,1,137,1,137,3,137,2696,8,137,1,137,1,137,1,137,3,137,2701,
  	8,137,1,137,1,137,1,137,3,137,2706,8,137,1,138,1,138,1,139,1,139,1,140,
  	3,140,2713,8,140,1,140,1,140,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
  	1,141,1,142,3,142,2726,8,142,1,142,1,142,3,142,2730,8,142,3,142,2732,
  	8,142,1,142,3,142,2735,8,142,1,143,1,143,3,143,2739,8,143,1,144,1,144,
  	1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,
  	1,144,1,144,5,144,2757,8,144,10,144,12,144,2760,9,144,1,144,3,144,2763,
  	8,144,1,144,1,144,3,144,2767,8,144,1,145,1,145,1,145,1,145,1,146,1,146,
  	1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,3,146,2784,8,146,
  	1,147,1,147,1,147,1,147,1,147,3,147,2791,8,147,1,147,1,147,1,147,1,147,
  	1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
  	1,147,1,147,1,147,1,147,1,147,3,147,2814,8,147,1,147,1,147,1,147,1,147,
  	1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
  	1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
  	1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
  	1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
  	1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
  	1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,3,147,2889,8,147,
  	1,147,1,147,3,147,2893,8,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
  	1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
  	1,147,1,147,1,147,1,147,1,147,1,147,1,147,3,147,2921,8,147,1,147,1,147,
  	1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
  	1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
  	1,147,1,147,1,147,1,147,1,147,1,147,3,147,2955,8,147,1,147,1,147,3,147,
  	2959,8,147,1,148,1,148,1,148,1,148,1,148,1,149,1,149,1,149,1,149,1,149,
  	1,150,3,150,2972,8,150,1,150,1,150,1,150,1,150,5,150,2978,8,150,10,150,
  	12,150,2981,9,150,1,150,1,150,1,151,1,151,1,151,1,151,1,151,5,151,2990,
  	8,151,10,151,12,151,2993,9,151,1,151,1,151,1,152,3,152,2998,8,152,1,152,
  	1,152,1,152,1,152,1,152,5,152,3005,8,152,10,152,12,152,3008,9,152,1,152,
  	1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,5,152,
  	3022,8,152,10,152,12,152,3025,9,152,1,152,1,152,1,152,3,152,3030,8,152,
  	1,152,1,152,1,152,1,152,1,152,1,152,3,152,3038,8,152,1,153,1,153,3,153,
  	3042,8,153,1,154,1,154,1,154,1,154,5,154,3048,8,154,10,154,12,154,3051,
  	9,154,1,154,1,154,1,155,1,155,3,155,3057,8,155,1,156,1,156,1,157,1,157,
  	1,157,1,157,5,157,3065,8,157,10,157,12,157,3068,9,157,1,158,1,158,1,158,
  	5,158,3073,8,158,10,158,12,158,3076,9,158,1,159,1,159,1,159,1,159,1,160,
  	1,160,1,160,1,160,1,161,1,161,1,161,1,161,1,162,1,162,1,162,1,162,1,162,
  	1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,5,162,3105,
  	8,162,10,162,12,162,3108,9,162,1,162,1,162,1,162,3,162,3113,8,162,1,163,
  	1,163,1,163,3,163,3118,8,163,1,163,1,163,1,163,3,163,3123,8,163,1,163,
  	1,163,1,163,1,163,3,163,3129,8,163,1,163,3,163,3132,8,163,1,163,1,163,
  	3,163,3136,8,163,1,163,1,163,1,163,3,163,3141,8,163,1,163,1,163,1,163,
  	1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,3,163,3156,
  	8,163,1,164,1,164,1,165,1,165,1,165,1,165,1,165,3,165,3165,8,165,1,165,
  	3,165,3168,8,165,1,165,3,165,3171,8,165,1,165,1,165,1,166,1,166,1,166,
  	1,167,1,167,1,167,1,167,1,167,1,167,3,167,3184,8,167,1,168,1,168,3,168,
  	3188,8,168,1,169,1,169,1,169,1,169,1,169,1,169,3,169,3196,8,169,1,170,
  	1,170,1,170,1,170,3,170,3202,8,170,1,171,1,171,1,171,1,171,5,171,3208,
  	8,171,10,171,12,171,3211,9,171,1,171,1,171,1,171,1,171,3,171,3217,8,171,
  	1,171,1,171,1,171,1,171,3,171,3223,8,171,1,171,1,171,1,171,1,171,1,171,
  	1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,3,171,3238,8,171,1,172,
  	1,172,1,172,1,172,1,172,1,172,1,172,3,172,3247,8,172,1,172,1,172,1,173,
  	1,173,3,173,3253,8,173,1,174,1,174,1,174,1,174,3,174,3259,8,174,1,174,
  	3,174,3262,8,174,1,174,1,174,3,174,3266,8,174,1,174,1,174,1,174,5,174,
  	3271,8,174,10,174,12,174,3274,9,174,1,175,1,175,1,175,1,175,1,175,3,175,
  	3281,8,175,1,175,3,175,3284,8,175,1,175,1,175,1,175,1,175,3,175,3290,
  	8,175,1,175,1,175,1,175,1,175,3,175,3296,8,175,3,175,3298,8,175,1,175,
  	1,175,1,175,1,175,3,175,3304,8,175,1,175,3,175,3307,8,175,3,175,3309,
  	8,175,1,175,1,175,1,175,1,175,3,175,3315,8,175,3,175,3317,8,175,1,175,
  	1,175,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,3,176,
  	3331,8,176,1,176,1,176,1,176,1,176,1,176,3,176,3338,8,176,1,176,1,176,
  	1,177,1,177,1,177,3,177,3345,8,177,1,177,1,177,1,178,1,178,1,178,3,178,
  	3352,8,178,1,178,1,178,1,178,1,178,1,178,3,178,3359,8,178,1,178,1,178,
  	1,179,1,179,3,179,3365,8,179,1,180,1,180,1,180,3,180,3370,8,180,1,180,
  	1,180,1,181,1,181,1,181,5,181,3377,8,181,10,181,12,181,3380,9,181,1,182,
  	1,182,3,182,3384,8,182,1,183,1,183,1,184,1,184,1,185,3,185,3391,8,185,
  	1,185,1,185,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,
  	1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,3,186,3413,8,186,1,187,
  	1,187,3,187,3417,8,187,1,188,1,188,1,188,3,188,3422,8,188,1,188,1,188,
  	3,188,3426,8,188,1,188,1,188,3,188,3430,8,188,1,188,1,188,3,188,3434,
  	8,188,1,189,1,189,1,190,1,190,1,190,3,190,3441,8,190,1,191,1,191,1,192,
  	1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,
  	1,192,1,192,3,192,3460,8,192,1,193,1,193,1,194,1,194,3,194,3466,8,194,
  	1,195,1,195,1,195,3,195,3471,8,195,1,195,3,195,3474,8,195,1,195,1,195,
  	1,195,1,195,3,195,3480,8,195,1,195,3,195,3483,8,195,1,195,1,195,1,195,
  	5,195,3488,8,195,10,195,12,195,3491,9,195,1,195,3,195,3494,8,195,3,195,
  	3496,8,195,1,195,1,195,1,195,1,195,5,195,3502,8,195,10,195,12,195,3505,
  	9,195,3,195,3507,8,195,1,195,1,195,3,195,3511,8,195,1,195,1,195,1,195,
  	1,196,1,196,1,196,3,196,3519,8,196,1,196,3,196,3522,8,196,1,196,1,196,
  	1,196,1,196,1,196,1,196,5,196,3530,8,196,10,196,12,196,3533,9,196,1,196,
  	1,196,1,196,1,196,3,196,3539,8,196,1,196,1,196,1,196,3,196,3544,8,196,
  	1,196,3,196,3547,8,196,1,197,1,197,1,197,1,197,1,197,1,197,5,197,3555,
  	8,197,10,197,12,197,3558,9,197,3,197,3560,8,197,1,197,3,197,3563,8,197,
  	1,197,1,197,1,197,1,197,1,197,1,197,3,197,3571,8,197,1,198,1,198,1,198,
  	1,198,1,198,1,198,1,198,5,198,3580,8,198,10,198,12,198,3583,9,198,3,198,
  	3585,8,198,1,198,3,198,3588,8,198,1,198,1,198,5,198,3592,8,198,10,198,
  	12,198,3595,9,198,1,198,1,198,3,198,3599,8,198,1,198,1,198,3,198,3603,
  	8,198,1,199,1,199,1,199,1,199,1,199,1,199,5,199,3611,8,199,10,199,12,
  	199,3614,9,199,3,199,3616,8,199,1,199,3,199,3619,8,199,1,199,1,199,5,
  	199,3623,8,199,10,199,12,199,3626,9,199,1,199,1,199,1,199,3,199,3631,
  	8,199,1,199,1,199,1,200,1,200,1,200,1,200,3,200,3639,8,200,1,200,3,200,
  	3642,8,200,1,200,1,200,3,200,3646,8,200,1,200,1,200,3,200,3650,8,200,
  	1,200,3,200,3653,8,200,1,201,1,201,1,201,3,201,3658,8,201,1,202,1,202,
  	1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,3,202,3672,
  	8,202,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,
  	1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,
  	1,205,1,205,3,205,3699,8,205,1,205,1,205,1,205,1,205,3,205,3705,8,205,
  	1,205,3,205,3708,8,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,3,205,
  	3717,8,205,1,205,1,205,1,205,1,205,3,205,3723,8,205,1,205,0,4,208,226,
  	230,270,206,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
  	42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
  	88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
  	126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
  	162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
  	198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,
  	234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,
  	270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,
  	306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,
  	342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,
  	378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,0,
  	64,1,0,448,449,2,0,448,448,451,451,2,0,261,261,420,420,2,0,448,449,451,
  	451,2,0,111,111,130,130,2,0,7,7,51,51,2,0,131,131,386,386,3,0,272,272,
  	389,389,437,437,3,0,174,174,217,217,266,266,2,0,117,117,119,119,3,0,257,
  	257,297,297,329,329,2,0,290,290,317,317,3,0,270,270,346,346,348,348,1,
  	0,371,372,3,0,333,333,379,379,399,399,3,0,208,208,267,267,286,286,2,0,
  	286,286,397,397,3,0,78,78,228,228,397,397,3,0,111,111,235,235,422,422,
  	2,0,329,329,392,392,2,0,194,194,319,319,1,0,352,353,2,0,174,174,198,198,
  	1,0,180,181,4,0,229,229,354,354,393,393,451,451,2,0,287,287,390,390,4,
  	0,269,269,277,277,311,311,404,404,3,0,350,350,371,371,391,391,2,0,206,
  	206,376,376,2,0,307,307,420,420,1,0,480,481,1,0,477,479,2,0,480,481,483,
  	485,3,0,196,196,274,274,365,365,3,0,2,2,5,5,169,169,2,0,2,2,53,53,2,0,
  	246,246,381,381,2,0,384,384,386,386,2,0,108,108,281,281,2,0,127,127,295,
  	295,3,0,106,106,239,239,295,295,3,0,106,106,295,295,320,320,2,0,84,84,
  	385,385,2,0,37,37,128,128,2,0,113,113,448,449,3,0,78,78,100,100,152,152,
  	4,0,106,106,295,295,320,320,377,377,2,0,449,449,451,451,3,0,264,264,368,
  	368,387,387,3,0,282,282,314,314,343,343,2,0,312,312,315,315,6,0,224,224,
  	322,322,328,328,406,407,410,410,434,435,1,0,244,245,2,0,367,367,386,386,
  	3,0,78,78,117,117,371,371,2,0,24,24,110,110,1,0,453,454,2,0,449,449,453,
  	453,57,0,71,71,73,73,108,108,115,115,196,196,206,206,214,214,217,217,
  	224,225,229,231,236,237,239,239,241,242,244,245,249,249,261,261,263,264,
  	266,266,269,269,272,272,274,277,281,282,284,288,290,290,292,293,295,295,
  	298,298,300,300,304,307,309,324,328,328,332,332,334,334,337,339,341,341,
  	343,344,347,354,356,356,358,359,362,365,367,369,371,371,373,373,376,378,
  	380,380,382,382,384,391,393,394,397,397,400,400,402,407,410,410,417,420,
  	425,425,427,431,433,441,450,450,1,0,459,466,5,0,289,289,308,308,326,326,
  	416,416,479,479,1,0,137,138,2,0,352,353,369,369,2,0,322,322,449,449,4316,
  	0,415,1,0,0,0,2,421,1,0,0,0,4,431,1,0,0,0,6,442,1,0,0,0,8,448,1,0,0,0,
  	10,472,1,0,0,0,12,478,1,0,0,0,14,487,1,0,0,0,16,489,1,0,0,0,18,500,1,
  	0,0,0,20,504,1,0,0,0,22,518,1,0,0,0,24,520,1,0,0,0,26,540,1,0,0,0,28,
  	542,1,0,0,0,30,549,1,0,0,0,32,560,1,0,0,0,34,586,1,0,0,0,36,592,1,0,0,
  	0,38,605,1,0,0,0,40,610,1,0,0,0,42,634,1,0,0,0,44,637,1,0,0,0,46,676,
  	1,0,0,0,48,679,1,0,0,0,50,723,1,0,0,0,52,726,1,0,0,0,54,742,1,0,0,0,56,
  	783,1,0,0,0,58,796,1,0,0,0,60,817,1,0,0,0,62,836,1,0,0,0,64,838,1,0,0,
  	0,66,887,1,0,0,0,68,928,1,0,0,0,70,959,1,0,0,0,72,981,1,0,0,0,74,987,
  	1,0,0,0,76,995,1,0,0,0,78,1025,1,0,0,0,80,1027,1,0,0,0,82,1068,1,0,0,
  	0,84,1113,1,0,0,0,86,1132,1,0,0,0,88,1134,1,0,0,0,90,1159,1,0,0,0,92,
  	1161,1,0,0,0,94,1169,1,0,0,0,96,1171,1,0,0,0,98,1174,1,0,0,0,100,1177,
  	1,0,0,0,102,1179,1,0,0,0,104,1181,1,0,0,0,106,1183,1,0,0,0,108,1212,1,
  	0,0,0,110,1214,1,0,0,0,112,1219,1,0,0,0,114,1222,1,0,0,0,116,1231,1,0,
  	0,0,118,1239,1,0,0,0,120,1246,1,0,0,0,122,1269,1,0,0,0,124,1271,1,0,0,
  	0,126,1282,1,0,0,0,128,1284,1,0,0,0,130,1298,1,0,0,0,132,1308,1,0,0,0,
  	134,1319,1,0,0,0,136,1329,1,0,0,0,138,1342,1,0,0,0,140,1352,1,0,0,0,142,
  	1369,1,0,0,0,144,1379,1,0,0,0,146,1408,1,0,0,0,148,1410,1,0,0,0,150,1420,
  	1,0,0,0,152,1422,1,0,0,0,154,1429,1,0,0,0,156,1470,1,0,0,0,158,1498,1,
  	0,0,0,160,1541,1,0,0,0,162,1545,1,0,0,0,164,1558,1,0,0,0,166,1608,1,0,
  	0,0,168,1636,1,0,0,0,170,1677,1,0,0,0,172,1756,1,0,0,0,174,1758,1,0,0,
  	0,176,1762,1,0,0,0,178,1767,1,0,0,0,180,1771,1,0,0,0,182,1780,1,0,0,0,
  	184,1785,1,0,0,0,186,1797,1,0,0,0,188,1799,1,0,0,0,190,1848,1,0,0,0,192,
  	1878,1,0,0,0,194,1934,1,0,0,0,196,1946,1,0,0,0,198,1953,1,0,0,0,200,1992,
  	1,0,0,0,202,2009,1,0,0,0,204,2086,1,0,0,0,206,2090,1,0,0,0,208,2139,1,
  	0,0,0,210,2186,1,0,0,0,212,2188,1,0,0,0,214,2198,1,0,0,0,216,2200,1,0,
  	0,0,218,2202,1,0,0,0,220,2215,1,0,0,0,222,2243,1,0,0,0,224,2245,1,0,0,
  	0,226,2253,1,0,0,0,228,2325,1,0,0,0,230,2333,1,0,0,0,232,2350,1,0,0,0,
  	234,2359,1,0,0,0,236,2361,1,0,0,0,238,2412,1,0,0,0,240,2441,1,0,0,0,242,
  	2443,1,0,0,0,244,2452,1,0,0,0,246,2459,1,0,0,0,248,2477,1,0,0,0,250,2502,
  	1,0,0,0,252,2504,1,0,0,0,254,2511,1,0,0,0,256,2515,1,0,0,0,258,2517,1,
  	0,0,0,260,2574,1,0,0,0,262,2576,1,0,0,0,264,2582,1,0,0,0,266,2611,1,0,
  	0,0,268,2613,1,0,0,0,270,2627,1,0,0,0,272,2691,1,0,0,0,274,2693,1,0,0,
  	0,276,2707,1,0,0,0,278,2709,1,0,0,0,280,2712,1,0,0,0,282,2716,1,0,0,0,
  	284,2731,1,0,0,0,286,2736,1,0,0,0,288,2766,1,0,0,0,290,2768,1,0,0,0,292,
  	2783,1,0,0,0,294,2958,1,0,0,0,296,2960,1,0,0,0,298,2965,1,0,0,0,300,2971,
  	1,0,0,0,302,2984,1,0,0,0,304,2997,1,0,0,0,306,3041,1,0,0,0,308,3043,1,
  	0,0,0,310,3056,1,0,0,0,312,3058,1,0,0,0,314,3060,1,0,0,0,316,3069,1,0,
  	0,0,318,3077,1,0,0,0,320,3081,1,0,0,0,322,3085,1,0,0,0,324,3112,1,0,0,
  	0,326,3155,1,0,0,0,328,3157,1,0,0,0,330,3159,1,0,0,0,332,3174,1,0,0,0,
  	334,3183,1,0,0,0,336,3187,1,0,0,0,338,3195,1,0,0,0,340,3201,1,0,0,0,342,
  	3237,1,0,0,0,344,3239,1,0,0,0,346,3252,1,0,0,0,348,3254,1,0,0,0,350,3275,
  	1,0,0,0,352,3337,1,0,0,0,354,3344,1,0,0,0,356,3358,1,0,0,0,358,3364,1,
  	0,0,0,360,3369,1,0,0,0,362,3373,1,0,0,0,364,3383,1,0,0,0,366,3385,1,0,
  	0,0,368,3387,1,0,0,0,370,3390,1,0,0,0,372,3412,1,0,0,0,374,3416,1,0,0,
  	0,376,3433,1,0,0,0,378,3435,1,0,0,0,380,3440,1,0,0,0,382,3442,1,0,0,0,
  	384,3459,1,0,0,0,386,3461,1,0,0,0,388,3463,1,0,0,0,390,3473,1,0,0,0,392,
  	3521,1,0,0,0,394,3548,1,0,0,0,396,3572,1,0,0,0,398,3604,1,0,0,0,400,3634,
  	1,0,0,0,402,3657,1,0,0,0,404,3671,1,0,0,0,406,3673,1,0,0,0,408,3684,1,
  	0,0,0,410,3722,1,0,0,0,412,414,3,2,1,0,413,412,1,0,0,0,414,417,1,0,0,
  	0,415,413,1,0,0,0,415,416,1,0,0,0,416,418,1,0,0,0,417,415,1,0,0,0,418,
  	419,5,0,0,1,419,1,1,0,0,0,420,422,3,174,87,0,421,420,1,0,0,0,421,422,
  	1,0,0,0,422,423,1,0,0,0,423,425,3,4,2,0,424,426,3,174,87,0,425,424,1,
  	0,0,0,425,426,1,0,0,0,426,3,1,0,0,0,427,429,3,6,3,0,428,430,5,475,0,0,
  	429,428,1,0,0,0,429,430,1,0,0,0,430,432,1,0,0,0,431,427,1,0,0,0,432,433,
  	1,0,0,0,433,431,1,0,0,0,433,434,1,0,0,0,434,5,1,0,0,0,435,443,3,8,4,0,
  	436,443,3,10,5,0,437,443,3,12,6,0,438,443,3,42,21,0,439,443,3,14,7,0,
  	440,443,3,156,78,0,441,443,3,38,19,0,442,435,1,0,0,0,442,436,1,0,0,0,
  	442,437,1,0,0,0,442,438,1,0,0,0,442,439,1,0,0,0,442,440,1,0,0,0,442,441,
  	1,0,0,0,443,7,1,0,0,0,444,449,3,44,22,0,445,449,3,48,24,0,446,449,3,52,
  	26,0,447,449,3,54,27,0,448,444,1,0,0,0,448,445,1,0,0,0,448,446,1,0,0,
  	0,448,447,1,0,0,0,449,9,1,0,0,0,450,473,3,64,32,0,451,473,3,66,33,0,452,
  	473,3,392,196,0,453,473,3,390,195,0,454,473,3,68,34,0,455,473,3,72,36,
  	0,456,473,3,74,37,0,457,473,3,70,35,0,458,473,3,146,73,0,459,473,3,76,
  	38,0,460,473,3,80,40,0,461,473,3,82,41,0,462,473,3,128,64,0,463,473,3,
  	130,65,0,464,473,3,132,66,0,465,473,3,138,69,0,466,473,3,134,67,0,467,
  	473,3,148,74,0,468,473,3,140,70,0,469,473,3,136,68,0,470,473,3,142,71,
  	0,471,473,3,144,72,0,472,450,1,0,0,0,472,451,1,0,0,0,472,452,1,0,0,0,
  	472,453,1,0,0,0,472,454,1,0,0,0,472,455,1,0,0,0,472,456,1,0,0,0,472,457,
  	1,0,0,0,472,458,1,0,0,0,472,459,1,0,0,0,472,460,1,0,0,0,472,461,1,0,0,
  	0,472,462,1,0,0,0,472,463,1,0,0,0,472,464,1,0,0,0,472,465,1,0,0,0,472,
  	466,1,0,0,0,472,467,1,0,0,0,472,468,1,0,0,0,472,469,1,0,0,0,472,470,1,
  	0,0,0,472,471,1,0,0,0,473,11,1,0,0,0,474,479,3,24,12,0,475,479,3,32,16,
  	0,476,479,3,34,17,0,477,479,3,36,18,0,478,474,1,0,0,0,478,475,1,0,0,0,
  	478,476,1,0,0,0,478,477,1,0,0,0,479,13,1,0,0,0,480,488,3,16,8,0,481,488,
  	3,18,9,0,482,488,3,20,10,0,483,488,3,22,11,0,484,488,3,28,14,0,485,488,
  	3,30,15,0,486,488,3,40,20,0,487,480,1,0,0,0,487,481,1,0,0,0,487,482,1,
  	0,0,0,487,483,1,0,0,0,487,484,1,0,0,0,487,485,1,0,0,0,487,486,1,0,0,0,
  	488,15,1,0,0,0,489,491,5,10,0,0,490,492,5,475,0,0,491,490,1,0,0,0,491,
  	492,1,0,0,0,492,494,1,0,0,0,493,495,3,4,2,0,494,493,1,0,0,0,494,495,1,
  	0,0,0,495,496,1,0,0,0,496,498,5,59,0,0,497,499,5,475,0,0,498,497,1,0,
  	0,0,498,499,1,0,0,0,499,17,1,0,0,0,500,502,5,12,0,0,501,503,5,475,0,0,
  	502,501,1,0,0,0,502,503,1,0,0,0,503,19,1,0,0,0,504,506,5,34,0,0,505,507,
  	5,475,0,0,506,505,1,0,0,0,506,507,1,0,0,0,507,21,1,0,0,0,508,509,5,80,
  	0,0,509,511,3,380,190,0,510,512,5,475,0,0,511,510,1,0,0,0,511,512,1,0,
  	0,0,512,519,1,0,0,0,513,514,3,380,190,0,514,516,5,476,0,0,515,517,5,475,
  	0,0,516,515,1,0,0,0,516,517,1,0,0,0,517,519,1,0,0,0,518,508,1,0,0,0,518,
  	513,1,0,0,0,519,23,1,0,0,0,520,521,5,88,0,0,521,522,3,226,113,0,522,523,
  	3,26,13,0,523,25,1,0,0,0,524,527,3,6,3,0,525,526,5,58,0,0,526,528,3,6,
  	3,0,527,525,1,0,0,0,527,528,1,0,0,0,528,530,1,0,0,0,529,531,5,475,0,0,
  	530,529,1,0,0,0,530,531,1,0,0,0,531,541,1,0,0,0,532,535,3,16,8,0,533,
  	534,5,58,0,0,534,536,3,16,8,0,535,533,1,0,0,0,535,536,1,0,0,0,536,538,
  	1,0,0,0,537,539,5,475,0,0,538,537,1,0,0,0,538,539,1,0,0,0,539,541,1,0,
  	0,0,540,524,1,0,0,0,540,532,1,0,0,0,541,27,1,0,0,0,542,544,5,148,0,0,
  	543,545,3,208,104,0,544,543,1,0,0,0,544,545,1,0,0,0,545,547,1,0,0,0,546,
  	548,5,475,0,0,547,546,1,0,0,0,547,548,1,0,0,0,548,29,1,0,0,0,549,555,
  	5,418,0,0,550,551,7,0,0,0,551,552,5,474,0,0,552,553,7,1,0,0,553,554,5,
  	474,0,0,554,556,7,0,0,0,555,550,1,0,0,0,555,556,1,0,0,0,556,558,1,0,0,
  	0,557,559,5,475,0,0,558,557,1,0,0,0,558,559,1,0,0,0,559,31,1,0,0,0,560,
  	561,5,10,0,0,561,563,5,425,0,0,562,564,5,475,0,0,563,562,1,0,0,0,563,
  	564,1,0,0,0,564,566,1,0,0,0,565,567,3,4,2,0,566,565,1,0,0,0,566,567,1,
  	0,0,0,567,568,1,0,0,0,568,569,5,59,0,0,569,571,5,425,0,0,570,572,5,475,
  	0,0,571,570,1,0,0,0,571,572,1,0,0,0,572,573,1,0,0,0,573,574,5,10,0,0,
  	574,576,5,231,0,0,575,577,5,475,0,0,576,575,1,0,0,0,576,577,1,0,0,0,577,
  	579,1,0,0,0,578,580,3,4,2,0,579,578,1,0,0,0,579,580,1,0,0,0,580,581,1,
  	0,0,0,581,582,5,59,0,0,582,584,5,231,0,0,583,585,5,475,0,0,584,583,1,
  	0,0,0,584,585,1,0,0,0,585,33,1,0,0,0,586,587,5,199,0,0,587,588,7,2,0,
  	0,588,590,3,208,104,0,589,591,5,475,0,0,590,589,1,0,0,0,590,591,1,0,0,
  	0,591,35,1,0,0,0,592,593,5,202,0,0,593,603,3,226,113,0,594,604,3,6,3,
  	0,595,597,5,12,0,0,596,598,5,475,0,0,597,596,1,0,0,0,597,598,1,0,0,0,
  	598,604,1,0,0,0,599,601,5,34,0,0,600,602,5,475,0,0,601,600,1,0,0,0,601,
  	602,1,0,0,0,602,604,1,0,0,0,603,594,1,0,0,0,603,595,1,0,0,0,603,599,1,
  	0,0,0,604,37,1,0,0,0,605,606,5,136,0,0,606,608,3,208,104,0,607,609,5,
  	475,0,0,608,607,1,0,0,0,608,609,1,0,0,0,609,39,1,0,0,0,610,611,5,140,
  	0,0,611,612,5,472,0,0,612,613,7,3,0,0,613,614,5,474,0,0,614,615,3,206,
  	103,0,615,616,5,474,0,0,616,621,3,206,103,0,617,618,5,474,0,0,618,620,
  	3,206,103,0,619,617,1,0,0,0,620,623,1,0,0,0,621,619,1,0,0,0,621,622,1,
  	0,0,0,622,624,1,0,0,0,623,621,1,0,0,0,624,626,5,473,0,0,625,627,5,475,
  	0,0,626,625,1,0,0,0,626,627,1,0,0,0,627,41,1,0,0,0,628,635,3,158,79,0,
  	629,635,3,160,80,0,630,635,3,166,83,0,631,635,3,170,85,0,632,635,3,172,
  	86,0,633,635,3,176,88,0,634,628,1,0,0,0,634,629,1,0,0,0,634,630,1,0,0,
  	0,634,631,1,0,0,0,634,632,1,0,0,0,634,633,1,0,0,0,635,43,1,0,0,0,636,
  	638,3,218,109,0,637,636,1,0,0,0,637,638,1,0,0,0,638,639,1,0,0,0,639,641,
  	5,49,0,0,640,642,3,244,122,0,641,640,1,0,0,0,641,642,1,0,0,0,642,644,
  	1,0,0,0,643,645,5,77,0,0,644,643,1,0,0,0,644,645,1,0,0,0,645,646,1,0,
  	0,0,646,648,3,46,23,0,647,649,3,302,151,0,648,647,1,0,0,0,648,649,1,0,
  	0,0,649,651,1,0,0,0,650,652,3,58,29,0,651,650,1,0,0,0,651,652,1,0,0,0,
  	652,655,1,0,0,0,653,654,5,77,0,0,654,656,3,268,134,0,655,653,1,0,0,0,
  	655,656,1,0,0,0,656,658,1,0,0,0,657,659,3,56,28,0,658,657,1,0,0,0,658,
  	659,1,0,0,0,659,661,1,0,0,0,660,662,3,250,125,0,661,660,1,0,0,0,661,662,
  	1,0,0,0,662,664,1,0,0,0,663,665,3,258,129,0,664,663,1,0,0,0,664,665,1,
  	0,0,0,665,667,1,0,0,0,666,668,5,475,0,0,667,666,1,0,0,0,667,668,1,0,0,
  	0,668,45,1,0,0,0,669,671,3,380,190,0,670,672,3,300,150,0,671,670,1,0,
  	0,0,671,672,1,0,0,0,672,677,1,0,0,0,673,677,3,358,179,0,674,677,3,150,
  	75,0,675,677,5,448,0,0,676,669,1,0,0,0,676,673,1,0,0,0,676,674,1,0,0,
  	0,676,675,1,0,0,0,677,47,1,0,0,0,678,680,3,218,109,0,679,678,1,0,0,0,
  	679,680,1,0,0,0,680,681,1,0,0,0,681,683,5,93,0,0,682,684,3,244,122,0,
  	683,682,1,0,0,0,683,684,1,0,0,0,684,686,1,0,0,0,685,687,5,95,0,0,686,
  	685,1,0,0,0,686,687,1,0,0,0,687,690,1,0,0,0,688,691,3,358,179,0,689,691,
  	3,150,75,0,690,688,1,0,0,0,690,689,1,0,0,0,691,693,1,0,0,0,692,694,3,
  	302,151,0,693,692,1,0,0,0,693,694,1,0,0,0,694,697,1,0,0,0,695,696,5,77,
  	0,0,696,698,3,292,146,0,697,695,1,0,0,0,697,698,1,0,0,0,698,703,1,0,0,
  	0,699,700,5,472,0,0,700,701,3,362,181,0,701,702,5,473,0,0,702,704,1,0,
  	0,0,703,699,1,0,0,0,703,704,1,0,0,0,704,706,1,0,0,0,705,707,3,58,29,0,
  	706,705,1,0,0,0,706,707,1,0,0,0,707,708,1,0,0,0,708,710,3,50,25,0,709,
  	711,3,250,125,0,710,709,1,0,0,0,710,711,1,0,0,0,711,713,1,0,0,0,712,714,
  	3,258,129,0,713,712,1,0,0,0,713,714,1,0,0,0,714,716,1,0,0,0,715,717,5,
  	475,0,0,716,715,1,0,0,0,716,717,1,0,0,0,717,49,1,0,0,0,718,724,3,314,
  	157,0,719,724,3,292,146,0,720,724,3,160,80,0,721,722,5,48,0,0,722,724,
  	5,195,0,0,723,718,1,0,0,0,723,719,1,0,0,0,723,720,1,0,0,0,723,721,1,0,
  	0,0,724,51,1,0,0,0,725,727,3,218,109,0,726,725,1,0,0,0,726,727,1,0,0,
  	0,727,728,1,0,0,0,728,730,3,230,115,0,729,731,3,246,123,0,730,729,1,0,
  	0,0,730,731,1,0,0,0,731,733,1,0,0,0,732,734,3,250,125,0,733,732,1,0,0,
  	0,733,734,1,0,0,0,734,736,1,0,0,0,735,737,3,258,129,0,736,735,1,0,0,0,
  	736,737,1,0,0,0,737,739,1,0,0,0,738,740,5,475,0,0,739,738,1,0,0,0,739,
  	740,1,0,0,0,740,53,1,0,0,0,741,743,3,218,109,0,742,741,1,0,0,0,742,743,
  	1,0,0,0,743,744,1,0,0,0,744,746,5,191,0,0,745,747,3,244,122,0,746,745,
  	1,0,0,0,746,747,1,0,0,0,747,750,1,0,0,0,748,751,3,358,179,0,749,751,3,
  	150,75,0,750,748,1,0,0,0,750,749,1,0,0,0,751,753,1,0,0,0,752,754,3,300,
  	150,0,753,752,1,0,0,0,753,754,1,0,0,0,754,755,1,0,0,0,755,756,5,165,0,
  	0,756,761,3,222,111,0,757,758,5,474,0,0,758,760,3,222,111,0,759,757,1,
  	0,0,0,760,763,1,0,0,0,761,759,1,0,0,0,761,762,1,0,0,0,762,765,1,0,0,0,
  	763,761,1,0,0,0,764,766,3,58,29,0,765,764,1,0,0,0,765,766,1,0,0,0,766,
  	769,1,0,0,0,767,768,5,77,0,0,768,770,3,268,134,0,769,767,1,0,0,0,769,
  	770,1,0,0,0,770,772,1,0,0,0,771,773,3,56,28,0,772,771,1,0,0,0,772,773,
  	1,0,0,0,773,775,1,0,0,0,774,776,3,250,125,0,775,774,1,0,0,0,775,776,1,
  	0,0,0,776,778,1,0,0,0,777,779,3,258,129,0,778,777,1,0,0,0,778,779,1,0,
  	0,0,779,781,1,0,0,0,780,782,5,475,0,0,781,780,1,0,0,0,781,782,1,0,0,0,
  	782,55,1,0,0,0,783,794,5,201,0,0,784,795,3,224,112,0,785,786,5,38,0,0,
  	786,792,5,116,0,0,787,789,5,290,0,0,788,787,1,0,0,0,788,789,1,0,0,0,789,
  	790,1,0,0,0,790,793,3,364,182,0,791,793,5,448,0,0,792,788,1,0,0,0,792,
  	791,1,0,0,0,793,795,1,0,0,0,794,784,1,0,0,0,794,785,1,0,0,0,795,57,1,
  	0,0,0,796,797,5,353,0,0,797,802,3,60,30,0,798,799,5,474,0,0,799,801,3,
  	60,30,0,800,798,1,0,0,0,801,804,1,0,0,0,802,800,1,0,0,0,802,803,1,0,0,
  	0,803,813,1,0,0,0,804,802,1,0,0,0,805,806,5,95,0,0,806,811,3,358,179,
  	0,807,808,5,472,0,0,808,809,3,362,181,0,809,810,5,473,0,0,810,812,1,0,
  	0,0,811,807,1,0,0,0,811,812,1,0,0,0,812,814,1,0,0,0,813,805,1,0,0,0,813,
  	814,1,0,0,0,814,59,1,0,0,0,815,818,3,62,31,0,816,818,3,208,104,0,817,
  	815,1,0,0,0,817,816,1,0,0,0,818,823,1,0,0,0,819,821,5,6,0,0,820,819,1,
  	0,0,0,820,821,1,0,0,0,821,822,1,0,0,0,822,824,3,310,155,0,823,820,1,0,
  	0,0,823,824,1,0,0,0,824,61,1,0,0,0,825,829,5,263,0,0,826,829,5,305,0,
  	0,827,829,3,352,176,0,828,825,1,0,0,0,828,826,1,0,0,0,828,827,1,0,0,0,
  	829,830,1,0,0,0,830,833,5,467,0,0,831,834,5,477,0,0,832,834,3,380,190,
  	0,833,831,1,0,0,0,833,832,1,0,0,0,834,837,1,0,0,0,835,837,5,442,0,0,836,
  	828,1,0,0,0,836,835,1,0,0,0,837,63,1,0,0,0,838,839,5,36,0,0,839,840,5,
  	44,0,0,840,844,3,380,190,0,841,842,5,31,0,0,842,843,5,455,0,0,843,845,
  	7,4,0,0,844,841,1,0,0,0,844,845,1,0,0,0,845,858,1,0,0,0,846,848,5,119,
  	0,0,847,849,5,135,0,0,848,847,1,0,0,0,848,849,1,0,0,0,849,850,1,0,0,0,
  	850,855,3,346,173,0,851,852,5,474,0,0,852,854,3,346,173,0,853,851,1,0,
  	0,0,854,857,1,0,0,0,855,853,1,0,0,0,855,856,1,0,0,0,856,859,1,0,0,0,857,
  	855,1,0,0,0,858,846,1,0,0,0,858,859,1,0,0,0,859,870,1,0,0,0,860,861,5,
  	104,0,0,861,862,5,119,0,0,862,867,3,346,173,0,863,864,5,474,0,0,864,866,
  	3,346,173,0,865,863,1,0,0,0,866,869,1,0,0,0,867,865,1,0,0,0,867,868,1,
  	0,0,0,868,871,1,0,0,0,869,867,1,0,0,0,870,860,1,0,0,0,870,871,1,0,0,0,
  	871,874,1,0,0,0,872,873,5,26,0,0,873,875,3,380,190,0,874,872,1,0,0,0,
  	874,875,1,0,0,0,875,885,1,0,0,0,876,877,5,203,0,0,877,882,3,342,171,0,
  	878,879,5,474,0,0,879,881,3,342,171,0,880,878,1,0,0,0,881,884,1,0,0,0,
  	882,880,1,0,0,0,882,883,1,0,0,0,883,886,1,0,0,0,884,882,1,0,0,0,885,876,
  	1,0,0,0,885,886,1,0,0,0,886,65,1,0,0,0,887,889,5,36,0,0,888,890,5,189,
  	0,0,889,888,1,0,0,0,889,890,1,0,0,0,890,892,1,0,0,0,891,893,3,368,184,
  	0,892,891,1,0,0,0,892,893,1,0,0,0,893,894,1,0,0,0,894,895,5,90,0,0,895,
  	896,3,380,190,0,896,897,5,119,0,0,897,898,3,286,143,0,898,899,5,472,0,
  	0,899,901,3,362,181,0,900,902,7,5,0,0,901,900,1,0,0,0,901,902,1,0,0,0,
  	902,903,1,0,0,0,903,912,5,473,0,0,904,905,5,91,0,0,905,906,5,472,0,0,
  	906,908,3,362,181,0,907,909,7,5,0,0,908,907,1,0,0,0,908,909,1,0,0,0,909,
  	910,1,0,0,0,910,911,5,473,0,0,911,913,1,0,0,0,912,904,1,0,0,0,912,913,
  	1,0,0,0,913,916,1,0,0,0,914,915,5,201,0,0,915,917,3,226,113,0,916,914,
  	1,0,0,0,916,917,1,0,0,0,917,919,1,0,0,0,918,920,3,194,97,0,919,918,1,
  	0,0,0,919,920,1,0,0,0,920,923,1,0,0,0,921,922,5,119,0,0,922,924,3,380,
  	190,0,923,921,1,0,0,0,923,924,1,0,0,0,924,926,1,0,0,0,925,927,5,475,0,
  	0,926,925,1,0,0,0,926,927,1,0,0,0,927,67,1,0,0,0,928,929,5,36,0,0,929,
  	930,5,170,0,0,930,931,3,380,190,0,931,932,5,119,0,0,932,933,3,286,143,
  	0,933,934,5,472,0,0,934,935,3,362,181,0,935,954,5,473,0,0,936,942,5,203,
  	0,0,937,943,5,288,0,0,938,939,5,388,0,0,939,940,5,449,0,0,940,943,7,6,
  	0,0,941,943,5,405,0,0,942,937,1,0,0,0,942,938,1,0,0,0,942,941,1,0,0,0,
  	943,946,1,0,0,0,944,945,5,474,0,0,945,947,5,341,0,0,946,944,1,0,0,0,946,
  	947,1,0,0,0,947,952,1,0,0,0,948,949,5,474,0,0,949,950,5,301,0,0,950,951,
  	5,455,0,0,951,953,3,366,183,0,952,948,1,0,0,0,952,953,1,0,0,0,953,955,
  	1,0,0,0,954,936,1,0,0,0,954,955,1,0,0,0,955,957,1,0,0,0,956,958,5,475,
  	0,0,957,956,1,0,0,0,957,958,1,0,0,0,958,69,1,0,0,0,959,960,5,36,0,0,960,
  	961,5,174,0,0,961,962,3,352,176,0,962,963,5,472,0,0,963,965,3,184,92,
  	0,964,966,5,474,0,0,965,964,1,0,0,0,965,966,1,0,0,0,966,967,1,0,0,0,967,
  	971,5,473,0,0,968,969,5,119,0,0,969,972,3,380,190,0,970,972,5,48,0,0,
  	971,968,1,0,0,0,971,970,1,0,0,0,971,972,1,0,0,0,972,976,1,0,0,0,973,974,
  	5,417,0,0,974,977,3,380,190,0,975,977,5,48,0,0,976,973,1,0,0,0,976,975,
  	1,0,0,0,976,977,1,0,0,0,977,979,1,0,0,0,978,980,5,475,0,0,979,978,1,0,
  	0,0,979,980,1,0,0,0,980,71,1,0,0,0,981,982,5,36,0,0,982,983,5,158,0,0,
  	983,985,3,354,177,0,984,986,5,475,0,0,985,984,1,0,0,0,985,986,1,0,0,0,
  	986,73,1,0,0,0,987,988,5,36,0,0,988,989,5,171,0,0,989,990,3,354,177,0,
  	990,991,5,72,0,0,991,993,3,352,176,0,992,994,5,475,0,0,993,992,1,0,0,
  	0,993,994,1,0,0,0,994,75,1,0,0,0,995,996,5,36,0,0,996,997,5,198,0,0,997,
  	1002,3,354,177,0,998,999,5,472,0,0,999,1000,3,362,181,0,1000,1001,5,473,
  	0,0,1001,1003,1,0,0,0,1002,998,1,0,0,0,1002,1003,1,0,0,0,1003,1013,1,
  	0,0,0,1004,1005,5,203,0,0,1005,1010,3,78,39,0,1006,1007,5,474,0,0,1007,
  	1009,3,78,39,0,1008,1006,1,0,0,0,1009,1012,1,0,0,0,1010,1008,1,0,0,0,
  	1010,1011,1,0,0,0,1011,1014,1,0,0,0,1012,1010,1,0,0,0,1013,1004,1,0,0,
  	0,1013,1014,1,0,0,0,1014,1015,1,0,0,0,1015,1016,5,6,0,0,1016,1020,3,52,
  	26,0,1017,1018,5,203,0,0,1018,1019,5,21,0,0,1019,1021,5,125,0,0,1020,
  	1017,1,0,0,0,1020,1021,1,0,0,0,1021,1023,1,0,0,0,1022,1024,5,475,0,0,
  	1023,1022,1,0,0,0,1023,1024,1,0,0,0,1024,77,1,0,0,0,1025,1026,7,7,0,0,
  	1026,79,1,0,0,0,1027,1028,5,3,0,0,1028,1029,5,174,0,0,1029,1063,3,352,
  	176,0,1030,1031,5,165,0,0,1031,1032,5,472,0,0,1032,1033,5,318,0,0,1033,
  	1034,5,455,0,0,1034,1035,7,8,0,0,1035,1064,5,473,0,0,1036,1037,5,1,0,
  	0,1037,1064,3,186,93,0,1038,1039,5,56,0,0,1039,1040,5,30,0,0,1040,1064,
  	3,380,190,0,1041,1042,5,203,0,0,1042,1043,5,21,0,0,1043,1044,5,1,0,0,
  	1044,1045,5,30,0,0,1045,1046,3,380,190,0,1046,1047,5,74,0,0,1047,1048,
  	5,98,0,0,1048,1049,5,472,0,0,1049,1050,3,362,181,0,1050,1051,5,473,0,
  	0,1051,1052,5,144,0,0,1052,1053,3,352,176,0,1053,1054,5,472,0,0,1054,
  	1055,3,362,181,0,1055,1056,5,473,0,0,1056,1064,1,0,0,0,1057,1058,5,21,
  	0,0,1058,1059,5,30,0,0,1059,1064,3,380,190,0,1060,1061,5,3,0,0,1061,1062,
  	5,27,0,0,1062,1064,3,184,92,0,1063,1030,1,0,0,0,1063,1036,1,0,0,0,1063,
  	1038,1,0,0,0,1063,1041,1,0,0,0,1063,1057,1,0,0,0,1063,1060,1,0,0,0,1064,
  	1066,1,0,0,0,1065,1067,5,475,0,0,1066,1065,1,0,0,0,1066,1067,1,0,0,0,
  	1067,81,1,0,0,0,1068,1069,5,3,0,0,1069,1072,5,44,0,0,1070,1073,3,380,
  	190,0,1071,1073,5,38,0,0,1072,1070,1,0,0,0,1072,1071,1,0,0,0,1073,1086,
  	1,0,0,0,1074,1075,5,332,0,0,1075,1076,5,334,0,0,1076,1077,5,455,0,0,1077,
  	1087,3,380,190,0,1078,1079,5,26,0,0,1079,1087,3,380,190,0,1080,1081,5,
  	165,0,0,1081,1084,3,84,42,0,1082,1083,5,203,0,0,1083,1085,3,126,63,0,
  	1084,1082,1,0,0,0,1084,1085,1,0,0,0,1085,1087,1,0,0,0,1086,1074,1,0,0,
  	0,1086,1078,1,0,0,0,1086,1080,1,0,0,0,1087,1089,1,0,0,0,1088,1090,5,475,
  	0,0,1089,1088,1,0,0,0,1089,1090,1,0,0,0,1090,83,1,0,0,0,1091,1114,3,86,
  	43,0,1092,1114,3,88,44,0,1093,1114,3,92,46,0,1094,1114,3,94,47,0,1095,
  	1114,3,96,48,0,1096,1114,3,98,49,0,1097,1114,3,100,50,0,1098,1114,3,102,
  	51,0,1099,1114,3,104,52,0,1100,1114,3,106,53,0,1101,1114,3,108,54,0,1102,
  	1103,5,280,0,0,1103,1114,3,344,172,0,1104,1114,3,110,55,0,1105,1114,3,
  	112,56,0,1106,1114,3,114,57,0,1107,1114,3,116,58,0,1108,1114,3,118,59,
  	0,1109,1114,3,120,60,0,1110,1114,3,122,61,0,1111,1114,3,124,62,0,1112,
  	1114,3,126,63,0,1113,1091,1,0,0,0,1113,1092,1,0,0,0,1113,1093,1,0,0,0,
  	1113,1094,1,0,0,0,1113,1095,1,0,0,0,1113,1096,1,0,0,0,1113,1097,1,0,0,
  	0,1113,1098,1,0,0,0,1113,1099,1,0,0,0,1113,1100,1,0,0,0,1113,1101,1,0,
  	0,0,1113,1102,1,0,0,0,1113,1104,1,0,0,0,1113,1105,1,0,0,0,1113,1106,1,
  	0,0,0,1113,1107,1,0,0,0,1113,1108,1,0,0,0,1113,1109,1,0,0,0,1113,1110,
  	1,0,0,0,1113,1111,1,0,0,0,1113,1112,1,0,0,0,1114,85,1,0,0,0,1115,1116,
  	5,219,0,0,1116,1133,3,366,183,0,1117,1118,5,220,0,0,1118,1133,5,117,0,
  	0,1119,1124,5,119,0,0,1120,1121,5,301,0,0,1121,1122,5,455,0,0,1122,1125,
  	5,119,0,0,1123,1125,5,117,0,0,1124,1120,1,0,0,0,1124,1123,1,0,0,0,1125,
  	1133,1,0,0,0,1126,1127,5,221,0,0,1127,1133,3,366,183,0,1128,1129,5,222,
  	0,0,1129,1133,3,366,183,0,1130,1131,5,223,0,0,1131,1133,7,9,0,0,1132,
  	1115,1,0,0,0,1132,1117,1,0,0,0,1132,1119,1,0,0,0,1132,1126,1,0,0,0,1132,
  	1128,1,0,0,0,1132,1130,1,0,0,0,1133,87,1,0,0,0,1134,1135,5,234,0,0,1135,
  	1151,5,455,0,0,1136,1152,5,117,0,0,1137,1148,5,119,0,0,1138,1143,3,90,
  	45,0,1139,1140,5,474,0,0,1140,1142,3,90,45,0,1141,1139,1,0,0,0,1142,1145,
  	1,0,0,0,1143,1141,1,0,0,0,1143,1144,1,0,0,0,1144,1147,1,0,0,0,1145,1143,
  	1,0,0,0,1146,1138,1,0,0,0,1147,1150,1,0,0,0,1148,1146,1,0,0,0,1148,1149,
  	1,0,0,0,1149,1152,1,0,0,0,1150,1148,1,0,0,0,1151,1136,1,0,0,0,1151,1137,
  	1,0,0,0,1152,89,1,0,0,0,1153,1154,5,218,0,0,1154,1155,5,455,0,0,1155,
  	1160,3,366,183,0,1156,1157,5,233,0,0,1157,1158,5,455,0,0,1158,1160,7,
  	10,0,0,1159,1153,1,0,0,0,1159,1156,1,0,0,0,1160,91,1,0,0,0,1161,1162,
  	5,31,0,0,1162,1163,5,455,0,0,1163,1164,7,4,0,0,1164,93,1,0,0,0,1165,1166,
  	5,247,0,0,1166,1170,3,366,183,0,1167,1168,5,248,0,0,1168,1170,7,11,0,
  	0,1169,1165,1,0,0,0,1169,1167,1,0,0,0,1170,95,1,0,0,0,1171,1172,5,256,
  	0,0,1172,1173,3,366,183,0,1173,97,1,0,0,0,1174,1175,5,272,0,0,1175,1176,
  	3,366,183,0,1176,99,1,0,0,0,1177,1178,7,12,0,0,1178,101,1,0,0,0,1179,
  	1180,7,13,0,0,1180,103,1,0,0,0,1181,1182,7,14,0,0,1182,105,1,0,0,0,1183,
  	1184,5,262,0,0,1184,1185,5,455,0,0,1185,1186,7,15,0,0,1186,107,1,0,0,
  	0,1187,1188,5,258,0,0,1188,1213,3,366,183,0,1189,1190,5,424,0,0,1190,
  	1213,3,366,183,0,1191,1192,5,260,0,0,1192,1195,5,455,0,0,1193,1196,3,
  	380,190,0,1194,1196,5,451,0,0,1195,1193,1,0,0,0,1195,1194,1,0,0,0,1196,
  	1213,1,0,0,0,1197,1198,5,259,0,0,1198,1201,5,455,0,0,1199,1202,3,380,
  	190,0,1200,1202,5,451,0,0,1201,1199,1,0,0,0,1201,1200,1,0,0,0,1202,1213,
  	1,0,0,0,1203,1204,5,335,0,0,1204,1205,5,455,0,0,1205,1213,7,9,0,0,1206,
  	1207,5,423,0,0,1207,1208,5,455,0,0,1208,1213,7,9,0,0,1209,1210,5,426,
  	0,0,1210,1211,5,455,0,0,1211,1213,5,449,0,0,1212,1187,1,0,0,0,1212,1189,
  	1,0,0,0,1212,1191,1,0,0,0,1212,1197,1,0,0,0,1212,1203,1,0,0,0,1212,1206,
  	1,0,0,0,1212,1209,1,0,0,0,1213,109,1,0,0,0,1214,1215,5,3,0,0,1215,1216,
  	5,44,0,0,1216,1217,5,165,0,0,1217,1218,5,294,0,0,1218,111,1,0,0,0,1219,
  	1220,5,331,0,0,1220,1221,7,9,0,0,1221,113,1,0,0,0,1222,1223,5,356,0,0,
  	1223,1224,7,16,0,0,1224,115,1,0,0,0,1225,1226,5,374,0,0,1226,1232,7,17,
  	0,0,1227,1228,5,422,0,0,1228,1232,3,366,183,0,1229,1230,5,355,0,0,1230,
  	1232,7,18,0,0,1231,1225,1,0,0,0,1231,1227,1,0,0,0,1231,1229,1,0,0,0,1232,
  	117,1,0,0,0,1233,1240,5,271,0,0,1234,1240,5,268,0,0,1235,1240,5,336,0,
  	0,1236,1240,5,273,0,0,1237,1238,5,296,0,0,1238,1240,3,366,183,0,1239,
  	1233,1,0,0,0,1239,1234,1,0,0,0,1239,1235,1,0,0,0,1239,1236,1,0,0,0,1239,
  	1237,1,0,0,0,1240,119,1,0,0,0,1241,1242,5,209,0,0,1242,1247,3,366,183,
  	0,1243,1244,5,370,0,0,1244,1247,7,9,0,0,1245,1247,7,9,0,0,1246,1241,1,
  	0,0,0,1246,1243,1,0,0,0,1246,1245,1,0,0,0,1247,121,1,0,0,0,1248,1249,
  	5,211,0,0,1249,1270,3,366,183,0,1250,1251,5,210,0,0,1251,1270,3,366,183,
  	0,1252,1253,5,212,0,0,1253,1270,3,366,183,0,1254,1255,5,213,0,0,1255,
  	1270,3,366,183,0,1256,1257,5,215,0,0,1257,1270,3,366,183,0,1258,1259,
  	5,238,0,0,1259,1260,5,455,0,0,1260,1270,5,449,0,0,1261,1262,5,240,0,0,
  	1262,1270,3,366,183,0,1263,1264,5,345,0,0,1264,1270,3,366,183,0,1265,
  	1266,5,366,0,0,1266,1270,3,366,183,0,1267,1268,5,375,0,0,1268,1270,3,
  	366,183,0,1269,1248,1,0,0,0,1269,1250,1,0,0,0,1269,1252,1,0,0,0,1269,
  	1254,1,0,0,0,1269,1256,1,0,0,0,1269,1258,1,0,0,0,1269,1261,1,0,0,0,1269,
  	1263,1,0,0,0,1269,1265,1,0,0,0,1269,1267,1,0,0,0,1270,123,1,0,0,0,1271,
  	1272,5,415,0,0,1272,1273,5,455,0,0,1273,1274,5,449,0,0,1274,1275,7,19,
  	0,0,1275,125,1,0,0,0,1276,1277,5,153,0,0,1277,1278,5,207,0,0,1278,1283,
  	5,449,0,0,1279,1280,5,153,0,0,1280,1283,5,299,0,0,1281,1283,5,342,0,0,
  	1282,1276,1,0,0,0,1282,1279,1,0,0,0,1282,1281,1,0,0,0,1283,127,1,0,0,
  	0,1284,1285,5,56,0,0,1285,1288,5,90,0,0,1286,1287,5,88,0,0,1287,1289,
  	5,64,0,0,1288,1286,1,0,0,0,1288,1289,1,0,0,0,1289,1290,1,0,0,0,1290,1293,
  	3,380,190,0,1291,1292,5,119,0,0,1292,1294,3,352,176,0,1293,1291,1,0,0,
  	0,1293,1294,1,0,0,0,1294,1296,1,0,0,0,1295,1297,5,475,0,0,1296,1295,1,
  	0,0,0,1296,1297,1,0,0,0,1297,129,1,0,0,0,1298,1299,5,56,0,0,1299,1302,
  	5,138,0,0,1300,1301,5,88,0,0,1301,1303,5,64,0,0,1302,1300,1,0,0,0,1302,
  	1303,1,0,0,0,1303,1304,1,0,0,0,1304,1306,3,356,178,0,1305,1307,5,475,
  	0,0,1306,1305,1,0,0,0,1306,1307,1,0,0,0,1307,131,1,0,0,0,1308,1309,5,
  	56,0,0,1309,1313,5,170,0,0,1310,1311,3,352,176,0,1311,1312,5,467,0,0,
  	1312,1314,1,0,0,0,1313,1310,1,0,0,0,1313,1314,1,0,0,0,1314,1315,1,0,0,
  	0,1315,1317,3,380,190,0,1316,1318,5,475,0,0,1317,1316,1,0,0,0,1317,1318,
  	1,0,0,0,1318,133,1,0,0,0,1319,1320,5,56,0,0,1320,1323,5,174,0,0,1321,
  	1322,5,88,0,0,1322,1324,5,64,0,0,1323,1321,1,0,0,0,1323,1324,1,0,0,0,
  	1324,1325,1,0,0,0,1325,1327,3,352,176,0,1326,1328,5,475,0,0,1327,1326,
  	1,0,0,0,1327,1328,1,0,0,0,1328,135,1,0,0,0,1329,1330,5,56,0,0,1330,1333,
  	5,44,0,0,1331,1332,5,88,0,0,1332,1334,5,64,0,0,1333,1331,1,0,0,0,1333,
  	1334,1,0,0,0,1334,1337,1,0,0,0,1335,1338,3,380,190,0,1336,1338,5,38,0,
  	0,1337,1335,1,0,0,0,1337,1336,1,0,0,0,1338,1340,1,0,0,0,1339,1341,5,475,
  	0,0,1340,1339,1,0,0,0,1340,1341,1,0,0,0,1341,137,1,0,0,0,1342,1343,5,
  	56,0,0,1343,1346,5,171,0,0,1344,1345,5,88,0,0,1345,1347,5,64,0,0,1346,
  	1344,1,0,0,0,1346,1347,1,0,0,0,1347,1348,1,0,0,0,1348,1350,3,354,177,
  	0,1349,1351,5,475,0,0,1350,1349,1,0,0,0,1350,1351,1,0,0,0,1351,139,1,
  	0,0,0,1352,1353,5,56,0,0,1353,1356,5,198,0,0,1354,1355,5,88,0,0,1355,
  	1357,5,64,0,0,1356,1354,1,0,0,0,1356,1357,1,0,0,0,1357,1358,1,0,0,0,1358,
  	1363,3,354,177,0,1359,1360,5,474,0,0,1360,1362,3,354,177,0,1361,1359,
  	1,0,0,0,1362,1365,1,0,0,0,1363,1361,1,0,0,0,1363,1364,1,0,0,0,1364,1367,
  	1,0,0,0,1365,1363,1,0,0,0,1366,1368,5,475,0,0,1367,1366,1,0,0,0,1367,
  	1368,1,0,0,0,1368,141,1,0,0,0,1369,1370,5,56,0,0,1370,1373,5,158,0,0,
  	1371,1372,5,88,0,0,1372,1374,5,64,0,0,1373,1371,1,0,0,0,1373,1374,1,0,
  	0,0,1374,1375,1,0,0,0,1375,1377,3,354,177,0,1376,1378,5,475,0,0,1377,
  	1376,1,0,0,0,1377,1378,1,0,0,0,1378,143,1,0,0,0,1379,1380,5,56,0,0,1380,
  	1383,5,79,0,0,1381,1382,5,88,0,0,1382,1384,5,64,0,0,1383,1381,1,0,0,0,
  	1383,1384,1,0,0,0,1384,1385,1,0,0,0,1385,1387,3,356,178,0,1386,1388,5,
  	475,0,0,1387,1386,1,0,0,0,1387,1388,1,0,0,0,1388,145,1,0,0,0,1389,1390,
  	5,36,0,0,1390,1391,5,427,0,0,1391,1392,3,354,177,0,1392,1393,5,77,0,0,
  	1393,1394,3,410,205,0,1394,1395,3,374,187,0,1395,1409,1,0,0,0,1396,1397,
  	5,36,0,0,1397,1398,5,427,0,0,1398,1399,3,354,177,0,1399,1400,5,6,0,0,
  	1400,1401,5,174,0,0,1401,1402,5,472,0,0,1402,1404,3,184,92,0,1403,1405,
  	5,474,0,0,1404,1403,1,0,0,0,1404,1405,1,0,0,0,1405,1406,1,0,0,0,1406,
  	1407,5,473,0,0,1407,1409,1,0,0,0,1408,1389,1,0,0,0,1408,1396,1,0,0,0,
  	1409,147,1,0,0,0,1410,1411,5,56,0,0,1411,1414,5,427,0,0,1412,1413,5,88,
  	0,0,1413,1415,5,64,0,0,1414,1412,1,0,0,0,1414,1415,1,0,0,0,1415,1416,
  	1,0,0,0,1416,1417,3,354,177,0,1417,149,1,0,0,0,1418,1421,3,152,76,0,1419,
  	1421,3,154,77,0,1420,1418,1,0,0,0,1420,1419,1,0,0,0,1421,151,1,0,0,0,
  	1422,1423,5,122,0,0,1423,1424,5,472,0,0,1424,1425,3,380,190,0,1425,1426,
  	5,474,0,0,1426,1427,5,451,0,0,1427,1428,5,473,0,0,1428,153,1,0,0,0,1429,
  	1430,5,121,0,0,1430,1431,5,472,0,0,1431,1432,5,451,0,0,1432,1433,5,474,
  	0,0,1433,1434,5,451,0,0,1434,1435,5,473,0,0,1435,1437,5,467,0,0,1436,
  	1438,3,380,190,0,1437,1436,1,0,0,0,1437,1438,1,0,0,0,1438,1439,1,0,0,
  	0,1439,1441,5,467,0,0,1440,1442,3,380,190,0,1441,1440,1,0,0,0,1441,1442,
  	1,0,0,0,1442,1443,1,0,0,0,1443,1444,5,467,0,0,1444,1445,3,380,190,0,1445,
  	155,1,0,0,0,1446,1447,5,47,0,0,1447,1449,5,448,0,0,1448,1450,5,6,0,0,
  	1449,1448,1,0,0,0,1449,1450,1,0,0,0,1450,1453,1,0,0,0,1451,1454,3,182,
  	91,0,1452,1454,3,268,134,0,1453,1451,1,0,0,0,1453,1452,1,0,0,0,1454,1456,
  	1,0,0,0,1455,1457,5,475,0,0,1456,1455,1,0,0,0,1456,1457,1,0,0,0,1457,
  	1471,1,0,0,0,1458,1459,5,47,0,0,1459,1464,3,180,90,0,1460,1461,5,474,
  	0,0,1461,1463,3,180,90,0,1462,1460,1,0,0,0,1463,1466,1,0,0,0,1464,1462,
  	1,0,0,0,1464,1465,1,0,0,0,1465,1468,1,0,0,0,1466,1464,1,0,0,0,1467,1469,
  	5,475,0,0,1468,1467,1,0,0,0,1468,1469,1,0,0,0,1469,1471,1,0,0,0,1470,
  	1446,1,0,0,0,1470,1458,1,0,0,0,1471,157,1,0,0,0,1472,1474,5,23,0,0,1473,
  	1475,5,290,0,0,1474,1473,1,0,0,0,1474,1475,1,0,0,0,1475,1476,1,0,0,0,
  	1476,1478,3,364,182,0,1477,1479,5,475,0,0,1478,1477,1,0,0,0,1478,1479,
  	1,0,0,0,1479,1499,1,0,0,0,1480,1482,5,46,0,0,1481,1483,5,290,0,0,1482,
  	1481,1,0,0,0,1482,1483,1,0,0,0,1483,1484,1,0,0,0,1484,1486,3,364,182,
  	0,1485,1487,5,475,0,0,1486,1485,1,0,0,0,1486,1487,1,0,0,0,1487,1499,1,
  	0,0,0,1488,1499,3,198,99,0,1489,1499,3,202,101,0,1490,1492,5,120,0,0,
  	1491,1493,5,290,0,0,1492,1491,1,0,0,0,1492,1493,1,0,0,0,1493,1494,1,0,
  	0,0,1494,1496,3,364,182,0,1495,1497,5,475,0,0,1496,1495,1,0,0,0,1496,
  	1497,1,0,0,0,1497,1499,1,0,0,0,1498,1472,1,0,0,0,1498,1480,1,0,0,0,1498,
  	1488,1,0,0,0,1498,1489,1,0,0,0,1498,1490,1,0,0,0,1499,159,1,0,0,0,1500,
  	1503,5,63,0,0,1501,1502,5,448,0,0,1502,1504,5,455,0,0,1503,1501,1,0,0,
  	0,1503,1504,1,0,0,0,1504,1505,1,0,0,0,1505,1514,3,356,178,0,1506,1511,
  	3,162,81,0,1507,1508,5,474,0,0,1508,1510,3,162,81,0,1509,1507,1,0,0,0,
  	1510,1513,1,0,0,0,1511,1509,1,0,0,0,1511,1512,1,0,0,0,1512,1515,1,0,0,
  	0,1513,1511,1,0,0,0,1514,1506,1,0,0,0,1514,1515,1,0,0,0,1515,1517,1,0,
  	0,0,1516,1518,5,475,0,0,1517,1516,1,0,0,0,1517,1518,1,0,0,0,1518,1542,
  	1,0,0,0,1519,1520,5,63,0,0,1520,1521,5,472,0,0,1521,1526,3,164,82,0,1522,
  	1523,5,480,0,0,1523,1525,3,164,82,0,1524,1522,1,0,0,0,1525,1528,1,0,0,
  	0,1526,1524,1,0,0,0,1526,1527,1,0,0,0,1527,1529,1,0,0,0,1528,1526,1,0,
  	0,0,1529,1536,5,473,0,0,1530,1532,5,6,0,0,1531,1530,1,0,0,0,1531,1532,
  	1,0,0,0,1532,1533,1,0,0,0,1533,1534,7,20,0,0,1534,1535,5,455,0,0,1535,
  	1537,5,451,0,0,1536,1531,1,0,0,0,1536,1537,1,0,0,0,1537,1539,1,0,0,0,
  	1538,1540,5,475,0,0,1539,1538,1,0,0,0,1539,1540,1,0,0,0,1540,1542,1,0,
  	0,0,1541,1500,1,0,0,0,1541,1519,1,0,0,0,1542,161,1,0,0,0,1543,1544,5,
  	448,0,0,1544,1546,5,455,0,0,1545,1543,1,0,0,0,1545,1546,1,0,0,0,1546,
  	1556,1,0,0,0,1547,1550,3,206,103,0,1548,1550,3,380,190,0,1549,1547,1,
  	0,0,0,1549,1548,1,0,0,0,1550,1552,1,0,0,0,1551,1553,7,21,0,0,1552,1551,
  	1,0,0,0,1552,1553,1,0,0,0,1553,1557,1,0,0,0,1554,1557,5,48,0,0,1555,1557,
  	5,113,0,0,1556,1549,1,0,0,0,1556,1554,1,0,0,0,1556,1555,1,0,0,0,1557,
  	163,1,0,0,0,1558,1559,7,1,0,0,1559,165,1,0,0,0,1560,1562,3,178,89,0,1561,
  	1563,5,475,0,0,1562,1561,1,0,0,0,1562,1563,1,0,0,0,1563,1609,1,0,0,0,
  	1564,1576,5,81,0,0,1565,1567,5,2,0,0,1566,1568,5,364,0,0,1567,1566,1,
  	0,0,0,1567,1568,1,0,0,0,1568,1577,1,0,0,0,1569,1574,3,168,84,0,1570,1571,
  	5,472,0,0,1571,1572,3,362,181,0,1572,1573,5,473,0,0,1573,1575,1,0,0,0,
  	1574,1570,1,0,0,0,1574,1575,1,0,0,0,1575,1577,1,0,0,0,1576,1565,1,0,0,
  	0,1576,1569,1,0,0,0,1577,1580,1,0,0,0,1578,1579,5,119,0,0,1579,1581,3,
  	352,176,0,1580,1578,1,0,0,0,1580,1581,1,0,0,0,1581,1582,1,0,0,0,1582,
  	1583,5,178,0,0,1583,1587,3,380,190,0,1584,1585,5,203,0,0,1585,1586,5,
  	81,0,0,1586,1588,5,125,0,0,1587,1584,1,0,0,0,1587,1588,1,0,0,0,1588,1591,
  	1,0,0,0,1589,1590,5,6,0,0,1590,1592,3,380,190,0,1591,1589,1,0,0,0,1591,
  	1592,1,0,0,0,1592,1594,1,0,0,0,1593,1595,5,475,0,0,1594,1593,1,0,0,0,
  	1594,1595,1,0,0,0,1595,1609,1,0,0,0,1596,1603,5,150,0,0,1597,1598,5,472,
  	0,0,1598,1599,5,203,0,0,1599,1600,5,242,0,0,1600,1601,5,455,0,0,1601,
  	1602,5,448,0,0,1602,1604,5,473,0,0,1603,1597,1,0,0,0,1603,1604,1,0,0,
  	0,1604,1606,1,0,0,0,1605,1607,5,475,0,0,1606,1605,1,0,0,0,1606,1607,1,
  	0,0,0,1607,1609,1,0,0,0,1608,1560,1,0,0,0,1608,1564,1,0,0,0,1608,1596,
  	1,0,0,0,1609,167,1,0,0,0,1610,1637,5,63,0,0,1611,1612,5,198,0,0,1612,
  	1637,3,380,190,0,1613,1614,5,413,0,0,1614,1637,3,380,190,0,1615,1617,
  	5,241,0,0,1616,1618,3,380,190,0,1617,1616,1,0,0,0,1617,1618,1,0,0,0,1618,
  	1637,1,0,0,0,1619,1620,5,36,0,0,1620,1637,7,22,0,0,1621,1637,5,396,0,
  	0,1622,1637,5,300,0,0,1623,1637,5,160,0,0,1624,1637,5,144,0,0,1625,1637,
  	5,93,0,0,1626,1634,5,3,0,0,1627,1629,5,5,0,0,1628,1627,1,0,0,0,1628,1629,
  	1,0,0,0,1629,1632,1,0,0,0,1630,1633,3,380,190,0,1631,1633,5,44,0,0,1632,
  	1630,1,0,0,0,1632,1631,1,0,0,0,1633,1635,1,0,0,0,1634,1628,1,0,0,0,1634,
  	1635,1,0,0,0,1635,1637,1,0,0,0,1636,1610,1,0,0,0,1636,1611,1,0,0,0,1636,
  	1613,1,0,0,0,1636,1615,1,0,0,0,1636,1619,1,0,0,0,1636,1621,1,0,0,0,1636,
  	1622,1,0,0,0,1636,1623,1,0,0,0,1636,1624,1,0,0,0,1636,1625,1,0,0,0,1636,
  	1626,1,0,0,0,1637,169,1,0,0,0,1638,1639,5,165,0,0,1639,1642,5,448,0,0,
  	1640,1641,5,467,0,0,1641,1643,3,380,190,0,1642,1640,1,0,0,0,1642,1643,
  	1,0,0,0,1643,1644,1,0,0,0,1644,1645,5,455,0,0,1645,1647,3,208,104,0,1646,
  	1648,5,475,0,0,1647,1646,1,0,0,0,1647,1648,1,0,0,0,1648,1678,1,0,0,0,
  	1649,1650,5,165,0,0,1650,1651,5,448,0,0,1651,1652,3,386,193,0,1652,1654,
  	3,208,104,0,1653,1655,5,475,0,0,1654,1653,1,0,0,0,1654,1655,1,0,0,0,1655,
  	1678,1,0,0,0,1656,1657,5,165,0,0,1657,1658,5,448,0,0,1658,1659,5,455,
  	0,0,1659,1660,5,43,0,0,1660,1671,3,200,100,0,1661,1669,5,72,0,0,1662,
  	1663,5,141,0,0,1663,1670,5,349,0,0,1664,1667,5,191,0,0,1665,1666,5,116,
  	0,0,1666,1668,3,362,181,0,1667,1665,1,0,0,0,1667,1668,1,0,0,0,1668,1670,
  	1,0,0,0,1669,1662,1,0,0,0,1669,1664,1,0,0,0,1670,1672,1,0,0,0,1671,1661,
  	1,0,0,0,1671,1672,1,0,0,0,1672,1674,1,0,0,0,1673,1675,5,475,0,0,1674,
  	1673,1,0,0,0,1674,1675,1,0,0,0,1675,1678,1,0,0,0,1676,1678,3,204,102,
  	0,1677,1638,1,0,0,0,1677,1649,1,0,0,0,1677,1656,1,0,0,0,1677,1676,1,0,
  	0,0,1678,171,1,0,0,0,1679,1680,5,10,0,0,1680,1681,5,54,0,0,1681,1684,
  	7,23,0,0,1682,1685,3,380,190,0,1683,1685,5,448,0,0,1684,1682,1,0,0,0,
  	1684,1683,1,0,0,0,1684,1685,1,0,0,0,1685,1687,1,0,0,0,1686,1688,5,475,
  	0,0,1687,1686,1,0,0,0,1687,1688,1,0,0,0,1688,1757,1,0,0,0,1689,1690,5,
  	10,0,0,1690,1700,7,23,0,0,1691,1694,3,380,190,0,1692,1694,5,448,0,0,1693,
  	1691,1,0,0,0,1693,1692,1,0,0,0,1694,1698,1,0,0,0,1695,1696,5,203,0,0,
  	1696,1697,5,321,0,0,1697,1699,5,451,0,0,1698,1695,1,0,0,0,1698,1699,1,
  	0,0,0,1699,1701,1,0,0,0,1700,1693,1,0,0,0,1700,1701,1,0,0,0,1701,1703,
  	1,0,0,0,1702,1704,5,475,0,0,1703,1702,1,0,0,0,1703,1704,1,0,0,0,1704,
  	1757,1,0,0,0,1705,1706,5,28,0,0,1706,1719,7,23,0,0,1707,1710,3,380,190,
  	0,1708,1710,5,448,0,0,1709,1707,1,0,0,0,1709,1708,1,0,0,0,1710,1717,1,
  	0,0,0,1711,1712,5,203,0,0,1712,1713,5,472,0,0,1713,1714,5,262,0,0,1714,
  	1715,5,455,0,0,1715,1716,7,9,0,0,1716,1718,5,473,0,0,1717,1711,1,0,0,
  	0,1717,1718,1,0,0,0,1718,1720,1,0,0,0,1719,1709,1,0,0,0,1719,1720,1,0,
  	0,0,1720,1722,1,0,0,0,1721,1723,5,475,0,0,1722,1721,1,0,0,0,1722,1723,
  	1,0,0,0,1723,1757,1,0,0,0,1724,1726,5,28,0,0,1725,1727,5,438,0,0,1726,
  	1725,1,0,0,0,1726,1727,1,0,0,0,1727,1729,1,0,0,0,1728,1730,5,475,0,0,
  	1729,1728,1,0,0,0,1729,1730,1,0,0,0,1730,1757,1,0,0,0,1731,1732,5,153,
  	0,0,1732,1735,7,23,0,0,1733,1736,3,380,190,0,1734,1736,5,448,0,0,1735,
  	1733,1,0,0,0,1735,1734,1,0,0,0,1735,1736,1,0,0,0,1736,1738,1,0,0,0,1737,
  	1739,5,475,0,0,1738,1737,1,0,0,0,1738,1739,1,0,0,0,1739,1757,1,0,0,0,
  	1740,1742,5,153,0,0,1741,1743,5,438,0,0,1742,1741,1,0,0,0,1742,1743,1,
  	0,0,0,1743,1745,1,0,0,0,1744,1746,5,475,0,0,1745,1744,1,0,0,0,1745,1746,
  	1,0,0,0,1746,1757,1,0,0,0,1747,1748,5,157,0,0,1748,1751,7,23,0,0,1749,
  	1752,3,380,190,0,1750,1752,5,448,0,0,1751,1749,1,0,0,0,1751,1750,1,0,
  	0,0,1751,1752,1,0,0,0,1752,1754,1,0,0,0,1753,1755,5,475,0,0,1754,1753,
  	1,0,0,0,1754,1755,1,0,0,0,1755,1757,1,0,0,0,1756,1679,1,0,0,0,1756,1689,
  	1,0,0,0,1756,1705,1,0,0,0,1756,1724,1,0,0,0,1756,1731,1,0,0,0,1756,1740,
  	1,0,0,0,1756,1747,1,0,0,0,1757,173,1,0,0,0,1758,1760,5,291,0,0,1759,1761,
  	5,449,0,0,1760,1759,1,0,0,0,1760,1761,1,0,0,0,1761,175,1,0,0,0,1762,1763,
  	5,193,0,0,1763,1765,3,380,190,0,1764,1766,5,475,0,0,1765,1764,1,0,0,0,
  	1765,1766,1,0,0,0,1766,177,1,0,0,0,1767,1768,5,63,0,0,1768,1769,5,6,0,
  	0,1769,1770,7,24,0,0,1770,179,1,0,0,0,1771,1773,5,448,0,0,1772,1774,5,
  	6,0,0,1773,1772,1,0,0,0,1773,1774,1,0,0,0,1774,1775,1,0,0,0,1775,1778,
  	3,410,205,0,1776,1777,5,455,0,0,1777,1779,3,208,104,0,1778,1776,1,0,0,
  	0,1778,1779,1,0,0,0,1779,181,1,0,0,0,1780,1781,5,174,0,0,1781,1782,5,
  	472,0,0,1782,1783,3,184,92,0,1783,1784,5,473,0,0,1784,183,1,0,0,0,1785,
  	1792,3,186,93,0,1786,1788,5,474,0,0,1787,1786,1,0,0,0,1787,1788,1,0,0,
  	0,1788,1789,1,0,0,0,1789,1791,3,186,93,0,1790,1787,1,0,0,0,1791,1794,
  	1,0,0,0,1792,1790,1,0,0,0,1792,1793,1,0,0,0,1793,185,1,0,0,0,1794,1792,
  	1,0,0,0,1795,1798,3,188,94,0,1796,1798,3,192,96,0,1797,1795,1,0,0,0,1797,
  	1796,1,0,0,0,1798,187,1,0,0,0,1799,1803,3,380,190,0,1800,1804,3,410,205,
  	0,1801,1802,5,6,0,0,1802,1804,3,208,104,0,1803,1800,1,0,0,0,1803,1801,
  	1,0,0,0,1804,1807,1,0,0,0,1805,1806,5,26,0,0,1806,1808,3,380,190,0,1807,
  	1805,1,0,0,0,1807,1808,1,0,0,0,1808,1810,1,0,0,0,1809,1811,3,370,185,
  	0,1810,1809,1,0,0,0,1810,1811,1,0,0,0,1811,1835,1,0,0,0,1812,1813,5,30,
  	0,0,1813,1815,3,380,190,0,1814,1812,1,0,0,0,1814,1815,1,0,0,0,1815,1816,
  	1,0,0,0,1816,1817,5,48,0,0,1817,1820,3,214,107,0,1818,1819,5,203,0,0,
  	1819,1821,5,195,0,0,1820,1818,1,0,0,0,1820,1821,1,0,0,0,1821,1836,1,0,
  	0,0,1822,1828,5,84,0,0,1823,1824,5,472,0,0,1824,1825,5,449,0,0,1825,1826,
  	5,474,0,0,1826,1827,5,449,0,0,1827,1829,5,473,0,0,1828,1823,1,0,0,0,1828,
  	1829,1,0,0,0,1829,1833,1,0,0,0,1830,1831,5,112,0,0,1831,1832,5,72,0,0,
  	1832,1834,5,145,0,0,1833,1830,1,0,0,0,1833,1834,1,0,0,0,1834,1836,1,0,
  	0,0,1835,1814,1,0,0,0,1835,1822,1,0,0,0,1835,1836,1,0,0,0,1836,1838,1,
  	0,0,0,1837,1839,5,155,0,0,1838,1837,1,0,0,0,1838,1839,1,0,0,0,1839,1843,
  	1,0,0,0,1840,1842,3,190,95,0,1841,1840,1,0,0,0,1842,1845,1,0,0,0,1843,
  	1841,1,0,0,0,1843,1844,1,0,0,0,1844,189,1,0,0,0,1845,1843,1,0,0,0,1846,
  	1847,5,30,0,0,1847,1849,3,380,190,0,1848,1846,1,0,0,0,1848,1849,1,0,0,
  	0,1849,1851,1,0,0,0,1850,1852,3,370,185,0,1851,1850,1,0,0,0,1851,1852,
  	1,0,0,0,1852,1874,1,0,0,0,1853,1854,5,135,0,0,1854,1857,5,98,0,0,1855,
  	1857,5,189,0,0,1856,1853,1,0,0,0,1856,1855,1,0,0,0,1857,1859,1,0,0,0,
  	1858,1860,3,368,184,0,1859,1858,1,0,0,0,1859,1860,1,0,0,0,1860,1862,1,
  	0,0,0,1861,1863,3,194,97,0,1862,1861,1,0,0,0,1862,1863,1,0,0,0,1863,1875,
  	1,0,0,0,1864,1868,5,21,0,0,1865,1866,5,112,0,0,1866,1867,5,72,0,0,1867,
  	1869,5,145,0,0,1868,1865,1,0,0,0,1868,1869,1,0,0,0,1869,1870,1,0,0,0,
  	1870,1871,5,472,0,0,1871,1872,3,226,113,0,1872,1873,5,473,0,0,1873,1875,
  	1,0,0,0,1874,1856,1,0,0,0,1874,1864,1,0,0,0,1875,191,1,0,0,0,1876,1877,
  	5,30,0,0,1877,1879,3,380,190,0,1878,1876,1,0,0,0,1878,1879,1,0,0,0,1879,
  	1932,1,0,0,0,1880,1881,5,135,0,0,1881,1884,5,98,0,0,1882,1884,5,189,0,
  	0,1883,1880,1,0,0,0,1883,1882,1,0,0,0,1884,1886,1,0,0,0,1885,1887,3,368,
  	184,0,1886,1885,1,0,0,0,1886,1887,1,0,0,0,1887,1888,1,0,0,0,1888,1889,
  	5,472,0,0,1889,1891,3,380,190,0,1890,1892,7,5,0,0,1891,1890,1,0,0,0,1891,
  	1892,1,0,0,0,1892,1900,1,0,0,0,1893,1894,5,474,0,0,1894,1896,3,380,190,
  	0,1895,1897,7,5,0,0,1896,1895,1,0,0,0,1896,1897,1,0,0,0,1897,1899,1,0,
  	0,0,1898,1893,1,0,0,0,1899,1902,1,0,0,0,1900,1898,1,0,0,0,1900,1901,1,
  	0,0,0,1901,1903,1,0,0,0,1902,1900,1,0,0,0,1903,1905,5,473,0,0,1904,1906,
  	3,194,97,0,1905,1904,1,0,0,0,1905,1906,1,0,0,0,1906,1909,1,0,0,0,1907,
  	1908,5,119,0,0,1908,1910,3,380,190,0,1909,1907,1,0,0,0,1909,1910,1,0,
  	0,0,1910,1933,1,0,0,0,1911,1912,5,74,0,0,1912,1913,5,98,0,0,1913,1914,
  	5,472,0,0,1914,1915,3,362,181,0,1915,1916,5,473,0,0,1916,1917,5,144,0,
  	0,1917,1918,3,352,176,0,1918,1919,5,472,0,0,1919,1920,3,362,181,0,1920,
  	1921,5,473,0,0,1921,1933,1,0,0,0,1922,1926,5,21,0,0,1923,1924,5,112,0,
  	0,1924,1925,5,72,0,0,1925,1927,5,145,0,0,1926,1923,1,0,0,0,1926,1927,
  	1,0,0,0,1927,1928,1,0,0,0,1928,1929,5,472,0,0,1929,1930,3,226,113,0,1930,
  	1931,5,473,0,0,1931,1933,1,0,0,0,1932,1883,1,0,0,0,1932,1911,1,0,0,0,
  	1932,1922,1,0,0,0,1933,193,1,0,0,0,1934,1935,5,203,0,0,1935,1936,5,472,
  	0,0,1936,1941,3,196,98,0,1937,1938,5,474,0,0,1938,1940,3,196,98,0,1939,
  	1937,1,0,0,0,1940,1943,1,0,0,0,1941,1939,1,0,0,0,1941,1942,1,0,0,0,1942,
  	1944,1,0,0,0,1943,1941,1,0,0,0,1944,1945,5,473,0,0,1945,195,1,0,0,0,1946,
  	1947,3,382,191,0,1947,1951,5,455,0,0,1948,1952,3,382,191,0,1949,1952,
  	3,366,183,0,1950,1952,5,449,0,0,1951,1948,1,0,0,0,1951,1949,1,0,0,0,1951,
  	1950,1,0,0,0,1952,197,1,0,0,0,1953,1954,5,47,0,0,1954,1986,3,364,182,
  	0,1955,1965,5,43,0,0,1956,1963,3,200,100,0,1957,1958,5,72,0,0,1958,1961,
  	5,191,0,0,1959,1960,5,116,0,0,1960,1962,3,362,181,0,1961,1959,1,0,0,0,
  	1961,1962,1,0,0,0,1962,1964,1,0,0,0,1963,1957,1,0,0,0,1963,1964,1,0,0,
  	0,1964,1966,1,0,0,0,1965,1956,1,0,0,0,1965,1966,1,0,0,0,1966,1987,1,0,
  	0,0,1967,1969,5,304,0,0,1968,1967,1,0,0,0,1968,1969,1,0,0,0,1969,1971,
  	1,0,0,0,1970,1972,5,390,0,0,1971,1970,1,0,0,0,1971,1972,1,0,0,0,1972,
  	1973,1,0,0,0,1973,1974,5,43,0,0,1974,1975,5,72,0,0,1975,1984,3,52,26,
  	0,1976,1982,5,72,0,0,1977,1978,5,141,0,0,1978,1983,5,349,0,0,1979,1983,
  	5,191,0,0,1980,1981,5,116,0,0,1981,1983,3,362,181,0,1982,1977,1,0,0,0,
  	1982,1979,1,0,0,0,1982,1980,1,0,0,0,1983,1985,1,0,0,0,1984,1976,1,0,0,
  	0,1984,1985,1,0,0,0,1985,1987,1,0,0,0,1986,1955,1,0,0,0,1986,1968,1,0,
  	0,0,1987,1989,1,0,0,0,1988,1990,5,475,0,0,1989,1988,1,0,0,0,1989,1990,
  	1,0,0,0,1990,199,1,0,0,0,1991,1993,7,11,0,0,1992,1991,1,0,0,0,1992,1993,
  	1,0,0,0,1993,1995,1,0,0,0,1994,1996,7,25,0,0,1995,1994,1,0,0,0,1995,1996,
  	1,0,0,0,1996,1998,1,0,0,0,1997,1999,7,26,0,0,1998,1997,1,0,0,0,1998,1999,
  	1,0,0,0,1999,2001,1,0,0,0,2000,2002,7,27,0,0,2001,2000,1,0,0,0,2001,2002,
  	1,0,0,0,2002,2004,1,0,0,0,2003,2005,5,428,0,0,2004,2003,1,0,0,0,2004,
  	2005,1,0,0,0,2005,2006,1,0,0,0,2006,2007,5,72,0,0,2007,2008,3,52,26,0,
  	2008,201,1,0,0,0,2009,2019,5,68,0,0,2010,2017,5,108,0,0,2011,2017,5,363,
  	0,0,2012,2017,5,281,0,0,2013,2017,5,313,0,0,2014,2015,7,28,0,0,2015,2017,
  	3,208,104,0,2016,2010,1,0,0,0,2016,2011,1,0,0,0,2016,2012,1,0,0,0,2016,
  	2013,1,0,0,0,2016,2014,1,0,0,0,2016,2017,1,0,0,0,2017,2018,1,0,0,0,2018,
  	2020,5,77,0,0,2019,2016,1,0,0,0,2019,2020,1,0,0,0,2020,2022,1,0,0,0,2021,
  	2023,5,290,0,0,2022,2021,1,0,0,0,2022,2023,1,0,0,0,2023,2024,1,0,0,0,
  	2024,2034,3,364,182,0,2025,2026,5,95,0,0,2026,2031,5,448,0,0,2027,2028,
  	5,474,0,0,2028,2030,5,448,0,0,2029,2027,1,0,0,0,2030,2033,1,0,0,0,2031,
  	2029,1,0,0,0,2031,2032,1,0,0,0,2032,2035,1,0,0,0,2033,2031,1,0,0,0,2034,
  	2025,1,0,0,0,2034,2035,1,0,0,0,2035,2037,1,0,0,0,2036,2038,5,475,0,0,
  	2037,2036,1,0,0,0,2037,2038,1,0,0,0,2038,203,1,0,0,0,2039,2040,5,165,
  	0,0,2040,2044,3,380,190,0,2041,2045,3,380,190,0,2042,2045,3,206,103,0,
  	2043,2045,3,366,183,0,2044,2041,1,0,0,0,2044,2042,1,0,0,0,2044,2043,1,
  	0,0,0,2045,2047,1,0,0,0,2046,2048,5,475,0,0,2047,2046,1,0,0,0,2047,2048,
  	1,0,0,0,2048,2087,1,0,0,0,2049,2050,5,165,0,0,2050,2051,5,181,0,0,2051,
  	2052,5,306,0,0,2052,2061,5,316,0,0,2053,2054,5,141,0,0,2054,2062,5,430,
  	0,0,2055,2056,5,141,0,0,2056,2062,5,237,0,0,2057,2058,5,378,0,0,2058,
  	2062,5,141,0,0,2059,2062,5,402,0,0,2060,2062,5,394,0,0,2061,2053,1,0,
  	0,0,2061,2055,1,0,0,0,2061,2057,1,0,0,0,2061,2059,1,0,0,0,2061,2060,1,
  	0,0,0,2062,2064,1,0,0,0,2063,2065,5,475,0,0,2064,2063,1,0,0,0,2064,2065,
  	1,0,0,0,2065,2087,1,0,0,0,2066,2067,5,165,0,0,2067,2068,5,86,0,0,2068,
  	2069,3,352,176,0,2069,2071,3,366,183,0,2070,2072,5,475,0,0,2071,2070,
  	1,0,0,0,2071,2072,1,0,0,0,2072,2087,1,0,0,0,2073,2074,5,165,0,0,2074,
  	2075,5,210,0,0,2075,2087,3,366,183,0,2076,2077,5,165,0,0,2077,2078,5,
  	366,0,0,2078,2087,3,366,183,0,2079,2080,5,165,0,0,2080,2081,5,212,0,0,
  	2081,2087,3,366,183,0,2082,2083,5,165,0,0,2083,2084,5,170,0,0,2084,2085,
  	7,29,0,0,2085,2087,3,366,183,0,2086,2039,1,0,0,0,2086,2049,1,0,0,0,2086,
  	2066,1,0,0,0,2086,2073,1,0,0,0,2086,2076,1,0,0,0,2086,2079,1,0,0,0,2086,
  	2082,1,0,0,0,2087,205,1,0,0,0,2088,2091,3,376,188,0,2089,2091,5,448,0,
  	0,2090,2088,1,0,0,0,2090,2089,1,0,0,0,2091,207,1,0,0,0,2092,2093,6,104,
  	-1,0,2093,2140,5,48,0,0,2094,2140,5,113,0,0,2095,2140,5,448,0,0,2096,
  	2140,3,376,188,0,2097,2140,3,294,147,0,2098,2099,5,18,0,0,2099,2101,3,
  	208,104,0,2100,2102,3,296,148,0,2101,2100,1,0,0,0,2102,2103,1,0,0,0,2103,
  	2101,1,0,0,0,2103,2104,1,0,0,0,2104,2107,1,0,0,0,2105,2106,5,58,0,0,2106,
  	2108,3,208,104,0,2107,2105,1,0,0,0,2107,2108,1,0,0,0,2108,2109,1,0,0,
  	0,2109,2110,5,59,0,0,2110,2140,1,0,0,0,2111,2113,5,18,0,0,2112,2114,3,
  	298,149,0,2113,2112,1,0,0,0,2114,2115,1,0,0,0,2115,2113,1,0,0,0,2115,
  	2116,1,0,0,0,2116,2119,1,0,0,0,2117,2118,5,58,0,0,2118,2120,3,208,104,
  	0,2119,2117,1,0,0,0,2119,2120,1,0,0,0,2120,2121,1,0,0,0,2121,2122,5,59,
  	0,0,2122,2140,1,0,0,0,2123,2140,3,360,180,0,2124,2125,5,472,0,0,2125,
  	2126,3,208,104,0,2126,2127,5,473,0,0,2127,2140,1,0,0,0,2128,2129,5,472,
  	0,0,2129,2130,3,216,108,0,2130,2131,5,473,0,0,2131,2140,1,0,0,0,2132,
  	2133,5,482,0,0,2133,2140,3,208,104,9,2134,2135,7,30,0,0,2135,2140,3,208,
  	104,7,2136,2140,3,330,165,0,2137,2140,3,406,203,0,2138,2140,3,408,204,
  	0,2139,2092,1,0,0,0,2139,2094,1,0,0,0,2139,2095,1,0,0,0,2139,2096,1,0,
  	0,0,2139,2097,1,0,0,0,2139,2098,1,0,0,0,2139,2111,1,0,0,0,2139,2123,1,
  	0,0,0,2139,2124,1,0,0,0,2139,2128,1,0,0,0,2139,2132,1,0,0,0,2139,2134,
  	1,0,0,0,2139,2136,1,0,0,0,2139,2137,1,0,0,0,2139,2138,1,0,0,0,2140,2164,
  	1,0,0,0,2141,2142,10,15,0,0,2142,2143,5,216,0,0,2143,2144,5,420,0,0,2144,
  	2145,5,441,0,0,2145,2163,3,208,104,16,2146,2147,10,8,0,0,2147,2148,7,
  	31,0,0,2148,2163,3,208,104,9,2149,2150,10,6,0,0,2150,2151,7,32,0,0,2151,
  	2163,3,208,104,7,2152,2153,10,5,0,0,2153,2154,3,384,192,0,2154,2155,3,
  	208,104,6,2155,2163,1,0,0,0,2156,2157,10,16,0,0,2157,2158,5,26,0,0,2158,
  	2163,3,380,190,0,2159,2160,10,1,0,0,2160,2161,5,467,0,0,2161,2163,3,210,
  	105,0,2162,2141,1,0,0,0,2162,2146,1,0,0,0,2162,2149,1,0,0,0,2162,2152,
  	1,0,0,0,2162,2156,1,0,0,0,2162,2159,1,0,0,0,2163,2166,1,0,0,0,2164,2162,
  	1,0,0,0,2164,2165,1,0,0,0,2165,209,1,0,0,0,2166,2164,1,0,0,0,2167,2168,
  	3,212,106,0,2168,2170,5,472,0,0,2169,2171,3,316,158,0,2170,2169,1,0,0,
  	0,2170,2171,1,0,0,0,2171,2172,1,0,0,0,2172,2173,5,473,0,0,2173,2187,1,
  	0,0,0,2174,2175,5,338,0,0,2175,2177,5,472,0,0,2176,2178,3,316,158,0,2177,
  	2176,1,0,0,0,2177,2178,1,0,0,0,2178,2179,1,0,0,0,2179,2180,5,473,0,0,
  	2180,2181,5,6,0,0,2181,2182,3,380,190,0,2182,2183,5,472,0,0,2183,2184,
  	3,380,190,0,2184,2185,5,473,0,0,2185,2187,1,0,0,0,2186,2167,1,0,0,0,2186,
  	2174,1,0,0,0,2187,211,1,0,0,0,2188,2189,7,33,0,0,2189,213,1,0,0,0,2190,
  	2199,5,113,0,0,2191,2199,3,376,188,0,2192,2199,3,294,147,0,2193,2199,
  	5,448,0,0,2194,2195,5,472,0,0,2195,2196,3,214,107,0,2196,2197,5,473,0,
  	0,2197,2199,1,0,0,0,2198,2190,1,0,0,0,2198,2191,1,0,0,0,2198,2192,1,0,
  	0,0,2198,2193,1,0,0,0,2198,2194,1,0,0,0,2199,215,1,0,0,0,2200,2201,3,
  	52,26,0,2201,217,1,0,0,0,2202,2205,5,203,0,0,2203,2204,5,440,0,0,2204,
  	2206,5,474,0,0,2205,2203,1,0,0,0,2205,2206,1,0,0,0,2206,2207,1,0,0,0,
  	2207,2212,3,220,110,0,2208,2209,5,474,0,0,2209,2211,3,220,110,0,2210,
  	2208,1,0,0,0,2211,2214,1,0,0,0,2212,2210,1,0,0,0,2212,2213,1,0,0,0,2213,
  	219,1,0,0,0,2214,2212,1,0,0,0,2215,2220,3,380,190,0,2216,2217,5,472,0,
  	0,2217,2218,3,362,181,0,2218,2219,5,473,0,0,2219,2221,1,0,0,0,2220,2216,
  	1,0,0,0,2220,2221,1,0,0,0,2221,2222,1,0,0,0,2222,2223,5,6,0,0,2223,2224,
  	5,472,0,0,2224,2225,3,52,26,0,2225,2226,5,473,0,0,2226,221,1,0,0,0,2227,
  	2230,3,360,180,0,2228,2230,5,448,0,0,2229,2227,1,0,0,0,2229,2228,1,0,
  	0,0,2230,2233,1,0,0,0,2231,2234,5,455,0,0,2232,2234,3,386,193,0,2233,
  	2231,1,0,0,0,2233,2232,1,0,0,0,2234,2235,1,0,0,0,2235,2244,3,208,104,
  	0,2236,2237,3,380,190,0,2237,2238,5,467,0,0,2238,2239,3,380,190,0,2239,
  	2240,5,472,0,0,2240,2241,3,316,158,0,2241,2242,5,473,0,0,2242,2244,1,
  	0,0,0,2243,2229,1,0,0,0,2243,2236,1,0,0,0,2244,223,1,0,0,0,2245,2250,
  	3,226,113,0,2246,2247,5,474,0,0,2247,2249,3,226,113,0,2248,2246,1,0,0,
  	0,2249,2252,1,0,0,0,2250,2248,1,0,0,0,2250,2251,1,0,0,0,2251,225,1,0,
  	0,0,2252,2250,1,0,0,0,2253,2254,6,113,-1,0,2254,2255,3,228,114,0,2255,
  	2264,1,0,0,0,2256,2257,10,3,0,0,2257,2258,5,4,0,0,2258,2263,3,226,113,
  	4,2259,2260,10,2,0,0,2260,2261,5,126,0,0,2261,2263,3,226,113,3,2262,2256,
  	1,0,0,0,2262,2259,1,0,0,0,2263,2266,1,0,0,0,2264,2262,1,0,0,0,2264,2265,
  	1,0,0,0,2265,227,1,0,0,0,2266,2264,1,0,0,0,2267,2268,5,112,0,0,2268,2326,
  	3,228,114,0,2269,2270,5,64,0,0,2270,2271,5,472,0,0,2271,2272,3,216,108,
  	0,2272,2273,5,473,0,0,2273,2326,1,0,0,0,2274,2275,3,208,104,0,2275,2276,
  	3,384,192,0,2276,2277,3,208,104,0,2277,2326,1,0,0,0,2278,2279,3,208,104,
  	0,2279,2280,3,384,192,0,2280,2281,7,34,0,0,2281,2282,5,472,0,0,2282,2283,
  	3,216,108,0,2283,2284,5,473,0,0,2284,2326,1,0,0,0,2285,2287,3,208,104,
  	0,2286,2288,5,112,0,0,2287,2286,1,0,0,0,2287,2288,1,0,0,0,2288,2289,1,
  	0,0,0,2289,2290,5,11,0,0,2290,2291,3,208,104,0,2291,2292,5,4,0,0,2292,
  	2293,3,208,104,0,2293,2326,1,0,0,0,2294,2296,3,208,104,0,2295,2297,5,
  	112,0,0,2296,2295,1,0,0,0,2296,2297,1,0,0,0,2297,2298,1,0,0,0,2298,2299,
  	5,89,0,0,2299,2302,5,472,0,0,2300,2303,3,216,108,0,2301,2303,3,316,158,
  	0,2302,2300,1,0,0,0,2302,2301,1,0,0,0,2303,2304,1,0,0,0,2304,2305,5,473,
  	0,0,2305,2326,1,0,0,0,2306,2308,3,208,104,0,2307,2309,5,112,0,0,2308,
  	2307,1,0,0,0,2308,2309,1,0,0,0,2309,2310,1,0,0,0,2310,2311,5,101,0,0,
  	2311,2314,3,208,104,0,2312,2313,5,61,0,0,2313,2315,3,208,104,0,2314,2312,
  	1,0,0,0,2314,2315,1,0,0,0,2315,2326,1,0,0,0,2316,2317,3,208,104,0,2317,
  	2318,5,96,0,0,2318,2319,3,370,185,0,2319,2326,1,0,0,0,2320,2321,5,472,
  	0,0,2321,2322,3,226,113,0,2322,2323,5,473,0,0,2323,2326,1,0,0,0,2324,
  	2326,5,449,0,0,2325,2267,1,0,0,0,2325,2269,1,0,0,0,2325,2274,1,0,0,0,
  	2325,2278,1,0,0,0,2325,2285,1,0,0,0,2325,2294,1,0,0,0,2325,2306,1,0,0,
  	0,2325,2316,1,0,0,0,2325,2320,1,0,0,0,2325,2324,1,0,0,0,2326,229,1,0,
  	0,0,2327,2328,6,115,-1,0,2328,2329,5,472,0,0,2329,2330,3,230,115,0,2330,
  	2331,5,473,0,0,2331,2334,1,0,0,0,2332,2334,3,236,118,0,2333,2327,1,0,
  	0,0,2333,2332,1,0,0,0,2334,2341,1,0,0,0,2335,2336,10,2,0,0,2336,2337,
  	3,232,116,0,2337,2338,3,230,115,3,2338,2340,1,0,0,0,2339,2335,1,0,0,0,
  	2340,2343,1,0,0,0,2341,2339,1,0,0,0,2341,2342,1,0,0,0,2342,231,1,0,0,
  	0,2343,2341,1,0,0,0,2344,2346,5,188,0,0,2345,2347,5,2,0,0,2346,2345,1,
  	0,0,0,2346,2347,1,0,0,0,2347,2351,1,0,0,0,2348,2351,5,62,0,0,2349,2351,
  	5,94,0,0,2350,2344,1,0,0,0,2350,2348,1,0,0,0,2350,2349,1,0,0,0,2351,233,
  	1,0,0,0,2352,2353,5,472,0,0,2353,2354,3,234,117,0,2354,2355,5,473,0,0,
  	2355,2360,1,0,0,0,2356,2360,3,230,115,0,2357,2360,3,208,104,0,2358,2360,
  	3,314,157,0,2359,2352,1,0,0,0,2359,2356,1,0,0,0,2359,2357,1,0,0,0,2359,
  	2358,1,0,0,0,2360,235,1,0,0,0,2361,2363,5,160,0,0,2362,2364,7,35,0,0,
  	2363,2362,1,0,0,0,2363,2364,1,0,0,0,2364,2366,1,0,0,0,2365,2367,3,242,
  	121,0,2366,2365,1,0,0,0,2366,2367,1,0,0,0,2367,2368,1,0,0,0,2368,2371,
  	3,264,132,0,2369,2370,5,95,0,0,2370,2372,3,352,176,0,2371,2369,1,0,0,
  	0,2371,2372,1,0,0,0,2372,2375,1,0,0,0,2373,2374,5,77,0,0,2374,2376,3,
  	268,134,0,2375,2373,1,0,0,0,2375,2376,1,0,0,0,2376,2383,1,0,0,0,2377,
  	2378,5,37,0,0,2378,2379,5,214,0,0,2379,2381,3,234,117,0,2380,2382,3,60,
  	30,0,2381,2380,1,0,0,0,2381,2382,1,0,0,0,2382,2384,1,0,0,0,2383,2377,
  	1,0,0,0,2383,2384,1,0,0,0,2384,2387,1,0,0,0,2385,2386,5,201,0,0,2386,
  	2388,3,226,113,0,2387,2385,1,0,0,0,2387,2388,1,0,0,0,2388,2399,1,0,0,
  	0,2389,2390,5,82,0,0,2390,2391,5,15,0,0,2391,2396,3,256,128,0,2392,2393,
  	5,474,0,0,2393,2395,3,256,128,0,2394,2392,1,0,0,0,2395,2398,1,0,0,0,2396,
  	2394,1,0,0,0,2396,2397,1,0,0,0,2397,2400,1,0,0,0,2398,2396,1,0,0,0,2399,
  	2389,1,0,0,0,2399,2400,1,0,0,0,2400,2402,1,0,0,0,2401,2403,3,238,119,
  	0,2402,2401,1,0,0,0,2402,2403,1,0,0,0,2403,2406,1,0,0,0,2404,2405,5,203,
  	0,0,2405,2407,7,36,0,0,2406,2404,1,0,0,0,2406,2407,1,0,0,0,2407,2410,
  	1,0,0,0,2408,2409,5,83,0,0,2409,2411,3,226,113,0,2410,2408,1,0,0,0,2410,
  	2411,1,0,0,0,2411,237,1,0,0,0,2412,2413,5,82,0,0,2413,2414,5,15,0,0,2414,
  	2415,5,292,0,0,2415,2416,5,395,0,0,2416,2417,5,472,0,0,2417,2422,3,240,
  	120,0,2418,2419,5,474,0,0,2419,2421,3,240,120,0,2420,2418,1,0,0,0,2421,
  	2424,1,0,0,0,2422,2420,1,0,0,0,2422,2423,1,0,0,0,2423,2425,1,0,0,0,2424,
  	2422,1,0,0,0,2425,2426,5,473,0,0,2426,239,1,0,0,0,2427,2428,5,472,0,0,
  	2428,2442,5,473,0,0,2429,2442,3,256,128,0,2430,2431,5,472,0,0,2431,2436,
  	3,256,128,0,2432,2433,5,474,0,0,2433,2435,3,256,128,0,2434,2432,1,0,0,
  	0,2435,2438,1,0,0,0,2436,2434,1,0,0,0,2436,2437,1,0,0,0,2437,2439,1,0,
  	0,0,2438,2436,1,0,0,0,2439,2440,5,473,0,0,2440,2442,1,0,0,0,2441,2427,
  	1,0,0,0,2441,2429,1,0,0,0,2441,2430,1,0,0,0,2442,241,1,0,0,0,2443,2444,
  	5,179,0,0,2444,2446,3,208,104,0,2445,2447,5,131,0,0,2446,2445,1,0,0,0,
  	2446,2447,1,0,0,0,2447,2450,1,0,0,0,2448,2449,5,203,0,0,2449,2451,5,419,
  	0,0,2450,2448,1,0,0,0,2450,2451,1,0,0,0,2451,243,1,0,0,0,2452,2453,5,
  	179,0,0,2453,2454,5,472,0,0,2454,2455,3,208,104,0,2455,2457,5,473,0,0,
  	2456,2458,5,131,0,0,2457,2456,1,0,0,0,2457,2458,1,0,0,0,2458,245,1,0,
  	0,0,2459,2460,5,127,0,0,2460,2461,5,15,0,0,2461,2466,3,254,127,0,2462,
  	2463,5,474,0,0,2463,2465,3,254,127,0,2464,2462,1,0,0,0,2465,2468,1,0,
  	0,0,2466,2464,1,0,0,0,2466,2467,1,0,0,0,2467,2475,1,0,0,0,2468,2466,1,
  	0,0,0,2469,2470,5,347,0,0,2470,2471,3,208,104,0,2471,2473,7,37,0,0,2472,
  	2474,3,248,124,0,2473,2472,1,0,0,0,2473,2474,1,0,0,0,2474,2476,1,0,0,
  	0,2475,2469,1,0,0,0,2475,2476,1,0,0,0,2476,247,1,0,0,0,2477,2478,5,68,
  	0,0,2478,2479,7,38,0,0,2479,2480,3,208,104,0,2480,2481,7,37,0,0,2481,
  	2482,5,349,0,0,2482,249,1,0,0,0,2483,2484,5,72,0,0,2484,2503,5,13,0,0,
  	2485,2486,5,72,0,0,2486,2487,5,439,0,0,2487,2489,5,217,0,0,2488,2490,
  	3,252,126,0,2489,2488,1,0,0,0,2489,2490,1,0,0,0,2490,2503,1,0,0,0,2491,
  	2492,5,72,0,0,2492,2493,5,439,0,0,2493,2497,5,359,0,0,2494,2495,5,472,
  	0,0,2495,2496,5,451,0,0,2496,2498,5,473,0,0,2497,2494,1,0,0,0,2497,2498,
  	1,0,0,0,2498,2500,1,0,0,0,2499,2501,3,252,126,0,2500,2499,1,0,0,0,2500,
  	2501,1,0,0,0,2501,2503,1,0,0,0,2502,2483,1,0,0,0,2502,2485,1,0,0,0,2502,
  	2491,1,0,0,0,2503,251,1,0,0,0,2504,2509,5,474,0,0,2505,2506,5,452,0,0,
  	2506,2510,5,225,0,0,2507,2510,5,427,0,0,2508,2510,5,382,0,0,2509,2505,
  	1,0,0,0,2509,2507,1,0,0,0,2509,2508,1,0,0,0,2510,253,1,0,0,0,2511,2513,
  	3,208,104,0,2512,2514,7,5,0,0,2513,2512,1,0,0,0,2513,2514,1,0,0,0,2514,
  	255,1,0,0,0,2515,2516,3,208,104,0,2516,257,1,0,0,0,2517,2518,5,125,0,
  	0,2518,2519,5,472,0,0,2519,2524,3,260,130,0,2520,2521,5,474,0,0,2521,
  	2523,3,260,130,0,2522,2520,1,0,0,0,2523,2526,1,0,0,0,2524,2522,1,0,0,
  	0,2524,2525,1,0,0,0,2525,2527,1,0,0,0,2526,2524,1,0,0,0,2527,2528,5,473,
  	0,0,2528,259,1,0,0,0,2529,2530,5,276,0,0,2530,2575,5,449,0,0,2531,2532,
  	7,39,0,0,2532,2575,5,82,0,0,2533,2534,7,40,0,0,2534,2575,5,188,0,0,2535,
  	2536,7,41,0,0,2536,2575,5,97,0,0,2537,2538,5,275,0,0,2538,2575,5,436,
  	0,0,2539,2540,5,285,0,0,2540,2575,5,127,0,0,2541,2575,5,298,0,0,2542,
  	2543,5,309,0,0,2543,2575,5,133,0,0,2544,2545,5,310,0,0,2545,2575,5,133,
  	0,0,2546,2547,5,323,0,0,2547,2575,5,449,0,0,2548,2549,5,324,0,0,2549,
  	2575,5,449,0,0,2550,2551,5,351,0,0,2551,2552,5,72,0,0,2552,2553,5,472,
  	0,0,2553,2558,3,262,131,0,2554,2555,5,474,0,0,2555,2557,3,262,131,0,2556,
  	2554,1,0,0,0,2557,2560,1,0,0,0,2558,2556,1,0,0,0,2558,2559,1,0,0,0,2559,
  	2561,1,0,0,0,2560,2558,1,0,0,0,2561,2562,5,473,0,0,2562,2575,1,0,0,0,
  	2563,2564,5,351,0,0,2564,2565,5,72,0,0,2565,2575,5,431,0,0,2566,2567,
  	5,356,0,0,2567,2575,7,16,0,0,2568,2575,5,373,0,0,2569,2570,5,380,0,0,
  	2570,2575,5,133,0,0,2571,2572,5,193,0,0,2572,2573,5,133,0,0,2573,2575,
  	5,451,0,0,2574,2529,1,0,0,0,2574,2531,1,0,0,0,2574,2533,1,0,0,0,2574,
  	2535,1,0,0,0,2574,2537,1,0,0,0,2574,2539,1,0,0,0,2574,2541,1,0,0,0,2574,
  	2542,1,0,0,0,2574,2544,1,0,0,0,2574,2546,1,0,0,0,2574,2548,1,0,0,0,2574,
  	2550,1,0,0,0,2574,2563,1,0,0,0,2574,2566,1,0,0,0,2574,2568,1,0,0,0,2574,
  	2569,1,0,0,0,2574,2571,1,0,0,0,2575,261,1,0,0,0,2576,2580,5,448,0,0,2577,
  	2581,5,431,0,0,2578,2579,5,455,0,0,2579,2581,3,376,188,0,2580,2577,1,
  	0,0,0,2580,2578,1,0,0,0,2581,263,1,0,0,0,2582,2587,3,266,133,0,2583,2584,
  	5,474,0,0,2584,2586,3,266,133,0,2585,2583,1,0,0,0,2586,2589,1,0,0,0,2587,
  	2585,1,0,0,0,2587,2588,1,0,0,0,2588,265,1,0,0,0,2589,2587,1,0,0,0,2590,
  	2591,3,352,176,0,2591,2592,5,467,0,0,2592,2594,1,0,0,0,2593,2590,1,0,
  	0,0,2593,2594,1,0,0,0,2594,2598,1,0,0,0,2595,2599,3,312,156,0,2596,2597,
  	5,471,0,0,2597,2599,7,42,0,0,2598,2595,1,0,0,0,2598,2596,1,0,0,0,2599,
  	2612,1,0,0,0,2600,2601,3,310,155,0,2601,2602,5,455,0,0,2602,2603,3,208,
  	104,0,2603,2612,1,0,0,0,2604,2609,3,208,104,0,2605,2607,5,6,0,0,2606,
  	2605,1,0,0,0,2606,2607,1,0,0,0,2607,2608,1,0,0,0,2608,2610,3,310,155,
  	0,2609,2606,1,0,0,0,2609,2610,1,0,0,0,2610,2612,1,0,0,0,2611,2593,1,0,
  	0,0,2611,2600,1,0,0,0,2611,2604,1,0,0,0,2612,267,1,0,0,0,2613,2618,3,
  	270,135,0,2614,2615,5,474,0,0,2615,2617,3,270,135,0,2616,2614,1,0,0,0,
  	2617,2620,1,0,0,0,2618,2616,1,0,0,0,2618,2619,1,0,0,0,2619,269,1,0,0,
  	0,2620,2618,1,0,0,0,2621,2622,6,135,-1,0,2622,2623,5,472,0,0,2623,2624,
  	3,270,135,0,2624,2625,5,473,0,0,2625,2628,1,0,0,0,2626,2628,3,272,136,
  	0,2627,2621,1,0,0,0,2627,2626,1,0,0,0,2628,2646,1,0,0,0,2629,2630,10,
  	3,0,0,2630,2631,5,37,0,0,2631,2632,5,97,0,0,2632,2645,3,270,135,4,2633,
  	2634,10,2,0,0,2634,2635,7,43,0,0,2635,2636,5,214,0,0,2636,2645,3,270,
  	135,3,2637,2638,10,4,0,0,2638,2639,3,284,142,0,2639,2640,5,97,0,0,2640,
  	2641,3,270,135,0,2641,2642,5,119,0,0,2642,2643,3,226,113,0,2643,2645,
  	1,0,0,0,2644,2629,1,0,0,0,2644,2633,1,0,0,0,2644,2637,1,0,0,0,2645,2648,
  	1,0,0,0,2646,2644,1,0,0,0,2646,2647,1,0,0,0,2647,271,1,0,0,0,2648,2646,
  	1,0,0,0,2649,2651,3,352,176,0,2650,2652,3,274,137,0,2651,2650,1,0,0,0,
  	2651,2652,1,0,0,0,2652,2654,1,0,0,0,2653,2655,3,280,140,0,2654,2653,1,
  	0,0,0,2654,2655,1,0,0,0,2655,2657,1,0,0,0,2656,2658,3,300,150,0,2657,
  	2656,1,0,0,0,2657,2658,1,0,0,0,2658,2692,1,0,0,0,2659,2661,3,288,144,
  	0,2660,2662,3,280,140,0,2661,2660,1,0,0,0,2661,2662,1,0,0,0,2662,2692,
  	1,0,0,0,2663,2668,3,292,146,0,2664,2666,3,280,140,0,2665,2667,3,308,154,
  	0,2666,2665,1,0,0,0,2666,2667,1,0,0,0,2667,2669,1,0,0,0,2668,2664,1,0,
  	0,0,2668,2669,1,0,0,0,2669,2692,1,0,0,0,2670,2672,3,282,141,0,2671,2673,
  	3,280,140,0,2672,2671,1,0,0,0,2672,2673,1,0,0,0,2673,2692,1,0,0,0,2674,
  	2676,3,294,147,0,2675,2677,3,280,140,0,2676,2675,1,0,0,0,2676,2677,1,
  	0,0,0,2677,2692,1,0,0,0,2678,2680,5,448,0,0,2679,2681,3,280,140,0,2680,
  	2679,1,0,0,0,2680,2681,1,0,0,0,2681,2692,1,0,0,0,2682,2683,5,448,0,0,
  	2683,2684,5,467,0,0,2684,2689,3,294,147,0,2685,2687,3,280,140,0,2686,
  	2688,3,308,154,0,2687,2686,1,0,0,0,2687,2688,1,0,0,0,2688,2690,1,0,0,
  	0,2689,2685,1,0,0,0,2689,2690,1,0,0,0,2690,2692,1,0,0,0,2691,2649,1,0,
  	0,0,2691,2659,1,0,0,0,2691,2663,1,0,0,0,2691,2670,1,0,0,0,2691,2674,1,
  	0,0,0,2691,2678,1,0,0,0,2691,2682,1,0,0,0,2692,273,1,0,0,0,2693,2695,
  	5,175,0,0,2694,2696,5,172,0,0,2695,2694,1,0,0,0,2695,2696,1,0,0,0,2696,
  	2697,1,0,0,0,2697,2698,5,472,0,0,2698,2700,3,276,138,0,2699,2701,7,6,
  	0,0,2700,2699,1,0,0,0,2700,2701,1,0,0,0,2701,2702,1,0,0,0,2702,2705,5,
  	473,0,0,2703,2704,5,378,0,0,2704,2706,3,278,139,0,2705,2703,1,0,0,0,2705,
  	2706,1,0,0,0,2706,275,1,0,0,0,2707,2708,5,449,0,0,2708,277,1,0,0,0,2709,
  	2710,5,449,0,0,2710,279,1,0,0,0,2711,2713,5,6,0,0,2712,2711,1,0,0,0,2712,
  	2713,1,0,0,0,2713,2714,1,0,0,0,2714,2715,3,380,190,0,2715,281,1,0,0,0,
  	2716,2717,5,19,0,0,2717,2718,5,472,0,0,2718,2719,5,20,0,0,2719,2720,3,
  	352,176,0,2720,2721,5,474,0,0,2721,2722,7,44,0,0,2722,2723,5,473,0,0,
  	2723,283,1,0,0,0,2724,2726,5,92,0,0,2725,2724,1,0,0,0,2725,2726,1,0,0,
  	0,2726,2732,1,0,0,0,2727,2729,7,45,0,0,2728,2730,5,128,0,0,2729,2728,
  	1,0,0,0,2729,2730,1,0,0,0,2730,2732,1,0,0,0,2731,2725,1,0,0,0,2731,2727,
  	1,0,0,0,2732,2734,1,0,0,0,2733,2735,7,46,0,0,2734,2733,1,0,0,0,2734,2735,
  	1,0,0,0,2735,285,1,0,0,0,2736,2738,3,352,176,0,2737,2739,3,300,150,0,
  	2738,2737,1,0,0,0,2738,2739,1,0,0,0,2739,287,1,0,0,0,2740,2741,5,123,
  	0,0,2741,2742,5,472,0,0,2742,2743,5,451,0,0,2743,2744,5,474,0,0,2744,
  	2745,5,451,0,0,2745,2746,5,474,0,0,2746,2747,5,451,0,0,2747,2767,5,473,
  	0,0,2748,2749,5,123,0,0,2749,2750,5,472,0,0,2750,2751,5,14,0,0,2751,2752,
  	5,451,0,0,2752,2762,5,474,0,0,2753,2758,3,290,145,0,2754,2755,5,474,0,
  	0,2755,2757,3,290,145,0,2756,2754,1,0,0,0,2757,2760,1,0,0,0,2758,2756,
  	1,0,0,0,2758,2759,1,0,0,0,2759,2763,1,0,0,0,2760,2758,1,0,0,0,2761,2763,
  	3,380,190,0,2762,2753,1,0,0,0,2762,2761,1,0,0,0,2763,2764,1,0,0,0,2764,
  	2765,5,473,0,0,2765,2767,1,0,0,0,2766,2740,1,0,0,0,2766,2748,1,0,0,0,
  	2767,289,1,0,0,0,2768,2769,3,380,190,0,2769,2770,5,455,0,0,2770,2771,
  	7,47,0,0,2771,291,1,0,0,0,2772,2784,3,216,108,0,2773,2774,5,472,0,0,2774,
  	2775,3,216,108,0,2775,2776,5,473,0,0,2776,2784,1,0,0,0,2777,2778,5,472,
  	0,0,2778,2779,3,314,157,0,2779,2780,5,473,0,0,2780,2781,3,280,140,0,2781,
  	2782,3,308,154,0,2782,2784,1,0,0,0,2783,2772,1,0,0,0,2783,2773,1,0,0,
  	0,2783,2777,1,0,0,0,2784,293,1,0,0,0,2785,2959,3,324,162,0,2786,2959,
  	3,326,163,0,2787,2788,3,372,186,0,2788,2790,5,472,0,0,2789,2791,3,316,
  	158,0,2790,2789,1,0,0,0,2790,2791,1,0,0,0,2791,2792,1,0,0,0,2792,2793,
  	5,473,0,0,2793,2959,1,0,0,0,2794,2959,3,322,161,0,2795,2796,5,227,0,0,
  	2796,2797,5,472,0,0,2797,2798,5,477,0,0,2798,2959,5,473,0,0,2799,2800,
  	5,230,0,0,2800,2801,5,472,0,0,2801,2802,3,208,104,0,2802,2803,5,6,0,0,
  	2803,2804,3,410,205,0,2804,2805,5,473,0,0,2805,2959,1,0,0,0,2806,2807,
  	5,35,0,0,2807,2808,5,472,0,0,2808,2809,3,410,205,0,2809,2810,5,474,0,
  	0,2810,2813,3,208,104,0,2811,2812,5,474,0,0,2812,2814,3,208,104,0,2813,
  	2811,1,0,0,0,2813,2814,1,0,0,0,2814,2815,1,0,0,0,2815,2816,5,473,0,0,
  	2816,2959,1,0,0,0,2817,2818,5,235,0,0,2818,2819,5,472,0,0,2819,2820,5,
  	477,0,0,2820,2959,5,473,0,0,2821,2822,5,25,0,0,2822,2823,5,472,0,0,2823,
  	2824,3,316,158,0,2824,2825,5,473,0,0,2825,2959,1,0,0,0,2826,2959,5,41,
  	0,0,2827,2959,5,42,0,0,2828,2829,5,250,0,0,2829,2830,5,472,0,0,2830,2831,
  	5,450,0,0,2831,2832,5,474,0,0,2832,2833,3,208,104,0,2833,2834,5,474,0,
  	0,2834,2835,3,208,104,0,2835,2836,5,473,0,0,2836,2959,1,0,0,0,2837,2838,
  	5,251,0,0,2838,2839,5,472,0,0,2839,2840,5,450,0,0,2840,2841,5,474,0,0,
  	2841,2842,3,208,104,0,2842,2843,5,474,0,0,2843,2844,3,208,104,0,2844,
  	2845,5,473,0,0,2845,2959,1,0,0,0,2846,2847,5,252,0,0,2847,2848,5,472,
  	0,0,2848,2849,5,450,0,0,2849,2850,5,474,0,0,2850,2851,3,208,104,0,2851,
  	2852,5,473,0,0,2852,2959,1,0,0,0,2853,2854,5,253,0,0,2854,2855,5,472,
  	0,0,2855,2856,5,450,0,0,2856,2857,5,474,0,0,2857,2858,3,208,104,0,2858,
  	2859,5,473,0,0,2859,2959,1,0,0,0,2860,2861,5,255,0,0,2861,2862,5,472,
  	0,0,2862,2863,3,208,104,0,2863,2864,5,474,0,0,2864,2865,3,208,104,0,2865,
  	2866,5,474,0,0,2866,2867,3,208,104,0,2867,2868,5,474,0,0,2868,2869,3,
  	208,104,0,2869,2870,5,474,0,0,2870,2871,3,208,104,0,2871,2872,5,474,0,
  	0,2872,2873,3,208,104,0,2873,2874,5,474,0,0,2874,2875,3,208,104,0,2875,
  	2876,5,474,0,0,2876,2877,3,208,104,0,2877,2878,5,474,0,0,2878,2879,3,
  	208,104,0,2879,2880,5,474,0,0,2880,2881,3,208,104,0,2881,2882,5,473,0,
  	0,2882,2959,1,0,0,0,2883,2884,5,84,0,0,2884,2885,5,472,0,0,2885,2888,
  	3,410,205,0,2886,2887,5,474,0,0,2887,2889,5,449,0,0,2888,2886,1,0,0,0,
  	2888,2889,1,0,0,0,2889,2892,1,0,0,0,2890,2891,5,474,0,0,2891,2893,5,449,
  	0,0,2892,2890,1,0,0,0,2892,2893,1,0,0,0,2893,2894,1,0,0,0,2894,2895,5,
  	473,0,0,2895,2959,1,0,0,0,2896,2897,5,87,0,0,2897,2898,5,472,0,0,2898,
  	2899,3,226,113,0,2899,2900,5,474,0,0,2900,2901,3,208,104,0,2901,2902,
  	5,474,0,0,2902,2903,3,208,104,0,2903,2904,5,473,0,0,2904,2959,1,0,0,0,
  	2905,2959,5,330,0,0,2906,2907,5,114,0,0,2907,2908,5,472,0,0,2908,2909,
  	3,208,104,0,2909,2910,5,474,0,0,2910,2911,3,208,104,0,2911,2912,5,473,
  	0,0,2912,2959,1,0,0,0,2913,2914,5,357,0,0,2914,2915,5,472,0,0,2915,2916,
  	3,208,104,0,2916,2917,5,6,0,0,2917,2920,3,410,205,0,2918,2919,5,433,0,
  	0,2919,2921,3,208,104,0,2920,2918,1,0,0,0,2920,2921,1,0,0,0,2921,2922,
  	1,0,0,0,2922,2923,5,473,0,0,2923,2959,1,0,0,0,2924,2959,5,164,0,0,2925,
  	2926,5,409,0,0,2926,2927,5,472,0,0,2927,2928,3,208,104,0,2928,2929,5,
  	474,0,0,2929,2930,3,208,104,0,2930,2931,5,473,0,0,2931,2959,1,0,0,0,2932,
  	2959,5,173,0,0,2933,2934,5,185,0,0,2934,2935,5,472,0,0,2935,2936,3,410,
  	205,0,2936,2937,5,474,0,0,2937,2938,3,208,104,0,2938,2939,5,473,0,0,2939,
  	2959,1,0,0,0,2940,2941,5,184,0,0,2941,2942,5,472,0,0,2942,2943,3,208,
  	104,0,2943,2944,5,6,0,0,2944,2945,3,410,205,0,2945,2946,5,473,0,0,2946,
  	2959,1,0,0,0,2947,2948,5,186,0,0,2948,2949,5,472,0,0,2949,2950,3,208,
  	104,0,2950,2951,5,6,0,0,2951,2954,3,410,205,0,2952,2953,5,433,0,0,2953,
  	2955,3,208,104,0,2954,2952,1,0,0,0,2954,2955,1,0,0,0,2955,2956,1,0,0,
  	0,2956,2957,5,473,0,0,2957,2959,1,0,0,0,2958,2785,1,0,0,0,2958,2786,1,
  	0,0,0,2958,2787,1,0,0,0,2958,2794,1,0,0,0,2958,2795,1,0,0,0,2958,2799,
  	1,0,0,0,2958,2806,1,0,0,0,2958,2817,1,0,0,0,2958,2821,1,0,0,0,2958,2826,
  	1,0,0,0,2958,2827,1,0,0,0,2958,2828,1,0,0,0,2958,2837,1,0,0,0,2958,2846,
  	1,0,0,0,2958,2853,1,0,0,0,2958,2860,1,0,0,0,2958,2883,1,0,0,0,2958,2896,
  	1,0,0,0,2958,2905,1,0,0,0,2958,2906,1,0,0,0,2958,2913,1,0,0,0,2958,2924,
  	1,0,0,0,2958,2925,1,0,0,0,2958,2932,1,0,0,0,2958,2933,1,0,0,0,2958,2940,
  	1,0,0,0,2958,2947,1,0,0,0,2959,295,1,0,0,0,2960,2961,5,200,0,0,2961,2962,
  	3,208,104,0,2962,2963,5,177,0,0,2963,2964,3,208,104,0,2964,297,1,0,0,
  	0,2965,2966,5,200,0,0,2966,2967,3,226,113,0,2967,2968,5,177,0,0,2968,
  	2969,3,208,104,0,2969,299,1,0,0,0,2970,2972,5,203,0,0,2971,2970,1,0,0,
  	0,2971,2972,1,0,0,0,2972,2973,1,0,0,0,2973,2974,5,472,0,0,2974,2979,3,
  	304,152,0,2975,2976,5,474,0,0,2976,2978,3,304,152,0,2977,2975,1,0,0,0,
  	2978,2981,1,0,0,0,2979,2977,1,0,0,0,2979,2980,1,0,0,0,2980,2982,1,0,0,
  	0,2981,2979,1,0,0,0,2982,2983,5,473,0,0,2983,301,1,0,0,0,2984,2985,5,
  	203,0,0,2985,2986,5,472,0,0,2986,2991,3,304,152,0,2987,2988,5,474,0,0,
  	2988,2990,3,304,152,0,2989,2987,1,0,0,0,2990,2993,1,0,0,0,2991,2989,1,
  	0,0,0,2991,2992,1,0,0,0,2992,2994,1,0,0,0,2993,2991,1,0,0,0,2994,2995,
  	5,473,0,0,2995,303,1,0,0,0,2996,2998,5,339,0,0,2997,2996,1,0,0,0,2997,
  	2998,1,0,0,0,2998,3037,1,0,0,0,2999,3000,5,90,0,0,3000,3001,5,472,0,0,
  	3001,3006,3,306,153,0,3002,3003,5,474,0,0,3003,3005,3,306,153,0,3004,
  	3002,1,0,0,0,3005,3008,1,0,0,0,3006,3004,1,0,0,0,3006,3007,1,0,0,0,3007,
  	3009,1,0,0,0,3008,3006,1,0,0,0,3009,3010,5,473,0,0,3010,3038,1,0,0,0,
  	3011,3012,5,90,0,0,3012,3013,5,455,0,0,3013,3038,3,306,153,0,3014,3029,
  	5,73,0,0,3015,3016,5,472,0,0,3016,3017,3,306,153,0,3017,3018,5,472,0,
  	0,3018,3023,5,450,0,0,3019,3020,5,474,0,0,3020,3022,5,450,0,0,3021,3019,
  	1,0,0,0,3022,3025,1,0,0,0,3023,3021,1,0,0,0,3023,3024,1,0,0,0,3024,3026,
  	1,0,0,0,3025,3023,1,0,0,0,3026,3027,5,473,0,0,3027,3028,5,473,0,0,3028,
  	3030,1,0,0,0,3029,3015,1,0,0,0,3029,3030,1,0,0,0,3030,3038,1,0,0,0,3031,
  	3038,5,394,0,0,3032,3038,5,402,0,0,3033,3034,5,403,0,0,3034,3035,5,455,
  	0,0,3035,3038,5,449,0,0,3036,3038,5,450,0,0,3037,2999,1,0,0,0,3037,3011,
  	1,0,0,0,3037,3014,1,0,0,0,3037,3031,1,0,0,0,3037,3032,1,0,0,0,3037,3033,
  	1,0,0,0,3037,3036,1,0,0,0,3037,3038,1,0,0,0,3038,305,1,0,0,0,3039,3042,
  	3,380,190,0,3040,3042,5,449,0,0,3041,3039,1,0,0,0,3041,3040,1,0,0,0,3042,
  	307,1,0,0,0,3043,3044,5,472,0,0,3044,3049,3,310,155,0,3045,3046,5,474,
  	0,0,3046,3048,3,310,155,0,3047,3045,1,0,0,0,3048,3051,1,0,0,0,3049,3047,
  	1,0,0,0,3049,3050,1,0,0,0,3050,3052,1,0,0,0,3051,3049,1,0,0,0,3052,3053,
  	5,473,0,0,3053,309,1,0,0,0,3054,3057,3,380,190,0,3055,3057,5,451,0,0,
  	3056,3054,1,0,0,0,3056,3055,1,0,0,0,3057,311,1,0,0,0,3058,3059,5,477,
  	0,0,3059,313,1,0,0,0,3060,3061,5,195,0,0,3061,3066,3,318,159,0,3062,3063,
  	5,474,0,0,3063,3065,3,318,159,0,3064,3062,1,0,0,0,3065,3068,1,0,0,0,3066,
  	3064,1,0,0,0,3066,3067,1,0,0,0,3067,315,1,0,0,0,3068,3066,1,0,0,0,3069,
  	3074,3,208,104,0,3070,3071,5,474,0,0,3071,3073,3,208,104,0,3072,3070,
  	1,0,0,0,3073,3076,1,0,0,0,3074,3072,1,0,0,0,3074,3075,1,0,0,0,3075,317,
  	1,0,0,0,3076,3074,1,0,0,0,3077,3078,5,472,0,0,3078,3079,3,316,158,0,3079,
  	3080,5,473,0,0,3080,319,1,0,0,0,3081,3082,5,108,0,0,3082,3083,5,196,0,
  	0,3083,3084,5,72,0,0,3084,321,1,0,0,0,3085,3086,3,320,160,0,3086,3087,
  	3,356,178,0,3087,3088,3,330,165,0,3088,323,1,0,0,0,3089,3090,7,48,0,0,
  	3090,3091,5,472,0,0,3091,3092,5,473,0,0,3092,3113,3,330,165,0,3093,3094,
  	7,49,0,0,3094,3095,5,472,0,0,3095,3096,3,208,104,0,3096,3097,5,473,0,
  	0,3097,3098,3,330,165,0,3098,3113,1,0,0,0,3099,3100,7,50,0,0,3100,3101,
  	5,472,0,0,3101,3106,3,208,104,0,3102,3103,5,474,0,0,3103,3105,3,208,104,
  	0,3104,3102,1,0,0,0,3105,3108,1,0,0,0,3106,3104,1,0,0,0,3106,3107,1,0,
  	0,0,3107,3109,1,0,0,0,3108,3106,1,0,0,0,3109,3110,5,473,0,0,3110,3111,
  	3,330,165,0,3111,3113,1,0,0,0,3112,3089,1,0,0,0,3112,3093,1,0,0,0,3112,
  	3099,1,0,0,0,3113,325,1,0,0,0,3114,3115,7,51,0,0,3115,3117,5,472,0,0,
  	3116,3118,3,328,164,0,3117,3116,1,0,0,0,3117,3118,1,0,0,0,3118,3119,1,
  	0,0,0,3119,3120,3,208,104,0,3120,3122,5,473,0,0,3121,3123,3,330,165,0,
  	3122,3121,1,0,0,0,3122,3123,1,0,0,0,3123,3156,1,0,0,0,3124,3125,7,52,
  	0,0,3125,3131,5,472,0,0,3126,3132,5,477,0,0,3127,3129,3,328,164,0,3128,
  	3127,1,0,0,0,3128,3129,1,0,0,0,3129,3130,1,0,0,0,3130,3132,3,208,104,
  	0,3131,3126,1,0,0,0,3131,3128,1,0,0,0,3132,3133,1,0,0,0,3133,3135,5,473,
  	0,0,3134,3136,3,330,165,0,3135,3134,1,0,0,0,3135,3136,1,0,0,0,3136,3156,
  	1,0,0,0,3137,3138,5,236,0,0,3138,3140,5,472,0,0,3139,3141,3,328,164,0,
  	3140,3139,1,0,0,0,3140,3141,1,0,0,0,3141,3142,1,0,0,0,3142,3143,3,208,
  	104,0,3143,3144,5,473,0,0,3144,3156,1,0,0,0,3145,3146,5,292,0,0,3146,
  	3147,5,472,0,0,3147,3148,3,208,104,0,3148,3149,5,473,0,0,3149,3156,1,
  	0,0,0,3150,3151,5,293,0,0,3151,3152,5,472,0,0,3152,3153,3,316,158,0,3153,
  	3154,5,473,0,0,3154,3156,1,0,0,0,3155,3114,1,0,0,0,3155,3124,1,0,0,0,
  	3155,3137,1,0,0,0,3155,3145,1,0,0,0,3155,3150,1,0,0,0,3156,327,1,0,0,
  	0,3157,3158,7,35,0,0,3158,329,1,0,0,0,3159,3160,5,129,0,0,3160,3164,5,
  	472,0,0,3161,3162,5,358,0,0,3162,3163,5,15,0,0,3163,3165,3,316,158,0,
  	3164,3161,1,0,0,0,3164,3165,1,0,0,0,3165,3167,1,0,0,0,3166,3168,3,246,
  	123,0,3167,3166,1,0,0,0,3167,3168,1,0,0,0,3168,3170,1,0,0,0,3169,3171,
  	3,332,166,0,3170,3169,1,0,0,0,3170,3171,1,0,0,0,3171,3172,1,0,0,0,3172,
  	3173,5,473,0,0,3173,331,1,0,0,0,3174,3175,7,53,0,0,3175,3176,3,334,167,
  	0,3176,333,1,0,0,0,3177,3184,3,338,169,0,3178,3179,5,11,0,0,3179,3180,
  	3,336,168,0,3180,3181,5,4,0,0,3181,3182,3,336,168,0,3182,3184,1,0,0,0,
  	3183,3177,1,0,0,0,3183,3178,1,0,0,0,3184,335,1,0,0,0,3185,3188,3,338,
  	169,0,3186,3188,3,340,170,0,3187,3185,1,0,0,0,3187,3186,1,0,0,0,3188,
  	337,1,0,0,0,3189,3190,5,429,0,0,3190,3196,5,362,0,0,3191,3192,5,449,0,
  	0,3192,3196,5,362,0,0,3193,3194,5,38,0,0,3194,3196,5,384,0,0,3195,3189,
  	1,0,0,0,3195,3191,1,0,0,0,3195,3193,1,0,0,0,3196,339,1,0,0,0,3197,3198,
  	5,429,0,0,3198,3202,5,284,0,0,3199,3200,5,449,0,0,3200,3202,5,284,0,0,
  	3201,3197,1,0,0,0,3201,3199,1,0,0,0,3202,341,1,0,0,0,3203,3204,5,280,
  	0,0,3204,3209,3,344,172,0,3205,3206,5,474,0,0,3206,3208,3,344,172,0,3207,
  	3205,1,0,0,0,3208,3211,1,0,0,0,3209,3207,1,0,0,0,3209,3210,1,0,0,0,3210,
  	3238,1,0,0,0,3211,3209,1,0,0,0,3212,3213,5,260,0,0,3213,3216,5,455,0,
  	0,3214,3217,3,380,190,0,3215,3217,5,451,0,0,3216,3214,1,0,0,0,3216,3215,
  	1,0,0,0,3217,3238,1,0,0,0,3218,3219,5,259,0,0,3219,3222,5,455,0,0,3220,
  	3223,3,380,190,0,3221,3223,5,451,0,0,3222,3220,1,0,0,0,3222,3221,1,0,
  	0,0,3223,3238,1,0,0,0,3224,3225,5,335,0,0,3225,3226,5,455,0,0,3226,3238,
  	7,9,0,0,3227,3228,5,423,0,0,3228,3229,5,455,0,0,3229,3238,7,9,0,0,3230,
  	3231,5,426,0,0,3231,3232,5,455,0,0,3232,3238,5,449,0,0,3233,3234,5,258,
  	0,0,3234,3238,7,9,0,0,3235,3236,5,424,0,0,3236,3238,7,9,0,0,3237,3203,
  	1,0,0,0,3237,3212,1,0,0,0,3237,3218,1,0,0,0,3237,3224,1,0,0,0,3237,3227,
  	1,0,0,0,3237,3230,1,0,0,0,3237,3233,1,0,0,0,3237,3235,1,0,0,0,3238,343,
  	1,0,0,0,3239,3246,5,472,0,0,3240,3241,5,340,0,0,3241,3242,5,455,0,0,3242,
  	3247,7,54,0,0,3243,3244,5,265,0,0,3244,3245,5,455,0,0,3245,3247,5,451,
  	0,0,3246,3240,1,0,0,0,3246,3243,1,0,0,0,3247,3248,1,0,0,0,3248,3249,5,
  	473,0,0,3249,345,1,0,0,0,3250,3253,3,348,174,0,3251,3253,3,350,175,0,
  	3252,3250,1,0,0,0,3252,3251,1,0,0,0,3253,347,1,0,0,0,3254,3255,5,278,
  	0,0,3255,3258,3,380,190,0,3256,3257,5,32,0,0,3257,3259,5,280,0,0,3258,
  	3256,1,0,0,0,3258,3259,1,0,0,0,3259,3261,1,0,0,0,3260,3262,5,48,0,0,3261,
  	3260,1,0,0,0,3261,3262,1,0,0,0,3262,3265,1,0,0,0,3263,3264,5,32,0,0,3264,
  	3266,5,327,0,0,3265,3263,1,0,0,0,3265,3266,1,0,0,0,3266,3267,1,0,0,0,
  	3267,3272,3,350,175,0,3268,3269,5,474,0,0,3269,3271,3,350,175,0,3270,
  	3268,1,0,0,0,3271,3274,1,0,0,0,3272,3270,1,0,0,0,3272,3273,1,0,0,0,3273,
  	349,1,0,0,0,3274,3272,1,0,0,0,3275,3276,5,472,0,0,3276,3277,5,334,0,0,
  	3277,3280,5,455,0,0,3278,3281,3,380,190,0,3279,3281,5,451,0,0,3280,3278,
  	1,0,0,0,3280,3279,1,0,0,0,3281,3283,1,0,0,0,3282,3284,5,474,0,0,3283,
  	3282,1,0,0,0,3283,3284,1,0,0,0,3284,3285,1,0,0,0,3285,3286,5,70,0,0,3286,
  	3287,5,455,0,0,3287,3289,5,451,0,0,3288,3290,5,474,0,0,3289,3288,1,0,
  	0,0,3289,3290,1,0,0,0,3290,3297,1,0,0,0,3291,3292,5,400,0,0,3292,3293,
  	5,455,0,0,3293,3295,3,388,194,0,3294,3296,5,474,0,0,3295,3294,1,0,0,0,
  	3295,3296,1,0,0,0,3296,3298,1,0,0,0,3297,3291,1,0,0,0,3297,3298,1,0,0,
  	0,3298,3308,1,0,0,0,3299,3300,5,325,0,0,3300,3303,5,455,0,0,3301,3304,
  	3,388,194,0,3302,3304,5,432,0,0,3303,3301,1,0,0,0,3303,3302,1,0,0,0,3304,
  	3306,1,0,0,0,3305,3307,5,474,0,0,3306,3305,1,0,0,0,3306,3307,1,0,0,0,
  	3307,3309,1,0,0,0,3308,3299,1,0,0,0,3308,3309,1,0,0,0,3309,3316,1,0,0,
  	0,3310,3311,5,279,0,0,3311,3312,5,455,0,0,3312,3314,3,388,194,0,3313,
  	3315,5,474,0,0,3314,3313,1,0,0,0,3314,3315,1,0,0,0,3315,3317,1,0,0,0,
  	3316,3310,1,0,0,0,3316,3317,1,0,0,0,3317,3318,1,0,0,0,3318,3319,5,473,
  	0,0,3319,351,1,0,0,0,3320,3321,3,380,190,0,3321,3322,5,467,0,0,3322,3323,
  	3,380,190,0,3323,3324,5,467,0,0,3324,3325,3,380,190,0,3325,3326,5,467,
  	0,0,3326,3338,1,0,0,0,3327,3328,3,380,190,0,3328,3330,5,467,0,0,3329,
  	3331,3,380,190,0,3330,3329,1,0,0,0,3330,3331,1,0,0,0,3331,3332,1,0,0,
  	0,3332,3333,5,467,0,0,3333,3338,1,0,0,0,3334,3335,3,380,190,0,3335,3336,
  	5,467,0,0,3336,3338,1,0,0,0,3337,3320,1,0,0,0,3337,3327,1,0,0,0,3337,
  	3334,1,0,0,0,3337,3338,1,0,0,0,3338,3339,1,0,0,0,3339,3340,3,380,190,
  	0,3340,353,1,0,0,0,3341,3342,3,380,190,0,3342,3343,5,467,0,0,3343,3345,
  	1,0,0,0,3344,3341,1,0,0,0,3344,3345,1,0,0,0,3345,3346,1,0,0,0,3346,3347,
  	3,380,190,0,3347,355,1,0,0,0,3348,3349,3,380,190,0,3349,3351,5,467,0,
  	0,3350,3352,3,380,190,0,3351,3350,1,0,0,0,3351,3352,1,0,0,0,3352,3353,
  	1,0,0,0,3353,3354,5,467,0,0,3354,3359,1,0,0,0,3355,3356,3,380,190,0,3356,
  	3357,5,467,0,0,3357,3359,1,0,0,0,3358,3348,1,0,0,0,3358,3355,1,0,0,0,
  	3358,3359,1,0,0,0,3359,3360,1,0,0,0,3360,3361,3,380,190,0,3361,357,1,
  	0,0,0,3362,3365,3,352,176,0,3363,3365,5,448,0,0,3364,3362,1,0,0,0,3364,
  	3363,1,0,0,0,3365,359,1,0,0,0,3366,3367,3,352,176,0,3367,3368,5,467,0,
  	0,3368,3370,1,0,0,0,3369,3366,1,0,0,0,3369,3370,1,0,0,0,3370,3371,1,0,
  	0,0,3371,3372,3,380,190,0,3372,361,1,0,0,0,3373,3378,3,380,190,0,3374,
  	3375,5,474,0,0,3375,3377,3,380,190,0,3376,3374,1,0,0,0,3377,3380,1,0,
  	0,0,3378,3376,1,0,0,0,3378,3379,1,0,0,0,3379,363,1,0,0,0,3380,3378,1,
  	0,0,0,3381,3384,3,380,190,0,3382,3384,5,448,0,0,3383,3381,1,0,0,0,3383,
  	3382,1,0,0,0,3384,365,1,0,0,0,3385,3386,7,9,0,0,3386,367,1,0,0,0,3387,
  	3388,7,55,0,0,3388,369,1,0,0,0,3389,3391,5,112,0,0,3390,3389,1,0,0,0,
  	3390,3391,1,0,0,0,3391,3392,1,0,0,0,3392,3393,5,113,0,0,3393,371,1,0,
  	0,0,3394,3413,3,356,178,0,3395,3413,5,152,0,0,3396,3413,5,100,0,0,3397,
  	3413,5,227,0,0,3398,3413,5,235,0,0,3399,3413,5,66,0,0,3400,3413,5,104,
  	0,0,3401,3413,5,105,0,0,3402,3413,5,412,0,0,3403,3413,5,411,0,0,3404,
  	3413,5,383,0,0,3405,3413,5,232,0,0,3406,3413,5,283,0,0,3407,3413,5,361,
  	0,0,3408,3413,5,243,0,0,3409,3413,5,398,0,0,3410,3413,5,414,0,0,3411,
  	3413,5,168,0,0,3412,3394,1,0,0,0,3412,3395,1,0,0,0,3412,3396,1,0,0,0,
  	3412,3397,1,0,0,0,3412,3398,1,0,0,0,3412,3399,1,0,0,0,3412,3400,1,0,0,
  	0,3412,3401,1,0,0,0,3412,3402,1,0,0,0,3412,3403,1,0,0,0,3412,3404,1,0,
  	0,0,3412,3405,1,0,0,0,3412,3406,1,0,0,0,3412,3407,1,0,0,0,3412,3408,1,
  	0,0,0,3412,3409,1,0,0,0,3412,3410,1,0,0,0,3412,3411,1,0,0,0,3413,373,
  	1,0,0,0,3414,3417,5,113,0,0,3415,3417,3,376,188,0,3416,3414,1,0,0,0,3416,
  	3415,1,0,0,0,3417,375,1,0,0,0,3418,3434,5,451,0,0,3419,3434,5,452,0,0,
  	3420,3422,3,378,189,0,3421,3420,1,0,0,0,3421,3422,1,0,0,0,3422,3423,1,
  	0,0,0,3423,3434,5,449,0,0,3424,3426,3,378,189,0,3425,3424,1,0,0,0,3425,
  	3426,1,0,0,0,3426,3427,1,0,0,0,3427,3434,7,56,0,0,3428,3430,3,378,189,
  	0,3429,3428,1,0,0,0,3429,3430,1,0,0,0,3430,3431,1,0,0,0,3431,3432,5,471,
  	0,0,3432,3434,7,57,0,0,3433,3418,1,0,0,0,3433,3419,1,0,0,0,3433,3421,
  	1,0,0,0,3433,3425,1,0,0,0,3433,3429,1,0,0,0,3434,377,1,0,0,0,3435,3436,
  	7,30,0,0,3436,379,1,0,0,0,3437,3441,3,382,191,0,3438,3441,5,446,0,0,3439,
  	3441,5,447,0,0,3440,3437,1,0,0,0,3440,3438,1,0,0,0,3440,3439,1,0,0,0,
  	3441,381,1,0,0,0,3442,3443,7,58,0,0,3443,383,1,0,0,0,3444,3460,5,455,
  	0,0,3445,3460,5,456,0,0,3446,3460,5,457,0,0,3447,3448,5,457,0,0,3448,
  	3460,5,455,0,0,3449,3450,5,456,0,0,3450,3460,5,455,0,0,3451,3452,5,457,
  	0,0,3452,3460,5,456,0,0,3453,3454,5,458,0,0,3454,3460,5,455,0,0,3455,
  	3456,5,458,0,0,3456,3460,5,456,0,0,3457,3458,5,458,0,0,3458,3460,5,457,
  	0,0,3459,3444,1,0,0,0,3459,3445,1,0,0,0,3459,3446,1,0,0,0,3459,3447,1,
  	0,0,0,3459,3449,1,0,0,0,3459,3451,1,0,0,0,3459,3453,1,0,0,0,3459,3455,
  	1,0,0,0,3459,3457,1,0,0,0,3460,385,1,0,0,0,3461,3462,7,59,0,0,3462,387,
  	1,0,0,0,3463,3465,5,449,0,0,3464,3466,7,60,0,0,3465,3464,1,0,0,0,3465,
  	3466,1,0,0,0,3466,389,1,0,0,0,3467,3470,5,36,0,0,3468,3469,5,126,0,0,
  	3469,3471,5,3,0,0,3470,3468,1,0,0,0,3470,3471,1,0,0,0,3471,3474,1,0,0,
  	0,3472,3474,5,3,0,0,3473,3467,1,0,0,0,3473,3472,1,0,0,0,3474,3475,1,0,
  	0,0,3475,3476,7,61,0,0,3476,3479,3,356,178,0,3477,3478,5,475,0,0,3478,
  	3480,5,449,0,0,3479,3477,1,0,0,0,3479,3480,1,0,0,0,3480,3495,1,0,0,0,
  	3481,3483,5,472,0,0,3482,3481,1,0,0,0,3482,3483,1,0,0,0,3483,3484,1,0,
  	0,0,3484,3489,3,400,200,0,3485,3486,5,474,0,0,3486,3488,3,400,200,0,3487,
  	3485,1,0,0,0,3488,3491,1,0,0,0,3489,3487,1,0,0,0,3489,3490,1,0,0,0,3490,
  	3493,1,0,0,0,3491,3489,1,0,0,0,3492,3494,5,473,0,0,3493,3492,1,0,0,0,
  	3493,3494,1,0,0,0,3494,3496,1,0,0,0,3495,3482,1,0,0,0,3495,3496,1,0,0,
  	0,3496,3506,1,0,0,0,3497,3498,5,203,0,0,3498,3503,3,402,201,0,3499,3500,
  	5,474,0,0,3500,3502,3,402,201,0,3501,3499,1,0,0,0,3502,3505,1,0,0,0,3503,
  	3501,1,0,0,0,3503,3504,1,0,0,0,3504,3507,1,0,0,0,3505,3503,1,0,0,0,3506,
  	3497,1,0,0,0,3506,3507,1,0,0,0,3507,3510,1,0,0,0,3508,3509,5,72,0,0,3509,
  	3511,5,145,0,0,3510,3508,1,0,0,0,3510,3511,1,0,0,0,3511,3512,1,0,0,0,
  	3512,3513,5,6,0,0,3513,3514,3,4,2,0,3514,391,1,0,0,0,3515,3518,5,36,0,
  	0,3516,3517,5,126,0,0,3517,3519,5,3,0,0,3518,3516,1,0,0,0,3518,3519,1,
  	0,0,0,3519,3522,1,0,0,0,3520,3522,5,3,0,0,3521,3515,1,0,0,0,3521,3520,
  	1,0,0,0,3522,3523,1,0,0,0,3523,3524,5,79,0,0,3524,3538,3,356,178,0,3525,
  	3526,5,472,0,0,3526,3531,3,400,200,0,3527,3528,5,474,0,0,3528,3530,3,
  	400,200,0,3529,3527,1,0,0,0,3530,3533,1,0,0,0,3531,3529,1,0,0,0,3531,
  	3532,1,0,0,0,3532,3534,1,0,0,0,3533,3531,1,0,0,0,3534,3535,5,473,0,0,
  	3535,3539,1,0,0,0,3536,3537,5,472,0,0,3537,3539,5,473,0,0,3538,3525,1,
  	0,0,0,3538,3536,1,0,0,0,3539,3543,1,0,0,0,3540,3544,3,394,197,0,3541,
  	3544,3,396,198,0,3542,3544,3,398,199,0,3543,3540,1,0,0,0,3543,3541,1,
  	0,0,0,3543,3542,1,0,0,0,3544,3546,1,0,0,0,3545,3547,5,475,0,0,3546,3545,
  	1,0,0,0,3546,3547,1,0,0,0,3547,393,1,0,0,0,3548,3549,5,149,0,0,3549,3559,
  	5,174,0,0,3550,3551,5,203,0,0,3551,3556,3,404,202,0,3552,3553,5,474,0,
  	0,3553,3555,3,404,202,0,3554,3552,1,0,0,0,3555,3558,1,0,0,0,3556,3554,
  	1,0,0,0,3556,3557,1,0,0,0,3557,3560,1,0,0,0,3558,3556,1,0,0,0,3559,3550,
  	1,0,0,0,3559,3560,1,0,0,0,3560,3562,1,0,0,0,3561,3563,5,6,0,0,3562,3561,
  	1,0,0,0,3562,3563,1,0,0,0,3563,3564,1,0,0,0,3564,3570,5,148,0,0,3565,
  	3566,5,472,0,0,3566,3567,3,52,26,0,3567,3568,5,473,0,0,3568,3571,1,0,
  	0,0,3569,3571,3,52,26,0,3570,3565,1,0,0,0,3570,3569,1,0,0,0,3571,395,
  	1,0,0,0,3572,3573,5,149,0,0,3573,3574,5,448,0,0,3574,3584,3,182,91,0,
  	3575,3576,5,203,0,0,3576,3581,3,404,202,0,3577,3578,5,474,0,0,3578,3580,
  	3,404,202,0,3579,3577,1,0,0,0,3580,3583,1,0,0,0,3581,3579,1,0,0,0,3581,
  	3582,1,0,0,0,3582,3585,1,0,0,0,3583,3581,1,0,0,0,3584,3575,1,0,0,0,3584,
  	3585,1,0,0,0,3585,3587,1,0,0,0,3586,3588,5,6,0,0,3587,3586,1,0,0,0,3587,
  	3588,1,0,0,0,3588,3589,1,0,0,0,3589,3593,5,10,0,0,3590,3592,3,6,3,0,3591,
  	3590,1,0,0,0,3592,3595,1,0,0,0,3593,3591,1,0,0,0,3593,3594,1,0,0,0,3594,
  	3596,1,0,0,0,3595,3593,1,0,0,0,3596,3598,5,148,0,0,3597,3599,5,475,0,
  	0,3598,3597,1,0,0,0,3598,3599,1,0,0,0,3599,3600,1,0,0,0,3600,3602,5,59,
  	0,0,3601,3603,5,475,0,0,3602,3601,1,0,0,0,3602,3603,1,0,0,0,3603,397,
  	1,0,0,0,3604,3605,5,149,0,0,3605,3615,3,410,205,0,3606,3607,5,203,0,0,
  	3607,3612,3,404,202,0,3608,3609,5,474,0,0,3609,3611,3,404,202,0,3610,
  	3608,1,0,0,0,3611,3614,1,0,0,0,3612,3610,1,0,0,0,3612,3613,1,0,0,0,3613,
  	3616,1,0,0,0,3614,3612,1,0,0,0,3615,3606,1,0,0,0,3615,3616,1,0,0,0,3616,
  	3618,1,0,0,0,3617,3619,5,6,0,0,3618,3617,1,0,0,0,3618,3619,1,0,0,0,3619,
  	3620,1,0,0,0,3620,3624,5,10,0,0,3621,3623,3,6,3,0,3622,3621,1,0,0,0,3623,
  	3626,1,0,0,0,3624,3622,1,0,0,0,3624,3625,1,0,0,0,3625,3627,1,0,0,0,3626,
  	3624,1,0,0,0,3627,3628,5,148,0,0,3628,3630,3,208,104,0,3629,3631,5,475,
  	0,0,3630,3629,1,0,0,0,3630,3631,1,0,0,0,3631,3632,1,0,0,0,3632,3633,5,
  	59,0,0,3633,399,1,0,0,0,3634,3638,5,448,0,0,3635,3636,3,380,190,0,3636,
  	3637,5,467,0,0,3637,3639,1,0,0,0,3638,3635,1,0,0,0,3638,3639,1,0,0,0,
  	3639,3641,1,0,0,0,3640,3642,5,6,0,0,3641,3640,1,0,0,0,3641,3642,1,0,0,
  	0,3642,3643,1,0,0,0,3643,3645,3,410,205,0,3644,3646,5,197,0,0,3645,3644,
  	1,0,0,0,3645,3646,1,0,0,0,3646,3649,1,0,0,0,3647,3648,5,455,0,0,3648,
  	3650,3,374,187,0,3649,3647,1,0,0,0,3649,3650,1,0,0,0,3650,3652,1,0,0,
  	0,3651,3653,7,62,0,0,3652,3651,1,0,0,0,3652,3653,1,0,0,0,3653,401,1,0,
  	0,0,3654,3658,5,272,0,0,3655,3658,5,373,0,0,3656,3658,3,178,89,0,3657,
  	3654,1,0,0,0,3657,3655,1,0,0,0,3657,3656,1,0,0,0,3658,403,1,0,0,0,3659,
  	3672,5,272,0,0,3660,3672,5,389,0,0,3661,3662,5,149,0,0,3662,3663,5,113,
  	0,0,3663,3664,5,119,0,0,3664,3665,5,113,0,0,3665,3672,5,302,0,0,3666,
  	3667,5,16,0,0,3667,3668,5,119,0,0,3668,3669,5,113,0,0,3669,3672,5,302,
  	0,0,3670,3672,3,178,89,0,3671,3659,1,0,0,0,3671,3660,1,0,0,0,3671,3661,
  	1,0,0,0,3671,3666,1,0,0,0,3671,3670,1,0,0,0,3672,405,1,0,0,0,3673,3674,
  	5,360,0,0,3674,3675,5,472,0,0,3675,3676,3,208,104,0,3676,3677,5,473,0,
  	0,3677,3678,5,204,0,0,3678,3679,5,82,0,0,3679,3680,5,472,0,0,3680,3681,
  	3,246,123,0,3681,3682,5,473,0,0,3682,3683,3,330,165,0,3683,407,1,0,0,
  	0,3684,3685,5,408,0,0,3685,3686,5,472,0,0,3686,3687,3,208,104,0,3687,
  	3688,5,474,0,0,3688,3689,3,208,104,0,3689,3690,5,473,0,0,3690,3691,5,
  	204,0,0,3691,3692,5,82,0,0,3692,3693,5,472,0,0,3693,3694,3,246,123,0,
  	3694,3695,5,473,0,0,3695,409,1,0,0,0,3696,3698,3,380,190,0,3697,3699,
  	5,84,0,0,3698,3697,1,0,0,0,3698,3699,1,0,0,0,3699,3707,1,0,0,0,3700,3701,
  	5,472,0,0,3701,3704,7,63,0,0,3702,3703,5,474,0,0,3703,3705,5,449,0,0,
  	3704,3702,1,0,0,0,3704,3705,1,0,0,0,3705,3706,1,0,0,0,3706,3708,5,473,
  	0,0,3707,3700,1,0,0,0,3707,3708,1,0,0,0,3708,3723,1,0,0,0,3709,3723,5,
  	249,0,0,3710,3711,5,254,0,0,3711,3712,5,472,0,0,3712,3713,5,449,0,0,3713,
  	3723,5,473,0,0,3714,3716,5,55,0,0,3715,3717,5,134,0,0,3716,3715,1,0,0,
  	0,3716,3717,1,0,0,0,3717,3723,1,0,0,0,3718,3723,5,303,0,0,3719,3723,5,
  	421,0,0,3720,3723,5,401,0,0,3721,3723,5,226,0,0,3722,3696,1,0,0,0,3722,
  	3709,1,0,0,0,3722,3710,1,0,0,0,3722,3714,1,0,0,0,3722,3718,1,0,0,0,3722,
  	3719,1,0,0,0,3722,3720,1,0,0,0,3722,3721,1,0,0,0,3723,411,1,0,0,0,523,
  	415,421,425,429,433,442,448,472,478,487,491,494,498,502,506,511,516,518,
  	527,530,535,538,540,544,547,555,558,563,566,571,576,579,584,590,597,601,
  	603,608,621,626,634,637,641,644,648,651,655,658,661,664,667,671,676,679,
  	683,686,690,693,697,703,706,710,713,716,723,726,730,733,736,739,742,746,
  	750,753,761,765,769,772,775,778,781,788,792,794,802,811,813,817,820,823,
  	828,833,836,844,848,855,858,867,870,874,882,885,889,892,901,908,912,916,
  	919,923,926,942,946,952,954,957,965,971,976,979,985,993,1002,1010,1013,
  	1020,1023,1063,1066,1072,1084,1086,1089,1113,1124,1132,1143,1148,1151,
  	1159,1169,1195,1201,1212,1231,1239,1246,1269,1282,1288,1293,1296,1302,
  	1306,1313,1317,1323,1327,1333,1337,1340,1346,1350,1356,1363,1367,1373,
  	1377,1383,1387,1404,1408,1414,1420,1437,1441,1449,1453,1456,1464,1468,
  	1470,1474,1478,1482,1486,1492,1496,1498,1503,1511,1514,1517,1526,1531,
  	1536,1539,1541,1545,1549,1552,1556,1562,1567,1574,1576,1580,1587,1591,
  	1594,1603,1606,1608,1617,1628,1632,1634,1636,1642,1647,1654,1667,1669,
  	1671,1674,1677,1684,1687,1693,1698,1700,1703,1709,1717,1719,1722,1726,
  	1729,1735,1738,1742,1745,1751,1754,1756,1760,1765,1773,1778,1787,1792,
  	1797,1803,1807,1810,1814,1820,1828,1833,1835,1838,1843,1848,1851,1856,
  	1859,1862,1868,1874,1878,1883,1886,1891,1896,1900,1905,1909,1926,1932,
  	1941,1951,1961,1963,1965,1968,1971,1982,1984,1986,1989,1992,1995,1998,
  	2001,2004,2016,2019,2022,2031,2034,2037,2044,2047,2061,2064,2071,2086,
  	2090,2103,2107,2115,2119,2139,2162,2164,2170,2177,2186,2198,2205,2212,
  	2220,2229,2233,2243,2250,2262,2264,2287,2296,2302,2308,2314,2325,2333,
  	2341,2346,2350,2359,2363,2366,2371,2375,2381,2383,2387,2396,2399,2402,
  	2406,2410,2422,2436,2441,2446,2450,2457,2466,2473,2475,2489,2497,2500,
  	2502,2509,2513,2524,2558,2574,2580,2587,2593,2598,2606,2609,2611,2618,
  	2627,2644,2646,2651,2654,2657,2661,2666,2668,2672,2676,2680,2687,2689,
  	2691,2695,2700,2705,2712,2725,2729,2731,2734,2738,2758,2762,2766,2783,
  	2790,2813,2888,2892,2920,2954,2958,2971,2979,2991,2997,3006,3023,3029,
  	3037,3041,3049,3056,3066,3074,3106,3112,3117,3122,3128,3131,3135,3140,
  	3155,3164,3167,3170,3183,3187,3195,3201,3209,3216,3222,3237,3246,3252,
  	3258,3261,3265,3272,3280,3283,3289,3295,3297,3303,3306,3308,3314,3316,
  	3330,3337,3344,3351,3358,3364,3369,3378,3383,3390,3412,3416,3421,3425,
  	3429,3433,3440,3459,3465,3470,3473,3479,3482,3489,3493,3495,3503,3506,
  	3510,3518,3521,3531,3538,3543,3546,3556,3559,3562,3570,3581,3584,3587,
  	3593,3598,3602,3612,3615,3618,3624,3630,3638,3641,3645,3649,3652,3657,
  	3671,3698,3704,3707,3716,3722
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  tsqlParserStaticData = staticData.release();
}

}

tsqlParser::tsqlParser(TokenStream *input) : tsqlParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

tsqlParser::tsqlParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  tsqlParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *tsqlParserStaticData->atn, tsqlParserStaticData->decisionToDFA, tsqlParserStaticData->sharedContextCache, options);
}

tsqlParser::~tsqlParser() {
  delete _interpreter;
}

const atn::ATN& tsqlParser::getATN() const {
  return *tsqlParserStaticData->atn;
}

std::string tsqlParser::getGrammarFileName() const {
  return "tsql.g4";
}

const std::vector<std::string>& tsqlParser::getRuleNames() const {
  return tsqlParserStaticData->ruleNames;
}

const dfa::Vocabulary& tsqlParser::getVocabulary() const {
  return tsqlParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView tsqlParser::getSerializedATN() const {
  return tsqlParserStaticData->serializedATN;
}


//----------------- Tsql_fileContext ------------------------------------------------------------------

tsqlParser::Tsql_fileContext::Tsql_fileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Tsql_fileContext::EOF() {
  return getToken(tsqlParser::EOF, 0);
}

std::vector<tsqlParser::BatchContext *> tsqlParser::Tsql_fileContext::batch() {
  return getRuleContexts<tsqlParser::BatchContext>();
}

tsqlParser::BatchContext* tsqlParser::Tsql_fileContext::batch(size_t i) {
  return getRuleContext<tsqlParser::BatchContext>(i);
}


size_t tsqlParser::Tsql_fileContext::getRuleIndex() const {
  return tsqlParser::RuleTsql_file;
}


std::any tsqlParser::Tsql_fileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitTsql_file(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Tsql_fileContext* tsqlParser::tsql_file() {
  Tsql_fileContext *_localctx = _tracker.createInstance<Tsql_fileContext>(_ctx, getState());
  enterRule(_localctx, 0, tsqlParser::RuleTsql_file);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(415);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -9150540300454718456) != 0 || (((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 4645436661968937) != 0 || (((_la - 136) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 136)) & -7890306546597212143) != 0 || (((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & 7494145550770540563) != 0 || (((_la - 266) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 266)) & 5188142120077987657) != 0 || (((_la - 332) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 332)) & 8067480458436254437) != 0 || (((_la - 397) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 397)) & 10731198337787881) != 0 || _la == tsqlParser::LR_BRACKET) {
      setState(412);
      batch();
      setState(417);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(418);
    match(tsqlParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BatchContext ------------------------------------------------------------------

tsqlParser::BatchContext::BatchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::Sql_clausesContext* tsqlParser::BatchContext::sql_clauses() {
  return getRuleContext<tsqlParser::Sql_clausesContext>(0);
}

std::vector<tsqlParser::Go_statementContext *> tsqlParser::BatchContext::go_statement() {
  return getRuleContexts<tsqlParser::Go_statementContext>();
}

tsqlParser::Go_statementContext* tsqlParser::BatchContext::go_statement(size_t i) {
  return getRuleContext<tsqlParser::Go_statementContext>(i);
}


size_t tsqlParser::BatchContext::getRuleIndex() const {
  return tsqlParser::RuleBatch;
}


std::any tsqlParser::BatchContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitBatch(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::BatchContext* tsqlParser::batch() {
  BatchContext *_localctx = _tracker.createInstance<BatchContext>(_ctx, getState());
  enterRule(_localctx, 2, tsqlParser::RuleBatch);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(421);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::GO) {
      setState(420);
      go_statement();
    }
    setState(423);
    sql_clauses();
    setState(425);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      setState(424);
      go_statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sql_clausesContext ------------------------------------------------------------------

tsqlParser::Sql_clausesContext::Sql_clausesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tsqlParser::Sql_clauseContext *> tsqlParser::Sql_clausesContext::sql_clause() {
  return getRuleContexts<tsqlParser::Sql_clauseContext>();
}

tsqlParser::Sql_clauseContext* tsqlParser::Sql_clausesContext::sql_clause(size_t i) {
  return getRuleContext<tsqlParser::Sql_clauseContext>(i);
}

std::vector<tree::TerminalNode *> tsqlParser::Sql_clausesContext::SEMI() {
  return getTokens(tsqlParser::SEMI);
}

tree::TerminalNode* tsqlParser::Sql_clausesContext::SEMI(size_t i) {
  return getToken(tsqlParser::SEMI, i);
}


size_t tsqlParser::Sql_clausesContext::getRuleIndex() const {
  return tsqlParser::RuleSql_clauses;
}


std::any tsqlParser::Sql_clausesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitSql_clauses(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Sql_clausesContext* tsqlParser::sql_clauses() {
  Sql_clausesContext *_localctx = _tracker.createInstance<Sql_clausesContext>(_ctx, getState());
  enterRule(_localctx, 4, tsqlParser::RuleSql_clauses);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(431); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(427);
              sql_clause();
              setState(429);
              _errHandler->sync(this);

              switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
              case 1: {
                setState(428);
                match(tsqlParser::SEMI);
                break;
              }

              default:
                break;
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(433); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sql_clauseContext ------------------------------------------------------------------

tsqlParser::Sql_clauseContext::Sql_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::Dml_clauseContext* tsqlParser::Sql_clauseContext::dml_clause() {
  return getRuleContext<tsqlParser::Dml_clauseContext>(0);
}

tsqlParser::Ddl_clauseContext* tsqlParser::Sql_clauseContext::ddl_clause() {
  return getRuleContext<tsqlParser::Ddl_clauseContext>(0);
}

tsqlParser::Cfl_statementContext* tsqlParser::Sql_clauseContext::cfl_statement() {
  return getRuleContext<tsqlParser::Cfl_statementContext>(0);
}

tsqlParser::Another_statementContext* tsqlParser::Sql_clauseContext::another_statement() {
  return getRuleContext<tsqlParser::Another_statementContext>(0);
}

tsqlParser::Cfl_clauseContext* tsqlParser::Sql_clauseContext::cfl_clause() {
  return getRuleContext<tsqlParser::Cfl_clauseContext>(0);
}

tsqlParser::Declare_statementContext* tsqlParser::Sql_clauseContext::declare_statement() {
  return getRuleContext<tsqlParser::Declare_statementContext>(0);
}

tsqlParser::Print_statementContext* tsqlParser::Sql_clauseContext::print_statement() {
  return getRuleContext<tsqlParser::Print_statementContext>(0);
}


size_t tsqlParser::Sql_clauseContext::getRuleIndex() const {
  return tsqlParser::RuleSql_clause;
}


std::any tsqlParser::Sql_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitSql_clause(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Sql_clauseContext* tsqlParser::sql_clause() {
  Sql_clauseContext *_localctx = _tracker.createInstance<Sql_clauseContext>(_ctx, getState());
  enterRule(_localctx, 6, tsqlParser::RuleSql_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(442);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(435);
      dml_clause();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(436);
      ddl_clause();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(437);
      cfl_statement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(438);
      another_statement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(439);
      cfl_clause();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(440);
      declare_statement();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(441);
      print_statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dml_clauseContext ------------------------------------------------------------------

tsqlParser::Dml_clauseContext::Dml_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::Delete_statementContext* tsqlParser::Dml_clauseContext::delete_statement() {
  return getRuleContext<tsqlParser::Delete_statementContext>(0);
}

tsqlParser::Insert_statementContext* tsqlParser::Dml_clauseContext::insert_statement() {
  return getRuleContext<tsqlParser::Insert_statementContext>(0);
}

tsqlParser::Select_statementContext* tsqlParser::Dml_clauseContext::select_statement() {
  return getRuleContext<tsqlParser::Select_statementContext>(0);
}

tsqlParser::Update_statementContext* tsqlParser::Dml_clauseContext::update_statement() {
  return getRuleContext<tsqlParser::Update_statementContext>(0);
}


size_t tsqlParser::Dml_clauseContext::getRuleIndex() const {
  return tsqlParser::RuleDml_clause;
}


std::any tsqlParser::Dml_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDml_clause(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Dml_clauseContext* tsqlParser::dml_clause() {
  Dml_clauseContext *_localctx = _tracker.createInstance<Dml_clauseContext>(_ctx, getState());
  enterRule(_localctx, 8, tsqlParser::RuleDml_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(448);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(444);
      delete_statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(445);
      insert_statement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(446);
      select_statement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(447);
      update_statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Ddl_clauseContext ------------------------------------------------------------------

tsqlParser::Ddl_clauseContext::Ddl_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::Create_databaseContext* tsqlParser::Ddl_clauseContext::create_database() {
  return getRuleContext<tsqlParser::Create_databaseContext>(0);
}

tsqlParser::Create_indexContext* tsqlParser::Ddl_clauseContext::create_index() {
  return getRuleContext<tsqlParser::Create_indexContext>(0);
}

tsqlParser::Create_or_alter_functionContext* tsqlParser::Ddl_clauseContext::create_or_alter_function() {
  return getRuleContext<tsqlParser::Create_or_alter_functionContext>(0);
}

tsqlParser::Create_or_alter_procedureContext* tsqlParser::Ddl_clauseContext::create_or_alter_procedure() {
  return getRuleContext<tsqlParser::Create_or_alter_procedureContext>(0);
}

tsqlParser::Create_statisticsContext* tsqlParser::Ddl_clauseContext::create_statistics() {
  return getRuleContext<tsqlParser::Create_statisticsContext>(0);
}

tsqlParser::Create_schemaContext* tsqlParser::Ddl_clauseContext::create_schema() {
  return getRuleContext<tsqlParser::Create_schemaContext>(0);
}

tsqlParser::Create_synonymContext* tsqlParser::Ddl_clauseContext::create_synonym() {
  return getRuleContext<tsqlParser::Create_synonymContext>(0);
}

tsqlParser::Create_tableContext* tsqlParser::Ddl_clauseContext::create_table() {
  return getRuleContext<tsqlParser::Create_tableContext>(0);
}

tsqlParser::Create_typeContext* tsqlParser::Ddl_clauseContext::create_type() {
  return getRuleContext<tsqlParser::Create_typeContext>(0);
}

tsqlParser::Create_viewContext* tsqlParser::Ddl_clauseContext::create_view() {
  return getRuleContext<tsqlParser::Create_viewContext>(0);
}

tsqlParser::Alter_tableContext* tsqlParser::Ddl_clauseContext::alter_table() {
  return getRuleContext<tsqlParser::Alter_tableContext>(0);
}

tsqlParser::Alter_databaseContext* tsqlParser::Ddl_clauseContext::alter_database() {
  return getRuleContext<tsqlParser::Alter_databaseContext>(0);
}

tsqlParser::Drop_indexContext* tsqlParser::Ddl_clauseContext::drop_index() {
  return getRuleContext<tsqlParser::Drop_indexContext>(0);
}

tsqlParser::Drop_procedureContext* tsqlParser::Ddl_clauseContext::drop_procedure() {
  return getRuleContext<tsqlParser::Drop_procedureContext>(0);
}

tsqlParser::Drop_statisticsContext* tsqlParser::Ddl_clauseContext::drop_statistics() {
  return getRuleContext<tsqlParser::Drop_statisticsContext>(0);
}

tsqlParser::Drop_synonymContext* tsqlParser::Ddl_clauseContext::drop_synonym() {
  return getRuleContext<tsqlParser::Drop_synonymContext>(0);
}

tsqlParser::Drop_tableContext* tsqlParser::Ddl_clauseContext::drop_table() {
  return getRuleContext<tsqlParser::Drop_tableContext>(0);
}

tsqlParser::Drop_typeContext* tsqlParser::Ddl_clauseContext::drop_type() {
  return getRuleContext<tsqlParser::Drop_typeContext>(0);
}

tsqlParser::Drop_viewContext* tsqlParser::Ddl_clauseContext::drop_view() {
  return getRuleContext<tsqlParser::Drop_viewContext>(0);
}

tsqlParser::Drop_databaseContext* tsqlParser::Ddl_clauseContext::drop_database() {
  return getRuleContext<tsqlParser::Drop_databaseContext>(0);
}

tsqlParser::Drop_schemaContext* tsqlParser::Ddl_clauseContext::drop_schema() {
  return getRuleContext<tsqlParser::Drop_schemaContext>(0);
}

tsqlParser::Drop_functionContext* tsqlParser::Ddl_clauseContext::drop_function() {
  return getRuleContext<tsqlParser::Drop_functionContext>(0);
}


size_t tsqlParser::Ddl_clauseContext::getRuleIndex() const {
  return tsqlParser::RuleDdl_clause;
}


std::any tsqlParser::Ddl_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDdl_clause(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Ddl_clauseContext* tsqlParser::ddl_clause() {
  Ddl_clauseContext *_localctx = _tracker.createInstance<Ddl_clauseContext>(_ctx, getState());
  enterRule(_localctx, 10, tsqlParser::RuleDdl_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(472);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(450);
      create_database();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(451);
      create_index();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(452);
      create_or_alter_function();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(453);
      create_or_alter_procedure();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(454);
      create_statistics();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(455);
      create_schema();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(456);
      create_synonym();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(457);
      create_table();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(458);
      create_type();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(459);
      create_view();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(460);
      alter_table();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(461);
      alter_database();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(462);
      drop_index();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(463);
      drop_procedure();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(464);
      drop_statistics();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(465);
      drop_synonym();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(466);
      drop_table();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(467);
      drop_type();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(468);
      drop_view();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(469);
      drop_database();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(470);
      drop_schema();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(471);
      drop_function();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cfl_statementContext ------------------------------------------------------------------

tsqlParser::Cfl_statementContext::Cfl_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::If_statementContext* tsqlParser::Cfl_statementContext::if_statement() {
  return getRuleContext<tsqlParser::If_statementContext>(0);
}

tsqlParser::Try_catch_statementContext* tsqlParser::Cfl_statementContext::try_catch_statement() {
  return getRuleContext<tsqlParser::Try_catch_statementContext>(0);
}

tsqlParser::Waitfor_statementContext* tsqlParser::Cfl_statementContext::waitfor_statement() {
  return getRuleContext<tsqlParser::Waitfor_statementContext>(0);
}

tsqlParser::While_statementContext* tsqlParser::Cfl_statementContext::while_statement() {
  return getRuleContext<tsqlParser::While_statementContext>(0);
}


size_t tsqlParser::Cfl_statementContext::getRuleIndex() const {
  return tsqlParser::RuleCfl_statement;
}


std::any tsqlParser::Cfl_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitCfl_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Cfl_statementContext* tsqlParser::cfl_statement() {
  Cfl_statementContext *_localctx = _tracker.createInstance<Cfl_statementContext>(_ctx, getState());
  enterRule(_localctx, 12, tsqlParser::RuleCfl_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(478);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::IF: {
        enterOuterAlt(_localctx, 1);
        setState(474);
        if_statement();
        break;
      }

      case tsqlParser::BEGIN: {
        enterOuterAlt(_localctx, 2);
        setState(475);
        try_catch_statement();
        break;
      }

      case tsqlParser::WAITFOR: {
        enterOuterAlt(_localctx, 3);
        setState(476);
        waitfor_statement();
        break;
      }

      case tsqlParser::WHILE: {
        enterOuterAlt(_localctx, 4);
        setState(477);
        while_statement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cfl_clauseContext ------------------------------------------------------------------

tsqlParser::Cfl_clauseContext::Cfl_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::Block_statementContext* tsqlParser::Cfl_clauseContext::block_statement() {
  return getRuleContext<tsqlParser::Block_statementContext>(0);
}

tsqlParser::Break_statementContext* tsqlParser::Cfl_clauseContext::break_statement() {
  return getRuleContext<tsqlParser::Break_statementContext>(0);
}

tsqlParser::Continue_statementContext* tsqlParser::Cfl_clauseContext::continue_statement() {
  return getRuleContext<tsqlParser::Continue_statementContext>(0);
}

tsqlParser::Goto_statementContext* tsqlParser::Cfl_clauseContext::goto_statement() {
  return getRuleContext<tsqlParser::Goto_statementContext>(0);
}

tsqlParser::Return_statementContext* tsqlParser::Cfl_clauseContext::return_statement() {
  return getRuleContext<tsqlParser::Return_statementContext>(0);
}

tsqlParser::Throw_statementContext* tsqlParser::Cfl_clauseContext::throw_statement() {
  return getRuleContext<tsqlParser::Throw_statementContext>(0);
}

tsqlParser::Raiseerror_statementContext* tsqlParser::Cfl_clauseContext::raiseerror_statement() {
  return getRuleContext<tsqlParser::Raiseerror_statementContext>(0);
}


size_t tsqlParser::Cfl_clauseContext::getRuleIndex() const {
  return tsqlParser::RuleCfl_clause;
}


std::any tsqlParser::Cfl_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitCfl_clause(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Cfl_clauseContext* tsqlParser::cfl_clause() {
  Cfl_clauseContext *_localctx = _tracker.createInstance<Cfl_clauseContext>(_ctx, getState());
  enterRule(_localctx, 14, tsqlParser::RuleCfl_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(487);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(480);
      block_statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(481);
      break_statement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(482);
      continue_statement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(483);
      goto_statement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(484);
      return_statement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(485);
      throw_statement();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(486);
      raiseerror_statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Block_statementContext ------------------------------------------------------------------

tsqlParser::Block_statementContext::Block_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Block_statementContext::BEGIN() {
  return getToken(tsqlParser::BEGIN, 0);
}

tree::TerminalNode* tsqlParser::Block_statementContext::END() {
  return getToken(tsqlParser::END, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Block_statementContext::SEMI() {
  return getTokens(tsqlParser::SEMI);
}

tree::TerminalNode* tsqlParser::Block_statementContext::SEMI(size_t i) {
  return getToken(tsqlParser::SEMI, i);
}

tsqlParser::Sql_clausesContext* tsqlParser::Block_statementContext::sql_clauses() {
  return getRuleContext<tsqlParser::Sql_clausesContext>(0);
}


size_t tsqlParser::Block_statementContext::getRuleIndex() const {
  return tsqlParser::RuleBlock_statement;
}


std::any tsqlParser::Block_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitBlock_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Block_statementContext* tsqlParser::block_statement() {
  Block_statementContext *_localctx = _tracker.createInstance<Block_statementContext>(_ctx, getState());
  enterRule(_localctx, 16, tsqlParser::RuleBlock_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(489);
    match(tsqlParser::BEGIN);
    setState(491);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::SEMI) {
      setState(490);
      match(tsqlParser::SEMI);
    }
    setState(494);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -9150540300454718456) != 0 || (((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 4645436661968937) != 0 || (((_la - 136) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 136)) & -7890306546597212143) != 0 || (((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & 7494145550770540563) != 0 || (((_la - 266) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 266)) & 5188142120044433225) != 0 || (((_la - 332) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 332)) & 8067480458436254437) != 0 || (((_la - 397) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 397)) & 10731198337787881) != 0 || _la == tsqlParser::LR_BRACKET) {
      setState(493);
      sql_clauses();
    }
    setState(496);
    match(tsqlParser::END);
    setState(498);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
    case 1: {
      setState(497);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Break_statementContext ------------------------------------------------------------------

tsqlParser::Break_statementContext::Break_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Break_statementContext::BREAK() {
  return getToken(tsqlParser::BREAK, 0);
}

tree::TerminalNode* tsqlParser::Break_statementContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}


size_t tsqlParser::Break_statementContext::getRuleIndex() const {
  return tsqlParser::RuleBreak_statement;
}


std::any tsqlParser::Break_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitBreak_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Break_statementContext* tsqlParser::break_statement() {
  Break_statementContext *_localctx = _tracker.createInstance<Break_statementContext>(_ctx, getState());
  enterRule(_localctx, 18, tsqlParser::RuleBreak_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(500);
    match(tsqlParser::BREAK);
    setState(502);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
    case 1: {
      setState(501);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Continue_statementContext ------------------------------------------------------------------

tsqlParser::Continue_statementContext::Continue_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Continue_statementContext::CONTINUE() {
  return getToken(tsqlParser::CONTINUE, 0);
}

tree::TerminalNode* tsqlParser::Continue_statementContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}


size_t tsqlParser::Continue_statementContext::getRuleIndex() const {
  return tsqlParser::RuleContinue_statement;
}


std::any tsqlParser::Continue_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitContinue_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Continue_statementContext* tsqlParser::continue_statement() {
  Continue_statementContext *_localctx = _tracker.createInstance<Continue_statementContext>(_ctx, getState());
  enterRule(_localctx, 20, tsqlParser::RuleContinue_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(504);
    match(tsqlParser::CONTINUE);
    setState(506);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx)) {
    case 1: {
      setState(505);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Goto_statementContext ------------------------------------------------------------------

tsqlParser::Goto_statementContext::Goto_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Goto_statementContext::GOTO() {
  return getToken(tsqlParser::GOTO, 0);
}

tsqlParser::R_idContext* tsqlParser::Goto_statementContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tree::TerminalNode* tsqlParser::Goto_statementContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}

tree::TerminalNode* tsqlParser::Goto_statementContext::COLON() {
  return getToken(tsqlParser::COLON, 0);
}


size_t tsqlParser::Goto_statementContext::getRuleIndex() const {
  return tsqlParser::RuleGoto_statement;
}


std::any tsqlParser::Goto_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitGoto_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Goto_statementContext* tsqlParser::goto_statement() {
  Goto_statementContext *_localctx = _tracker.createInstance<Goto_statementContext>(_ctx, getState());
  enterRule(_localctx, 22, tsqlParser::RuleGoto_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(518);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::GOTO: {
        enterOuterAlt(_localctx, 1);
        setState(508);
        match(tsqlParser::GOTO);
        setState(509);
        r_id();
        setState(511);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx)) {
        case 1: {
          setState(510);
          match(tsqlParser::SEMI);
          break;
        }

        default:
          break;
        }
        break;
      }

      case tsqlParser::FILLFACTOR:
      case tsqlParser::FORCESEEK:
      case tsqlParser::NEXT:
      case tsqlParser::NUMERIC:
      case tsqlParser::VALUE:
      case tsqlParser::ABSOLUTE:
      case tsqlParser::APPLY:
      case tsqlParser::AUTO:
      case tsqlParser::AVG:
      case tsqlParser::BASE64:
      case tsqlParser::CALLER:
      case tsqlParser::CAST:
      case tsqlParser::CATCH:
      case tsqlParser::CHECKSUM_AGG:
      case tsqlParser::COMMITTED:
      case tsqlParser::CONCAT:
      case tsqlParser::CONTROL:
      case tsqlParser::COOKIE:
      case tsqlParser::COUNT:
      case tsqlParser::COUNT_BIG:
      case tsqlParser::DATE:
      case tsqlParser::DELAY:
      case tsqlParser::DELETED:
      case tsqlParser::DENSE_RANK:
      case tsqlParser::DISABLE:
      case tsqlParser::DYNAMIC:
      case tsqlParser::ENCRYPTION:
      case tsqlParser::EXIST:
      case tsqlParser::EXPAND:
      case tsqlParser::FAST:
      case tsqlParser::FAST_FORWARD:
      case tsqlParser::FIRST:
      case tsqlParser::FIRST_VALUE:
      case tsqlParser::FOLLOWING:
      case tsqlParser::FORCE:
      case tsqlParser::FORCED:
      case tsqlParser::FORWARD_ONLY:
      case tsqlParser::FULLSCAN:
      case tsqlParser::GLOBAL:
      case tsqlParser::GROUPING:
      case tsqlParser::GROUPING_ID:
      case tsqlParser::HASH:
      case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
      case tsqlParser::IMPERSONATE:
      case tsqlParser::INSENSITIVE:
      case tsqlParser::INSERTED:
      case tsqlParser::ISOLATION:
      case tsqlParser::IO:
      case tsqlParser::KEEP:
      case tsqlParser::KEEPFIXED:
      case tsqlParser::KEYSET:
      case tsqlParser::LAG:
      case tsqlParser::LAST:
      case tsqlParser::LAST_VALUE:
      case tsqlParser::LEAD:
      case tsqlParser::LEVEL:
      case tsqlParser::LOCAL:
      case tsqlParser::LOCK_ESCALATION:
      case tsqlParser::LOGIN:
      case tsqlParser::LOOP:
      case tsqlParser::MARK:
      case tsqlParser::MAX:
      case tsqlParser::MAXDOP:
      case tsqlParser::MAXRECURSION:
      case tsqlParser::MIN:
      case tsqlParser::MODIFY:
      case tsqlParser::NAME:
      case tsqlParser::NOCOUNT:
      case tsqlParser::NODES:
      case tsqlParser::NOEXPAND:
      case tsqlParser::NORECOMPUTE:
      case tsqlParser::NTILE:
      case tsqlParser::NUMBER:
      case tsqlParser::OFFSET:
      case tsqlParser::ONLINE:
      case tsqlParser::ONLY:
      case tsqlParser::OPTIMISTIC:
      case tsqlParser::OPTIMIZE:
      case tsqlParser::OUT:
      case tsqlParser::OUTPUT:
      case tsqlParser::OWNER:
      case tsqlParser::PARAMETERIZATION:
      case tsqlParser::PARTITION:
      case tsqlParser::PATH:
      case tsqlParser::PRECEDING:
      case tsqlParser::PRIOR:
      case tsqlParser::PRIVILEGES:
      case tsqlParser::QUERY:
      case tsqlParser::RANGE:
      case tsqlParser::RANK:
      case tsqlParser::READONLY:
      case tsqlParser::READ_ONLY:
      case tsqlParser::RECOMPILE:
      case tsqlParser::RELATIVE:
      case tsqlParser::REMOTE:
      case tsqlParser::REPEATABLE:
      case tsqlParser::ROBUST:
      case tsqlParser::ROOT:
      case tsqlParser::ROW:
      case tsqlParser::ROWGUID:
      case tsqlParser::ROWS:
      case tsqlParser::ROW_NUMBER:
      case tsqlParser::SAMPLE:
      case tsqlParser::SCHEMABINDING:
      case tsqlParser::SCROLL:
      case tsqlParser::SCROLL_LOCKS:
      case tsqlParser::SELF:
      case tsqlParser::SERIALIZABLE:
      case tsqlParser::SIMPLE:
      case tsqlParser::SIZE:
      case tsqlParser::SNAPSHOT:
      case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
      case tsqlParser::STATIC:
      case tsqlParser::STATS_STREAM:
      case tsqlParser::STDEV:
      case tsqlParser::STDEVP:
      case tsqlParser::SUM:
      case tsqlParser::TEXTIMAGE_ON:
      case tsqlParser::THROW:
      case tsqlParser::TIES:
      case tsqlParser::TIME:
      case tsqlParser::TRY:
      case tsqlParser::TYPE:
      case tsqlParser::TYPE_WARNING:
      case tsqlParser::UNBOUNDED:
      case tsqlParser::UNCOMMITTED:
      case tsqlParser::UNKNOWN:
      case tsqlParser::USING:
      case tsqlParser::VAR:
      case tsqlParser::VARP:
      case tsqlParser::VIEWS:
      case tsqlParser::VIEW_METADATA:
      case tsqlParser::WORK:
      case tsqlParser::XML:
      case tsqlParser::XMLNAMESPACES:
      case tsqlParser::ZONE:
      case tsqlParser::DOUBLE_QUOTE_ID:
      case tsqlParser::SQUARE_BRACKET_ID:
      case tsqlParser::ID: {
        enterOuterAlt(_localctx, 2);
        setState(513);
        r_id();
        setState(514);
        match(tsqlParser::COLON);
        setState(516);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
        case 1: {
          setState(515);
          match(tsqlParser::SEMI);
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_statementContext ------------------------------------------------------------------

tsqlParser::If_statementContext::If_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::If_statementContext::IF() {
  return getToken(tsqlParser::IF, 0);
}

tsqlParser::Search_conditionContext* tsqlParser::If_statementContext::search_condition() {
  return getRuleContext<tsqlParser::Search_conditionContext>(0);
}

tsqlParser::If_blockContext* tsqlParser::If_statementContext::if_block() {
  return getRuleContext<tsqlParser::If_blockContext>(0);
}


size_t tsqlParser::If_statementContext::getRuleIndex() const {
  return tsqlParser::RuleIf_statement;
}


std::any tsqlParser::If_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitIf_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::If_statementContext* tsqlParser::if_statement() {
  If_statementContext *_localctx = _tracker.createInstance<If_statementContext>(_ctx, getState());
  enterRule(_localctx, 24, tsqlParser::RuleIf_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(520);
    match(tsqlParser::IF);
    setState(521);
    search_condition(0);
    setState(522);
    if_block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_blockContext ------------------------------------------------------------------

tsqlParser::If_blockContext::If_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tsqlParser::Sql_clauseContext *> tsqlParser::If_blockContext::sql_clause() {
  return getRuleContexts<tsqlParser::Sql_clauseContext>();
}

tsqlParser::Sql_clauseContext* tsqlParser::If_blockContext::sql_clause(size_t i) {
  return getRuleContext<tsqlParser::Sql_clauseContext>(i);
}

tree::TerminalNode* tsqlParser::If_blockContext::ELSE() {
  return getToken(tsqlParser::ELSE, 0);
}

tree::TerminalNode* tsqlParser::If_blockContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}

std::vector<tsqlParser::Block_statementContext *> tsqlParser::If_blockContext::block_statement() {
  return getRuleContexts<tsqlParser::Block_statementContext>();
}

tsqlParser::Block_statementContext* tsqlParser::If_blockContext::block_statement(size_t i) {
  return getRuleContext<tsqlParser::Block_statementContext>(i);
}


size_t tsqlParser::If_blockContext::getRuleIndex() const {
  return tsqlParser::RuleIf_block;
}


std::any tsqlParser::If_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitIf_block(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::If_blockContext* tsqlParser::if_block() {
  If_blockContext *_localctx = _tracker.createInstance<If_blockContext>(_ctx, getState());
  enterRule(_localctx, 26, tsqlParser::RuleIf_block);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(540);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(524);
      antlrcpp::downCast<If_blockContext *>(_localctx)->if_expr = sql_clause();
      setState(527);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
      case 1: {
        setState(525);
        match(tsqlParser::ELSE);
        setState(526);
        antlrcpp::downCast<If_blockContext *>(_localctx)->else_expr = sql_clause();
        break;
      }

      default:
        break;
      }
      setState(530);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
      case 1: {
        setState(529);
        match(tsqlParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(532);
      antlrcpp::downCast<If_blockContext *>(_localctx)->if_block_expr = block_statement();
      setState(535);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx)) {
      case 1: {
        setState(533);
        match(tsqlParser::ELSE);
        setState(534);
        antlrcpp::downCast<If_blockContext *>(_localctx)->else_block_expr = block_statement();
        break;
      }

      default:
        break;
      }
      setState(538);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
      case 1: {
        setState(537);
        match(tsqlParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Return_statementContext ------------------------------------------------------------------

tsqlParser::Return_statementContext::Return_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Return_statementContext::RETURN() {
  return getToken(tsqlParser::RETURN, 0);
}

tsqlParser::ExpressionContext* tsqlParser::Return_statementContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

tree::TerminalNode* tsqlParser::Return_statementContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}


size_t tsqlParser::Return_statementContext::getRuleIndex() const {
  return tsqlParser::RuleReturn_statement;
}


std::any tsqlParser::Return_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitReturn_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Return_statementContext* tsqlParser::return_statement() {
  Return_statementContext *_localctx = _tracker.createInstance<Return_statementContext>(_ctx, getState());
  enterRule(_localctx, 28, tsqlParser::RuleReturn_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(542);
    match(tsqlParser::RETURN);
    setState(544);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
    case 1: {
      setState(543);
      expression(0);
      break;
    }

    default:
      break;
    }
    setState(547);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      setState(546);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Throw_statementContext ------------------------------------------------------------------

tsqlParser::Throw_statementContext::Throw_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Throw_statementContext::THROW() {
  return getToken(tsqlParser::THROW, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Throw_statementContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Throw_statementContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}

tree::TerminalNode* tsqlParser::Throw_statementContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Throw_statementContext::DECIMAL() {
  return getTokens(tsqlParser::DECIMAL);
}

tree::TerminalNode* tsqlParser::Throw_statementContext::DECIMAL(size_t i) {
  return getToken(tsqlParser::DECIMAL, i);
}

std::vector<tree::TerminalNode *> tsqlParser::Throw_statementContext::LOCAL_ID() {
  return getTokens(tsqlParser::LOCAL_ID);
}

tree::TerminalNode* tsqlParser::Throw_statementContext::LOCAL_ID(size_t i) {
  return getToken(tsqlParser::LOCAL_ID, i);
}

tree::TerminalNode* tsqlParser::Throw_statementContext::STRING() {
  return getToken(tsqlParser::STRING, 0);
}


size_t tsqlParser::Throw_statementContext::getRuleIndex() const {
  return tsqlParser::RuleThrow_statement;
}


std::any tsqlParser::Throw_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitThrow_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Throw_statementContext* tsqlParser::throw_statement() {
  Throw_statementContext *_localctx = _tracker.createInstance<Throw_statementContext>(_ctx, getState());
  enterRule(_localctx, 30, tsqlParser::RuleThrow_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(549);
    match(tsqlParser::THROW);
    setState(555);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::LOCAL_ID

    || _la == tsqlParser::DECIMAL) {
      setState(550);
      antlrcpp::downCast<Throw_statementContext *>(_localctx)->error_number = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::LOCAL_ID

      || _la == tsqlParser::DECIMAL)) {
        antlrcpp::downCast<Throw_statementContext *>(_localctx)->error_number = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(551);
      match(tsqlParser::COMMA);
      setState(552);
      antlrcpp::downCast<Throw_statementContext *>(_localctx)->message = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::LOCAL_ID

      || _la == tsqlParser::STRING)) {
        antlrcpp::downCast<Throw_statementContext *>(_localctx)->message = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(553);
      match(tsqlParser::COMMA);
      setState(554);
      antlrcpp::downCast<Throw_statementContext *>(_localctx)->state = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::LOCAL_ID

      || _la == tsqlParser::DECIMAL)) {
        antlrcpp::downCast<Throw_statementContext *>(_localctx)->state = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(558);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx)) {
    case 1: {
      setState(557);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Try_catch_statementContext ------------------------------------------------------------------

tsqlParser::Try_catch_statementContext::Try_catch_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> tsqlParser::Try_catch_statementContext::BEGIN() {
  return getTokens(tsqlParser::BEGIN);
}

tree::TerminalNode* tsqlParser::Try_catch_statementContext::BEGIN(size_t i) {
  return getToken(tsqlParser::BEGIN, i);
}

std::vector<tree::TerminalNode *> tsqlParser::Try_catch_statementContext::TRY() {
  return getTokens(tsqlParser::TRY);
}

tree::TerminalNode* tsqlParser::Try_catch_statementContext::TRY(size_t i) {
  return getToken(tsqlParser::TRY, i);
}

std::vector<tree::TerminalNode *> tsqlParser::Try_catch_statementContext::END() {
  return getTokens(tsqlParser::END);
}

tree::TerminalNode* tsqlParser::Try_catch_statementContext::END(size_t i) {
  return getToken(tsqlParser::END, i);
}

std::vector<tree::TerminalNode *> tsqlParser::Try_catch_statementContext::CATCH() {
  return getTokens(tsqlParser::CATCH);
}

tree::TerminalNode* tsqlParser::Try_catch_statementContext::CATCH(size_t i) {
  return getToken(tsqlParser::CATCH, i);
}

std::vector<tree::TerminalNode *> tsqlParser::Try_catch_statementContext::SEMI() {
  return getTokens(tsqlParser::SEMI);
}

tree::TerminalNode* tsqlParser::Try_catch_statementContext::SEMI(size_t i) {
  return getToken(tsqlParser::SEMI, i);
}

std::vector<tsqlParser::Sql_clausesContext *> tsqlParser::Try_catch_statementContext::sql_clauses() {
  return getRuleContexts<tsqlParser::Sql_clausesContext>();
}

tsqlParser::Sql_clausesContext* tsqlParser::Try_catch_statementContext::sql_clauses(size_t i) {
  return getRuleContext<tsqlParser::Sql_clausesContext>(i);
}


size_t tsqlParser::Try_catch_statementContext::getRuleIndex() const {
  return tsqlParser::RuleTry_catch_statement;
}


std::any tsqlParser::Try_catch_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitTry_catch_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Try_catch_statementContext* tsqlParser::try_catch_statement() {
  Try_catch_statementContext *_localctx = _tracker.createInstance<Try_catch_statementContext>(_ctx, getState());
  enterRule(_localctx, 32, tsqlParser::RuleTry_catch_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(560);
    match(tsqlParser::BEGIN);
    setState(561);
    match(tsqlParser::TRY);
    setState(563);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::SEMI) {
      setState(562);
      match(tsqlParser::SEMI);
    }
    setState(566);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -9150540300454718456) != 0 || (((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 4645436661968937) != 0 || (((_la - 136) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 136)) & -7890306546597212143) != 0 || (((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & 7494145550770540563) != 0 || (((_la - 266) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 266)) & 5188142120044433225) != 0 || (((_la - 332) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 332)) & 8067480458436254437) != 0 || (((_la - 397) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 397)) & 10731198337787881) != 0 || _la == tsqlParser::LR_BRACKET) {
      setState(565);
      antlrcpp::downCast<Try_catch_statementContext *>(_localctx)->try_clauses = sql_clauses();
    }
    setState(568);
    match(tsqlParser::END);
    setState(569);
    match(tsqlParser::TRY);
    setState(571);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::SEMI) {
      setState(570);
      match(tsqlParser::SEMI);
    }
    setState(573);
    match(tsqlParser::BEGIN);
    setState(574);
    match(tsqlParser::CATCH);
    setState(576);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::SEMI) {
      setState(575);
      match(tsqlParser::SEMI);
    }
    setState(579);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -9150540300454718456) != 0 || (((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 4645436661968937) != 0 || (((_la - 136) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 136)) & -7890306546597212143) != 0 || (((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & 7494145550770540563) != 0 || (((_la - 266) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 266)) & 5188142120044433225) != 0 || (((_la - 332) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 332)) & 8067480458436254437) != 0 || (((_la - 397) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 397)) & 10731198337787881) != 0 || _la == tsqlParser::LR_BRACKET) {
      setState(578);
      antlrcpp::downCast<Try_catch_statementContext *>(_localctx)->catch_clauses = sql_clauses();
    }
    setState(581);
    match(tsqlParser::END);
    setState(582);
    match(tsqlParser::CATCH);
    setState(584);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
    case 1: {
      setState(583);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Waitfor_statementContext ------------------------------------------------------------------

tsqlParser::Waitfor_statementContext::Waitfor_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Waitfor_statementContext::WAITFOR() {
  return getToken(tsqlParser::WAITFOR, 0);
}

tsqlParser::ExpressionContext* tsqlParser::Waitfor_statementContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

tree::TerminalNode* tsqlParser::Waitfor_statementContext::DELAY() {
  return getToken(tsqlParser::DELAY, 0);
}

tree::TerminalNode* tsqlParser::Waitfor_statementContext::TIME() {
  return getToken(tsqlParser::TIME, 0);
}

tree::TerminalNode* tsqlParser::Waitfor_statementContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}


size_t tsqlParser::Waitfor_statementContext::getRuleIndex() const {
  return tsqlParser::RuleWaitfor_statement;
}


std::any tsqlParser::Waitfor_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitWaitfor_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Waitfor_statementContext* tsqlParser::waitfor_statement() {
  Waitfor_statementContext *_localctx = _tracker.createInstance<Waitfor_statementContext>(_ctx, getState());
  enterRule(_localctx, 34, tsqlParser::RuleWaitfor_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(586);
    match(tsqlParser::WAITFOR);
    setState(587);
    _la = _input->LA(1);
    if (!(_la == tsqlParser::DELAY || _la == tsqlParser::TIME)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(588);
    expression(0);
    setState(590);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      setState(589);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- While_statementContext ------------------------------------------------------------------

tsqlParser::While_statementContext::While_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::While_statementContext::WHILE() {
  return getToken(tsqlParser::WHILE, 0);
}

tsqlParser::Search_conditionContext* tsqlParser::While_statementContext::search_condition() {
  return getRuleContext<tsqlParser::Search_conditionContext>(0);
}

tsqlParser::Sql_clauseContext* tsqlParser::While_statementContext::sql_clause() {
  return getRuleContext<tsqlParser::Sql_clauseContext>(0);
}

tree::TerminalNode* tsqlParser::While_statementContext::BREAK() {
  return getToken(tsqlParser::BREAK, 0);
}

tree::TerminalNode* tsqlParser::While_statementContext::CONTINUE() {
  return getToken(tsqlParser::CONTINUE, 0);
}

tree::TerminalNode* tsqlParser::While_statementContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}


size_t tsqlParser::While_statementContext::getRuleIndex() const {
  return tsqlParser::RuleWhile_statement;
}


std::any tsqlParser::While_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitWhile_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::While_statementContext* tsqlParser::while_statement() {
  While_statementContext *_localctx = _tracker.createInstance<While_statementContext>(_ctx, getState());
  enterRule(_localctx, 36, tsqlParser::RuleWhile_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(592);
    match(tsqlParser::WHILE);
    setState(593);
    search_condition(0);
    setState(603);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx)) {
    case 1: {
      setState(594);
      sql_clause();
      break;
    }

    case 2: {
      setState(595);
      match(tsqlParser::BREAK);
      setState(597);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx)) {
      case 1: {
        setState(596);
        match(tsqlParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      setState(599);
      match(tsqlParser::CONTINUE);
      setState(601);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
      case 1: {
        setState(600);
        match(tsqlParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Print_statementContext ------------------------------------------------------------------

tsqlParser::Print_statementContext::Print_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Print_statementContext::PRINT() {
  return getToken(tsqlParser::PRINT, 0);
}

tsqlParser::ExpressionContext* tsqlParser::Print_statementContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

tree::TerminalNode* tsqlParser::Print_statementContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}


size_t tsqlParser::Print_statementContext::getRuleIndex() const {
  return tsqlParser::RulePrint_statement;
}


std::any tsqlParser::Print_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitPrint_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Print_statementContext* tsqlParser::print_statement() {
  Print_statementContext *_localctx = _tracker.createInstance<Print_statementContext>(_ctx, getState());
  enterRule(_localctx, 38, tsqlParser::RulePrint_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(605);
    match(tsqlParser::PRINT);
    setState(606);
    expression(0);
    setState(608);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
    case 1: {
      setState(607);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Raiseerror_statementContext ------------------------------------------------------------------

tsqlParser::Raiseerror_statementContext::Raiseerror_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Raiseerror_statementContext::RAISERROR() {
  return getToken(tsqlParser::RAISERROR, 0);
}

tree::TerminalNode* tsqlParser::Raiseerror_statementContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Raiseerror_statementContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Raiseerror_statementContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}

tree::TerminalNode* tsqlParser::Raiseerror_statementContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

std::vector<tsqlParser::Constant_LOCAL_IDContext *> tsqlParser::Raiseerror_statementContext::constant_LOCAL_ID() {
  return getRuleContexts<tsqlParser::Constant_LOCAL_IDContext>();
}

tsqlParser::Constant_LOCAL_IDContext* tsqlParser::Raiseerror_statementContext::constant_LOCAL_ID(size_t i) {
  return getRuleContext<tsqlParser::Constant_LOCAL_IDContext>(i);
}

tree::TerminalNode* tsqlParser::Raiseerror_statementContext::DECIMAL() {
  return getToken(tsqlParser::DECIMAL, 0);
}

tree::TerminalNode* tsqlParser::Raiseerror_statementContext::STRING() {
  return getToken(tsqlParser::STRING, 0);
}

tree::TerminalNode* tsqlParser::Raiseerror_statementContext::LOCAL_ID() {
  return getToken(tsqlParser::LOCAL_ID, 0);
}

tree::TerminalNode* tsqlParser::Raiseerror_statementContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}


size_t tsqlParser::Raiseerror_statementContext::getRuleIndex() const {
  return tsqlParser::RuleRaiseerror_statement;
}


std::any tsqlParser::Raiseerror_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitRaiseerror_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Raiseerror_statementContext* tsqlParser::raiseerror_statement() {
  Raiseerror_statementContext *_localctx = _tracker.createInstance<Raiseerror_statementContext>(_ctx, getState());
  enterRule(_localctx, 40, tsqlParser::RuleRaiseerror_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(610);
    match(tsqlParser::RAISERROR);
    setState(611);
    match(tsqlParser::LR_BRACKET);
    setState(612);
    antlrcpp::downCast<Raiseerror_statementContext *>(_localctx)->msg = _input->LT(1);
    _la = _input->LA(1);
    if (!((((_la - 448) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 448)) & 11) != 0)) {
      antlrcpp::downCast<Raiseerror_statementContext *>(_localctx)->msg = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(613);
    match(tsqlParser::COMMA);
    setState(614);
    antlrcpp::downCast<Raiseerror_statementContext *>(_localctx)->severity = constant_LOCAL_ID();
    setState(615);
    match(tsqlParser::COMMA);
    setState(616);
    antlrcpp::downCast<Raiseerror_statementContext *>(_localctx)->state = constant_LOCAL_ID();
    setState(621);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == tsqlParser::COMMA) {
      setState(617);
      match(tsqlParser::COMMA);
      setState(618);
      constant_LOCAL_ID();
      setState(623);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(624);
    match(tsqlParser::RR_BRACKET);
    setState(626);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
    case 1: {
      setState(625);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Another_statementContext ------------------------------------------------------------------

tsqlParser::Another_statementContext::Another_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::Cursor_statementContext* tsqlParser::Another_statementContext::cursor_statement() {
  return getRuleContext<tsqlParser::Cursor_statementContext>(0);
}

tsqlParser::Execute_statementContext* tsqlParser::Another_statementContext::execute_statement() {
  return getRuleContext<tsqlParser::Execute_statementContext>(0);
}

tsqlParser::Security_statementContext* tsqlParser::Another_statementContext::security_statement() {
  return getRuleContext<tsqlParser::Security_statementContext>(0);
}

tsqlParser::Set_statementContext* tsqlParser::Another_statementContext::set_statement() {
  return getRuleContext<tsqlParser::Set_statementContext>(0);
}

tsqlParser::Transaction_statementContext* tsqlParser::Another_statementContext::transaction_statement() {
  return getRuleContext<tsqlParser::Transaction_statementContext>(0);
}

tsqlParser::Use_statementContext* tsqlParser::Another_statementContext::use_statement() {
  return getRuleContext<tsqlParser::Use_statementContext>(0);
}


size_t tsqlParser::Another_statementContext::getRuleIndex() const {
  return tsqlParser::RuleAnother_statement;
}


std::any tsqlParser::Another_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitAnother_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Another_statementContext* tsqlParser::another_statement() {
  Another_statementContext *_localctx = _tracker.createInstance<Another_statementContext>(_ctx, getState());
  enterRule(_localctx, 42, tsqlParser::RuleAnother_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(634);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(628);
      cursor_statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(629);
      execute_statement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(630);
      security_statement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(631);
      set_statement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(632);
      transaction_statement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(633);
      use_statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Delete_statementContext ------------------------------------------------------------------

tsqlParser::Delete_statementContext::Delete_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Delete_statementContext::DELETE() {
  return getToken(tsqlParser::DELETE, 0);
}

tsqlParser::Delete_statement_fromContext* tsqlParser::Delete_statementContext::delete_statement_from() {
  return getRuleContext<tsqlParser::Delete_statement_fromContext>(0);
}

tsqlParser::With_expressionContext* tsqlParser::Delete_statementContext::with_expression() {
  return getRuleContext<tsqlParser::With_expressionContext>(0);
}

tsqlParser::Top_clause_dmContext* tsqlParser::Delete_statementContext::top_clause_dm() {
  return getRuleContext<tsqlParser::Top_clause_dmContext>(0);
}

std::vector<tree::TerminalNode *> tsqlParser::Delete_statementContext::FROM() {
  return getTokens(tsqlParser::FROM);
}

tree::TerminalNode* tsqlParser::Delete_statementContext::FROM(size_t i) {
  return getToken(tsqlParser::FROM, i);
}

tsqlParser::Insert_with_table_hintsContext* tsqlParser::Delete_statementContext::insert_with_table_hints() {
  return getRuleContext<tsqlParser::Insert_with_table_hintsContext>(0);
}

tsqlParser::Output_clauseContext* tsqlParser::Delete_statementContext::output_clause() {
  return getRuleContext<tsqlParser::Output_clauseContext>(0);
}

tsqlParser::Table_sourcesContext* tsqlParser::Delete_statementContext::table_sources() {
  return getRuleContext<tsqlParser::Table_sourcesContext>(0);
}

tsqlParser::Where_clause_dmlContext* tsqlParser::Delete_statementContext::where_clause_dml() {
  return getRuleContext<tsqlParser::Where_clause_dmlContext>(0);
}

tsqlParser::For_clauseContext* tsqlParser::Delete_statementContext::for_clause() {
  return getRuleContext<tsqlParser::For_clauseContext>(0);
}

tsqlParser::Option_clauseContext* tsqlParser::Delete_statementContext::option_clause() {
  return getRuleContext<tsqlParser::Option_clauseContext>(0);
}

tree::TerminalNode* tsqlParser::Delete_statementContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}


size_t tsqlParser::Delete_statementContext::getRuleIndex() const {
  return tsqlParser::RuleDelete_statement;
}


std::any tsqlParser::Delete_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDelete_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Delete_statementContext* tsqlParser::delete_statement() {
  Delete_statementContext *_localctx = _tracker.createInstance<Delete_statementContext>(_ctx, getState());
  enterRule(_localctx, 44, tsqlParser::RuleDelete_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(637);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::WITH) {
      setState(636);
      with_expression();
    }
    setState(639);
    match(tsqlParser::DELETE);
    setState(641);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::TOP) {
      setState(640);
      top_clause_dm();
    }
    setState(644);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::FROM) {
      setState(643);
      match(tsqlParser::FROM);
    }
    setState(646);
    delete_statement_from();
    setState(648);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
    case 1: {
      setState(647);
      insert_with_table_hints();
      break;
    }

    default:
      break;
    }
    setState(651);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
    case 1: {
      setState(650);
      output_clause();
      break;
    }

    default:
      break;
    }
    setState(655);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::FROM) {
      setState(653);
      match(tsqlParser::FROM);
      setState(654);
      table_sources();
    }
    setState(658);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::WHERE) {
      setState(657);
      where_clause_dml();
    }
    setState(661);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::FOR) {
      setState(660);
      for_clause();
    }
    setState(664);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::OPTION) {
      setState(663);
      option_clause();
    }
    setState(667);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx)) {
    case 1: {
      setState(666);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Delete_statement_fromContext ------------------------------------------------------------------

tsqlParser::Delete_statement_fromContext::Delete_statement_fromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::R_idContext* tsqlParser::Delete_statement_fromContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tsqlParser::With_table_hintsContext* tsqlParser::Delete_statement_fromContext::with_table_hints() {
  return getRuleContext<tsqlParser::With_table_hintsContext>(0);
}

tsqlParser::Ddl_objectContext* tsqlParser::Delete_statement_fromContext::ddl_object() {
  return getRuleContext<tsqlParser::Ddl_objectContext>(0);
}

tsqlParser::Rowset_function_limitedContext* tsqlParser::Delete_statement_fromContext::rowset_function_limited() {
  return getRuleContext<tsqlParser::Rowset_function_limitedContext>(0);
}

tree::TerminalNode* tsqlParser::Delete_statement_fromContext::LOCAL_ID() {
  return getToken(tsqlParser::LOCAL_ID, 0);
}


size_t tsqlParser::Delete_statement_fromContext::getRuleIndex() const {
  return tsqlParser::RuleDelete_statement_from;
}


std::any tsqlParser::Delete_statement_fromContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDelete_statement_from(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Delete_statement_fromContext* tsqlParser::delete_statement_from() {
  Delete_statement_fromContext *_localctx = _tracker.createInstance<Delete_statement_fromContext>(_ctx, getState());
  enterRule(_localctx, 46, tsqlParser::RuleDelete_statement_from);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(676);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(669);
      r_id();
      setState(671);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx)) {
      case 1: {
        setState(670);
        with_table_hints();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(673);
      ddl_object();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(674);
      rowset_function_limited();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(675);
      antlrcpp::downCast<Delete_statement_fromContext *>(_localctx)->table_var = match(tsqlParser::LOCAL_ID);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Insert_statementContext ------------------------------------------------------------------

tsqlParser::Insert_statementContext::Insert_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Insert_statementContext::INSERT() {
  return getToken(tsqlParser::INSERT, 0);
}

tsqlParser::Insert_statement_valueContext* tsqlParser::Insert_statementContext::insert_statement_value() {
  return getRuleContext<tsqlParser::Insert_statement_valueContext>(0);
}

tsqlParser::Ddl_objectContext* tsqlParser::Insert_statementContext::ddl_object() {
  return getRuleContext<tsqlParser::Ddl_objectContext>(0);
}

tsqlParser::Rowset_function_limitedContext* tsqlParser::Insert_statementContext::rowset_function_limited() {
  return getRuleContext<tsqlParser::Rowset_function_limitedContext>(0);
}

tsqlParser::With_expressionContext* tsqlParser::Insert_statementContext::with_expression() {
  return getRuleContext<tsqlParser::With_expressionContext>(0);
}

tsqlParser::Top_clause_dmContext* tsqlParser::Insert_statementContext::top_clause_dm() {
  return getRuleContext<tsqlParser::Top_clause_dmContext>(0);
}

tree::TerminalNode* tsqlParser::Insert_statementContext::INTO() {
  return getToken(tsqlParser::INTO, 0);
}

tsqlParser::Insert_with_table_hintsContext* tsqlParser::Insert_statementContext::insert_with_table_hints() {
  return getRuleContext<tsqlParser::Insert_with_table_hintsContext>(0);
}

tree::TerminalNode* tsqlParser::Insert_statementContext::FROM() {
  return getToken(tsqlParser::FROM, 0);
}

tsqlParser::Derived_tableContext* tsqlParser::Insert_statementContext::derived_table() {
  return getRuleContext<tsqlParser::Derived_tableContext>(0);
}

tree::TerminalNode* tsqlParser::Insert_statementContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tsqlParser::Column_name_listContext* tsqlParser::Insert_statementContext::column_name_list() {
  return getRuleContext<tsqlParser::Column_name_listContext>(0);
}

tree::TerminalNode* tsqlParser::Insert_statementContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tsqlParser::Output_clauseContext* tsqlParser::Insert_statementContext::output_clause() {
  return getRuleContext<tsqlParser::Output_clauseContext>(0);
}

tsqlParser::For_clauseContext* tsqlParser::Insert_statementContext::for_clause() {
  return getRuleContext<tsqlParser::For_clauseContext>(0);
}

tsqlParser::Option_clauseContext* tsqlParser::Insert_statementContext::option_clause() {
  return getRuleContext<tsqlParser::Option_clauseContext>(0);
}

tree::TerminalNode* tsqlParser::Insert_statementContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}


size_t tsqlParser::Insert_statementContext::getRuleIndex() const {
  return tsqlParser::RuleInsert_statement;
}


std::any tsqlParser::Insert_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitInsert_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Insert_statementContext* tsqlParser::insert_statement() {
  Insert_statementContext *_localctx = _tracker.createInstance<Insert_statementContext>(_ctx, getState());
  enterRule(_localctx, 48, tsqlParser::RuleInsert_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(679);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::WITH) {
      setState(678);
      with_expression();
    }
    setState(681);
    match(tsqlParser::INSERT);
    setState(683);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::TOP) {
      setState(682);
      top_clause_dm();
    }
    setState(686);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::INTO) {
      setState(685);
      match(tsqlParser::INTO);
    }
    setState(690);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::FILLFACTOR:
      case tsqlParser::FORCESEEK:
      case tsqlParser::NEXT:
      case tsqlParser::NUMERIC:
      case tsqlParser::VALUE:
      case tsqlParser::ABSOLUTE:
      case tsqlParser::APPLY:
      case tsqlParser::AUTO:
      case tsqlParser::AVG:
      case tsqlParser::BASE64:
      case tsqlParser::CALLER:
      case tsqlParser::CAST:
      case tsqlParser::CATCH:
      case tsqlParser::CHECKSUM_AGG:
      case tsqlParser::COMMITTED:
      case tsqlParser::CONCAT:
      case tsqlParser::CONTROL:
      case tsqlParser::COOKIE:
      case tsqlParser::COUNT:
      case tsqlParser::COUNT_BIG:
      case tsqlParser::DATE:
      case tsqlParser::DELAY:
      case tsqlParser::DELETED:
      case tsqlParser::DENSE_RANK:
      case tsqlParser::DISABLE:
      case tsqlParser::DYNAMIC:
      case tsqlParser::ENCRYPTION:
      case tsqlParser::EXIST:
      case tsqlParser::EXPAND:
      case tsqlParser::FAST:
      case tsqlParser::FAST_FORWARD:
      case tsqlParser::FIRST:
      case tsqlParser::FIRST_VALUE:
      case tsqlParser::FOLLOWING:
      case tsqlParser::FORCE:
      case tsqlParser::FORCED:
      case tsqlParser::FORWARD_ONLY:
      case tsqlParser::FULLSCAN:
      case tsqlParser::GLOBAL:
      case tsqlParser::GROUPING:
      case tsqlParser::GROUPING_ID:
      case tsqlParser::HASH:
      case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
      case tsqlParser::IMPERSONATE:
      case tsqlParser::INSENSITIVE:
      case tsqlParser::INSERTED:
      case tsqlParser::ISOLATION:
      case tsqlParser::IO:
      case tsqlParser::KEEP:
      case tsqlParser::KEEPFIXED:
      case tsqlParser::KEYSET:
      case tsqlParser::LAG:
      case tsqlParser::LAST:
      case tsqlParser::LAST_VALUE:
      case tsqlParser::LEAD:
      case tsqlParser::LEVEL:
      case tsqlParser::LOCAL:
      case tsqlParser::LOCK_ESCALATION:
      case tsqlParser::LOGIN:
      case tsqlParser::LOOP:
      case tsqlParser::MARK:
      case tsqlParser::MAX:
      case tsqlParser::MAXDOP:
      case tsqlParser::MAXRECURSION:
      case tsqlParser::MIN:
      case tsqlParser::MODIFY:
      case tsqlParser::NAME:
      case tsqlParser::NOCOUNT:
      case tsqlParser::NODES:
      case tsqlParser::NOEXPAND:
      case tsqlParser::NORECOMPUTE:
      case tsqlParser::NTILE:
      case tsqlParser::NUMBER:
      case tsqlParser::OFFSET:
      case tsqlParser::ONLINE:
      case tsqlParser::ONLY:
      case tsqlParser::OPTIMISTIC:
      case tsqlParser::OPTIMIZE:
      case tsqlParser::OUT:
      case tsqlParser::OUTPUT:
      case tsqlParser::OWNER:
      case tsqlParser::PARAMETERIZATION:
      case tsqlParser::PARTITION:
      case tsqlParser::PATH:
      case tsqlParser::PRECEDING:
      case tsqlParser::PRIOR:
      case tsqlParser::PRIVILEGES:
      case tsqlParser::QUERY:
      case tsqlParser::RANGE:
      case tsqlParser::RANK:
      case tsqlParser::READONLY:
      case tsqlParser::READ_ONLY:
      case tsqlParser::RECOMPILE:
      case tsqlParser::RELATIVE:
      case tsqlParser::REMOTE:
      case tsqlParser::REPEATABLE:
      case tsqlParser::ROBUST:
      case tsqlParser::ROOT:
      case tsqlParser::ROW:
      case tsqlParser::ROWGUID:
      case tsqlParser::ROWS:
      case tsqlParser::ROW_NUMBER:
      case tsqlParser::SAMPLE:
      case tsqlParser::SCHEMABINDING:
      case tsqlParser::SCROLL:
      case tsqlParser::SCROLL_LOCKS:
      case tsqlParser::SELF:
      case tsqlParser::SERIALIZABLE:
      case tsqlParser::SIMPLE:
      case tsqlParser::SIZE:
      case tsqlParser::SNAPSHOT:
      case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
      case tsqlParser::STATIC:
      case tsqlParser::STATS_STREAM:
      case tsqlParser::STDEV:
      case tsqlParser::STDEVP:
      case tsqlParser::SUM:
      case tsqlParser::TEXTIMAGE_ON:
      case tsqlParser::THROW:
      case tsqlParser::TIES:
      case tsqlParser::TIME:
      case tsqlParser::TRY:
      case tsqlParser::TYPE:
      case tsqlParser::TYPE_WARNING:
      case tsqlParser::UNBOUNDED:
      case tsqlParser::UNCOMMITTED:
      case tsqlParser::UNKNOWN:
      case tsqlParser::USING:
      case tsqlParser::VAR:
      case tsqlParser::VARP:
      case tsqlParser::VIEWS:
      case tsqlParser::VIEW_METADATA:
      case tsqlParser::WORK:
      case tsqlParser::XML:
      case tsqlParser::XMLNAMESPACES:
      case tsqlParser::ZONE:
      case tsqlParser::DOUBLE_QUOTE_ID:
      case tsqlParser::SQUARE_BRACKET_ID:
      case tsqlParser::LOCAL_ID:
      case tsqlParser::ID: {
        setState(688);
        ddl_object();
        break;
      }

      case tsqlParser::OPENDATASOURCE:
      case tsqlParser::OPENQUERY: {
        setState(689);
        rowset_function_limited();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(693);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx)) {
    case 1: {
      setState(692);
      insert_with_table_hints();
      break;
    }

    default:
      break;
    }
    setState(697);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::FROM) {
      setState(695);
      match(tsqlParser::FROM);
      setState(696);
      derived_table();
    }
    setState(703);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
    case 1: {
      setState(699);
      match(tsqlParser::LR_BRACKET);
      setState(700);
      column_name_list();
      setState(701);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    default:
      break;
    }
    setState(706);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::OUTPUT) {
      setState(705);
      output_clause();
    }
    setState(708);
    insert_statement_value();
    setState(710);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::FOR) {
      setState(709);
      for_clause();
    }
    setState(713);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::OPTION) {
      setState(712);
      option_clause();
    }
    setState(716);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx)) {
    case 1: {
      setState(715);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Insert_statement_valueContext ------------------------------------------------------------------

tsqlParser::Insert_statement_valueContext::Insert_statement_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::Table_value_constructorContext* tsqlParser::Insert_statement_valueContext::table_value_constructor() {
  return getRuleContext<tsqlParser::Table_value_constructorContext>(0);
}

tsqlParser::Derived_tableContext* tsqlParser::Insert_statement_valueContext::derived_table() {
  return getRuleContext<tsqlParser::Derived_tableContext>(0);
}

tsqlParser::Execute_statementContext* tsqlParser::Insert_statement_valueContext::execute_statement() {
  return getRuleContext<tsqlParser::Execute_statementContext>(0);
}

tree::TerminalNode* tsqlParser::Insert_statement_valueContext::DEFAULT() {
  return getToken(tsqlParser::DEFAULT, 0);
}

tree::TerminalNode* tsqlParser::Insert_statement_valueContext::VALUES() {
  return getToken(tsqlParser::VALUES, 0);
}


size_t tsqlParser::Insert_statement_valueContext::getRuleIndex() const {
  return tsqlParser::RuleInsert_statement_value;
}


std::any tsqlParser::Insert_statement_valueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitInsert_statement_value(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Insert_statement_valueContext* tsqlParser::insert_statement_value() {
  Insert_statement_valueContext *_localctx = _tracker.createInstance<Insert_statement_valueContext>(_ctx, getState());
  enterRule(_localctx, 50, tsqlParser::RuleInsert_statement_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(723);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::VALUES: {
        enterOuterAlt(_localctx, 1);
        setState(718);
        table_value_constructor();
        break;
      }

      case tsqlParser::SELECT:
      case tsqlParser::WITH:
      case tsqlParser::LR_BRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(719);
        derived_table();
        break;
      }

      case tsqlParser::EXECUTE: {
        enterOuterAlt(_localctx, 3);
        setState(720);
        execute_statement();
        break;
      }

      case tsqlParser::DEFAULT: {
        enterOuterAlt(_localctx, 4);
        setState(721);
        match(tsqlParser::DEFAULT);
        setState(722);
        match(tsqlParser::VALUES);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_statementContext ------------------------------------------------------------------

tsqlParser::Select_statementContext::Select_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::Query_expressionContext* tsqlParser::Select_statementContext::query_expression() {
  return getRuleContext<tsqlParser::Query_expressionContext>(0);
}

tsqlParser::With_expressionContext* tsqlParser::Select_statementContext::with_expression() {
  return getRuleContext<tsqlParser::With_expressionContext>(0);
}

tsqlParser::Order_by_clauseContext* tsqlParser::Select_statementContext::order_by_clause() {
  return getRuleContext<tsqlParser::Order_by_clauseContext>(0);
}

tsqlParser::For_clauseContext* tsqlParser::Select_statementContext::for_clause() {
  return getRuleContext<tsqlParser::For_clauseContext>(0);
}

tsqlParser::Option_clauseContext* tsqlParser::Select_statementContext::option_clause() {
  return getRuleContext<tsqlParser::Option_clauseContext>(0);
}

tree::TerminalNode* tsqlParser::Select_statementContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}


size_t tsqlParser::Select_statementContext::getRuleIndex() const {
  return tsqlParser::RuleSelect_statement;
}


std::any tsqlParser::Select_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitSelect_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Select_statementContext* tsqlParser::select_statement() {
  Select_statementContext *_localctx = _tracker.createInstance<Select_statementContext>(_ctx, getState());
  enterRule(_localctx, 52, tsqlParser::RuleSelect_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(726);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::WITH) {
      setState(725);
      with_expression();
    }
    setState(728);
    query_expression(0);
    setState(730);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
    case 1: {
      setState(729);
      order_by_clause();
      break;
    }

    default:
      break;
    }
    setState(733);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx)) {
    case 1: {
      setState(732);
      for_clause();
      break;
    }

    default:
      break;
    }
    setState(736);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
    case 1: {
      setState(735);
      option_clause();
      break;
    }

    default:
      break;
    }
    setState(739);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx)) {
    case 1: {
      setState(738);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Update_statementContext ------------------------------------------------------------------

tsqlParser::Update_statementContext::Update_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Update_statementContext::UPDATE() {
  return getToken(tsqlParser::UPDATE, 0);
}

tree::TerminalNode* tsqlParser::Update_statementContext::SET() {
  return getToken(tsqlParser::SET, 0);
}

std::vector<tsqlParser::Update_elemContext *> tsqlParser::Update_statementContext::update_elem() {
  return getRuleContexts<tsqlParser::Update_elemContext>();
}

tsqlParser::Update_elemContext* tsqlParser::Update_statementContext::update_elem(size_t i) {
  return getRuleContext<tsqlParser::Update_elemContext>(i);
}

tsqlParser::Ddl_objectContext* tsqlParser::Update_statementContext::ddl_object() {
  return getRuleContext<tsqlParser::Ddl_objectContext>(0);
}

tsqlParser::Rowset_function_limitedContext* tsqlParser::Update_statementContext::rowset_function_limited() {
  return getRuleContext<tsqlParser::Rowset_function_limitedContext>(0);
}

tsqlParser::With_expressionContext* tsqlParser::Update_statementContext::with_expression() {
  return getRuleContext<tsqlParser::With_expressionContext>(0);
}

tsqlParser::Top_clause_dmContext* tsqlParser::Update_statementContext::top_clause_dm() {
  return getRuleContext<tsqlParser::Top_clause_dmContext>(0);
}

tsqlParser::With_table_hintsContext* tsqlParser::Update_statementContext::with_table_hints() {
  return getRuleContext<tsqlParser::With_table_hintsContext>(0);
}

std::vector<tree::TerminalNode *> tsqlParser::Update_statementContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Update_statementContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}

tsqlParser::Output_clauseContext* tsqlParser::Update_statementContext::output_clause() {
  return getRuleContext<tsqlParser::Output_clauseContext>(0);
}

tree::TerminalNode* tsqlParser::Update_statementContext::FROM() {
  return getToken(tsqlParser::FROM, 0);
}

tsqlParser::Table_sourcesContext* tsqlParser::Update_statementContext::table_sources() {
  return getRuleContext<tsqlParser::Table_sourcesContext>(0);
}

tsqlParser::Where_clause_dmlContext* tsqlParser::Update_statementContext::where_clause_dml() {
  return getRuleContext<tsqlParser::Where_clause_dmlContext>(0);
}

tsqlParser::For_clauseContext* tsqlParser::Update_statementContext::for_clause() {
  return getRuleContext<tsqlParser::For_clauseContext>(0);
}

tsqlParser::Option_clauseContext* tsqlParser::Update_statementContext::option_clause() {
  return getRuleContext<tsqlParser::Option_clauseContext>(0);
}

tree::TerminalNode* tsqlParser::Update_statementContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}


size_t tsqlParser::Update_statementContext::getRuleIndex() const {
  return tsqlParser::RuleUpdate_statement;
}


std::any tsqlParser::Update_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitUpdate_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Update_statementContext* tsqlParser::update_statement() {
  Update_statementContext *_localctx = _tracker.createInstance<Update_statementContext>(_ctx, getState());
  enterRule(_localctx, 54, tsqlParser::RuleUpdate_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(742);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::WITH) {
      setState(741);
      with_expression();
    }
    setState(744);
    match(tsqlParser::UPDATE);
    setState(746);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::TOP) {
      setState(745);
      top_clause_dm();
    }
    setState(750);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::FILLFACTOR:
      case tsqlParser::FORCESEEK:
      case tsqlParser::NEXT:
      case tsqlParser::NUMERIC:
      case tsqlParser::VALUE:
      case tsqlParser::ABSOLUTE:
      case tsqlParser::APPLY:
      case tsqlParser::AUTO:
      case tsqlParser::AVG:
      case tsqlParser::BASE64:
      case tsqlParser::CALLER:
      case tsqlParser::CAST:
      case tsqlParser::CATCH:
      case tsqlParser::CHECKSUM_AGG:
      case tsqlParser::COMMITTED:
      case tsqlParser::CONCAT:
      case tsqlParser::CONTROL:
      case tsqlParser::COOKIE:
      case tsqlParser::COUNT:
      case tsqlParser::COUNT_BIG:
      case tsqlParser::DATE:
      case tsqlParser::DELAY:
      case tsqlParser::DELETED:
      case tsqlParser::DENSE_RANK:
      case tsqlParser::DISABLE:
      case tsqlParser::DYNAMIC:
      case tsqlParser::ENCRYPTION:
      case tsqlParser::EXIST:
      case tsqlParser::EXPAND:
      case tsqlParser::FAST:
      case tsqlParser::FAST_FORWARD:
      case tsqlParser::FIRST:
      case tsqlParser::FIRST_VALUE:
      case tsqlParser::FOLLOWING:
      case tsqlParser::FORCE:
      case tsqlParser::FORCED:
      case tsqlParser::FORWARD_ONLY:
      case tsqlParser::FULLSCAN:
      case tsqlParser::GLOBAL:
      case tsqlParser::GROUPING:
      case tsqlParser::GROUPING_ID:
      case tsqlParser::HASH:
      case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
      case tsqlParser::IMPERSONATE:
      case tsqlParser::INSENSITIVE:
      case tsqlParser::INSERTED:
      case tsqlParser::ISOLATION:
      case tsqlParser::IO:
      case tsqlParser::KEEP:
      case tsqlParser::KEEPFIXED:
      case tsqlParser::KEYSET:
      case tsqlParser::LAG:
      case tsqlParser::LAST:
      case tsqlParser::LAST_VALUE:
      case tsqlParser::LEAD:
      case tsqlParser::LEVEL:
      case tsqlParser::LOCAL:
      case tsqlParser::LOCK_ESCALATION:
      case tsqlParser::LOGIN:
      case tsqlParser::LOOP:
      case tsqlParser::MARK:
      case tsqlParser::MAX:
      case tsqlParser::MAXDOP:
      case tsqlParser::MAXRECURSION:
      case tsqlParser::MIN:
      case tsqlParser::MODIFY:
      case tsqlParser::NAME:
      case tsqlParser::NOCOUNT:
      case tsqlParser::NODES:
      case tsqlParser::NOEXPAND:
      case tsqlParser::NORECOMPUTE:
      case tsqlParser::NTILE:
      case tsqlParser::NUMBER:
      case tsqlParser::OFFSET:
      case tsqlParser::ONLINE:
      case tsqlParser::ONLY:
      case tsqlParser::OPTIMISTIC:
      case tsqlParser::OPTIMIZE:
      case tsqlParser::OUT:
      case tsqlParser::OUTPUT:
      case tsqlParser::OWNER:
      case tsqlParser::PARAMETERIZATION:
      case tsqlParser::PARTITION:
      case tsqlParser::PATH:
      case tsqlParser::PRECEDING:
      case tsqlParser::PRIOR:
      case tsqlParser::PRIVILEGES:
      case tsqlParser::QUERY:
      case tsqlParser::RANGE:
      case tsqlParser::RANK:
      case tsqlParser::READONLY:
      case tsqlParser::READ_ONLY:
      case tsqlParser::RECOMPILE:
      case tsqlParser::RELATIVE:
      case tsqlParser::REMOTE:
      case tsqlParser::REPEATABLE:
      case tsqlParser::ROBUST:
      case tsqlParser::ROOT:
      case tsqlParser::ROW:
      case tsqlParser::ROWGUID:
      case tsqlParser::ROWS:
      case tsqlParser::ROW_NUMBER:
      case tsqlParser::SAMPLE:
      case tsqlParser::SCHEMABINDING:
      case tsqlParser::SCROLL:
      case tsqlParser::SCROLL_LOCKS:
      case tsqlParser::SELF:
      case tsqlParser::SERIALIZABLE:
      case tsqlParser::SIMPLE:
      case tsqlParser::SIZE:
      case tsqlParser::SNAPSHOT:
      case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
      case tsqlParser::STATIC:
      case tsqlParser::STATS_STREAM:
      case tsqlParser::STDEV:
      case tsqlParser::STDEVP:
      case tsqlParser::SUM:
      case tsqlParser::TEXTIMAGE_ON:
      case tsqlParser::THROW:
      case tsqlParser::TIES:
      case tsqlParser::TIME:
      case tsqlParser::TRY:
      case tsqlParser::TYPE:
      case tsqlParser::TYPE_WARNING:
      case tsqlParser::UNBOUNDED:
      case tsqlParser::UNCOMMITTED:
      case tsqlParser::UNKNOWN:
      case tsqlParser::USING:
      case tsqlParser::VAR:
      case tsqlParser::VARP:
      case tsqlParser::VIEWS:
      case tsqlParser::VIEW_METADATA:
      case tsqlParser::WORK:
      case tsqlParser::XML:
      case tsqlParser::XMLNAMESPACES:
      case tsqlParser::ZONE:
      case tsqlParser::DOUBLE_QUOTE_ID:
      case tsqlParser::SQUARE_BRACKET_ID:
      case tsqlParser::LOCAL_ID:
      case tsqlParser::ID: {
        setState(748);
        ddl_object();
        break;
      }

      case tsqlParser::OPENDATASOURCE:
      case tsqlParser::OPENQUERY: {
        setState(749);
        rowset_function_limited();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(753);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::WITH || _la == tsqlParser::LR_BRACKET) {
      setState(752);
      with_table_hints();
    }
    setState(755);
    match(tsqlParser::SET);
    setState(756);
    update_elem();
    setState(761);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == tsqlParser::COMMA) {
      setState(757);
      match(tsqlParser::COMMA);
      setState(758);
      update_elem();
      setState(763);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(765);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
    case 1: {
      setState(764);
      output_clause();
      break;
    }

    default:
      break;
    }
    setState(769);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::FROM) {
      setState(767);
      match(tsqlParser::FROM);
      setState(768);
      table_sources();
    }
    setState(772);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::WHERE) {
      setState(771);
      where_clause_dml();
    }
    setState(775);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::FOR) {
      setState(774);
      for_clause();
    }
    setState(778);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::OPTION) {
      setState(777);
      option_clause();
    }
    setState(781);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
    case 1: {
      setState(780);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Where_clause_dmlContext ------------------------------------------------------------------

tsqlParser::Where_clause_dmlContext::Where_clause_dmlContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Where_clause_dmlContext::WHERE() {
  return getToken(tsqlParser::WHERE, 0);
}

tsqlParser::Search_condition_listContext* tsqlParser::Where_clause_dmlContext::search_condition_list() {
  return getRuleContext<tsqlParser::Search_condition_listContext>(0);
}

tree::TerminalNode* tsqlParser::Where_clause_dmlContext::CURRENT() {
  return getToken(tsqlParser::CURRENT, 0);
}

tree::TerminalNode* tsqlParser::Where_clause_dmlContext::OF() {
  return getToken(tsqlParser::OF, 0);
}

tsqlParser::Cursor_nameContext* tsqlParser::Where_clause_dmlContext::cursor_name() {
  return getRuleContext<tsqlParser::Cursor_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Where_clause_dmlContext::LOCAL_ID() {
  return getToken(tsqlParser::LOCAL_ID, 0);
}

tree::TerminalNode* tsqlParser::Where_clause_dmlContext::GLOBAL() {
  return getToken(tsqlParser::GLOBAL, 0);
}


size_t tsqlParser::Where_clause_dmlContext::getRuleIndex() const {
  return tsqlParser::RuleWhere_clause_dml;
}


std::any tsqlParser::Where_clause_dmlContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitWhere_clause_dml(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Where_clause_dmlContext* tsqlParser::where_clause_dml() {
  Where_clause_dmlContext *_localctx = _tracker.createInstance<Where_clause_dmlContext>(_ctx, getState());
  enterRule(_localctx, 56, tsqlParser::RuleWhere_clause_dml);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(783);
    match(tsqlParser::WHERE);
    setState(794);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::CASE:
      case tsqlParser::COALESCE:
      case tsqlParser::CONVERT:
      case tsqlParser::CURRENT_TIMESTAMP:
      case tsqlParser::CURRENT_USER:
      case tsqlParser::DEFAULT:
      case tsqlParser::EXISTS:
      case tsqlParser::EXP:
      case tsqlParser::FILLFACTOR:
      case tsqlParser::FORCESEEK:
      case tsqlParser::IDENTITY:
      case tsqlParser::IIF:
      case tsqlParser::LEFT:
      case tsqlParser::LOG:
      case tsqlParser::LOG10:
      case tsqlParser::NEXT:
      case tsqlParser::NOT:
      case tsqlParser::NULL_:
      case tsqlParser::NULLIF:
      case tsqlParser::NUMERIC:
      case tsqlParser::OVER:
      case tsqlParser::RIGHT:
      case tsqlParser::SESSION_USER:
      case tsqlParser::SIGN:
      case tsqlParser::SYSTEM_USER:
      case tsqlParser::TRY_CAST:
      case tsqlParser::TRY_CONVERT:
      case tsqlParser::TRY_PARSE:
      case tsqlParser::VALUE:
      case tsqlParser::ABSOLUTE:
      case tsqlParser::APPLY:
      case tsqlParser::AUTO:
      case tsqlParser::AVG:
      case tsqlParser::BASE64:
      case tsqlParser::BINARY_CHECKSUM:
      case tsqlParser::CALLER:
      case tsqlParser::CAST:
      case tsqlParser::CATCH:
      case tsqlParser::CEILING:
      case tsqlParser::CHECKSUM:
      case tsqlParser::CHECKSUM_AGG:
      case tsqlParser::COMMITTED:
      case tsqlParser::CONCAT:
      case tsqlParser::CONTROL:
      case tsqlParser::COOKIE:
      case tsqlParser::COS:
      case tsqlParser::COUNT:
      case tsqlParser::COUNT_BIG:
      case tsqlParser::DATE:
      case tsqlParser::DATEADD:
      case tsqlParser::DATEDIFF:
      case tsqlParser::DATENAME:
      case tsqlParser::DATEPART:
      case tsqlParser::DATETIMEOFFSETFROMPARTS:
      case tsqlParser::DELAY:
      case tsqlParser::DELETED:
      case tsqlParser::DENSE_RANK:
      case tsqlParser::DISABLE:
      case tsqlParser::DYNAMIC:
      case tsqlParser::ENCRYPTION:
      case tsqlParser::EXIST:
      case tsqlParser::EXPAND:
      case tsqlParser::FAST:
      case tsqlParser::FAST_FORWARD:
      case tsqlParser::FIRST:
      case tsqlParser::FIRST_VALUE:
      case tsqlParser::FLOOR:
      case tsqlParser::FOLLOWING:
      case tsqlParser::FORCE:
      case tsqlParser::FORCED:
      case tsqlParser::FORWARD_ONLY:
      case tsqlParser::FULLSCAN:
      case tsqlParser::GLOBAL:
      case tsqlParser::GROUPING:
      case tsqlParser::GROUPING_ID:
      case tsqlParser::HASH:
      case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
      case tsqlParser::IMPERSONATE:
      case tsqlParser::INSENSITIVE:
      case tsqlParser::INSERTED:
      case tsqlParser::ISOLATION:
      case tsqlParser::IO:
      case tsqlParser::KEEP:
      case tsqlParser::KEEPFIXED:
      case tsqlParser::KEYSET:
      case tsqlParser::LAG:
      case tsqlParser::LAST:
      case tsqlParser::LAST_VALUE:
      case tsqlParser::LEAD:
      case tsqlParser::LEVEL:
      case tsqlParser::LOCAL:
      case tsqlParser::LOCK_ESCALATION:
      case tsqlParser::LOGIN:
      case tsqlParser::LOOP:
      case tsqlParser::MARK:
      case tsqlParser::MAX:
      case tsqlParser::MAXDOP:
      case tsqlParser::MAXRECURSION:
      case tsqlParser::MIN:
      case tsqlParser::MIN_ACTIVE_ROWVERSION:
      case tsqlParser::MODIFY:
      case tsqlParser::NAME:
      case tsqlParser::NOCOUNT:
      case tsqlParser::NODES:
      case tsqlParser::NOEXPAND:
      case tsqlParser::NORECOMPUTE:
      case tsqlParser::NTILE:
      case tsqlParser::NUMBER:
      case tsqlParser::OFFSET:
      case tsqlParser::ONLINE:
      case tsqlParser::ONLY:
      case tsqlParser::OPTIMISTIC:
      case tsqlParser::OPTIMIZE:
      case tsqlParser::OUT:
      case tsqlParser::OUTPUT:
      case tsqlParser::OWNER:
      case tsqlParser::PARAMETERIZATION:
      case tsqlParser::PARSE:
      case tsqlParser::PARTITION:
      case tsqlParser::PATH:
      case tsqlParser::PERCENTILE_CONT:
      case tsqlParser::POWER:
      case tsqlParser::PRECEDING:
      case tsqlParser::PRIOR:
      case tsqlParser::PRIVILEGES:
      case tsqlParser::QUERY:
      case tsqlParser::RANGE:
      case tsqlParser::RANK:
      case tsqlParser::READONLY:
      case tsqlParser::READ_ONLY:
      case tsqlParser::RECOMPILE:
      case tsqlParser::RELATIVE:
      case tsqlParser::REMOTE:
      case tsqlParser::REPEATABLE:
      case tsqlParser::ROBUST:
      case tsqlParser::ROOT:
      case tsqlParser::ROUND:
      case tsqlParser::ROW:
      case tsqlParser::ROWGUID:
      case tsqlParser::ROWS:
      case tsqlParser::ROW_NUMBER:
      case tsqlParser::SAMPLE:
      case tsqlParser::SCHEMABINDING:
      case tsqlParser::SCROLL:
      case tsqlParser::SCROLL_LOCKS:
      case tsqlParser::SELF:
      case tsqlParser::SERIALIZABLE:
      case tsqlParser::SIMPLE:
      case tsqlParser::SIN:
      case tsqlParser::SIZE:
      case tsqlParser::SNAPSHOT:
      case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
      case tsqlParser::STATIC:
      case tsqlParser::STATS_STREAM:
      case tsqlParser::STDEV:
      case tsqlParser::STDEVP:
      case tsqlParser::STRING_AGG:
      case tsqlParser::STRING_SPLIT:
      case tsqlParser::SUM:
      case tsqlParser::SQRT:
      case tsqlParser::SQUARE:
      case tsqlParser::TAN:
      case tsqlParser::TEXTIMAGE_ON:
      case tsqlParser::THROW:
      case tsqlParser::TIES:
      case tsqlParser::TIME:
      case tsqlParser::TRY:
      case tsqlParser::TYPE:
      case tsqlParser::TYPE_WARNING:
      case tsqlParser::UNBOUNDED:
      case tsqlParser::UNCOMMITTED:
      case tsqlParser::UNKNOWN:
      case tsqlParser::USING:
      case tsqlParser::VAR:
      case tsqlParser::VARP:
      case tsqlParser::VIEWS:
      case tsqlParser::VIEW_METADATA:
      case tsqlParser::WORK:
      case tsqlParser::XML:
      case tsqlParser::XMLNAMESPACES:
      case tsqlParser::ZONE:
      case tsqlParser::DOUBLE_QUOTE_ID:
      case tsqlParser::SQUARE_BRACKET_ID:
      case tsqlParser::LOCAL_ID:
      case tsqlParser::DECIMAL:
      case tsqlParser::ID:
      case tsqlParser::STRING:
      case tsqlParser::BINARY:
      case tsqlParser::FLOAT:
      case tsqlParser::REAL:
      case tsqlParser::DOLLAR:
      case tsqlParser::LR_BRACKET:
      case tsqlParser::PLUS:
      case tsqlParser::MINUS:
      case tsqlParser::BIT_NOT: {
        setState(784);
        search_condition_list();
        break;
      }

      case tsqlParser::CURRENT: {
        setState(785);
        match(tsqlParser::CURRENT);
        setState(786);
        match(tsqlParser::OF);
        setState(792);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx)) {
        case 1: {
          setState(788);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
          case 1: {
            setState(787);
            match(tsqlParser::GLOBAL);
            break;
          }

          default:
            break;
          }
          setState(790);
          cursor_name();
          break;
        }

        case 2: {
          setState(791);
          antlrcpp::downCast<Where_clause_dmlContext *>(_localctx)->cursor_var = match(tsqlParser::LOCAL_ID);
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Output_clauseContext ------------------------------------------------------------------

tsqlParser::Output_clauseContext::Output_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Output_clauseContext::OUTPUT() {
  return getToken(tsqlParser::OUTPUT, 0);
}

std::vector<tsqlParser::Output_dml_list_elemContext *> tsqlParser::Output_clauseContext::output_dml_list_elem() {
  return getRuleContexts<tsqlParser::Output_dml_list_elemContext>();
}

tsqlParser::Output_dml_list_elemContext* tsqlParser::Output_clauseContext::output_dml_list_elem(size_t i) {
  return getRuleContext<tsqlParser::Output_dml_list_elemContext>(i);
}

std::vector<tree::TerminalNode *> tsqlParser::Output_clauseContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Output_clauseContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}

tree::TerminalNode* tsqlParser::Output_clauseContext::INTO() {
  return getToken(tsqlParser::INTO, 0);
}

tsqlParser::Ddl_objectContext* tsqlParser::Output_clauseContext::ddl_object() {
  return getRuleContext<tsqlParser::Ddl_objectContext>(0);
}

tree::TerminalNode* tsqlParser::Output_clauseContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tsqlParser::Column_name_listContext* tsqlParser::Output_clauseContext::column_name_list() {
  return getRuleContext<tsqlParser::Column_name_listContext>(0);
}

tree::TerminalNode* tsqlParser::Output_clauseContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}


size_t tsqlParser::Output_clauseContext::getRuleIndex() const {
  return tsqlParser::RuleOutput_clause;
}


std::any tsqlParser::Output_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitOutput_clause(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Output_clauseContext* tsqlParser::output_clause() {
  Output_clauseContext *_localctx = _tracker.createInstance<Output_clauseContext>(_ctx, getState());
  enterRule(_localctx, 58, tsqlParser::RuleOutput_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(796);
    match(tsqlParser::OUTPUT);
    setState(797);
    output_dml_list_elem();
    setState(802);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == tsqlParser::COMMA) {
      setState(798);
      match(tsqlParser::COMMA);
      setState(799);
      output_dml_list_elem();
      setState(804);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(813);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::INTO) {
      setState(805);
      match(tsqlParser::INTO);
      setState(806);
      ddl_object();
      setState(811);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
      case 1: {
        setState(807);
        match(tsqlParser::LR_BRACKET);
        setState(808);
        column_name_list();
        setState(809);
        match(tsqlParser::RR_BRACKET);
        break;
      }

      default:
        break;
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Output_dml_list_elemContext ------------------------------------------------------------------

tsqlParser::Output_dml_list_elemContext::Output_dml_list_elemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::Output_column_nameContext* tsqlParser::Output_dml_list_elemContext::output_column_name() {
  return getRuleContext<tsqlParser::Output_column_nameContext>(0);
}

tsqlParser::ExpressionContext* tsqlParser::Output_dml_list_elemContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

tsqlParser::Column_aliasContext* tsqlParser::Output_dml_list_elemContext::column_alias() {
  return getRuleContext<tsqlParser::Column_aliasContext>(0);
}

tree::TerminalNode* tsqlParser::Output_dml_list_elemContext::AS() {
  return getToken(tsqlParser::AS, 0);
}


size_t tsqlParser::Output_dml_list_elemContext::getRuleIndex() const {
  return tsqlParser::RuleOutput_dml_list_elem;
}


std::any tsqlParser::Output_dml_list_elemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitOutput_dml_list_elem(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Output_dml_list_elemContext* tsqlParser::output_dml_list_elem() {
  Output_dml_list_elemContext *_localctx = _tracker.createInstance<Output_dml_list_elemContext>(_ctx, getState());
  enterRule(_localctx, 60, tsqlParser::RuleOutput_dml_list_elem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(817);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx)) {
    case 1: {
      setState(815);
      output_column_name();
      break;
    }

    case 2: {
      setState(816);
      expression(0);
      break;
    }

    default:
      break;
    }
    setState(823);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx)) {
    case 1: {
      setState(820);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::AS) {
        setState(819);
        match(tsqlParser::AS);
      }
      setState(822);
      column_alias();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Output_column_nameContext ------------------------------------------------------------------

tsqlParser::Output_column_nameContext::Output_column_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Output_column_nameContext::DOT() {
  return getToken(tsqlParser::DOT, 0);
}

tree::TerminalNode* tsqlParser::Output_column_nameContext::DELETED() {
  return getToken(tsqlParser::DELETED, 0);
}

tree::TerminalNode* tsqlParser::Output_column_nameContext::INSERTED() {
  return getToken(tsqlParser::INSERTED, 0);
}

tsqlParser::Full_table_nameContext* tsqlParser::Output_column_nameContext::full_table_name() {
  return getRuleContext<tsqlParser::Full_table_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Output_column_nameContext::STAR() {
  return getToken(tsqlParser::STAR, 0);
}

tsqlParser::R_idContext* tsqlParser::Output_column_nameContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tree::TerminalNode* tsqlParser::Output_column_nameContext::DOLLAR_ACTION() {
  return getToken(tsqlParser::DOLLAR_ACTION, 0);
}


size_t tsqlParser::Output_column_nameContext::getRuleIndex() const {
  return tsqlParser::RuleOutput_column_name;
}


std::any tsqlParser::Output_column_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitOutput_column_name(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Output_column_nameContext* tsqlParser::output_column_name() {
  Output_column_nameContext *_localctx = _tracker.createInstance<Output_column_nameContext>(_ctx, getState());
  enterRule(_localctx, 62, tsqlParser::RuleOutput_column_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(836);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::FILLFACTOR:
      case tsqlParser::FORCESEEK:
      case tsqlParser::NEXT:
      case tsqlParser::NUMERIC:
      case tsqlParser::VALUE:
      case tsqlParser::ABSOLUTE:
      case tsqlParser::APPLY:
      case tsqlParser::AUTO:
      case tsqlParser::AVG:
      case tsqlParser::BASE64:
      case tsqlParser::CALLER:
      case tsqlParser::CAST:
      case tsqlParser::CATCH:
      case tsqlParser::CHECKSUM_AGG:
      case tsqlParser::COMMITTED:
      case tsqlParser::CONCAT:
      case tsqlParser::CONTROL:
      case tsqlParser::COOKIE:
      case tsqlParser::COUNT:
      case tsqlParser::COUNT_BIG:
      case tsqlParser::DATE:
      case tsqlParser::DELAY:
      case tsqlParser::DELETED:
      case tsqlParser::DENSE_RANK:
      case tsqlParser::DISABLE:
      case tsqlParser::DYNAMIC:
      case tsqlParser::ENCRYPTION:
      case tsqlParser::EXIST:
      case tsqlParser::EXPAND:
      case tsqlParser::FAST:
      case tsqlParser::FAST_FORWARD:
      case tsqlParser::FIRST:
      case tsqlParser::FIRST_VALUE:
      case tsqlParser::FOLLOWING:
      case tsqlParser::FORCE:
      case tsqlParser::FORCED:
      case tsqlParser::FORWARD_ONLY:
      case tsqlParser::FULLSCAN:
      case tsqlParser::GLOBAL:
      case tsqlParser::GROUPING:
      case tsqlParser::GROUPING_ID:
      case tsqlParser::HASH:
      case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
      case tsqlParser::IMPERSONATE:
      case tsqlParser::INSENSITIVE:
      case tsqlParser::INSERTED:
      case tsqlParser::ISOLATION:
      case tsqlParser::IO:
      case tsqlParser::KEEP:
      case tsqlParser::KEEPFIXED:
      case tsqlParser::KEYSET:
      case tsqlParser::LAG:
      case tsqlParser::LAST:
      case tsqlParser::LAST_VALUE:
      case tsqlParser::LEAD:
      case tsqlParser::LEVEL:
      case tsqlParser::LOCAL:
      case tsqlParser::LOCK_ESCALATION:
      case tsqlParser::LOGIN:
      case tsqlParser::LOOP:
      case tsqlParser::MARK:
      case tsqlParser::MAX:
      case tsqlParser::MAXDOP:
      case tsqlParser::MAXRECURSION:
      case tsqlParser::MIN:
      case tsqlParser::MODIFY:
      case tsqlParser::NAME:
      case tsqlParser::NOCOUNT:
      case tsqlParser::NODES:
      case tsqlParser::NOEXPAND:
      case tsqlParser::NORECOMPUTE:
      case tsqlParser::NTILE:
      case tsqlParser::NUMBER:
      case tsqlParser::OFFSET:
      case tsqlParser::ONLINE:
      case tsqlParser::ONLY:
      case tsqlParser::OPTIMISTIC:
      case tsqlParser::OPTIMIZE:
      case tsqlParser::OUT:
      case tsqlParser::OUTPUT:
      case tsqlParser::OWNER:
      case tsqlParser::PARAMETERIZATION:
      case tsqlParser::PARTITION:
      case tsqlParser::PATH:
      case tsqlParser::PRECEDING:
      case tsqlParser::PRIOR:
      case tsqlParser::PRIVILEGES:
      case tsqlParser::QUERY:
      case tsqlParser::RANGE:
      case tsqlParser::RANK:
      case tsqlParser::READONLY:
      case tsqlParser::READ_ONLY:
      case tsqlParser::RECOMPILE:
      case tsqlParser::RELATIVE:
      case tsqlParser::REMOTE:
      case tsqlParser::REPEATABLE:
      case tsqlParser::ROBUST:
      case tsqlParser::ROOT:
      case tsqlParser::ROW:
      case tsqlParser::ROWGUID:
      case tsqlParser::ROWS:
      case tsqlParser::ROW_NUMBER:
      case tsqlParser::SAMPLE:
      case tsqlParser::SCHEMABINDING:
      case tsqlParser::SCROLL:
      case tsqlParser::SCROLL_LOCKS:
      case tsqlParser::SELF:
      case tsqlParser::SERIALIZABLE:
      case tsqlParser::SIMPLE:
      case tsqlParser::SIZE:
      case tsqlParser::SNAPSHOT:
      case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
      case tsqlParser::STATIC:
      case tsqlParser::STATS_STREAM:
      case tsqlParser::STDEV:
      case tsqlParser::STDEVP:
      case tsqlParser::SUM:
      case tsqlParser::TEXTIMAGE_ON:
      case tsqlParser::THROW:
      case tsqlParser::TIES:
      case tsqlParser::TIME:
      case tsqlParser::TRY:
      case tsqlParser::TYPE:
      case tsqlParser::TYPE_WARNING:
      case tsqlParser::UNBOUNDED:
      case tsqlParser::UNCOMMITTED:
      case tsqlParser::UNKNOWN:
      case tsqlParser::USING:
      case tsqlParser::VAR:
      case tsqlParser::VARP:
      case tsqlParser::VIEWS:
      case tsqlParser::VIEW_METADATA:
      case tsqlParser::WORK:
      case tsqlParser::XML:
      case tsqlParser::XMLNAMESPACES:
      case tsqlParser::ZONE:
      case tsqlParser::DOUBLE_QUOTE_ID:
      case tsqlParser::SQUARE_BRACKET_ID:
      case tsqlParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(828);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
        case 1: {
          setState(825);
          match(tsqlParser::DELETED);
          break;
        }

        case 2: {
          setState(826);
          match(tsqlParser::INSERTED);
          break;
        }

        case 3: {
          setState(827);
          full_table_name();
          break;
        }

        default:
          break;
        }
        setState(830);
        match(tsqlParser::DOT);
        setState(833);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case tsqlParser::STAR: {
            setState(831);
            match(tsqlParser::STAR);
            break;
          }

          case tsqlParser::FILLFACTOR:
          case tsqlParser::FORCESEEK:
          case tsqlParser::NEXT:
          case tsqlParser::NUMERIC:
          case tsqlParser::VALUE:
          case tsqlParser::ABSOLUTE:
          case tsqlParser::APPLY:
          case tsqlParser::AUTO:
          case tsqlParser::AVG:
          case tsqlParser::BASE64:
          case tsqlParser::CALLER:
          case tsqlParser::CAST:
          case tsqlParser::CATCH:
          case tsqlParser::CHECKSUM_AGG:
          case tsqlParser::COMMITTED:
          case tsqlParser::CONCAT:
          case tsqlParser::CONTROL:
          case tsqlParser::COOKIE:
          case tsqlParser::COUNT:
          case tsqlParser::COUNT_BIG:
          case tsqlParser::DATE:
          case tsqlParser::DELAY:
          case tsqlParser::DELETED:
          case tsqlParser::DENSE_RANK:
          case tsqlParser::DISABLE:
          case tsqlParser::DYNAMIC:
          case tsqlParser::ENCRYPTION:
          case tsqlParser::EXIST:
          case tsqlParser::EXPAND:
          case tsqlParser::FAST:
          case tsqlParser::FAST_FORWARD:
          case tsqlParser::FIRST:
          case tsqlParser::FIRST_VALUE:
          case tsqlParser::FOLLOWING:
          case tsqlParser::FORCE:
          case tsqlParser::FORCED:
          case tsqlParser::FORWARD_ONLY:
          case tsqlParser::FULLSCAN:
          case tsqlParser::GLOBAL:
          case tsqlParser::GROUPING:
          case tsqlParser::GROUPING_ID:
          case tsqlParser::HASH:
          case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
          case tsqlParser::IMPERSONATE:
          case tsqlParser::INSENSITIVE:
          case tsqlParser::INSERTED:
          case tsqlParser::ISOLATION:
          case tsqlParser::IO:
          case tsqlParser::KEEP:
          case tsqlParser::KEEPFIXED:
          case tsqlParser::KEYSET:
          case tsqlParser::LAG:
          case tsqlParser::LAST:
          case tsqlParser::LAST_VALUE:
          case tsqlParser::LEAD:
          case tsqlParser::LEVEL:
          case tsqlParser::LOCAL:
          case tsqlParser::LOCK_ESCALATION:
          case tsqlParser::LOGIN:
          case tsqlParser::LOOP:
          case tsqlParser::MARK:
          case tsqlParser::MAX:
          case tsqlParser::MAXDOP:
          case tsqlParser::MAXRECURSION:
          case tsqlParser::MIN:
          case tsqlParser::MODIFY:
          case tsqlParser::NAME:
          case tsqlParser::NOCOUNT:
          case tsqlParser::NODES:
          case tsqlParser::NOEXPAND:
          case tsqlParser::NORECOMPUTE:
          case tsqlParser::NTILE:
          case tsqlParser::NUMBER:
          case tsqlParser::OFFSET:
          case tsqlParser::ONLINE:
          case tsqlParser::ONLY:
          case tsqlParser::OPTIMISTIC:
          case tsqlParser::OPTIMIZE:
          case tsqlParser::OUT:
          case tsqlParser::OUTPUT:
          case tsqlParser::OWNER:
          case tsqlParser::PARAMETERIZATION:
          case tsqlParser::PARTITION:
          case tsqlParser::PATH:
          case tsqlParser::PRECEDING:
          case tsqlParser::PRIOR:
          case tsqlParser::PRIVILEGES:
          case tsqlParser::QUERY:
          case tsqlParser::RANGE:
          case tsqlParser::RANK:
          case tsqlParser::READONLY:
          case tsqlParser::READ_ONLY:
          case tsqlParser::RECOMPILE:
          case tsqlParser::RELATIVE:
          case tsqlParser::REMOTE:
          case tsqlParser::REPEATABLE:
          case tsqlParser::ROBUST:
          case tsqlParser::ROOT:
          case tsqlParser::ROW:
          case tsqlParser::ROWGUID:
          case tsqlParser::ROWS:
          case tsqlParser::ROW_NUMBER:
          case tsqlParser::SAMPLE:
          case tsqlParser::SCHEMABINDING:
          case tsqlParser::SCROLL:
          case tsqlParser::SCROLL_LOCKS:
          case tsqlParser::SELF:
          case tsqlParser::SERIALIZABLE:
          case tsqlParser::SIMPLE:
          case tsqlParser::SIZE:
          case tsqlParser::SNAPSHOT:
          case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
          case tsqlParser::STATIC:
          case tsqlParser::STATS_STREAM:
          case tsqlParser::STDEV:
          case tsqlParser::STDEVP:
          case tsqlParser::SUM:
          case tsqlParser::TEXTIMAGE_ON:
          case tsqlParser::THROW:
          case tsqlParser::TIES:
          case tsqlParser::TIME:
          case tsqlParser::TRY:
          case tsqlParser::TYPE:
          case tsqlParser::TYPE_WARNING:
          case tsqlParser::UNBOUNDED:
          case tsqlParser::UNCOMMITTED:
          case tsqlParser::UNKNOWN:
          case tsqlParser::USING:
          case tsqlParser::VAR:
          case tsqlParser::VARP:
          case tsqlParser::VIEWS:
          case tsqlParser::VIEW_METADATA:
          case tsqlParser::WORK:
          case tsqlParser::XML:
          case tsqlParser::XMLNAMESPACES:
          case tsqlParser::ZONE:
          case tsqlParser::DOUBLE_QUOTE_ID:
          case tsqlParser::SQUARE_BRACKET_ID:
          case tsqlParser::ID: {
            setState(832);
            r_id();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case tsqlParser::DOLLAR_ACTION: {
        enterOuterAlt(_localctx, 2);
        setState(835);
        match(tsqlParser::DOLLAR_ACTION);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_databaseContext ------------------------------------------------------------------

tsqlParser::Create_databaseContext::Create_databaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Create_databaseContext::CREATE() {
  return getToken(tsqlParser::CREATE, 0);
}

tree::TerminalNode* tsqlParser::Create_databaseContext::DATABASE() {
  return getToken(tsqlParser::DATABASE, 0);
}

std::vector<tsqlParser::R_idContext *> tsqlParser::Create_databaseContext::r_id() {
  return getRuleContexts<tsqlParser::R_idContext>();
}

tsqlParser::R_idContext* tsqlParser::Create_databaseContext::r_id(size_t i) {
  return getRuleContext<tsqlParser::R_idContext>(i);
}

tree::TerminalNode* tsqlParser::Create_databaseContext::CONTAINMENT() {
  return getToken(tsqlParser::CONTAINMENT, 0);
}

tree::TerminalNode* tsqlParser::Create_databaseContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Create_databaseContext::ON() {
  return getTokens(tsqlParser::ON);
}

tree::TerminalNode* tsqlParser::Create_databaseContext::ON(size_t i) {
  return getToken(tsqlParser::ON, i);
}

std::vector<tsqlParser::Database_file_specContext *> tsqlParser::Create_databaseContext::database_file_spec() {
  return getRuleContexts<tsqlParser::Database_file_specContext>();
}

tsqlParser::Database_file_specContext* tsqlParser::Create_databaseContext::database_file_spec(size_t i) {
  return getRuleContext<tsqlParser::Database_file_specContext>(i);
}

tree::TerminalNode* tsqlParser::Create_databaseContext::LOG() {
  return getToken(tsqlParser::LOG, 0);
}

tree::TerminalNode* tsqlParser::Create_databaseContext::COLLATE() {
  return getToken(tsqlParser::COLLATE, 0);
}

tree::TerminalNode* tsqlParser::Create_databaseContext::WITH() {
  return getToken(tsqlParser::WITH, 0);
}

std::vector<tsqlParser::Create_database_optionContext *> tsqlParser::Create_databaseContext::create_database_option() {
  return getRuleContexts<tsqlParser::Create_database_optionContext>();
}

tsqlParser::Create_database_optionContext* tsqlParser::Create_databaseContext::create_database_option(size_t i) {
  return getRuleContext<tsqlParser::Create_database_optionContext>(i);
}

tree::TerminalNode* tsqlParser::Create_databaseContext::NONE() {
  return getToken(tsqlParser::NONE, 0);
}

tree::TerminalNode* tsqlParser::Create_databaseContext::PARTIAL() {
  return getToken(tsqlParser::PARTIAL, 0);
}

tree::TerminalNode* tsqlParser::Create_databaseContext::PRIMARY() {
  return getToken(tsqlParser::PRIMARY, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Create_databaseContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Create_databaseContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::Create_databaseContext::getRuleIndex() const {
  return tsqlParser::RuleCreate_database;
}


std::any tsqlParser::Create_databaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitCreate_database(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Create_databaseContext* tsqlParser::create_database() {
  Create_databaseContext *_localctx = _tracker.createInstance<Create_databaseContext>(_ctx, getState());
  enterRule(_localctx, 64, tsqlParser::RuleCreate_database);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(838);
    match(tsqlParser::CREATE);
    setState(839);
    match(tsqlParser::DATABASE);

    setState(840);
    antlrcpp::downCast<Create_databaseContext *>(_localctx)->database = r_id();
    setState(844);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::CONTAINMENT) {
      setState(841);
      match(tsqlParser::CONTAINMENT);
      setState(842);
      match(tsqlParser::EQUAL);
      setState(843);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::NONE

      || _la == tsqlParser::PARTIAL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(858);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::ON) {
      setState(846);
      match(tsqlParser::ON);
      setState(848);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::PRIMARY) {
        setState(847);
        match(tsqlParser::PRIMARY);
      }
      setState(850);
      database_file_spec();
      setState(855);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == tsqlParser::COMMA) {
        setState(851);
        match(tsqlParser::COMMA);
        setState(852);
        database_file_spec();
        setState(857);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(870);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::LOG) {
      setState(860);
      match(tsqlParser::LOG);
      setState(861);
      match(tsqlParser::ON);
      setState(862);
      database_file_spec();
      setState(867);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == tsqlParser::COMMA) {
        setState(863);
        match(tsqlParser::COMMA);
        setState(864);
        database_file_spec();
        setState(869);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(874);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::COLLATE) {
      setState(872);
      match(tsqlParser::COLLATE);
      setState(873);
      antlrcpp::downCast<Create_databaseContext *>(_localctx)->collation_name = r_id();
    }
    setState(885);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx)) {
    case 1: {
      setState(876);
      match(tsqlParser::WITH);
      setState(877);
      create_database_option();
      setState(882);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == tsqlParser::COMMA) {
        setState(878);
        match(tsqlParser::COMMA);
        setState(879);
        create_database_option();
        setState(884);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_indexContext ------------------------------------------------------------------

tsqlParser::Create_indexContext::Create_indexContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Create_indexContext::CREATE() {
  return getToken(tsqlParser::CREATE, 0);
}

tree::TerminalNode* tsqlParser::Create_indexContext::INDEX() {
  return getToken(tsqlParser::INDEX, 0);
}

std::vector<tsqlParser::R_idContext *> tsqlParser::Create_indexContext::r_id() {
  return getRuleContexts<tsqlParser::R_idContext>();
}

tsqlParser::R_idContext* tsqlParser::Create_indexContext::r_id(size_t i) {
  return getRuleContext<tsqlParser::R_idContext>(i);
}

std::vector<tree::TerminalNode *> tsqlParser::Create_indexContext::ON() {
  return getTokens(tsqlParser::ON);
}

tree::TerminalNode* tsqlParser::Create_indexContext::ON(size_t i) {
  return getToken(tsqlParser::ON, i);
}

tsqlParser::Table_name_with_hintContext* tsqlParser::Create_indexContext::table_name_with_hint() {
  return getRuleContext<tsqlParser::Table_name_with_hintContext>(0);
}

std::vector<tree::TerminalNode *> tsqlParser::Create_indexContext::LR_BRACKET() {
  return getTokens(tsqlParser::LR_BRACKET);
}

tree::TerminalNode* tsqlParser::Create_indexContext::LR_BRACKET(size_t i) {
  return getToken(tsqlParser::LR_BRACKET, i);
}

std::vector<tsqlParser::Column_name_listContext *> tsqlParser::Create_indexContext::column_name_list() {
  return getRuleContexts<tsqlParser::Column_name_listContext>();
}

tsqlParser::Column_name_listContext* tsqlParser::Create_indexContext::column_name_list(size_t i) {
  return getRuleContext<tsqlParser::Column_name_listContext>(i);
}

std::vector<tree::TerminalNode *> tsqlParser::Create_indexContext::RR_BRACKET() {
  return getTokens(tsqlParser::RR_BRACKET);
}

tree::TerminalNode* tsqlParser::Create_indexContext::RR_BRACKET(size_t i) {
  return getToken(tsqlParser::RR_BRACKET, i);
}

tree::TerminalNode* tsqlParser::Create_indexContext::UNIQUE() {
  return getToken(tsqlParser::UNIQUE, 0);
}

tsqlParser::ClusteredContext* tsqlParser::Create_indexContext::clustered() {
  return getRuleContext<tsqlParser::ClusteredContext>(0);
}

tree::TerminalNode* tsqlParser::Create_indexContext::INCLUDE() {
  return getToken(tsqlParser::INCLUDE, 0);
}

tree::TerminalNode* tsqlParser::Create_indexContext::WHERE() {
  return getToken(tsqlParser::WHERE, 0);
}

tsqlParser::Index_optionsContext* tsqlParser::Create_indexContext::index_options() {
  return getRuleContext<tsqlParser::Index_optionsContext>(0);
}

tree::TerminalNode* tsqlParser::Create_indexContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Create_indexContext::ASC() {
  return getTokens(tsqlParser::ASC);
}

tree::TerminalNode* tsqlParser::Create_indexContext::ASC(size_t i) {
  return getToken(tsqlParser::ASC, i);
}

std::vector<tree::TerminalNode *> tsqlParser::Create_indexContext::DESC() {
  return getTokens(tsqlParser::DESC);
}

tree::TerminalNode* tsqlParser::Create_indexContext::DESC(size_t i) {
  return getToken(tsqlParser::DESC, i);
}

tsqlParser::Search_conditionContext* tsqlParser::Create_indexContext::search_condition() {
  return getRuleContext<tsqlParser::Search_conditionContext>(0);
}


size_t tsqlParser::Create_indexContext::getRuleIndex() const {
  return tsqlParser::RuleCreate_index;
}


std::any tsqlParser::Create_indexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitCreate_index(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Create_indexContext* tsqlParser::create_index() {
  Create_indexContext *_localctx = _tracker.createInstance<Create_indexContext>(_ctx, getState());
  enterRule(_localctx, 66, tsqlParser::RuleCreate_index);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(887);
    match(tsqlParser::CREATE);
    setState(889);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::UNIQUE) {
      setState(888);
      match(tsqlParser::UNIQUE);
    }
    setState(892);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::CLUSTERED || _la == tsqlParser::NONCLUSTERED) {
      setState(891);
      clustered();
    }
    setState(894);
    match(tsqlParser::INDEX);
    setState(895);
    r_id();
    setState(896);
    match(tsqlParser::ON);
    setState(897);
    table_name_with_hint();
    setState(898);
    match(tsqlParser::LR_BRACKET);
    setState(899);
    column_name_list();
    setState(901);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::ASC

    || _la == tsqlParser::DESC) {
      setState(900);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::ASC

      || _la == tsqlParser::DESC)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(903);
    match(tsqlParser::RR_BRACKET);
    setState(912);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::INCLUDE) {
      setState(904);
      match(tsqlParser::INCLUDE);
      setState(905);
      match(tsqlParser::LR_BRACKET);
      setState(906);
      column_name_list();
      setState(908);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::ASC

      || _la == tsqlParser::DESC) {
        setState(907);
        _la = _input->LA(1);
        if (!(_la == tsqlParser::ASC

        || _la == tsqlParser::DESC)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(910);
      match(tsqlParser::RR_BRACKET);
    }
    setState(916);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::WHERE) {
      setState(914);
      match(tsqlParser::WHERE);
      setState(915);
      antlrcpp::downCast<Create_indexContext *>(_localctx)->where = search_condition(0);
    }
    setState(919);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx)) {
    case 1: {
      setState(918);
      index_options();
      break;
    }

    default:
      break;
    }
    setState(923);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::ON) {
      setState(921);
      match(tsqlParser::ON);
      setState(922);
      r_id();
    }
    setState(926);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx)) {
    case 1: {
      setState(925);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_statisticsContext ------------------------------------------------------------------

tsqlParser::Create_statisticsContext::Create_statisticsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Create_statisticsContext::CREATE() {
  return getToken(tsqlParser::CREATE, 0);
}

tree::TerminalNode* tsqlParser::Create_statisticsContext::STATISTICS() {
  return getToken(tsqlParser::STATISTICS, 0);
}

tsqlParser::R_idContext* tsqlParser::Create_statisticsContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tree::TerminalNode* tsqlParser::Create_statisticsContext::ON() {
  return getToken(tsqlParser::ON, 0);
}

tsqlParser::Table_name_with_hintContext* tsqlParser::Create_statisticsContext::table_name_with_hint() {
  return getRuleContext<tsqlParser::Table_name_with_hintContext>(0);
}

tree::TerminalNode* tsqlParser::Create_statisticsContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tsqlParser::Column_name_listContext* tsqlParser::Create_statisticsContext::column_name_list() {
  return getRuleContext<tsqlParser::Column_name_listContext>(0);
}

tree::TerminalNode* tsqlParser::Create_statisticsContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Create_statisticsContext::WITH() {
  return getToken(tsqlParser::WITH, 0);
}

tree::TerminalNode* tsqlParser::Create_statisticsContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}

tree::TerminalNode* tsqlParser::Create_statisticsContext::FULLSCAN() {
  return getToken(tsqlParser::FULLSCAN, 0);
}

tree::TerminalNode* tsqlParser::Create_statisticsContext::SAMPLE() {
  return getToken(tsqlParser::SAMPLE, 0);
}

tree::TerminalNode* tsqlParser::Create_statisticsContext::DECIMAL() {
  return getToken(tsqlParser::DECIMAL, 0);
}

tree::TerminalNode* tsqlParser::Create_statisticsContext::STATS_STREAM() {
  return getToken(tsqlParser::STATS_STREAM, 0);
}

tree::TerminalNode* tsqlParser::Create_statisticsContext::PERCENT() {
  return getToken(tsqlParser::PERCENT, 0);
}

tree::TerminalNode* tsqlParser::Create_statisticsContext::ROWS() {
  return getToken(tsqlParser::ROWS, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Create_statisticsContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Create_statisticsContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}

tree::TerminalNode* tsqlParser::Create_statisticsContext::NORECOMPUTE() {
  return getToken(tsqlParser::NORECOMPUTE, 0);
}

tree::TerminalNode* tsqlParser::Create_statisticsContext::INCREMENTAL() {
  return getToken(tsqlParser::INCREMENTAL, 0);
}

tree::TerminalNode* tsqlParser::Create_statisticsContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

tsqlParser::On_offContext* tsqlParser::Create_statisticsContext::on_off() {
  return getRuleContext<tsqlParser::On_offContext>(0);
}


size_t tsqlParser::Create_statisticsContext::getRuleIndex() const {
  return tsqlParser::RuleCreate_statistics;
}


std::any tsqlParser::Create_statisticsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitCreate_statistics(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Create_statisticsContext* tsqlParser::create_statistics() {
  Create_statisticsContext *_localctx = _tracker.createInstance<Create_statisticsContext>(_ctx, getState());
  enterRule(_localctx, 68, tsqlParser::RuleCreate_statistics);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(928);
    match(tsqlParser::CREATE);
    setState(929);
    match(tsqlParser::STATISTICS);
    setState(930);
    r_id();
    setState(931);
    match(tsqlParser::ON);
    setState(932);
    table_name_with_hint();
    setState(933);
    match(tsqlParser::LR_BRACKET);
    setState(934);
    column_name_list();
    setState(935);
    match(tsqlParser::RR_BRACKET);
    setState(954);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
    case 1: {
      setState(936);
      match(tsqlParser::WITH);
      setState(942);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case tsqlParser::FULLSCAN: {
          setState(937);
          match(tsqlParser::FULLSCAN);
          break;
        }

        case tsqlParser::SAMPLE: {
          setState(938);
          match(tsqlParser::SAMPLE);
          setState(939);
          match(tsqlParser::DECIMAL);
          setState(940);
          _la = _input->LA(1);
          if (!(_la == tsqlParser::PERCENT || _la == tsqlParser::ROWS)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          break;
        }

        case tsqlParser::STATS_STREAM: {
          setState(941);
          match(tsqlParser::STATS_STREAM);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(946);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx)) {
      case 1: {
        setState(944);
        match(tsqlParser::COMMA);
        setState(945);
        match(tsqlParser::NORECOMPUTE);
        break;
      }

      default:
        break;
      }
      setState(952);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::COMMA) {
        setState(948);
        match(tsqlParser::COMMA);
        setState(949);
        match(tsqlParser::INCREMENTAL);
        setState(950);
        match(tsqlParser::EQUAL);
        setState(951);
        on_off();
      }
      break;
    }

    default:
      break;
    }
    setState(957);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx)) {
    case 1: {
      setState(956);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_tableContext ------------------------------------------------------------------

tsqlParser::Create_tableContext::Create_tableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Create_tableContext::CREATE() {
  return getToken(tsqlParser::CREATE, 0);
}

tree::TerminalNode* tsqlParser::Create_tableContext::TABLE() {
  return getToken(tsqlParser::TABLE, 0);
}

tsqlParser::Full_table_nameContext* tsqlParser::Create_tableContext::full_table_name() {
  return getRuleContext<tsqlParser::Full_table_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Create_tableContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tsqlParser::Column_def_table_constraintsContext* tsqlParser::Create_tableContext::column_def_table_constraints() {
  return getRuleContext<tsqlParser::Column_def_table_constraintsContext>(0);
}

tree::TerminalNode* tsqlParser::Create_tableContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Create_tableContext::COMMA() {
  return getToken(tsqlParser::COMMA, 0);
}

tree::TerminalNode* tsqlParser::Create_tableContext::ON() {
  return getToken(tsqlParser::ON, 0);
}

std::vector<tsqlParser::R_idContext *> tsqlParser::Create_tableContext::r_id() {
  return getRuleContexts<tsqlParser::R_idContext>();
}

tsqlParser::R_idContext* tsqlParser::Create_tableContext::r_id(size_t i) {
  return getRuleContext<tsqlParser::R_idContext>(i);
}

std::vector<tree::TerminalNode *> tsqlParser::Create_tableContext::DEFAULT() {
  return getTokens(tsqlParser::DEFAULT);
}

tree::TerminalNode* tsqlParser::Create_tableContext::DEFAULT(size_t i) {
  return getToken(tsqlParser::DEFAULT, i);
}

tree::TerminalNode* tsqlParser::Create_tableContext::TEXTIMAGE_ON() {
  return getToken(tsqlParser::TEXTIMAGE_ON, 0);
}

tree::TerminalNode* tsqlParser::Create_tableContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}


size_t tsqlParser::Create_tableContext::getRuleIndex() const {
  return tsqlParser::RuleCreate_table;
}


std::any tsqlParser::Create_tableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitCreate_table(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Create_tableContext* tsqlParser::create_table() {
  Create_tableContext *_localctx = _tracker.createInstance<Create_tableContext>(_ctx, getState());
  enterRule(_localctx, 70, tsqlParser::RuleCreate_table);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(959);
    match(tsqlParser::CREATE);
    setState(960);
    match(tsqlParser::TABLE);
    setState(961);
    full_table_name();
    setState(962);
    match(tsqlParser::LR_BRACKET);
    setState(963);
    column_def_table_constraints();
    setState(965);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::COMMA) {
      setState(964);
      match(tsqlParser::COMMA);
    }
    setState(967);
    match(tsqlParser::RR_BRACKET);
    setState(971);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx)) {
    case 1: {
      setState(968);
      match(tsqlParser::ON);
      setState(969);
      r_id();
      break;
    }

    case 2: {
      setState(970);
      match(tsqlParser::DEFAULT);
      break;
    }

    default:
      break;
    }
    setState(976);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx)) {
    case 1: {
      setState(973);
      match(tsqlParser::TEXTIMAGE_ON);
      setState(974);
      r_id();
      break;
    }

    case 2: {
      setState(975);
      match(tsqlParser::DEFAULT);
      break;
    }

    default:
      break;
    }
    setState(979);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx)) {
    case 1: {
      setState(978);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_schemaContext ------------------------------------------------------------------

tsqlParser::Create_schemaContext::Create_schemaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Create_schemaContext::CREATE() {
  return getToken(tsqlParser::CREATE, 0);
}

tree::TerminalNode* tsqlParser::Create_schemaContext::SCHEMA() {
  return getToken(tsqlParser::SCHEMA, 0);
}

tsqlParser::Simple_nameContext* tsqlParser::Create_schemaContext::simple_name() {
  return getRuleContext<tsqlParser::Simple_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Create_schemaContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}


size_t tsqlParser::Create_schemaContext::getRuleIndex() const {
  return tsqlParser::RuleCreate_schema;
}


std::any tsqlParser::Create_schemaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitCreate_schema(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Create_schemaContext* tsqlParser::create_schema() {
  Create_schemaContext *_localctx = _tracker.createInstance<Create_schemaContext>(_ctx, getState());
  enterRule(_localctx, 72, tsqlParser::RuleCreate_schema);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(981);
    match(tsqlParser::CREATE);
    setState(982);
    match(tsqlParser::SCHEMA);
    setState(983);
    simple_name();
    setState(985);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx)) {
    case 1: {
      setState(984);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_synonymContext ------------------------------------------------------------------

tsqlParser::Create_synonymContext::Create_synonymContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Create_synonymContext::CREATE() {
  return getToken(tsqlParser::CREATE, 0);
}

tree::TerminalNode* tsqlParser::Create_synonymContext::SYNONYM() {
  return getToken(tsqlParser::SYNONYM, 0);
}

tsqlParser::Simple_nameContext* tsqlParser::Create_synonymContext::simple_name() {
  return getRuleContext<tsqlParser::Simple_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Create_synonymContext::FOR() {
  return getToken(tsqlParser::FOR, 0);
}

tsqlParser::Full_table_nameContext* tsqlParser::Create_synonymContext::full_table_name() {
  return getRuleContext<tsqlParser::Full_table_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Create_synonymContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}


size_t tsqlParser::Create_synonymContext::getRuleIndex() const {
  return tsqlParser::RuleCreate_synonym;
}


std::any tsqlParser::Create_synonymContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitCreate_synonym(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Create_synonymContext* tsqlParser::create_synonym() {
  Create_synonymContext *_localctx = _tracker.createInstance<Create_synonymContext>(_ctx, getState());
  enterRule(_localctx, 74, tsqlParser::RuleCreate_synonym);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(987);
    match(tsqlParser::CREATE);
    setState(988);
    match(tsqlParser::SYNONYM);
    setState(989);
    simple_name();
    setState(990);
    match(tsqlParser::FOR);
    setState(991);
    full_table_name();
    setState(993);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
    case 1: {
      setState(992);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_viewContext ------------------------------------------------------------------

tsqlParser::Create_viewContext::Create_viewContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Create_viewContext::CREATE() {
  return getToken(tsqlParser::CREATE, 0);
}

tree::TerminalNode* tsqlParser::Create_viewContext::VIEW() {
  return getToken(tsqlParser::VIEW, 0);
}

tsqlParser::Simple_nameContext* tsqlParser::Create_viewContext::simple_name() {
  return getRuleContext<tsqlParser::Simple_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Create_viewContext::AS() {
  return getToken(tsqlParser::AS, 0);
}

tsqlParser::Select_statementContext* tsqlParser::Create_viewContext::select_statement() {
  return getRuleContext<tsqlParser::Select_statementContext>(0);
}

tree::TerminalNode* tsqlParser::Create_viewContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tsqlParser::Column_name_listContext* tsqlParser::Create_viewContext::column_name_list() {
  return getRuleContext<tsqlParser::Column_name_listContext>(0);
}

tree::TerminalNode* tsqlParser::Create_viewContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Create_viewContext::WITH() {
  return getTokens(tsqlParser::WITH);
}

tree::TerminalNode* tsqlParser::Create_viewContext::WITH(size_t i) {
  return getToken(tsqlParser::WITH, i);
}

std::vector<tsqlParser::View_attributeContext *> tsqlParser::Create_viewContext::view_attribute() {
  return getRuleContexts<tsqlParser::View_attributeContext>();
}

tsqlParser::View_attributeContext* tsqlParser::Create_viewContext::view_attribute(size_t i) {
  return getRuleContext<tsqlParser::View_attributeContext>(i);
}

tree::TerminalNode* tsqlParser::Create_viewContext::CHECK() {
  return getToken(tsqlParser::CHECK, 0);
}

tree::TerminalNode* tsqlParser::Create_viewContext::OPTION() {
  return getToken(tsqlParser::OPTION, 0);
}

tree::TerminalNode* tsqlParser::Create_viewContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Create_viewContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Create_viewContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::Create_viewContext::getRuleIndex() const {
  return tsqlParser::RuleCreate_view;
}


std::any tsqlParser::Create_viewContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitCreate_view(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Create_viewContext* tsqlParser::create_view() {
  Create_viewContext *_localctx = _tracker.createInstance<Create_viewContext>(_ctx, getState());
  enterRule(_localctx, 76, tsqlParser::RuleCreate_view);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(995);
    match(tsqlParser::CREATE);
    setState(996);
    match(tsqlParser::VIEW);
    setState(997);
    simple_name();
    setState(1002);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::LR_BRACKET) {
      setState(998);
      match(tsqlParser::LR_BRACKET);
      setState(999);
      column_name_list();
      setState(1000);
      match(tsqlParser::RR_BRACKET);
    }
    setState(1013);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::WITH) {
      setState(1004);
      match(tsqlParser::WITH);
      setState(1005);
      view_attribute();
      setState(1010);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == tsqlParser::COMMA) {
        setState(1006);
        match(tsqlParser::COMMA);
        setState(1007);
        view_attribute();
        setState(1012);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1015);
    match(tsqlParser::AS);
    setState(1016);
    select_statement();
    setState(1020);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx)) {
    case 1: {
      setState(1017);
      match(tsqlParser::WITH);
      setState(1018);
      match(tsqlParser::CHECK);
      setState(1019);
      match(tsqlParser::OPTION);
      break;
    }

    default:
      break;
    }
    setState(1023);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx)) {
    case 1: {
      setState(1022);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- View_attributeContext ------------------------------------------------------------------

tsqlParser::View_attributeContext::View_attributeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::View_attributeContext::ENCRYPTION() {
  return getToken(tsqlParser::ENCRYPTION, 0);
}

tree::TerminalNode* tsqlParser::View_attributeContext::SCHEMABINDING() {
  return getToken(tsqlParser::SCHEMABINDING, 0);
}

tree::TerminalNode* tsqlParser::View_attributeContext::VIEW_METADATA() {
  return getToken(tsqlParser::VIEW_METADATA, 0);
}


size_t tsqlParser::View_attributeContext::getRuleIndex() const {
  return tsqlParser::RuleView_attribute;
}


std::any tsqlParser::View_attributeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitView_attribute(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::View_attributeContext* tsqlParser::view_attribute() {
  View_attributeContext *_localctx = _tracker.createInstance<View_attributeContext>(_ctx, getState());
  enterRule(_localctx, 78, tsqlParser::RuleView_attribute);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1025);
    _la = _input->LA(1);
    if (!(_la == tsqlParser::ENCRYPTION || _la == tsqlParser::SCHEMABINDING

    || _la == tsqlParser::VIEW_METADATA)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_tableContext ------------------------------------------------------------------

tsqlParser::Alter_tableContext::Alter_tableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> tsqlParser::Alter_tableContext::ALTER() {
  return getTokens(tsqlParser::ALTER);
}

tree::TerminalNode* tsqlParser::Alter_tableContext::ALTER(size_t i) {
  return getToken(tsqlParser::ALTER, i);
}

std::vector<tree::TerminalNode *> tsqlParser::Alter_tableContext::TABLE() {
  return getTokens(tsqlParser::TABLE);
}

tree::TerminalNode* tsqlParser::Alter_tableContext::TABLE(size_t i) {
  return getToken(tsqlParser::TABLE, i);
}

std::vector<tsqlParser::Full_table_nameContext *> tsqlParser::Alter_tableContext::full_table_name() {
  return getRuleContexts<tsqlParser::Full_table_nameContext>();
}

tsqlParser::Full_table_nameContext* tsqlParser::Alter_tableContext::full_table_name(size_t i) {
  return getRuleContext<tsqlParser::Full_table_nameContext>(i);
}

tree::TerminalNode* tsqlParser::Alter_tableContext::SET() {
  return getToken(tsqlParser::SET, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Alter_tableContext::LR_BRACKET() {
  return getTokens(tsqlParser::LR_BRACKET);
}

tree::TerminalNode* tsqlParser::Alter_tableContext::LR_BRACKET(size_t i) {
  return getToken(tsqlParser::LR_BRACKET, i);
}

tree::TerminalNode* tsqlParser::Alter_tableContext::LOCK_ESCALATION() {
  return getToken(tsqlParser::LOCK_ESCALATION, 0);
}

tree::TerminalNode* tsqlParser::Alter_tableContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Alter_tableContext::RR_BRACKET() {
  return getTokens(tsqlParser::RR_BRACKET);
}

tree::TerminalNode* tsqlParser::Alter_tableContext::RR_BRACKET(size_t i) {
  return getToken(tsqlParser::RR_BRACKET, i);
}

tree::TerminalNode* tsqlParser::Alter_tableContext::ADD() {
  return getToken(tsqlParser::ADD, 0);
}

tsqlParser::Column_def_table_constraintContext* tsqlParser::Alter_tableContext::column_def_table_constraint() {
  return getRuleContext<tsqlParser::Column_def_table_constraintContext>(0);
}

tree::TerminalNode* tsqlParser::Alter_tableContext::DROP() {
  return getToken(tsqlParser::DROP, 0);
}

tree::TerminalNode* tsqlParser::Alter_tableContext::CONSTRAINT() {
  return getToken(tsqlParser::CONSTRAINT, 0);
}

tree::TerminalNode* tsqlParser::Alter_tableContext::WITH() {
  return getToken(tsqlParser::WITH, 0);
}

tree::TerminalNode* tsqlParser::Alter_tableContext::CHECK() {
  return getToken(tsqlParser::CHECK, 0);
}

tree::TerminalNode* tsqlParser::Alter_tableContext::FOREIGN() {
  return getToken(tsqlParser::FOREIGN, 0);
}

tree::TerminalNode* tsqlParser::Alter_tableContext::KEY() {
  return getToken(tsqlParser::KEY, 0);
}

tree::TerminalNode* tsqlParser::Alter_tableContext::REFERENCES() {
  return getToken(tsqlParser::REFERENCES, 0);
}

tree::TerminalNode* tsqlParser::Alter_tableContext::COLUMN() {
  return getToken(tsqlParser::COLUMN, 0);
}

tsqlParser::Column_def_table_constraintsContext* tsqlParser::Alter_tableContext::column_def_table_constraints() {
  return getRuleContext<tsqlParser::Column_def_table_constraintsContext>(0);
}

tree::TerminalNode* tsqlParser::Alter_tableContext::AUTO() {
  return getToken(tsqlParser::AUTO, 0);
}

tree::TerminalNode* tsqlParser::Alter_tableContext::DISABLE() {
  return getToken(tsqlParser::DISABLE, 0);
}

tsqlParser::R_idContext* tsqlParser::Alter_tableContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

std::vector<tsqlParser::Column_name_listContext *> tsqlParser::Alter_tableContext::column_name_list() {
  return getRuleContexts<tsqlParser::Column_name_listContext>();
}

tsqlParser::Column_name_listContext* tsqlParser::Alter_tableContext::column_name_list(size_t i) {
  return getRuleContext<tsqlParser::Column_name_listContext>(i);
}

tree::TerminalNode* tsqlParser::Alter_tableContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}


size_t tsqlParser::Alter_tableContext::getRuleIndex() const {
  return tsqlParser::RuleAlter_table;
}


std::any tsqlParser::Alter_tableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitAlter_table(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Alter_tableContext* tsqlParser::alter_table() {
  Alter_tableContext *_localctx = _tracker.createInstance<Alter_tableContext>(_ctx, getState());
  enterRule(_localctx, 80, tsqlParser::RuleAlter_table);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1027);
    match(tsqlParser::ALTER);
    setState(1028);
    match(tsqlParser::TABLE);
    setState(1029);
    full_table_name();
    setState(1063);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::SET: {
        setState(1030);
        match(tsqlParser::SET);
        setState(1031);
        match(tsqlParser::LR_BRACKET);
        setState(1032);
        match(tsqlParser::LOCK_ESCALATION);
        setState(1033);
        match(tsqlParser::EQUAL);
        setState(1034);
        _la = _input->LA(1);
        if (!(_la == tsqlParser::TABLE

        || _la == tsqlParser::AUTO || _la == tsqlParser::DISABLE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1035);
        match(tsqlParser::RR_BRACKET);
        break;
      }

      case tsqlParser::ADD: {
        setState(1036);
        match(tsqlParser::ADD);
        setState(1037);
        column_def_table_constraint();
        break;
      }

      case tsqlParser::DROP: {
        setState(1038);
        match(tsqlParser::DROP);
        setState(1039);
        match(tsqlParser::CONSTRAINT);
        setState(1040);
        antlrcpp::downCast<Alter_tableContext *>(_localctx)->constraint = r_id();
        break;
      }

      case tsqlParser::WITH: {
        setState(1041);
        match(tsqlParser::WITH);
        setState(1042);
        match(tsqlParser::CHECK);
        setState(1043);
        match(tsqlParser::ADD);
        setState(1044);
        match(tsqlParser::CONSTRAINT);
        setState(1045);
        antlrcpp::downCast<Alter_tableContext *>(_localctx)->constraint = r_id();
        setState(1046);
        match(tsqlParser::FOREIGN);
        setState(1047);
        match(tsqlParser::KEY);
        setState(1048);
        match(tsqlParser::LR_BRACKET);
        setState(1049);
        antlrcpp::downCast<Alter_tableContext *>(_localctx)->fk = column_name_list();
        setState(1050);
        match(tsqlParser::RR_BRACKET);
        setState(1051);
        match(tsqlParser::REFERENCES);
        setState(1052);
        full_table_name();
        setState(1053);
        match(tsqlParser::LR_BRACKET);
        setState(1054);
        antlrcpp::downCast<Alter_tableContext *>(_localctx)->pk = column_name_list();
        setState(1055);
        match(tsqlParser::RR_BRACKET);
        break;
      }

      case tsqlParser::CHECK: {
        setState(1057);
        match(tsqlParser::CHECK);
        setState(1058);
        match(tsqlParser::CONSTRAINT);
        setState(1059);
        antlrcpp::downCast<Alter_tableContext *>(_localctx)->constraint = r_id();
        break;
      }

      case tsqlParser::ALTER: {
        setState(1060);
        match(tsqlParser::ALTER);
        setState(1061);
        match(tsqlParser::COLUMN);
        setState(1062);
        column_def_table_constraints();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1066);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx)) {
    case 1: {
      setState(1065);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_databaseContext ------------------------------------------------------------------

tsqlParser::Alter_databaseContext::Alter_databaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Alter_databaseContext::ALTER() {
  return getToken(tsqlParser::ALTER, 0);
}

tree::TerminalNode* tsqlParser::Alter_databaseContext::DATABASE() {
  return getToken(tsqlParser::DATABASE, 0);
}

tree::TerminalNode* tsqlParser::Alter_databaseContext::CURRENT() {
  return getToken(tsqlParser::CURRENT, 0);
}

tree::TerminalNode* tsqlParser::Alter_databaseContext::MODIFY() {
  return getToken(tsqlParser::MODIFY, 0);
}

tree::TerminalNode* tsqlParser::Alter_databaseContext::NAME() {
  return getToken(tsqlParser::NAME, 0);
}

tree::TerminalNode* tsqlParser::Alter_databaseContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

tree::TerminalNode* tsqlParser::Alter_databaseContext::COLLATE() {
  return getToken(tsqlParser::COLLATE, 0);
}

tree::TerminalNode* tsqlParser::Alter_databaseContext::SET() {
  return getToken(tsqlParser::SET, 0);
}

tsqlParser::Database_optionspecContext* tsqlParser::Alter_databaseContext::database_optionspec() {
  return getRuleContext<tsqlParser::Database_optionspecContext>(0);
}

std::vector<tsqlParser::R_idContext *> tsqlParser::Alter_databaseContext::r_id() {
  return getRuleContexts<tsqlParser::R_idContext>();
}

tsqlParser::R_idContext* tsqlParser::Alter_databaseContext::r_id(size_t i) {
  return getRuleContext<tsqlParser::R_idContext>(i);
}

tree::TerminalNode* tsqlParser::Alter_databaseContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}

tree::TerminalNode* tsqlParser::Alter_databaseContext::WITH() {
  return getToken(tsqlParser::WITH, 0);
}

tsqlParser::TerminationContext* tsqlParser::Alter_databaseContext::termination() {
  return getRuleContext<tsqlParser::TerminationContext>(0);
}


size_t tsqlParser::Alter_databaseContext::getRuleIndex() const {
  return tsqlParser::RuleAlter_database;
}


std::any tsqlParser::Alter_databaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitAlter_database(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Alter_databaseContext* tsqlParser::alter_database() {
  Alter_databaseContext *_localctx = _tracker.createInstance<Alter_databaseContext>(_ctx, getState());
  enterRule(_localctx, 82, tsqlParser::RuleAlter_database);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1068);
    match(tsqlParser::ALTER);
    setState(1069);
    match(tsqlParser::DATABASE);
    setState(1072);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::FILLFACTOR:
      case tsqlParser::FORCESEEK:
      case tsqlParser::NEXT:
      case tsqlParser::NUMERIC:
      case tsqlParser::VALUE:
      case tsqlParser::ABSOLUTE:
      case tsqlParser::APPLY:
      case tsqlParser::AUTO:
      case tsqlParser::AVG:
      case tsqlParser::BASE64:
      case tsqlParser::CALLER:
      case tsqlParser::CAST:
      case tsqlParser::CATCH:
      case tsqlParser::CHECKSUM_AGG:
      case tsqlParser::COMMITTED:
      case tsqlParser::CONCAT:
      case tsqlParser::CONTROL:
      case tsqlParser::COOKIE:
      case tsqlParser::COUNT:
      case tsqlParser::COUNT_BIG:
      case tsqlParser::DATE:
      case tsqlParser::DELAY:
      case tsqlParser::DELETED:
      case tsqlParser::DENSE_RANK:
      case tsqlParser::DISABLE:
      case tsqlParser::DYNAMIC:
      case tsqlParser::ENCRYPTION:
      case tsqlParser::EXIST:
      case tsqlParser::EXPAND:
      case tsqlParser::FAST:
      case tsqlParser::FAST_FORWARD:
      case tsqlParser::FIRST:
      case tsqlParser::FIRST_VALUE:
      case tsqlParser::FOLLOWING:
      case tsqlParser::FORCE:
      case tsqlParser::FORCED:
      case tsqlParser::FORWARD_ONLY:
      case tsqlParser::FULLSCAN:
      case tsqlParser::GLOBAL:
      case tsqlParser::GROUPING:
      case tsqlParser::GROUPING_ID:
      case tsqlParser::HASH:
      case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
      case tsqlParser::IMPERSONATE:
      case tsqlParser::INSENSITIVE:
      case tsqlParser::INSERTED:
      case tsqlParser::ISOLATION:
      case tsqlParser::IO:
      case tsqlParser::KEEP:
      case tsqlParser::KEEPFIXED:
      case tsqlParser::KEYSET:
      case tsqlParser::LAG:
      case tsqlParser::LAST:
      case tsqlParser::LAST_VALUE:
      case tsqlParser::LEAD:
      case tsqlParser::LEVEL:
      case tsqlParser::LOCAL:
      case tsqlParser::LOCK_ESCALATION:
      case tsqlParser::LOGIN:
      case tsqlParser::LOOP:
      case tsqlParser::MARK:
      case tsqlParser::MAX:
      case tsqlParser::MAXDOP:
      case tsqlParser::MAXRECURSION:
      case tsqlParser::MIN:
      case tsqlParser::MODIFY:
      case tsqlParser::NAME:
      case tsqlParser::NOCOUNT:
      case tsqlParser::NODES:
      case tsqlParser::NOEXPAND:
      case tsqlParser::NORECOMPUTE:
      case tsqlParser::NTILE:
      case tsqlParser::NUMBER:
      case tsqlParser::OFFSET:
      case tsqlParser::ONLINE:
      case tsqlParser::ONLY:
      case tsqlParser::OPTIMISTIC:
      case tsqlParser::OPTIMIZE:
      case tsqlParser::OUT:
      case tsqlParser::OUTPUT:
      case tsqlParser::OWNER:
      case tsqlParser::PARAMETERIZATION:
      case tsqlParser::PARTITION:
      case tsqlParser::PATH:
      case tsqlParser::PRECEDING:
      case tsqlParser::PRIOR:
      case tsqlParser::PRIVILEGES:
      case tsqlParser::QUERY:
      case tsqlParser::RANGE:
      case tsqlParser::RANK:
      case tsqlParser::READONLY:
      case tsqlParser::READ_ONLY:
      case tsqlParser::RECOMPILE:
      case tsqlParser::RELATIVE:
      case tsqlParser::REMOTE:
      case tsqlParser::REPEATABLE:
      case tsqlParser::ROBUST:
      case tsqlParser::ROOT:
      case tsqlParser::ROW:
      case tsqlParser::ROWGUID:
      case tsqlParser::ROWS:
      case tsqlParser::ROW_NUMBER:
      case tsqlParser::SAMPLE:
      case tsqlParser::SCHEMABINDING:
      case tsqlParser::SCROLL:
      case tsqlParser::SCROLL_LOCKS:
      case tsqlParser::SELF:
      case tsqlParser::SERIALIZABLE:
      case tsqlParser::SIMPLE:
      case tsqlParser::SIZE:
      case tsqlParser::SNAPSHOT:
      case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
      case tsqlParser::STATIC:
      case tsqlParser::STATS_STREAM:
      case tsqlParser::STDEV:
      case tsqlParser::STDEVP:
      case tsqlParser::SUM:
      case tsqlParser::TEXTIMAGE_ON:
      case tsqlParser::THROW:
      case tsqlParser::TIES:
      case tsqlParser::TIME:
      case tsqlParser::TRY:
      case tsqlParser::TYPE:
      case tsqlParser::TYPE_WARNING:
      case tsqlParser::UNBOUNDED:
      case tsqlParser::UNCOMMITTED:
      case tsqlParser::UNKNOWN:
      case tsqlParser::USING:
      case tsqlParser::VAR:
      case tsqlParser::VARP:
      case tsqlParser::VIEWS:
      case tsqlParser::VIEW_METADATA:
      case tsqlParser::WORK:
      case tsqlParser::XML:
      case tsqlParser::XMLNAMESPACES:
      case tsqlParser::ZONE:
      case tsqlParser::DOUBLE_QUOTE_ID:
      case tsqlParser::SQUARE_BRACKET_ID:
      case tsqlParser::ID: {
        setState(1070);
        antlrcpp::downCast<Alter_databaseContext *>(_localctx)->database = r_id();
        break;
      }

      case tsqlParser::CURRENT: {
        setState(1071);
        match(tsqlParser::CURRENT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1086);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::MODIFY: {
        setState(1074);
        match(tsqlParser::MODIFY);
        setState(1075);
        match(tsqlParser::NAME);
        setState(1076);
        match(tsqlParser::EQUAL);
        setState(1077);
        antlrcpp::downCast<Alter_databaseContext *>(_localctx)->new_name = r_id();
        break;
      }

      case tsqlParser::COLLATE: {
        setState(1078);
        match(tsqlParser::COLLATE);
        setState(1079);
        antlrcpp::downCast<Alter_databaseContext *>(_localctx)->collation = r_id();
        break;
      }

      case tsqlParser::SET: {
        setState(1080);
        match(tsqlParser::SET);
        setState(1081);
        database_optionspec();
        setState(1084);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx)) {
        case 1: {
          setState(1082);
          match(tsqlParser::WITH);
          setState(1083);
          termination();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1089);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx)) {
    case 1: {
      setState(1088);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Database_optionspecContext ------------------------------------------------------------------

tsqlParser::Database_optionspecContext::Database_optionspecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::Auto_optionContext* tsqlParser::Database_optionspecContext::auto_option() {
  return getRuleContext<tsqlParser::Auto_optionContext>(0);
}

tsqlParser::Change_tracking_optionContext* tsqlParser::Database_optionspecContext::change_tracking_option() {
  return getRuleContext<tsqlParser::Change_tracking_optionContext>(0);
}

tsqlParser::Containment_optionContext* tsqlParser::Database_optionspecContext::containment_option() {
  return getRuleContext<tsqlParser::Containment_optionContext>(0);
}

tsqlParser::Cursor_optionContext* tsqlParser::Database_optionspecContext::cursor_option() {
  return getRuleContext<tsqlParser::Cursor_optionContext>(0);
}

tsqlParser::Date_correlation_optimization_optionContext* tsqlParser::Database_optionspecContext::date_correlation_optimization_option() {
  return getRuleContext<tsqlParser::Date_correlation_optimization_optionContext>(0);
}

tsqlParser::Db_encryption_optionContext* tsqlParser::Database_optionspecContext::db_encryption_option() {
  return getRuleContext<tsqlParser::Db_encryption_optionContext>(0);
}

tsqlParser::Db_state_optionContext* tsqlParser::Database_optionspecContext::db_state_option() {
  return getRuleContext<tsqlParser::Db_state_optionContext>(0);
}

tsqlParser::Db_update_optionContext* tsqlParser::Database_optionspecContext::db_update_option() {
  return getRuleContext<tsqlParser::Db_update_optionContext>(0);
}

tsqlParser::Db_user_access_optionContext* tsqlParser::Database_optionspecContext::db_user_access_option() {
  return getRuleContext<tsqlParser::Db_user_access_optionContext>(0);
}

tsqlParser::Delayed_durability_optionContext* tsqlParser::Database_optionspecContext::delayed_durability_option() {
  return getRuleContext<tsqlParser::Delayed_durability_optionContext>(0);
}

tsqlParser::External_access_optionContext* tsqlParser::Database_optionspecContext::external_access_option() {
  return getRuleContext<tsqlParser::External_access_optionContext>(0);
}

tree::TerminalNode* tsqlParser::Database_optionspecContext::FILESTREAM() {
  return getToken(tsqlParser::FILESTREAM, 0);
}

tsqlParser::Database_filestream_optionContext* tsqlParser::Database_optionspecContext::database_filestream_option() {
  return getRuleContext<tsqlParser::Database_filestream_optionContext>(0);
}

tsqlParser::Hadr_optionsContext* tsqlParser::Database_optionspecContext::hadr_options() {
  return getRuleContext<tsqlParser::Hadr_optionsContext>(0);
}

tsqlParser::Mixed_page_allocation_optionContext* tsqlParser::Database_optionspecContext::mixed_page_allocation_option() {
  return getRuleContext<tsqlParser::Mixed_page_allocation_optionContext>(0);
}

tsqlParser::Parameterization_optionContext* tsqlParser::Database_optionspecContext::parameterization_option() {
  return getRuleContext<tsqlParser::Parameterization_optionContext>(0);
}

tsqlParser::Recovery_optionContext* tsqlParser::Database_optionspecContext::recovery_option() {
  return getRuleContext<tsqlParser::Recovery_optionContext>(0);
}

tsqlParser::Service_broker_optionContext* tsqlParser::Database_optionspecContext::service_broker_option() {
  return getRuleContext<tsqlParser::Service_broker_optionContext>(0);
}

tsqlParser::Snapshot_optionContext* tsqlParser::Database_optionspecContext::snapshot_option() {
  return getRuleContext<tsqlParser::Snapshot_optionContext>(0);
}

tsqlParser::Sql_optionContext* tsqlParser::Database_optionspecContext::sql_option() {
  return getRuleContext<tsqlParser::Sql_optionContext>(0);
}

tsqlParser::Target_recovery_time_optionContext* tsqlParser::Database_optionspecContext::target_recovery_time_option() {
  return getRuleContext<tsqlParser::Target_recovery_time_optionContext>(0);
}

tsqlParser::TerminationContext* tsqlParser::Database_optionspecContext::termination() {
  return getRuleContext<tsqlParser::TerminationContext>(0);
}


size_t tsqlParser::Database_optionspecContext::getRuleIndex() const {
  return tsqlParser::RuleDatabase_optionspec;
}


std::any tsqlParser::Database_optionspecContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDatabase_optionspec(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Database_optionspecContext* tsqlParser::database_optionspec() {
  Database_optionspecContext *_localctx = _tracker.createInstance<Database_optionspecContext>(_ctx, getState());
  enterRule(_localctx, 84, tsqlParser::RuleDatabase_optionspec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1113);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1091);
      auto_option();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1092);
      change_tracking_option();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1093);
      containment_option();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1094);
      cursor_option();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1095);
      date_correlation_optimization_option();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1096);
      db_encryption_option();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1097);
      db_state_option();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1098);
      db_update_option();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1099);
      db_user_access_option();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1100);
      delayed_durability_option();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1101);
      external_access_option();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1102);
      match(tsqlParser::FILESTREAM);
      setState(1103);
      database_filestream_option();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1104);
      hadr_options();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1105);
      mixed_page_allocation_option();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(1106);
      parameterization_option();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(1107);
      recovery_option();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(1108);
      service_broker_option();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(1109);
      snapshot_option();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(1110);
      sql_option();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(1111);
      target_recovery_time_option();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(1112);
      termination();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Auto_optionContext ------------------------------------------------------------------

tsqlParser::Auto_optionContext::Auto_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Auto_optionContext::AUTO_CLOSE() {
  return getToken(tsqlParser::AUTO_CLOSE, 0);
}

tsqlParser::On_offContext* tsqlParser::Auto_optionContext::on_off() {
  return getRuleContext<tsqlParser::On_offContext>(0);
}

tree::TerminalNode* tsqlParser::Auto_optionContext::AUTO_CREATE_STATISTICS() {
  return getToken(tsqlParser::AUTO_CREATE_STATISTICS, 0);
}

tree::TerminalNode* tsqlParser::Auto_optionContext::OFF() {
  return getToken(tsqlParser::OFF, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Auto_optionContext::ON() {
  return getTokens(tsqlParser::ON);
}

tree::TerminalNode* tsqlParser::Auto_optionContext::ON(size_t i) {
  return getToken(tsqlParser::ON, i);
}

tree::TerminalNode* tsqlParser::Auto_optionContext::INCREMENTAL() {
  return getToken(tsqlParser::INCREMENTAL, 0);
}

tree::TerminalNode* tsqlParser::Auto_optionContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

tree::TerminalNode* tsqlParser::Auto_optionContext::AUTO_SHRINK() {
  return getToken(tsqlParser::AUTO_SHRINK, 0);
}

tree::TerminalNode* tsqlParser::Auto_optionContext::AUTO_UPDATE_STATISTICS() {
  return getToken(tsqlParser::AUTO_UPDATE_STATISTICS, 0);
}

tree::TerminalNode* tsqlParser::Auto_optionContext::AUTO_UPDATE_STATISTICS_ASYNC() {
  return getToken(tsqlParser::AUTO_UPDATE_STATISTICS_ASYNC, 0);
}


size_t tsqlParser::Auto_optionContext::getRuleIndex() const {
  return tsqlParser::RuleAuto_option;
}


std::any tsqlParser::Auto_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitAuto_option(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Auto_optionContext* tsqlParser::auto_option() {
  Auto_optionContext *_localctx = _tracker.createInstance<Auto_optionContext>(_ctx, getState());
  enterRule(_localctx, 86, tsqlParser::RuleAuto_option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1132);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::AUTO_CLOSE: {
        enterOuterAlt(_localctx, 1);
        setState(1115);
        match(tsqlParser::AUTO_CLOSE);
        setState(1116);
        on_off();
        break;
      }

      case tsqlParser::AUTO_CREATE_STATISTICS: {
        enterOuterAlt(_localctx, 2);
        setState(1117);
        match(tsqlParser::AUTO_CREATE_STATISTICS);
        setState(1118);
        match(tsqlParser::OFF);
        break;
      }

      case tsqlParser::ON: {
        enterOuterAlt(_localctx, 3);
        setState(1119);
        match(tsqlParser::ON);
        setState(1124);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case tsqlParser::INCREMENTAL: {
            setState(1120);
            match(tsqlParser::INCREMENTAL);
            setState(1121);
            match(tsqlParser::EQUAL);
            setState(1122);
            match(tsqlParser::ON);
            break;
          }

          case tsqlParser::OFF: {
            setState(1123);
            match(tsqlParser::OFF);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case tsqlParser::AUTO_SHRINK: {
        enterOuterAlt(_localctx, 4);
        setState(1126);
        match(tsqlParser::AUTO_SHRINK);
        setState(1127);
        on_off();
        break;
      }

      case tsqlParser::AUTO_UPDATE_STATISTICS: {
        enterOuterAlt(_localctx, 5);
        setState(1128);
        match(tsqlParser::AUTO_UPDATE_STATISTICS);
        setState(1129);
        on_off();
        break;
      }

      case tsqlParser::AUTO_UPDATE_STATISTICS_ASYNC: {
        enterOuterAlt(_localctx, 6);
        setState(1130);
        match(tsqlParser::AUTO_UPDATE_STATISTICS_ASYNC);
        setState(1131);
        _la = _input->LA(1);
        if (!(_la == tsqlParser::OFF

        || _la == tsqlParser::ON)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Change_tracking_optionContext ------------------------------------------------------------------

tsqlParser::Change_tracking_optionContext::Change_tracking_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Change_tracking_optionContext::CHANGE_TRACKING() {
  return getToken(tsqlParser::CHANGE_TRACKING, 0);
}

tree::TerminalNode* tsqlParser::Change_tracking_optionContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

tree::TerminalNode* tsqlParser::Change_tracking_optionContext::OFF() {
  return getToken(tsqlParser::OFF, 0);
}

tree::TerminalNode* tsqlParser::Change_tracking_optionContext::ON() {
  return getToken(tsqlParser::ON, 0);
}

std::vector<tsqlParser::Change_tracking_option_listContext *> tsqlParser::Change_tracking_optionContext::change_tracking_option_list() {
  return getRuleContexts<tsqlParser::Change_tracking_option_listContext>();
}

tsqlParser::Change_tracking_option_listContext* tsqlParser::Change_tracking_optionContext::change_tracking_option_list(size_t i) {
  return getRuleContext<tsqlParser::Change_tracking_option_listContext>(i);
}

std::vector<tree::TerminalNode *> tsqlParser::Change_tracking_optionContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Change_tracking_optionContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::Change_tracking_optionContext::getRuleIndex() const {
  return tsqlParser::RuleChange_tracking_option;
}


std::any tsqlParser::Change_tracking_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitChange_tracking_option(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Change_tracking_optionContext* tsqlParser::change_tracking_option() {
  Change_tracking_optionContext *_localctx = _tracker.createInstance<Change_tracking_optionContext>(_ctx, getState());
  enterRule(_localctx, 88, tsqlParser::RuleChange_tracking_option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1134);
    match(tsqlParser::CHANGE_TRACKING);
    setState(1135);
    match(tsqlParser::EQUAL);
    setState(1151);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::OFF: {
        setState(1136);
        match(tsqlParser::OFF);
        break;
      }

      case tsqlParser::ON: {
        setState(1137);
        match(tsqlParser::ON);
        setState(1148);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == tsqlParser::AUTO_CLEANUP

        || _la == tsqlParser::CHANGE_RETENTION) {
          setState(1138);
          change_tracking_option_list();
          setState(1143);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == tsqlParser::COMMA) {
            setState(1139);
            match(tsqlParser::COMMA);
            setState(1140);
            change_tracking_option_list();
            setState(1145);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          setState(1150);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Change_tracking_option_listContext ------------------------------------------------------------------

tsqlParser::Change_tracking_option_listContext::Change_tracking_option_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Change_tracking_option_listContext::AUTO_CLEANUP() {
  return getToken(tsqlParser::AUTO_CLEANUP, 0);
}

tree::TerminalNode* tsqlParser::Change_tracking_option_listContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

tsqlParser::On_offContext* tsqlParser::Change_tracking_option_listContext::on_off() {
  return getRuleContext<tsqlParser::On_offContext>(0);
}

tree::TerminalNode* tsqlParser::Change_tracking_option_listContext::CHANGE_RETENTION() {
  return getToken(tsqlParser::CHANGE_RETENTION, 0);
}

tree::TerminalNode* tsqlParser::Change_tracking_option_listContext::DAYS() {
  return getToken(tsqlParser::DAYS, 0);
}

tree::TerminalNode* tsqlParser::Change_tracking_option_listContext::HOURS() {
  return getToken(tsqlParser::HOURS, 0);
}

tree::TerminalNode* tsqlParser::Change_tracking_option_listContext::MINUTES() {
  return getToken(tsqlParser::MINUTES, 0);
}


size_t tsqlParser::Change_tracking_option_listContext::getRuleIndex() const {
  return tsqlParser::RuleChange_tracking_option_list;
}


std::any tsqlParser::Change_tracking_option_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitChange_tracking_option_list(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Change_tracking_option_listContext* tsqlParser::change_tracking_option_list() {
  Change_tracking_option_listContext *_localctx = _tracker.createInstance<Change_tracking_option_listContext>(_ctx, getState());
  enterRule(_localctx, 90, tsqlParser::RuleChange_tracking_option_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1159);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::AUTO_CLEANUP: {
        enterOuterAlt(_localctx, 1);
        setState(1153);
        match(tsqlParser::AUTO_CLEANUP);
        setState(1154);
        match(tsqlParser::EQUAL);
        setState(1155);
        on_off();
        break;
      }

      case tsqlParser::CHANGE_RETENTION: {
        enterOuterAlt(_localctx, 2);
        setState(1156);
        match(tsqlParser::CHANGE_RETENTION);
        setState(1157);
        match(tsqlParser::EQUAL);
        setState(1158);
        _la = _input->LA(1);
        if (!(_la == tsqlParser::DAYS

        || _la == tsqlParser::HOURS || _la == tsqlParser::MINUTES)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Containment_optionContext ------------------------------------------------------------------

tsqlParser::Containment_optionContext::Containment_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Containment_optionContext::CONTAINMENT() {
  return getToken(tsqlParser::CONTAINMENT, 0);
}

tree::TerminalNode* tsqlParser::Containment_optionContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

tree::TerminalNode* tsqlParser::Containment_optionContext::NONE() {
  return getToken(tsqlParser::NONE, 0);
}

tree::TerminalNode* tsqlParser::Containment_optionContext::PARTIAL() {
  return getToken(tsqlParser::PARTIAL, 0);
}


size_t tsqlParser::Containment_optionContext::getRuleIndex() const {
  return tsqlParser::RuleContainment_option;
}


std::any tsqlParser::Containment_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitContainment_option(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Containment_optionContext* tsqlParser::containment_option() {
  Containment_optionContext *_localctx = _tracker.createInstance<Containment_optionContext>(_ctx, getState());
  enterRule(_localctx, 92, tsqlParser::RuleContainment_option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1161);
    match(tsqlParser::CONTAINMENT);
    setState(1162);
    match(tsqlParser::EQUAL);
    setState(1163);
    _la = _input->LA(1);
    if (!(_la == tsqlParser::NONE

    || _la == tsqlParser::PARTIAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cursor_optionContext ------------------------------------------------------------------

tsqlParser::Cursor_optionContext::Cursor_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Cursor_optionContext::CURSOR_CLOSE_ON_COMMIT() {
  return getToken(tsqlParser::CURSOR_CLOSE_ON_COMMIT, 0);
}

tsqlParser::On_offContext* tsqlParser::Cursor_optionContext::on_off() {
  return getRuleContext<tsqlParser::On_offContext>(0);
}

tree::TerminalNode* tsqlParser::Cursor_optionContext::CURSOR_DEFAULT() {
  return getToken(tsqlParser::CURSOR_DEFAULT, 0);
}

tree::TerminalNode* tsqlParser::Cursor_optionContext::LOCAL() {
  return getToken(tsqlParser::LOCAL, 0);
}

tree::TerminalNode* tsqlParser::Cursor_optionContext::GLOBAL() {
  return getToken(tsqlParser::GLOBAL, 0);
}


size_t tsqlParser::Cursor_optionContext::getRuleIndex() const {
  return tsqlParser::RuleCursor_option;
}


std::any tsqlParser::Cursor_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitCursor_option(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Cursor_optionContext* tsqlParser::cursor_option() {
  Cursor_optionContext *_localctx = _tracker.createInstance<Cursor_optionContext>(_ctx, getState());
  enterRule(_localctx, 94, tsqlParser::RuleCursor_option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1169);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::CURSOR_CLOSE_ON_COMMIT: {
        enterOuterAlt(_localctx, 1);
        setState(1165);
        match(tsqlParser::CURSOR_CLOSE_ON_COMMIT);
        setState(1166);
        on_off();
        break;
      }

      case tsqlParser::CURSOR_DEFAULT: {
        enterOuterAlt(_localctx, 2);
        setState(1167);
        match(tsqlParser::CURSOR_DEFAULT);
        setState(1168);
        _la = _input->LA(1);
        if (!(_la == tsqlParser::GLOBAL

        || _la == tsqlParser::LOCAL)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Date_correlation_optimization_optionContext ------------------------------------------------------------------

tsqlParser::Date_correlation_optimization_optionContext::Date_correlation_optimization_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Date_correlation_optimization_optionContext::DATE_CORRELATION_OPTIMIZATION() {
  return getToken(tsqlParser::DATE_CORRELATION_OPTIMIZATION, 0);
}

tsqlParser::On_offContext* tsqlParser::Date_correlation_optimization_optionContext::on_off() {
  return getRuleContext<tsqlParser::On_offContext>(0);
}


size_t tsqlParser::Date_correlation_optimization_optionContext::getRuleIndex() const {
  return tsqlParser::RuleDate_correlation_optimization_option;
}


std::any tsqlParser::Date_correlation_optimization_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDate_correlation_optimization_option(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Date_correlation_optimization_optionContext* tsqlParser::date_correlation_optimization_option() {
  Date_correlation_optimization_optionContext *_localctx = _tracker.createInstance<Date_correlation_optimization_optionContext>(_ctx, getState());
  enterRule(_localctx, 96, tsqlParser::RuleDate_correlation_optimization_option);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1171);
    match(tsqlParser::DATE_CORRELATION_OPTIMIZATION);
    setState(1172);
    on_off();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Db_encryption_optionContext ------------------------------------------------------------------

tsqlParser::Db_encryption_optionContext::Db_encryption_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Db_encryption_optionContext::ENCRYPTION() {
  return getToken(tsqlParser::ENCRYPTION, 0);
}

tsqlParser::On_offContext* tsqlParser::Db_encryption_optionContext::on_off() {
  return getRuleContext<tsqlParser::On_offContext>(0);
}


size_t tsqlParser::Db_encryption_optionContext::getRuleIndex() const {
  return tsqlParser::RuleDb_encryption_option;
}


std::any tsqlParser::Db_encryption_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDb_encryption_option(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Db_encryption_optionContext* tsqlParser::db_encryption_option() {
  Db_encryption_optionContext *_localctx = _tracker.createInstance<Db_encryption_optionContext>(_ctx, getState());
  enterRule(_localctx, 98, tsqlParser::RuleDb_encryption_option);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1174);
    match(tsqlParser::ENCRYPTION);
    setState(1175);
    on_off();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Db_state_optionContext ------------------------------------------------------------------

tsqlParser::Db_state_optionContext::Db_state_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Db_state_optionContext::ONLINE() {
  return getToken(tsqlParser::ONLINE, 0);
}

tree::TerminalNode* tsqlParser::Db_state_optionContext::OFFLINE() {
  return getToken(tsqlParser::OFFLINE, 0);
}

tree::TerminalNode* tsqlParser::Db_state_optionContext::EMERGENCY() {
  return getToken(tsqlParser::EMERGENCY, 0);
}


size_t tsqlParser::Db_state_optionContext::getRuleIndex() const {
  return tsqlParser::RuleDb_state_option;
}


std::any tsqlParser::Db_state_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDb_state_option(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Db_state_optionContext* tsqlParser::db_state_option() {
  Db_state_optionContext *_localctx = _tracker.createInstance<Db_state_optionContext>(_ctx, getState());
  enterRule(_localctx, 100, tsqlParser::RuleDb_state_option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1177);
    _la = _input->LA(1);
    if (!(_la == tsqlParser::EMERGENCY || _la == tsqlParser::OFFLINE

    || _la == tsqlParser::ONLINE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Db_update_optionContext ------------------------------------------------------------------

tsqlParser::Db_update_optionContext::Db_update_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Db_update_optionContext::READ_ONLY() {
  return getToken(tsqlParser::READ_ONLY, 0);
}

tree::TerminalNode* tsqlParser::Db_update_optionContext::READ_WRITE() {
  return getToken(tsqlParser::READ_WRITE, 0);
}


size_t tsqlParser::Db_update_optionContext::getRuleIndex() const {
  return tsqlParser::RuleDb_update_option;
}


std::any tsqlParser::Db_update_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDb_update_option(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Db_update_optionContext* tsqlParser::db_update_option() {
  Db_update_optionContext *_localctx = _tracker.createInstance<Db_update_optionContext>(_ctx, getState());
  enterRule(_localctx, 102, tsqlParser::RuleDb_update_option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1179);
    _la = _input->LA(1);
    if (!(_la == tsqlParser::READ_ONLY

    || _la == tsqlParser::READ_WRITE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Db_user_access_optionContext ------------------------------------------------------------------

tsqlParser::Db_user_access_optionContext::Db_user_access_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Db_user_access_optionContext::SINGLE_USER() {
  return getToken(tsqlParser::SINGLE_USER, 0);
}

tree::TerminalNode* tsqlParser::Db_user_access_optionContext::RESTRICTED_USER() {
  return getToken(tsqlParser::RESTRICTED_USER, 0);
}

tree::TerminalNode* tsqlParser::Db_user_access_optionContext::MULTI_USER() {
  return getToken(tsqlParser::MULTI_USER, 0);
}


size_t tsqlParser::Db_user_access_optionContext::getRuleIndex() const {
  return tsqlParser::RuleDb_user_access_option;
}


std::any tsqlParser::Db_user_access_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDb_user_access_option(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Db_user_access_optionContext* tsqlParser::db_user_access_option() {
  Db_user_access_optionContext *_localctx = _tracker.createInstance<Db_user_access_optionContext>(_ctx, getState());
  enterRule(_localctx, 104, tsqlParser::RuleDb_user_access_option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1181);
    _la = _input->LA(1);
    if (!(_la == tsqlParser::MULTI_USER

    || _la == tsqlParser::RESTRICTED_USER || _la == tsqlParser::SINGLE_USER)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Delayed_durability_optionContext ------------------------------------------------------------------

tsqlParser::Delayed_durability_optionContext::Delayed_durability_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Delayed_durability_optionContext::DELAYED_DURABILITY() {
  return getToken(tsqlParser::DELAYED_DURABILITY, 0);
}

tree::TerminalNode* tsqlParser::Delayed_durability_optionContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

tree::TerminalNode* tsqlParser::Delayed_durability_optionContext::DISABLED() {
  return getToken(tsqlParser::DISABLED, 0);
}

tree::TerminalNode* tsqlParser::Delayed_durability_optionContext::ALLOWED() {
  return getToken(tsqlParser::ALLOWED, 0);
}

tree::TerminalNode* tsqlParser::Delayed_durability_optionContext::FORCED() {
  return getToken(tsqlParser::FORCED, 0);
}


size_t tsqlParser::Delayed_durability_optionContext::getRuleIndex() const {
  return tsqlParser::RuleDelayed_durability_option;
}


std::any tsqlParser::Delayed_durability_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDelayed_durability_option(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Delayed_durability_optionContext* tsqlParser::delayed_durability_option() {
  Delayed_durability_optionContext *_localctx = _tracker.createInstance<Delayed_durability_optionContext>(_ctx, getState());
  enterRule(_localctx, 106, tsqlParser::RuleDelayed_durability_option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1183);
    match(tsqlParser::DELAYED_DURABILITY);
    setState(1184);
    match(tsqlParser::EQUAL);
    setState(1185);
    _la = _input->LA(1);
    if (!(_la == tsqlParser::ALLOWED

    || _la == tsqlParser::DISABLED || _la == tsqlParser::FORCED)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- External_access_optionContext ------------------------------------------------------------------

tsqlParser::External_access_optionContext::External_access_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::External_access_optionContext::DB_CHAINING() {
  return getToken(tsqlParser::DB_CHAINING, 0);
}

tsqlParser::On_offContext* tsqlParser::External_access_optionContext::on_off() {
  return getRuleContext<tsqlParser::On_offContext>(0);
}

tree::TerminalNode* tsqlParser::External_access_optionContext::TRUSTWORTHY() {
  return getToken(tsqlParser::TRUSTWORTHY, 0);
}

tree::TerminalNode* tsqlParser::External_access_optionContext::DEFAULT_LANGUAGE() {
  return getToken(tsqlParser::DEFAULT_LANGUAGE, 0);
}

tree::TerminalNode* tsqlParser::External_access_optionContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

tsqlParser::R_idContext* tsqlParser::External_access_optionContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tree::TerminalNode* tsqlParser::External_access_optionContext::STRING() {
  return getToken(tsqlParser::STRING, 0);
}

tree::TerminalNode* tsqlParser::External_access_optionContext::DEFAULT_FULLTEXT_LANGUAGE() {
  return getToken(tsqlParser::DEFAULT_FULLTEXT_LANGUAGE, 0);
}

tree::TerminalNode* tsqlParser::External_access_optionContext::NESTED_TRIGGERS() {
  return getToken(tsqlParser::NESTED_TRIGGERS, 0);
}

tree::TerminalNode* tsqlParser::External_access_optionContext::OFF() {
  return getToken(tsqlParser::OFF, 0);
}

tree::TerminalNode* tsqlParser::External_access_optionContext::ON() {
  return getToken(tsqlParser::ON, 0);
}

tree::TerminalNode* tsqlParser::External_access_optionContext::TRANSFORM_NOISE_WORDS() {
  return getToken(tsqlParser::TRANSFORM_NOISE_WORDS, 0);
}

tree::TerminalNode* tsqlParser::External_access_optionContext::TWO_DIGIT_YEAR_CUTOFF() {
  return getToken(tsqlParser::TWO_DIGIT_YEAR_CUTOFF, 0);
}

tree::TerminalNode* tsqlParser::External_access_optionContext::DECIMAL() {
  return getToken(tsqlParser::DECIMAL, 0);
}


size_t tsqlParser::External_access_optionContext::getRuleIndex() const {
  return tsqlParser::RuleExternal_access_option;
}


std::any tsqlParser::External_access_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitExternal_access_option(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::External_access_optionContext* tsqlParser::external_access_option() {
  External_access_optionContext *_localctx = _tracker.createInstance<External_access_optionContext>(_ctx, getState());
  enterRule(_localctx, 108, tsqlParser::RuleExternal_access_option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1212);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::DB_CHAINING: {
        enterOuterAlt(_localctx, 1);
        setState(1187);
        match(tsqlParser::DB_CHAINING);
        setState(1188);
        on_off();
        break;
      }

      case tsqlParser::TRUSTWORTHY: {
        enterOuterAlt(_localctx, 2);
        setState(1189);
        match(tsqlParser::TRUSTWORTHY);
        setState(1190);
        on_off();
        break;
      }

      case tsqlParser::DEFAULT_LANGUAGE: {
        enterOuterAlt(_localctx, 3);
        setState(1191);
        match(tsqlParser::DEFAULT_LANGUAGE);
        setState(1192);
        match(tsqlParser::EQUAL);
        setState(1195);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case tsqlParser::FILLFACTOR:
          case tsqlParser::FORCESEEK:
          case tsqlParser::NEXT:
          case tsqlParser::NUMERIC:
          case tsqlParser::VALUE:
          case tsqlParser::ABSOLUTE:
          case tsqlParser::APPLY:
          case tsqlParser::AUTO:
          case tsqlParser::AVG:
          case tsqlParser::BASE64:
          case tsqlParser::CALLER:
          case tsqlParser::CAST:
          case tsqlParser::CATCH:
          case tsqlParser::CHECKSUM_AGG:
          case tsqlParser::COMMITTED:
          case tsqlParser::CONCAT:
          case tsqlParser::CONTROL:
          case tsqlParser::COOKIE:
          case tsqlParser::COUNT:
          case tsqlParser::COUNT_BIG:
          case tsqlParser::DATE:
          case tsqlParser::DELAY:
          case tsqlParser::DELETED:
          case tsqlParser::DENSE_RANK:
          case tsqlParser::DISABLE:
          case tsqlParser::DYNAMIC:
          case tsqlParser::ENCRYPTION:
          case tsqlParser::EXIST:
          case tsqlParser::EXPAND:
          case tsqlParser::FAST:
          case tsqlParser::FAST_FORWARD:
          case tsqlParser::FIRST:
          case tsqlParser::FIRST_VALUE:
          case tsqlParser::FOLLOWING:
          case tsqlParser::FORCE:
          case tsqlParser::FORCED:
          case tsqlParser::FORWARD_ONLY:
          case tsqlParser::FULLSCAN:
          case tsqlParser::GLOBAL:
          case tsqlParser::GROUPING:
          case tsqlParser::GROUPING_ID:
          case tsqlParser::HASH:
          case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
          case tsqlParser::IMPERSONATE:
          case tsqlParser::INSENSITIVE:
          case tsqlParser::INSERTED:
          case tsqlParser::ISOLATION:
          case tsqlParser::IO:
          case tsqlParser::KEEP:
          case tsqlParser::KEEPFIXED:
          case tsqlParser::KEYSET:
          case tsqlParser::LAG:
          case tsqlParser::LAST:
          case tsqlParser::LAST_VALUE:
          case tsqlParser::LEAD:
          case tsqlParser::LEVEL:
          case tsqlParser::LOCAL:
          case tsqlParser::LOCK_ESCALATION:
          case tsqlParser::LOGIN:
          case tsqlParser::LOOP:
          case tsqlParser::MARK:
          case tsqlParser::MAX:
          case tsqlParser::MAXDOP:
          case tsqlParser::MAXRECURSION:
          case tsqlParser::MIN:
          case tsqlParser::MODIFY:
          case tsqlParser::NAME:
          case tsqlParser::NOCOUNT:
          case tsqlParser::NODES:
          case tsqlParser::NOEXPAND:
          case tsqlParser::NORECOMPUTE:
          case tsqlParser::NTILE:
          case tsqlParser::NUMBER:
          case tsqlParser::OFFSET:
          case tsqlParser::ONLINE:
          case tsqlParser::ONLY:
          case tsqlParser::OPTIMISTIC:
          case tsqlParser::OPTIMIZE:
          case tsqlParser::OUT:
          case tsqlParser::OUTPUT:
          case tsqlParser::OWNER:
          case tsqlParser::PARAMETERIZATION:
          case tsqlParser::PARTITION:
          case tsqlParser::PATH:
          case tsqlParser::PRECEDING:
          case tsqlParser::PRIOR:
          case tsqlParser::PRIVILEGES:
          case tsqlParser::QUERY:
          case tsqlParser::RANGE:
          case tsqlParser::RANK:
          case tsqlParser::READONLY:
          case tsqlParser::READ_ONLY:
          case tsqlParser::RECOMPILE:
          case tsqlParser::RELATIVE:
          case tsqlParser::REMOTE:
          case tsqlParser::REPEATABLE:
          case tsqlParser::ROBUST:
          case tsqlParser::ROOT:
          case tsqlParser::ROW:
          case tsqlParser::ROWGUID:
          case tsqlParser::ROWS:
          case tsqlParser::ROW_NUMBER:
          case tsqlParser::SAMPLE:
          case tsqlParser::SCHEMABINDING:
          case tsqlParser::SCROLL:
          case tsqlParser::SCROLL_LOCKS:
          case tsqlParser::SELF:
          case tsqlParser::SERIALIZABLE:
          case tsqlParser::SIMPLE:
          case tsqlParser::SIZE:
          case tsqlParser::SNAPSHOT:
          case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
          case tsqlParser::STATIC:
          case tsqlParser::STATS_STREAM:
          case tsqlParser::STDEV:
          case tsqlParser::STDEVP:
          case tsqlParser::SUM:
          case tsqlParser::TEXTIMAGE_ON:
          case tsqlParser::THROW:
          case tsqlParser::TIES:
          case tsqlParser::TIME:
          case tsqlParser::TRY:
          case tsqlParser::TYPE:
          case tsqlParser::TYPE_WARNING:
          case tsqlParser::UNBOUNDED:
          case tsqlParser::UNCOMMITTED:
          case tsqlParser::UNKNOWN:
          case tsqlParser::USING:
          case tsqlParser::VAR:
          case tsqlParser::VARP:
          case tsqlParser::VIEWS:
          case tsqlParser::VIEW_METADATA:
          case tsqlParser::WORK:
          case tsqlParser::XML:
          case tsqlParser::XMLNAMESPACES:
          case tsqlParser::ZONE:
          case tsqlParser::DOUBLE_QUOTE_ID:
          case tsqlParser::SQUARE_BRACKET_ID:
          case tsqlParser::ID: {
            setState(1193);
            r_id();
            break;
          }

          case tsqlParser::STRING: {
            setState(1194);
            match(tsqlParser::STRING);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case tsqlParser::DEFAULT_FULLTEXT_LANGUAGE: {
        enterOuterAlt(_localctx, 4);
        setState(1197);
        match(tsqlParser::DEFAULT_FULLTEXT_LANGUAGE);
        setState(1198);
        match(tsqlParser::EQUAL);
        setState(1201);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case tsqlParser::FILLFACTOR:
          case tsqlParser::FORCESEEK:
          case tsqlParser::NEXT:
          case tsqlParser::NUMERIC:
          case tsqlParser::VALUE:
          case tsqlParser::ABSOLUTE:
          case tsqlParser::APPLY:
          case tsqlParser::AUTO:
          case tsqlParser::AVG:
          case tsqlParser::BASE64:
          case tsqlParser::CALLER:
          case tsqlParser::CAST:
          case tsqlParser::CATCH:
          case tsqlParser::CHECKSUM_AGG:
          case tsqlParser::COMMITTED:
          case tsqlParser::CONCAT:
          case tsqlParser::CONTROL:
          case tsqlParser::COOKIE:
          case tsqlParser::COUNT:
          case tsqlParser::COUNT_BIG:
          case tsqlParser::DATE:
          case tsqlParser::DELAY:
          case tsqlParser::DELETED:
          case tsqlParser::DENSE_RANK:
          case tsqlParser::DISABLE:
          case tsqlParser::DYNAMIC:
          case tsqlParser::ENCRYPTION:
          case tsqlParser::EXIST:
          case tsqlParser::EXPAND:
          case tsqlParser::FAST:
          case tsqlParser::FAST_FORWARD:
          case tsqlParser::FIRST:
          case tsqlParser::FIRST_VALUE:
          case tsqlParser::FOLLOWING:
          case tsqlParser::FORCE:
          case tsqlParser::FORCED:
          case tsqlParser::FORWARD_ONLY:
          case tsqlParser::FULLSCAN:
          case tsqlParser::GLOBAL:
          case tsqlParser::GROUPING:
          case tsqlParser::GROUPING_ID:
          case tsqlParser::HASH:
          case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
          case tsqlParser::IMPERSONATE:
          case tsqlParser::INSENSITIVE:
          case tsqlParser::INSERTED:
          case tsqlParser::ISOLATION:
          case tsqlParser::IO:
          case tsqlParser::KEEP:
          case tsqlParser::KEEPFIXED:
          case tsqlParser::KEYSET:
          case tsqlParser::LAG:
          case tsqlParser::LAST:
          case tsqlParser::LAST_VALUE:
          case tsqlParser::LEAD:
          case tsqlParser::LEVEL:
          case tsqlParser::LOCAL:
          case tsqlParser::LOCK_ESCALATION:
          case tsqlParser::LOGIN:
          case tsqlParser::LOOP:
          case tsqlParser::MARK:
          case tsqlParser::MAX:
          case tsqlParser::MAXDOP:
          case tsqlParser::MAXRECURSION:
          case tsqlParser::MIN:
          case tsqlParser::MODIFY:
          case tsqlParser::NAME:
          case tsqlParser::NOCOUNT:
          case tsqlParser::NODES:
          case tsqlParser::NOEXPAND:
          case tsqlParser::NORECOMPUTE:
          case tsqlParser::NTILE:
          case tsqlParser::NUMBER:
          case tsqlParser::OFFSET:
          case tsqlParser::ONLINE:
          case tsqlParser::ONLY:
          case tsqlParser::OPTIMISTIC:
          case tsqlParser::OPTIMIZE:
          case tsqlParser::OUT:
          case tsqlParser::OUTPUT:
          case tsqlParser::OWNER:
          case tsqlParser::PARAMETERIZATION:
          case tsqlParser::PARTITION:
          case tsqlParser::PATH:
          case tsqlParser::PRECEDING:
          case tsqlParser::PRIOR:
          case tsqlParser::PRIVILEGES:
          case tsqlParser::QUERY:
          case tsqlParser::RANGE:
          case tsqlParser::RANK:
          case tsqlParser::READONLY:
          case tsqlParser::READ_ONLY:
          case tsqlParser::RECOMPILE:
          case tsqlParser::RELATIVE:
          case tsqlParser::REMOTE:
          case tsqlParser::REPEATABLE:
          case tsqlParser::ROBUST:
          case tsqlParser::ROOT:
          case tsqlParser::ROW:
          case tsqlParser::ROWGUID:
          case tsqlParser::ROWS:
          case tsqlParser::ROW_NUMBER:
          case tsqlParser::SAMPLE:
          case tsqlParser::SCHEMABINDING:
          case tsqlParser::SCROLL:
          case tsqlParser::SCROLL_LOCKS:
          case tsqlParser::SELF:
          case tsqlParser::SERIALIZABLE:
          case tsqlParser::SIMPLE:
          case tsqlParser::SIZE:
          case tsqlParser::SNAPSHOT:
          case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
          case tsqlParser::STATIC:
          case tsqlParser::STATS_STREAM:
          case tsqlParser::STDEV:
          case tsqlParser::STDEVP:
          case tsqlParser::SUM:
          case tsqlParser::TEXTIMAGE_ON:
          case tsqlParser::THROW:
          case tsqlParser::TIES:
          case tsqlParser::TIME:
          case tsqlParser::TRY:
          case tsqlParser::TYPE:
          case tsqlParser::TYPE_WARNING:
          case tsqlParser::UNBOUNDED:
          case tsqlParser::UNCOMMITTED:
          case tsqlParser::UNKNOWN:
          case tsqlParser::USING:
          case tsqlParser::VAR:
          case tsqlParser::VARP:
          case tsqlParser::VIEWS:
          case tsqlParser::VIEW_METADATA:
          case tsqlParser::WORK:
          case tsqlParser::XML:
          case tsqlParser::XMLNAMESPACES:
          case tsqlParser::ZONE:
          case tsqlParser::DOUBLE_QUOTE_ID:
          case tsqlParser::SQUARE_BRACKET_ID:
          case tsqlParser::ID: {
            setState(1199);
            r_id();
            break;
          }

          case tsqlParser::STRING: {
            setState(1200);
            match(tsqlParser::STRING);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case tsqlParser::NESTED_TRIGGERS: {
        enterOuterAlt(_localctx, 5);
        setState(1203);
        match(tsqlParser::NESTED_TRIGGERS);
        setState(1204);
        match(tsqlParser::EQUAL);
        setState(1205);
        _la = _input->LA(1);
        if (!(_la == tsqlParser::OFF

        || _la == tsqlParser::ON)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case tsqlParser::TRANSFORM_NOISE_WORDS: {
        enterOuterAlt(_localctx, 6);
        setState(1206);
        match(tsqlParser::TRANSFORM_NOISE_WORDS);
        setState(1207);
        match(tsqlParser::EQUAL);
        setState(1208);
        _la = _input->LA(1);
        if (!(_la == tsqlParser::OFF

        || _la == tsqlParser::ON)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case tsqlParser::TWO_DIGIT_YEAR_CUTOFF: {
        enterOuterAlt(_localctx, 7);
        setState(1209);
        match(tsqlParser::TWO_DIGIT_YEAR_CUTOFF);
        setState(1210);
        match(tsqlParser::EQUAL);
        setState(1211);
        match(tsqlParser::DECIMAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Hadr_optionsContext ------------------------------------------------------------------

tsqlParser::Hadr_optionsContext::Hadr_optionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Hadr_optionsContext::ALTER() {
  return getToken(tsqlParser::ALTER, 0);
}

tree::TerminalNode* tsqlParser::Hadr_optionsContext::DATABASE() {
  return getToken(tsqlParser::DATABASE, 0);
}

tree::TerminalNode* tsqlParser::Hadr_optionsContext::SET() {
  return getToken(tsqlParser::SET, 0);
}

tree::TerminalNode* tsqlParser::Hadr_optionsContext::HADR() {
  return getToken(tsqlParser::HADR, 0);
}


size_t tsqlParser::Hadr_optionsContext::getRuleIndex() const {
  return tsqlParser::RuleHadr_options;
}


std::any tsqlParser::Hadr_optionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitHadr_options(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Hadr_optionsContext* tsqlParser::hadr_options() {
  Hadr_optionsContext *_localctx = _tracker.createInstance<Hadr_optionsContext>(_ctx, getState());
  enterRule(_localctx, 110, tsqlParser::RuleHadr_options);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1214);
    match(tsqlParser::ALTER);
    setState(1215);
    match(tsqlParser::DATABASE);
    setState(1216);
    match(tsqlParser::SET);
    setState(1217);
    match(tsqlParser::HADR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mixed_page_allocation_optionContext ------------------------------------------------------------------

tsqlParser::Mixed_page_allocation_optionContext::Mixed_page_allocation_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Mixed_page_allocation_optionContext::MIXED_PAGE_ALLOCATION() {
  return getToken(tsqlParser::MIXED_PAGE_ALLOCATION, 0);
}

tree::TerminalNode* tsqlParser::Mixed_page_allocation_optionContext::OFF() {
  return getToken(tsqlParser::OFF, 0);
}

tree::TerminalNode* tsqlParser::Mixed_page_allocation_optionContext::ON() {
  return getToken(tsqlParser::ON, 0);
}


size_t tsqlParser::Mixed_page_allocation_optionContext::getRuleIndex() const {
  return tsqlParser::RuleMixed_page_allocation_option;
}


std::any tsqlParser::Mixed_page_allocation_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitMixed_page_allocation_option(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Mixed_page_allocation_optionContext* tsqlParser::mixed_page_allocation_option() {
  Mixed_page_allocation_optionContext *_localctx = _tracker.createInstance<Mixed_page_allocation_optionContext>(_ctx, getState());
  enterRule(_localctx, 112, tsqlParser::RuleMixed_page_allocation_option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1219);
    match(tsqlParser::MIXED_PAGE_ALLOCATION);
    setState(1220);
    _la = _input->LA(1);
    if (!(_la == tsqlParser::OFF

    || _la == tsqlParser::ON)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Parameterization_optionContext ------------------------------------------------------------------

tsqlParser::Parameterization_optionContext::Parameterization_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Parameterization_optionContext::PARAMETERIZATION() {
  return getToken(tsqlParser::PARAMETERIZATION, 0);
}

tree::TerminalNode* tsqlParser::Parameterization_optionContext::SIMPLE() {
  return getToken(tsqlParser::SIMPLE, 0);
}

tree::TerminalNode* tsqlParser::Parameterization_optionContext::FORCED() {
  return getToken(tsqlParser::FORCED, 0);
}


size_t tsqlParser::Parameterization_optionContext::getRuleIndex() const {
  return tsqlParser::RuleParameterization_option;
}


std::any tsqlParser::Parameterization_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitParameterization_option(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Parameterization_optionContext* tsqlParser::parameterization_option() {
  Parameterization_optionContext *_localctx = _tracker.createInstance<Parameterization_optionContext>(_ctx, getState());
  enterRule(_localctx, 114, tsqlParser::RuleParameterization_option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1222);
    match(tsqlParser::PARAMETERIZATION);
    setState(1223);
    _la = _input->LA(1);
    if (!(_la == tsqlParser::FORCED || _la == tsqlParser::SIMPLE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Recovery_optionContext ------------------------------------------------------------------

tsqlParser::Recovery_optionContext::Recovery_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Recovery_optionContext::RECOVERY() {
  return getToken(tsqlParser::RECOVERY, 0);
}

tree::TerminalNode* tsqlParser::Recovery_optionContext::FULL() {
  return getToken(tsqlParser::FULL, 0);
}

tree::TerminalNode* tsqlParser::Recovery_optionContext::BULK_LOGGED() {
  return getToken(tsqlParser::BULK_LOGGED, 0);
}

tree::TerminalNode* tsqlParser::Recovery_optionContext::SIMPLE() {
  return getToken(tsqlParser::SIMPLE, 0);
}

tree::TerminalNode* tsqlParser::Recovery_optionContext::TORN_PAGE_DETECTION() {
  return getToken(tsqlParser::TORN_PAGE_DETECTION, 0);
}

tsqlParser::On_offContext* tsqlParser::Recovery_optionContext::on_off() {
  return getRuleContext<tsqlParser::On_offContext>(0);
}

tree::TerminalNode* tsqlParser::Recovery_optionContext::PAGE_VERIFY() {
  return getToken(tsqlParser::PAGE_VERIFY, 0);
}

tree::TerminalNode* tsqlParser::Recovery_optionContext::CHECKSUM() {
  return getToken(tsqlParser::CHECKSUM, 0);
}

tree::TerminalNode* tsqlParser::Recovery_optionContext::NONE() {
  return getToken(tsqlParser::NONE, 0);
}


size_t tsqlParser::Recovery_optionContext::getRuleIndex() const {
  return tsqlParser::RuleRecovery_option;
}


std::any tsqlParser::Recovery_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitRecovery_option(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Recovery_optionContext* tsqlParser::recovery_option() {
  Recovery_optionContext *_localctx = _tracker.createInstance<Recovery_optionContext>(_ctx, getState());
  enterRule(_localctx, 116, tsqlParser::RuleRecovery_option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1231);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::RECOVERY: {
        enterOuterAlt(_localctx, 1);
        setState(1225);
        match(tsqlParser::RECOVERY);
        setState(1226);
        _la = _input->LA(1);
        if (!(_la == tsqlParser::FULL || _la == tsqlParser::BULK_LOGGED || _la == tsqlParser::SIMPLE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case tsqlParser::TORN_PAGE_DETECTION: {
        enterOuterAlt(_localctx, 2);
        setState(1227);
        match(tsqlParser::TORN_PAGE_DETECTION);
        setState(1228);
        on_off();
        break;
      }

      case tsqlParser::PAGE_VERIFY: {
        enterOuterAlt(_localctx, 3);
        setState(1229);
        match(tsqlParser::PAGE_VERIFY);
        setState(1230);
        _la = _input->LA(1);
        if (!(_la == tsqlParser::NONE || _la == tsqlParser::CHECKSUM || _la == tsqlParser::TORN_PAGE_DETECTION)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Service_broker_optionContext ------------------------------------------------------------------

tsqlParser::Service_broker_optionContext::Service_broker_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Service_broker_optionContext::ENABLE_BROKER() {
  return getToken(tsqlParser::ENABLE_BROKER, 0);
}

tree::TerminalNode* tsqlParser::Service_broker_optionContext::DISABLE_BROKER() {
  return getToken(tsqlParser::DISABLE_BROKER, 0);
}

tree::TerminalNode* tsqlParser::Service_broker_optionContext::NEW_BROKER() {
  return getToken(tsqlParser::NEW_BROKER, 0);
}

tree::TerminalNode* tsqlParser::Service_broker_optionContext::ERROR_BROKER_CONVERSATIONS() {
  return getToken(tsqlParser::ERROR_BROKER_CONVERSATIONS, 0);
}

tree::TerminalNode* tsqlParser::Service_broker_optionContext::HONOR_BROKER_PRIORITY() {
  return getToken(tsqlParser::HONOR_BROKER_PRIORITY, 0);
}

tsqlParser::On_offContext* tsqlParser::Service_broker_optionContext::on_off() {
  return getRuleContext<tsqlParser::On_offContext>(0);
}


size_t tsqlParser::Service_broker_optionContext::getRuleIndex() const {
  return tsqlParser::RuleService_broker_option;
}


std::any tsqlParser::Service_broker_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitService_broker_option(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Service_broker_optionContext* tsqlParser::service_broker_option() {
  Service_broker_optionContext *_localctx = _tracker.createInstance<Service_broker_optionContext>(_ctx, getState());
  enterRule(_localctx, 118, tsqlParser::RuleService_broker_option);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1239);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::ENABLE_BROKER: {
        enterOuterAlt(_localctx, 1);
        setState(1233);
        match(tsqlParser::ENABLE_BROKER);
        break;
      }

      case tsqlParser::DISABLE_BROKER: {
        enterOuterAlt(_localctx, 2);
        setState(1234);
        match(tsqlParser::DISABLE_BROKER);
        break;
      }

      case tsqlParser::NEW_BROKER: {
        enterOuterAlt(_localctx, 3);
        setState(1235);
        match(tsqlParser::NEW_BROKER);
        break;
      }

      case tsqlParser::ERROR_BROKER_CONVERSATIONS: {
        enterOuterAlt(_localctx, 4);
        setState(1236);
        match(tsqlParser::ERROR_BROKER_CONVERSATIONS);
        break;
      }

      case tsqlParser::HONOR_BROKER_PRIORITY: {
        enterOuterAlt(_localctx, 5);
        setState(1237);
        match(tsqlParser::HONOR_BROKER_PRIORITY);
        setState(1238);
        on_off();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Snapshot_optionContext ------------------------------------------------------------------

tsqlParser::Snapshot_optionContext::Snapshot_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Snapshot_optionContext::ALLOW_SNAPSHOT_ISOLATION() {
  return getToken(tsqlParser::ALLOW_SNAPSHOT_ISOLATION, 0);
}

tsqlParser::On_offContext* tsqlParser::Snapshot_optionContext::on_off() {
  return getRuleContext<tsqlParser::On_offContext>(0);
}

tree::TerminalNode* tsqlParser::Snapshot_optionContext::READ_COMMITTED_SNAPSHOT() {
  return getToken(tsqlParser::READ_COMMITTED_SNAPSHOT, 0);
}

tree::TerminalNode* tsqlParser::Snapshot_optionContext::ON() {
  return getToken(tsqlParser::ON, 0);
}

tree::TerminalNode* tsqlParser::Snapshot_optionContext::OFF() {
  return getToken(tsqlParser::OFF, 0);
}


size_t tsqlParser::Snapshot_optionContext::getRuleIndex() const {
  return tsqlParser::RuleSnapshot_option;
}


std::any tsqlParser::Snapshot_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitSnapshot_option(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Snapshot_optionContext* tsqlParser::snapshot_option() {
  Snapshot_optionContext *_localctx = _tracker.createInstance<Snapshot_optionContext>(_ctx, getState());
  enterRule(_localctx, 120, tsqlParser::RuleSnapshot_option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1246);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::ALLOW_SNAPSHOT_ISOLATION: {
        enterOuterAlt(_localctx, 1);
        setState(1241);
        match(tsqlParser::ALLOW_SNAPSHOT_ISOLATION);
        setState(1242);
        on_off();
        break;
      }

      case tsqlParser::READ_COMMITTED_SNAPSHOT: {
        enterOuterAlt(_localctx, 2);
        setState(1243);
        match(tsqlParser::READ_COMMITTED_SNAPSHOT);
        setState(1244);
        _la = _input->LA(1);
        if (!(_la == tsqlParser::OFF

        || _la == tsqlParser::ON)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case tsqlParser::OFF:
      case tsqlParser::ON: {
        enterOuterAlt(_localctx, 3);
        setState(1245);
        antlrcpp::downCast<Snapshot_optionContext *>(_localctx)->MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == tsqlParser::OFF

        || _la == tsqlParser::ON)) {
          antlrcpp::downCast<Snapshot_optionContext *>(_localctx)->MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sql_optionContext ------------------------------------------------------------------

tsqlParser::Sql_optionContext::Sql_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Sql_optionContext::ANSI_NULL_DEFAULT() {
  return getToken(tsqlParser::ANSI_NULL_DEFAULT, 0);
}

tsqlParser::On_offContext* tsqlParser::Sql_optionContext::on_off() {
  return getRuleContext<tsqlParser::On_offContext>(0);
}

tree::TerminalNode* tsqlParser::Sql_optionContext::ANSI_NULLS() {
  return getToken(tsqlParser::ANSI_NULLS, 0);
}

tree::TerminalNode* tsqlParser::Sql_optionContext::ANSI_PADDING() {
  return getToken(tsqlParser::ANSI_PADDING, 0);
}

tree::TerminalNode* tsqlParser::Sql_optionContext::ANSI_WARNINGS() {
  return getToken(tsqlParser::ANSI_WARNINGS, 0);
}

tree::TerminalNode* tsqlParser::Sql_optionContext::ARITHABORT() {
  return getToken(tsqlParser::ARITHABORT, 0);
}

tree::TerminalNode* tsqlParser::Sql_optionContext::COMPATIBILITY_LEVEL() {
  return getToken(tsqlParser::COMPATIBILITY_LEVEL, 0);
}

tree::TerminalNode* tsqlParser::Sql_optionContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

tree::TerminalNode* tsqlParser::Sql_optionContext::DECIMAL() {
  return getToken(tsqlParser::DECIMAL, 0);
}

tree::TerminalNode* tsqlParser::Sql_optionContext::CONCAT_NULL_YIELDS_NULL() {
  return getToken(tsqlParser::CONCAT_NULL_YIELDS_NULL, 0);
}

tree::TerminalNode* tsqlParser::Sql_optionContext::NUMERIC_ROUNDABORT() {
  return getToken(tsqlParser::NUMERIC_ROUNDABORT, 0);
}

tree::TerminalNode* tsqlParser::Sql_optionContext::QUOTED_IDENTIFIER() {
  return getToken(tsqlParser::QUOTED_IDENTIFIER, 0);
}

tree::TerminalNode* tsqlParser::Sql_optionContext::RECURSIVE_TRIGGERS() {
  return getToken(tsqlParser::RECURSIVE_TRIGGERS, 0);
}


size_t tsqlParser::Sql_optionContext::getRuleIndex() const {
  return tsqlParser::RuleSql_option;
}


std::any tsqlParser::Sql_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitSql_option(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Sql_optionContext* tsqlParser::sql_option() {
  Sql_optionContext *_localctx = _tracker.createInstance<Sql_optionContext>(_ctx, getState());
  enterRule(_localctx, 122, tsqlParser::RuleSql_option);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1269);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::ANSI_NULL_DEFAULT: {
        enterOuterAlt(_localctx, 1);
        setState(1248);
        match(tsqlParser::ANSI_NULL_DEFAULT);
        setState(1249);
        on_off();
        break;
      }

      case tsqlParser::ANSI_NULLS: {
        enterOuterAlt(_localctx, 2);
        setState(1250);
        match(tsqlParser::ANSI_NULLS);
        setState(1251);
        on_off();
        break;
      }

      case tsqlParser::ANSI_PADDING: {
        enterOuterAlt(_localctx, 3);
        setState(1252);
        match(tsqlParser::ANSI_PADDING);
        setState(1253);
        on_off();
        break;
      }

      case tsqlParser::ANSI_WARNINGS: {
        enterOuterAlt(_localctx, 4);
        setState(1254);
        match(tsqlParser::ANSI_WARNINGS);
        setState(1255);
        on_off();
        break;
      }

      case tsqlParser::ARITHABORT: {
        enterOuterAlt(_localctx, 5);
        setState(1256);
        match(tsqlParser::ARITHABORT);
        setState(1257);
        on_off();
        break;
      }

      case tsqlParser::COMPATIBILITY_LEVEL: {
        enterOuterAlt(_localctx, 6);
        setState(1258);
        match(tsqlParser::COMPATIBILITY_LEVEL);
        setState(1259);
        match(tsqlParser::EQUAL);
        setState(1260);
        match(tsqlParser::DECIMAL);
        break;
      }

      case tsqlParser::CONCAT_NULL_YIELDS_NULL: {
        enterOuterAlt(_localctx, 7);
        setState(1261);
        match(tsqlParser::CONCAT_NULL_YIELDS_NULL);
        setState(1262);
        on_off();
        break;
      }

      case tsqlParser::NUMERIC_ROUNDABORT: {
        enterOuterAlt(_localctx, 8);
        setState(1263);
        match(tsqlParser::NUMERIC_ROUNDABORT);
        setState(1264);
        on_off();
        break;
      }

      case tsqlParser::QUOTED_IDENTIFIER: {
        enterOuterAlt(_localctx, 9);
        setState(1265);
        match(tsqlParser::QUOTED_IDENTIFIER);
        setState(1266);
        on_off();
        break;
      }

      case tsqlParser::RECURSIVE_TRIGGERS: {
        enterOuterAlt(_localctx, 10);
        setState(1267);
        match(tsqlParser::RECURSIVE_TRIGGERS);
        setState(1268);
        on_off();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Target_recovery_time_optionContext ------------------------------------------------------------------

tsqlParser::Target_recovery_time_optionContext::Target_recovery_time_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Target_recovery_time_optionContext::TARGET_RECOVERY_TIME() {
  return getToken(tsqlParser::TARGET_RECOVERY_TIME, 0);
}

tree::TerminalNode* tsqlParser::Target_recovery_time_optionContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

tree::TerminalNode* tsqlParser::Target_recovery_time_optionContext::DECIMAL() {
  return getToken(tsqlParser::DECIMAL, 0);
}

tree::TerminalNode* tsqlParser::Target_recovery_time_optionContext::SECONDS() {
  return getToken(tsqlParser::SECONDS, 0);
}

tree::TerminalNode* tsqlParser::Target_recovery_time_optionContext::MINUTES() {
  return getToken(tsqlParser::MINUTES, 0);
}


size_t tsqlParser::Target_recovery_time_optionContext::getRuleIndex() const {
  return tsqlParser::RuleTarget_recovery_time_option;
}


std::any tsqlParser::Target_recovery_time_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitTarget_recovery_time_option(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Target_recovery_time_optionContext* tsqlParser::target_recovery_time_option() {
  Target_recovery_time_optionContext *_localctx = _tracker.createInstance<Target_recovery_time_optionContext>(_ctx, getState());
  enterRule(_localctx, 124, tsqlParser::RuleTarget_recovery_time_option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1271);
    match(tsqlParser::TARGET_RECOVERY_TIME);
    setState(1272);
    match(tsqlParser::EQUAL);
    setState(1273);
    match(tsqlParser::DECIMAL);
    setState(1274);
    _la = _input->LA(1);
    if (!(_la == tsqlParser::MINUTES

    || _la == tsqlParser::SECONDS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TerminationContext ------------------------------------------------------------------

tsqlParser::TerminationContext::TerminationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::TerminationContext::ROLLBACK() {
  return getToken(tsqlParser::ROLLBACK, 0);
}

tree::TerminalNode* tsqlParser::TerminationContext::AFTER() {
  return getToken(tsqlParser::AFTER, 0);
}

tree::TerminalNode* tsqlParser::TerminationContext::DECIMAL() {
  return getToken(tsqlParser::DECIMAL, 0);
}

tree::TerminalNode* tsqlParser::TerminationContext::IMMEDIATE() {
  return getToken(tsqlParser::IMMEDIATE, 0);
}

tree::TerminalNode* tsqlParser::TerminationContext::NO_WAIT() {
  return getToken(tsqlParser::NO_WAIT, 0);
}


size_t tsqlParser::TerminationContext::getRuleIndex() const {
  return tsqlParser::RuleTermination;
}


std::any tsqlParser::TerminationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitTermination(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::TerminationContext* tsqlParser::termination() {
  TerminationContext *_localctx = _tracker.createInstance<TerminationContext>(_ctx, getState());
  enterRule(_localctx, 126, tsqlParser::RuleTermination);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1282);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1276);
      match(tsqlParser::ROLLBACK);
      setState(1277);
      match(tsqlParser::AFTER);
      setState(1278);
      antlrcpp::downCast<TerminationContext *>(_localctx)->seconds = match(tsqlParser::DECIMAL);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1279);
      match(tsqlParser::ROLLBACK);
      setState(1280);
      match(tsqlParser::IMMEDIATE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1281);
      match(tsqlParser::NO_WAIT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_indexContext ------------------------------------------------------------------

tsqlParser::Drop_indexContext::Drop_indexContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Drop_indexContext::DROP() {
  return getToken(tsqlParser::DROP, 0);
}

tree::TerminalNode* tsqlParser::Drop_indexContext::INDEX() {
  return getToken(tsqlParser::INDEX, 0);
}

tsqlParser::R_idContext* tsqlParser::Drop_indexContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tree::TerminalNode* tsqlParser::Drop_indexContext::IF() {
  return getToken(tsqlParser::IF, 0);
}

tree::TerminalNode* tsqlParser::Drop_indexContext::EXISTS() {
  return getToken(tsqlParser::EXISTS, 0);
}

tree::TerminalNode* tsqlParser::Drop_indexContext::ON() {
  return getToken(tsqlParser::ON, 0);
}

tsqlParser::Full_table_nameContext* tsqlParser::Drop_indexContext::full_table_name() {
  return getRuleContext<tsqlParser::Full_table_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Drop_indexContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}


size_t tsqlParser::Drop_indexContext::getRuleIndex() const {
  return tsqlParser::RuleDrop_index;
}


std::any tsqlParser::Drop_indexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDrop_index(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Drop_indexContext* tsqlParser::drop_index() {
  Drop_indexContext *_localctx = _tracker.createInstance<Drop_indexContext>(_ctx, getState());
  enterRule(_localctx, 128, tsqlParser::RuleDrop_index);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1284);
    match(tsqlParser::DROP);
    setState(1285);
    match(tsqlParser::INDEX);
    setState(1288);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::IF) {
      setState(1286);
      match(tsqlParser::IF);
      setState(1287);
      match(tsqlParser::EXISTS);
    }
    setState(1290);
    antlrcpp::downCast<Drop_indexContext *>(_localctx)->name = r_id();
    setState(1293);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::ON) {
      setState(1291);
      match(tsqlParser::ON);
      setState(1292);
      full_table_name();
    }
    setState(1296);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 151, _ctx)) {
    case 1: {
      setState(1295);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_procedureContext ------------------------------------------------------------------

tsqlParser::Drop_procedureContext::Drop_procedureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Drop_procedureContext::DROP() {
  return getToken(tsqlParser::DROP, 0);
}

tree::TerminalNode* tsqlParser::Drop_procedureContext::PROCEDURE() {
  return getToken(tsqlParser::PROCEDURE, 0);
}

tsqlParser::Func_proc_nameContext* tsqlParser::Drop_procedureContext::func_proc_name() {
  return getRuleContext<tsqlParser::Func_proc_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Drop_procedureContext::IF() {
  return getToken(tsqlParser::IF, 0);
}

tree::TerminalNode* tsqlParser::Drop_procedureContext::EXISTS() {
  return getToken(tsqlParser::EXISTS, 0);
}

tree::TerminalNode* tsqlParser::Drop_procedureContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}


size_t tsqlParser::Drop_procedureContext::getRuleIndex() const {
  return tsqlParser::RuleDrop_procedure;
}


std::any tsqlParser::Drop_procedureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDrop_procedure(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Drop_procedureContext* tsqlParser::drop_procedure() {
  Drop_procedureContext *_localctx = _tracker.createInstance<Drop_procedureContext>(_ctx, getState());
  enterRule(_localctx, 130, tsqlParser::RuleDrop_procedure);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1298);
    match(tsqlParser::DROP);
    setState(1299);
    match(tsqlParser::PROCEDURE);
    setState(1302);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::IF) {
      setState(1300);
      match(tsqlParser::IF);
      setState(1301);
      match(tsqlParser::EXISTS);
    }
    setState(1304);
    func_proc_name();
    setState(1306);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx)) {
    case 1: {
      setState(1305);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_statisticsContext ------------------------------------------------------------------

tsqlParser::Drop_statisticsContext::Drop_statisticsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Drop_statisticsContext::DROP() {
  return getToken(tsqlParser::DROP, 0);
}

tree::TerminalNode* tsqlParser::Drop_statisticsContext::STATISTICS() {
  return getToken(tsqlParser::STATISTICS, 0);
}

tsqlParser::R_idContext* tsqlParser::Drop_statisticsContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tsqlParser::Full_table_nameContext* tsqlParser::Drop_statisticsContext::full_table_name() {
  return getRuleContext<tsqlParser::Full_table_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Drop_statisticsContext::DOT() {
  return getToken(tsqlParser::DOT, 0);
}

tree::TerminalNode* tsqlParser::Drop_statisticsContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}


size_t tsqlParser::Drop_statisticsContext::getRuleIndex() const {
  return tsqlParser::RuleDrop_statistics;
}


std::any tsqlParser::Drop_statisticsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDrop_statistics(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Drop_statisticsContext* tsqlParser::drop_statistics() {
  Drop_statisticsContext *_localctx = _tracker.createInstance<Drop_statisticsContext>(_ctx, getState());
  enterRule(_localctx, 132, tsqlParser::RuleDrop_statistics);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1308);
    match(tsqlParser::DROP);
    setState(1309);
    match(tsqlParser::STATISTICS);
    setState(1313);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx)) {
    case 1: {
      setState(1310);
      full_table_name();
      setState(1311);
      match(tsqlParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(1315);
    antlrcpp::downCast<Drop_statisticsContext *>(_localctx)->name = r_id();
    setState(1317);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 155, _ctx)) {
    case 1: {
      setState(1316);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_tableContext ------------------------------------------------------------------

tsqlParser::Drop_tableContext::Drop_tableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Drop_tableContext::DROP() {
  return getToken(tsqlParser::DROP, 0);
}

tree::TerminalNode* tsqlParser::Drop_tableContext::TABLE() {
  return getToken(tsqlParser::TABLE, 0);
}

tsqlParser::Full_table_nameContext* tsqlParser::Drop_tableContext::full_table_name() {
  return getRuleContext<tsqlParser::Full_table_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Drop_tableContext::IF() {
  return getToken(tsqlParser::IF, 0);
}

tree::TerminalNode* tsqlParser::Drop_tableContext::EXISTS() {
  return getToken(tsqlParser::EXISTS, 0);
}

tree::TerminalNode* tsqlParser::Drop_tableContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}


size_t tsqlParser::Drop_tableContext::getRuleIndex() const {
  return tsqlParser::RuleDrop_table;
}


std::any tsqlParser::Drop_tableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDrop_table(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Drop_tableContext* tsqlParser::drop_table() {
  Drop_tableContext *_localctx = _tracker.createInstance<Drop_tableContext>(_ctx, getState());
  enterRule(_localctx, 134, tsqlParser::RuleDrop_table);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1319);
    match(tsqlParser::DROP);
    setState(1320);
    match(tsqlParser::TABLE);
    setState(1323);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::IF) {
      setState(1321);
      match(tsqlParser::IF);
      setState(1322);
      match(tsqlParser::EXISTS);
    }
    setState(1325);
    full_table_name();
    setState(1327);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx)) {
    case 1: {
      setState(1326);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_databaseContext ------------------------------------------------------------------

tsqlParser::Drop_databaseContext::Drop_databaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Drop_databaseContext::DROP() {
  return getToken(tsqlParser::DROP, 0);
}

tree::TerminalNode* tsqlParser::Drop_databaseContext::DATABASE() {
  return getToken(tsqlParser::DATABASE, 0);
}

tree::TerminalNode* tsqlParser::Drop_databaseContext::CURRENT() {
  return getToken(tsqlParser::CURRENT, 0);
}

tree::TerminalNode* tsqlParser::Drop_databaseContext::IF() {
  return getToken(tsqlParser::IF, 0);
}

tree::TerminalNode* tsqlParser::Drop_databaseContext::EXISTS() {
  return getToken(tsqlParser::EXISTS, 0);
}

tsqlParser::R_idContext* tsqlParser::Drop_databaseContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tree::TerminalNode* tsqlParser::Drop_databaseContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}


size_t tsqlParser::Drop_databaseContext::getRuleIndex() const {
  return tsqlParser::RuleDrop_database;
}


std::any tsqlParser::Drop_databaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDrop_database(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Drop_databaseContext* tsqlParser::drop_database() {
  Drop_databaseContext *_localctx = _tracker.createInstance<Drop_databaseContext>(_ctx, getState());
  enterRule(_localctx, 136, tsqlParser::RuleDrop_database);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1329);
    match(tsqlParser::DROP);
    setState(1330);
    match(tsqlParser::DATABASE);
    setState(1333);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::IF) {
      setState(1331);
      match(tsqlParser::IF);
      setState(1332);
      match(tsqlParser::EXISTS);
    }
    setState(1337);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::FILLFACTOR:
      case tsqlParser::FORCESEEK:
      case tsqlParser::NEXT:
      case tsqlParser::NUMERIC:
      case tsqlParser::VALUE:
      case tsqlParser::ABSOLUTE:
      case tsqlParser::APPLY:
      case tsqlParser::AUTO:
      case tsqlParser::AVG:
      case tsqlParser::BASE64:
      case tsqlParser::CALLER:
      case tsqlParser::CAST:
      case tsqlParser::CATCH:
      case tsqlParser::CHECKSUM_AGG:
      case tsqlParser::COMMITTED:
      case tsqlParser::CONCAT:
      case tsqlParser::CONTROL:
      case tsqlParser::COOKIE:
      case tsqlParser::COUNT:
      case tsqlParser::COUNT_BIG:
      case tsqlParser::DATE:
      case tsqlParser::DELAY:
      case tsqlParser::DELETED:
      case tsqlParser::DENSE_RANK:
      case tsqlParser::DISABLE:
      case tsqlParser::DYNAMIC:
      case tsqlParser::ENCRYPTION:
      case tsqlParser::EXIST:
      case tsqlParser::EXPAND:
      case tsqlParser::FAST:
      case tsqlParser::FAST_FORWARD:
      case tsqlParser::FIRST:
      case tsqlParser::FIRST_VALUE:
      case tsqlParser::FOLLOWING:
      case tsqlParser::FORCE:
      case tsqlParser::FORCED:
      case tsqlParser::FORWARD_ONLY:
      case tsqlParser::FULLSCAN:
      case tsqlParser::GLOBAL:
      case tsqlParser::GROUPING:
      case tsqlParser::GROUPING_ID:
      case tsqlParser::HASH:
      case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
      case tsqlParser::IMPERSONATE:
      case tsqlParser::INSENSITIVE:
      case tsqlParser::INSERTED:
      case tsqlParser::ISOLATION:
      case tsqlParser::IO:
      case tsqlParser::KEEP:
      case tsqlParser::KEEPFIXED:
      case tsqlParser::KEYSET:
      case tsqlParser::LAG:
      case tsqlParser::LAST:
      case tsqlParser::LAST_VALUE:
      case tsqlParser::LEAD:
      case tsqlParser::LEVEL:
      case tsqlParser::LOCAL:
      case tsqlParser::LOCK_ESCALATION:
      case tsqlParser::LOGIN:
      case tsqlParser::LOOP:
      case tsqlParser::MARK:
      case tsqlParser::MAX:
      case tsqlParser::MAXDOP:
      case tsqlParser::MAXRECURSION:
      case tsqlParser::MIN:
      case tsqlParser::MODIFY:
      case tsqlParser::NAME:
      case tsqlParser::NOCOUNT:
      case tsqlParser::NODES:
      case tsqlParser::NOEXPAND:
      case tsqlParser::NORECOMPUTE:
      case tsqlParser::NTILE:
      case tsqlParser::NUMBER:
      case tsqlParser::OFFSET:
      case tsqlParser::ONLINE:
      case tsqlParser::ONLY:
      case tsqlParser::OPTIMISTIC:
      case tsqlParser::OPTIMIZE:
      case tsqlParser::OUT:
      case tsqlParser::OUTPUT:
      case tsqlParser::OWNER:
      case tsqlParser::PARAMETERIZATION:
      case tsqlParser::PARTITION:
      case tsqlParser::PATH:
      case tsqlParser::PRECEDING:
      case tsqlParser::PRIOR:
      case tsqlParser::PRIVILEGES:
      case tsqlParser::QUERY:
      case tsqlParser::RANGE:
      case tsqlParser::RANK:
      case tsqlParser::READONLY:
      case tsqlParser::READ_ONLY:
      case tsqlParser::RECOMPILE:
      case tsqlParser::RELATIVE:
      case tsqlParser::REMOTE:
      case tsqlParser::REPEATABLE:
      case tsqlParser::ROBUST:
      case tsqlParser::ROOT:
      case tsqlParser::ROW:
      case tsqlParser::ROWGUID:
      case tsqlParser::ROWS:
      case tsqlParser::ROW_NUMBER:
      case tsqlParser::SAMPLE:
      case tsqlParser::SCHEMABINDING:
      case tsqlParser::SCROLL:
      case tsqlParser::SCROLL_LOCKS:
      case tsqlParser::SELF:
      case tsqlParser::SERIALIZABLE:
      case tsqlParser::SIMPLE:
      case tsqlParser::SIZE:
      case tsqlParser::SNAPSHOT:
      case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
      case tsqlParser::STATIC:
      case tsqlParser::STATS_STREAM:
      case tsqlParser::STDEV:
      case tsqlParser::STDEVP:
      case tsqlParser::SUM:
      case tsqlParser::TEXTIMAGE_ON:
      case tsqlParser::THROW:
      case tsqlParser::TIES:
      case tsqlParser::TIME:
      case tsqlParser::TRY:
      case tsqlParser::TYPE:
      case tsqlParser::TYPE_WARNING:
      case tsqlParser::UNBOUNDED:
      case tsqlParser::UNCOMMITTED:
      case tsqlParser::UNKNOWN:
      case tsqlParser::USING:
      case tsqlParser::VAR:
      case tsqlParser::VARP:
      case tsqlParser::VIEWS:
      case tsqlParser::VIEW_METADATA:
      case tsqlParser::WORK:
      case tsqlParser::XML:
      case tsqlParser::XMLNAMESPACES:
      case tsqlParser::ZONE:
      case tsqlParser::DOUBLE_QUOTE_ID:
      case tsqlParser::SQUARE_BRACKET_ID:
      case tsqlParser::ID: {
        setState(1335);
        antlrcpp::downCast<Drop_databaseContext *>(_localctx)->database = r_id();
        break;
      }

      case tsqlParser::CURRENT: {
        setState(1336);
        match(tsqlParser::CURRENT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1340);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx)) {
    case 1: {
      setState(1339);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_synonymContext ------------------------------------------------------------------

tsqlParser::Drop_synonymContext::Drop_synonymContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Drop_synonymContext::DROP() {
  return getToken(tsqlParser::DROP, 0);
}

tree::TerminalNode* tsqlParser::Drop_synonymContext::SYNONYM() {
  return getToken(tsqlParser::SYNONYM, 0);
}

tsqlParser::Simple_nameContext* tsqlParser::Drop_synonymContext::simple_name() {
  return getRuleContext<tsqlParser::Simple_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Drop_synonymContext::IF() {
  return getToken(tsqlParser::IF, 0);
}

tree::TerminalNode* tsqlParser::Drop_synonymContext::EXISTS() {
  return getToken(tsqlParser::EXISTS, 0);
}

tree::TerminalNode* tsqlParser::Drop_synonymContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}


size_t tsqlParser::Drop_synonymContext::getRuleIndex() const {
  return tsqlParser::RuleDrop_synonym;
}


std::any tsqlParser::Drop_synonymContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDrop_synonym(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Drop_synonymContext* tsqlParser::drop_synonym() {
  Drop_synonymContext *_localctx = _tracker.createInstance<Drop_synonymContext>(_ctx, getState());
  enterRule(_localctx, 138, tsqlParser::RuleDrop_synonym);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1342);
    match(tsqlParser::DROP);
    setState(1343);
    match(tsqlParser::SYNONYM);
    setState(1346);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::IF) {
      setState(1344);
      match(tsqlParser::IF);
      setState(1345);
      match(tsqlParser::EXISTS);
    }
    setState(1348);
    simple_name();
    setState(1350);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 162, _ctx)) {
    case 1: {
      setState(1349);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_viewContext ------------------------------------------------------------------

tsqlParser::Drop_viewContext::Drop_viewContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Drop_viewContext::DROP() {
  return getToken(tsqlParser::DROP, 0);
}

tree::TerminalNode* tsqlParser::Drop_viewContext::VIEW() {
  return getToken(tsqlParser::VIEW, 0);
}

std::vector<tsqlParser::Simple_nameContext *> tsqlParser::Drop_viewContext::simple_name() {
  return getRuleContexts<tsqlParser::Simple_nameContext>();
}

tsqlParser::Simple_nameContext* tsqlParser::Drop_viewContext::simple_name(size_t i) {
  return getRuleContext<tsqlParser::Simple_nameContext>(i);
}

tree::TerminalNode* tsqlParser::Drop_viewContext::IF() {
  return getToken(tsqlParser::IF, 0);
}

tree::TerminalNode* tsqlParser::Drop_viewContext::EXISTS() {
  return getToken(tsqlParser::EXISTS, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Drop_viewContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Drop_viewContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}

tree::TerminalNode* tsqlParser::Drop_viewContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}


size_t tsqlParser::Drop_viewContext::getRuleIndex() const {
  return tsqlParser::RuleDrop_view;
}


std::any tsqlParser::Drop_viewContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDrop_view(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Drop_viewContext* tsqlParser::drop_view() {
  Drop_viewContext *_localctx = _tracker.createInstance<Drop_viewContext>(_ctx, getState());
  enterRule(_localctx, 140, tsqlParser::RuleDrop_view);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1352);
    match(tsqlParser::DROP);
    setState(1353);
    match(tsqlParser::VIEW);
    setState(1356);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::IF) {
      setState(1354);
      match(tsqlParser::IF);
      setState(1355);
      match(tsqlParser::EXISTS);
    }
    setState(1358);
    simple_name();
    setState(1363);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == tsqlParser::COMMA) {
      setState(1359);
      match(tsqlParser::COMMA);
      setState(1360);
      simple_name();
      setState(1365);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1367);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 165, _ctx)) {
    case 1: {
      setState(1366);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_schemaContext ------------------------------------------------------------------

tsqlParser::Drop_schemaContext::Drop_schemaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Drop_schemaContext::DROP() {
  return getToken(tsqlParser::DROP, 0);
}

tree::TerminalNode* tsqlParser::Drop_schemaContext::SCHEMA() {
  return getToken(tsqlParser::SCHEMA, 0);
}

tsqlParser::Simple_nameContext* tsqlParser::Drop_schemaContext::simple_name() {
  return getRuleContext<tsqlParser::Simple_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Drop_schemaContext::IF() {
  return getToken(tsqlParser::IF, 0);
}

tree::TerminalNode* tsqlParser::Drop_schemaContext::EXISTS() {
  return getToken(tsqlParser::EXISTS, 0);
}

tree::TerminalNode* tsqlParser::Drop_schemaContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}


size_t tsqlParser::Drop_schemaContext::getRuleIndex() const {
  return tsqlParser::RuleDrop_schema;
}


std::any tsqlParser::Drop_schemaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDrop_schema(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Drop_schemaContext* tsqlParser::drop_schema() {
  Drop_schemaContext *_localctx = _tracker.createInstance<Drop_schemaContext>(_ctx, getState());
  enterRule(_localctx, 142, tsqlParser::RuleDrop_schema);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1369);
    match(tsqlParser::DROP);
    setState(1370);
    match(tsqlParser::SCHEMA);
    setState(1373);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::IF) {
      setState(1371);
      match(tsqlParser::IF);
      setState(1372);
      match(tsqlParser::EXISTS);
    }
    setState(1375);
    simple_name();
    setState(1377);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx)) {
    case 1: {
      setState(1376);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_functionContext ------------------------------------------------------------------

tsqlParser::Drop_functionContext::Drop_functionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Drop_functionContext::DROP() {
  return getToken(tsqlParser::DROP, 0);
}

tree::TerminalNode* tsqlParser::Drop_functionContext::FUNCTION() {
  return getToken(tsqlParser::FUNCTION, 0);
}

tsqlParser::Func_proc_nameContext* tsqlParser::Drop_functionContext::func_proc_name() {
  return getRuleContext<tsqlParser::Func_proc_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Drop_functionContext::IF() {
  return getToken(tsqlParser::IF, 0);
}

tree::TerminalNode* tsqlParser::Drop_functionContext::EXISTS() {
  return getToken(tsqlParser::EXISTS, 0);
}

tree::TerminalNode* tsqlParser::Drop_functionContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}


size_t tsqlParser::Drop_functionContext::getRuleIndex() const {
  return tsqlParser::RuleDrop_function;
}


std::any tsqlParser::Drop_functionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDrop_function(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Drop_functionContext* tsqlParser::drop_function() {
  Drop_functionContext *_localctx = _tracker.createInstance<Drop_functionContext>(_ctx, getState());
  enterRule(_localctx, 144, tsqlParser::RuleDrop_function);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1379);
    match(tsqlParser::DROP);
    setState(1380);
    match(tsqlParser::FUNCTION);
    setState(1383);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::IF) {
      setState(1381);
      match(tsqlParser::IF);
      setState(1382);
      match(tsqlParser::EXISTS);
    }
    setState(1385);
    func_proc_name();
    setState(1387);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx)) {
    case 1: {
      setState(1386);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_typeContext ------------------------------------------------------------------

tsqlParser::Create_typeContext::Create_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Create_typeContext::CREATE() {
  return getToken(tsqlParser::CREATE, 0);
}

tree::TerminalNode* tsqlParser::Create_typeContext::TYPE() {
  return getToken(tsqlParser::TYPE, 0);
}

tree::TerminalNode* tsqlParser::Create_typeContext::FROM() {
  return getToken(tsqlParser::FROM, 0);
}

tsqlParser::Data_typeContext* tsqlParser::Create_typeContext::data_type() {
  return getRuleContext<tsqlParser::Data_typeContext>(0);
}

tsqlParser::Default_valueContext* tsqlParser::Create_typeContext::default_value() {
  return getRuleContext<tsqlParser::Default_valueContext>(0);
}

tsqlParser::Simple_nameContext* tsqlParser::Create_typeContext::simple_name() {
  return getRuleContext<tsqlParser::Simple_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Create_typeContext::AS() {
  return getToken(tsqlParser::AS, 0);
}

tree::TerminalNode* tsqlParser::Create_typeContext::TABLE() {
  return getToken(tsqlParser::TABLE, 0);
}

tree::TerminalNode* tsqlParser::Create_typeContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tsqlParser::Column_def_table_constraintsContext* tsqlParser::Create_typeContext::column_def_table_constraints() {
  return getRuleContext<tsqlParser::Column_def_table_constraintsContext>(0);
}

tree::TerminalNode* tsqlParser::Create_typeContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Create_typeContext::COMMA() {
  return getToken(tsqlParser::COMMA, 0);
}


size_t tsqlParser::Create_typeContext::getRuleIndex() const {
  return tsqlParser::RuleCreate_type;
}


std::any tsqlParser::Create_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitCreate_type(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Create_typeContext* tsqlParser::create_type() {
  Create_typeContext *_localctx = _tracker.createInstance<Create_typeContext>(_ctx, getState());
  enterRule(_localctx, 146, tsqlParser::RuleCreate_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1408);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1389);
      match(tsqlParser::CREATE);
      setState(1390);
      match(tsqlParser::TYPE);
      setState(1391);
      antlrcpp::downCast<Create_typeContext *>(_localctx)->name = simple_name();
      setState(1392);
      match(tsqlParser::FROM);
      setState(1393);
      data_type();
      setState(1394);
      default_value();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1396);
      match(tsqlParser::CREATE);
      setState(1397);
      match(tsqlParser::TYPE);
      setState(1398);
      antlrcpp::downCast<Create_typeContext *>(_localctx)->name = simple_name();
      setState(1399);
      match(tsqlParser::AS);
      setState(1400);
      match(tsqlParser::TABLE);
      setState(1401);
      match(tsqlParser::LR_BRACKET);
      setState(1402);
      column_def_table_constraints();
      setState(1404);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::COMMA) {
        setState(1403);
        match(tsqlParser::COMMA);
      }
      setState(1406);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_typeContext ------------------------------------------------------------------

tsqlParser::Drop_typeContext::Drop_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Drop_typeContext::DROP() {
  return getToken(tsqlParser::DROP, 0);
}

tree::TerminalNode* tsqlParser::Drop_typeContext::TYPE() {
  return getToken(tsqlParser::TYPE, 0);
}

tsqlParser::Simple_nameContext* tsqlParser::Drop_typeContext::simple_name() {
  return getRuleContext<tsqlParser::Simple_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Drop_typeContext::IF() {
  return getToken(tsqlParser::IF, 0);
}

tree::TerminalNode* tsqlParser::Drop_typeContext::EXISTS() {
  return getToken(tsqlParser::EXISTS, 0);
}


size_t tsqlParser::Drop_typeContext::getRuleIndex() const {
  return tsqlParser::RuleDrop_type;
}


std::any tsqlParser::Drop_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDrop_type(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Drop_typeContext* tsqlParser::drop_type() {
  Drop_typeContext *_localctx = _tracker.createInstance<Drop_typeContext>(_ctx, getState());
  enterRule(_localctx, 148, tsqlParser::RuleDrop_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1410);
    match(tsqlParser::DROP);
    setState(1411);
    match(tsqlParser::TYPE);
    setState(1414);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::IF) {
      setState(1412);
      match(tsqlParser::IF);
      setState(1413);
      match(tsqlParser::EXISTS);
    }
    setState(1416);
    antlrcpp::downCast<Drop_typeContext *>(_localctx)->name = simple_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rowset_function_limitedContext ------------------------------------------------------------------

tsqlParser::Rowset_function_limitedContext::Rowset_function_limitedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::OpenqueryContext* tsqlParser::Rowset_function_limitedContext::openquery() {
  return getRuleContext<tsqlParser::OpenqueryContext>(0);
}

tsqlParser::OpendatasourceContext* tsqlParser::Rowset_function_limitedContext::opendatasource() {
  return getRuleContext<tsqlParser::OpendatasourceContext>(0);
}


size_t tsqlParser::Rowset_function_limitedContext::getRuleIndex() const {
  return tsqlParser::RuleRowset_function_limited;
}


std::any tsqlParser::Rowset_function_limitedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitRowset_function_limited(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Rowset_function_limitedContext* tsqlParser::rowset_function_limited() {
  Rowset_function_limitedContext *_localctx = _tracker.createInstance<Rowset_function_limitedContext>(_ctx, getState());
  enterRule(_localctx, 150, tsqlParser::RuleRowset_function_limited);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1420);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::OPENQUERY: {
        enterOuterAlt(_localctx, 1);
        setState(1418);
        openquery();
        break;
      }

      case tsqlParser::OPENDATASOURCE: {
        enterOuterAlt(_localctx, 2);
        setState(1419);
        opendatasource();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OpenqueryContext ------------------------------------------------------------------

tsqlParser::OpenqueryContext::OpenqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::OpenqueryContext::OPENQUERY() {
  return getToken(tsqlParser::OPENQUERY, 0);
}

tree::TerminalNode* tsqlParser::OpenqueryContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::OpenqueryContext::COMMA() {
  return getToken(tsqlParser::COMMA, 0);
}

tree::TerminalNode* tsqlParser::OpenqueryContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tsqlParser::R_idContext* tsqlParser::OpenqueryContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tree::TerminalNode* tsqlParser::OpenqueryContext::STRING() {
  return getToken(tsqlParser::STRING, 0);
}


size_t tsqlParser::OpenqueryContext::getRuleIndex() const {
  return tsqlParser::RuleOpenquery;
}


std::any tsqlParser::OpenqueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitOpenquery(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::OpenqueryContext* tsqlParser::openquery() {
  OpenqueryContext *_localctx = _tracker.createInstance<OpenqueryContext>(_ctx, getState());
  enterRule(_localctx, 152, tsqlParser::RuleOpenquery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1422);
    match(tsqlParser::OPENQUERY);
    setState(1423);
    match(tsqlParser::LR_BRACKET);
    setState(1424);
    antlrcpp::downCast<OpenqueryContext *>(_localctx)->linked_server = r_id();
    setState(1425);
    match(tsqlParser::COMMA);
    setState(1426);
    antlrcpp::downCast<OpenqueryContext *>(_localctx)->query = match(tsqlParser::STRING);
    setState(1427);
    match(tsqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OpendatasourceContext ------------------------------------------------------------------

tsqlParser::OpendatasourceContext::OpendatasourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::OpendatasourceContext::OPENDATASOURCE() {
  return getToken(tsqlParser::OPENDATASOURCE, 0);
}

tree::TerminalNode* tsqlParser::OpendatasourceContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::OpendatasourceContext::COMMA() {
  return getToken(tsqlParser::COMMA, 0);
}

tree::TerminalNode* tsqlParser::OpendatasourceContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::OpendatasourceContext::DOT() {
  return getTokens(tsqlParser::DOT);
}

tree::TerminalNode* tsqlParser::OpendatasourceContext::DOT(size_t i) {
  return getToken(tsqlParser::DOT, i);
}

std::vector<tree::TerminalNode *> tsqlParser::OpendatasourceContext::STRING() {
  return getTokens(tsqlParser::STRING);
}

tree::TerminalNode* tsqlParser::OpendatasourceContext::STRING(size_t i) {
  return getToken(tsqlParser::STRING, i);
}

std::vector<tsqlParser::R_idContext *> tsqlParser::OpendatasourceContext::r_id() {
  return getRuleContexts<tsqlParser::R_idContext>();
}

tsqlParser::R_idContext* tsqlParser::OpendatasourceContext::r_id(size_t i) {
  return getRuleContext<tsqlParser::R_idContext>(i);
}


size_t tsqlParser::OpendatasourceContext::getRuleIndex() const {
  return tsqlParser::RuleOpendatasource;
}


std::any tsqlParser::OpendatasourceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitOpendatasource(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::OpendatasourceContext* tsqlParser::opendatasource() {
  OpendatasourceContext *_localctx = _tracker.createInstance<OpendatasourceContext>(_ctx, getState());
  enterRule(_localctx, 154, tsqlParser::RuleOpendatasource);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1429);
    match(tsqlParser::OPENDATASOURCE);
    setState(1430);
    match(tsqlParser::LR_BRACKET);
    setState(1431);
    antlrcpp::downCast<OpendatasourceContext *>(_localctx)->provider = match(tsqlParser::STRING);
    setState(1432);
    match(tsqlParser::COMMA);
    setState(1433);
    antlrcpp::downCast<OpendatasourceContext *>(_localctx)->init = match(tsqlParser::STRING);
    setState(1434);
    match(tsqlParser::RR_BRACKET);
    setState(1435);
    match(tsqlParser::DOT);
    setState(1437);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la - 71) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 71)) & 17729624997893) != 0 || (((_la - 196) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 196)) & 9969332866253825) != 0 || (((_la - 261) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 261)) & -148821964101331) != 0 || (((_la - 328) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 328)) & -47521180986790319) != 0 || (((_la - 393) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 393)) & 171699173404606099) != 0) {
      setState(1436);
      antlrcpp::downCast<OpendatasourceContext *>(_localctx)->database = r_id();
    }
    setState(1439);
    match(tsqlParser::DOT);
    setState(1441);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la - 71) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 71)) & 17729624997893) != 0 || (((_la - 196) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 196)) & 9969332866253825) != 0 || (((_la - 261) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 261)) & -148821964101331) != 0 || (((_la - 328) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 328)) & -47521180986790319) != 0 || (((_la - 393) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 393)) & 171699173404606099) != 0) {
      setState(1440);
      antlrcpp::downCast<OpendatasourceContext *>(_localctx)->scheme = r_id();
    }
    setState(1443);
    match(tsqlParser::DOT);

    setState(1444);
    antlrcpp::downCast<OpendatasourceContext *>(_localctx)->table = r_id();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Declare_statementContext ------------------------------------------------------------------

tsqlParser::Declare_statementContext::Declare_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Declare_statementContext::DECLARE() {
  return getToken(tsqlParser::DECLARE, 0);
}

tree::TerminalNode* tsqlParser::Declare_statementContext::LOCAL_ID() {
  return getToken(tsqlParser::LOCAL_ID, 0);
}

tsqlParser::Table_type_definitionContext* tsqlParser::Declare_statementContext::table_type_definition() {
  return getRuleContext<tsqlParser::Table_type_definitionContext>(0);
}

tsqlParser::Table_sourcesContext* tsqlParser::Declare_statementContext::table_sources() {
  return getRuleContext<tsqlParser::Table_sourcesContext>(0);
}

tree::TerminalNode* tsqlParser::Declare_statementContext::AS() {
  return getToken(tsqlParser::AS, 0);
}

tree::TerminalNode* tsqlParser::Declare_statementContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}

std::vector<tsqlParser::Declare_localContext *> tsqlParser::Declare_statementContext::declare_local() {
  return getRuleContexts<tsqlParser::Declare_localContext>();
}

tsqlParser::Declare_localContext* tsqlParser::Declare_statementContext::declare_local(size_t i) {
  return getRuleContext<tsqlParser::Declare_localContext>(i);
}

std::vector<tree::TerminalNode *> tsqlParser::Declare_statementContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Declare_statementContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::Declare_statementContext::getRuleIndex() const {
  return tsqlParser::RuleDeclare_statement;
}


std::any tsqlParser::Declare_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDeclare_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Declare_statementContext* tsqlParser::declare_statement() {
  Declare_statementContext *_localctx = _tracker.createInstance<Declare_statementContext>(_ctx, getState());
  enterRule(_localctx, 156, tsqlParser::RuleDeclare_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1470);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 181, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1446);
      match(tsqlParser::DECLARE);
      setState(1447);
      match(tsqlParser::LOCAL_ID);
      setState(1449);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::AS) {
        setState(1448);
        match(tsqlParser::AS);
      }
      setState(1453);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case tsqlParser::TABLE: {
          setState(1451);
          table_type_definition();
          break;
        }

        case tsqlParser::CHANGETABLE:
        case tsqlParser::COALESCE:
        case tsqlParser::CONVERT:
        case tsqlParser::CURRENT_TIMESTAMP:
        case tsqlParser::CURRENT_USER:
        case tsqlParser::EXP:
        case tsqlParser::FILLFACTOR:
        case tsqlParser::FORCESEEK:
        case tsqlParser::IDENTITY:
        case tsqlParser::IIF:
        case tsqlParser::LEFT:
        case tsqlParser::LOG:
        case tsqlParser::LOG10:
        case tsqlParser::NEXT:
        case tsqlParser::NULLIF:
        case tsqlParser::NUMERIC:
        case tsqlParser::OPENROWSET:
        case tsqlParser::RIGHT:
        case tsqlParser::SELECT:
        case tsqlParser::SESSION_USER:
        case tsqlParser::SIGN:
        case tsqlParser::SYSTEM_USER:
        case tsqlParser::TRY_CAST:
        case tsqlParser::TRY_CONVERT:
        case tsqlParser::TRY_PARSE:
        case tsqlParser::VALUE:
        case tsqlParser::WITH:
        case tsqlParser::ABSOLUTE:
        case tsqlParser::APPLY:
        case tsqlParser::AUTO:
        case tsqlParser::AVG:
        case tsqlParser::BASE64:
        case tsqlParser::BINARY_CHECKSUM:
        case tsqlParser::CALLER:
        case tsqlParser::CAST:
        case tsqlParser::CATCH:
        case tsqlParser::CEILING:
        case tsqlParser::CHECKSUM:
        case tsqlParser::CHECKSUM_AGG:
        case tsqlParser::COMMITTED:
        case tsqlParser::CONCAT:
        case tsqlParser::CONTROL:
        case tsqlParser::COOKIE:
        case tsqlParser::COS:
        case tsqlParser::COUNT:
        case tsqlParser::COUNT_BIG:
        case tsqlParser::DATE:
        case tsqlParser::DATEADD:
        case tsqlParser::DATEDIFF:
        case tsqlParser::DATENAME:
        case tsqlParser::DATEPART:
        case tsqlParser::DATETIMEOFFSETFROMPARTS:
        case tsqlParser::DELAY:
        case tsqlParser::DELETED:
        case tsqlParser::DENSE_RANK:
        case tsqlParser::DISABLE:
        case tsqlParser::DYNAMIC:
        case tsqlParser::ENCRYPTION:
        case tsqlParser::EXIST:
        case tsqlParser::EXPAND:
        case tsqlParser::FAST:
        case tsqlParser::FAST_FORWARD:
        case tsqlParser::FIRST:
        case tsqlParser::FIRST_VALUE:
        case tsqlParser::FLOOR:
        case tsqlParser::FOLLOWING:
        case tsqlParser::FORCE:
        case tsqlParser::FORCED:
        case tsqlParser::FORWARD_ONLY:
        case tsqlParser::FULLSCAN:
        case tsqlParser::GLOBAL:
        case tsqlParser::GROUPING:
        case tsqlParser::GROUPING_ID:
        case tsqlParser::HASH:
        case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case tsqlParser::IMPERSONATE:
        case tsqlParser::INSENSITIVE:
        case tsqlParser::INSERTED:
        case tsqlParser::ISOLATION:
        case tsqlParser::IO:
        case tsqlParser::KEEP:
        case tsqlParser::KEEPFIXED:
        case tsqlParser::KEYSET:
        case tsqlParser::LAG:
        case tsqlParser::LAST:
        case tsqlParser::LAST_VALUE:
        case tsqlParser::LEAD:
        case tsqlParser::LEVEL:
        case tsqlParser::LOCAL:
        case tsqlParser::LOCK_ESCALATION:
        case tsqlParser::LOGIN:
        case tsqlParser::LOOP:
        case tsqlParser::MARK:
        case tsqlParser::MAX:
        case tsqlParser::MAXDOP:
        case tsqlParser::MAXRECURSION:
        case tsqlParser::MIN:
        case tsqlParser::MIN_ACTIVE_ROWVERSION:
        case tsqlParser::MODIFY:
        case tsqlParser::NAME:
        case tsqlParser::NOCOUNT:
        case tsqlParser::NODES:
        case tsqlParser::NOEXPAND:
        case tsqlParser::NORECOMPUTE:
        case tsqlParser::NTILE:
        case tsqlParser::NUMBER:
        case tsqlParser::OFFSET:
        case tsqlParser::ONLINE:
        case tsqlParser::ONLY:
        case tsqlParser::OPTIMISTIC:
        case tsqlParser::OPTIMIZE:
        case tsqlParser::OUT:
        case tsqlParser::OUTPUT:
        case tsqlParser::OWNER:
        case tsqlParser::PARAMETERIZATION:
        case tsqlParser::PARSE:
        case tsqlParser::PARTITION:
        case tsqlParser::PATH:
        case tsqlParser::POWER:
        case tsqlParser::PRECEDING:
        case tsqlParser::PRIOR:
        case tsqlParser::PRIVILEGES:
        case tsqlParser::QUERY:
        case tsqlParser::RANGE:
        case tsqlParser::RANK:
        case tsqlParser::READONLY:
        case tsqlParser::READ_ONLY:
        case tsqlParser::RECOMPILE:
        case tsqlParser::RELATIVE:
        case tsqlParser::REMOTE:
        case tsqlParser::REPEATABLE:
        case tsqlParser::ROBUST:
        case tsqlParser::ROOT:
        case tsqlParser::ROUND:
        case tsqlParser::ROW:
        case tsqlParser::ROWGUID:
        case tsqlParser::ROWS:
        case tsqlParser::ROW_NUMBER:
        case tsqlParser::SAMPLE:
        case tsqlParser::SCHEMABINDING:
        case tsqlParser::SCROLL:
        case tsqlParser::SCROLL_LOCKS:
        case tsqlParser::SELF:
        case tsqlParser::SERIALIZABLE:
        case tsqlParser::SIMPLE:
        case tsqlParser::SIN:
        case tsqlParser::SIZE:
        case tsqlParser::SNAPSHOT:
        case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
        case tsqlParser::STATIC:
        case tsqlParser::STATS_STREAM:
        case tsqlParser::STDEV:
        case tsqlParser::STDEVP:
        case tsqlParser::STRING_SPLIT:
        case tsqlParser::SUM:
        case tsqlParser::SQRT:
        case tsqlParser::SQUARE:
        case tsqlParser::TAN:
        case tsqlParser::TEXTIMAGE_ON:
        case tsqlParser::THROW:
        case tsqlParser::TIES:
        case tsqlParser::TIME:
        case tsqlParser::TRY:
        case tsqlParser::TYPE:
        case tsqlParser::TYPE_WARNING:
        case tsqlParser::UNBOUNDED:
        case tsqlParser::UNCOMMITTED:
        case tsqlParser::UNKNOWN:
        case tsqlParser::USING:
        case tsqlParser::VAR:
        case tsqlParser::VARP:
        case tsqlParser::VIEWS:
        case tsqlParser::VIEW_METADATA:
        case tsqlParser::WORK:
        case tsqlParser::XML:
        case tsqlParser::XMLNAMESPACES:
        case tsqlParser::ZONE:
        case tsqlParser::DOUBLE_QUOTE_ID:
        case tsqlParser::SQUARE_BRACKET_ID:
        case tsqlParser::LOCAL_ID:
        case tsqlParser::ID:
        case tsqlParser::LR_BRACKET: {
          setState(1452);
          table_sources();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1456);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx)) {
      case 1: {
        setState(1455);
        match(tsqlParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1458);
      match(tsqlParser::DECLARE);
      setState(1459);
      declare_local();
      setState(1464);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == tsqlParser::COMMA) {
        setState(1460);
        match(tsqlParser::COMMA);
        setState(1461);
        declare_local();
        setState(1466);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1468);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx)) {
      case 1: {
        setState(1467);
        match(tsqlParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cursor_statementContext ------------------------------------------------------------------

tsqlParser::Cursor_statementContext::Cursor_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Cursor_statementContext::CLOSE() {
  return getToken(tsqlParser::CLOSE, 0);
}

tsqlParser::Cursor_nameContext* tsqlParser::Cursor_statementContext::cursor_name() {
  return getRuleContext<tsqlParser::Cursor_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Cursor_statementContext::GLOBAL() {
  return getToken(tsqlParser::GLOBAL, 0);
}

tree::TerminalNode* tsqlParser::Cursor_statementContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}

tree::TerminalNode* tsqlParser::Cursor_statementContext::DEALLOCATE() {
  return getToken(tsqlParser::DEALLOCATE, 0);
}

tsqlParser::Declare_cursorContext* tsqlParser::Cursor_statementContext::declare_cursor() {
  return getRuleContext<tsqlParser::Declare_cursorContext>(0);
}

tsqlParser::Fetch_cursorContext* tsqlParser::Cursor_statementContext::fetch_cursor() {
  return getRuleContext<tsqlParser::Fetch_cursorContext>(0);
}

tree::TerminalNode* tsqlParser::Cursor_statementContext::OPEN() {
  return getToken(tsqlParser::OPEN, 0);
}


size_t tsqlParser::Cursor_statementContext::getRuleIndex() const {
  return tsqlParser::RuleCursor_statement;
}


std::any tsqlParser::Cursor_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitCursor_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Cursor_statementContext* tsqlParser::cursor_statement() {
  Cursor_statementContext *_localctx = _tracker.createInstance<Cursor_statementContext>(_ctx, getState());
  enterRule(_localctx, 158, tsqlParser::RuleCursor_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1498);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::CLOSE: {
        enterOuterAlt(_localctx, 1);
        setState(1472);
        match(tsqlParser::CLOSE);
        setState(1474);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 182, _ctx)) {
        case 1: {
          setState(1473);
          match(tsqlParser::GLOBAL);
          break;
        }

        default:
          break;
        }
        setState(1476);
        cursor_name();
        setState(1478);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx)) {
        case 1: {
          setState(1477);
          match(tsqlParser::SEMI);
          break;
        }

        default:
          break;
        }
        break;
      }

      case tsqlParser::DEALLOCATE: {
        enterOuterAlt(_localctx, 2);
        setState(1480);
        match(tsqlParser::DEALLOCATE);
        setState(1482);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx)) {
        case 1: {
          setState(1481);
          match(tsqlParser::GLOBAL);
          break;
        }

        default:
          break;
        }
        setState(1484);
        cursor_name();
        setState(1486);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx)) {
        case 1: {
          setState(1485);
          match(tsqlParser::SEMI);
          break;
        }

        default:
          break;
        }
        break;
      }

      case tsqlParser::DECLARE: {
        enterOuterAlt(_localctx, 3);
        setState(1488);
        declare_cursor();
        break;
      }

      case tsqlParser::FETCH: {
        enterOuterAlt(_localctx, 4);
        setState(1489);
        fetch_cursor();
        break;
      }

      case tsqlParser::OPEN: {
        enterOuterAlt(_localctx, 5);
        setState(1490);
        match(tsqlParser::OPEN);
        setState(1492);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx)) {
        case 1: {
          setState(1491);
          match(tsqlParser::GLOBAL);
          break;
        }

        default:
          break;
        }
        setState(1494);
        cursor_name();
        setState(1496);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 187, _ctx)) {
        case 1: {
          setState(1495);
          match(tsqlParser::SEMI);
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Execute_statementContext ------------------------------------------------------------------

tsqlParser::Execute_statementContext::Execute_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Execute_statementContext::EXECUTE() {
  return getToken(tsqlParser::EXECUTE, 0);
}

tsqlParser::Func_proc_nameContext* tsqlParser::Execute_statementContext::func_proc_name() {
  return getRuleContext<tsqlParser::Func_proc_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Execute_statementContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

std::vector<tsqlParser::Execute_statement_argContext *> tsqlParser::Execute_statementContext::execute_statement_arg() {
  return getRuleContexts<tsqlParser::Execute_statement_argContext>();
}

tsqlParser::Execute_statement_argContext* tsqlParser::Execute_statementContext::execute_statement_arg(size_t i) {
  return getRuleContext<tsqlParser::Execute_statement_argContext>(i);
}

tree::TerminalNode* tsqlParser::Execute_statementContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}

tree::TerminalNode* tsqlParser::Execute_statementContext::LOCAL_ID() {
  return getToken(tsqlParser::LOCAL_ID, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Execute_statementContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Execute_statementContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}

tree::TerminalNode* tsqlParser::Execute_statementContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

std::vector<tsqlParser::Execute_var_stringContext *> tsqlParser::Execute_statementContext::execute_var_string() {
  return getRuleContexts<tsqlParser::Execute_var_stringContext>();
}

tsqlParser::Execute_var_stringContext* tsqlParser::Execute_statementContext::execute_var_string(size_t i) {
  return getRuleContext<tsqlParser::Execute_var_stringContext>(i);
}

tree::TerminalNode* tsqlParser::Execute_statementContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Execute_statementContext::PLUS() {
  return getTokens(tsqlParser::PLUS);
}

tree::TerminalNode* tsqlParser::Execute_statementContext::PLUS(size_t i) {
  return getToken(tsqlParser::PLUS, i);
}

tree::TerminalNode* tsqlParser::Execute_statementContext::STRING() {
  return getToken(tsqlParser::STRING, 0);
}

tree::TerminalNode* tsqlParser::Execute_statementContext::LOGIN() {
  return getToken(tsqlParser::LOGIN, 0);
}

tree::TerminalNode* tsqlParser::Execute_statementContext::USER() {
  return getToken(tsqlParser::USER, 0);
}

tree::TerminalNode* tsqlParser::Execute_statementContext::AS() {
  return getToken(tsqlParser::AS, 0);
}


size_t tsqlParser::Execute_statementContext::getRuleIndex() const {
  return tsqlParser::RuleExecute_statement;
}


std::any tsqlParser::Execute_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitExecute_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Execute_statementContext* tsqlParser::execute_statement() {
  Execute_statementContext *_localctx = _tracker.createInstance<Execute_statementContext>(_ctx, getState());
  enterRule(_localctx, 160, tsqlParser::RuleExecute_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1541);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1500);
      match(tsqlParser::EXECUTE);
      setState(1503);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::LOCAL_ID) {
        setState(1501);
        antlrcpp::downCast<Execute_statementContext *>(_localctx)->return_status = match(tsqlParser::LOCAL_ID);
        setState(1502);
        match(tsqlParser::EQUAL);
      }
      setState(1505);
      func_proc_name();
      setState(1514);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 191, _ctx)) {
      case 1: {
        setState(1506);
        execute_statement_arg();
        setState(1511);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == tsqlParser::COMMA) {
          setState(1507);
          match(tsqlParser::COMMA);
          setState(1508);
          execute_statement_arg();
          setState(1513);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      default:
        break;
      }
      setState(1517);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx)) {
      case 1: {
        setState(1516);
        match(tsqlParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1519);
      match(tsqlParser::EXECUTE);
      setState(1520);
      match(tsqlParser::LR_BRACKET);
      setState(1521);
      execute_var_string();
      setState(1526);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == tsqlParser::PLUS) {
        setState(1522);
        match(tsqlParser::PLUS);
        setState(1523);
        execute_var_string();
        setState(1528);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1529);
      match(tsqlParser::RR_BRACKET);
      setState(1536);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 195, _ctx)) {
      case 1: {
        setState(1531);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == tsqlParser::AS) {
          setState(1530);
          match(tsqlParser::AS);
        }
        setState(1533);
        _la = _input->LA(1);
        if (!(_la == tsqlParser::USER || _la == tsqlParser::LOGIN)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1534);
        match(tsqlParser::EQUAL);
        setState(1535);
        match(tsqlParser::STRING);
        break;
      }

      default:
        break;
      }
      setState(1539);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 196, _ctx)) {
      case 1: {
        setState(1538);
        match(tsqlParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Execute_statement_argContext ------------------------------------------------------------------

tsqlParser::Execute_statement_argContext::Execute_statement_argContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Execute_statement_argContext::DEFAULT() {
  return getToken(tsqlParser::DEFAULT, 0);
}

tree::TerminalNode* tsqlParser::Execute_statement_argContext::NULL_() {
  return getToken(tsqlParser::NULL_, 0);
}

tree::TerminalNode* tsqlParser::Execute_statement_argContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

tree::TerminalNode* tsqlParser::Execute_statement_argContext::LOCAL_ID() {
  return getToken(tsqlParser::LOCAL_ID, 0);
}

tsqlParser::Constant_LOCAL_IDContext* tsqlParser::Execute_statement_argContext::constant_LOCAL_ID() {
  return getRuleContext<tsqlParser::Constant_LOCAL_IDContext>(0);
}

tsqlParser::R_idContext* tsqlParser::Execute_statement_argContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tree::TerminalNode* tsqlParser::Execute_statement_argContext::OUTPUT() {
  return getToken(tsqlParser::OUTPUT, 0);
}

tree::TerminalNode* tsqlParser::Execute_statement_argContext::OUT() {
  return getToken(tsqlParser::OUT, 0);
}


size_t tsqlParser::Execute_statement_argContext::getRuleIndex() const {
  return tsqlParser::RuleExecute_statement_arg;
}


std::any tsqlParser::Execute_statement_argContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitExecute_statement_arg(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Execute_statement_argContext* tsqlParser::execute_statement_arg() {
  Execute_statement_argContext *_localctx = _tracker.createInstance<Execute_statement_argContext>(_ctx, getState());
  enterRule(_localctx, 162, tsqlParser::RuleExecute_statement_arg);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1545);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 198, _ctx)) {
    case 1: {
      setState(1543);
      antlrcpp::downCast<Execute_statement_argContext *>(_localctx)->parameter = match(tsqlParser::LOCAL_ID);
      setState(1544);
      match(tsqlParser::EQUAL);
      break;
    }

    default:
      break;
    }
    setState(1556);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::FILLFACTOR:
      case tsqlParser::FORCESEEK:
      case tsqlParser::NEXT:
      case tsqlParser::NUMERIC:
      case tsqlParser::VALUE:
      case tsqlParser::ABSOLUTE:
      case tsqlParser::APPLY:
      case tsqlParser::AUTO:
      case tsqlParser::AVG:
      case tsqlParser::BASE64:
      case tsqlParser::CALLER:
      case tsqlParser::CAST:
      case tsqlParser::CATCH:
      case tsqlParser::CHECKSUM_AGG:
      case tsqlParser::COMMITTED:
      case tsqlParser::CONCAT:
      case tsqlParser::CONTROL:
      case tsqlParser::COOKIE:
      case tsqlParser::COUNT:
      case tsqlParser::COUNT_BIG:
      case tsqlParser::DATE:
      case tsqlParser::DELAY:
      case tsqlParser::DELETED:
      case tsqlParser::DENSE_RANK:
      case tsqlParser::DISABLE:
      case tsqlParser::DYNAMIC:
      case tsqlParser::ENCRYPTION:
      case tsqlParser::EXIST:
      case tsqlParser::EXPAND:
      case tsqlParser::FAST:
      case tsqlParser::FAST_FORWARD:
      case tsqlParser::FIRST:
      case tsqlParser::FIRST_VALUE:
      case tsqlParser::FOLLOWING:
      case tsqlParser::FORCE:
      case tsqlParser::FORCED:
      case tsqlParser::FORWARD_ONLY:
      case tsqlParser::FULLSCAN:
      case tsqlParser::GLOBAL:
      case tsqlParser::GROUPING:
      case tsqlParser::GROUPING_ID:
      case tsqlParser::HASH:
      case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
      case tsqlParser::IMPERSONATE:
      case tsqlParser::INSENSITIVE:
      case tsqlParser::INSERTED:
      case tsqlParser::ISOLATION:
      case tsqlParser::IO:
      case tsqlParser::KEEP:
      case tsqlParser::KEEPFIXED:
      case tsqlParser::KEYSET:
      case tsqlParser::LAG:
      case tsqlParser::LAST:
      case tsqlParser::LAST_VALUE:
      case tsqlParser::LEAD:
      case tsqlParser::LEVEL:
      case tsqlParser::LOCAL:
      case tsqlParser::LOCK_ESCALATION:
      case tsqlParser::LOGIN:
      case tsqlParser::LOOP:
      case tsqlParser::MARK:
      case tsqlParser::MAX:
      case tsqlParser::MAXDOP:
      case tsqlParser::MAXRECURSION:
      case tsqlParser::MIN:
      case tsqlParser::MODIFY:
      case tsqlParser::NAME:
      case tsqlParser::NOCOUNT:
      case tsqlParser::NODES:
      case tsqlParser::NOEXPAND:
      case tsqlParser::NORECOMPUTE:
      case tsqlParser::NTILE:
      case tsqlParser::NUMBER:
      case tsqlParser::OFFSET:
      case tsqlParser::ONLINE:
      case tsqlParser::ONLY:
      case tsqlParser::OPTIMISTIC:
      case tsqlParser::OPTIMIZE:
      case tsqlParser::OUT:
      case tsqlParser::OUTPUT:
      case tsqlParser::OWNER:
      case tsqlParser::PARAMETERIZATION:
      case tsqlParser::PARTITION:
      case tsqlParser::PATH:
      case tsqlParser::PRECEDING:
      case tsqlParser::PRIOR:
      case tsqlParser::PRIVILEGES:
      case tsqlParser::QUERY:
      case tsqlParser::RANGE:
      case tsqlParser::RANK:
      case tsqlParser::READONLY:
      case tsqlParser::READ_ONLY:
      case tsqlParser::RECOMPILE:
      case tsqlParser::RELATIVE:
      case tsqlParser::REMOTE:
      case tsqlParser::REPEATABLE:
      case tsqlParser::ROBUST:
      case tsqlParser::ROOT:
      case tsqlParser::ROW:
      case tsqlParser::ROWGUID:
      case tsqlParser::ROWS:
      case tsqlParser::ROW_NUMBER:
      case tsqlParser::SAMPLE:
      case tsqlParser::SCHEMABINDING:
      case tsqlParser::SCROLL:
      case tsqlParser::SCROLL_LOCKS:
      case tsqlParser::SELF:
      case tsqlParser::SERIALIZABLE:
      case tsqlParser::SIMPLE:
      case tsqlParser::SIZE:
      case tsqlParser::SNAPSHOT:
      case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
      case tsqlParser::STATIC:
      case tsqlParser::STATS_STREAM:
      case tsqlParser::STDEV:
      case tsqlParser::STDEVP:
      case tsqlParser::SUM:
      case tsqlParser::TEXTIMAGE_ON:
      case tsqlParser::THROW:
      case tsqlParser::TIES:
      case tsqlParser::TIME:
      case tsqlParser::TRY:
      case tsqlParser::TYPE:
      case tsqlParser::TYPE_WARNING:
      case tsqlParser::UNBOUNDED:
      case tsqlParser::UNCOMMITTED:
      case tsqlParser::UNKNOWN:
      case tsqlParser::USING:
      case tsqlParser::VAR:
      case tsqlParser::VARP:
      case tsqlParser::VIEWS:
      case tsqlParser::VIEW_METADATA:
      case tsqlParser::WORK:
      case tsqlParser::XML:
      case tsqlParser::XMLNAMESPACES:
      case tsqlParser::ZONE:
      case tsqlParser::DOUBLE_QUOTE_ID:
      case tsqlParser::SQUARE_BRACKET_ID:
      case tsqlParser::LOCAL_ID:
      case tsqlParser::DECIMAL:
      case tsqlParser::ID:
      case tsqlParser::STRING:
      case tsqlParser::BINARY:
      case tsqlParser::FLOAT:
      case tsqlParser::REAL:
      case tsqlParser::DOLLAR:
      case tsqlParser::PLUS:
      case tsqlParser::MINUS: {
        setState(1549);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case tsqlParser::LOCAL_ID:
          case tsqlParser::DECIMAL:
          case tsqlParser::STRING:
          case tsqlParser::BINARY:
          case tsqlParser::FLOAT:
          case tsqlParser::REAL:
          case tsqlParser::DOLLAR:
          case tsqlParser::PLUS:
          case tsqlParser::MINUS: {
            setState(1547);
            constant_LOCAL_ID();
            break;
          }

          case tsqlParser::FILLFACTOR:
          case tsqlParser::FORCESEEK:
          case tsqlParser::NEXT:
          case tsqlParser::NUMERIC:
          case tsqlParser::VALUE:
          case tsqlParser::ABSOLUTE:
          case tsqlParser::APPLY:
          case tsqlParser::AUTO:
          case tsqlParser::AVG:
          case tsqlParser::BASE64:
          case tsqlParser::CALLER:
          case tsqlParser::CAST:
          case tsqlParser::CATCH:
          case tsqlParser::CHECKSUM_AGG:
          case tsqlParser::COMMITTED:
          case tsqlParser::CONCAT:
          case tsqlParser::CONTROL:
          case tsqlParser::COOKIE:
          case tsqlParser::COUNT:
          case tsqlParser::COUNT_BIG:
          case tsqlParser::DATE:
          case tsqlParser::DELAY:
          case tsqlParser::DELETED:
          case tsqlParser::DENSE_RANK:
          case tsqlParser::DISABLE:
          case tsqlParser::DYNAMIC:
          case tsqlParser::ENCRYPTION:
          case tsqlParser::EXIST:
          case tsqlParser::EXPAND:
          case tsqlParser::FAST:
          case tsqlParser::FAST_FORWARD:
          case tsqlParser::FIRST:
          case tsqlParser::FIRST_VALUE:
          case tsqlParser::FOLLOWING:
          case tsqlParser::FORCE:
          case tsqlParser::FORCED:
          case tsqlParser::FORWARD_ONLY:
          case tsqlParser::FULLSCAN:
          case tsqlParser::GLOBAL:
          case tsqlParser::GROUPING:
          case tsqlParser::GROUPING_ID:
          case tsqlParser::HASH:
          case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
          case tsqlParser::IMPERSONATE:
          case tsqlParser::INSENSITIVE:
          case tsqlParser::INSERTED:
          case tsqlParser::ISOLATION:
          case tsqlParser::IO:
          case tsqlParser::KEEP:
          case tsqlParser::KEEPFIXED:
          case tsqlParser::KEYSET:
          case tsqlParser::LAG:
          case tsqlParser::LAST:
          case tsqlParser::LAST_VALUE:
          case tsqlParser::LEAD:
          case tsqlParser::LEVEL:
          case tsqlParser::LOCAL:
          case tsqlParser::LOCK_ESCALATION:
          case tsqlParser::LOGIN:
          case tsqlParser::LOOP:
          case tsqlParser::MARK:
          case tsqlParser::MAX:
          case tsqlParser::MAXDOP:
          case tsqlParser::MAXRECURSION:
          case tsqlParser::MIN:
          case tsqlParser::MODIFY:
          case tsqlParser::NAME:
          case tsqlParser::NOCOUNT:
          case tsqlParser::NODES:
          case tsqlParser::NOEXPAND:
          case tsqlParser::NORECOMPUTE:
          case tsqlParser::NTILE:
          case tsqlParser::NUMBER:
          case tsqlParser::OFFSET:
          case tsqlParser::ONLINE:
          case tsqlParser::ONLY:
          case tsqlParser::OPTIMISTIC:
          case tsqlParser::OPTIMIZE:
          case tsqlParser::OUT:
          case tsqlParser::OUTPUT:
          case tsqlParser::OWNER:
          case tsqlParser::PARAMETERIZATION:
          case tsqlParser::PARTITION:
          case tsqlParser::PATH:
          case tsqlParser::PRECEDING:
          case tsqlParser::PRIOR:
          case tsqlParser::PRIVILEGES:
          case tsqlParser::QUERY:
          case tsqlParser::RANGE:
          case tsqlParser::RANK:
          case tsqlParser::READONLY:
          case tsqlParser::READ_ONLY:
          case tsqlParser::RECOMPILE:
          case tsqlParser::RELATIVE:
          case tsqlParser::REMOTE:
          case tsqlParser::REPEATABLE:
          case tsqlParser::ROBUST:
          case tsqlParser::ROOT:
          case tsqlParser::ROW:
          case tsqlParser::ROWGUID:
          case tsqlParser::ROWS:
          case tsqlParser::ROW_NUMBER:
          case tsqlParser::SAMPLE:
          case tsqlParser::SCHEMABINDING:
          case tsqlParser::SCROLL:
          case tsqlParser::SCROLL_LOCKS:
          case tsqlParser::SELF:
          case tsqlParser::SERIALIZABLE:
          case tsqlParser::SIMPLE:
          case tsqlParser::SIZE:
          case tsqlParser::SNAPSHOT:
          case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
          case tsqlParser::STATIC:
          case tsqlParser::STATS_STREAM:
          case tsqlParser::STDEV:
          case tsqlParser::STDEVP:
          case tsqlParser::SUM:
          case tsqlParser::TEXTIMAGE_ON:
          case tsqlParser::THROW:
          case tsqlParser::TIES:
          case tsqlParser::TIME:
          case tsqlParser::TRY:
          case tsqlParser::TYPE:
          case tsqlParser::TYPE_WARNING:
          case tsqlParser::UNBOUNDED:
          case tsqlParser::UNCOMMITTED:
          case tsqlParser::UNKNOWN:
          case tsqlParser::USING:
          case tsqlParser::VAR:
          case tsqlParser::VARP:
          case tsqlParser::VIEWS:
          case tsqlParser::VIEW_METADATA:
          case tsqlParser::WORK:
          case tsqlParser::XML:
          case tsqlParser::XMLNAMESPACES:
          case tsqlParser::ZONE:
          case tsqlParser::DOUBLE_QUOTE_ID:
          case tsqlParser::SQUARE_BRACKET_ID:
          case tsqlParser::ID: {
            setState(1548);
            r_id();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1552);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx)) {
        case 1: {
          setState(1551);
          _la = _input->LA(1);
          if (!(_la == tsqlParser::OUT

          || _la == tsqlParser::OUTPUT)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          break;
        }

        default:
          break;
        }
        break;
      }

      case tsqlParser::DEFAULT: {
        setState(1554);
        match(tsqlParser::DEFAULT);
        break;
      }

      case tsqlParser::NULL_: {
        setState(1555);
        match(tsqlParser::NULL_);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Execute_var_stringContext ------------------------------------------------------------------

tsqlParser::Execute_var_stringContext::Execute_var_stringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Execute_var_stringContext::LOCAL_ID() {
  return getToken(tsqlParser::LOCAL_ID, 0);
}

tree::TerminalNode* tsqlParser::Execute_var_stringContext::STRING() {
  return getToken(tsqlParser::STRING, 0);
}


size_t tsqlParser::Execute_var_stringContext::getRuleIndex() const {
  return tsqlParser::RuleExecute_var_string;
}


std::any tsqlParser::Execute_var_stringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitExecute_var_string(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Execute_var_stringContext* tsqlParser::execute_var_string() {
  Execute_var_stringContext *_localctx = _tracker.createInstance<Execute_var_stringContext>(_ctx, getState());
  enterRule(_localctx, 164, tsqlParser::RuleExecute_var_string);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1558);
    _la = _input->LA(1);
    if (!(_la == tsqlParser::LOCAL_ID

    || _la == tsqlParser::STRING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Security_statementContext ------------------------------------------------------------------

tsqlParser::Security_statementContext::Security_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::Execute_clauseContext* tsqlParser::Security_statementContext::execute_clause() {
  return getRuleContext<tsqlParser::Execute_clauseContext>(0);
}

tree::TerminalNode* tsqlParser::Security_statementContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Security_statementContext::GRANT() {
  return getTokens(tsqlParser::GRANT);
}

tree::TerminalNode* tsqlParser::Security_statementContext::GRANT(size_t i) {
  return getToken(tsqlParser::GRANT, i);
}

tree::TerminalNode* tsqlParser::Security_statementContext::TO() {
  return getToken(tsqlParser::TO, 0);
}

tree::TerminalNode* tsqlParser::Security_statementContext::ALL() {
  return getToken(tsqlParser::ALL, 0);
}

tsqlParser::Grant_permissionContext* tsqlParser::Security_statementContext::grant_permission() {
  return getRuleContext<tsqlParser::Grant_permissionContext>(0);
}

tree::TerminalNode* tsqlParser::Security_statementContext::ON() {
  return getToken(tsqlParser::ON, 0);
}

std::vector<tsqlParser::R_idContext *> tsqlParser::Security_statementContext::r_id() {
  return getRuleContexts<tsqlParser::R_idContext>();
}

tsqlParser::R_idContext* tsqlParser::Security_statementContext::r_id(size_t i) {
  return getRuleContext<tsqlParser::R_idContext>(i);
}

tree::TerminalNode* tsqlParser::Security_statementContext::WITH() {
  return getToken(tsqlParser::WITH, 0);
}

tree::TerminalNode* tsqlParser::Security_statementContext::OPTION() {
  return getToken(tsqlParser::OPTION, 0);
}

tree::TerminalNode* tsqlParser::Security_statementContext::AS() {
  return getToken(tsqlParser::AS, 0);
}

tsqlParser::Full_table_nameContext* tsqlParser::Security_statementContext::full_table_name() {
  return getRuleContext<tsqlParser::Full_table_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Security_statementContext::PRIVILEGES() {
  return getToken(tsqlParser::PRIVILEGES, 0);
}

tree::TerminalNode* tsqlParser::Security_statementContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tsqlParser::Column_name_listContext* tsqlParser::Security_statementContext::column_name_list() {
  return getRuleContext<tsqlParser::Column_name_listContext>(0);
}

tree::TerminalNode* tsqlParser::Security_statementContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Security_statementContext::REVERT() {
  return getToken(tsqlParser::REVERT, 0);
}

tree::TerminalNode* tsqlParser::Security_statementContext::COOKIE() {
  return getToken(tsqlParser::COOKIE, 0);
}

tree::TerminalNode* tsqlParser::Security_statementContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

tree::TerminalNode* tsqlParser::Security_statementContext::LOCAL_ID() {
  return getToken(tsqlParser::LOCAL_ID, 0);
}


size_t tsqlParser::Security_statementContext::getRuleIndex() const {
  return tsqlParser::RuleSecurity_statement;
}


std::any tsqlParser::Security_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitSecurity_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Security_statementContext* tsqlParser::security_statement() {
  Security_statementContext *_localctx = _tracker.createInstance<Security_statementContext>(_ctx, getState());
  enterRule(_localctx, 166, tsqlParser::RuleSecurity_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1608);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::EXECUTE: {
        enterOuterAlt(_localctx, 1);
        setState(1560);
        execute_clause();
        setState(1562);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx)) {
        case 1: {
          setState(1561);
          match(tsqlParser::SEMI);
          break;
        }

        default:
          break;
        }
        break;
      }

      case tsqlParser::GRANT: {
        enterOuterAlt(_localctx, 2);
        setState(1564);
        match(tsqlParser::GRANT);
        setState(1576);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case tsqlParser::ALL: {
            setState(1565);
            match(tsqlParser::ALL);
            setState(1567);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == tsqlParser::PRIVILEGES) {
              setState(1566);
              match(tsqlParser::PRIVILEGES);
            }
            break;
          }

          case tsqlParser::ALTER:
          case tsqlParser::CREATE:
          case tsqlParser::EXECUTE:
          case tsqlParser::INSERT:
          case tsqlParser::REFERENCES:
          case tsqlParser::SELECT:
          case tsqlParser::VIEW:
          case tsqlParser::CONTROL:
          case tsqlParser::IMPERSONATE:
          case tsqlParser::SHOWPLAN:
          case tsqlParser::TAKE: {
            setState(1569);
            grant_permission();
            setState(1574);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == tsqlParser::LR_BRACKET) {
              setState(1570);
              match(tsqlParser::LR_BRACKET);
              setState(1571);
              column_name_list();
              setState(1572);
              match(tsqlParser::RR_BRACKET);
            }
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1580);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == tsqlParser::ON) {
          setState(1578);
          match(tsqlParser::ON);
          setState(1579);
          antlrcpp::downCast<Security_statementContext *>(_localctx)->on_id = full_table_name();
        }
        setState(1582);
        match(tsqlParser::TO);

        setState(1583);
        antlrcpp::downCast<Security_statementContext *>(_localctx)->to_principal = r_id();
        setState(1587);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx)) {
        case 1: {
          setState(1584);
          match(tsqlParser::WITH);
          setState(1585);
          match(tsqlParser::GRANT);
          setState(1586);
          match(tsqlParser::OPTION);
          break;
        }

        default:
          break;
        }
        setState(1591);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == tsqlParser::AS) {
          setState(1589);
          match(tsqlParser::AS);
          setState(1590);
          antlrcpp::downCast<Security_statementContext *>(_localctx)->as_principal = r_id();
        }
        setState(1594);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 209, _ctx)) {
        case 1: {
          setState(1593);
          match(tsqlParser::SEMI);
          break;
        }

        default:
          break;
        }
        break;
      }

      case tsqlParser::REVERT: {
        enterOuterAlt(_localctx, 3);
        setState(1596);
        match(tsqlParser::REVERT);
        setState(1603);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx)) {
        case 1: {
          setState(1597);
          match(tsqlParser::LR_BRACKET);
          setState(1598);
          match(tsqlParser::WITH);
          setState(1599);
          match(tsqlParser::COOKIE);
          setState(1600);
          match(tsqlParser::EQUAL);
          setState(1601);
          match(tsqlParser::LOCAL_ID);
          setState(1602);
          match(tsqlParser::RR_BRACKET);
          break;
        }

        default:
          break;
        }
        setState(1606);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 211, _ctx)) {
        case 1: {
          setState(1605);
          match(tsqlParser::SEMI);
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Grant_permissionContext ------------------------------------------------------------------

tsqlParser::Grant_permissionContext::Grant_permissionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Grant_permissionContext::EXECUTE() {
  return getToken(tsqlParser::EXECUTE, 0);
}

tree::TerminalNode* tsqlParser::Grant_permissionContext::VIEW() {
  return getToken(tsqlParser::VIEW, 0);
}

tsqlParser::R_idContext* tsqlParser::Grant_permissionContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tree::TerminalNode* tsqlParser::Grant_permissionContext::TAKE() {
  return getToken(tsqlParser::TAKE, 0);
}

tree::TerminalNode* tsqlParser::Grant_permissionContext::CONTROL() {
  return getToken(tsqlParser::CONTROL, 0);
}

tree::TerminalNode* tsqlParser::Grant_permissionContext::CREATE() {
  return getToken(tsqlParser::CREATE, 0);
}

tree::TerminalNode* tsqlParser::Grant_permissionContext::TABLE() {
  return getToken(tsqlParser::TABLE, 0);
}

tree::TerminalNode* tsqlParser::Grant_permissionContext::SHOWPLAN() {
  return getToken(tsqlParser::SHOWPLAN, 0);
}

tree::TerminalNode* tsqlParser::Grant_permissionContext::IMPERSONATE() {
  return getToken(tsqlParser::IMPERSONATE, 0);
}

tree::TerminalNode* tsqlParser::Grant_permissionContext::SELECT() {
  return getToken(tsqlParser::SELECT, 0);
}

tree::TerminalNode* tsqlParser::Grant_permissionContext::REFERENCES() {
  return getToken(tsqlParser::REFERENCES, 0);
}

tree::TerminalNode* tsqlParser::Grant_permissionContext::INSERT() {
  return getToken(tsqlParser::INSERT, 0);
}

tree::TerminalNode* tsqlParser::Grant_permissionContext::ALTER() {
  return getToken(tsqlParser::ALTER, 0);
}

tree::TerminalNode* tsqlParser::Grant_permissionContext::DATABASE() {
  return getToken(tsqlParser::DATABASE, 0);
}

tree::TerminalNode* tsqlParser::Grant_permissionContext::ANY() {
  return getToken(tsqlParser::ANY, 0);
}


size_t tsqlParser::Grant_permissionContext::getRuleIndex() const {
  return tsqlParser::RuleGrant_permission;
}


std::any tsqlParser::Grant_permissionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitGrant_permission(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Grant_permissionContext* tsqlParser::grant_permission() {
  Grant_permissionContext *_localctx = _tracker.createInstance<Grant_permissionContext>(_ctx, getState());
  enterRule(_localctx, 168, tsqlParser::RuleGrant_permission);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1636);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::EXECUTE: {
        enterOuterAlt(_localctx, 1);
        setState(1610);
        match(tsqlParser::EXECUTE);
        break;
      }

      case tsqlParser::VIEW: {
        enterOuterAlt(_localctx, 2);
        setState(1611);
        match(tsqlParser::VIEW);
        setState(1612);
        r_id();
        break;
      }

      case tsqlParser::TAKE: {
        enterOuterAlt(_localctx, 3);
        setState(1613);
        match(tsqlParser::TAKE);
        setState(1614);
        r_id();
        break;
      }

      case tsqlParser::CONTROL: {
        enterOuterAlt(_localctx, 4);
        setState(1615);
        match(tsqlParser::CONTROL);
        setState(1617);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la - 71) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 71)) & 17729624997893) != 0 || (((_la - 196) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 196)) & 9969332866253825) != 0 || (((_la - 261) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 261)) & -148821964101331) != 0 || (((_la - 328) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 328)) & -47521180986790319) != 0 || (((_la - 393) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 393)) & 171699173404606099) != 0) {
          setState(1616);
          r_id();
        }
        break;
      }

      case tsqlParser::CREATE: {
        enterOuterAlt(_localctx, 5);
        setState(1619);
        match(tsqlParser::CREATE);
        setState(1620);
        _la = _input->LA(1);
        if (!(_la == tsqlParser::TABLE

        || _la == tsqlParser::VIEW)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case tsqlParser::SHOWPLAN: {
        enterOuterAlt(_localctx, 6);
        setState(1621);
        match(tsqlParser::SHOWPLAN);
        break;
      }

      case tsqlParser::IMPERSONATE: {
        enterOuterAlt(_localctx, 7);
        setState(1622);
        match(tsqlParser::IMPERSONATE);
        break;
      }

      case tsqlParser::SELECT: {
        enterOuterAlt(_localctx, 8);
        setState(1623);
        match(tsqlParser::SELECT);
        break;
      }

      case tsqlParser::REFERENCES: {
        enterOuterAlt(_localctx, 9);
        setState(1624);
        match(tsqlParser::REFERENCES);
        break;
      }

      case tsqlParser::INSERT: {
        enterOuterAlt(_localctx, 10);
        setState(1625);
        match(tsqlParser::INSERT);
        break;
      }

      case tsqlParser::ALTER: {
        enterOuterAlt(_localctx, 11);
        setState(1626);
        match(tsqlParser::ALTER);
        setState(1634);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == tsqlParser::ANY

        || _la == tsqlParser::DATABASE || (((_la - 71) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 71)) & 17729624997893) != 0 || (((_la - 196) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 196)) & 9969332866253825) != 0 || (((_la - 261) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 261)) & -148821964101331) != 0 || (((_la - 328) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 328)) & -47521180986790319) != 0 || (((_la - 393) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 393)) & 171699173404606099) != 0) {
          setState(1628);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == tsqlParser::ANY) {
            setState(1627);
            match(tsqlParser::ANY);
          }
          setState(1632);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case tsqlParser::FILLFACTOR:
            case tsqlParser::FORCESEEK:
            case tsqlParser::NEXT:
            case tsqlParser::NUMERIC:
            case tsqlParser::VALUE:
            case tsqlParser::ABSOLUTE:
            case tsqlParser::APPLY:
            case tsqlParser::AUTO:
            case tsqlParser::AVG:
            case tsqlParser::BASE64:
            case tsqlParser::CALLER:
            case tsqlParser::CAST:
            case tsqlParser::CATCH:
            case tsqlParser::CHECKSUM_AGG:
            case tsqlParser::COMMITTED:
            case tsqlParser::CONCAT:
            case tsqlParser::CONTROL:
            case tsqlParser::COOKIE:
            case tsqlParser::COUNT:
            case tsqlParser::COUNT_BIG:
            case tsqlParser::DATE:
            case tsqlParser::DELAY:
            case tsqlParser::DELETED:
            case tsqlParser::DENSE_RANK:
            case tsqlParser::DISABLE:
            case tsqlParser::DYNAMIC:
            case tsqlParser::ENCRYPTION:
            case tsqlParser::EXIST:
            case tsqlParser::EXPAND:
            case tsqlParser::FAST:
            case tsqlParser::FAST_FORWARD:
            case tsqlParser::FIRST:
            case tsqlParser::FIRST_VALUE:
            case tsqlParser::FOLLOWING:
            case tsqlParser::FORCE:
            case tsqlParser::FORCED:
            case tsqlParser::FORWARD_ONLY:
            case tsqlParser::FULLSCAN:
            case tsqlParser::GLOBAL:
            case tsqlParser::GROUPING:
            case tsqlParser::GROUPING_ID:
            case tsqlParser::HASH:
            case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
            case tsqlParser::IMPERSONATE:
            case tsqlParser::INSENSITIVE:
            case tsqlParser::INSERTED:
            case tsqlParser::ISOLATION:
            case tsqlParser::IO:
            case tsqlParser::KEEP:
            case tsqlParser::KEEPFIXED:
            case tsqlParser::KEYSET:
            case tsqlParser::LAG:
            case tsqlParser::LAST:
            case tsqlParser::LAST_VALUE:
            case tsqlParser::LEAD:
            case tsqlParser::LEVEL:
            case tsqlParser::LOCAL:
            case tsqlParser::LOCK_ESCALATION:
            case tsqlParser::LOGIN:
            case tsqlParser::LOOP:
            case tsqlParser::MARK:
            case tsqlParser::MAX:
            case tsqlParser::MAXDOP:
            case tsqlParser::MAXRECURSION:
            case tsqlParser::MIN:
            case tsqlParser::MODIFY:
            case tsqlParser::NAME:
            case tsqlParser::NOCOUNT:
            case tsqlParser::NODES:
            case tsqlParser::NOEXPAND:
            case tsqlParser::NORECOMPUTE:
            case tsqlParser::NTILE:
            case tsqlParser::NUMBER:
            case tsqlParser::OFFSET:
            case tsqlParser::ONLINE:
            case tsqlParser::ONLY:
            case tsqlParser::OPTIMISTIC:
            case tsqlParser::OPTIMIZE:
            case tsqlParser::OUT:
            case tsqlParser::OUTPUT:
            case tsqlParser::OWNER:
            case tsqlParser::PARAMETERIZATION:
            case tsqlParser::PARTITION:
            case tsqlParser::PATH:
            case tsqlParser::PRECEDING:
            case tsqlParser::PRIOR:
            case tsqlParser::PRIVILEGES:
            case tsqlParser::QUERY:
            case tsqlParser::RANGE:
            case tsqlParser::RANK:
            case tsqlParser::READONLY:
            case tsqlParser::READ_ONLY:
            case tsqlParser::RECOMPILE:
            case tsqlParser::RELATIVE:
            case tsqlParser::REMOTE:
            case tsqlParser::REPEATABLE:
            case tsqlParser::ROBUST:
            case tsqlParser::ROOT:
            case tsqlParser::ROW:
            case tsqlParser::ROWGUID:
            case tsqlParser::ROWS:
            case tsqlParser::ROW_NUMBER:
            case tsqlParser::SAMPLE:
            case tsqlParser::SCHEMABINDING:
            case tsqlParser::SCROLL:
            case tsqlParser::SCROLL_LOCKS:
            case tsqlParser::SELF:
            case tsqlParser::SERIALIZABLE:
            case tsqlParser::SIMPLE:
            case tsqlParser::SIZE:
            case tsqlParser::SNAPSHOT:
            case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
            case tsqlParser::STATIC:
            case tsqlParser::STATS_STREAM:
            case tsqlParser::STDEV:
            case tsqlParser::STDEVP:
            case tsqlParser::SUM:
            case tsqlParser::TEXTIMAGE_ON:
            case tsqlParser::THROW:
            case tsqlParser::TIES:
            case tsqlParser::TIME:
            case tsqlParser::TRY:
            case tsqlParser::TYPE:
            case tsqlParser::TYPE_WARNING:
            case tsqlParser::UNBOUNDED:
            case tsqlParser::UNCOMMITTED:
            case tsqlParser::UNKNOWN:
            case tsqlParser::USING:
            case tsqlParser::VAR:
            case tsqlParser::VARP:
            case tsqlParser::VIEWS:
            case tsqlParser::VIEW_METADATA:
            case tsqlParser::WORK:
            case tsqlParser::XML:
            case tsqlParser::XMLNAMESPACES:
            case tsqlParser::ZONE:
            case tsqlParser::DOUBLE_QUOTE_ID:
            case tsqlParser::SQUARE_BRACKET_ID:
            case tsqlParser::ID: {
              setState(1630);
              r_id();
              break;
            }

            case tsqlParser::DATABASE: {
              setState(1631);
              match(tsqlParser::DATABASE);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Set_statementContext ------------------------------------------------------------------

tsqlParser::Set_statementContext::Set_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Set_statementContext::SET() {
  return getToken(tsqlParser::SET, 0);
}

tree::TerminalNode* tsqlParser::Set_statementContext::LOCAL_ID() {
  return getToken(tsqlParser::LOCAL_ID, 0);
}

tree::TerminalNode* tsqlParser::Set_statementContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

tsqlParser::ExpressionContext* tsqlParser::Set_statementContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

tree::TerminalNode* tsqlParser::Set_statementContext::DOT() {
  return getToken(tsqlParser::DOT, 0);
}

tree::TerminalNode* tsqlParser::Set_statementContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}

tsqlParser::R_idContext* tsqlParser::Set_statementContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tsqlParser::Assignment_operatorContext* tsqlParser::Set_statementContext::assignment_operator() {
  return getRuleContext<tsqlParser::Assignment_operatorContext>(0);
}

tree::TerminalNode* tsqlParser::Set_statementContext::CURSOR() {
  return getToken(tsqlParser::CURSOR, 0);
}

tsqlParser::Declare_set_cursor_commonContext* tsqlParser::Set_statementContext::declare_set_cursor_common() {
  return getRuleContext<tsqlParser::Declare_set_cursor_commonContext>(0);
}

tree::TerminalNode* tsqlParser::Set_statementContext::FOR() {
  return getToken(tsqlParser::FOR, 0);
}

tree::TerminalNode* tsqlParser::Set_statementContext::READ() {
  return getToken(tsqlParser::READ, 0);
}

tree::TerminalNode* tsqlParser::Set_statementContext::ONLY() {
  return getToken(tsqlParser::ONLY, 0);
}

tree::TerminalNode* tsqlParser::Set_statementContext::UPDATE() {
  return getToken(tsqlParser::UPDATE, 0);
}

tree::TerminalNode* tsqlParser::Set_statementContext::OF() {
  return getToken(tsqlParser::OF, 0);
}

tsqlParser::Column_name_listContext* tsqlParser::Set_statementContext::column_name_list() {
  return getRuleContext<tsqlParser::Column_name_listContext>(0);
}

tsqlParser::Set_specialContext* tsqlParser::Set_statementContext::set_special() {
  return getRuleContext<tsqlParser::Set_specialContext>(0);
}


size_t tsqlParser::Set_statementContext::getRuleIndex() const {
  return tsqlParser::RuleSet_statement;
}


std::any tsqlParser::Set_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitSet_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Set_statementContext* tsqlParser::set_statement() {
  Set_statementContext *_localctx = _tracker.createInstance<Set_statementContext>(_ctx, getState());
  enterRule(_localctx, 170, tsqlParser::RuleSet_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1677);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 225, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1638);
      match(tsqlParser::SET);
      setState(1639);
      match(tsqlParser::LOCAL_ID);
      setState(1642);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::DOT) {
        setState(1640);
        match(tsqlParser::DOT);
        setState(1641);
        antlrcpp::downCast<Set_statementContext *>(_localctx)->member_name = r_id();
      }
      setState(1644);
      match(tsqlParser::EQUAL);
      setState(1645);
      expression(0);
      setState(1647);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 219, _ctx)) {
      case 1: {
        setState(1646);
        match(tsqlParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1649);
      match(tsqlParser::SET);
      setState(1650);
      match(tsqlParser::LOCAL_ID);
      setState(1651);
      assignment_operator();
      setState(1652);
      expression(0);
      setState(1654);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 220, _ctx)) {
      case 1: {
        setState(1653);
        match(tsqlParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1656);
      match(tsqlParser::SET);
      setState(1657);
      match(tsqlParser::LOCAL_ID);
      setState(1658);
      match(tsqlParser::EQUAL);
      setState(1659);
      match(tsqlParser::CURSOR);
      setState(1660);
      declare_set_cursor_common();
      setState(1671);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::FOR) {
        setState(1661);
        match(tsqlParser::FOR);
        setState(1669);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case tsqlParser::READ: {
            setState(1662);
            match(tsqlParser::READ);
            setState(1663);
            match(tsqlParser::ONLY);
            break;
          }

          case tsqlParser::UPDATE: {
            setState(1664);
            match(tsqlParser::UPDATE);
            setState(1667);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == tsqlParser::OF) {
              setState(1665);
              match(tsqlParser::OF);
              setState(1666);
              column_name_list();
            }
            break;
          }

        default:
          throw NoViableAltException(this);
        }
      }
      setState(1674);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 224, _ctx)) {
      case 1: {
        setState(1673);
        match(tsqlParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1676);
      set_special();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Transaction_statementContext ------------------------------------------------------------------

tsqlParser::Transaction_statementContext::Transaction_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Transaction_statementContext::BEGIN() {
  return getToken(tsqlParser::BEGIN, 0);
}

tree::TerminalNode* tsqlParser::Transaction_statementContext::DISTRIBUTED() {
  return getToken(tsqlParser::DISTRIBUTED, 0);
}

tree::TerminalNode* tsqlParser::Transaction_statementContext::TRAN() {
  return getToken(tsqlParser::TRAN, 0);
}

tree::TerminalNode* tsqlParser::Transaction_statementContext::TRANSACTION() {
  return getToken(tsqlParser::TRANSACTION, 0);
}

tsqlParser::R_idContext* tsqlParser::Transaction_statementContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tree::TerminalNode* tsqlParser::Transaction_statementContext::LOCAL_ID() {
  return getToken(tsqlParser::LOCAL_ID, 0);
}

tree::TerminalNode* tsqlParser::Transaction_statementContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}

tree::TerminalNode* tsqlParser::Transaction_statementContext::WITH() {
  return getToken(tsqlParser::WITH, 0);
}

tree::TerminalNode* tsqlParser::Transaction_statementContext::MARK() {
  return getToken(tsqlParser::MARK, 0);
}

tree::TerminalNode* tsqlParser::Transaction_statementContext::STRING() {
  return getToken(tsqlParser::STRING, 0);
}

tree::TerminalNode* tsqlParser::Transaction_statementContext::COMMIT() {
  return getToken(tsqlParser::COMMIT, 0);
}

tree::TerminalNode* tsqlParser::Transaction_statementContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Transaction_statementContext::DELAYED_DURABILITY() {
  return getToken(tsqlParser::DELAYED_DURABILITY, 0);
}

tree::TerminalNode* tsqlParser::Transaction_statementContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

tree::TerminalNode* tsqlParser::Transaction_statementContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Transaction_statementContext::OFF() {
  return getToken(tsqlParser::OFF, 0);
}

tree::TerminalNode* tsqlParser::Transaction_statementContext::ON() {
  return getToken(tsqlParser::ON, 0);
}

tree::TerminalNode* tsqlParser::Transaction_statementContext::WORK() {
  return getToken(tsqlParser::WORK, 0);
}

tree::TerminalNode* tsqlParser::Transaction_statementContext::ROLLBACK() {
  return getToken(tsqlParser::ROLLBACK, 0);
}

tree::TerminalNode* tsqlParser::Transaction_statementContext::SAVE() {
  return getToken(tsqlParser::SAVE, 0);
}


size_t tsqlParser::Transaction_statementContext::getRuleIndex() const {
  return tsqlParser::RuleTransaction_statement;
}


std::any tsqlParser::Transaction_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitTransaction_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Transaction_statementContext* tsqlParser::transaction_statement() {
  Transaction_statementContext *_localctx = _tracker.createInstance<Transaction_statementContext>(_ctx, getState());
  enterRule(_localctx, 172, tsqlParser::RuleTransaction_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1756);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 244, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1679);
      match(tsqlParser::BEGIN);
      setState(1680);
      match(tsqlParser::DISTRIBUTED);
      setState(1681);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::TRAN

      || _la == tsqlParser::TRANSACTION)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1684);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx)) {
      case 1: {
        setState(1682);
        r_id();
        break;
      }

      case 2: {
        setState(1683);
        match(tsqlParser::LOCAL_ID);
        break;
      }

      default:
        break;
      }
      setState(1687);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 227, _ctx)) {
      case 1: {
        setState(1686);
        match(tsqlParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1689);
      match(tsqlParser::BEGIN);
      setState(1690);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::TRAN

      || _la == tsqlParser::TRANSACTION)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1700);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 230, _ctx)) {
      case 1: {
        setState(1693);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case tsqlParser::FILLFACTOR:
          case tsqlParser::FORCESEEK:
          case tsqlParser::NEXT:
          case tsqlParser::NUMERIC:
          case tsqlParser::VALUE:
          case tsqlParser::ABSOLUTE:
          case tsqlParser::APPLY:
          case tsqlParser::AUTO:
          case tsqlParser::AVG:
          case tsqlParser::BASE64:
          case tsqlParser::CALLER:
          case tsqlParser::CAST:
          case tsqlParser::CATCH:
          case tsqlParser::CHECKSUM_AGG:
          case tsqlParser::COMMITTED:
          case tsqlParser::CONCAT:
          case tsqlParser::CONTROL:
          case tsqlParser::COOKIE:
          case tsqlParser::COUNT:
          case tsqlParser::COUNT_BIG:
          case tsqlParser::DATE:
          case tsqlParser::DELAY:
          case tsqlParser::DELETED:
          case tsqlParser::DENSE_RANK:
          case tsqlParser::DISABLE:
          case tsqlParser::DYNAMIC:
          case tsqlParser::ENCRYPTION:
          case tsqlParser::EXIST:
          case tsqlParser::EXPAND:
          case tsqlParser::FAST:
          case tsqlParser::FAST_FORWARD:
          case tsqlParser::FIRST:
          case tsqlParser::FIRST_VALUE:
          case tsqlParser::FOLLOWING:
          case tsqlParser::FORCE:
          case tsqlParser::FORCED:
          case tsqlParser::FORWARD_ONLY:
          case tsqlParser::FULLSCAN:
          case tsqlParser::GLOBAL:
          case tsqlParser::GROUPING:
          case tsqlParser::GROUPING_ID:
          case tsqlParser::HASH:
          case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
          case tsqlParser::IMPERSONATE:
          case tsqlParser::INSENSITIVE:
          case tsqlParser::INSERTED:
          case tsqlParser::ISOLATION:
          case tsqlParser::IO:
          case tsqlParser::KEEP:
          case tsqlParser::KEEPFIXED:
          case tsqlParser::KEYSET:
          case tsqlParser::LAG:
          case tsqlParser::LAST:
          case tsqlParser::LAST_VALUE:
          case tsqlParser::LEAD:
          case tsqlParser::LEVEL:
          case tsqlParser::LOCAL:
          case tsqlParser::LOCK_ESCALATION:
          case tsqlParser::LOGIN:
          case tsqlParser::LOOP:
          case tsqlParser::MARK:
          case tsqlParser::MAX:
          case tsqlParser::MAXDOP:
          case tsqlParser::MAXRECURSION:
          case tsqlParser::MIN:
          case tsqlParser::MODIFY:
          case tsqlParser::NAME:
          case tsqlParser::NOCOUNT:
          case tsqlParser::NODES:
          case tsqlParser::NOEXPAND:
          case tsqlParser::NORECOMPUTE:
          case tsqlParser::NTILE:
          case tsqlParser::NUMBER:
          case tsqlParser::OFFSET:
          case tsqlParser::ONLINE:
          case tsqlParser::ONLY:
          case tsqlParser::OPTIMISTIC:
          case tsqlParser::OPTIMIZE:
          case tsqlParser::OUT:
          case tsqlParser::OUTPUT:
          case tsqlParser::OWNER:
          case tsqlParser::PARAMETERIZATION:
          case tsqlParser::PARTITION:
          case tsqlParser::PATH:
          case tsqlParser::PRECEDING:
          case tsqlParser::PRIOR:
          case tsqlParser::PRIVILEGES:
          case tsqlParser::QUERY:
          case tsqlParser::RANGE:
          case tsqlParser::RANK:
          case tsqlParser::READONLY:
          case tsqlParser::READ_ONLY:
          case tsqlParser::RECOMPILE:
          case tsqlParser::RELATIVE:
          case tsqlParser::REMOTE:
          case tsqlParser::REPEATABLE:
          case tsqlParser::ROBUST:
          case tsqlParser::ROOT:
          case tsqlParser::ROW:
          case tsqlParser::ROWGUID:
          case tsqlParser::ROWS:
          case tsqlParser::ROW_NUMBER:
          case tsqlParser::SAMPLE:
          case tsqlParser::SCHEMABINDING:
          case tsqlParser::SCROLL:
          case tsqlParser::SCROLL_LOCKS:
          case tsqlParser::SELF:
          case tsqlParser::SERIALIZABLE:
          case tsqlParser::SIMPLE:
          case tsqlParser::SIZE:
          case tsqlParser::SNAPSHOT:
          case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
          case tsqlParser::STATIC:
          case tsqlParser::STATS_STREAM:
          case tsqlParser::STDEV:
          case tsqlParser::STDEVP:
          case tsqlParser::SUM:
          case tsqlParser::TEXTIMAGE_ON:
          case tsqlParser::THROW:
          case tsqlParser::TIES:
          case tsqlParser::TIME:
          case tsqlParser::TRY:
          case tsqlParser::TYPE:
          case tsqlParser::TYPE_WARNING:
          case tsqlParser::UNBOUNDED:
          case tsqlParser::UNCOMMITTED:
          case tsqlParser::UNKNOWN:
          case tsqlParser::USING:
          case tsqlParser::VAR:
          case tsqlParser::VARP:
          case tsqlParser::VIEWS:
          case tsqlParser::VIEW_METADATA:
          case tsqlParser::WORK:
          case tsqlParser::XML:
          case tsqlParser::XMLNAMESPACES:
          case tsqlParser::ZONE:
          case tsqlParser::DOUBLE_QUOTE_ID:
          case tsqlParser::SQUARE_BRACKET_ID:
          case tsqlParser::ID: {
            setState(1691);
            r_id();
            break;
          }

          case tsqlParser::LOCAL_ID: {
            setState(1692);
            match(tsqlParser::LOCAL_ID);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1698);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 229, _ctx)) {
        case 1: {
          setState(1695);
          match(tsqlParser::WITH);
          setState(1696);
          match(tsqlParser::MARK);
          setState(1697);
          match(tsqlParser::STRING);
          break;
        }

        default:
          break;
        }
        break;
      }

      default:
        break;
      }
      setState(1703);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 231, _ctx)) {
      case 1: {
        setState(1702);
        match(tsqlParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1705);
      match(tsqlParser::COMMIT);
      setState(1706);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::TRAN

      || _la == tsqlParser::TRANSACTION)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1719);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 234, _ctx)) {
      case 1: {
        setState(1709);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case tsqlParser::FILLFACTOR:
          case tsqlParser::FORCESEEK:
          case tsqlParser::NEXT:
          case tsqlParser::NUMERIC:
          case tsqlParser::VALUE:
          case tsqlParser::ABSOLUTE:
          case tsqlParser::APPLY:
          case tsqlParser::AUTO:
          case tsqlParser::AVG:
          case tsqlParser::BASE64:
          case tsqlParser::CALLER:
          case tsqlParser::CAST:
          case tsqlParser::CATCH:
          case tsqlParser::CHECKSUM_AGG:
          case tsqlParser::COMMITTED:
          case tsqlParser::CONCAT:
          case tsqlParser::CONTROL:
          case tsqlParser::COOKIE:
          case tsqlParser::COUNT:
          case tsqlParser::COUNT_BIG:
          case tsqlParser::DATE:
          case tsqlParser::DELAY:
          case tsqlParser::DELETED:
          case tsqlParser::DENSE_RANK:
          case tsqlParser::DISABLE:
          case tsqlParser::DYNAMIC:
          case tsqlParser::ENCRYPTION:
          case tsqlParser::EXIST:
          case tsqlParser::EXPAND:
          case tsqlParser::FAST:
          case tsqlParser::FAST_FORWARD:
          case tsqlParser::FIRST:
          case tsqlParser::FIRST_VALUE:
          case tsqlParser::FOLLOWING:
          case tsqlParser::FORCE:
          case tsqlParser::FORCED:
          case tsqlParser::FORWARD_ONLY:
          case tsqlParser::FULLSCAN:
          case tsqlParser::GLOBAL:
          case tsqlParser::GROUPING:
          case tsqlParser::GROUPING_ID:
          case tsqlParser::HASH:
          case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
          case tsqlParser::IMPERSONATE:
          case tsqlParser::INSENSITIVE:
          case tsqlParser::INSERTED:
          case tsqlParser::ISOLATION:
          case tsqlParser::IO:
          case tsqlParser::KEEP:
          case tsqlParser::KEEPFIXED:
          case tsqlParser::KEYSET:
          case tsqlParser::LAG:
          case tsqlParser::LAST:
          case tsqlParser::LAST_VALUE:
          case tsqlParser::LEAD:
          case tsqlParser::LEVEL:
          case tsqlParser::LOCAL:
          case tsqlParser::LOCK_ESCALATION:
          case tsqlParser::LOGIN:
          case tsqlParser::LOOP:
          case tsqlParser::MARK:
          case tsqlParser::MAX:
          case tsqlParser::MAXDOP:
          case tsqlParser::MAXRECURSION:
          case tsqlParser::MIN:
          case tsqlParser::MODIFY:
          case tsqlParser::NAME:
          case tsqlParser::NOCOUNT:
          case tsqlParser::NODES:
          case tsqlParser::NOEXPAND:
          case tsqlParser::NORECOMPUTE:
          case tsqlParser::NTILE:
          case tsqlParser::NUMBER:
          case tsqlParser::OFFSET:
          case tsqlParser::ONLINE:
          case tsqlParser::ONLY:
          case tsqlParser::OPTIMISTIC:
          case tsqlParser::OPTIMIZE:
          case tsqlParser::OUT:
          case tsqlParser::OUTPUT:
          case tsqlParser::OWNER:
          case tsqlParser::PARAMETERIZATION:
          case tsqlParser::PARTITION:
          case tsqlParser::PATH:
          case tsqlParser::PRECEDING:
          case tsqlParser::PRIOR:
          case tsqlParser::PRIVILEGES:
          case tsqlParser::QUERY:
          case tsqlParser::RANGE:
          case tsqlParser::RANK:
          case tsqlParser::READONLY:
          case tsqlParser::READ_ONLY:
          case tsqlParser::RECOMPILE:
          case tsqlParser::RELATIVE:
          case tsqlParser::REMOTE:
          case tsqlParser::REPEATABLE:
          case tsqlParser::ROBUST:
          case tsqlParser::ROOT:
          case tsqlParser::ROW:
          case tsqlParser::ROWGUID:
          case tsqlParser::ROWS:
          case tsqlParser::ROW_NUMBER:
          case tsqlParser::SAMPLE:
          case tsqlParser::SCHEMABINDING:
          case tsqlParser::SCROLL:
          case tsqlParser::SCROLL_LOCKS:
          case tsqlParser::SELF:
          case tsqlParser::SERIALIZABLE:
          case tsqlParser::SIMPLE:
          case tsqlParser::SIZE:
          case tsqlParser::SNAPSHOT:
          case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
          case tsqlParser::STATIC:
          case tsqlParser::STATS_STREAM:
          case tsqlParser::STDEV:
          case tsqlParser::STDEVP:
          case tsqlParser::SUM:
          case tsqlParser::TEXTIMAGE_ON:
          case tsqlParser::THROW:
          case tsqlParser::TIES:
          case tsqlParser::TIME:
          case tsqlParser::TRY:
          case tsqlParser::TYPE:
          case tsqlParser::TYPE_WARNING:
          case tsqlParser::UNBOUNDED:
          case tsqlParser::UNCOMMITTED:
          case tsqlParser::UNKNOWN:
          case tsqlParser::USING:
          case tsqlParser::VAR:
          case tsqlParser::VARP:
          case tsqlParser::VIEWS:
          case tsqlParser::VIEW_METADATA:
          case tsqlParser::WORK:
          case tsqlParser::XML:
          case tsqlParser::XMLNAMESPACES:
          case tsqlParser::ZONE:
          case tsqlParser::DOUBLE_QUOTE_ID:
          case tsqlParser::SQUARE_BRACKET_ID:
          case tsqlParser::ID: {
            setState(1707);
            r_id();
            break;
          }

          case tsqlParser::LOCAL_ID: {
            setState(1708);
            match(tsqlParser::LOCAL_ID);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1717);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 233, _ctx)) {
        case 1: {
          setState(1711);
          match(tsqlParser::WITH);
          setState(1712);
          match(tsqlParser::LR_BRACKET);
          setState(1713);
          match(tsqlParser::DELAYED_DURABILITY);
          setState(1714);
          match(tsqlParser::EQUAL);
          setState(1715);
          _la = _input->LA(1);
          if (!(_la == tsqlParser::OFF

          || _la == tsqlParser::ON)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(1716);
          match(tsqlParser::RR_BRACKET);
          break;
        }

        default:
          break;
        }
        break;
      }

      default:
        break;
      }
      setState(1722);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 235, _ctx)) {
      case 1: {
        setState(1721);
        match(tsqlParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1724);
      match(tsqlParser::COMMIT);
      setState(1726);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 236, _ctx)) {
      case 1: {
        setState(1725);
        match(tsqlParser::WORK);
        break;
      }

      default:
        break;
      }
      setState(1729);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 237, _ctx)) {
      case 1: {
        setState(1728);
        match(tsqlParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1731);
      match(tsqlParser::ROLLBACK);
      setState(1732);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::TRAN

      || _la == tsqlParser::TRANSACTION)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1735);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 238, _ctx)) {
      case 1: {
        setState(1733);
        r_id();
        break;
      }

      case 2: {
        setState(1734);
        match(tsqlParser::LOCAL_ID);
        break;
      }

      default:
        break;
      }
      setState(1738);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 239, _ctx)) {
      case 1: {
        setState(1737);
        match(tsqlParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1740);
      match(tsqlParser::ROLLBACK);
      setState(1742);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 240, _ctx)) {
      case 1: {
        setState(1741);
        match(tsqlParser::WORK);
        break;
      }

      default:
        break;
      }
      setState(1745);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 241, _ctx)) {
      case 1: {
        setState(1744);
        match(tsqlParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1747);
      match(tsqlParser::SAVE);
      setState(1748);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::TRAN

      || _la == tsqlParser::TRANSACTION)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1751);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 242, _ctx)) {
      case 1: {
        setState(1749);
        r_id();
        break;
      }

      case 2: {
        setState(1750);
        match(tsqlParser::LOCAL_ID);
        break;
      }

      default:
        break;
      }
      setState(1754);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 243, _ctx)) {
      case 1: {
        setState(1753);
        match(tsqlParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Go_statementContext ------------------------------------------------------------------

tsqlParser::Go_statementContext::Go_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Go_statementContext::GO() {
  return getToken(tsqlParser::GO, 0);
}

tree::TerminalNode* tsqlParser::Go_statementContext::DECIMAL() {
  return getToken(tsqlParser::DECIMAL, 0);
}


size_t tsqlParser::Go_statementContext::getRuleIndex() const {
  return tsqlParser::RuleGo_statement;
}


std::any tsqlParser::Go_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitGo_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Go_statementContext* tsqlParser::go_statement() {
  Go_statementContext *_localctx = _tracker.createInstance<Go_statementContext>(_ctx, getState());
  enterRule(_localctx, 174, tsqlParser::RuleGo_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1758);
    match(tsqlParser::GO);
    setState(1760);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::DECIMAL) {
      setState(1759);
      antlrcpp::downCast<Go_statementContext *>(_localctx)->count = match(tsqlParser::DECIMAL);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Use_statementContext ------------------------------------------------------------------

tsqlParser::Use_statementContext::Use_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Use_statementContext::USE() {
  return getToken(tsqlParser::USE, 0);
}

tsqlParser::R_idContext* tsqlParser::Use_statementContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tree::TerminalNode* tsqlParser::Use_statementContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}


size_t tsqlParser::Use_statementContext::getRuleIndex() const {
  return tsqlParser::RuleUse_statement;
}


std::any tsqlParser::Use_statementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitUse_statement(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Use_statementContext* tsqlParser::use_statement() {
  Use_statementContext *_localctx = _tracker.createInstance<Use_statementContext>(_ctx, getState());
  enterRule(_localctx, 176, tsqlParser::RuleUse_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1762);
    match(tsqlParser::USE);
    setState(1763);
    antlrcpp::downCast<Use_statementContext *>(_localctx)->database = r_id();
    setState(1765);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 246, _ctx)) {
    case 1: {
      setState(1764);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Execute_clauseContext ------------------------------------------------------------------

tsqlParser::Execute_clauseContext::Execute_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Execute_clauseContext::EXECUTE() {
  return getToken(tsqlParser::EXECUTE, 0);
}

tree::TerminalNode* tsqlParser::Execute_clauseContext::AS() {
  return getToken(tsqlParser::AS, 0);
}

tree::TerminalNode* tsqlParser::Execute_clauseContext::CALLER() {
  return getToken(tsqlParser::CALLER, 0);
}

tree::TerminalNode* tsqlParser::Execute_clauseContext::SELF() {
  return getToken(tsqlParser::SELF, 0);
}

tree::TerminalNode* tsqlParser::Execute_clauseContext::OWNER() {
  return getToken(tsqlParser::OWNER, 0);
}

tree::TerminalNode* tsqlParser::Execute_clauseContext::STRING() {
  return getToken(tsqlParser::STRING, 0);
}


size_t tsqlParser::Execute_clauseContext::getRuleIndex() const {
  return tsqlParser::RuleExecute_clause;
}


std::any tsqlParser::Execute_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitExecute_clause(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Execute_clauseContext* tsqlParser::execute_clause() {
  Execute_clauseContext *_localctx = _tracker.createInstance<Execute_clauseContext>(_ctx, getState());
  enterRule(_localctx, 178, tsqlParser::RuleExecute_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1767);
    match(tsqlParser::EXECUTE);
    setState(1768);
    match(tsqlParser::AS);
    setState(1769);
    antlrcpp::downCast<Execute_clauseContext *>(_localctx)->clause = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == tsqlParser::CALLER || _la == tsqlParser::OWNER

    || _la == tsqlParser::SELF || _la == tsqlParser::STRING)) {
      antlrcpp::downCast<Execute_clauseContext *>(_localctx)->clause = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Declare_localContext ------------------------------------------------------------------

tsqlParser::Declare_localContext::Declare_localContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Declare_localContext::LOCAL_ID() {
  return getToken(tsqlParser::LOCAL_ID, 0);
}

tsqlParser::Data_typeContext* tsqlParser::Declare_localContext::data_type() {
  return getRuleContext<tsqlParser::Data_typeContext>(0);
}

tree::TerminalNode* tsqlParser::Declare_localContext::AS() {
  return getToken(tsqlParser::AS, 0);
}

tree::TerminalNode* tsqlParser::Declare_localContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

tsqlParser::ExpressionContext* tsqlParser::Declare_localContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}


size_t tsqlParser::Declare_localContext::getRuleIndex() const {
  return tsqlParser::RuleDeclare_local;
}


std::any tsqlParser::Declare_localContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDeclare_local(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Declare_localContext* tsqlParser::declare_local() {
  Declare_localContext *_localctx = _tracker.createInstance<Declare_localContext>(_ctx, getState());
  enterRule(_localctx, 180, tsqlParser::RuleDeclare_local);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1771);
    match(tsqlParser::LOCAL_ID);
    setState(1773);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::AS) {
      setState(1772);
      match(tsqlParser::AS);
    }
    setState(1775);
    data_type();
    setState(1778);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::EQUAL) {
      setState(1776);
      match(tsqlParser::EQUAL);
      setState(1777);
      expression(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_type_definitionContext ------------------------------------------------------------------

tsqlParser::Table_type_definitionContext::Table_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Table_type_definitionContext::TABLE() {
  return getToken(tsqlParser::TABLE, 0);
}

tree::TerminalNode* tsqlParser::Table_type_definitionContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tsqlParser::Column_def_table_constraintsContext* tsqlParser::Table_type_definitionContext::column_def_table_constraints() {
  return getRuleContext<tsqlParser::Column_def_table_constraintsContext>(0);
}

tree::TerminalNode* tsqlParser::Table_type_definitionContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}


size_t tsqlParser::Table_type_definitionContext::getRuleIndex() const {
  return tsqlParser::RuleTable_type_definition;
}


std::any tsqlParser::Table_type_definitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitTable_type_definition(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Table_type_definitionContext* tsqlParser::table_type_definition() {
  Table_type_definitionContext *_localctx = _tracker.createInstance<Table_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 182, tsqlParser::RuleTable_type_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1780);
    match(tsqlParser::TABLE);
    setState(1781);
    match(tsqlParser::LR_BRACKET);
    setState(1782);
    column_def_table_constraints();
    setState(1783);
    match(tsqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Column_def_table_constraintsContext ------------------------------------------------------------------

tsqlParser::Column_def_table_constraintsContext::Column_def_table_constraintsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tsqlParser::Column_def_table_constraintContext *> tsqlParser::Column_def_table_constraintsContext::column_def_table_constraint() {
  return getRuleContexts<tsqlParser::Column_def_table_constraintContext>();
}

tsqlParser::Column_def_table_constraintContext* tsqlParser::Column_def_table_constraintsContext::column_def_table_constraint(size_t i) {
  return getRuleContext<tsqlParser::Column_def_table_constraintContext>(i);
}

std::vector<tree::TerminalNode *> tsqlParser::Column_def_table_constraintsContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Column_def_table_constraintsContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::Column_def_table_constraintsContext::getRuleIndex() const {
  return tsqlParser::RuleColumn_def_table_constraints;
}


std::any tsqlParser::Column_def_table_constraintsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitColumn_def_table_constraints(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Column_def_table_constraintsContext* tsqlParser::column_def_table_constraints() {
  Column_def_table_constraintsContext *_localctx = _tracker.createInstance<Column_def_table_constraintsContext>(_ctx, getState());
  enterRule(_localctx, 184, tsqlParser::RuleColumn_def_table_constraints);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1785);
    column_def_table_constraint();
    setState(1792);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 250, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1787);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == tsqlParser::COMMA) {
          setState(1786);
          match(tsqlParser::COMMA);
        }
        setState(1789);
        column_def_table_constraint(); 
      }
      setState(1794);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 250, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Column_def_table_constraintContext ------------------------------------------------------------------

tsqlParser::Column_def_table_constraintContext::Column_def_table_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::Column_definitionContext* tsqlParser::Column_def_table_constraintContext::column_definition() {
  return getRuleContext<tsqlParser::Column_definitionContext>(0);
}

tsqlParser::Table_constraintContext* tsqlParser::Column_def_table_constraintContext::table_constraint() {
  return getRuleContext<tsqlParser::Table_constraintContext>(0);
}


size_t tsqlParser::Column_def_table_constraintContext::getRuleIndex() const {
  return tsqlParser::RuleColumn_def_table_constraint;
}


std::any tsqlParser::Column_def_table_constraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitColumn_def_table_constraint(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Column_def_table_constraintContext* tsqlParser::column_def_table_constraint() {
  Column_def_table_constraintContext *_localctx = _tracker.createInstance<Column_def_table_constraintContext>(_ctx, getState());
  enterRule(_localctx, 186, tsqlParser::RuleColumn_def_table_constraint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1797);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::FILLFACTOR:
      case tsqlParser::FORCESEEK:
      case tsqlParser::NEXT:
      case tsqlParser::NUMERIC:
      case tsqlParser::VALUE:
      case tsqlParser::ABSOLUTE:
      case tsqlParser::APPLY:
      case tsqlParser::AUTO:
      case tsqlParser::AVG:
      case tsqlParser::BASE64:
      case tsqlParser::CALLER:
      case tsqlParser::CAST:
      case tsqlParser::CATCH:
      case tsqlParser::CHECKSUM_AGG:
      case tsqlParser::COMMITTED:
      case tsqlParser::CONCAT:
      case tsqlParser::CONTROL:
      case tsqlParser::COOKIE:
      case tsqlParser::COUNT:
      case tsqlParser::COUNT_BIG:
      case tsqlParser::DATE:
      case tsqlParser::DELAY:
      case tsqlParser::DELETED:
      case tsqlParser::DENSE_RANK:
      case tsqlParser::DISABLE:
      case tsqlParser::DYNAMIC:
      case tsqlParser::ENCRYPTION:
      case tsqlParser::EXIST:
      case tsqlParser::EXPAND:
      case tsqlParser::FAST:
      case tsqlParser::FAST_FORWARD:
      case tsqlParser::FIRST:
      case tsqlParser::FIRST_VALUE:
      case tsqlParser::FOLLOWING:
      case tsqlParser::FORCE:
      case tsqlParser::FORCED:
      case tsqlParser::FORWARD_ONLY:
      case tsqlParser::FULLSCAN:
      case tsqlParser::GLOBAL:
      case tsqlParser::GROUPING:
      case tsqlParser::GROUPING_ID:
      case tsqlParser::HASH:
      case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
      case tsqlParser::IMPERSONATE:
      case tsqlParser::INSENSITIVE:
      case tsqlParser::INSERTED:
      case tsqlParser::ISOLATION:
      case tsqlParser::IO:
      case tsqlParser::KEEP:
      case tsqlParser::KEEPFIXED:
      case tsqlParser::KEYSET:
      case tsqlParser::LAG:
      case tsqlParser::LAST:
      case tsqlParser::LAST_VALUE:
      case tsqlParser::LEAD:
      case tsqlParser::LEVEL:
      case tsqlParser::LOCAL:
      case tsqlParser::LOCK_ESCALATION:
      case tsqlParser::LOGIN:
      case tsqlParser::LOOP:
      case tsqlParser::MARK:
      case tsqlParser::MAX:
      case tsqlParser::MAXDOP:
      case tsqlParser::MAXRECURSION:
      case tsqlParser::MIN:
      case tsqlParser::MODIFY:
      case tsqlParser::NAME:
      case tsqlParser::NOCOUNT:
      case tsqlParser::NODES:
      case tsqlParser::NOEXPAND:
      case tsqlParser::NORECOMPUTE:
      case tsqlParser::NTILE:
      case tsqlParser::NUMBER:
      case tsqlParser::OFFSET:
      case tsqlParser::ONLINE:
      case tsqlParser::ONLY:
      case tsqlParser::OPTIMISTIC:
      case tsqlParser::OPTIMIZE:
      case tsqlParser::OUT:
      case tsqlParser::OUTPUT:
      case tsqlParser::OWNER:
      case tsqlParser::PARAMETERIZATION:
      case tsqlParser::PARTITION:
      case tsqlParser::PATH:
      case tsqlParser::PRECEDING:
      case tsqlParser::PRIOR:
      case tsqlParser::PRIVILEGES:
      case tsqlParser::QUERY:
      case tsqlParser::RANGE:
      case tsqlParser::RANK:
      case tsqlParser::READONLY:
      case tsqlParser::READ_ONLY:
      case tsqlParser::RECOMPILE:
      case tsqlParser::RELATIVE:
      case tsqlParser::REMOTE:
      case tsqlParser::REPEATABLE:
      case tsqlParser::ROBUST:
      case tsqlParser::ROOT:
      case tsqlParser::ROW:
      case tsqlParser::ROWGUID:
      case tsqlParser::ROWS:
      case tsqlParser::ROW_NUMBER:
      case tsqlParser::SAMPLE:
      case tsqlParser::SCHEMABINDING:
      case tsqlParser::SCROLL:
      case tsqlParser::SCROLL_LOCKS:
      case tsqlParser::SELF:
      case tsqlParser::SERIALIZABLE:
      case tsqlParser::SIMPLE:
      case tsqlParser::SIZE:
      case tsqlParser::SNAPSHOT:
      case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
      case tsqlParser::STATIC:
      case tsqlParser::STATS_STREAM:
      case tsqlParser::STDEV:
      case tsqlParser::STDEVP:
      case tsqlParser::SUM:
      case tsqlParser::TEXTIMAGE_ON:
      case tsqlParser::THROW:
      case tsqlParser::TIES:
      case tsqlParser::TIME:
      case tsqlParser::TRY:
      case tsqlParser::TYPE:
      case tsqlParser::TYPE_WARNING:
      case tsqlParser::UNBOUNDED:
      case tsqlParser::UNCOMMITTED:
      case tsqlParser::UNKNOWN:
      case tsqlParser::USING:
      case tsqlParser::VAR:
      case tsqlParser::VARP:
      case tsqlParser::VIEWS:
      case tsqlParser::VIEW_METADATA:
      case tsqlParser::WORK:
      case tsqlParser::XML:
      case tsqlParser::XMLNAMESPACES:
      case tsqlParser::ZONE:
      case tsqlParser::DOUBLE_QUOTE_ID:
      case tsqlParser::SQUARE_BRACKET_ID:
      case tsqlParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(1795);
        column_definition();
        break;
      }

      case tsqlParser::CHECK:
      case tsqlParser::CONSTRAINT:
      case tsqlParser::FOREIGN:
      case tsqlParser::PRIMARY:
      case tsqlParser::UNIQUE: {
        enterOuterAlt(_localctx, 2);
        setState(1796);
        table_constraint();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Column_definitionContext ------------------------------------------------------------------

tsqlParser::Column_definitionContext::Column_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tsqlParser::R_idContext *> tsqlParser::Column_definitionContext::r_id() {
  return getRuleContexts<tsqlParser::R_idContext>();
}

tsqlParser::R_idContext* tsqlParser::Column_definitionContext::r_id(size_t i) {
  return getRuleContext<tsqlParser::R_idContext>(i);
}

tsqlParser::Data_typeContext* tsqlParser::Column_definitionContext::data_type() {
  return getRuleContext<tsqlParser::Data_typeContext>(0);
}

tree::TerminalNode* tsqlParser::Column_definitionContext::AS() {
  return getToken(tsqlParser::AS, 0);
}

tsqlParser::ExpressionContext* tsqlParser::Column_definitionContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

tree::TerminalNode* tsqlParser::Column_definitionContext::COLLATE() {
  return getToken(tsqlParser::COLLATE, 0);
}

tsqlParser::Null_notnullContext* tsqlParser::Column_definitionContext::null_notnull() {
  return getRuleContext<tsqlParser::Null_notnullContext>(0);
}

tree::TerminalNode* tsqlParser::Column_definitionContext::DEFAULT() {
  return getToken(tsqlParser::DEFAULT, 0);
}

tsqlParser::Constant_expressionContext* tsqlParser::Column_definitionContext::constant_expression() {
  return getRuleContext<tsqlParser::Constant_expressionContext>(0);
}

tree::TerminalNode* tsqlParser::Column_definitionContext::IDENTITY() {
  return getToken(tsqlParser::IDENTITY, 0);
}

tree::TerminalNode* tsqlParser::Column_definitionContext::ROWGUIDCOL() {
  return getToken(tsqlParser::ROWGUIDCOL, 0);
}

std::vector<tsqlParser::Column_constraintContext *> tsqlParser::Column_definitionContext::column_constraint() {
  return getRuleContexts<tsqlParser::Column_constraintContext>();
}

tsqlParser::Column_constraintContext* tsqlParser::Column_definitionContext::column_constraint(size_t i) {
  return getRuleContext<tsqlParser::Column_constraintContext>(i);
}

tree::TerminalNode* tsqlParser::Column_definitionContext::CONSTRAINT() {
  return getToken(tsqlParser::CONSTRAINT, 0);
}

tree::TerminalNode* tsqlParser::Column_definitionContext::WITH() {
  return getToken(tsqlParser::WITH, 0);
}

tree::TerminalNode* tsqlParser::Column_definitionContext::VALUES() {
  return getToken(tsqlParser::VALUES, 0);
}

tree::TerminalNode* tsqlParser::Column_definitionContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Column_definitionContext::COMMA() {
  return getToken(tsqlParser::COMMA, 0);
}

tree::TerminalNode* tsqlParser::Column_definitionContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Column_definitionContext::NOT() {
  return getToken(tsqlParser::NOT, 0);
}

tree::TerminalNode* tsqlParser::Column_definitionContext::FOR() {
  return getToken(tsqlParser::FOR, 0);
}

tree::TerminalNode* tsqlParser::Column_definitionContext::REPLICATION() {
  return getToken(tsqlParser::REPLICATION, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Column_definitionContext::DECIMAL() {
  return getTokens(tsqlParser::DECIMAL);
}

tree::TerminalNode* tsqlParser::Column_definitionContext::DECIMAL(size_t i) {
  return getToken(tsqlParser::DECIMAL, i);
}


size_t tsqlParser::Column_definitionContext::getRuleIndex() const {
  return tsqlParser::RuleColumn_definition;
}


std::any tsqlParser::Column_definitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitColumn_definition(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Column_definitionContext* tsqlParser::column_definition() {
  Column_definitionContext *_localctx = _tracker.createInstance<Column_definitionContext>(_ctx, getState());
  enterRule(_localctx, 188, tsqlParser::RuleColumn_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1799);
    r_id();
    setState(1803);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::DOUBLE:
      case tsqlParser::FILLFACTOR:
      case tsqlParser::FORCESEEK:
      case tsqlParser::NEXT:
      case tsqlParser::NUMERIC:
      case tsqlParser::VALUE:
      case tsqlParser::ABSOLUTE:
      case tsqlParser::APPLY:
      case tsqlParser::AUTO:
      case tsqlParser::AVG:
      case tsqlParser::BASE64:
      case tsqlParser::BIGINT:
      case tsqlParser::CALLER:
      case tsqlParser::CAST:
      case tsqlParser::CATCH:
      case tsqlParser::CHECKSUM_AGG:
      case tsqlParser::COMMITTED:
      case tsqlParser::CONCAT:
      case tsqlParser::CONTROL:
      case tsqlParser::COOKIE:
      case tsqlParser::COUNT:
      case tsqlParser::COUNT_BIG:
      case tsqlParser::DATE:
      case tsqlParser::DATETIME2:
      case tsqlParser::DELAY:
      case tsqlParser::DELETED:
      case tsqlParser::DENSE_RANK:
      case tsqlParser::DISABLE:
      case tsqlParser::DYNAMIC:
      case tsqlParser::ENCRYPTION:
      case tsqlParser::EXIST:
      case tsqlParser::EXPAND:
      case tsqlParser::FAST:
      case tsqlParser::FAST_FORWARD:
      case tsqlParser::FIRST:
      case tsqlParser::FIRST_VALUE:
      case tsqlParser::FOLLOWING:
      case tsqlParser::FORCE:
      case tsqlParser::FORCED:
      case tsqlParser::FORWARD_ONLY:
      case tsqlParser::FULLSCAN:
      case tsqlParser::GLOBAL:
      case tsqlParser::GROUPING:
      case tsqlParser::GROUPING_ID:
      case tsqlParser::HASH:
      case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
      case tsqlParser::IMPERSONATE:
      case tsqlParser::INT:
      case tsqlParser::INSENSITIVE:
      case tsqlParser::INSERTED:
      case tsqlParser::ISOLATION:
      case tsqlParser::IO:
      case tsqlParser::KEEP:
      case tsqlParser::KEEPFIXED:
      case tsqlParser::KEYSET:
      case tsqlParser::LAG:
      case tsqlParser::LAST:
      case tsqlParser::LAST_VALUE:
      case tsqlParser::LEAD:
      case tsqlParser::LEVEL:
      case tsqlParser::LOCAL:
      case tsqlParser::LOCK_ESCALATION:
      case tsqlParser::LOGIN:
      case tsqlParser::LOOP:
      case tsqlParser::MARK:
      case tsqlParser::MAX:
      case tsqlParser::MAXDOP:
      case tsqlParser::MAXRECURSION:
      case tsqlParser::MIN:
      case tsqlParser::MODIFY:
      case tsqlParser::NAME:
      case tsqlParser::NOCOUNT:
      case tsqlParser::NODES:
      case tsqlParser::NOEXPAND:
      case tsqlParser::NORECOMPUTE:
      case tsqlParser::NTILE:
      case tsqlParser::NUMBER:
      case tsqlParser::OFFSET:
      case tsqlParser::ONLINE:
      case tsqlParser::ONLY:
      case tsqlParser::OPTIMISTIC:
      case tsqlParser::OPTIMIZE:
      case tsqlParser::OUT:
      case tsqlParser::OUTPUT:
      case tsqlParser::OWNER:
      case tsqlParser::PARAMETERIZATION:
      case tsqlParser::PARTITION:
      case tsqlParser::PATH:
      case tsqlParser::PRECEDING:
      case tsqlParser::PRIOR:
      case tsqlParser::PRIVILEGES:
      case tsqlParser::QUERY:
      case tsqlParser::RANGE:
      case tsqlParser::RANK:
      case tsqlParser::READONLY:
      case tsqlParser::READ_ONLY:
      case tsqlParser::RECOMPILE:
      case tsqlParser::RELATIVE:
      case tsqlParser::REMOTE:
      case tsqlParser::REPEATABLE:
      case tsqlParser::ROBUST:
      case tsqlParser::ROOT:
      case tsqlParser::ROW:
      case tsqlParser::ROWGUID:
      case tsqlParser::ROWS:
      case tsqlParser::ROW_NUMBER:
      case tsqlParser::SAMPLE:
      case tsqlParser::SCHEMABINDING:
      case tsqlParser::SCROLL:
      case tsqlParser::SCROLL_LOCKS:
      case tsqlParser::SELF:
      case tsqlParser::SERIALIZABLE:
      case tsqlParser::SIMPLE:
      case tsqlParser::SIZE:
      case tsqlParser::SMALLINT:
      case tsqlParser::SNAPSHOT:
      case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
      case tsqlParser::STATIC:
      case tsqlParser::STATS_STREAM:
      case tsqlParser::STDEV:
      case tsqlParser::STDEVP:
      case tsqlParser::SUM:
      case tsqlParser::TEXTIMAGE_ON:
      case tsqlParser::THROW:
      case tsqlParser::TIES:
      case tsqlParser::TIME:
      case tsqlParser::TINYINT:
      case tsqlParser::TRY:
      case tsqlParser::TYPE:
      case tsqlParser::TYPE_WARNING:
      case tsqlParser::UNBOUNDED:
      case tsqlParser::UNCOMMITTED:
      case tsqlParser::UNKNOWN:
      case tsqlParser::USING:
      case tsqlParser::VAR:
      case tsqlParser::VARP:
      case tsqlParser::VIEWS:
      case tsqlParser::VIEW_METADATA:
      case tsqlParser::WORK:
      case tsqlParser::XML:
      case tsqlParser::XMLNAMESPACES:
      case tsqlParser::ZONE:
      case tsqlParser::DOUBLE_QUOTE_ID:
      case tsqlParser::SQUARE_BRACKET_ID:
      case tsqlParser::ID: {
        setState(1800);
        data_type();
        break;
      }

      case tsqlParser::AS: {
        setState(1801);
        match(tsqlParser::AS);
        setState(1802);
        expression(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1807);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::COLLATE) {
      setState(1805);
      match(tsqlParser::COLLATE);
      setState(1806);
      r_id();
    }
    setState(1810);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 254, _ctx)) {
    case 1: {
      setState(1809);
      null_notnull();
      break;
    }

    default:
      break;
    }
    setState(1835);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 259, _ctx)) {
    case 1: {
      setState(1814);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::CONSTRAINT) {
        setState(1812);
        match(tsqlParser::CONSTRAINT);
        setState(1813);
        antlrcpp::downCast<Column_definitionContext *>(_localctx)->constraint = r_id();
      }
      setState(1816);
      match(tsqlParser::DEFAULT);
      setState(1817);
      constant_expression();
      setState(1820);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 256, _ctx)) {
      case 1: {
        setState(1818);
        match(tsqlParser::WITH);
        setState(1819);
        match(tsqlParser::VALUES);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      setState(1822);
      match(tsqlParser::IDENTITY);
      setState(1828);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 257, _ctx)) {
      case 1: {
        setState(1823);
        match(tsqlParser::LR_BRACKET);
        setState(1824);
        antlrcpp::downCast<Column_definitionContext *>(_localctx)->seed = match(tsqlParser::DECIMAL);
        setState(1825);
        match(tsqlParser::COMMA);
        setState(1826);
        antlrcpp::downCast<Column_definitionContext *>(_localctx)->increment = match(tsqlParser::DECIMAL);
        setState(1827);
        match(tsqlParser::RR_BRACKET);
        break;
      }

      default:
        break;
      }
      setState(1833);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 258, _ctx)) {
      case 1: {
        setState(1830);
        match(tsqlParser::NOT);
        setState(1831);
        match(tsqlParser::FOR);
        setState(1832);
        match(tsqlParser::REPLICATION);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
    setState(1838);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::ROWGUIDCOL) {
      setState(1837);
      match(tsqlParser::ROWGUIDCOL);
    }
    setState(1843);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 261, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1840);
        column_constraint(); 
      }
      setState(1845);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 261, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Column_constraintContext ------------------------------------------------------------------

tsqlParser::Column_constraintContext::Column_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Column_constraintContext::CHECK() {
  return getToken(tsqlParser::CHECK, 0);
}

tree::TerminalNode* tsqlParser::Column_constraintContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tsqlParser::Search_conditionContext* tsqlParser::Column_constraintContext::search_condition() {
  return getRuleContext<tsqlParser::Search_conditionContext>(0);
}

tree::TerminalNode* tsqlParser::Column_constraintContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Column_constraintContext::CONSTRAINT() {
  return getToken(tsqlParser::CONSTRAINT, 0);
}

tsqlParser::R_idContext* tsqlParser::Column_constraintContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tsqlParser::Null_notnullContext* tsqlParser::Column_constraintContext::null_notnull() {
  return getRuleContext<tsqlParser::Null_notnullContext>(0);
}

tree::TerminalNode* tsqlParser::Column_constraintContext::PRIMARY() {
  return getToken(tsqlParser::PRIMARY, 0);
}

tree::TerminalNode* tsqlParser::Column_constraintContext::KEY() {
  return getToken(tsqlParser::KEY, 0);
}

tree::TerminalNode* tsqlParser::Column_constraintContext::UNIQUE() {
  return getToken(tsqlParser::UNIQUE, 0);
}

tsqlParser::ClusteredContext* tsqlParser::Column_constraintContext::clustered() {
  return getRuleContext<tsqlParser::ClusteredContext>(0);
}

tsqlParser::Index_optionsContext* tsqlParser::Column_constraintContext::index_options() {
  return getRuleContext<tsqlParser::Index_optionsContext>(0);
}

tree::TerminalNode* tsqlParser::Column_constraintContext::NOT() {
  return getToken(tsqlParser::NOT, 0);
}

tree::TerminalNode* tsqlParser::Column_constraintContext::FOR() {
  return getToken(tsqlParser::FOR, 0);
}

tree::TerminalNode* tsqlParser::Column_constraintContext::REPLICATION() {
  return getToken(tsqlParser::REPLICATION, 0);
}


size_t tsqlParser::Column_constraintContext::getRuleIndex() const {
  return tsqlParser::RuleColumn_constraint;
}


std::any tsqlParser::Column_constraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitColumn_constraint(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Column_constraintContext* tsqlParser::column_constraint() {
  Column_constraintContext *_localctx = _tracker.createInstance<Column_constraintContext>(_ctx, getState());
  enterRule(_localctx, 190, tsqlParser::RuleColumn_constraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1848);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::CONSTRAINT) {
      setState(1846);
      match(tsqlParser::CONSTRAINT);
      setState(1847);
      r_id();
    }
    setState(1851);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::NOT

    || _la == tsqlParser::NULL_) {
      setState(1850);
      null_notnull();
    }
    setState(1874);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::PRIMARY:
      case tsqlParser::UNIQUE: {
        setState(1856);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case tsqlParser::PRIMARY: {
            setState(1853);
            match(tsqlParser::PRIMARY);
            setState(1854);
            match(tsqlParser::KEY);
            break;
          }

          case tsqlParser::UNIQUE: {
            setState(1855);
            match(tsqlParser::UNIQUE);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1859);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == tsqlParser::CLUSTERED || _la == tsqlParser::NONCLUSTERED) {
          setState(1858);
          clustered();
        }
        setState(1862);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 266, _ctx)) {
        case 1: {
          setState(1861);
          index_options();
          break;
        }

        default:
          break;
        }
        break;
      }

      case tsqlParser::CHECK: {
        setState(1864);
        match(tsqlParser::CHECK);
        setState(1868);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == tsqlParser::NOT) {
          setState(1865);
          match(tsqlParser::NOT);
          setState(1866);
          match(tsqlParser::FOR);
          setState(1867);
          match(tsqlParser::REPLICATION);
        }
        setState(1870);
        match(tsqlParser::LR_BRACKET);
        setState(1871);
        search_condition(0);
        setState(1872);
        match(tsqlParser::RR_BRACKET);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_constraintContext ------------------------------------------------------------------

tsqlParser::Table_constraintContext::Table_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> tsqlParser::Table_constraintContext::LR_BRACKET() {
  return getTokens(tsqlParser::LR_BRACKET);
}

tree::TerminalNode* tsqlParser::Table_constraintContext::LR_BRACKET(size_t i) {
  return getToken(tsqlParser::LR_BRACKET, i);
}

std::vector<tsqlParser::R_idContext *> tsqlParser::Table_constraintContext::r_id() {
  return getRuleContexts<tsqlParser::R_idContext>();
}

tsqlParser::R_idContext* tsqlParser::Table_constraintContext::r_id(size_t i) {
  return getRuleContext<tsqlParser::R_idContext>(i);
}

std::vector<tree::TerminalNode *> tsqlParser::Table_constraintContext::RR_BRACKET() {
  return getTokens(tsqlParser::RR_BRACKET);
}

tree::TerminalNode* tsqlParser::Table_constraintContext::RR_BRACKET(size_t i) {
  return getToken(tsqlParser::RR_BRACKET, i);
}

tree::TerminalNode* tsqlParser::Table_constraintContext::FOREIGN() {
  return getToken(tsqlParser::FOREIGN, 0);
}

tree::TerminalNode* tsqlParser::Table_constraintContext::KEY() {
  return getToken(tsqlParser::KEY, 0);
}

tree::TerminalNode* tsqlParser::Table_constraintContext::REFERENCES() {
  return getToken(tsqlParser::REFERENCES, 0);
}

tsqlParser::Full_table_nameContext* tsqlParser::Table_constraintContext::full_table_name() {
  return getRuleContext<tsqlParser::Full_table_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Table_constraintContext::CHECK() {
  return getToken(tsqlParser::CHECK, 0);
}

tsqlParser::Search_conditionContext* tsqlParser::Table_constraintContext::search_condition() {
  return getRuleContext<tsqlParser::Search_conditionContext>(0);
}

tree::TerminalNode* tsqlParser::Table_constraintContext::CONSTRAINT() {
  return getToken(tsqlParser::CONSTRAINT, 0);
}

std::vector<tsqlParser::Column_name_listContext *> tsqlParser::Table_constraintContext::column_name_list() {
  return getRuleContexts<tsqlParser::Column_name_listContext>();
}

tsqlParser::Column_name_listContext* tsqlParser::Table_constraintContext::column_name_list(size_t i) {
  return getRuleContext<tsqlParser::Column_name_listContext>(i);
}

tree::TerminalNode* tsqlParser::Table_constraintContext::PRIMARY() {
  return getToken(tsqlParser::PRIMARY, 0);
}

tree::TerminalNode* tsqlParser::Table_constraintContext::UNIQUE() {
  return getToken(tsqlParser::UNIQUE, 0);
}

tsqlParser::ClusteredContext* tsqlParser::Table_constraintContext::clustered() {
  return getRuleContext<tsqlParser::ClusteredContext>(0);
}

std::vector<tree::TerminalNode *> tsqlParser::Table_constraintContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Table_constraintContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}

tsqlParser::Index_optionsContext* tsqlParser::Table_constraintContext::index_options() {
  return getRuleContext<tsqlParser::Index_optionsContext>(0);
}

tree::TerminalNode* tsqlParser::Table_constraintContext::ON() {
  return getToken(tsqlParser::ON, 0);
}

tree::TerminalNode* tsqlParser::Table_constraintContext::NOT() {
  return getToken(tsqlParser::NOT, 0);
}

tree::TerminalNode* tsqlParser::Table_constraintContext::FOR() {
  return getToken(tsqlParser::FOR, 0);
}

tree::TerminalNode* tsqlParser::Table_constraintContext::REPLICATION() {
  return getToken(tsqlParser::REPLICATION, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Table_constraintContext::ASC() {
  return getTokens(tsqlParser::ASC);
}

tree::TerminalNode* tsqlParser::Table_constraintContext::ASC(size_t i) {
  return getToken(tsqlParser::ASC, i);
}

std::vector<tree::TerminalNode *> tsqlParser::Table_constraintContext::DESC() {
  return getTokens(tsqlParser::DESC);
}

tree::TerminalNode* tsqlParser::Table_constraintContext::DESC(size_t i) {
  return getToken(tsqlParser::DESC, i);
}


size_t tsqlParser::Table_constraintContext::getRuleIndex() const {
  return tsqlParser::RuleTable_constraint;
}


std::any tsqlParser::Table_constraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitTable_constraint(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Table_constraintContext* tsqlParser::table_constraint() {
  Table_constraintContext *_localctx = _tracker.createInstance<Table_constraintContext>(_ctx, getState());
  enterRule(_localctx, 192, tsqlParser::RuleTable_constraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1878);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::CONSTRAINT) {
      setState(1876);
      match(tsqlParser::CONSTRAINT);
      setState(1877);
      r_id();
    }
    setState(1932);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::PRIMARY:
      case tsqlParser::UNIQUE: {
        setState(1883);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case tsqlParser::PRIMARY: {
            setState(1880);
            match(tsqlParser::PRIMARY);
            setState(1881);
            match(tsqlParser::KEY);
            break;
          }

          case tsqlParser::UNIQUE: {
            setState(1882);
            match(tsqlParser::UNIQUE);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1886);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == tsqlParser::CLUSTERED || _la == tsqlParser::NONCLUSTERED) {
          setState(1885);
          clustered();
        }
        setState(1888);
        match(tsqlParser::LR_BRACKET);
        setState(1889);
        r_id();
        setState(1891);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == tsqlParser::ASC

        || _la == tsqlParser::DESC) {
          setState(1890);
          _la = _input->LA(1);
          if (!(_la == tsqlParser::ASC

          || _la == tsqlParser::DESC)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(1900);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == tsqlParser::COMMA) {
          setState(1893);
          match(tsqlParser::COMMA);
          setState(1894);
          r_id();
          setState(1896);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == tsqlParser::ASC

          || _la == tsqlParser::DESC) {
            setState(1895);
            _la = _input->LA(1);
            if (!(_la == tsqlParser::ASC

            || _la == tsqlParser::DESC)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
          }
          setState(1902);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1903);
        match(tsqlParser::RR_BRACKET);
        setState(1905);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 275, _ctx)) {
        case 1: {
          setState(1904);
          index_options();
          break;
        }

        default:
          break;
        }
        setState(1909);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == tsqlParser::ON) {
          setState(1907);
          match(tsqlParser::ON);
          setState(1908);
          r_id();
        }
        break;
      }

      case tsqlParser::FOREIGN: {
        setState(1911);
        match(tsqlParser::FOREIGN);
        setState(1912);
        match(tsqlParser::KEY);
        setState(1913);
        match(tsqlParser::LR_BRACKET);
        setState(1914);
        antlrcpp::downCast<Table_constraintContext *>(_localctx)->fk = column_name_list();
        setState(1915);
        match(tsqlParser::RR_BRACKET);
        setState(1916);
        match(tsqlParser::REFERENCES);
        setState(1917);
        full_table_name();
        setState(1918);
        match(tsqlParser::LR_BRACKET);
        setState(1919);
        antlrcpp::downCast<Table_constraintContext *>(_localctx)->pk = column_name_list();
        setState(1920);
        match(tsqlParser::RR_BRACKET);
        break;
      }

      case tsqlParser::CHECK: {
        setState(1922);
        match(tsqlParser::CHECK);
        setState(1926);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == tsqlParser::NOT) {
          setState(1923);
          match(tsqlParser::NOT);
          setState(1924);
          match(tsqlParser::FOR);
          setState(1925);
          match(tsqlParser::REPLICATION);
        }
        setState(1928);
        match(tsqlParser::LR_BRACKET);
        setState(1929);
        search_condition(0);
        setState(1930);
        match(tsqlParser::RR_BRACKET);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Index_optionsContext ------------------------------------------------------------------

tsqlParser::Index_optionsContext::Index_optionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Index_optionsContext::WITH() {
  return getToken(tsqlParser::WITH, 0);
}

tree::TerminalNode* tsqlParser::Index_optionsContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

std::vector<tsqlParser::Index_optionContext *> tsqlParser::Index_optionsContext::index_option() {
  return getRuleContexts<tsqlParser::Index_optionContext>();
}

tsqlParser::Index_optionContext* tsqlParser::Index_optionsContext::index_option(size_t i) {
  return getRuleContext<tsqlParser::Index_optionContext>(i);
}

tree::TerminalNode* tsqlParser::Index_optionsContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Index_optionsContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Index_optionsContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::Index_optionsContext::getRuleIndex() const {
  return tsqlParser::RuleIndex_options;
}


std::any tsqlParser::Index_optionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitIndex_options(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Index_optionsContext* tsqlParser::index_options() {
  Index_optionsContext *_localctx = _tracker.createInstance<Index_optionsContext>(_ctx, getState());
  enterRule(_localctx, 194, tsqlParser::RuleIndex_options);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1934);
    match(tsqlParser::WITH);
    setState(1935);
    match(tsqlParser::LR_BRACKET);
    setState(1936);
    index_option();
    setState(1941);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == tsqlParser::COMMA) {
      setState(1937);
      match(tsqlParser::COMMA);
      setState(1938);
      index_option();
      setState(1943);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1944);
    match(tsqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Index_optionContext ------------------------------------------------------------------

tsqlParser::Index_optionContext::Index_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tsqlParser::Simple_idContext *> tsqlParser::Index_optionContext::simple_id() {
  return getRuleContexts<tsqlParser::Simple_idContext>();
}

tsqlParser::Simple_idContext* tsqlParser::Index_optionContext::simple_id(size_t i) {
  return getRuleContext<tsqlParser::Simple_idContext>(i);
}

tree::TerminalNode* tsqlParser::Index_optionContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

tsqlParser::On_offContext* tsqlParser::Index_optionContext::on_off() {
  return getRuleContext<tsqlParser::On_offContext>(0);
}

tree::TerminalNode* tsqlParser::Index_optionContext::DECIMAL() {
  return getToken(tsqlParser::DECIMAL, 0);
}


size_t tsqlParser::Index_optionContext::getRuleIndex() const {
  return tsqlParser::RuleIndex_option;
}


std::any tsqlParser::Index_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitIndex_option(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Index_optionContext* tsqlParser::index_option() {
  Index_optionContext *_localctx = _tracker.createInstance<Index_optionContext>(_ctx, getState());
  enterRule(_localctx, 196, tsqlParser::RuleIndex_option);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1946);
    simple_id();
    setState(1947);
    match(tsqlParser::EQUAL);
    setState(1951);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::FILLFACTOR:
      case tsqlParser::FORCESEEK:
      case tsqlParser::NEXT:
      case tsqlParser::NUMERIC:
      case tsqlParser::VALUE:
      case tsqlParser::ABSOLUTE:
      case tsqlParser::APPLY:
      case tsqlParser::AUTO:
      case tsqlParser::AVG:
      case tsqlParser::BASE64:
      case tsqlParser::CALLER:
      case tsqlParser::CAST:
      case tsqlParser::CATCH:
      case tsqlParser::CHECKSUM_AGG:
      case tsqlParser::COMMITTED:
      case tsqlParser::CONCAT:
      case tsqlParser::CONTROL:
      case tsqlParser::COOKIE:
      case tsqlParser::COUNT:
      case tsqlParser::COUNT_BIG:
      case tsqlParser::DATE:
      case tsqlParser::DELAY:
      case tsqlParser::DELETED:
      case tsqlParser::DENSE_RANK:
      case tsqlParser::DISABLE:
      case tsqlParser::DYNAMIC:
      case tsqlParser::ENCRYPTION:
      case tsqlParser::EXIST:
      case tsqlParser::EXPAND:
      case tsqlParser::FAST:
      case tsqlParser::FAST_FORWARD:
      case tsqlParser::FIRST:
      case tsqlParser::FIRST_VALUE:
      case tsqlParser::FOLLOWING:
      case tsqlParser::FORCE:
      case tsqlParser::FORCED:
      case tsqlParser::FORWARD_ONLY:
      case tsqlParser::FULLSCAN:
      case tsqlParser::GLOBAL:
      case tsqlParser::GROUPING:
      case tsqlParser::GROUPING_ID:
      case tsqlParser::HASH:
      case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
      case tsqlParser::IMPERSONATE:
      case tsqlParser::INSENSITIVE:
      case tsqlParser::INSERTED:
      case tsqlParser::ISOLATION:
      case tsqlParser::IO:
      case tsqlParser::KEEP:
      case tsqlParser::KEEPFIXED:
      case tsqlParser::KEYSET:
      case tsqlParser::LAG:
      case tsqlParser::LAST:
      case tsqlParser::LAST_VALUE:
      case tsqlParser::LEAD:
      case tsqlParser::LEVEL:
      case tsqlParser::LOCAL:
      case tsqlParser::LOCK_ESCALATION:
      case tsqlParser::LOGIN:
      case tsqlParser::LOOP:
      case tsqlParser::MARK:
      case tsqlParser::MAX:
      case tsqlParser::MAXDOP:
      case tsqlParser::MAXRECURSION:
      case tsqlParser::MIN:
      case tsqlParser::MODIFY:
      case tsqlParser::NAME:
      case tsqlParser::NOCOUNT:
      case tsqlParser::NODES:
      case tsqlParser::NOEXPAND:
      case tsqlParser::NORECOMPUTE:
      case tsqlParser::NTILE:
      case tsqlParser::NUMBER:
      case tsqlParser::OFFSET:
      case tsqlParser::ONLINE:
      case tsqlParser::ONLY:
      case tsqlParser::OPTIMISTIC:
      case tsqlParser::OPTIMIZE:
      case tsqlParser::OUT:
      case tsqlParser::OUTPUT:
      case tsqlParser::OWNER:
      case tsqlParser::PARAMETERIZATION:
      case tsqlParser::PARTITION:
      case tsqlParser::PATH:
      case tsqlParser::PRECEDING:
      case tsqlParser::PRIOR:
      case tsqlParser::PRIVILEGES:
      case tsqlParser::QUERY:
      case tsqlParser::RANGE:
      case tsqlParser::RANK:
      case tsqlParser::READONLY:
      case tsqlParser::READ_ONLY:
      case tsqlParser::RECOMPILE:
      case tsqlParser::RELATIVE:
      case tsqlParser::REMOTE:
      case tsqlParser::REPEATABLE:
      case tsqlParser::ROBUST:
      case tsqlParser::ROOT:
      case tsqlParser::ROW:
      case tsqlParser::ROWGUID:
      case tsqlParser::ROWS:
      case tsqlParser::ROW_NUMBER:
      case tsqlParser::SAMPLE:
      case tsqlParser::SCHEMABINDING:
      case tsqlParser::SCROLL:
      case tsqlParser::SCROLL_LOCKS:
      case tsqlParser::SELF:
      case tsqlParser::SERIALIZABLE:
      case tsqlParser::SIMPLE:
      case tsqlParser::SIZE:
      case tsqlParser::SNAPSHOT:
      case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
      case tsqlParser::STATIC:
      case tsqlParser::STATS_STREAM:
      case tsqlParser::STDEV:
      case tsqlParser::STDEVP:
      case tsqlParser::SUM:
      case tsqlParser::TEXTIMAGE_ON:
      case tsqlParser::THROW:
      case tsqlParser::TIES:
      case tsqlParser::TIME:
      case tsqlParser::TRY:
      case tsqlParser::TYPE:
      case tsqlParser::TYPE_WARNING:
      case tsqlParser::UNBOUNDED:
      case tsqlParser::UNCOMMITTED:
      case tsqlParser::UNKNOWN:
      case tsqlParser::USING:
      case tsqlParser::VAR:
      case tsqlParser::VARP:
      case tsqlParser::VIEWS:
      case tsqlParser::VIEW_METADATA:
      case tsqlParser::WORK:
      case tsqlParser::XML:
      case tsqlParser::XMLNAMESPACES:
      case tsqlParser::ZONE:
      case tsqlParser::ID: {
        setState(1948);
        simple_id();
        break;
      }

      case tsqlParser::OFF:
      case tsqlParser::ON: {
        setState(1949);
        on_off();
        break;
      }

      case tsqlParser::DECIMAL: {
        setState(1950);
        match(tsqlParser::DECIMAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Declare_cursorContext ------------------------------------------------------------------

tsqlParser::Declare_cursorContext::Declare_cursorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Declare_cursorContext::DECLARE() {
  return getToken(tsqlParser::DECLARE, 0);
}

tsqlParser::Cursor_nameContext* tsqlParser::Declare_cursorContext::cursor_name() {
  return getRuleContext<tsqlParser::Cursor_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Declare_cursorContext::CURSOR() {
  return getToken(tsqlParser::CURSOR, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Declare_cursorContext::FOR() {
  return getTokens(tsqlParser::FOR);
}

tree::TerminalNode* tsqlParser::Declare_cursorContext::FOR(size_t i) {
  return getToken(tsqlParser::FOR, i);
}

tsqlParser::Select_statementContext* tsqlParser::Declare_cursorContext::select_statement() {
  return getRuleContext<tsqlParser::Select_statementContext>(0);
}

tree::TerminalNode* tsqlParser::Declare_cursorContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}

tsqlParser::Declare_set_cursor_commonContext* tsqlParser::Declare_cursorContext::declare_set_cursor_common() {
  return getRuleContext<tsqlParser::Declare_set_cursor_commonContext>(0);
}

tree::TerminalNode* tsqlParser::Declare_cursorContext::INSENSITIVE() {
  return getToken(tsqlParser::INSENSITIVE, 0);
}

tree::TerminalNode* tsqlParser::Declare_cursorContext::SCROLL() {
  return getToken(tsqlParser::SCROLL, 0);
}

tree::TerminalNode* tsqlParser::Declare_cursorContext::READ() {
  return getToken(tsqlParser::READ, 0);
}

tree::TerminalNode* tsqlParser::Declare_cursorContext::ONLY() {
  return getToken(tsqlParser::ONLY, 0);
}

tree::TerminalNode* tsqlParser::Declare_cursorContext::UPDATE() {
  return getToken(tsqlParser::UPDATE, 0);
}

tree::TerminalNode* tsqlParser::Declare_cursorContext::OF() {
  return getToken(tsqlParser::OF, 0);
}

tsqlParser::Column_name_listContext* tsqlParser::Declare_cursorContext::column_name_list() {
  return getRuleContext<tsqlParser::Column_name_listContext>(0);
}


size_t tsqlParser::Declare_cursorContext::getRuleIndex() const {
  return tsqlParser::RuleDeclare_cursor;
}


std::any tsqlParser::Declare_cursorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDeclare_cursor(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Declare_cursorContext* tsqlParser::declare_cursor() {
  Declare_cursorContext *_localctx = _tracker.createInstance<Declare_cursorContext>(_ctx, getState());
  enterRule(_localctx, 198, tsqlParser::RuleDeclare_cursor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1953);
    match(tsqlParser::DECLARE);
    setState(1954);
    cursor_name();
    setState(1986);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 288, _ctx)) {
    case 1: {
      setState(1955);
      match(tsqlParser::CURSOR);
      setState(1965);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 283, _ctx)) {
      case 1: {
        setState(1956);
        declare_set_cursor_common();
        setState(1963);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == tsqlParser::FOR) {
          setState(1957);
          match(tsqlParser::FOR);
          setState(1958);
          match(tsqlParser::UPDATE);
          setState(1961);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == tsqlParser::OF) {
            setState(1959);
            match(tsqlParser::OF);
            setState(1960);
            column_name_list();
          }
        }
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      setState(1968);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::INSENSITIVE) {
        setState(1967);
        match(tsqlParser::INSENSITIVE);
      }
      setState(1971);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::SCROLL) {
        setState(1970);
        match(tsqlParser::SCROLL);
      }
      setState(1973);
      match(tsqlParser::CURSOR);
      setState(1974);
      match(tsqlParser::FOR);
      setState(1975);
      select_statement();
      setState(1984);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::FOR) {
        setState(1976);
        match(tsqlParser::FOR);
        setState(1982);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case tsqlParser::READ: {
            setState(1977);
            match(tsqlParser::READ);
            setState(1978);
            match(tsqlParser::ONLY);
            break;
          }

          case tsqlParser::UPDATE: {
            setState(1979);
            match(tsqlParser::UPDATE);
            break;
          }

          case tsqlParser::OF: {
            setState(1980);
            match(tsqlParser::OF);
            setState(1981);
            column_name_list();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
      }
      break;
    }

    default:
      break;
    }
    setState(1989);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 289, _ctx)) {
    case 1: {
      setState(1988);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Declare_set_cursor_commonContext ------------------------------------------------------------------

tsqlParser::Declare_set_cursor_commonContext::Declare_set_cursor_commonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Declare_set_cursor_commonContext::FOR() {
  return getToken(tsqlParser::FOR, 0);
}

tsqlParser::Select_statementContext* tsqlParser::Declare_set_cursor_commonContext::select_statement() {
  return getRuleContext<tsqlParser::Select_statementContext>(0);
}

tree::TerminalNode* tsqlParser::Declare_set_cursor_commonContext::TYPE_WARNING() {
  return getToken(tsqlParser::TYPE_WARNING, 0);
}

tree::TerminalNode* tsqlParser::Declare_set_cursor_commonContext::LOCAL() {
  return getToken(tsqlParser::LOCAL, 0);
}

tree::TerminalNode* tsqlParser::Declare_set_cursor_commonContext::GLOBAL() {
  return getToken(tsqlParser::GLOBAL, 0);
}

tree::TerminalNode* tsqlParser::Declare_set_cursor_commonContext::FORWARD_ONLY() {
  return getToken(tsqlParser::FORWARD_ONLY, 0);
}

tree::TerminalNode* tsqlParser::Declare_set_cursor_commonContext::SCROLL() {
  return getToken(tsqlParser::SCROLL, 0);
}

tree::TerminalNode* tsqlParser::Declare_set_cursor_commonContext::STATIC() {
  return getToken(tsqlParser::STATIC, 0);
}

tree::TerminalNode* tsqlParser::Declare_set_cursor_commonContext::KEYSET() {
  return getToken(tsqlParser::KEYSET, 0);
}

tree::TerminalNode* tsqlParser::Declare_set_cursor_commonContext::DYNAMIC() {
  return getToken(tsqlParser::DYNAMIC, 0);
}

tree::TerminalNode* tsqlParser::Declare_set_cursor_commonContext::FAST_FORWARD() {
  return getToken(tsqlParser::FAST_FORWARD, 0);
}

tree::TerminalNode* tsqlParser::Declare_set_cursor_commonContext::READ_ONLY() {
  return getToken(tsqlParser::READ_ONLY, 0);
}

tree::TerminalNode* tsqlParser::Declare_set_cursor_commonContext::SCROLL_LOCKS() {
  return getToken(tsqlParser::SCROLL_LOCKS, 0);
}

tree::TerminalNode* tsqlParser::Declare_set_cursor_commonContext::OPTIMISTIC() {
  return getToken(tsqlParser::OPTIMISTIC, 0);
}


size_t tsqlParser::Declare_set_cursor_commonContext::getRuleIndex() const {
  return tsqlParser::RuleDeclare_set_cursor_common;
}


std::any tsqlParser::Declare_set_cursor_commonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDeclare_set_cursor_common(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Declare_set_cursor_commonContext* tsqlParser::declare_set_cursor_common() {
  Declare_set_cursor_commonContext *_localctx = _tracker.createInstance<Declare_set_cursor_commonContext>(_ctx, getState());
  enterRule(_localctx, 200, tsqlParser::RuleDeclare_set_cursor_common);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1992);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::GLOBAL

    || _la == tsqlParser::LOCAL) {
      setState(1991);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::GLOBAL

      || _la == tsqlParser::LOCAL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1995);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::FORWARD_ONLY || _la == tsqlParser::SCROLL) {
      setState(1994);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::FORWARD_ONLY || _la == tsqlParser::SCROLL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1998);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la - 269) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 269)) & 4398046511361) != 0 || _la == tsqlParser::STATIC) {
      setState(1997);
      _la = _input->LA(1);
      if (!((((_la - 269) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 269)) & 4398046511361) != 0 || _la == tsqlParser::STATIC)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2001);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la - 350) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 350)) & 2199025352705) != 0) {
      setState(2000);
      _la = _input->LA(1);
      if (!((((_la - 350) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 350)) & 2199025352705) != 0)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2004);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::TYPE_WARNING) {
      setState(2003);
      match(tsqlParser::TYPE_WARNING);
    }
    setState(2006);
    match(tsqlParser::FOR);
    setState(2007);
    select_statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fetch_cursorContext ------------------------------------------------------------------

tsqlParser::Fetch_cursorContext::Fetch_cursorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Fetch_cursorContext::FETCH() {
  return getToken(tsqlParser::FETCH, 0);
}

tsqlParser::Cursor_nameContext* tsqlParser::Fetch_cursorContext::cursor_name() {
  return getRuleContext<tsqlParser::Cursor_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Fetch_cursorContext::FROM() {
  return getToken(tsqlParser::FROM, 0);
}

tree::TerminalNode* tsqlParser::Fetch_cursorContext::GLOBAL() {
  return getToken(tsqlParser::GLOBAL, 0);
}

tree::TerminalNode* tsqlParser::Fetch_cursorContext::INTO() {
  return getToken(tsqlParser::INTO, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Fetch_cursorContext::LOCAL_ID() {
  return getTokens(tsqlParser::LOCAL_ID);
}

tree::TerminalNode* tsqlParser::Fetch_cursorContext::LOCAL_ID(size_t i) {
  return getToken(tsqlParser::LOCAL_ID, i);
}

tree::TerminalNode* tsqlParser::Fetch_cursorContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}

tree::TerminalNode* tsqlParser::Fetch_cursorContext::NEXT() {
  return getToken(tsqlParser::NEXT, 0);
}

tree::TerminalNode* tsqlParser::Fetch_cursorContext::PRIOR() {
  return getToken(tsqlParser::PRIOR, 0);
}

tree::TerminalNode* tsqlParser::Fetch_cursorContext::FIRST() {
  return getToken(tsqlParser::FIRST, 0);
}

tree::TerminalNode* tsqlParser::Fetch_cursorContext::LAST() {
  return getToken(tsqlParser::LAST, 0);
}

tsqlParser::ExpressionContext* tsqlParser::Fetch_cursorContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> tsqlParser::Fetch_cursorContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Fetch_cursorContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}

tree::TerminalNode* tsqlParser::Fetch_cursorContext::ABSOLUTE() {
  return getToken(tsqlParser::ABSOLUTE, 0);
}

tree::TerminalNode* tsqlParser::Fetch_cursorContext::RELATIVE() {
  return getToken(tsqlParser::RELATIVE, 0);
}


size_t tsqlParser::Fetch_cursorContext::getRuleIndex() const {
  return tsqlParser::RuleFetch_cursor;
}


std::any tsqlParser::Fetch_cursorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitFetch_cursor(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Fetch_cursorContext* tsqlParser::fetch_cursor() {
  Fetch_cursorContext *_localctx = _tracker.createInstance<Fetch_cursorContext>(_ctx, getState());
  enterRule(_localctx, 202, tsqlParser::RuleFetch_cursor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2009);
    match(tsqlParser::FETCH);
    setState(2019);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 296, _ctx)) {
    case 1: {
      setState(2016);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case tsqlParser::NEXT: {
          setState(2010);
          match(tsqlParser::NEXT);
          break;
        }

        case tsqlParser::PRIOR: {
          setState(2011);
          match(tsqlParser::PRIOR);
          break;
        }

        case tsqlParser::FIRST: {
          setState(2012);
          match(tsqlParser::FIRST);
          break;
        }

        case tsqlParser::LAST: {
          setState(2013);
          match(tsqlParser::LAST);
          break;
        }

        case tsqlParser::ABSOLUTE:
        case tsqlParser::RELATIVE: {
          setState(2014);
          _la = _input->LA(1);
          if (!(_la == tsqlParser::ABSOLUTE || _la == tsqlParser::RELATIVE)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(2015);
          expression(0);
          break;
        }

        case tsqlParser::FROM: {
          break;
        }

      default:
        break;
      }
      setState(2018);
      match(tsqlParser::FROM);
      break;
    }

    default:
      break;
    }
    setState(2022);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 297, _ctx)) {
    case 1: {
      setState(2021);
      match(tsqlParser::GLOBAL);
      break;
    }

    default:
      break;
    }
    setState(2024);
    cursor_name();
    setState(2034);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::INTO) {
      setState(2025);
      match(tsqlParser::INTO);
      setState(2026);
      match(tsqlParser::LOCAL_ID);
      setState(2031);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == tsqlParser::COMMA) {
        setState(2027);
        match(tsqlParser::COMMA);
        setState(2028);
        match(tsqlParser::LOCAL_ID);
        setState(2033);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(2037);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 300, _ctx)) {
    case 1: {
      setState(2036);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Set_specialContext ------------------------------------------------------------------

tsqlParser::Set_specialContext::Set_specialContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Set_specialContext::SET() {
  return getToken(tsqlParser::SET, 0);
}

std::vector<tsqlParser::R_idContext *> tsqlParser::Set_specialContext::r_id() {
  return getRuleContexts<tsqlParser::R_idContext>();
}

tsqlParser::R_idContext* tsqlParser::Set_specialContext::r_id(size_t i) {
  return getRuleContext<tsqlParser::R_idContext>(i);
}

tsqlParser::Constant_LOCAL_IDContext* tsqlParser::Set_specialContext::constant_LOCAL_ID() {
  return getRuleContext<tsqlParser::Constant_LOCAL_IDContext>(0);
}

tsqlParser::On_offContext* tsqlParser::Set_specialContext::on_off() {
  return getRuleContext<tsqlParser::On_offContext>(0);
}

tree::TerminalNode* tsqlParser::Set_specialContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}

tree::TerminalNode* tsqlParser::Set_specialContext::ISOLATION() {
  return getToken(tsqlParser::ISOLATION, 0);
}

tree::TerminalNode* tsqlParser::Set_specialContext::LEVEL() {
  return getToken(tsqlParser::LEVEL, 0);
}

tree::TerminalNode* tsqlParser::Set_specialContext::TRANSACTION() {
  return getToken(tsqlParser::TRANSACTION, 0);
}

tree::TerminalNode* tsqlParser::Set_specialContext::READ() {
  return getToken(tsqlParser::READ, 0);
}

tree::TerminalNode* tsqlParser::Set_specialContext::UNCOMMITTED() {
  return getToken(tsqlParser::UNCOMMITTED, 0);
}

tree::TerminalNode* tsqlParser::Set_specialContext::COMMITTED() {
  return getToken(tsqlParser::COMMITTED, 0);
}

tree::TerminalNode* tsqlParser::Set_specialContext::REPEATABLE() {
  return getToken(tsqlParser::REPEATABLE, 0);
}

tree::TerminalNode* tsqlParser::Set_specialContext::SNAPSHOT() {
  return getToken(tsqlParser::SNAPSHOT, 0);
}

tree::TerminalNode* tsqlParser::Set_specialContext::SERIALIZABLE() {
  return getToken(tsqlParser::SERIALIZABLE, 0);
}

tsqlParser::Full_table_nameContext* tsqlParser::Set_specialContext::full_table_name() {
  return getRuleContext<tsqlParser::Full_table_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Set_specialContext::IDENTITY_INSERT() {
  return getToken(tsqlParser::IDENTITY_INSERT, 0);
}

tree::TerminalNode* tsqlParser::Set_specialContext::ANSI_NULLS() {
  return getToken(tsqlParser::ANSI_NULLS, 0);
}

tree::TerminalNode* tsqlParser::Set_specialContext::QUOTED_IDENTIFIER() {
  return getToken(tsqlParser::QUOTED_IDENTIFIER, 0);
}

tree::TerminalNode* tsqlParser::Set_specialContext::ANSI_PADDING() {
  return getToken(tsqlParser::ANSI_PADDING, 0);
}

tree::TerminalNode* tsqlParser::Set_specialContext::STATISTICS() {
  return getToken(tsqlParser::STATISTICS, 0);
}

tree::TerminalNode* tsqlParser::Set_specialContext::TIME() {
  return getToken(tsqlParser::TIME, 0);
}

tree::TerminalNode* tsqlParser::Set_specialContext::IO() {
  return getToken(tsqlParser::IO, 0);
}


size_t tsqlParser::Set_specialContext::getRuleIndex() const {
  return tsqlParser::RuleSet_special;
}


std::any tsqlParser::Set_specialContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitSet_special(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Set_specialContext* tsqlParser::set_special() {
  Set_specialContext *_localctx = _tracker.createInstance<Set_specialContext>(_ctx, getState());
  enterRule(_localctx, 204, tsqlParser::RuleSet_special);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2086);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 306, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2039);
      match(tsqlParser::SET);
      setState(2040);
      antlrcpp::downCast<Set_specialContext *>(_localctx)->key = r_id();
      setState(2044);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case tsqlParser::FILLFACTOR:
        case tsqlParser::FORCESEEK:
        case tsqlParser::NEXT:
        case tsqlParser::NUMERIC:
        case tsqlParser::VALUE:
        case tsqlParser::ABSOLUTE:
        case tsqlParser::APPLY:
        case tsqlParser::AUTO:
        case tsqlParser::AVG:
        case tsqlParser::BASE64:
        case tsqlParser::CALLER:
        case tsqlParser::CAST:
        case tsqlParser::CATCH:
        case tsqlParser::CHECKSUM_AGG:
        case tsqlParser::COMMITTED:
        case tsqlParser::CONCAT:
        case tsqlParser::CONTROL:
        case tsqlParser::COOKIE:
        case tsqlParser::COUNT:
        case tsqlParser::COUNT_BIG:
        case tsqlParser::DATE:
        case tsqlParser::DELAY:
        case tsqlParser::DELETED:
        case tsqlParser::DENSE_RANK:
        case tsqlParser::DISABLE:
        case tsqlParser::DYNAMIC:
        case tsqlParser::ENCRYPTION:
        case tsqlParser::EXIST:
        case tsqlParser::EXPAND:
        case tsqlParser::FAST:
        case tsqlParser::FAST_FORWARD:
        case tsqlParser::FIRST:
        case tsqlParser::FIRST_VALUE:
        case tsqlParser::FOLLOWING:
        case tsqlParser::FORCE:
        case tsqlParser::FORCED:
        case tsqlParser::FORWARD_ONLY:
        case tsqlParser::FULLSCAN:
        case tsqlParser::GLOBAL:
        case tsqlParser::GROUPING:
        case tsqlParser::GROUPING_ID:
        case tsqlParser::HASH:
        case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case tsqlParser::IMPERSONATE:
        case tsqlParser::INSENSITIVE:
        case tsqlParser::INSERTED:
        case tsqlParser::ISOLATION:
        case tsqlParser::IO:
        case tsqlParser::KEEP:
        case tsqlParser::KEEPFIXED:
        case tsqlParser::KEYSET:
        case tsqlParser::LAG:
        case tsqlParser::LAST:
        case tsqlParser::LAST_VALUE:
        case tsqlParser::LEAD:
        case tsqlParser::LEVEL:
        case tsqlParser::LOCAL:
        case tsqlParser::LOCK_ESCALATION:
        case tsqlParser::LOGIN:
        case tsqlParser::LOOP:
        case tsqlParser::MARK:
        case tsqlParser::MAX:
        case tsqlParser::MAXDOP:
        case tsqlParser::MAXRECURSION:
        case tsqlParser::MIN:
        case tsqlParser::MODIFY:
        case tsqlParser::NAME:
        case tsqlParser::NOCOUNT:
        case tsqlParser::NODES:
        case tsqlParser::NOEXPAND:
        case tsqlParser::NORECOMPUTE:
        case tsqlParser::NTILE:
        case tsqlParser::NUMBER:
        case tsqlParser::OFFSET:
        case tsqlParser::ONLINE:
        case tsqlParser::ONLY:
        case tsqlParser::OPTIMISTIC:
        case tsqlParser::OPTIMIZE:
        case tsqlParser::OUT:
        case tsqlParser::OUTPUT:
        case tsqlParser::OWNER:
        case tsqlParser::PARAMETERIZATION:
        case tsqlParser::PARTITION:
        case tsqlParser::PATH:
        case tsqlParser::PRECEDING:
        case tsqlParser::PRIOR:
        case tsqlParser::PRIVILEGES:
        case tsqlParser::QUERY:
        case tsqlParser::RANGE:
        case tsqlParser::RANK:
        case tsqlParser::READONLY:
        case tsqlParser::READ_ONLY:
        case tsqlParser::RECOMPILE:
        case tsqlParser::RELATIVE:
        case tsqlParser::REMOTE:
        case tsqlParser::REPEATABLE:
        case tsqlParser::ROBUST:
        case tsqlParser::ROOT:
        case tsqlParser::ROW:
        case tsqlParser::ROWGUID:
        case tsqlParser::ROWS:
        case tsqlParser::ROW_NUMBER:
        case tsqlParser::SAMPLE:
        case tsqlParser::SCHEMABINDING:
        case tsqlParser::SCROLL:
        case tsqlParser::SCROLL_LOCKS:
        case tsqlParser::SELF:
        case tsqlParser::SERIALIZABLE:
        case tsqlParser::SIMPLE:
        case tsqlParser::SIZE:
        case tsqlParser::SNAPSHOT:
        case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
        case tsqlParser::STATIC:
        case tsqlParser::STATS_STREAM:
        case tsqlParser::STDEV:
        case tsqlParser::STDEVP:
        case tsqlParser::SUM:
        case tsqlParser::TEXTIMAGE_ON:
        case tsqlParser::THROW:
        case tsqlParser::TIES:
        case tsqlParser::TIME:
        case tsqlParser::TRY:
        case tsqlParser::TYPE:
        case tsqlParser::TYPE_WARNING:
        case tsqlParser::UNBOUNDED:
        case tsqlParser::UNCOMMITTED:
        case tsqlParser::UNKNOWN:
        case tsqlParser::USING:
        case tsqlParser::VAR:
        case tsqlParser::VARP:
        case tsqlParser::VIEWS:
        case tsqlParser::VIEW_METADATA:
        case tsqlParser::WORK:
        case tsqlParser::XML:
        case tsqlParser::XMLNAMESPACES:
        case tsqlParser::ZONE:
        case tsqlParser::DOUBLE_QUOTE_ID:
        case tsqlParser::SQUARE_BRACKET_ID:
        case tsqlParser::ID: {
          setState(2041);
          antlrcpp::downCast<Set_specialContext *>(_localctx)->value = r_id();
          break;
        }

        case tsqlParser::LOCAL_ID:
        case tsqlParser::DECIMAL:
        case tsqlParser::STRING:
        case tsqlParser::BINARY:
        case tsqlParser::FLOAT:
        case tsqlParser::REAL:
        case tsqlParser::DOLLAR:
        case tsqlParser::PLUS:
        case tsqlParser::MINUS: {
          setState(2042);
          constant_LOCAL_ID();
          break;
        }

        case tsqlParser::OFF:
        case tsqlParser::ON: {
          setState(2043);
          on_off();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2047);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx)) {
      case 1: {
        setState(2046);
        match(tsqlParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2049);
      match(tsqlParser::SET);
      setState(2050);
      antlrcpp::downCast<Set_specialContext *>(_localctx)->set_type = match(tsqlParser::TRANSACTION);
      setState(2051);
      match(tsqlParser::ISOLATION);
      setState(2052);
      match(tsqlParser::LEVEL);
      setState(2061);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 303, _ctx)) {
      case 1: {
        setState(2053);
        match(tsqlParser::READ);
        setState(2054);
        match(tsqlParser::UNCOMMITTED);
        break;
      }

      case 2: {
        setState(2055);
        match(tsqlParser::READ);
        setState(2056);
        match(tsqlParser::COMMITTED);
        break;
      }

      case 3: {
        setState(2057);
        match(tsqlParser::REPEATABLE);
        setState(2058);
        match(tsqlParser::READ);
        break;
      }

      case 4: {
        setState(2059);
        match(tsqlParser::SNAPSHOT);
        break;
      }

      case 5: {
        setState(2060);
        match(tsqlParser::SERIALIZABLE);
        break;
      }

      default:
        break;
      }
      setState(2064);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 304, _ctx)) {
      case 1: {
        setState(2063);
        match(tsqlParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2066);
      match(tsqlParser::SET);
      setState(2067);
      antlrcpp::downCast<Set_specialContext *>(_localctx)->set_type = match(tsqlParser::IDENTITY_INSERT);
      setState(2068);
      full_table_name();
      setState(2069);
      on_off();
      setState(2071);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 305, _ctx)) {
      case 1: {
        setState(2070);
        match(tsqlParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2073);
      match(tsqlParser::SET);
      setState(2074);
      antlrcpp::downCast<Set_specialContext *>(_localctx)->set_type = match(tsqlParser::ANSI_NULLS);
      setState(2075);
      on_off();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2076);
      match(tsqlParser::SET);
      setState(2077);
      antlrcpp::downCast<Set_specialContext *>(_localctx)->set_type = match(tsqlParser::QUOTED_IDENTIFIER);
      setState(2078);
      on_off();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2079);
      match(tsqlParser::SET);
      setState(2080);
      antlrcpp::downCast<Set_specialContext *>(_localctx)->set_type = match(tsqlParser::ANSI_PADDING);
      setState(2081);
      on_off();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2082);
      match(tsqlParser::SET);
      setState(2083);
      antlrcpp::downCast<Set_specialContext *>(_localctx)->set_type = match(tsqlParser::STATISTICS);
      setState(2084);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::IO || _la == tsqlParser::TIME)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2085);
      on_off();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constant_LOCAL_IDContext ------------------------------------------------------------------

tsqlParser::Constant_LOCAL_IDContext::Constant_LOCAL_IDContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::ConstantContext* tsqlParser::Constant_LOCAL_IDContext::constant() {
  return getRuleContext<tsqlParser::ConstantContext>(0);
}

tree::TerminalNode* tsqlParser::Constant_LOCAL_IDContext::LOCAL_ID() {
  return getToken(tsqlParser::LOCAL_ID, 0);
}


size_t tsqlParser::Constant_LOCAL_IDContext::getRuleIndex() const {
  return tsqlParser::RuleConstant_LOCAL_ID;
}


std::any tsqlParser::Constant_LOCAL_IDContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitConstant_LOCAL_ID(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Constant_LOCAL_IDContext* tsqlParser::constant_LOCAL_ID() {
  Constant_LOCAL_IDContext *_localctx = _tracker.createInstance<Constant_LOCAL_IDContext>(_ctx, getState());
  enterRule(_localctx, 206, tsqlParser::RuleConstant_LOCAL_ID);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2090);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::DECIMAL:
      case tsqlParser::STRING:
      case tsqlParser::BINARY:
      case tsqlParser::FLOAT:
      case tsqlParser::REAL:
      case tsqlParser::DOLLAR:
      case tsqlParser::PLUS:
      case tsqlParser::MINUS: {
        enterOuterAlt(_localctx, 1);
        setState(2088);
        constant();
        break;
      }

      case tsqlParser::LOCAL_ID: {
        enterOuterAlt(_localctx, 2);
        setState(2089);
        match(tsqlParser::LOCAL_ID);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

tsqlParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t tsqlParser::ExpressionContext::getRuleIndex() const {
  return tsqlParser::RuleExpression;
}

void tsqlParser::ExpressionContext::copyFrom(ExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Binary_operator_expressionContext ------------------------------------------------------------------

std::vector<tsqlParser::ExpressionContext *> tsqlParser::Binary_operator_expressionContext::expression() {
  return getRuleContexts<tsqlParser::ExpressionContext>();
}

tsqlParser::ExpressionContext* tsqlParser::Binary_operator_expressionContext::expression(size_t i) {
  return getRuleContext<tsqlParser::ExpressionContext>(i);
}

tree::TerminalNode* tsqlParser::Binary_operator_expressionContext::STAR() {
  return getToken(tsqlParser::STAR, 0);
}

tree::TerminalNode* tsqlParser::Binary_operator_expressionContext::DIVIDE() {
  return getToken(tsqlParser::DIVIDE, 0);
}

tree::TerminalNode* tsqlParser::Binary_operator_expressionContext::MODULE() {
  return getToken(tsqlParser::MODULE, 0);
}

tree::TerminalNode* tsqlParser::Binary_operator_expressionContext::PLUS() {
  return getToken(tsqlParser::PLUS, 0);
}

tree::TerminalNode* tsqlParser::Binary_operator_expressionContext::MINUS() {
  return getToken(tsqlParser::MINUS, 0);
}

tree::TerminalNode* tsqlParser::Binary_operator_expressionContext::BIT_AND() {
  return getToken(tsqlParser::BIT_AND, 0);
}

tree::TerminalNode* tsqlParser::Binary_operator_expressionContext::BIT_XOR() {
  return getToken(tsqlParser::BIT_XOR, 0);
}

tree::TerminalNode* tsqlParser::Binary_operator_expressionContext::BIT_OR() {
  return getToken(tsqlParser::BIT_OR, 0);
}

tsqlParser::Comparison_operatorContext* tsqlParser::Binary_operator_expressionContext::comparison_operator() {
  return getRuleContext<tsqlParser::Comparison_operatorContext>(0);
}

tsqlParser::Binary_operator_expressionContext::Binary_operator_expressionContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Binary_operator_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitBinary_operator_expression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Unary_operator_expressionContext ------------------------------------------------------------------

tsqlParser::ExpressionContext* tsqlParser::Unary_operator_expressionContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

tree::TerminalNode* tsqlParser::Unary_operator_expressionContext::BIT_NOT() {
  return getToken(tsqlParser::BIT_NOT, 0);
}

tree::TerminalNode* tsqlParser::Unary_operator_expressionContext::PLUS() {
  return getToken(tsqlParser::PLUS, 0);
}

tree::TerminalNode* tsqlParser::Unary_operator_expressionContext::MINUS() {
  return getToken(tsqlParser::MINUS, 0);
}

tsqlParser::Unary_operator_expressionContext::Unary_operator_expressionContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Unary_operator_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitUnary_operator_expression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Function_call_expressionContext ------------------------------------------------------------------

tsqlParser::Function_callContext* tsqlParser::Function_call_expressionContext::function_call() {
  return getRuleContext<tsqlParser::Function_callContext>(0);
}

tsqlParser::ExpressionContext* tsqlParser::Function_call_expressionContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

tree::TerminalNode* tsqlParser::Function_call_expressionContext::COLLATE() {
  return getToken(tsqlParser::COLLATE, 0);
}

tsqlParser::R_idContext* tsqlParser::Function_call_expressionContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tsqlParser::Function_call_expressionContext::Function_call_expressionContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Function_call_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitFunction_call_expression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Conversion_expressionContext ------------------------------------------------------------------

tree::TerminalNode* tsqlParser::Conversion_expressionContext::AT() {
  return getToken(tsqlParser::AT, 0);
}

tree::TerminalNode* tsqlParser::Conversion_expressionContext::TIME() {
  return getToken(tsqlParser::TIME, 0);
}

tree::TerminalNode* tsqlParser::Conversion_expressionContext::ZONE() {
  return getToken(tsqlParser::ZONE, 0);
}

std::vector<tsqlParser::ExpressionContext *> tsqlParser::Conversion_expressionContext::expression() {
  return getRuleContexts<tsqlParser::ExpressionContext>();
}

tsqlParser::ExpressionContext* tsqlParser::Conversion_expressionContext::expression(size_t i) {
  return getRuleContext<tsqlParser::ExpressionContext>(i);
}

tsqlParser::Conversion_expressionContext::Conversion_expressionContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Conversion_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitConversion_expression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Case_expressionContext ------------------------------------------------------------------

tree::TerminalNode* tsqlParser::Case_expressionContext::CASE() {
  return getToken(tsqlParser::CASE, 0);
}

tree::TerminalNode* tsqlParser::Case_expressionContext::END() {
  return getToken(tsqlParser::END, 0);
}

std::vector<tsqlParser::ExpressionContext *> tsqlParser::Case_expressionContext::expression() {
  return getRuleContexts<tsqlParser::ExpressionContext>();
}

tsqlParser::ExpressionContext* tsqlParser::Case_expressionContext::expression(size_t i) {
  return getRuleContext<tsqlParser::ExpressionContext>(i);
}

std::vector<tsqlParser::Switch_sectionContext *> tsqlParser::Case_expressionContext::switch_section() {
  return getRuleContexts<tsqlParser::Switch_sectionContext>();
}

tsqlParser::Switch_sectionContext* tsqlParser::Case_expressionContext::switch_section(size_t i) {
  return getRuleContext<tsqlParser::Switch_sectionContext>(i);
}

tree::TerminalNode* tsqlParser::Case_expressionContext::ELSE() {
  return getToken(tsqlParser::ELSE, 0);
}

std::vector<tsqlParser::Switch_search_condition_sectionContext *> tsqlParser::Case_expressionContext::switch_search_condition_section() {
  return getRuleContexts<tsqlParser::Switch_search_condition_sectionContext>();
}

tsqlParser::Switch_search_condition_sectionContext* tsqlParser::Case_expressionContext::switch_search_condition_section(size_t i) {
  return getRuleContext<tsqlParser::Switch_search_condition_sectionContext>(i);
}

tsqlParser::Case_expressionContext::Case_expressionContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Case_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitCase_expression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Column_ref_expressionContext ------------------------------------------------------------------

tsqlParser::Full_column_nameContext* tsqlParser::Column_ref_expressionContext::full_column_name() {
  return getRuleContext<tsqlParser::Full_column_nameContext>(0);
}

tsqlParser::Column_ref_expressionContext::Column_ref_expressionContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Column_ref_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitColumn_ref_expression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- String_agg_expressionContext ------------------------------------------------------------------

tsqlParser::String_aggContext* tsqlParser::String_agg_expressionContext::string_agg() {
  return getRuleContext<tsqlParser::String_aggContext>(0);
}

tsqlParser::String_agg_expressionContext::String_agg_expressionContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::String_agg_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitString_agg_expression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Percentile_cont_expressionContext ------------------------------------------------------------------

tsqlParser::Percentile_contContext* tsqlParser::Percentile_cont_expressionContext::percentile_cont() {
  return getRuleContext<tsqlParser::Percentile_contContext>(0);
}

tsqlParser::Percentile_cont_expressionContext::Percentile_cont_expressionContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Percentile_cont_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitPercentile_cont_expression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Primitive_expressionContext ------------------------------------------------------------------

tree::TerminalNode* tsqlParser::Primitive_expressionContext::DEFAULT() {
  return getToken(tsqlParser::DEFAULT, 0);
}

tree::TerminalNode* tsqlParser::Primitive_expressionContext::NULL_() {
  return getToken(tsqlParser::NULL_, 0);
}

tree::TerminalNode* tsqlParser::Primitive_expressionContext::LOCAL_ID() {
  return getToken(tsqlParser::LOCAL_ID, 0);
}

tsqlParser::ConstantContext* tsqlParser::Primitive_expressionContext::constant() {
  return getRuleContext<tsqlParser::ConstantContext>(0);
}

tsqlParser::Primitive_expressionContext::Primitive_expressionContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Primitive_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitPrimitive_expression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Bracket_expressionContext ------------------------------------------------------------------

tree::TerminalNode* tsqlParser::Bracket_expressionContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tsqlParser::ExpressionContext* tsqlParser::Bracket_expressionContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

tree::TerminalNode* tsqlParser::Bracket_expressionContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tsqlParser::Bracket_expressionContext::Bracket_expressionContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Bracket_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitBracket_expression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Subquery_expressionContext ------------------------------------------------------------------

tree::TerminalNode* tsqlParser::Subquery_expressionContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tsqlParser::SubqueryContext* tsqlParser::Subquery_expressionContext::subquery() {
  return getRuleContext<tsqlParser::SubqueryContext>(0);
}

tree::TerminalNode* tsqlParser::Subquery_expressionContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tsqlParser::Subquery_expressionContext::Subquery_expressionContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Subquery_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitSubquery_expression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Over_clause_expressionContext ------------------------------------------------------------------

tsqlParser::Over_clauseContext* tsqlParser::Over_clause_expressionContext::over_clause() {
  return getRuleContext<tsqlParser::Over_clauseContext>(0);
}

tsqlParser::Over_clause_expressionContext::Over_clause_expressionContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Over_clause_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitOver_clause_expression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Xml_method_expressionContext ------------------------------------------------------------------

tsqlParser::ExpressionContext* tsqlParser::Xml_method_expressionContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

tree::TerminalNode* tsqlParser::Xml_method_expressionContext::DOT() {
  return getToken(tsqlParser::DOT, 0);
}

tsqlParser::Xml_method_callContext* tsqlParser::Xml_method_expressionContext::xml_method_call() {
  return getRuleContext<tsqlParser::Xml_method_callContext>(0);
}

tsqlParser::Xml_method_expressionContext::Xml_method_expressionContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Xml_method_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitXml_method_expression(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::ExpressionContext* tsqlParser::expression() {
   return expression(0);
}

tsqlParser::ExpressionContext* tsqlParser::expression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  tsqlParser::ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, parentState);
  tsqlParser::ExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 208;
  enterRecursionRule(_localctx, 208, tsqlParser::RuleExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2139);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 312, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<Primitive_expressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(2093);
      match(tsqlParser::DEFAULT);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<Primitive_expressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2094);
      match(tsqlParser::NULL_);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<Primitive_expressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2095);
      match(tsqlParser::LOCAL_ID);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<Primitive_expressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2096);
      constant();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<Function_call_expressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2097);
      function_call();
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<Case_expressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2098);
      match(tsqlParser::CASE);
      setState(2099);
      antlrcpp::downCast<Case_expressionContext *>(_localctx)->caseExpr = expression(0);
      setState(2101); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(2100);
        switch_section();
        setState(2103); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == tsqlParser::WHEN);
      setState(2107);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::ELSE) {
        setState(2105);
        match(tsqlParser::ELSE);
        setState(2106);
        antlrcpp::downCast<Case_expressionContext *>(_localctx)->elseExpr = expression(0);
      }
      setState(2109);
      match(tsqlParser::END);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<Case_expressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2111);
      match(tsqlParser::CASE);
      setState(2113); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(2112);
        switch_search_condition_section();
        setState(2115); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == tsqlParser::WHEN);
      setState(2119);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::ELSE) {
        setState(2117);
        match(tsqlParser::ELSE);
        setState(2118);
        antlrcpp::downCast<Case_expressionContext *>(_localctx)->elseExpr = expression(0);
      }
      setState(2121);
      match(tsqlParser::END);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<Column_ref_expressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2123);
      full_column_name();
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<Bracket_expressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2124);
      match(tsqlParser::LR_BRACKET);
      setState(2125);
      expression(0);
      setState(2126);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<Subquery_expressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2128);
      match(tsqlParser::LR_BRACKET);
      setState(2129);
      subquery();
      setState(2130);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<Unary_operator_expressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2132);
      antlrcpp::downCast<Unary_operator_expressionContext *>(_localctx)->op = match(tsqlParser::BIT_NOT);
      setState(2133);
      expression(9);
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<Unary_operator_expressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2134);
      antlrcpp::downCast<Unary_operator_expressionContext *>(_localctx)->op = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::PLUS

      || _la == tsqlParser::MINUS)) {
        antlrcpp::downCast<Unary_operator_expressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2135);
      expression(7);
      break;
    }

    case 13: {
      _localctx = _tracker.createInstance<Over_clause_expressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2136);
      over_clause();
      break;
    }

    case 14: {
      _localctx = _tracker.createInstance<Percentile_cont_expressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2137);
      percentile_cont();
      break;
    }

    case 15: {
      _localctx = _tracker.createInstance<String_agg_expressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2138);
      string_agg();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(2164);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2162);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 313, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<Conversion_expressionContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(2141);

          if (!(precpred(_ctx, 15))) throw FailedPredicateException(this, "precpred(_ctx, 15)");
          setState(2142);
          match(tsqlParser::AT);
          setState(2143);
          match(tsqlParser::TIME);
          setState(2144);
          match(tsqlParser::ZONE);
          setState(2145);
          antlrcpp::downCast<Conversion_expressionContext *>(_localctx)->right = expression(16);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<Binary_operator_expressionContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(2146);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
          setState(2147);
          antlrcpp::downCast<Binary_operator_expressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!((((_la - 477) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 477)) & 7) != 0)) {
            antlrcpp::downCast<Binary_operator_expressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(2148);
          antlrcpp::downCast<Binary_operator_expressionContext *>(_localctx)->right = expression(9);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<Binary_operator_expressionContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(2149);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(2150);
          antlrcpp::downCast<Binary_operator_expressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!((((_la - 480) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 480)) & 59) != 0)) {
            antlrcpp::downCast<Binary_operator_expressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(2151);
          antlrcpp::downCast<Binary_operator_expressionContext *>(_localctx)->right = expression(7);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<Binary_operator_expressionContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(2152);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(2153);
          comparison_operator();
          setState(2154);
          antlrcpp::downCast<Binary_operator_expressionContext *>(_localctx)->right = expression(6);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<Function_call_expressionContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(2156);

          if (!(precpred(_ctx, 16))) throw FailedPredicateException(this, "precpred(_ctx, 16)");
          setState(2157);
          match(tsqlParser::COLLATE);
          setState(2158);
          r_id();
          break;
        }

        case 6: {
          auto newContext = _tracker.createInstance<Xml_method_expressionContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(2159);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(2160);
          match(tsqlParser::DOT);
          setState(2161);
          xml_method_call();
          break;
        }

        default:
          break;
        } 
      }
      setState(2166);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Xml_method_callContext ------------------------------------------------------------------

tsqlParser::Xml_method_callContext::Xml_method_callContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::Simple_xml_method_nameContext* tsqlParser::Xml_method_callContext::simple_xml_method_name() {
  return getRuleContext<tsqlParser::Simple_xml_method_nameContext>(0);
}

std::vector<tree::TerminalNode *> tsqlParser::Xml_method_callContext::LR_BRACKET() {
  return getTokens(tsqlParser::LR_BRACKET);
}

tree::TerminalNode* tsqlParser::Xml_method_callContext::LR_BRACKET(size_t i) {
  return getToken(tsqlParser::LR_BRACKET, i);
}

std::vector<tree::TerminalNode *> tsqlParser::Xml_method_callContext::RR_BRACKET() {
  return getTokens(tsqlParser::RR_BRACKET);
}

tree::TerminalNode* tsqlParser::Xml_method_callContext::RR_BRACKET(size_t i) {
  return getToken(tsqlParser::RR_BRACKET, i);
}

tsqlParser::Expression_listContext* tsqlParser::Xml_method_callContext::expression_list() {
  return getRuleContext<tsqlParser::Expression_listContext>(0);
}

tree::TerminalNode* tsqlParser::Xml_method_callContext::NODES() {
  return getToken(tsqlParser::NODES, 0);
}

tree::TerminalNode* tsqlParser::Xml_method_callContext::AS() {
  return getToken(tsqlParser::AS, 0);
}

std::vector<tsqlParser::R_idContext *> tsqlParser::Xml_method_callContext::r_id() {
  return getRuleContexts<tsqlParser::R_idContext>();
}

tsqlParser::R_idContext* tsqlParser::Xml_method_callContext::r_id(size_t i) {
  return getRuleContext<tsqlParser::R_idContext>(i);
}


size_t tsqlParser::Xml_method_callContext::getRuleIndex() const {
  return tsqlParser::RuleXml_method_call;
}


std::any tsqlParser::Xml_method_callContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitXml_method_call(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Xml_method_callContext* tsqlParser::xml_method_call() {
  Xml_method_callContext *_localctx = _tracker.createInstance<Xml_method_callContext>(_ctx, getState());
  enterRule(_localctx, 210, tsqlParser::RuleXml_method_call);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2186);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::VALUE:
      case tsqlParser::EXIST:
      case tsqlParser::QUERY: {
        enterOuterAlt(_localctx, 1);
        setState(2167);
        simple_xml_method_name();
        setState(2168);
        match(tsqlParser::LR_BRACKET);
        setState(2170);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 288106440032256) != 0 || (((_la - 66) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 66)) & -9222381634573827935) != 0 || (((_la - 152) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 152)) & 4629718039189852161) != 0 || (((_la - 217) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 217)) & 2203052274704250241) != 0 || (((_la - 281) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 281)) & -2942381077000725761) != 0 || (((_la - 347) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 347)) & -23397629359030529) != 0 || (((_la - 411) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 411)) & 3458782073792185291) != 0 || (((_la - 480) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 480)) & 7) != 0) {
          setState(2169);
          expression_list();
        }
        setState(2172);
        match(tsqlParser::RR_BRACKET);
        break;
      }

      case tsqlParser::NODES: {
        enterOuterAlt(_localctx, 2);
        setState(2174);
        match(tsqlParser::NODES);
        setState(2175);
        match(tsqlParser::LR_BRACKET);
        setState(2177);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 288106440032256) != 0 || (((_la - 66) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 66)) & -9222381634573827935) != 0 || (((_la - 152) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 152)) & 4629718039189852161) != 0 || (((_la - 217) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 217)) & 2203052274704250241) != 0 || (((_la - 281) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 281)) & -2942381077000725761) != 0 || (((_la - 347) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 347)) & -23397629359030529) != 0 || (((_la - 411) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 411)) & 3458782073792185291) != 0 || (((_la - 480) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 480)) & 7) != 0) {
          setState(2176);
          expression_list();
        }
        setState(2179);
        match(tsqlParser::RR_BRACKET);
        setState(2180);
        match(tsqlParser::AS);
        setState(2181);
        antlrcpp::downCast<Xml_method_callContext *>(_localctx)->table = r_id();
        setState(2182);
        match(tsqlParser::LR_BRACKET);
        setState(2183);
        antlrcpp::downCast<Xml_method_callContext *>(_localctx)->column = r_id();
        setState(2184);
        match(tsqlParser::RR_BRACKET);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_xml_method_nameContext ------------------------------------------------------------------

tsqlParser::Simple_xml_method_nameContext::Simple_xml_method_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Simple_xml_method_nameContext::QUERY() {
  return getToken(tsqlParser::QUERY, 0);
}

tree::TerminalNode* tsqlParser::Simple_xml_method_nameContext::VALUE() {
  return getToken(tsqlParser::VALUE, 0);
}

tree::TerminalNode* tsqlParser::Simple_xml_method_nameContext::EXIST() {
  return getToken(tsqlParser::EXIST, 0);
}


size_t tsqlParser::Simple_xml_method_nameContext::getRuleIndex() const {
  return tsqlParser::RuleSimple_xml_method_name;
}


std::any tsqlParser::Simple_xml_method_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitSimple_xml_method_name(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Simple_xml_method_nameContext* tsqlParser::simple_xml_method_name() {
  Simple_xml_method_nameContext *_localctx = _tracker.createInstance<Simple_xml_method_nameContext>(_ctx, getState());
  enterRule(_localctx, 212, tsqlParser::RuleSimple_xml_method_name);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2188);
    _la = _input->LA(1);
    if (!(_la == tsqlParser::VALUE || _la == tsqlParser::EXIST || _la == tsqlParser::QUERY)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constant_expressionContext ------------------------------------------------------------------

tsqlParser::Constant_expressionContext::Constant_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Constant_expressionContext::NULL_() {
  return getToken(tsqlParser::NULL_, 0);
}

tsqlParser::ConstantContext* tsqlParser::Constant_expressionContext::constant() {
  return getRuleContext<tsqlParser::ConstantContext>(0);
}

tsqlParser::Function_callContext* tsqlParser::Constant_expressionContext::function_call() {
  return getRuleContext<tsqlParser::Function_callContext>(0);
}

tree::TerminalNode* tsqlParser::Constant_expressionContext::LOCAL_ID() {
  return getToken(tsqlParser::LOCAL_ID, 0);
}

tree::TerminalNode* tsqlParser::Constant_expressionContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tsqlParser::Constant_expressionContext* tsqlParser::Constant_expressionContext::constant_expression() {
  return getRuleContext<tsqlParser::Constant_expressionContext>(0);
}

tree::TerminalNode* tsqlParser::Constant_expressionContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}


size_t tsqlParser::Constant_expressionContext::getRuleIndex() const {
  return tsqlParser::RuleConstant_expression;
}


std::any tsqlParser::Constant_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitConstant_expression(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Constant_expressionContext* tsqlParser::constant_expression() {
  Constant_expressionContext *_localctx = _tracker.createInstance<Constant_expressionContext>(_ctx, getState());
  enterRule(_localctx, 214, tsqlParser::RuleConstant_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2198);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::NULL_: {
        enterOuterAlt(_localctx, 1);
        setState(2190);
        match(tsqlParser::NULL_);
        break;
      }

      case tsqlParser::DECIMAL:
      case tsqlParser::STRING:
      case tsqlParser::BINARY:
      case tsqlParser::FLOAT:
      case tsqlParser::REAL:
      case tsqlParser::DOLLAR:
      case tsqlParser::PLUS:
      case tsqlParser::MINUS: {
        enterOuterAlt(_localctx, 2);
        setState(2191);
        constant();
        break;
      }

      case tsqlParser::COALESCE:
      case tsqlParser::CONVERT:
      case tsqlParser::CURRENT_TIMESTAMP:
      case tsqlParser::CURRENT_USER:
      case tsqlParser::EXP:
      case tsqlParser::FILLFACTOR:
      case tsqlParser::FORCESEEK:
      case tsqlParser::IDENTITY:
      case tsqlParser::IIF:
      case tsqlParser::LEFT:
      case tsqlParser::LOG:
      case tsqlParser::LOG10:
      case tsqlParser::NEXT:
      case tsqlParser::NULLIF:
      case tsqlParser::NUMERIC:
      case tsqlParser::RIGHT:
      case tsqlParser::SESSION_USER:
      case tsqlParser::SIGN:
      case tsqlParser::SYSTEM_USER:
      case tsqlParser::TRY_CAST:
      case tsqlParser::TRY_CONVERT:
      case tsqlParser::TRY_PARSE:
      case tsqlParser::VALUE:
      case tsqlParser::ABSOLUTE:
      case tsqlParser::APPLY:
      case tsqlParser::AUTO:
      case tsqlParser::AVG:
      case tsqlParser::BASE64:
      case tsqlParser::BINARY_CHECKSUM:
      case tsqlParser::CALLER:
      case tsqlParser::CAST:
      case tsqlParser::CATCH:
      case tsqlParser::CEILING:
      case tsqlParser::CHECKSUM:
      case tsqlParser::CHECKSUM_AGG:
      case tsqlParser::COMMITTED:
      case tsqlParser::CONCAT:
      case tsqlParser::CONTROL:
      case tsqlParser::COOKIE:
      case tsqlParser::COS:
      case tsqlParser::COUNT:
      case tsqlParser::COUNT_BIG:
      case tsqlParser::DATE:
      case tsqlParser::DATEADD:
      case tsqlParser::DATEDIFF:
      case tsqlParser::DATENAME:
      case tsqlParser::DATEPART:
      case tsqlParser::DATETIMEOFFSETFROMPARTS:
      case tsqlParser::DELAY:
      case tsqlParser::DELETED:
      case tsqlParser::DENSE_RANK:
      case tsqlParser::DISABLE:
      case tsqlParser::DYNAMIC:
      case tsqlParser::ENCRYPTION:
      case tsqlParser::EXIST:
      case tsqlParser::EXPAND:
      case tsqlParser::FAST:
      case tsqlParser::FAST_FORWARD:
      case tsqlParser::FIRST:
      case tsqlParser::FIRST_VALUE:
      case tsqlParser::FLOOR:
      case tsqlParser::FOLLOWING:
      case tsqlParser::FORCE:
      case tsqlParser::FORCED:
      case tsqlParser::FORWARD_ONLY:
      case tsqlParser::FULLSCAN:
      case tsqlParser::GLOBAL:
      case tsqlParser::GROUPING:
      case tsqlParser::GROUPING_ID:
      case tsqlParser::HASH:
      case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
      case tsqlParser::IMPERSONATE:
      case tsqlParser::INSENSITIVE:
      case tsqlParser::INSERTED:
      case tsqlParser::ISOLATION:
      case tsqlParser::IO:
      case tsqlParser::KEEP:
      case tsqlParser::KEEPFIXED:
      case tsqlParser::KEYSET:
      case tsqlParser::LAG:
      case tsqlParser::LAST:
      case tsqlParser::LAST_VALUE:
      case tsqlParser::LEAD:
      case tsqlParser::LEVEL:
      case tsqlParser::LOCAL:
      case tsqlParser::LOCK_ESCALATION:
      case tsqlParser::LOGIN:
      case tsqlParser::LOOP:
      case tsqlParser::MARK:
      case tsqlParser::MAX:
      case tsqlParser::MAXDOP:
      case tsqlParser::MAXRECURSION:
      case tsqlParser::MIN:
      case tsqlParser::MIN_ACTIVE_ROWVERSION:
      case tsqlParser::MODIFY:
      case tsqlParser::NAME:
      case tsqlParser::NOCOUNT:
      case tsqlParser::NODES:
      case tsqlParser::NOEXPAND:
      case tsqlParser::NORECOMPUTE:
      case tsqlParser::NTILE:
      case tsqlParser::NUMBER:
      case tsqlParser::OFFSET:
      case tsqlParser::ONLINE:
      case tsqlParser::ONLY:
      case tsqlParser::OPTIMISTIC:
      case tsqlParser::OPTIMIZE:
      case tsqlParser::OUT:
      case tsqlParser::OUTPUT:
      case tsqlParser::OWNER:
      case tsqlParser::PARAMETERIZATION:
      case tsqlParser::PARSE:
      case tsqlParser::PARTITION:
      case tsqlParser::PATH:
      case tsqlParser::POWER:
      case tsqlParser::PRECEDING:
      case tsqlParser::PRIOR:
      case tsqlParser::PRIVILEGES:
      case tsqlParser::QUERY:
      case tsqlParser::RANGE:
      case tsqlParser::RANK:
      case tsqlParser::READONLY:
      case tsqlParser::READ_ONLY:
      case tsqlParser::RECOMPILE:
      case tsqlParser::RELATIVE:
      case tsqlParser::REMOTE:
      case tsqlParser::REPEATABLE:
      case tsqlParser::ROBUST:
      case tsqlParser::ROOT:
      case tsqlParser::ROUND:
      case tsqlParser::ROW:
      case tsqlParser::ROWGUID:
      case tsqlParser::ROWS:
      case tsqlParser::ROW_NUMBER:
      case tsqlParser::SAMPLE:
      case tsqlParser::SCHEMABINDING:
      case tsqlParser::SCROLL:
      case tsqlParser::SCROLL_LOCKS:
      case tsqlParser::SELF:
      case tsqlParser::SERIALIZABLE:
      case tsqlParser::SIMPLE:
      case tsqlParser::SIN:
      case tsqlParser::SIZE:
      case tsqlParser::SNAPSHOT:
      case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
      case tsqlParser::STATIC:
      case tsqlParser::STATS_STREAM:
      case tsqlParser::STDEV:
      case tsqlParser::STDEVP:
      case tsqlParser::STRING_SPLIT:
      case tsqlParser::SUM:
      case tsqlParser::SQRT:
      case tsqlParser::SQUARE:
      case tsqlParser::TAN:
      case tsqlParser::TEXTIMAGE_ON:
      case tsqlParser::THROW:
      case tsqlParser::TIES:
      case tsqlParser::TIME:
      case tsqlParser::TRY:
      case tsqlParser::TYPE:
      case tsqlParser::TYPE_WARNING:
      case tsqlParser::UNBOUNDED:
      case tsqlParser::UNCOMMITTED:
      case tsqlParser::UNKNOWN:
      case tsqlParser::USING:
      case tsqlParser::VAR:
      case tsqlParser::VARP:
      case tsqlParser::VIEWS:
      case tsqlParser::VIEW_METADATA:
      case tsqlParser::WORK:
      case tsqlParser::XML:
      case tsqlParser::XMLNAMESPACES:
      case tsqlParser::ZONE:
      case tsqlParser::DOUBLE_QUOTE_ID:
      case tsqlParser::SQUARE_BRACKET_ID:
      case tsqlParser::ID: {
        enterOuterAlt(_localctx, 3);
        setState(2192);
        function_call();
        break;
      }

      case tsqlParser::LOCAL_ID: {
        enterOuterAlt(_localctx, 4);
        setState(2193);
        match(tsqlParser::LOCAL_ID);
        break;
      }

      case tsqlParser::LR_BRACKET: {
        enterOuterAlt(_localctx, 5);
        setState(2194);
        match(tsqlParser::LR_BRACKET);
        setState(2195);
        constant_expression();
        setState(2196);
        match(tsqlParser::RR_BRACKET);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubqueryContext ------------------------------------------------------------------

tsqlParser::SubqueryContext::SubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::Select_statementContext* tsqlParser::SubqueryContext::select_statement() {
  return getRuleContext<tsqlParser::Select_statementContext>(0);
}


size_t tsqlParser::SubqueryContext::getRuleIndex() const {
  return tsqlParser::RuleSubquery;
}


std::any tsqlParser::SubqueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitSubquery(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::SubqueryContext* tsqlParser::subquery() {
  SubqueryContext *_localctx = _tracker.createInstance<SubqueryContext>(_ctx, getState());
  enterRule(_localctx, 216, tsqlParser::RuleSubquery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2200);
    select_statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- With_expressionContext ------------------------------------------------------------------

tsqlParser::With_expressionContext::With_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::With_expressionContext::WITH() {
  return getToken(tsqlParser::WITH, 0);
}

std::vector<tsqlParser::Common_table_expressionContext *> tsqlParser::With_expressionContext::common_table_expression() {
  return getRuleContexts<tsqlParser::Common_table_expressionContext>();
}

tsqlParser::Common_table_expressionContext* tsqlParser::With_expressionContext::common_table_expression(size_t i) {
  return getRuleContext<tsqlParser::Common_table_expressionContext>(i);
}

tree::TerminalNode* tsqlParser::With_expressionContext::XMLNAMESPACES() {
  return getToken(tsqlParser::XMLNAMESPACES, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::With_expressionContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::With_expressionContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::With_expressionContext::getRuleIndex() const {
  return tsqlParser::RuleWith_expression;
}


std::any tsqlParser::With_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitWith_expression(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::With_expressionContext* tsqlParser::with_expression() {
  With_expressionContext *_localctx = _tracker.createInstance<With_expressionContext>(_ctx, getState());
  enterRule(_localctx, 218, tsqlParser::RuleWith_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2202);
    match(tsqlParser::WITH);
    setState(2205);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 319, _ctx)) {
    case 1: {
      setState(2203);
      match(tsqlParser::XMLNAMESPACES);
      setState(2204);
      match(tsqlParser::COMMA);
      break;
    }

    default:
      break;
    }
    setState(2207);
    common_table_expression();
    setState(2212);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == tsqlParser::COMMA) {
      setState(2208);
      match(tsqlParser::COMMA);
      setState(2209);
      common_table_expression();
      setState(2214);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Common_table_expressionContext ------------------------------------------------------------------

tsqlParser::Common_table_expressionContext::Common_table_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Common_table_expressionContext::AS() {
  return getToken(tsqlParser::AS, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Common_table_expressionContext::LR_BRACKET() {
  return getTokens(tsqlParser::LR_BRACKET);
}

tree::TerminalNode* tsqlParser::Common_table_expressionContext::LR_BRACKET(size_t i) {
  return getToken(tsqlParser::LR_BRACKET, i);
}

tsqlParser::Select_statementContext* tsqlParser::Common_table_expressionContext::select_statement() {
  return getRuleContext<tsqlParser::Select_statementContext>(0);
}

std::vector<tree::TerminalNode *> tsqlParser::Common_table_expressionContext::RR_BRACKET() {
  return getTokens(tsqlParser::RR_BRACKET);
}

tree::TerminalNode* tsqlParser::Common_table_expressionContext::RR_BRACKET(size_t i) {
  return getToken(tsqlParser::RR_BRACKET, i);
}

tsqlParser::R_idContext* tsqlParser::Common_table_expressionContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tsqlParser::Column_name_listContext* tsqlParser::Common_table_expressionContext::column_name_list() {
  return getRuleContext<tsqlParser::Column_name_listContext>(0);
}


size_t tsqlParser::Common_table_expressionContext::getRuleIndex() const {
  return tsqlParser::RuleCommon_table_expression;
}


std::any tsqlParser::Common_table_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitCommon_table_expression(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Common_table_expressionContext* tsqlParser::common_table_expression() {
  Common_table_expressionContext *_localctx = _tracker.createInstance<Common_table_expressionContext>(_ctx, getState());
  enterRule(_localctx, 220, tsqlParser::RuleCommon_table_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2215);
    antlrcpp::downCast<Common_table_expressionContext *>(_localctx)->expression_name = r_id();
    setState(2220);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::LR_BRACKET) {
      setState(2216);
      match(tsqlParser::LR_BRACKET);
      setState(2217);
      column_name_list();
      setState(2218);
      match(tsqlParser::RR_BRACKET);
    }
    setState(2222);
    match(tsqlParser::AS);
    setState(2223);
    match(tsqlParser::LR_BRACKET);
    setState(2224);
    select_statement();
    setState(2225);
    match(tsqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Update_elemContext ------------------------------------------------------------------

tsqlParser::Update_elemContext::Update_elemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::ExpressionContext* tsqlParser::Update_elemContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

tsqlParser::Full_column_nameContext* tsqlParser::Update_elemContext::full_column_name() {
  return getRuleContext<tsqlParser::Full_column_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Update_elemContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

tsqlParser::Assignment_operatorContext* tsqlParser::Update_elemContext::assignment_operator() {
  return getRuleContext<tsqlParser::Assignment_operatorContext>(0);
}

tree::TerminalNode* tsqlParser::Update_elemContext::LOCAL_ID() {
  return getToken(tsqlParser::LOCAL_ID, 0);
}

tree::TerminalNode* tsqlParser::Update_elemContext::DOT() {
  return getToken(tsqlParser::DOT, 0);
}

tree::TerminalNode* tsqlParser::Update_elemContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tsqlParser::Expression_listContext* tsqlParser::Update_elemContext::expression_list() {
  return getRuleContext<tsqlParser::Expression_listContext>(0);
}

tree::TerminalNode* tsqlParser::Update_elemContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

std::vector<tsqlParser::R_idContext *> tsqlParser::Update_elemContext::r_id() {
  return getRuleContexts<tsqlParser::R_idContext>();
}

tsqlParser::R_idContext* tsqlParser::Update_elemContext::r_id(size_t i) {
  return getRuleContext<tsqlParser::R_idContext>(i);
}


size_t tsqlParser::Update_elemContext::getRuleIndex() const {
  return tsqlParser::RuleUpdate_elem;
}


std::any tsqlParser::Update_elemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitUpdate_elem(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Update_elemContext* tsqlParser::update_elem() {
  Update_elemContext *_localctx = _tracker.createInstance<Update_elemContext>(_ctx, getState());
  enterRule(_localctx, 222, tsqlParser::RuleUpdate_elem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2243);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 324, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2229);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case tsqlParser::FILLFACTOR:
        case tsqlParser::FORCESEEK:
        case tsqlParser::NEXT:
        case tsqlParser::NUMERIC:
        case tsqlParser::VALUE:
        case tsqlParser::ABSOLUTE:
        case tsqlParser::APPLY:
        case tsqlParser::AUTO:
        case tsqlParser::AVG:
        case tsqlParser::BASE64:
        case tsqlParser::CALLER:
        case tsqlParser::CAST:
        case tsqlParser::CATCH:
        case tsqlParser::CHECKSUM_AGG:
        case tsqlParser::COMMITTED:
        case tsqlParser::CONCAT:
        case tsqlParser::CONTROL:
        case tsqlParser::COOKIE:
        case tsqlParser::COUNT:
        case tsqlParser::COUNT_BIG:
        case tsqlParser::DATE:
        case tsqlParser::DELAY:
        case tsqlParser::DELETED:
        case tsqlParser::DENSE_RANK:
        case tsqlParser::DISABLE:
        case tsqlParser::DYNAMIC:
        case tsqlParser::ENCRYPTION:
        case tsqlParser::EXIST:
        case tsqlParser::EXPAND:
        case tsqlParser::FAST:
        case tsqlParser::FAST_FORWARD:
        case tsqlParser::FIRST:
        case tsqlParser::FIRST_VALUE:
        case tsqlParser::FOLLOWING:
        case tsqlParser::FORCE:
        case tsqlParser::FORCED:
        case tsqlParser::FORWARD_ONLY:
        case tsqlParser::FULLSCAN:
        case tsqlParser::GLOBAL:
        case tsqlParser::GROUPING:
        case tsqlParser::GROUPING_ID:
        case tsqlParser::HASH:
        case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case tsqlParser::IMPERSONATE:
        case tsqlParser::INSENSITIVE:
        case tsqlParser::INSERTED:
        case tsqlParser::ISOLATION:
        case tsqlParser::IO:
        case tsqlParser::KEEP:
        case tsqlParser::KEEPFIXED:
        case tsqlParser::KEYSET:
        case tsqlParser::LAG:
        case tsqlParser::LAST:
        case tsqlParser::LAST_VALUE:
        case tsqlParser::LEAD:
        case tsqlParser::LEVEL:
        case tsqlParser::LOCAL:
        case tsqlParser::LOCK_ESCALATION:
        case tsqlParser::LOGIN:
        case tsqlParser::LOOP:
        case tsqlParser::MARK:
        case tsqlParser::MAX:
        case tsqlParser::MAXDOP:
        case tsqlParser::MAXRECURSION:
        case tsqlParser::MIN:
        case tsqlParser::MODIFY:
        case tsqlParser::NAME:
        case tsqlParser::NOCOUNT:
        case tsqlParser::NODES:
        case tsqlParser::NOEXPAND:
        case tsqlParser::NORECOMPUTE:
        case tsqlParser::NTILE:
        case tsqlParser::NUMBER:
        case tsqlParser::OFFSET:
        case tsqlParser::ONLINE:
        case tsqlParser::ONLY:
        case tsqlParser::OPTIMISTIC:
        case tsqlParser::OPTIMIZE:
        case tsqlParser::OUT:
        case tsqlParser::OUTPUT:
        case tsqlParser::OWNER:
        case tsqlParser::PARAMETERIZATION:
        case tsqlParser::PARTITION:
        case tsqlParser::PATH:
        case tsqlParser::PRECEDING:
        case tsqlParser::PRIOR:
        case tsqlParser::PRIVILEGES:
        case tsqlParser::QUERY:
        case tsqlParser::RANGE:
        case tsqlParser::RANK:
        case tsqlParser::READONLY:
        case tsqlParser::READ_ONLY:
        case tsqlParser::RECOMPILE:
        case tsqlParser::RELATIVE:
        case tsqlParser::REMOTE:
        case tsqlParser::REPEATABLE:
        case tsqlParser::ROBUST:
        case tsqlParser::ROOT:
        case tsqlParser::ROW:
        case tsqlParser::ROWGUID:
        case tsqlParser::ROWS:
        case tsqlParser::ROW_NUMBER:
        case tsqlParser::SAMPLE:
        case tsqlParser::SCHEMABINDING:
        case tsqlParser::SCROLL:
        case tsqlParser::SCROLL_LOCKS:
        case tsqlParser::SELF:
        case tsqlParser::SERIALIZABLE:
        case tsqlParser::SIMPLE:
        case tsqlParser::SIZE:
        case tsqlParser::SNAPSHOT:
        case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
        case tsqlParser::STATIC:
        case tsqlParser::STATS_STREAM:
        case tsqlParser::STDEV:
        case tsqlParser::STDEVP:
        case tsqlParser::SUM:
        case tsqlParser::TEXTIMAGE_ON:
        case tsqlParser::THROW:
        case tsqlParser::TIES:
        case tsqlParser::TIME:
        case tsqlParser::TRY:
        case tsqlParser::TYPE:
        case tsqlParser::TYPE_WARNING:
        case tsqlParser::UNBOUNDED:
        case tsqlParser::UNCOMMITTED:
        case tsqlParser::UNKNOWN:
        case tsqlParser::USING:
        case tsqlParser::VAR:
        case tsqlParser::VARP:
        case tsqlParser::VIEWS:
        case tsqlParser::VIEW_METADATA:
        case tsqlParser::WORK:
        case tsqlParser::XML:
        case tsqlParser::XMLNAMESPACES:
        case tsqlParser::ZONE:
        case tsqlParser::DOUBLE_QUOTE_ID:
        case tsqlParser::SQUARE_BRACKET_ID:
        case tsqlParser::ID: {
          setState(2227);
          full_column_name();
          break;
        }

        case tsqlParser::LOCAL_ID: {
          setState(2228);
          antlrcpp::downCast<Update_elemContext *>(_localctx)->name = match(tsqlParser::LOCAL_ID);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2233);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case tsqlParser::EQUAL: {
          setState(2231);
          match(tsqlParser::EQUAL);
          break;
        }

        case tsqlParser::PLUS_ASSIGN:
        case tsqlParser::MINUS_ASSIGN:
        case tsqlParser::MULT_ASSIGN:
        case tsqlParser::DIV_ASSIGN:
        case tsqlParser::MOD_ASSIGN:
        case tsqlParser::AND_ASSIGN:
        case tsqlParser::XOR_ASSIGN:
        case tsqlParser::OR_ASSIGN: {
          setState(2232);
          assignment_operator();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2235);
      expression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2236);
      antlrcpp::downCast<Update_elemContext *>(_localctx)->udt_column_name = r_id();
      setState(2237);
      match(tsqlParser::DOT);
      setState(2238);
      antlrcpp::downCast<Update_elemContext *>(_localctx)->method_name = r_id();
      setState(2239);
      match(tsqlParser::LR_BRACKET);
      setState(2240);
      expression_list();
      setState(2241);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Search_condition_listContext ------------------------------------------------------------------

tsqlParser::Search_condition_listContext::Search_condition_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tsqlParser::Search_conditionContext *> tsqlParser::Search_condition_listContext::search_condition() {
  return getRuleContexts<tsqlParser::Search_conditionContext>();
}

tsqlParser::Search_conditionContext* tsqlParser::Search_condition_listContext::search_condition(size_t i) {
  return getRuleContext<tsqlParser::Search_conditionContext>(i);
}

std::vector<tree::TerminalNode *> tsqlParser::Search_condition_listContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Search_condition_listContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::Search_condition_listContext::getRuleIndex() const {
  return tsqlParser::RuleSearch_condition_list;
}


std::any tsqlParser::Search_condition_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitSearch_condition_list(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Search_condition_listContext* tsqlParser::search_condition_list() {
  Search_condition_listContext *_localctx = _tracker.createInstance<Search_condition_listContext>(_ctx, getState());
  enterRule(_localctx, 224, tsqlParser::RuleSearch_condition_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2245);
    search_condition(0);
    setState(2250);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == tsqlParser::COMMA) {
      setState(2246);
      match(tsqlParser::COMMA);
      setState(2247);
      search_condition(0);
      setState(2252);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Search_conditionContext ------------------------------------------------------------------

tsqlParser::Search_conditionContext::Search_conditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t tsqlParser::Search_conditionContext::getRuleIndex() const {
  return tsqlParser::RuleSearch_condition;
}

void tsqlParser::Search_conditionContext::copyFrom(Search_conditionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Search_cond_orContext ------------------------------------------------------------------

std::vector<tsqlParser::Search_conditionContext *> tsqlParser::Search_cond_orContext::search_condition() {
  return getRuleContexts<tsqlParser::Search_conditionContext>();
}

tsqlParser::Search_conditionContext* tsqlParser::Search_cond_orContext::search_condition(size_t i) {
  return getRuleContext<tsqlParser::Search_conditionContext>(i);
}

tree::TerminalNode* tsqlParser::Search_cond_orContext::OR() {
  return getToken(tsqlParser::OR, 0);
}

tsqlParser::Search_cond_orContext::Search_cond_orContext(Search_conditionContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Search_cond_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitSearch_cond_or(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Search_cond_predContext ------------------------------------------------------------------

tsqlParser::PredicateContext* tsqlParser::Search_cond_predContext::predicate() {
  return getRuleContext<tsqlParser::PredicateContext>(0);
}

tsqlParser::Search_cond_predContext::Search_cond_predContext(Search_conditionContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Search_cond_predContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitSearch_cond_pred(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Search_cond_andContext ------------------------------------------------------------------

std::vector<tsqlParser::Search_conditionContext *> tsqlParser::Search_cond_andContext::search_condition() {
  return getRuleContexts<tsqlParser::Search_conditionContext>();
}

tsqlParser::Search_conditionContext* tsqlParser::Search_cond_andContext::search_condition(size_t i) {
  return getRuleContext<tsqlParser::Search_conditionContext>(i);
}

tree::TerminalNode* tsqlParser::Search_cond_andContext::AND() {
  return getToken(tsqlParser::AND, 0);
}

tsqlParser::Search_cond_andContext::Search_cond_andContext(Search_conditionContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Search_cond_andContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitSearch_cond_and(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Search_conditionContext* tsqlParser::search_condition() {
   return search_condition(0);
}

tsqlParser::Search_conditionContext* tsqlParser::search_condition(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  tsqlParser::Search_conditionContext *_localctx = _tracker.createInstance<Search_conditionContext>(_ctx, parentState);
  tsqlParser::Search_conditionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 226;
  enterRecursionRule(_localctx, 226, tsqlParser::RuleSearch_condition, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<Search_cond_predContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(2254);
    predicate();
    _ctx->stop = _input->LT(-1);
    setState(2264);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 327, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2262);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 326, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<Search_cond_andContext>(_tracker.createInstance<Search_conditionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleSearch_condition);
          setState(2256);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2257);
          antlrcpp::downCast<Search_cond_andContext *>(_localctx)->op = match(tsqlParser::AND);
          setState(2258);
          antlrcpp::downCast<Search_cond_andContext *>(_localctx)->right = search_condition(4);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<Search_cond_orContext>(_tracker.createInstance<Search_conditionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleSearch_condition);
          setState(2259);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2260);
          antlrcpp::downCast<Search_cond_orContext *>(_localctx)->op = match(tsqlParser::OR);
          setState(2261);
          antlrcpp::downCast<Search_cond_orContext *>(_localctx)->right = search_condition(3);
          break;
        }

        default:
          break;
        } 
      }
      setState(2266);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 327, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- PredicateContext ------------------------------------------------------------------

tsqlParser::PredicateContext::PredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t tsqlParser::PredicateContext::getRuleIndex() const {
  return tsqlParser::RulePredicate;
}

void tsqlParser::PredicateContext::copyFrom(PredicateContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Binary_in_expressionContext ------------------------------------------------------------------

tree::TerminalNode* tsqlParser::Binary_in_expressionContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Binary_in_expressionContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tsqlParser::ExpressionContext* tsqlParser::Binary_in_expressionContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

tree::TerminalNode* tsqlParser::Binary_in_expressionContext::IN() {
  return getToken(tsqlParser::IN, 0);
}

tsqlParser::SubqueryContext* tsqlParser::Binary_in_expressionContext::subquery() {
  return getRuleContext<tsqlParser::SubqueryContext>(0);
}

tsqlParser::Expression_listContext* tsqlParser::Binary_in_expressionContext::expression_list() {
  return getRuleContext<tsqlParser::Expression_listContext>(0);
}

tree::TerminalNode* tsqlParser::Binary_in_expressionContext::NOT() {
  return getToken(tsqlParser::NOT, 0);
}

tsqlParser::Binary_in_expressionContext::Binary_in_expressionContext(PredicateContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Binary_in_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitBinary_in_expression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Unary_operator_expression2Context ------------------------------------------------------------------

tree::TerminalNode* tsqlParser::Unary_operator_expression2Context::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Unary_operator_expression2Context::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Unary_operator_expression2Context::EXISTS() {
  return getToken(tsqlParser::EXISTS, 0);
}

tsqlParser::SubqueryContext* tsqlParser::Unary_operator_expression2Context::subquery() {
  return getRuleContext<tsqlParser::SubqueryContext>(0);
}

tsqlParser::Unary_operator_expression2Context::Unary_operator_expression2Context(PredicateContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Unary_operator_expression2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitUnary_operator_expression2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Binary_mod_expressionContext ------------------------------------------------------------------

tree::TerminalNode* tsqlParser::Binary_mod_expressionContext::AND() {
  return getToken(tsqlParser::AND, 0);
}

std::vector<tsqlParser::ExpressionContext *> tsqlParser::Binary_mod_expressionContext::expression() {
  return getRuleContexts<tsqlParser::ExpressionContext>();
}

tsqlParser::ExpressionContext* tsqlParser::Binary_mod_expressionContext::expression(size_t i) {
  return getRuleContext<tsqlParser::ExpressionContext>(i);
}

tree::TerminalNode* tsqlParser::Binary_mod_expressionContext::BETWEEN() {
  return getToken(tsqlParser::BETWEEN, 0);
}

tree::TerminalNode* tsqlParser::Binary_mod_expressionContext::NOT() {
  return getToken(tsqlParser::NOT, 0);
}

tree::TerminalNode* tsqlParser::Binary_mod_expressionContext::LIKE() {
  return getToken(tsqlParser::LIKE, 0);
}

tree::TerminalNode* tsqlParser::Binary_mod_expressionContext::ESCAPE() {
  return getToken(tsqlParser::ESCAPE, 0);
}

tsqlParser::Binary_mod_expressionContext::Binary_mod_expressionContext(PredicateContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Binary_mod_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitBinary_mod_expression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Unary_operator_expression3Context ------------------------------------------------------------------

tree::TerminalNode* tsqlParser::Unary_operator_expression3Context::NOT() {
  return getToken(tsqlParser::NOT, 0);
}

tsqlParser::PredicateContext* tsqlParser::Unary_operator_expression3Context::predicate() {
  return getRuleContext<tsqlParser::PredicateContext>(0);
}

tsqlParser::Unary_operator_expression3Context::Unary_operator_expression3Context(PredicateContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Unary_operator_expression3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitUnary_operator_expression3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Bracket_search_expressionContext ------------------------------------------------------------------

tree::TerminalNode* tsqlParser::Bracket_search_expressionContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tsqlParser::Search_conditionContext* tsqlParser::Bracket_search_expressionContext::search_condition() {
  return getRuleContext<tsqlParser::Search_conditionContext>(0);
}

tree::TerminalNode* tsqlParser::Bracket_search_expressionContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tsqlParser::Bracket_search_expressionContext::Bracket_search_expressionContext(PredicateContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Bracket_search_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitBracket_search_expression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Sublink_expressionContext ------------------------------------------------------------------

tree::TerminalNode* tsqlParser::Sublink_expressionContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tsqlParser::SubqueryContext* tsqlParser::Sublink_expressionContext::subquery() {
  return getRuleContext<tsqlParser::SubqueryContext>(0);
}

tree::TerminalNode* tsqlParser::Sublink_expressionContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tsqlParser::ExpressionContext* tsqlParser::Sublink_expressionContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

tsqlParser::Comparison_operatorContext* tsqlParser::Sublink_expressionContext::comparison_operator() {
  return getRuleContext<tsqlParser::Comparison_operatorContext>(0);
}

tree::TerminalNode* tsqlParser::Sublink_expressionContext::ALL() {
  return getToken(tsqlParser::ALL, 0);
}

tree::TerminalNode* tsqlParser::Sublink_expressionContext::SOME() {
  return getToken(tsqlParser::SOME, 0);
}

tree::TerminalNode* tsqlParser::Sublink_expressionContext::ANY() {
  return getToken(tsqlParser::ANY, 0);
}

tsqlParser::Sublink_expressionContext::Sublink_expressionContext(PredicateContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Sublink_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitSublink_expression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Binary_operator_expression3Context ------------------------------------------------------------------

tsqlParser::ExpressionContext* tsqlParser::Binary_operator_expression3Context::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

tree::TerminalNode* tsqlParser::Binary_operator_expression3Context::IS() {
  return getToken(tsqlParser::IS, 0);
}

tsqlParser::Null_notnullContext* tsqlParser::Binary_operator_expression3Context::null_notnull() {
  return getRuleContext<tsqlParser::Null_notnullContext>(0);
}

tsqlParser::Binary_operator_expression3Context::Binary_operator_expression3Context(PredicateContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Binary_operator_expression3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitBinary_operator_expression3(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Binary_operator_expression2Context ------------------------------------------------------------------

std::vector<tsqlParser::ExpressionContext *> tsqlParser::Binary_operator_expression2Context::expression() {
  return getRuleContexts<tsqlParser::ExpressionContext>();
}

tsqlParser::ExpressionContext* tsqlParser::Binary_operator_expression2Context::expression(size_t i) {
  return getRuleContext<tsqlParser::ExpressionContext>(i);
}

tsqlParser::Comparison_operatorContext* tsqlParser::Binary_operator_expression2Context::comparison_operator() {
  return getRuleContext<tsqlParser::Comparison_operatorContext>(0);
}

tsqlParser::Binary_operator_expression2Context::Binary_operator_expression2Context(PredicateContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Binary_operator_expression2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitBinary_operator_expression2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Decimal_expressionContext ------------------------------------------------------------------

tree::TerminalNode* tsqlParser::Decimal_expressionContext::DECIMAL() {
  return getToken(tsqlParser::DECIMAL, 0);
}

tsqlParser::Decimal_expressionContext::Decimal_expressionContext(PredicateContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Decimal_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDecimal_expression(this);
  else
    return visitor->visitChildren(this);
}
tsqlParser::PredicateContext* tsqlParser::predicate() {
  PredicateContext *_localctx = _tracker.createInstance<PredicateContext>(_ctx, getState());
  enterRule(_localctx, 228, tsqlParser::RulePredicate);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2325);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<tsqlParser::Unary_operator_expression3Context>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(2267);
      antlrcpp::downCast<Unary_operator_expression3Context *>(_localctx)->op = match(tsqlParser::NOT);
      setState(2268);
      antlrcpp::downCast<Unary_operator_expression3Context *>(_localctx)->expr = predicate();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<tsqlParser::Unary_operator_expression2Context>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(2269);
      antlrcpp::downCast<Unary_operator_expression2Context *>(_localctx)->op = match(tsqlParser::EXISTS);
      setState(2270);
      match(tsqlParser::LR_BRACKET);
      setState(2271);
      antlrcpp::downCast<Unary_operator_expression2Context *>(_localctx)->expr = subquery();
      setState(2272);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<tsqlParser::Binary_operator_expression2Context>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(2274);
      antlrcpp::downCast<Binary_operator_expression2Context *>(_localctx)->left = expression(0);
      setState(2275);
      antlrcpp::downCast<Binary_operator_expression2Context *>(_localctx)->op = comparison_operator();
      setState(2276);
      antlrcpp::downCast<Binary_operator_expression2Context *>(_localctx)->right = expression(0);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<tsqlParser::Sublink_expressionContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(2278);
      antlrcpp::downCast<Sublink_expressionContext *>(_localctx)->test_expr = expression(0);
      setState(2279);
      antlrcpp::downCast<Sublink_expressionContext *>(_localctx)->op = comparison_operator();
      setState(2280);
      antlrcpp::downCast<Sublink_expressionContext *>(_localctx)->pref = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::ALL

      || _la == tsqlParser::ANY || _la == tsqlParser::SOME)) {
        antlrcpp::downCast<Sublink_expressionContext *>(_localctx)->pref = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2281);
      match(tsqlParser::LR_BRACKET);
      setState(2282);
      subquery();
      setState(2283);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<tsqlParser::Binary_mod_expressionContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(2285);
      antlrcpp::downCast<Binary_mod_expressionContext *>(_localctx)->left = expression(0);
      setState(2287);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::NOT) {
        setState(2286);
        match(tsqlParser::NOT);
      }
      setState(2289);
      antlrcpp::downCast<Binary_mod_expressionContext *>(_localctx)->op = match(tsqlParser::BETWEEN);
      setState(2290);
      antlrcpp::downCast<Binary_mod_expressionContext *>(_localctx)->right_1 = expression(0);
      setState(2291);
      match(tsqlParser::AND);
      setState(2292);
      antlrcpp::downCast<Binary_mod_expressionContext *>(_localctx)->right_2 = expression(0);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<tsqlParser::Binary_in_expressionContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(2294);
      antlrcpp::downCast<Binary_in_expressionContext *>(_localctx)->left = expression(0);
      setState(2296);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::NOT) {
        setState(2295);
        match(tsqlParser::NOT);
      }
      setState(2298);
      antlrcpp::downCast<Binary_in_expressionContext *>(_localctx)->op = match(tsqlParser::IN);
      setState(2299);
      match(tsqlParser::LR_BRACKET);
      setState(2302);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 330, _ctx)) {
      case 1: {
        setState(2300);
        subquery();
        break;
      }

      case 2: {
        setState(2301);
        expression_list();
        break;
      }

      default:
        break;
      }
      setState(2304);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<tsqlParser::Binary_mod_expressionContext>(_localctx);
      enterOuterAlt(_localctx, 7);
      setState(2306);
      antlrcpp::downCast<Binary_mod_expressionContext *>(_localctx)->left = expression(0);
      setState(2308);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::NOT) {
        setState(2307);
        match(tsqlParser::NOT);
      }
      setState(2310);
      antlrcpp::downCast<Binary_mod_expressionContext *>(_localctx)->op = match(tsqlParser::LIKE);
      setState(2311);
      antlrcpp::downCast<Binary_mod_expressionContext *>(_localctx)->right_1 = expression(0);
      setState(2314);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 332, _ctx)) {
      case 1: {
        setState(2312);
        match(tsqlParser::ESCAPE);
        setState(2313);
        antlrcpp::downCast<Binary_mod_expressionContext *>(_localctx)->right_2 = expression(0);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<tsqlParser::Binary_operator_expression3Context>(_localctx);
      enterOuterAlt(_localctx, 8);
      setState(2316);
      antlrcpp::downCast<Binary_operator_expression3Context *>(_localctx)->left = expression(0);
      setState(2317);
      antlrcpp::downCast<Binary_operator_expression3Context *>(_localctx)->op = match(tsqlParser::IS);
      setState(2318);
      antlrcpp::downCast<Binary_operator_expression3Context *>(_localctx)->right = null_notnull();
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<tsqlParser::Bracket_search_expressionContext>(_localctx);
      enterOuterAlt(_localctx, 9);
      setState(2320);
      match(tsqlParser::LR_BRACKET);
      setState(2321);
      search_condition(0);
      setState(2322);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<tsqlParser::Decimal_expressionContext>(_localctx);
      enterOuterAlt(_localctx, 10);
      setState(2324);
      match(tsqlParser::DECIMAL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Query_expressionContext ------------------------------------------------------------------

tsqlParser::Query_expressionContext::Query_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t tsqlParser::Query_expressionContext::getRuleIndex() const {
  return tsqlParser::RuleQuery_expression;
}

void tsqlParser::Query_expressionContext::copyFrom(Query_expressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Bracket_query_expressionContext ------------------------------------------------------------------

tree::TerminalNode* tsqlParser::Bracket_query_expressionContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tsqlParser::Query_expressionContext* tsqlParser::Bracket_query_expressionContext::query_expression() {
  return getRuleContext<tsqlParser::Query_expressionContext>(0);
}

tree::TerminalNode* tsqlParser::Bracket_query_expressionContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tsqlParser::Bracket_query_expressionContext::Bracket_query_expressionContext(Query_expressionContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Bracket_query_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitBracket_query_expression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Query_specification_expressionContext ------------------------------------------------------------------

tsqlParser::Query_specificationContext* tsqlParser::Query_specification_expressionContext::query_specification() {
  return getRuleContext<tsqlParser::Query_specificationContext>(0);
}

tsqlParser::Query_specification_expressionContext::Query_specification_expressionContext(Query_expressionContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Query_specification_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitQuery_specification_expression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Union_query_expressionContext ------------------------------------------------------------------

std::vector<tsqlParser::Query_expressionContext *> tsqlParser::Union_query_expressionContext::query_expression() {
  return getRuleContexts<tsqlParser::Query_expressionContext>();
}

tsqlParser::Query_expressionContext* tsqlParser::Union_query_expressionContext::query_expression(size_t i) {
  return getRuleContext<tsqlParser::Query_expressionContext>(i);
}

tsqlParser::Union_opContext* tsqlParser::Union_query_expressionContext::union_op() {
  return getRuleContext<tsqlParser::Union_opContext>(0);
}

tsqlParser::Union_query_expressionContext::Union_query_expressionContext(Query_expressionContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Union_query_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitUnion_query_expression(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Query_expressionContext* tsqlParser::query_expression() {
   return query_expression(0);
}

tsqlParser::Query_expressionContext* tsqlParser::query_expression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  tsqlParser::Query_expressionContext *_localctx = _tracker.createInstance<Query_expressionContext>(_ctx, parentState);
  tsqlParser::Query_expressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 230;
  enterRecursionRule(_localctx, 230, tsqlParser::RuleQuery_expression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2333);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::LR_BRACKET: {
        _localctx = _tracker.createInstance<Bracket_query_expressionContext>(_localctx);
        _ctx = _localctx;
        previousContext = _localctx;

        setState(2328);
        match(tsqlParser::LR_BRACKET);
        setState(2329);
        query_expression(0);
        setState(2330);
        match(tsqlParser::RR_BRACKET);
        break;
      }

      case tsqlParser::SELECT: {
        _localctx = _tracker.createInstance<Query_specification_expressionContext>(_localctx);
        _ctx = _localctx;
        previousContext = _localctx;
        setState(2332);
        query_specification();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(2341);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 335, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        auto newContext = _tracker.createInstance<Union_query_expressionContext>(_tracker.createInstance<Query_expressionContext>(parentContext, parentState));
        _localctx = newContext;
        newContext->left = previousContext;
        pushNewRecursionContext(newContext, startState, RuleQuery_expression);
        setState(2335);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(2336);
        antlrcpp::downCast<Union_query_expressionContext *>(_localctx)->op = union_op();
        setState(2337);
        antlrcpp::downCast<Union_query_expressionContext *>(_localctx)->right = query_expression(3); 
      }
      setState(2343);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 335, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Union_opContext ------------------------------------------------------------------

tsqlParser::Union_opContext::Union_opContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Union_opContext::UNION() {
  return getToken(tsqlParser::UNION, 0);
}

tree::TerminalNode* tsqlParser::Union_opContext::EXCEPT() {
  return getToken(tsqlParser::EXCEPT, 0);
}

tree::TerminalNode* tsqlParser::Union_opContext::INTERSECT() {
  return getToken(tsqlParser::INTERSECT, 0);
}

tree::TerminalNode* tsqlParser::Union_opContext::ALL() {
  return getToken(tsqlParser::ALL, 0);
}


size_t tsqlParser::Union_opContext::getRuleIndex() const {
  return tsqlParser::RuleUnion_op;
}


std::any tsqlParser::Union_opContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitUnion_op(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Union_opContext* tsqlParser::union_op() {
  Union_opContext *_localctx = _tracker.createInstance<Union_opContext>(_ctx, getState());
  enterRule(_localctx, 232, tsqlParser::RuleUnion_op);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2350);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::UNION: {
        setState(2344);
        match(tsqlParser::UNION);
        setState(2346);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == tsqlParser::ALL) {
          setState(2345);
          match(tsqlParser::ALL);
        }
        break;
      }

      case tsqlParser::EXCEPT: {
        setState(2348);
        match(tsqlParser::EXCEPT);
        break;
      }

      case tsqlParser::INTERSECT: {
        setState(2349);
        match(tsqlParser::INTERSECT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cross_apply_expressionContext ------------------------------------------------------------------

tsqlParser::Cross_apply_expressionContext::Cross_apply_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Cross_apply_expressionContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tsqlParser::Cross_apply_expressionContext* tsqlParser::Cross_apply_expressionContext::cross_apply_expression() {
  return getRuleContext<tsqlParser::Cross_apply_expressionContext>(0);
}

tree::TerminalNode* tsqlParser::Cross_apply_expressionContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tsqlParser::Query_expressionContext* tsqlParser::Cross_apply_expressionContext::query_expression() {
  return getRuleContext<tsqlParser::Query_expressionContext>(0);
}

tsqlParser::ExpressionContext* tsqlParser::Cross_apply_expressionContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

tsqlParser::Table_value_constructorContext* tsqlParser::Cross_apply_expressionContext::table_value_constructor() {
  return getRuleContext<tsqlParser::Table_value_constructorContext>(0);
}


size_t tsqlParser::Cross_apply_expressionContext::getRuleIndex() const {
  return tsqlParser::RuleCross_apply_expression;
}


std::any tsqlParser::Cross_apply_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitCross_apply_expression(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Cross_apply_expressionContext* tsqlParser::cross_apply_expression() {
  Cross_apply_expressionContext *_localctx = _tracker.createInstance<Cross_apply_expressionContext>(_ctx, getState());
  enterRule(_localctx, 234, tsqlParser::RuleCross_apply_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2359);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 338, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2352);
      match(tsqlParser::LR_BRACKET);
      setState(2353);
      cross_apply_expression();
      setState(2354);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2356);
      query_expression(0);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2357);
      expression(0);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2358);
      table_value_constructor();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Query_specificationContext ------------------------------------------------------------------

tsqlParser::Query_specificationContext::Query_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Query_specificationContext::SELECT() {
  return getToken(tsqlParser::SELECT, 0);
}

tsqlParser::Select_listContext* tsqlParser::Query_specificationContext::select_list() {
  return getRuleContext<tsqlParser::Select_listContext>(0);
}

tsqlParser::Top_clauseContext* tsqlParser::Query_specificationContext::top_clause() {
  return getRuleContext<tsqlParser::Top_clauseContext>(0);
}

tree::TerminalNode* tsqlParser::Query_specificationContext::INTO() {
  return getToken(tsqlParser::INTO, 0);
}

tsqlParser::Full_table_nameContext* tsqlParser::Query_specificationContext::full_table_name() {
  return getRuleContext<tsqlParser::Full_table_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Query_specificationContext::FROM() {
  return getToken(tsqlParser::FROM, 0);
}

tsqlParser::Table_sourcesContext* tsqlParser::Query_specificationContext::table_sources() {
  return getRuleContext<tsqlParser::Table_sourcesContext>(0);
}

tree::TerminalNode* tsqlParser::Query_specificationContext::CROSS() {
  return getToken(tsqlParser::CROSS, 0);
}

tree::TerminalNode* tsqlParser::Query_specificationContext::APPLY() {
  return getToken(tsqlParser::APPLY, 0);
}

tsqlParser::Cross_apply_expressionContext* tsqlParser::Query_specificationContext::cross_apply_expression() {
  return getRuleContext<tsqlParser::Cross_apply_expressionContext>(0);
}

tree::TerminalNode* tsqlParser::Query_specificationContext::WHERE() {
  return getToken(tsqlParser::WHERE, 0);
}

tree::TerminalNode* tsqlParser::Query_specificationContext::GROUP() {
  return getToken(tsqlParser::GROUP, 0);
}

tree::TerminalNode* tsqlParser::Query_specificationContext::BY() {
  return getToken(tsqlParser::BY, 0);
}

std::vector<tsqlParser::Group_by_itemContext *> tsqlParser::Query_specificationContext::group_by_item() {
  return getRuleContexts<tsqlParser::Group_by_itemContext>();
}

tsqlParser::Group_by_itemContext* tsqlParser::Query_specificationContext::group_by_item(size_t i) {
  return getRuleContext<tsqlParser::Group_by_itemContext>(i);
}

tsqlParser::Group_by_grouping_setsContext* tsqlParser::Query_specificationContext::group_by_grouping_sets() {
  return getRuleContext<tsqlParser::Group_by_grouping_setsContext>(0);
}

tree::TerminalNode* tsqlParser::Query_specificationContext::WITH() {
  return getToken(tsqlParser::WITH, 0);
}

tree::TerminalNode* tsqlParser::Query_specificationContext::HAVING() {
  return getToken(tsqlParser::HAVING, 0);
}

std::vector<tsqlParser::Search_conditionContext *> tsqlParser::Query_specificationContext::search_condition() {
  return getRuleContexts<tsqlParser::Search_conditionContext>();
}

tsqlParser::Search_conditionContext* tsqlParser::Query_specificationContext::search_condition(size_t i) {
  return getRuleContext<tsqlParser::Search_conditionContext>(i);
}

tree::TerminalNode* tsqlParser::Query_specificationContext::CUBE() {
  return getToken(tsqlParser::CUBE, 0);
}

tree::TerminalNode* tsqlParser::Query_specificationContext::ROLLUP() {
  return getToken(tsqlParser::ROLLUP, 0);
}

tree::TerminalNode* tsqlParser::Query_specificationContext::ALL() {
  return getToken(tsqlParser::ALL, 0);
}

tree::TerminalNode* tsqlParser::Query_specificationContext::DISTINCT() {
  return getToken(tsqlParser::DISTINCT, 0);
}

tsqlParser::Output_dml_list_elemContext* tsqlParser::Query_specificationContext::output_dml_list_elem() {
  return getRuleContext<tsqlParser::Output_dml_list_elemContext>(0);
}

std::vector<tree::TerminalNode *> tsqlParser::Query_specificationContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Query_specificationContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::Query_specificationContext::getRuleIndex() const {
  return tsqlParser::RuleQuery_specification;
}


std::any tsqlParser::Query_specificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitQuery_specification(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Query_specificationContext* tsqlParser::query_specification() {
  Query_specificationContext *_localctx = _tracker.createInstance<Query_specificationContext>(_ctx, getState());
  enterRule(_localctx, 236, tsqlParser::RuleQuery_specification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2361);
    match(tsqlParser::SELECT);
    setState(2363);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::ALL

    || _la == tsqlParser::DISTINCT) {
      setState(2362);
      antlrcpp::downCast<Query_specificationContext *>(_localctx)->pref = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::ALL

      || _la == tsqlParser::DISTINCT)) {
        antlrcpp::downCast<Query_specificationContext *>(_localctx)->pref = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2366);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::TOP) {
      setState(2365);
      top_clause();
    }
    setState(2368);
    select_list();
    setState(2371);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 341, _ctx)) {
    case 1: {
      setState(2369);
      match(tsqlParser::INTO);
      setState(2370);
      full_table_name();
      break;
    }

    default:
      break;
    }
    setState(2375);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 342, _ctx)) {
    case 1: {
      setState(2373);
      match(tsqlParser::FROM);
      setState(2374);
      table_sources();
      break;
    }

    default:
      break;
    }
    setState(2383);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 344, _ctx)) {
    case 1: {
      setState(2377);
      match(tsqlParser::CROSS);
      setState(2378);
      match(tsqlParser::APPLY);
      setState(2379);
      cross_apply_expression();
      setState(2381);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 343, _ctx)) {
      case 1: {
        setState(2380);
        output_dml_list_elem();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
    setState(2387);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 345, _ctx)) {
    case 1: {
      setState(2385);
      match(tsqlParser::WHERE);
      setState(2386);
      antlrcpp::downCast<Query_specificationContext *>(_localctx)->where = search_condition(0);
      break;
    }

    default:
      break;
    }
    setState(2399);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 347, _ctx)) {
    case 1: {
      setState(2389);
      match(tsqlParser::GROUP);
      setState(2390);
      match(tsqlParser::BY);
      setState(2391);
      group_by_item();
      setState(2396);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 346, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2392);
          match(tsqlParser::COMMA);
          setState(2393);
          group_by_item(); 
        }
        setState(2398);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 346, _ctx);
      }
      break;
    }

    default:
      break;
    }
    setState(2402);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 348, _ctx)) {
    case 1: {
      setState(2401);
      group_by_grouping_sets();
      break;
    }

    default:
      break;
    }
    setState(2406);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 349, _ctx)) {
    case 1: {
      setState(2404);
      match(tsqlParser::WITH);
      setState(2405);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::CUBE || _la == tsqlParser::ROLLUP)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
    setState(2410);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 350, _ctx)) {
    case 1: {
      setState(2408);
      match(tsqlParser::HAVING);
      setState(2409);
      antlrcpp::downCast<Query_specificationContext *>(_localctx)->having = search_condition(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Group_by_grouping_setsContext ------------------------------------------------------------------

tsqlParser::Group_by_grouping_setsContext::Group_by_grouping_setsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Group_by_grouping_setsContext::GROUP() {
  return getToken(tsqlParser::GROUP, 0);
}

tree::TerminalNode* tsqlParser::Group_by_grouping_setsContext::BY() {
  return getToken(tsqlParser::BY, 0);
}

tree::TerminalNode* tsqlParser::Group_by_grouping_setsContext::GROUPING() {
  return getToken(tsqlParser::GROUPING, 0);
}

tree::TerminalNode* tsqlParser::Group_by_grouping_setsContext::SETS() {
  return getToken(tsqlParser::SETS, 0);
}

tree::TerminalNode* tsqlParser::Group_by_grouping_setsContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

std::vector<tsqlParser::Grouping_setContext *> tsqlParser::Group_by_grouping_setsContext::grouping_set() {
  return getRuleContexts<tsqlParser::Grouping_setContext>();
}

tsqlParser::Grouping_setContext* tsqlParser::Group_by_grouping_setsContext::grouping_set(size_t i) {
  return getRuleContext<tsqlParser::Grouping_setContext>(i);
}

tree::TerminalNode* tsqlParser::Group_by_grouping_setsContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Group_by_grouping_setsContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Group_by_grouping_setsContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::Group_by_grouping_setsContext::getRuleIndex() const {
  return tsqlParser::RuleGroup_by_grouping_sets;
}


std::any tsqlParser::Group_by_grouping_setsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitGroup_by_grouping_sets(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Group_by_grouping_setsContext* tsqlParser::group_by_grouping_sets() {
  Group_by_grouping_setsContext *_localctx = _tracker.createInstance<Group_by_grouping_setsContext>(_ctx, getState());
  enterRule(_localctx, 238, tsqlParser::RuleGroup_by_grouping_sets);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2412);
    match(tsqlParser::GROUP);
    setState(2413);
    match(tsqlParser::BY);
    setState(2414);
    match(tsqlParser::GROUPING);
    setState(2415);
    match(tsqlParser::SETS);
    setState(2416);
    match(tsqlParser::LR_BRACKET);
    setState(2417);
    grouping_set();
    setState(2422);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == tsqlParser::COMMA) {
      setState(2418);
      match(tsqlParser::COMMA);
      setState(2419);
      grouping_set();
      setState(2424);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2425);
    match(tsqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Grouping_setContext ------------------------------------------------------------------

tsqlParser::Grouping_setContext::Grouping_setContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Grouping_setContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Grouping_setContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

std::vector<tsqlParser::Group_by_itemContext *> tsqlParser::Grouping_setContext::group_by_item() {
  return getRuleContexts<tsqlParser::Group_by_itemContext>();
}

tsqlParser::Group_by_itemContext* tsqlParser::Grouping_setContext::group_by_item(size_t i) {
  return getRuleContext<tsqlParser::Group_by_itemContext>(i);
}

std::vector<tree::TerminalNode *> tsqlParser::Grouping_setContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Grouping_setContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::Grouping_setContext::getRuleIndex() const {
  return tsqlParser::RuleGrouping_set;
}


std::any tsqlParser::Grouping_setContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitGrouping_set(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Grouping_setContext* tsqlParser::grouping_set() {
  Grouping_setContext *_localctx = _tracker.createInstance<Grouping_setContext>(_ctx, getState());
  enterRule(_localctx, 240, tsqlParser::RuleGrouping_set);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2441);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 353, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2427);
      match(tsqlParser::LR_BRACKET);
      setState(2428);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2429);
      group_by_item();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2430);
      match(tsqlParser::LR_BRACKET);
      setState(2431);
      group_by_item();
      setState(2436);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == tsqlParser::COMMA) {
        setState(2432);
        match(tsqlParser::COMMA);
        setState(2433);
        group_by_item();
        setState(2438);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2439);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Top_clauseContext ------------------------------------------------------------------

tsqlParser::Top_clauseContext::Top_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Top_clauseContext::TOP() {
  return getToken(tsqlParser::TOP, 0);
}

tsqlParser::ExpressionContext* tsqlParser::Top_clauseContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

tree::TerminalNode* tsqlParser::Top_clauseContext::PERCENT() {
  return getToken(tsqlParser::PERCENT, 0);
}

tree::TerminalNode* tsqlParser::Top_clauseContext::WITH() {
  return getToken(tsqlParser::WITH, 0);
}

tree::TerminalNode* tsqlParser::Top_clauseContext::TIES() {
  return getToken(tsqlParser::TIES, 0);
}


size_t tsqlParser::Top_clauseContext::getRuleIndex() const {
  return tsqlParser::RuleTop_clause;
}


std::any tsqlParser::Top_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitTop_clause(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Top_clauseContext* tsqlParser::top_clause() {
  Top_clauseContext *_localctx = _tracker.createInstance<Top_clauseContext>(_ctx, getState());
  enterRule(_localctx, 242, tsqlParser::RuleTop_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2443);
    match(tsqlParser::TOP);
    setState(2444);
    expression(0);
    setState(2446);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::PERCENT) {
      setState(2445);
      match(tsqlParser::PERCENT);
    }
    setState(2450);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::WITH) {
      setState(2448);
      match(tsqlParser::WITH);
      setState(2449);
      match(tsqlParser::TIES);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Top_clause_dmContext ------------------------------------------------------------------

tsqlParser::Top_clause_dmContext::Top_clause_dmContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Top_clause_dmContext::TOP() {
  return getToken(tsqlParser::TOP, 0);
}

tree::TerminalNode* tsqlParser::Top_clause_dmContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tsqlParser::ExpressionContext* tsqlParser::Top_clause_dmContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

tree::TerminalNode* tsqlParser::Top_clause_dmContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Top_clause_dmContext::PERCENT() {
  return getToken(tsqlParser::PERCENT, 0);
}


size_t tsqlParser::Top_clause_dmContext::getRuleIndex() const {
  return tsqlParser::RuleTop_clause_dm;
}


std::any tsqlParser::Top_clause_dmContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitTop_clause_dm(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Top_clause_dmContext* tsqlParser::top_clause_dm() {
  Top_clause_dmContext *_localctx = _tracker.createInstance<Top_clause_dmContext>(_ctx, getState());
  enterRule(_localctx, 244, tsqlParser::RuleTop_clause_dm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2452);
    match(tsqlParser::TOP);
    setState(2453);
    match(tsqlParser::LR_BRACKET);
    setState(2454);
    expression(0);
    setState(2455);
    match(tsqlParser::RR_BRACKET);
    setState(2457);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::PERCENT) {
      setState(2456);
      match(tsqlParser::PERCENT);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Order_by_clauseContext ------------------------------------------------------------------

tsqlParser::Order_by_clauseContext::Order_by_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Order_by_clauseContext::ORDER() {
  return getToken(tsqlParser::ORDER, 0);
}

tree::TerminalNode* tsqlParser::Order_by_clauseContext::BY() {
  return getToken(tsqlParser::BY, 0);
}

std::vector<tsqlParser::Order_by_expressionContext *> tsqlParser::Order_by_clauseContext::order_by_expression() {
  return getRuleContexts<tsqlParser::Order_by_expressionContext>();
}

tsqlParser::Order_by_expressionContext* tsqlParser::Order_by_clauseContext::order_by_expression(size_t i) {
  return getRuleContext<tsqlParser::Order_by_expressionContext>(i);
}

std::vector<tree::TerminalNode *> tsqlParser::Order_by_clauseContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Order_by_clauseContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}

tree::TerminalNode* tsqlParser::Order_by_clauseContext::OFFSET() {
  return getToken(tsqlParser::OFFSET, 0);
}

tsqlParser::ExpressionContext* tsqlParser::Order_by_clauseContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

tree::TerminalNode* tsqlParser::Order_by_clauseContext::ROW() {
  return getToken(tsqlParser::ROW, 0);
}

tree::TerminalNode* tsqlParser::Order_by_clauseContext::ROWS() {
  return getToken(tsqlParser::ROWS, 0);
}

tsqlParser::Fetch_expressionContext* tsqlParser::Order_by_clauseContext::fetch_expression() {
  return getRuleContext<tsqlParser::Fetch_expressionContext>(0);
}


size_t tsqlParser::Order_by_clauseContext::getRuleIndex() const {
  return tsqlParser::RuleOrder_by_clause;
}


std::any tsqlParser::Order_by_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitOrder_by_clause(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Order_by_clauseContext* tsqlParser::order_by_clause() {
  Order_by_clauseContext *_localctx = _tracker.createInstance<Order_by_clauseContext>(_ctx, getState());
  enterRule(_localctx, 246, tsqlParser::RuleOrder_by_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2459);
    match(tsqlParser::ORDER);
    setState(2460);
    match(tsqlParser::BY);
    setState(2461);
    order_by_expression();
    setState(2466);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 357, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2462);
        match(tsqlParser::COMMA);
        setState(2463);
        order_by_expression(); 
      }
      setState(2468);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 357, _ctx);
    }
    setState(2475);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 359, _ctx)) {
    case 1: {
      setState(2469);
      match(tsqlParser::OFFSET);
      setState(2470);
      antlrcpp::downCast<Order_by_clauseContext *>(_localctx)->offset = expression(0);
      setState(2471);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::ROW

      || _la == tsqlParser::ROWS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2473);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 358, _ctx)) {
      case 1: {
        setState(2472);
        fetch_expression();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fetch_expressionContext ------------------------------------------------------------------

tsqlParser::Fetch_expressionContext::Fetch_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Fetch_expressionContext::FETCH() {
  return getToken(tsqlParser::FETCH, 0);
}

tsqlParser::ExpressionContext* tsqlParser::Fetch_expressionContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

tree::TerminalNode* tsqlParser::Fetch_expressionContext::ONLY() {
  return getToken(tsqlParser::ONLY, 0);
}

tree::TerminalNode* tsqlParser::Fetch_expressionContext::FIRST() {
  return getToken(tsqlParser::FIRST, 0);
}

tree::TerminalNode* tsqlParser::Fetch_expressionContext::NEXT() {
  return getToken(tsqlParser::NEXT, 0);
}

tree::TerminalNode* tsqlParser::Fetch_expressionContext::ROW() {
  return getToken(tsqlParser::ROW, 0);
}

tree::TerminalNode* tsqlParser::Fetch_expressionContext::ROWS() {
  return getToken(tsqlParser::ROWS, 0);
}


size_t tsqlParser::Fetch_expressionContext::getRuleIndex() const {
  return tsqlParser::RuleFetch_expression;
}


std::any tsqlParser::Fetch_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitFetch_expression(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Fetch_expressionContext* tsqlParser::fetch_expression() {
  Fetch_expressionContext *_localctx = _tracker.createInstance<Fetch_expressionContext>(_ctx, getState());
  enterRule(_localctx, 248, tsqlParser::RuleFetch_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2477);
    match(tsqlParser::FETCH);
    setState(2478);
    _la = _input->LA(1);
    if (!(_la == tsqlParser::NEXT || _la == tsqlParser::FIRST)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2479);
    expression(0);
    setState(2480);
    _la = _input->LA(1);
    if (!(_la == tsqlParser::ROW

    || _la == tsqlParser::ROWS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2481);
    match(tsqlParser::ONLY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_clauseContext ------------------------------------------------------------------

tsqlParser::For_clauseContext::For_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::For_clauseContext::FOR() {
  return getToken(tsqlParser::FOR, 0);
}

tree::TerminalNode* tsqlParser::For_clauseContext::BROWSE() {
  return getToken(tsqlParser::BROWSE, 0);
}

tree::TerminalNode* tsqlParser::For_clauseContext::XML() {
  return getToken(tsqlParser::XML, 0);
}

tree::TerminalNode* tsqlParser::For_clauseContext::AUTO() {
  return getToken(tsqlParser::AUTO, 0);
}

tsqlParser::Xml_common_directivesContext* tsqlParser::For_clauseContext::xml_common_directives() {
  return getRuleContext<tsqlParser::Xml_common_directivesContext>(0);
}

tree::TerminalNode* tsqlParser::For_clauseContext::PATH() {
  return getToken(tsqlParser::PATH, 0);
}

tree::TerminalNode* tsqlParser::For_clauseContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::For_clauseContext::STRING() {
  return getToken(tsqlParser::STRING, 0);
}

tree::TerminalNode* tsqlParser::For_clauseContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}


size_t tsqlParser::For_clauseContext::getRuleIndex() const {
  return tsqlParser::RuleFor_clause;
}


std::any tsqlParser::For_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitFor_clause(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::For_clauseContext* tsqlParser::for_clause() {
  For_clauseContext *_localctx = _tracker.createInstance<For_clauseContext>(_ctx, getState());
  enterRule(_localctx, 250, tsqlParser::RuleFor_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2502);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 363, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2483);
      match(tsqlParser::FOR);
      setState(2484);
      match(tsqlParser::BROWSE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2485);
      match(tsqlParser::FOR);
      setState(2486);
      match(tsqlParser::XML);
      setState(2487);
      match(tsqlParser::AUTO);
      setState(2489);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 360, _ctx)) {
      case 1: {
        setState(2488);
        xml_common_directives();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2491);
      match(tsqlParser::FOR);
      setState(2492);
      match(tsqlParser::XML);
      setState(2493);
      match(tsqlParser::PATH);
      setState(2497);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 361, _ctx)) {
      case 1: {
        setState(2494);
        match(tsqlParser::LR_BRACKET);
        setState(2495);
        match(tsqlParser::STRING);
        setState(2496);
        match(tsqlParser::RR_BRACKET);
        break;
      }

      default:
        break;
      }
      setState(2500);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 362, _ctx)) {
      case 1: {
        setState(2499);
        xml_common_directives();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Xml_common_directivesContext ------------------------------------------------------------------

tsqlParser::Xml_common_directivesContext::Xml_common_directivesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Xml_common_directivesContext::COMMA() {
  return getToken(tsqlParser::COMMA, 0);
}

tree::TerminalNode* tsqlParser::Xml_common_directivesContext::BINARY() {
  return getToken(tsqlParser::BINARY, 0);
}

tree::TerminalNode* tsqlParser::Xml_common_directivesContext::BASE64() {
  return getToken(tsqlParser::BASE64, 0);
}

tree::TerminalNode* tsqlParser::Xml_common_directivesContext::TYPE() {
  return getToken(tsqlParser::TYPE, 0);
}

tree::TerminalNode* tsqlParser::Xml_common_directivesContext::ROOT() {
  return getToken(tsqlParser::ROOT, 0);
}


size_t tsqlParser::Xml_common_directivesContext::getRuleIndex() const {
  return tsqlParser::RuleXml_common_directives;
}


std::any tsqlParser::Xml_common_directivesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitXml_common_directives(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Xml_common_directivesContext* tsqlParser::xml_common_directives() {
  Xml_common_directivesContext *_localctx = _tracker.createInstance<Xml_common_directivesContext>(_ctx, getState());
  enterRule(_localctx, 252, tsqlParser::RuleXml_common_directives);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2504);
    match(tsqlParser::COMMA);
    setState(2509);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::BINARY: {
        setState(2505);
        match(tsqlParser::BINARY);
        setState(2506);
        match(tsqlParser::BASE64);
        break;
      }

      case tsqlParser::TYPE: {
        setState(2507);
        match(tsqlParser::TYPE);
        break;
      }

      case tsqlParser::ROOT: {
        setState(2508);
        match(tsqlParser::ROOT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Order_by_expressionContext ------------------------------------------------------------------

tsqlParser::Order_by_expressionContext::Order_by_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::ExpressionContext* tsqlParser::Order_by_expressionContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

tree::TerminalNode* tsqlParser::Order_by_expressionContext::ASC() {
  return getToken(tsqlParser::ASC, 0);
}

tree::TerminalNode* tsqlParser::Order_by_expressionContext::DESC() {
  return getToken(tsqlParser::DESC, 0);
}


size_t tsqlParser::Order_by_expressionContext::getRuleIndex() const {
  return tsqlParser::RuleOrder_by_expression;
}


std::any tsqlParser::Order_by_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitOrder_by_expression(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Order_by_expressionContext* tsqlParser::order_by_expression() {
  Order_by_expressionContext *_localctx = _tracker.createInstance<Order_by_expressionContext>(_ctx, getState());
  enterRule(_localctx, 254, tsqlParser::RuleOrder_by_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2511);
    expression(0);
    setState(2513);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 365, _ctx)) {
    case 1: {
      setState(2512);
      antlrcpp::downCast<Order_by_expressionContext *>(_localctx)->direction = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::ASC

      || _la == tsqlParser::DESC)) {
        antlrcpp::downCast<Order_by_expressionContext *>(_localctx)->direction = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Group_by_itemContext ------------------------------------------------------------------

tsqlParser::Group_by_itemContext::Group_by_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::ExpressionContext* tsqlParser::Group_by_itemContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}


size_t tsqlParser::Group_by_itemContext::getRuleIndex() const {
  return tsqlParser::RuleGroup_by_item;
}


std::any tsqlParser::Group_by_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitGroup_by_item(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Group_by_itemContext* tsqlParser::group_by_item() {
  Group_by_itemContext *_localctx = _tracker.createInstance<Group_by_itemContext>(_ctx, getState());
  enterRule(_localctx, 256, tsqlParser::RuleGroup_by_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2515);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Option_clauseContext ------------------------------------------------------------------

tsqlParser::Option_clauseContext::Option_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Option_clauseContext::OPTION() {
  return getToken(tsqlParser::OPTION, 0);
}

tree::TerminalNode* tsqlParser::Option_clauseContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

std::vector<tsqlParser::OptionContext *> tsqlParser::Option_clauseContext::option() {
  return getRuleContexts<tsqlParser::OptionContext>();
}

tsqlParser::OptionContext* tsqlParser::Option_clauseContext::option(size_t i) {
  return getRuleContext<tsqlParser::OptionContext>(i);
}

tree::TerminalNode* tsqlParser::Option_clauseContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Option_clauseContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Option_clauseContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::Option_clauseContext::getRuleIndex() const {
  return tsqlParser::RuleOption_clause;
}


std::any tsqlParser::Option_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitOption_clause(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Option_clauseContext* tsqlParser::option_clause() {
  Option_clauseContext *_localctx = _tracker.createInstance<Option_clauseContext>(_ctx, getState());
  enterRule(_localctx, 258, tsqlParser::RuleOption_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2517);
    match(tsqlParser::OPTION);
    setState(2518);
    match(tsqlParser::LR_BRACKET);
    setState(2519);
    option();
    setState(2524);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == tsqlParser::COMMA) {
      setState(2520);
      match(tsqlParser::COMMA);
      setState(2521);
      option();
      setState(2526);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2527);
    match(tsqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptionContext ------------------------------------------------------------------

tsqlParser::OptionContext::OptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::OptionContext::FAST() {
  return getToken(tsqlParser::FAST, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::DECIMAL() {
  return getToken(tsqlParser::DECIMAL, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::GROUP() {
  return getToken(tsqlParser::GROUP, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::HASH() {
  return getToken(tsqlParser::HASH, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::ORDER() {
  return getToken(tsqlParser::ORDER, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::UNION() {
  return getToken(tsqlParser::UNION, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::MERGE() {
  return getToken(tsqlParser::MERGE, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::CONCAT() {
  return getToken(tsqlParser::CONCAT, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::JOIN() {
  return getToken(tsqlParser::JOIN, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::LOOP() {
  return getToken(tsqlParser::LOOP, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::EXPAND() {
  return getToken(tsqlParser::EXPAND, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::VIEWS() {
  return getToken(tsqlParser::VIEWS, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::FORCE() {
  return getToken(tsqlParser::FORCE, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() {
  return getToken(tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::KEEP() {
  return getToken(tsqlParser::KEEP, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::PLAN() {
  return getToken(tsqlParser::PLAN, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::KEEPFIXED() {
  return getToken(tsqlParser::KEEPFIXED, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::MAXDOP() {
  return getToken(tsqlParser::MAXDOP, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::MAXRECURSION() {
  return getToken(tsqlParser::MAXRECURSION, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::OPTIMIZE() {
  return getToken(tsqlParser::OPTIMIZE, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::FOR() {
  return getToken(tsqlParser::FOR, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

std::vector<tsqlParser::Optimize_for_argContext *> tsqlParser::OptionContext::optimize_for_arg() {
  return getRuleContexts<tsqlParser::Optimize_for_argContext>();
}

tsqlParser::Optimize_for_argContext* tsqlParser::OptionContext::optimize_for_arg(size_t i) {
  return getRuleContext<tsqlParser::Optimize_for_argContext>(i);
}

tree::TerminalNode* tsqlParser::OptionContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::OptionContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::OptionContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}

tree::TerminalNode* tsqlParser::OptionContext::UNKNOWN() {
  return getToken(tsqlParser::UNKNOWN, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::PARAMETERIZATION() {
  return getToken(tsqlParser::PARAMETERIZATION, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::SIMPLE() {
  return getToken(tsqlParser::SIMPLE, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::FORCED() {
  return getToken(tsqlParser::FORCED, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::RECOMPILE() {
  return getToken(tsqlParser::RECOMPILE, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::ROBUST() {
  return getToken(tsqlParser::ROBUST, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::USE() {
  return getToken(tsqlParser::USE, 0);
}

tree::TerminalNode* tsqlParser::OptionContext::STRING() {
  return getToken(tsqlParser::STRING, 0);
}


size_t tsqlParser::OptionContext::getRuleIndex() const {
  return tsqlParser::RuleOption;
}


std::any tsqlParser::OptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitOption(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::OptionContext* tsqlParser::option() {
  OptionContext *_localctx = _tracker.createInstance<OptionContext>(_ctx, getState());
  enterRule(_localctx, 260, tsqlParser::RuleOption);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2574);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 368, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2529);
      match(tsqlParser::FAST);
      setState(2530);
      antlrcpp::downCast<OptionContext *>(_localctx)->number_rows = match(tsqlParser::DECIMAL);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2531);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::ORDER || _la == tsqlParser::HASH)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2532);
      match(tsqlParser::GROUP);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2533);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::MERGE || _la == tsqlParser::CONCAT

      || _la == tsqlParser::HASH)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2534);
      match(tsqlParser::UNION);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2535);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::MERGE || _la == tsqlParser::HASH

      || _la == tsqlParser::LOOP)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2536);
      match(tsqlParser::JOIN);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2537);
      match(tsqlParser::EXPAND);
      setState(2538);
      match(tsqlParser::VIEWS);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2539);
      match(tsqlParser::FORCE);
      setState(2540);
      match(tsqlParser::ORDER);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2541);
      match(tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2542);
      match(tsqlParser::KEEP);
      setState(2543);
      match(tsqlParser::PLAN);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2544);
      match(tsqlParser::KEEPFIXED);
      setState(2545);
      match(tsqlParser::PLAN);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2546);
      match(tsqlParser::MAXDOP);
      setState(2547);
      antlrcpp::downCast<OptionContext *>(_localctx)->number_of_processors = match(tsqlParser::DECIMAL);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(2548);
      match(tsqlParser::MAXRECURSION);
      setState(2549);
      antlrcpp::downCast<OptionContext *>(_localctx)->number_recursion = match(tsqlParser::DECIMAL);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(2550);
      match(tsqlParser::OPTIMIZE);
      setState(2551);
      match(tsqlParser::FOR);
      setState(2552);
      match(tsqlParser::LR_BRACKET);
      setState(2553);
      optimize_for_arg();
      setState(2558);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == tsqlParser::COMMA) {
        setState(2554);
        match(tsqlParser::COMMA);
        setState(2555);
        optimize_for_arg();
        setState(2560);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2561);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(2563);
      match(tsqlParser::OPTIMIZE);
      setState(2564);
      match(tsqlParser::FOR);
      setState(2565);
      match(tsqlParser::UNKNOWN);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(2566);
      match(tsqlParser::PARAMETERIZATION);
      setState(2567);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::FORCED || _la == tsqlParser::SIMPLE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(2568);
      match(tsqlParser::RECOMPILE);
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(2569);
      match(tsqlParser::ROBUST);
      setState(2570);
      match(tsqlParser::PLAN);
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(2571);
      match(tsqlParser::USE);
      setState(2572);
      match(tsqlParser::PLAN);
      setState(2573);
      match(tsqlParser::STRING);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Optimize_for_argContext ------------------------------------------------------------------

tsqlParser::Optimize_for_argContext::Optimize_for_argContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Optimize_for_argContext::LOCAL_ID() {
  return getToken(tsqlParser::LOCAL_ID, 0);
}

tree::TerminalNode* tsqlParser::Optimize_for_argContext::UNKNOWN() {
  return getToken(tsqlParser::UNKNOWN, 0);
}

tree::TerminalNode* tsqlParser::Optimize_for_argContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

tsqlParser::ConstantContext* tsqlParser::Optimize_for_argContext::constant() {
  return getRuleContext<tsqlParser::ConstantContext>(0);
}


size_t tsqlParser::Optimize_for_argContext::getRuleIndex() const {
  return tsqlParser::RuleOptimize_for_arg;
}


std::any tsqlParser::Optimize_for_argContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitOptimize_for_arg(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Optimize_for_argContext* tsqlParser::optimize_for_arg() {
  Optimize_for_argContext *_localctx = _tracker.createInstance<Optimize_for_argContext>(_ctx, getState());
  enterRule(_localctx, 262, tsqlParser::RuleOptimize_for_arg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2576);
    match(tsqlParser::LOCAL_ID);
    setState(2580);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::UNKNOWN: {
        setState(2577);
        match(tsqlParser::UNKNOWN);
        break;
      }

      case tsqlParser::EQUAL: {
        setState(2578);
        match(tsqlParser::EQUAL);
        setState(2579);
        constant();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_listContext ------------------------------------------------------------------

tsqlParser::Select_listContext::Select_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tsqlParser::Select_list_elemContext *> tsqlParser::Select_listContext::select_list_elem() {
  return getRuleContexts<tsqlParser::Select_list_elemContext>();
}

tsqlParser::Select_list_elemContext* tsqlParser::Select_listContext::select_list_elem(size_t i) {
  return getRuleContext<tsqlParser::Select_list_elemContext>(i);
}

std::vector<tree::TerminalNode *> tsqlParser::Select_listContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Select_listContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::Select_listContext::getRuleIndex() const {
  return tsqlParser::RuleSelect_list;
}


std::any tsqlParser::Select_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitSelect_list(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Select_listContext* tsqlParser::select_list() {
  Select_listContext *_localctx = _tracker.createInstance<Select_listContext>(_ctx, getState());
  enterRule(_localctx, 264, tsqlParser::RuleSelect_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2582);
    select_list_elem();
    setState(2587);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 370, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2583);
        match(tsqlParser::COMMA);
        setState(2584);
        select_list_elem(); 
      }
      setState(2589);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 370, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_list_elemContext ------------------------------------------------------------------

tsqlParser::Select_list_elemContext::Select_list_elemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::A_starContext* tsqlParser::Select_list_elemContext::a_star() {
  return getRuleContext<tsqlParser::A_starContext>(0);
}

tree::TerminalNode* tsqlParser::Select_list_elemContext::DOLLAR() {
  return getToken(tsqlParser::DOLLAR, 0);
}

tsqlParser::Full_table_nameContext* tsqlParser::Select_list_elemContext::full_table_name() {
  return getRuleContext<tsqlParser::Full_table_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Select_list_elemContext::DOT() {
  return getToken(tsqlParser::DOT, 0);
}

tree::TerminalNode* tsqlParser::Select_list_elemContext::IDENTITY() {
  return getToken(tsqlParser::IDENTITY, 0);
}

tree::TerminalNode* tsqlParser::Select_list_elemContext::ROWGUID() {
  return getToken(tsqlParser::ROWGUID, 0);
}

tree::TerminalNode* tsqlParser::Select_list_elemContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

tsqlParser::ExpressionContext* tsqlParser::Select_list_elemContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

tsqlParser::Column_aliasContext* tsqlParser::Select_list_elemContext::column_alias() {
  return getRuleContext<tsqlParser::Column_aliasContext>(0);
}

tree::TerminalNode* tsqlParser::Select_list_elemContext::AS() {
  return getToken(tsqlParser::AS, 0);
}


size_t tsqlParser::Select_list_elemContext::getRuleIndex() const {
  return tsqlParser::RuleSelect_list_elem;
}


std::any tsqlParser::Select_list_elemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitSelect_list_elem(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Select_list_elemContext* tsqlParser::select_list_elem() {
  Select_list_elemContext *_localctx = _tracker.createInstance<Select_list_elemContext>(_ctx, getState());
  enterRule(_localctx, 266, tsqlParser::RuleSelect_list_elem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2611);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 375, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2593);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la - 71) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 71)) & 17729624997893) != 0 || (((_la - 196) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 196)) & 9969332866253825) != 0 || (((_la - 261) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 261)) & -148821964101331) != 0 || (((_la - 328) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 328)) & -47521180986790319) != 0 || (((_la - 393) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 393)) & 171699173404606099) != 0) {
        setState(2590);
        full_table_name();
        setState(2591);
        match(tsqlParser::DOT);
      }
      setState(2598);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case tsqlParser::STAR: {
          setState(2595);
          a_star();
          break;
        }

        case tsqlParser::DOLLAR: {
          setState(2596);
          match(tsqlParser::DOLLAR);
          setState(2597);
          _la = _input->LA(1);
          if (!(_la == tsqlParser::IDENTITY || _la == tsqlParser::ROWGUID)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2600);
      antlrcpp::downCast<Select_list_elemContext *>(_localctx)->alias = column_alias();
      setState(2601);
      match(tsqlParser::EQUAL);
      setState(2602);
      expression(0);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2604);
      expression(0);
      setState(2609);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 374, _ctx)) {
      case 1: {
        setState(2606);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == tsqlParser::AS) {
          setState(2605);
          match(tsqlParser::AS);
        }
        setState(2608);
        antlrcpp::downCast<Select_list_elemContext *>(_localctx)->alias = column_alias();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_sourcesContext ------------------------------------------------------------------

tsqlParser::Table_sourcesContext::Table_sourcesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tsqlParser::Table_sourceContext *> tsqlParser::Table_sourcesContext::table_source() {
  return getRuleContexts<tsqlParser::Table_sourceContext>();
}

tsqlParser::Table_sourceContext* tsqlParser::Table_sourcesContext::table_source(size_t i) {
  return getRuleContext<tsqlParser::Table_sourceContext>(i);
}

std::vector<tree::TerminalNode *> tsqlParser::Table_sourcesContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Table_sourcesContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::Table_sourcesContext::getRuleIndex() const {
  return tsqlParser::RuleTable_sources;
}


std::any tsqlParser::Table_sourcesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitTable_sources(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Table_sourcesContext* tsqlParser::table_sources() {
  Table_sourcesContext *_localctx = _tracker.createInstance<Table_sourcesContext>(_ctx, getState());
  enterRule(_localctx, 268, tsqlParser::RuleTable_sources);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2613);
    table_source(0);
    setState(2618);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 376, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2614);
        match(tsqlParser::COMMA);
        setState(2615);
        table_source(0); 
      }
      setState(2620);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 376, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_sourceContext ------------------------------------------------------------------

tsqlParser::Table_sourceContext::Table_sourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t tsqlParser::Table_sourceContext::getRuleIndex() const {
  return tsqlParser::RuleTable_source;
}

void tsqlParser::Table_sourceContext::copyFrom(Table_sourceContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Cross_joinContext ------------------------------------------------------------------

tree::TerminalNode* tsqlParser::Cross_joinContext::JOIN() {
  return getToken(tsqlParser::JOIN, 0);
}

std::vector<tsqlParser::Table_sourceContext *> tsqlParser::Cross_joinContext::table_source() {
  return getRuleContexts<tsqlParser::Table_sourceContext>();
}

tsqlParser::Table_sourceContext* tsqlParser::Cross_joinContext::table_source(size_t i) {
  return getRuleContext<tsqlParser::Table_sourceContext>(i);
}

tree::TerminalNode* tsqlParser::Cross_joinContext::CROSS() {
  return getToken(tsqlParser::CROSS, 0);
}

tsqlParser::Cross_joinContext::Cross_joinContext(Table_sourceContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Cross_joinContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitCross_join(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Table_source_item_joinContext ------------------------------------------------------------------

tsqlParser::Table_source_itemContext* tsqlParser::Table_source_item_joinContext::table_source_item() {
  return getRuleContext<tsqlParser::Table_source_itemContext>(0);
}

tsqlParser::Table_source_item_joinContext::Table_source_item_joinContext(Table_sourceContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Table_source_item_joinContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitTable_source_item_join(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Standard_joinContext ------------------------------------------------------------------

tsqlParser::Join_typeContext* tsqlParser::Standard_joinContext::join_type() {
  return getRuleContext<tsqlParser::Join_typeContext>(0);
}

tree::TerminalNode* tsqlParser::Standard_joinContext::JOIN() {
  return getToken(tsqlParser::JOIN, 0);
}

tree::TerminalNode* tsqlParser::Standard_joinContext::ON() {
  return getToken(tsqlParser::ON, 0);
}

tsqlParser::Search_conditionContext* tsqlParser::Standard_joinContext::search_condition() {
  return getRuleContext<tsqlParser::Search_conditionContext>(0);
}

std::vector<tsqlParser::Table_sourceContext *> tsqlParser::Standard_joinContext::table_source() {
  return getRuleContexts<tsqlParser::Table_sourceContext>();
}

tsqlParser::Table_sourceContext* tsqlParser::Standard_joinContext::table_source(size_t i) {
  return getRuleContext<tsqlParser::Table_sourceContext>(i);
}

tsqlParser::Standard_joinContext::Standard_joinContext(Table_sourceContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Standard_joinContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitStandard_join(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Apply_joinContext ------------------------------------------------------------------

tree::TerminalNode* tsqlParser::Apply_joinContext::APPLY() {
  return getToken(tsqlParser::APPLY, 0);
}

std::vector<tsqlParser::Table_sourceContext *> tsqlParser::Apply_joinContext::table_source() {
  return getRuleContexts<tsqlParser::Table_sourceContext>();
}

tsqlParser::Table_sourceContext* tsqlParser::Apply_joinContext::table_source(size_t i) {
  return getRuleContext<tsqlParser::Table_sourceContext>(i);
}

tree::TerminalNode* tsqlParser::Apply_joinContext::CROSS() {
  return getToken(tsqlParser::CROSS, 0);
}

tree::TerminalNode* tsqlParser::Apply_joinContext::OUTER() {
  return getToken(tsqlParser::OUTER, 0);
}

tsqlParser::Apply_joinContext::Apply_joinContext(Table_sourceContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Apply_joinContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitApply_join(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Bracket_table_sourceContext ------------------------------------------------------------------

tree::TerminalNode* tsqlParser::Bracket_table_sourceContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tsqlParser::Table_sourceContext* tsqlParser::Bracket_table_sourceContext::table_source() {
  return getRuleContext<tsqlParser::Table_sourceContext>(0);
}

tree::TerminalNode* tsqlParser::Bracket_table_sourceContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tsqlParser::Bracket_table_sourceContext::Bracket_table_sourceContext(Table_sourceContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Bracket_table_sourceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitBracket_table_source(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Table_sourceContext* tsqlParser::table_source() {
   return table_source(0);
}

tsqlParser::Table_sourceContext* tsqlParser::table_source(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  tsqlParser::Table_sourceContext *_localctx = _tracker.createInstance<Table_sourceContext>(_ctx, parentState);
  tsqlParser::Table_sourceContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 270;
  enterRecursionRule(_localctx, 270, tsqlParser::RuleTable_source, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2627);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 377, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<Bracket_table_sourceContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(2622);
      match(tsqlParser::LR_BRACKET);
      setState(2623);
      table_source(0);
      setState(2624);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<Table_source_item_joinContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2626);
      table_source_item();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(2646);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 379, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2644);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 378, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<Cross_joinContext>(_tracker.createInstance<Table_sourceContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleTable_source);
          setState(2629);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2630);
          antlrcpp::downCast<Cross_joinContext *>(_localctx)->op = match(tsqlParser::CROSS);
          setState(2631);
          match(tsqlParser::JOIN);
          setState(2632);
          antlrcpp::downCast<Cross_joinContext *>(_localctx)->right = table_source(4);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<Apply_joinContext>(_tracker.createInstance<Table_sourceContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleTable_source);
          setState(2633);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2634);
          antlrcpp::downCast<Apply_joinContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == tsqlParser::CROSS || _la == tsqlParser::OUTER)) {
            antlrcpp::downCast<Apply_joinContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(2635);
          match(tsqlParser::APPLY);
          setState(2636);
          antlrcpp::downCast<Apply_joinContext *>(_localctx)->right = table_source(3);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<Standard_joinContext>(_tracker.createInstance<Table_sourceContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleTable_source);
          setState(2637);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(2638);
          join_type();
          setState(2639);
          match(tsqlParser::JOIN);
          setState(2640);
          antlrcpp::downCast<Standard_joinContext *>(_localctx)->right = table_source(0);
          setState(2641);
          match(tsqlParser::ON);
          setState(2642);
          search_condition(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(2648);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 379, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Table_source_itemContext ------------------------------------------------------------------

tsqlParser::Table_source_itemContext::Table_source_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t tsqlParser::Table_source_itemContext::getRuleIndex() const {
  return tsqlParser::RuleTable_source_item;
}

void tsqlParser::Table_source_itemContext::copyFrom(Table_source_itemContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Table_source_item_simpleContext ------------------------------------------------------------------

tsqlParser::Rowset_functionContext* tsqlParser::Table_source_item_simpleContext::rowset_function() {
  return getRuleContext<tsqlParser::Rowset_functionContext>(0);
}

tsqlParser::Table_aliasContext* tsqlParser::Table_source_item_simpleContext::table_alias() {
  return getRuleContext<tsqlParser::Table_aliasContext>(0);
}

tsqlParser::Change_tableContext* tsqlParser::Table_source_item_simpleContext::change_table() {
  return getRuleContext<tsqlParser::Change_tableContext>(0);
}

tsqlParser::Function_callContext* tsqlParser::Table_source_item_simpleContext::function_call() {
  return getRuleContext<tsqlParser::Function_callContext>(0);
}

tree::TerminalNode* tsqlParser::Table_source_item_simpleContext::LOCAL_ID() {
  return getToken(tsqlParser::LOCAL_ID, 0);
}

tsqlParser::Table_source_item_simpleContext::Table_source_item_simpleContext(Table_source_itemContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Table_source_item_simpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitTable_source_item_simple(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Table_source_item_complexContext ------------------------------------------------------------------

tsqlParser::Derived_tableContext* tsqlParser::Table_source_item_complexContext::derived_table() {
  return getRuleContext<tsqlParser::Derived_tableContext>(0);
}

tsqlParser::Table_aliasContext* tsqlParser::Table_source_item_complexContext::table_alias() {
  return getRuleContext<tsqlParser::Table_aliasContext>(0);
}

tsqlParser::Column_alias_listContext* tsqlParser::Table_source_item_complexContext::column_alias_list() {
  return getRuleContext<tsqlParser::Column_alias_listContext>(0);
}

tree::TerminalNode* tsqlParser::Table_source_item_complexContext::LOCAL_ID() {
  return getToken(tsqlParser::LOCAL_ID, 0);
}

tree::TerminalNode* tsqlParser::Table_source_item_complexContext::DOT() {
  return getToken(tsqlParser::DOT, 0);
}

tsqlParser::Function_callContext* tsqlParser::Table_source_item_complexContext::function_call() {
  return getRuleContext<tsqlParser::Function_callContext>(0);
}

tsqlParser::Table_source_item_complexContext::Table_source_item_complexContext(Table_source_itemContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Table_source_item_complexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitTable_source_item_complex(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Table_source_item_nameContext ------------------------------------------------------------------

tsqlParser::Full_table_nameContext* tsqlParser::Table_source_item_nameContext::full_table_name() {
  return getRuleContext<tsqlParser::Full_table_nameContext>(0);
}

tsqlParser::Tablesample_clauseContext* tsqlParser::Table_source_item_nameContext::tablesample_clause() {
  return getRuleContext<tsqlParser::Tablesample_clauseContext>(0);
}

tsqlParser::Table_aliasContext* tsqlParser::Table_source_item_nameContext::table_alias() {
  return getRuleContext<tsqlParser::Table_aliasContext>(0);
}

tsqlParser::With_table_hintsContext* tsqlParser::Table_source_item_nameContext::with_table_hints() {
  return getRuleContext<tsqlParser::With_table_hintsContext>(0);
}

tsqlParser::Table_source_item_nameContext::Table_source_item_nameContext(Table_source_itemContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Table_source_item_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitTable_source_item_name(this);
  else
    return visitor->visitChildren(this);
}
tsqlParser::Table_source_itemContext* tsqlParser::table_source_item() {
  Table_source_itemContext *_localctx = _tracker.createInstance<Table_source_itemContext>(_ctx, getState());
  enterRule(_localctx, 272, tsqlParser::RuleTable_source_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2691);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 391, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<tsqlParser::Table_source_item_nameContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(2649);
      full_table_name();
      setState(2651);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 380, _ctx)) {
      case 1: {
        setState(2650);
        tablesample_clause();
        break;
      }

      default:
        break;
      }
      setState(2654);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 381, _ctx)) {
      case 1: {
        setState(2653);
        table_alias();
        break;
      }

      default:
        break;
      }
      setState(2657);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 382, _ctx)) {
      case 1: {
        setState(2656);
        with_table_hints();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<tsqlParser::Table_source_item_simpleContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(2659);
      rowset_function();
      setState(2661);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 383, _ctx)) {
      case 1: {
        setState(2660);
        table_alias();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<tsqlParser::Table_source_item_complexContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(2663);
      derived_table();
      setState(2668);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 385, _ctx)) {
      case 1: {
        setState(2664);
        table_alias();
        setState(2666);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 384, _ctx)) {
        case 1: {
          setState(2665);
          column_alias_list();
          break;
        }

        default:
          break;
        }
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<tsqlParser::Table_source_item_simpleContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(2670);
      change_table();
      setState(2672);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 386, _ctx)) {
      case 1: {
        setState(2671);
        table_alias();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<tsqlParser::Table_source_item_simpleContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(2674);
      function_call();
      setState(2676);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 387, _ctx)) {
      case 1: {
        setState(2675);
        table_alias();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<tsqlParser::Table_source_item_simpleContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(2678);
      match(tsqlParser::LOCAL_ID);
      setState(2680);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 388, _ctx)) {
      case 1: {
        setState(2679);
        table_alias();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<tsqlParser::Table_source_item_complexContext>(_localctx);
      enterOuterAlt(_localctx, 7);
      setState(2682);
      match(tsqlParser::LOCAL_ID);
      setState(2683);
      match(tsqlParser::DOT);
      setState(2684);
      function_call();
      setState(2689);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 390, _ctx)) {
      case 1: {
        setState(2685);
        table_alias();
        setState(2687);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 389, _ctx)) {
        case 1: {
          setState(2686);
          column_alias_list();
          break;
        }

        default:
          break;
        }
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Tablesample_clauseContext ------------------------------------------------------------------

tsqlParser::Tablesample_clauseContext::Tablesample_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Tablesample_clauseContext::TABLESAMPLE() {
  return getToken(tsqlParser::TABLESAMPLE, 0);
}

tree::TerminalNode* tsqlParser::Tablesample_clauseContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tsqlParser::Sample_numberContext* tsqlParser::Tablesample_clauseContext::sample_number() {
  return getRuleContext<tsqlParser::Sample_numberContext>(0);
}

tree::TerminalNode* tsqlParser::Tablesample_clauseContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Tablesample_clauseContext::SYSTEM() {
  return getToken(tsqlParser::SYSTEM, 0);
}

tree::TerminalNode* tsqlParser::Tablesample_clauseContext::REPEATABLE() {
  return getToken(tsqlParser::REPEATABLE, 0);
}

tree::TerminalNode* tsqlParser::Tablesample_clauseContext::PERCENT() {
  return getToken(tsqlParser::PERCENT, 0);
}

tree::TerminalNode* tsqlParser::Tablesample_clauseContext::ROWS() {
  return getToken(tsqlParser::ROWS, 0);
}

tsqlParser::Repeat_seedContext* tsqlParser::Tablesample_clauseContext::repeat_seed() {
  return getRuleContext<tsqlParser::Repeat_seedContext>(0);
}


size_t tsqlParser::Tablesample_clauseContext::getRuleIndex() const {
  return tsqlParser::RuleTablesample_clause;
}


std::any tsqlParser::Tablesample_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitTablesample_clause(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Tablesample_clauseContext* tsqlParser::tablesample_clause() {
  Tablesample_clauseContext *_localctx = _tracker.createInstance<Tablesample_clauseContext>(_ctx, getState());
  enterRule(_localctx, 274, tsqlParser::RuleTablesample_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2693);
    match(tsqlParser::TABLESAMPLE);
    setState(2695);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::SYSTEM) {
      setState(2694);
      match(tsqlParser::SYSTEM);
    }
    setState(2697);
    match(tsqlParser::LR_BRACKET);
    setState(2698);
    sample_number();
    setState(2700);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::PERCENT || _la == tsqlParser::ROWS) {
      setState(2699);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::PERCENT || _la == tsqlParser::ROWS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2702);
    match(tsqlParser::RR_BRACKET);
    setState(2705);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 394, _ctx)) {
    case 1: {
      setState(2703);
      match(tsqlParser::REPEATABLE);

      setState(2704);
      repeat_seed();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sample_numberContext ------------------------------------------------------------------

tsqlParser::Sample_numberContext::Sample_numberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Sample_numberContext::DECIMAL() {
  return getToken(tsqlParser::DECIMAL, 0);
}


size_t tsqlParser::Sample_numberContext::getRuleIndex() const {
  return tsqlParser::RuleSample_number;
}


std::any tsqlParser::Sample_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitSample_number(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Sample_numberContext* tsqlParser::sample_number() {
  Sample_numberContext *_localctx = _tracker.createInstance<Sample_numberContext>(_ctx, getState());
  enterRule(_localctx, 276, tsqlParser::RuleSample_number);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2707);
    match(tsqlParser::DECIMAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Repeat_seedContext ------------------------------------------------------------------

tsqlParser::Repeat_seedContext::Repeat_seedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Repeat_seedContext::DECIMAL() {
  return getToken(tsqlParser::DECIMAL, 0);
}


size_t tsqlParser::Repeat_seedContext::getRuleIndex() const {
  return tsqlParser::RuleRepeat_seed;
}


std::any tsqlParser::Repeat_seedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitRepeat_seed(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Repeat_seedContext* tsqlParser::repeat_seed() {
  Repeat_seedContext *_localctx = _tracker.createInstance<Repeat_seedContext>(_ctx, getState());
  enterRule(_localctx, 278, tsqlParser::RuleRepeat_seed);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2709);
    match(tsqlParser::DECIMAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_aliasContext ------------------------------------------------------------------

tsqlParser::Table_aliasContext::Table_aliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::R_idContext* tsqlParser::Table_aliasContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tree::TerminalNode* tsqlParser::Table_aliasContext::AS() {
  return getToken(tsqlParser::AS, 0);
}


size_t tsqlParser::Table_aliasContext::getRuleIndex() const {
  return tsqlParser::RuleTable_alias;
}


std::any tsqlParser::Table_aliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitTable_alias(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Table_aliasContext* tsqlParser::table_alias() {
  Table_aliasContext *_localctx = _tracker.createInstance<Table_aliasContext>(_ctx, getState());
  enterRule(_localctx, 280, tsqlParser::RuleTable_alias);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2712);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::AS) {
      setState(2711);
      match(tsqlParser::AS);
    }
    setState(2714);
    r_id();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Change_tableContext ------------------------------------------------------------------

tsqlParser::Change_tableContext::Change_tableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Change_tableContext::CHANGETABLE() {
  return getToken(tsqlParser::CHANGETABLE, 0);
}

tree::TerminalNode* tsqlParser::Change_tableContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Change_tableContext::CHANGES() {
  return getToken(tsqlParser::CHANGES, 0);
}

tsqlParser::Full_table_nameContext* tsqlParser::Change_tableContext::full_table_name() {
  return getRuleContext<tsqlParser::Full_table_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Change_tableContext::COMMA() {
  return getToken(tsqlParser::COMMA, 0);
}

tree::TerminalNode* tsqlParser::Change_tableContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Change_tableContext::NULL_() {
  return getToken(tsqlParser::NULL_, 0);
}

tree::TerminalNode* tsqlParser::Change_tableContext::DECIMAL() {
  return getToken(tsqlParser::DECIMAL, 0);
}

tree::TerminalNode* tsqlParser::Change_tableContext::LOCAL_ID() {
  return getToken(tsqlParser::LOCAL_ID, 0);
}


size_t tsqlParser::Change_tableContext::getRuleIndex() const {
  return tsqlParser::RuleChange_table;
}


std::any tsqlParser::Change_tableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitChange_table(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Change_tableContext* tsqlParser::change_table() {
  Change_tableContext *_localctx = _tracker.createInstance<Change_tableContext>(_ctx, getState());
  enterRule(_localctx, 282, tsqlParser::RuleChange_table);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2716);
    match(tsqlParser::CHANGETABLE);
    setState(2717);
    match(tsqlParser::LR_BRACKET);
    setState(2718);
    match(tsqlParser::CHANGES);
    setState(2719);
    full_table_name();
    setState(2720);
    match(tsqlParser::COMMA);
    setState(2721);
    _la = _input->LA(1);
    if (!(_la == tsqlParser::NULL_ || _la == tsqlParser::LOCAL_ID

    || _la == tsqlParser::DECIMAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2722);
    match(tsqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Join_typeContext ------------------------------------------------------------------

tsqlParser::Join_typeContext::Join_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Join_typeContext::LEFT() {
  return getToken(tsqlParser::LEFT, 0);
}

tree::TerminalNode* tsqlParser::Join_typeContext::RIGHT() {
  return getToken(tsqlParser::RIGHT, 0);
}

tree::TerminalNode* tsqlParser::Join_typeContext::FULL() {
  return getToken(tsqlParser::FULL, 0);
}

tree::TerminalNode* tsqlParser::Join_typeContext::INNER() {
  return getToken(tsqlParser::INNER, 0);
}

tree::TerminalNode* tsqlParser::Join_typeContext::OUTER() {
  return getToken(tsqlParser::OUTER, 0);
}

tree::TerminalNode* tsqlParser::Join_typeContext::LOOP() {
  return getToken(tsqlParser::LOOP, 0);
}

tree::TerminalNode* tsqlParser::Join_typeContext::HASH() {
  return getToken(tsqlParser::HASH, 0);
}

tree::TerminalNode* tsqlParser::Join_typeContext::MERGE() {
  return getToken(tsqlParser::MERGE, 0);
}

tree::TerminalNode* tsqlParser::Join_typeContext::REMOTE() {
  return getToken(tsqlParser::REMOTE, 0);
}


size_t tsqlParser::Join_typeContext::getRuleIndex() const {
  return tsqlParser::RuleJoin_type;
}


std::any tsqlParser::Join_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitJoin_type(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Join_typeContext* tsqlParser::join_type() {
  Join_typeContext *_localctx = _tracker.createInstance<Join_typeContext>(_ctx, getState());
  enterRule(_localctx, 284, tsqlParser::RuleJoin_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2731);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::INNER:
      case tsqlParser::JOIN:
      case tsqlParser::MERGE:
      case tsqlParser::HASH:
      case tsqlParser::LOOP:
      case tsqlParser::REMOTE: {
        setState(2725);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == tsqlParser::INNER) {
          setState(2724);
          match(tsqlParser::INNER);
        }
        break;
      }

      case tsqlParser::FULL:
      case tsqlParser::LEFT:
      case tsqlParser::RIGHT: {
        setState(2727);
        _la = _input->LA(1);
        if (!(_la == tsqlParser::FULL

        || _la == tsqlParser::LEFT || _la == tsqlParser::RIGHT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(2729);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == tsqlParser::OUTER) {
          setState(2728);
          match(tsqlParser::OUTER);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2734);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::MERGE || _la == tsqlParser::HASH

    || _la == tsqlParser::LOOP || _la == tsqlParser::REMOTE) {
      setState(2733);
      antlrcpp::downCast<Join_typeContext *>(_localctx)->join_hint = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::MERGE || _la == tsqlParser::HASH

      || _la == tsqlParser::LOOP || _la == tsqlParser::REMOTE)) {
        antlrcpp::downCast<Join_typeContext *>(_localctx)->join_hint = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_name_with_hintContext ------------------------------------------------------------------

tsqlParser::Table_name_with_hintContext::Table_name_with_hintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::Full_table_nameContext* tsqlParser::Table_name_with_hintContext::full_table_name() {
  return getRuleContext<tsqlParser::Full_table_nameContext>(0);
}

tsqlParser::With_table_hintsContext* tsqlParser::Table_name_with_hintContext::with_table_hints() {
  return getRuleContext<tsqlParser::With_table_hintsContext>(0);
}


size_t tsqlParser::Table_name_with_hintContext::getRuleIndex() const {
  return tsqlParser::RuleTable_name_with_hint;
}


std::any tsqlParser::Table_name_with_hintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitTable_name_with_hint(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Table_name_with_hintContext* tsqlParser::table_name_with_hint() {
  Table_name_with_hintContext *_localctx = _tracker.createInstance<Table_name_with_hintContext>(_ctx, getState());
  enterRule(_localctx, 286, tsqlParser::RuleTable_name_with_hint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2736);
    full_table_name();
    setState(2738);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 400, _ctx)) {
    case 1: {
      setState(2737);
      with_table_hints();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rowset_functionContext ------------------------------------------------------------------

tsqlParser::Rowset_functionContext::Rowset_functionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Rowset_functionContext::OPENROWSET() {
  return getToken(tsqlParser::OPENROWSET, 0);
}

tree::TerminalNode* tsqlParser::Rowset_functionContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Rowset_functionContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Rowset_functionContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}

tree::TerminalNode* tsqlParser::Rowset_functionContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Rowset_functionContext::STRING() {
  return getTokens(tsqlParser::STRING);
}

tree::TerminalNode* tsqlParser::Rowset_functionContext::STRING(size_t i) {
  return getToken(tsqlParser::STRING, i);
}

tree::TerminalNode* tsqlParser::Rowset_functionContext::BULK() {
  return getToken(tsqlParser::BULK, 0);
}

std::vector<tsqlParser::Bulk_optionContext *> tsqlParser::Rowset_functionContext::bulk_option() {
  return getRuleContexts<tsqlParser::Bulk_optionContext>();
}

tsqlParser::Bulk_optionContext* tsqlParser::Rowset_functionContext::bulk_option(size_t i) {
  return getRuleContext<tsqlParser::Bulk_optionContext>(i);
}

tsqlParser::R_idContext* tsqlParser::Rowset_functionContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}


size_t tsqlParser::Rowset_functionContext::getRuleIndex() const {
  return tsqlParser::RuleRowset_function;
}


std::any tsqlParser::Rowset_functionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitRowset_function(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Rowset_functionContext* tsqlParser::rowset_function() {
  Rowset_functionContext *_localctx = _tracker.createInstance<Rowset_functionContext>(_ctx, getState());
  enterRule(_localctx, 288, tsqlParser::RuleRowset_function);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2766);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 403, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2740);
      match(tsqlParser::OPENROWSET);
      setState(2741);
      match(tsqlParser::LR_BRACKET);
      setState(2742);
      antlrcpp::downCast<Rowset_functionContext *>(_localctx)->provider_name = match(tsqlParser::STRING);
      setState(2743);
      match(tsqlParser::COMMA);
      setState(2744);
      antlrcpp::downCast<Rowset_functionContext *>(_localctx)->connectionString = match(tsqlParser::STRING);
      setState(2745);
      match(tsqlParser::COMMA);
      setState(2746);
      antlrcpp::downCast<Rowset_functionContext *>(_localctx)->sql = match(tsqlParser::STRING);
      setState(2747);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2748);
      match(tsqlParser::OPENROWSET);
      setState(2749);
      match(tsqlParser::LR_BRACKET);
      setState(2750);
      match(tsqlParser::BULK);
      setState(2751);
      antlrcpp::downCast<Rowset_functionContext *>(_localctx)->data_file = match(tsqlParser::STRING);
      setState(2752);
      match(tsqlParser::COMMA);
      setState(2762);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 402, _ctx)) {
      case 1: {
        setState(2753);
        bulk_option();
        setState(2758);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == tsqlParser::COMMA) {
          setState(2754);
          match(tsqlParser::COMMA);
          setState(2755);
          bulk_option();
          setState(2760);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case 2: {
        setState(2761);
        r_id();
        break;
      }

      default:
        break;
      }
      setState(2764);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bulk_optionContext ------------------------------------------------------------------

tsqlParser::Bulk_optionContext::Bulk_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::R_idContext* tsqlParser::Bulk_optionContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tree::TerminalNode* tsqlParser::Bulk_optionContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

tree::TerminalNode* tsqlParser::Bulk_optionContext::DECIMAL() {
  return getToken(tsqlParser::DECIMAL, 0);
}

tree::TerminalNode* tsqlParser::Bulk_optionContext::STRING() {
  return getToken(tsqlParser::STRING, 0);
}


size_t tsqlParser::Bulk_optionContext::getRuleIndex() const {
  return tsqlParser::RuleBulk_option;
}


std::any tsqlParser::Bulk_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitBulk_option(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Bulk_optionContext* tsqlParser::bulk_option() {
  Bulk_optionContext *_localctx = _tracker.createInstance<Bulk_optionContext>(_ctx, getState());
  enterRule(_localctx, 290, tsqlParser::RuleBulk_option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2768);
    r_id();
    setState(2769);
    match(tsqlParser::EQUAL);
    setState(2770);
    antlrcpp::downCast<Bulk_optionContext *>(_localctx)->bulk_option_value = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == tsqlParser::DECIMAL

    || _la == tsqlParser::STRING)) {
      antlrcpp::downCast<Bulk_optionContext *>(_localctx)->bulk_option_value = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Derived_tableContext ------------------------------------------------------------------

tsqlParser::Derived_tableContext::Derived_tableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::SubqueryContext* tsqlParser::Derived_tableContext::subquery() {
  return getRuleContext<tsqlParser::SubqueryContext>(0);
}

tree::TerminalNode* tsqlParser::Derived_tableContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Derived_tableContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tsqlParser::Table_value_constructorContext* tsqlParser::Derived_tableContext::table_value_constructor() {
  return getRuleContext<tsqlParser::Table_value_constructorContext>(0);
}

tsqlParser::Table_aliasContext* tsqlParser::Derived_tableContext::table_alias() {
  return getRuleContext<tsqlParser::Table_aliasContext>(0);
}

tsqlParser::Column_alias_listContext* tsqlParser::Derived_tableContext::column_alias_list() {
  return getRuleContext<tsqlParser::Column_alias_listContext>(0);
}


size_t tsqlParser::Derived_tableContext::getRuleIndex() const {
  return tsqlParser::RuleDerived_table;
}


std::any tsqlParser::Derived_tableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDerived_table(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Derived_tableContext* tsqlParser::derived_table() {
  Derived_tableContext *_localctx = _tracker.createInstance<Derived_tableContext>(_ctx, getState());
  enterRule(_localctx, 292, tsqlParser::RuleDerived_table);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2783);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 404, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2772);
      subquery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2773);
      match(tsqlParser::LR_BRACKET);
      setState(2774);
      subquery();
      setState(2775);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2777);
      match(tsqlParser::LR_BRACKET);
      setState(2778);
      table_value_constructor();
      setState(2779);
      match(tsqlParser::RR_BRACKET);
      setState(2780);
      table_alias();
      setState(2781);
      column_alias_list();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_callContext ------------------------------------------------------------------

tsqlParser::Function_callContext::Function_callContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t tsqlParser::Function_callContext::getRuleIndex() const {
  return tsqlParser::RuleFunction_call;
}

void tsqlParser::Function_callContext::copyFrom(Function_callContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Standard_callContext ------------------------------------------------------------------

tsqlParser::Scalar_function_nameContext* tsqlParser::Standard_callContext::scalar_function_name() {
  return getRuleContext<tsqlParser::Scalar_function_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Standard_callContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Standard_callContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tsqlParser::Expression_listContext* tsqlParser::Standard_callContext::expression_list() {
  return getRuleContext<tsqlParser::Expression_listContext>(0);
}

tree::TerminalNode* tsqlParser::Standard_callContext::BINARY_CHECKSUM() {
  return getToken(tsqlParser::BINARY_CHECKSUM, 0);
}

tree::TerminalNode* tsqlParser::Standard_callContext::STAR() {
  return getToken(tsqlParser::STAR, 0);
}

tree::TerminalNode* tsqlParser::Standard_callContext::CONVERT() {
  return getToken(tsqlParser::CONVERT, 0);
}

tsqlParser::Data_typeContext* tsqlParser::Standard_callContext::data_type() {
  return getRuleContext<tsqlParser::Data_typeContext>(0);
}

std::vector<tree::TerminalNode *> tsqlParser::Standard_callContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Standard_callContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}

std::vector<tsqlParser::ExpressionContext *> tsqlParser::Standard_callContext::expression() {
  return getRuleContexts<tsqlParser::ExpressionContext>();
}

tsqlParser::ExpressionContext* tsqlParser::Standard_callContext::expression(size_t i) {
  return getRuleContext<tsqlParser::ExpressionContext>(i);
}

tree::TerminalNode* tsqlParser::Standard_callContext::COALESCE() {
  return getToken(tsqlParser::COALESCE, 0);
}

tree::TerminalNode* tsqlParser::Standard_callContext::DATEADD() {
  return getToken(tsqlParser::DATEADD, 0);
}

tree::TerminalNode* tsqlParser::Standard_callContext::ID() {
  return getToken(tsqlParser::ID, 0);
}

tree::TerminalNode* tsqlParser::Standard_callContext::DATEDIFF() {
  return getToken(tsqlParser::DATEDIFF, 0);
}

tree::TerminalNode* tsqlParser::Standard_callContext::DATENAME() {
  return getToken(tsqlParser::DATENAME, 0);
}

tree::TerminalNode* tsqlParser::Standard_callContext::DATEPART() {
  return getToken(tsqlParser::DATEPART, 0);
}

tree::TerminalNode* tsqlParser::Standard_callContext::DATETIMEOFFSETFROMPARTS() {
  return getToken(tsqlParser::DATETIMEOFFSETFROMPARTS, 0);
}

tree::TerminalNode* tsqlParser::Standard_callContext::IDENTITY() {
  return getToken(tsqlParser::IDENTITY, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Standard_callContext::DECIMAL() {
  return getTokens(tsqlParser::DECIMAL);
}

tree::TerminalNode* tsqlParser::Standard_callContext::DECIMAL(size_t i) {
  return getToken(tsqlParser::DECIMAL, i);
}

tree::TerminalNode* tsqlParser::Standard_callContext::IIF() {
  return getToken(tsqlParser::IIF, 0);
}

tsqlParser::Search_conditionContext* tsqlParser::Standard_callContext::search_condition() {
  return getRuleContext<tsqlParser::Search_conditionContext>(0);
}

tree::TerminalNode* tsqlParser::Standard_callContext::NULLIF() {
  return getToken(tsqlParser::NULLIF, 0);
}

tree::TerminalNode* tsqlParser::Standard_callContext::STRING_SPLIT() {
  return getToken(tsqlParser::STRING_SPLIT, 0);
}

tree::TerminalNode* tsqlParser::Standard_callContext::TRY_CONVERT() {
  return getToken(tsqlParser::TRY_CONVERT, 0);
}

tsqlParser::Standard_callContext::Standard_callContext(Function_callContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Standard_callContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitStandard_call(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Aggregate_callContext ------------------------------------------------------------------

tsqlParser::Aggregate_windowed_functionContext* tsqlParser::Aggregate_callContext::aggregate_windowed_function() {
  return getRuleContext<tsqlParser::Aggregate_windowed_functionContext>(0);
}

tsqlParser::Aggregate_callContext::Aggregate_callContext(Function_callContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Aggregate_callContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitAggregate_call(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Nvf_callContext ------------------------------------------------------------------

tsqlParser::Next_value_for_functionContext* tsqlParser::Nvf_callContext::next_value_for_function() {
  return getRuleContext<tsqlParser::Next_value_for_functionContext>(0);
}

tsqlParser::Nvf_callContext::Nvf_callContext(Function_callContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Nvf_callContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitNvf_call(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Rank_callContext ------------------------------------------------------------------

tsqlParser::Ranking_windowed_functionContext* tsqlParser::Rank_callContext::ranking_windowed_function() {
  return getRuleContext<tsqlParser::Ranking_windowed_functionContext>(0);
}

tsqlParser::Rank_callContext::Rank_callContext(Function_callContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Rank_callContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitRank_call(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Expression_callContext ------------------------------------------------------------------

tree::TerminalNode* tsqlParser::Expression_callContext::PARSE() {
  return getToken(tsqlParser::PARSE, 0);
}

tree::TerminalNode* tsqlParser::Expression_callContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Expression_callContext::AS() {
  return getToken(tsqlParser::AS, 0);
}

tree::TerminalNode* tsqlParser::Expression_callContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

std::vector<tsqlParser::ExpressionContext *> tsqlParser::Expression_callContext::expression() {
  return getRuleContexts<tsqlParser::ExpressionContext>();
}

tsqlParser::ExpressionContext* tsqlParser::Expression_callContext::expression(size_t i) {
  return getRuleContext<tsqlParser::ExpressionContext>(i);
}

tsqlParser::Data_typeContext* tsqlParser::Expression_callContext::data_type() {
  return getRuleContext<tsqlParser::Data_typeContext>(0);
}

tree::TerminalNode* tsqlParser::Expression_callContext::USING() {
  return getToken(tsqlParser::USING, 0);
}

tree::TerminalNode* tsqlParser::Expression_callContext::TRY_PARSE() {
  return getToken(tsqlParser::TRY_PARSE, 0);
}

tsqlParser::Expression_callContext::Expression_callContext(Function_callContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Expression_callContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitExpression_call(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Simple_callContext ------------------------------------------------------------------

tree::TerminalNode* tsqlParser::Simple_callContext::CHECKSUM() {
  return getToken(tsqlParser::CHECKSUM, 0);
}

tree::TerminalNode* tsqlParser::Simple_callContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Simple_callContext::STAR() {
  return getToken(tsqlParser::STAR, 0);
}

tree::TerminalNode* tsqlParser::Simple_callContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Simple_callContext::CURRENT_TIMESTAMP() {
  return getToken(tsqlParser::CURRENT_TIMESTAMP, 0);
}

tree::TerminalNode* tsqlParser::Simple_callContext::CURRENT_USER() {
  return getToken(tsqlParser::CURRENT_USER, 0);
}

tree::TerminalNode* tsqlParser::Simple_callContext::MIN_ACTIVE_ROWVERSION() {
  return getToken(tsqlParser::MIN_ACTIVE_ROWVERSION, 0);
}

tree::TerminalNode* tsqlParser::Simple_callContext::SESSION_USER() {
  return getToken(tsqlParser::SESSION_USER, 0);
}

tree::TerminalNode* tsqlParser::Simple_callContext::SYSTEM_USER() {
  return getToken(tsqlParser::SYSTEM_USER, 0);
}

tsqlParser::Simple_callContext::Simple_callContext(Function_callContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Simple_callContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitSimple_call(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Cast_callContext ------------------------------------------------------------------

tree::TerminalNode* tsqlParser::Cast_callContext::CAST() {
  return getToken(tsqlParser::CAST, 0);
}

tree::TerminalNode* tsqlParser::Cast_callContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tsqlParser::ExpressionContext* tsqlParser::Cast_callContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

tree::TerminalNode* tsqlParser::Cast_callContext::AS() {
  return getToken(tsqlParser::AS, 0);
}

tree::TerminalNode* tsqlParser::Cast_callContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tsqlParser::Data_typeContext* tsqlParser::Cast_callContext::data_type() {
  return getRuleContext<tsqlParser::Data_typeContext>(0);
}

tree::TerminalNode* tsqlParser::Cast_callContext::TRY_CAST() {
  return getToken(tsqlParser::TRY_CAST, 0);
}

tsqlParser::Cast_callContext::Cast_callContext(Function_callContext *ctx) { copyFrom(ctx); }


std::any tsqlParser::Cast_callContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitCast_call(this);
  else
    return visitor->visitChildren(this);
}
tsqlParser::Function_callContext* tsqlParser::function_call() {
  Function_callContext *_localctx = _tracker.createInstance<Function_callContext>(_ctx, getState());
  enterRule(_localctx, 294, tsqlParser::RuleFunction_call);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2958);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 411, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<tsqlParser::Rank_callContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(2785);
      ranking_windowed_function();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<tsqlParser::Aggregate_callContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(2786);
      aggregate_windowed_function();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<tsqlParser::Standard_callContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(2787);
      scalar_function_name();
      setState(2788);
      match(tsqlParser::LR_BRACKET);
      setState(2790);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 288106440032256) != 0 || (((_la - 66) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 66)) & -9222381634573827935) != 0 || (((_la - 152) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 152)) & 4629718039189852161) != 0 || (((_la - 217) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 217)) & 2203052274704250241) != 0 || (((_la - 281) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 281)) & -2942381077000725761) != 0 || (((_la - 347) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 347)) & -23397629359030529) != 0 || (((_la - 411) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 411)) & 3458782073792185291) != 0 || (((_la - 480) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 480)) & 7) != 0) {
        setState(2789);
        expression_list();
      }
      setState(2792);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<tsqlParser::Nvf_callContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(2794);
      next_value_for_function();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<tsqlParser::Standard_callContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(2795);
      match(tsqlParser::BINARY_CHECKSUM);
      setState(2796);
      match(tsqlParser::LR_BRACKET);
      setState(2797);
      match(tsqlParser::STAR);
      setState(2798);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<tsqlParser::Cast_callContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(2799);
      match(tsqlParser::CAST);
      setState(2800);
      match(tsqlParser::LR_BRACKET);
      setState(2801);
      expression(0);
      setState(2802);
      match(tsqlParser::AS);
      setState(2803);
      antlrcpp::downCast<Cast_callContext *>(_localctx)->alias = data_type();
      setState(2804);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<tsqlParser::Standard_callContext>(_localctx);
      enterOuterAlt(_localctx, 7);
      setState(2806);
      match(tsqlParser::CONVERT);
      setState(2807);
      match(tsqlParser::LR_BRACKET);
      setState(2808);
      data_type();
      setState(2809);
      match(tsqlParser::COMMA);
      setState(2810);
      expression(0);
      setState(2813);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::COMMA) {
        setState(2811);
        match(tsqlParser::COMMA);
        setState(2812);
        antlrcpp::downCast<Standard_callContext *>(_localctx)->style = expression(0);
      }
      setState(2815);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<tsqlParser::Simple_callContext>(_localctx);
      enterOuterAlt(_localctx, 8);
      setState(2817);
      match(tsqlParser::CHECKSUM);
      setState(2818);
      match(tsqlParser::LR_BRACKET);
      setState(2819);
      match(tsqlParser::STAR);
      setState(2820);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<tsqlParser::Standard_callContext>(_localctx);
      enterOuterAlt(_localctx, 9);
      setState(2821);
      match(tsqlParser::COALESCE);
      setState(2822);
      match(tsqlParser::LR_BRACKET);
      setState(2823);
      expression_list();
      setState(2824);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<tsqlParser::Simple_callContext>(_localctx);
      enterOuterAlt(_localctx, 10);
      setState(2826);
      match(tsqlParser::CURRENT_TIMESTAMP);
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<tsqlParser::Simple_callContext>(_localctx);
      enterOuterAlt(_localctx, 11);
      setState(2827);
      match(tsqlParser::CURRENT_USER);
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<tsqlParser::Standard_callContext>(_localctx);
      enterOuterAlt(_localctx, 12);
      setState(2828);
      match(tsqlParser::DATEADD);
      setState(2829);
      match(tsqlParser::LR_BRACKET);
      setState(2830);
      match(tsqlParser::ID);
      setState(2831);
      match(tsqlParser::COMMA);
      setState(2832);
      expression(0);
      setState(2833);
      match(tsqlParser::COMMA);
      setState(2834);
      expression(0);
      setState(2835);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 13: {
      _localctx = _tracker.createInstance<tsqlParser::Standard_callContext>(_localctx);
      enterOuterAlt(_localctx, 13);
      setState(2837);
      match(tsqlParser::DATEDIFF);
      setState(2838);
      match(tsqlParser::LR_BRACKET);
      setState(2839);
      match(tsqlParser::ID);
      setState(2840);
      match(tsqlParser::COMMA);
      setState(2841);
      expression(0);
      setState(2842);
      match(tsqlParser::COMMA);
      setState(2843);
      expression(0);
      setState(2844);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 14: {
      _localctx = _tracker.createInstance<tsqlParser::Standard_callContext>(_localctx);
      enterOuterAlt(_localctx, 14);
      setState(2846);
      match(tsqlParser::DATENAME);
      setState(2847);
      match(tsqlParser::LR_BRACKET);
      setState(2848);
      match(tsqlParser::ID);
      setState(2849);
      match(tsqlParser::COMMA);
      setState(2850);
      expression(0);
      setState(2851);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 15: {
      _localctx = _tracker.createInstance<tsqlParser::Standard_callContext>(_localctx);
      enterOuterAlt(_localctx, 15);
      setState(2853);
      match(tsqlParser::DATEPART);
      setState(2854);
      match(tsqlParser::LR_BRACKET);
      setState(2855);
      match(tsqlParser::ID);
      setState(2856);
      match(tsqlParser::COMMA);
      setState(2857);
      expression(0);
      setState(2858);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 16: {
      _localctx = _tracker.createInstance<tsqlParser::Standard_callContext>(_localctx);
      enterOuterAlt(_localctx, 16);
      setState(2860);
      match(tsqlParser::DATETIMEOFFSETFROMPARTS);
      setState(2861);
      match(tsqlParser::LR_BRACKET);
      setState(2862);
      expression(0);
      setState(2863);
      match(tsqlParser::COMMA);
      setState(2864);
      expression(0);
      setState(2865);
      match(tsqlParser::COMMA);
      setState(2866);
      expression(0);
      setState(2867);
      match(tsqlParser::COMMA);
      setState(2868);
      expression(0);
      setState(2869);
      match(tsqlParser::COMMA);
      setState(2870);
      expression(0);
      setState(2871);
      match(tsqlParser::COMMA);
      setState(2872);
      expression(0);
      setState(2873);
      match(tsqlParser::COMMA);
      setState(2874);
      expression(0);
      setState(2875);
      match(tsqlParser::COMMA);
      setState(2876);
      expression(0);
      setState(2877);
      match(tsqlParser::COMMA);
      setState(2878);
      expression(0);
      setState(2879);
      match(tsqlParser::COMMA);
      setState(2880);
      expression(0);
      setState(2881);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 17: {
      _localctx = _tracker.createInstance<tsqlParser::Standard_callContext>(_localctx);
      enterOuterAlt(_localctx, 17);
      setState(2883);
      match(tsqlParser::IDENTITY);
      setState(2884);
      match(tsqlParser::LR_BRACKET);
      setState(2885);
      data_type();
      setState(2888);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 407, _ctx)) {
      case 1: {
        setState(2886);
        match(tsqlParser::COMMA);
        setState(2887);
        antlrcpp::downCast<Standard_callContext *>(_localctx)->seed = match(tsqlParser::DECIMAL);
        break;
      }

      default:
        break;
      }
      setState(2892);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::COMMA) {
        setState(2890);
        match(tsqlParser::COMMA);
        setState(2891);
        antlrcpp::downCast<Standard_callContext *>(_localctx)->increment = match(tsqlParser::DECIMAL);
      }
      setState(2894);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 18: {
      _localctx = _tracker.createInstance<tsqlParser::Standard_callContext>(_localctx);
      enterOuterAlt(_localctx, 18);
      setState(2896);
      match(tsqlParser::IIF);
      setState(2897);
      match(tsqlParser::LR_BRACKET);
      setState(2898);
      search_condition(0);
      setState(2899);
      match(tsqlParser::COMMA);
      setState(2900);
      expression(0);
      setState(2901);
      match(tsqlParser::COMMA);
      setState(2902);
      expression(0);
      setState(2903);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 19: {
      _localctx = _tracker.createInstance<tsqlParser::Simple_callContext>(_localctx);
      enterOuterAlt(_localctx, 19);
      setState(2905);
      match(tsqlParser::MIN_ACTIVE_ROWVERSION);
      break;
    }

    case 20: {
      _localctx = _tracker.createInstance<tsqlParser::Standard_callContext>(_localctx);
      enterOuterAlt(_localctx, 20);
      setState(2906);
      match(tsqlParser::NULLIF);
      setState(2907);
      match(tsqlParser::LR_BRACKET);
      setState(2908);
      expression(0);
      setState(2909);
      match(tsqlParser::COMMA);
      setState(2910);
      expression(0);
      setState(2911);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 21: {
      _localctx = _tracker.createInstance<tsqlParser::Expression_callContext>(_localctx);
      enterOuterAlt(_localctx, 21);
      setState(2913);
      match(tsqlParser::PARSE);
      setState(2914);
      match(tsqlParser::LR_BRACKET);
      setState(2915);
      antlrcpp::downCast<Expression_callContext *>(_localctx)->left = expression(0);
      setState(2916);
      match(tsqlParser::AS);
      setState(2917);
      antlrcpp::downCast<Expression_callContext *>(_localctx)->alias = data_type();
      setState(2920);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::USING) {
        setState(2918);
        match(tsqlParser::USING);
        setState(2919);
        antlrcpp::downCast<Expression_callContext *>(_localctx)->right = expression(0);
      }
      setState(2922);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 22: {
      _localctx = _tracker.createInstance<tsqlParser::Simple_callContext>(_localctx);
      enterOuterAlt(_localctx, 22);
      setState(2924);
      match(tsqlParser::SESSION_USER);
      break;
    }

    case 23: {
      _localctx = _tracker.createInstance<tsqlParser::Standard_callContext>(_localctx);
      enterOuterAlt(_localctx, 23);
      setState(2925);
      match(tsqlParser::STRING_SPLIT);
      setState(2926);
      match(tsqlParser::LR_BRACKET);
      setState(2927);
      expression(0);
      setState(2928);
      match(tsqlParser::COMMA);
      setState(2929);
      expression(0);
      setState(2930);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 24: {
      _localctx = _tracker.createInstance<tsqlParser::Simple_callContext>(_localctx);
      enterOuterAlt(_localctx, 24);
      setState(2932);
      match(tsqlParser::SYSTEM_USER);
      break;
    }

    case 25: {
      _localctx = _tracker.createInstance<tsqlParser::Standard_callContext>(_localctx);
      enterOuterAlt(_localctx, 25);
      setState(2933);
      match(tsqlParser::TRY_CONVERT);
      setState(2934);
      match(tsqlParser::LR_BRACKET);
      setState(2935);
      data_type();
      setState(2936);
      match(tsqlParser::COMMA);
      setState(2937);
      expression(0);
      setState(2938);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 26: {
      _localctx = _tracker.createInstance<tsqlParser::Cast_callContext>(_localctx);
      enterOuterAlt(_localctx, 26);
      setState(2940);
      match(tsqlParser::TRY_CAST);
      setState(2941);
      match(tsqlParser::LR_BRACKET);
      setState(2942);
      expression(0);
      setState(2943);
      match(tsqlParser::AS);
      setState(2944);
      antlrcpp::downCast<Cast_callContext *>(_localctx)->alias = data_type();
      setState(2945);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 27: {
      _localctx = _tracker.createInstance<tsqlParser::Expression_callContext>(_localctx);
      enterOuterAlt(_localctx, 27);
      setState(2947);
      match(tsqlParser::TRY_PARSE);
      setState(2948);
      match(tsqlParser::LR_BRACKET);
      setState(2949);
      antlrcpp::downCast<Expression_callContext *>(_localctx)->left = expression(0);
      setState(2950);
      match(tsqlParser::AS);
      setState(2951);
      antlrcpp::downCast<Expression_callContext *>(_localctx)->alias = data_type();
      setState(2954);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::USING) {
        setState(2952);
        match(tsqlParser::USING);
        setState(2953);
        antlrcpp::downCast<Expression_callContext *>(_localctx)->right = expression(0);
      }
      setState(2956);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Switch_sectionContext ------------------------------------------------------------------

tsqlParser::Switch_sectionContext::Switch_sectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Switch_sectionContext::WHEN() {
  return getToken(tsqlParser::WHEN, 0);
}

tree::TerminalNode* tsqlParser::Switch_sectionContext::THEN() {
  return getToken(tsqlParser::THEN, 0);
}

std::vector<tsqlParser::ExpressionContext *> tsqlParser::Switch_sectionContext::expression() {
  return getRuleContexts<tsqlParser::ExpressionContext>();
}

tsqlParser::ExpressionContext* tsqlParser::Switch_sectionContext::expression(size_t i) {
  return getRuleContext<tsqlParser::ExpressionContext>(i);
}


size_t tsqlParser::Switch_sectionContext::getRuleIndex() const {
  return tsqlParser::RuleSwitch_section;
}


std::any tsqlParser::Switch_sectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitSwitch_section(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Switch_sectionContext* tsqlParser::switch_section() {
  Switch_sectionContext *_localctx = _tracker.createInstance<Switch_sectionContext>(_ctx, getState());
  enterRule(_localctx, 296, tsqlParser::RuleSwitch_section);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2960);
    match(tsqlParser::WHEN);
    setState(2961);
    antlrcpp::downCast<Switch_sectionContext *>(_localctx)->whenExpr = expression(0);
    setState(2962);
    match(tsqlParser::THEN);
    setState(2963);
    antlrcpp::downCast<Switch_sectionContext *>(_localctx)->thenExpr = expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Switch_search_condition_sectionContext ------------------------------------------------------------------

tsqlParser::Switch_search_condition_sectionContext::Switch_search_condition_sectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Switch_search_condition_sectionContext::WHEN() {
  return getToken(tsqlParser::WHEN, 0);
}

tree::TerminalNode* tsqlParser::Switch_search_condition_sectionContext::THEN() {
  return getToken(tsqlParser::THEN, 0);
}

tsqlParser::Search_conditionContext* tsqlParser::Switch_search_condition_sectionContext::search_condition() {
  return getRuleContext<tsqlParser::Search_conditionContext>(0);
}

tsqlParser::ExpressionContext* tsqlParser::Switch_search_condition_sectionContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}


size_t tsqlParser::Switch_search_condition_sectionContext::getRuleIndex() const {
  return tsqlParser::RuleSwitch_search_condition_section;
}


std::any tsqlParser::Switch_search_condition_sectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitSwitch_search_condition_section(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Switch_search_condition_sectionContext* tsqlParser::switch_search_condition_section() {
  Switch_search_condition_sectionContext *_localctx = _tracker.createInstance<Switch_search_condition_sectionContext>(_ctx, getState());
  enterRule(_localctx, 298, tsqlParser::RuleSwitch_search_condition_section);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2965);
    match(tsqlParser::WHEN);
    setState(2966);
    antlrcpp::downCast<Switch_search_condition_sectionContext *>(_localctx)->whenExpr = search_condition(0);
    setState(2967);
    match(tsqlParser::THEN);
    setState(2968);
    antlrcpp::downCast<Switch_search_condition_sectionContext *>(_localctx)->thenExpr = expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- With_table_hintsContext ------------------------------------------------------------------

tsqlParser::With_table_hintsContext::With_table_hintsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::With_table_hintsContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

std::vector<tsqlParser::Table_hintContext *> tsqlParser::With_table_hintsContext::table_hint() {
  return getRuleContexts<tsqlParser::Table_hintContext>();
}

tsqlParser::Table_hintContext* tsqlParser::With_table_hintsContext::table_hint(size_t i) {
  return getRuleContext<tsqlParser::Table_hintContext>(i);
}

tree::TerminalNode* tsqlParser::With_table_hintsContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::With_table_hintsContext::WITH() {
  return getToken(tsqlParser::WITH, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::With_table_hintsContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::With_table_hintsContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::With_table_hintsContext::getRuleIndex() const {
  return tsqlParser::RuleWith_table_hints;
}


std::any tsqlParser::With_table_hintsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitWith_table_hints(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::With_table_hintsContext* tsqlParser::with_table_hints() {
  With_table_hintsContext *_localctx = _tracker.createInstance<With_table_hintsContext>(_ctx, getState());
  enterRule(_localctx, 300, tsqlParser::RuleWith_table_hints);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2971);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::WITH) {
      setState(2970);
      match(tsqlParser::WITH);
    }
    setState(2973);
    match(tsqlParser::LR_BRACKET);
    setState(2974);
    table_hint();
    setState(2979);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == tsqlParser::COMMA) {
      setState(2975);
      match(tsqlParser::COMMA);
      setState(2976);
      table_hint();
      setState(2981);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2982);
    match(tsqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Insert_with_table_hintsContext ------------------------------------------------------------------

tsqlParser::Insert_with_table_hintsContext::Insert_with_table_hintsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Insert_with_table_hintsContext::WITH() {
  return getToken(tsqlParser::WITH, 0);
}

tree::TerminalNode* tsqlParser::Insert_with_table_hintsContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

std::vector<tsqlParser::Table_hintContext *> tsqlParser::Insert_with_table_hintsContext::table_hint() {
  return getRuleContexts<tsqlParser::Table_hintContext>();
}

tsqlParser::Table_hintContext* tsqlParser::Insert_with_table_hintsContext::table_hint(size_t i) {
  return getRuleContext<tsqlParser::Table_hintContext>(i);
}

tree::TerminalNode* tsqlParser::Insert_with_table_hintsContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Insert_with_table_hintsContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Insert_with_table_hintsContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::Insert_with_table_hintsContext::getRuleIndex() const {
  return tsqlParser::RuleInsert_with_table_hints;
}


std::any tsqlParser::Insert_with_table_hintsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitInsert_with_table_hints(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Insert_with_table_hintsContext* tsqlParser::insert_with_table_hints() {
  Insert_with_table_hintsContext *_localctx = _tracker.createInstance<Insert_with_table_hintsContext>(_ctx, getState());
  enterRule(_localctx, 302, tsqlParser::RuleInsert_with_table_hints);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2984);
    match(tsqlParser::WITH);
    setState(2985);
    match(tsqlParser::LR_BRACKET);
    setState(2986);
    table_hint();
    setState(2991);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == tsqlParser::COMMA) {
      setState(2987);
      match(tsqlParser::COMMA);
      setState(2988);
      table_hint();
      setState(2993);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2994);
    match(tsqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_hintContext ------------------------------------------------------------------

tsqlParser::Table_hintContext::Table_hintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Table_hintContext::NOEXPAND() {
  return getToken(tsqlParser::NOEXPAND, 0);
}

tree::TerminalNode* tsqlParser::Table_hintContext::INDEX() {
  return getToken(tsqlParser::INDEX, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Table_hintContext::LR_BRACKET() {
  return getTokens(tsqlParser::LR_BRACKET);
}

tree::TerminalNode* tsqlParser::Table_hintContext::LR_BRACKET(size_t i) {
  return getToken(tsqlParser::LR_BRACKET, i);
}

std::vector<tsqlParser::Index_valueContext *> tsqlParser::Table_hintContext::index_value() {
  return getRuleContexts<tsqlParser::Index_valueContext>();
}

tsqlParser::Index_valueContext* tsqlParser::Table_hintContext::index_value(size_t i) {
  return getRuleContext<tsqlParser::Index_valueContext>(i);
}

std::vector<tree::TerminalNode *> tsqlParser::Table_hintContext::RR_BRACKET() {
  return getTokens(tsqlParser::RR_BRACKET);
}

tree::TerminalNode* tsqlParser::Table_hintContext::RR_BRACKET(size_t i) {
  return getToken(tsqlParser::RR_BRACKET, i);
}

tree::TerminalNode* tsqlParser::Table_hintContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

tree::TerminalNode* tsqlParser::Table_hintContext::FORCESEEK() {
  return getToken(tsqlParser::FORCESEEK, 0);
}

tree::TerminalNode* tsqlParser::Table_hintContext::SERIALIZABLE() {
  return getToken(tsqlParser::SERIALIZABLE, 0);
}

tree::TerminalNode* tsqlParser::Table_hintContext::SNAPSHOT() {
  return getToken(tsqlParser::SNAPSHOT, 0);
}

tree::TerminalNode* tsqlParser::Table_hintContext::SPATIAL_WINDOW_MAX_CELLS() {
  return getToken(tsqlParser::SPATIAL_WINDOW_MAX_CELLS, 0);
}

tree::TerminalNode* tsqlParser::Table_hintContext::DECIMAL() {
  return getToken(tsqlParser::DECIMAL, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Table_hintContext::ID() {
  return getTokens(tsqlParser::ID);
}

tree::TerminalNode* tsqlParser::Table_hintContext::ID(size_t i) {
  return getToken(tsqlParser::ID, i);
}

std::vector<tree::TerminalNode *> tsqlParser::Table_hintContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Table_hintContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::Table_hintContext::getRuleIndex() const {
  return tsqlParser::RuleTable_hint;
}


std::any tsqlParser::Table_hintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitTable_hint(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Table_hintContext* tsqlParser::table_hint() {
  Table_hintContext *_localctx = _tracker.createInstance<Table_hintContext>(_ctx, getState());
  enterRule(_localctx, 304, tsqlParser::RuleTable_hint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2997);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::NOEXPAND) {
      setState(2996);
      match(tsqlParser::NOEXPAND);
    }
    setState(3037);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 419, _ctx)) {
    case 1: {
      setState(2999);
      match(tsqlParser::INDEX);
      setState(3000);
      match(tsqlParser::LR_BRACKET);
      setState(3001);
      index_value();
      setState(3006);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == tsqlParser::COMMA) {
        setState(3002);
        match(tsqlParser::COMMA);
        setState(3003);
        index_value();
        setState(3008);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(3009);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 2: {
      setState(3011);
      match(tsqlParser::INDEX);
      setState(3012);
      match(tsqlParser::EQUAL);
      setState(3013);
      index_value();
      break;
    }

    case 3: {
      setState(3014);
      match(tsqlParser::FORCESEEK);
      setState(3029);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::LR_BRACKET) {
        setState(3015);
        match(tsqlParser::LR_BRACKET);
        setState(3016);
        index_value();
        setState(3017);
        match(tsqlParser::LR_BRACKET);
        setState(3018);
        match(tsqlParser::ID);
        setState(3023);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == tsqlParser::COMMA) {
          setState(3019);
          match(tsqlParser::COMMA);
          setState(3020);
          match(tsqlParser::ID);
          setState(3025);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(3026);
        match(tsqlParser::RR_BRACKET);
        setState(3027);
        match(tsqlParser::RR_BRACKET);
      }
      break;
    }

    case 4: {
      setState(3031);
      match(tsqlParser::SERIALIZABLE);
      break;
    }

    case 5: {
      setState(3032);
      match(tsqlParser::SNAPSHOT);
      break;
    }

    case 6: {
      setState(3033);
      match(tsqlParser::SPATIAL_WINDOW_MAX_CELLS);
      setState(3034);
      match(tsqlParser::EQUAL);
      setState(3035);
      match(tsqlParser::DECIMAL);
      break;
    }

    case 7: {
      setState(3036);
      match(tsqlParser::ID);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Index_valueContext ------------------------------------------------------------------

tsqlParser::Index_valueContext::Index_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::R_idContext* tsqlParser::Index_valueContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tree::TerminalNode* tsqlParser::Index_valueContext::DECIMAL() {
  return getToken(tsqlParser::DECIMAL, 0);
}


size_t tsqlParser::Index_valueContext::getRuleIndex() const {
  return tsqlParser::RuleIndex_value;
}


std::any tsqlParser::Index_valueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitIndex_value(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Index_valueContext* tsqlParser::index_value() {
  Index_valueContext *_localctx = _tracker.createInstance<Index_valueContext>(_ctx, getState());
  enterRule(_localctx, 306, tsqlParser::RuleIndex_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3041);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::FILLFACTOR:
      case tsqlParser::FORCESEEK:
      case tsqlParser::NEXT:
      case tsqlParser::NUMERIC:
      case tsqlParser::VALUE:
      case tsqlParser::ABSOLUTE:
      case tsqlParser::APPLY:
      case tsqlParser::AUTO:
      case tsqlParser::AVG:
      case tsqlParser::BASE64:
      case tsqlParser::CALLER:
      case tsqlParser::CAST:
      case tsqlParser::CATCH:
      case tsqlParser::CHECKSUM_AGG:
      case tsqlParser::COMMITTED:
      case tsqlParser::CONCAT:
      case tsqlParser::CONTROL:
      case tsqlParser::COOKIE:
      case tsqlParser::COUNT:
      case tsqlParser::COUNT_BIG:
      case tsqlParser::DATE:
      case tsqlParser::DELAY:
      case tsqlParser::DELETED:
      case tsqlParser::DENSE_RANK:
      case tsqlParser::DISABLE:
      case tsqlParser::DYNAMIC:
      case tsqlParser::ENCRYPTION:
      case tsqlParser::EXIST:
      case tsqlParser::EXPAND:
      case tsqlParser::FAST:
      case tsqlParser::FAST_FORWARD:
      case tsqlParser::FIRST:
      case tsqlParser::FIRST_VALUE:
      case tsqlParser::FOLLOWING:
      case tsqlParser::FORCE:
      case tsqlParser::FORCED:
      case tsqlParser::FORWARD_ONLY:
      case tsqlParser::FULLSCAN:
      case tsqlParser::GLOBAL:
      case tsqlParser::GROUPING:
      case tsqlParser::GROUPING_ID:
      case tsqlParser::HASH:
      case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
      case tsqlParser::IMPERSONATE:
      case tsqlParser::INSENSITIVE:
      case tsqlParser::INSERTED:
      case tsqlParser::ISOLATION:
      case tsqlParser::IO:
      case tsqlParser::KEEP:
      case tsqlParser::KEEPFIXED:
      case tsqlParser::KEYSET:
      case tsqlParser::LAG:
      case tsqlParser::LAST:
      case tsqlParser::LAST_VALUE:
      case tsqlParser::LEAD:
      case tsqlParser::LEVEL:
      case tsqlParser::LOCAL:
      case tsqlParser::LOCK_ESCALATION:
      case tsqlParser::LOGIN:
      case tsqlParser::LOOP:
      case tsqlParser::MARK:
      case tsqlParser::MAX:
      case tsqlParser::MAXDOP:
      case tsqlParser::MAXRECURSION:
      case tsqlParser::MIN:
      case tsqlParser::MODIFY:
      case tsqlParser::NAME:
      case tsqlParser::NOCOUNT:
      case tsqlParser::NODES:
      case tsqlParser::NOEXPAND:
      case tsqlParser::NORECOMPUTE:
      case tsqlParser::NTILE:
      case tsqlParser::NUMBER:
      case tsqlParser::OFFSET:
      case tsqlParser::ONLINE:
      case tsqlParser::ONLY:
      case tsqlParser::OPTIMISTIC:
      case tsqlParser::OPTIMIZE:
      case tsqlParser::OUT:
      case tsqlParser::OUTPUT:
      case tsqlParser::OWNER:
      case tsqlParser::PARAMETERIZATION:
      case tsqlParser::PARTITION:
      case tsqlParser::PATH:
      case tsqlParser::PRECEDING:
      case tsqlParser::PRIOR:
      case tsqlParser::PRIVILEGES:
      case tsqlParser::QUERY:
      case tsqlParser::RANGE:
      case tsqlParser::RANK:
      case tsqlParser::READONLY:
      case tsqlParser::READ_ONLY:
      case tsqlParser::RECOMPILE:
      case tsqlParser::RELATIVE:
      case tsqlParser::REMOTE:
      case tsqlParser::REPEATABLE:
      case tsqlParser::ROBUST:
      case tsqlParser::ROOT:
      case tsqlParser::ROW:
      case tsqlParser::ROWGUID:
      case tsqlParser::ROWS:
      case tsqlParser::ROW_NUMBER:
      case tsqlParser::SAMPLE:
      case tsqlParser::SCHEMABINDING:
      case tsqlParser::SCROLL:
      case tsqlParser::SCROLL_LOCKS:
      case tsqlParser::SELF:
      case tsqlParser::SERIALIZABLE:
      case tsqlParser::SIMPLE:
      case tsqlParser::SIZE:
      case tsqlParser::SNAPSHOT:
      case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
      case tsqlParser::STATIC:
      case tsqlParser::STATS_STREAM:
      case tsqlParser::STDEV:
      case tsqlParser::STDEVP:
      case tsqlParser::SUM:
      case tsqlParser::TEXTIMAGE_ON:
      case tsqlParser::THROW:
      case tsqlParser::TIES:
      case tsqlParser::TIME:
      case tsqlParser::TRY:
      case tsqlParser::TYPE:
      case tsqlParser::TYPE_WARNING:
      case tsqlParser::UNBOUNDED:
      case tsqlParser::UNCOMMITTED:
      case tsqlParser::UNKNOWN:
      case tsqlParser::USING:
      case tsqlParser::VAR:
      case tsqlParser::VARP:
      case tsqlParser::VIEWS:
      case tsqlParser::VIEW_METADATA:
      case tsqlParser::WORK:
      case tsqlParser::XML:
      case tsqlParser::XMLNAMESPACES:
      case tsqlParser::ZONE:
      case tsqlParser::DOUBLE_QUOTE_ID:
      case tsqlParser::SQUARE_BRACKET_ID:
      case tsqlParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(3039);
        r_id();
        break;
      }

      case tsqlParser::DECIMAL: {
        enterOuterAlt(_localctx, 2);
        setState(3040);
        match(tsqlParser::DECIMAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Column_alias_listContext ------------------------------------------------------------------

tsqlParser::Column_alias_listContext::Column_alias_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Column_alias_listContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

std::vector<tsqlParser::Column_aliasContext *> tsqlParser::Column_alias_listContext::column_alias() {
  return getRuleContexts<tsqlParser::Column_aliasContext>();
}

tsqlParser::Column_aliasContext* tsqlParser::Column_alias_listContext::column_alias(size_t i) {
  return getRuleContext<tsqlParser::Column_aliasContext>(i);
}

tree::TerminalNode* tsqlParser::Column_alias_listContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Column_alias_listContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Column_alias_listContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::Column_alias_listContext::getRuleIndex() const {
  return tsqlParser::RuleColumn_alias_list;
}


std::any tsqlParser::Column_alias_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitColumn_alias_list(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Column_alias_listContext* tsqlParser::column_alias_list() {
  Column_alias_listContext *_localctx = _tracker.createInstance<Column_alias_listContext>(_ctx, getState());
  enterRule(_localctx, 308, tsqlParser::RuleColumn_alias_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3043);
    match(tsqlParser::LR_BRACKET);
    setState(3044);
    column_alias();
    setState(3049);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == tsqlParser::COMMA) {
      setState(3045);
      match(tsqlParser::COMMA);
      setState(3046);
      column_alias();
      setState(3051);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3052);
    match(tsqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Column_aliasContext ------------------------------------------------------------------

tsqlParser::Column_aliasContext::Column_aliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::R_idContext* tsqlParser::Column_aliasContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tree::TerminalNode* tsqlParser::Column_aliasContext::STRING() {
  return getToken(tsqlParser::STRING, 0);
}


size_t tsqlParser::Column_aliasContext::getRuleIndex() const {
  return tsqlParser::RuleColumn_alias;
}


std::any tsqlParser::Column_aliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitColumn_alias(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Column_aliasContext* tsqlParser::column_alias() {
  Column_aliasContext *_localctx = _tracker.createInstance<Column_aliasContext>(_ctx, getState());
  enterRule(_localctx, 310, tsqlParser::RuleColumn_alias);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3056);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::FILLFACTOR:
      case tsqlParser::FORCESEEK:
      case tsqlParser::NEXT:
      case tsqlParser::NUMERIC:
      case tsqlParser::VALUE:
      case tsqlParser::ABSOLUTE:
      case tsqlParser::APPLY:
      case tsqlParser::AUTO:
      case tsqlParser::AVG:
      case tsqlParser::BASE64:
      case tsqlParser::CALLER:
      case tsqlParser::CAST:
      case tsqlParser::CATCH:
      case tsqlParser::CHECKSUM_AGG:
      case tsqlParser::COMMITTED:
      case tsqlParser::CONCAT:
      case tsqlParser::CONTROL:
      case tsqlParser::COOKIE:
      case tsqlParser::COUNT:
      case tsqlParser::COUNT_BIG:
      case tsqlParser::DATE:
      case tsqlParser::DELAY:
      case tsqlParser::DELETED:
      case tsqlParser::DENSE_RANK:
      case tsqlParser::DISABLE:
      case tsqlParser::DYNAMIC:
      case tsqlParser::ENCRYPTION:
      case tsqlParser::EXIST:
      case tsqlParser::EXPAND:
      case tsqlParser::FAST:
      case tsqlParser::FAST_FORWARD:
      case tsqlParser::FIRST:
      case tsqlParser::FIRST_VALUE:
      case tsqlParser::FOLLOWING:
      case tsqlParser::FORCE:
      case tsqlParser::FORCED:
      case tsqlParser::FORWARD_ONLY:
      case tsqlParser::FULLSCAN:
      case tsqlParser::GLOBAL:
      case tsqlParser::GROUPING:
      case tsqlParser::GROUPING_ID:
      case tsqlParser::HASH:
      case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
      case tsqlParser::IMPERSONATE:
      case tsqlParser::INSENSITIVE:
      case tsqlParser::INSERTED:
      case tsqlParser::ISOLATION:
      case tsqlParser::IO:
      case tsqlParser::KEEP:
      case tsqlParser::KEEPFIXED:
      case tsqlParser::KEYSET:
      case tsqlParser::LAG:
      case tsqlParser::LAST:
      case tsqlParser::LAST_VALUE:
      case tsqlParser::LEAD:
      case tsqlParser::LEVEL:
      case tsqlParser::LOCAL:
      case tsqlParser::LOCK_ESCALATION:
      case tsqlParser::LOGIN:
      case tsqlParser::LOOP:
      case tsqlParser::MARK:
      case tsqlParser::MAX:
      case tsqlParser::MAXDOP:
      case tsqlParser::MAXRECURSION:
      case tsqlParser::MIN:
      case tsqlParser::MODIFY:
      case tsqlParser::NAME:
      case tsqlParser::NOCOUNT:
      case tsqlParser::NODES:
      case tsqlParser::NOEXPAND:
      case tsqlParser::NORECOMPUTE:
      case tsqlParser::NTILE:
      case tsqlParser::NUMBER:
      case tsqlParser::OFFSET:
      case tsqlParser::ONLINE:
      case tsqlParser::ONLY:
      case tsqlParser::OPTIMISTIC:
      case tsqlParser::OPTIMIZE:
      case tsqlParser::OUT:
      case tsqlParser::OUTPUT:
      case tsqlParser::OWNER:
      case tsqlParser::PARAMETERIZATION:
      case tsqlParser::PARTITION:
      case tsqlParser::PATH:
      case tsqlParser::PRECEDING:
      case tsqlParser::PRIOR:
      case tsqlParser::PRIVILEGES:
      case tsqlParser::QUERY:
      case tsqlParser::RANGE:
      case tsqlParser::RANK:
      case tsqlParser::READONLY:
      case tsqlParser::READ_ONLY:
      case tsqlParser::RECOMPILE:
      case tsqlParser::RELATIVE:
      case tsqlParser::REMOTE:
      case tsqlParser::REPEATABLE:
      case tsqlParser::ROBUST:
      case tsqlParser::ROOT:
      case tsqlParser::ROW:
      case tsqlParser::ROWGUID:
      case tsqlParser::ROWS:
      case tsqlParser::ROW_NUMBER:
      case tsqlParser::SAMPLE:
      case tsqlParser::SCHEMABINDING:
      case tsqlParser::SCROLL:
      case tsqlParser::SCROLL_LOCKS:
      case tsqlParser::SELF:
      case tsqlParser::SERIALIZABLE:
      case tsqlParser::SIMPLE:
      case tsqlParser::SIZE:
      case tsqlParser::SNAPSHOT:
      case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
      case tsqlParser::STATIC:
      case tsqlParser::STATS_STREAM:
      case tsqlParser::STDEV:
      case tsqlParser::STDEVP:
      case tsqlParser::SUM:
      case tsqlParser::TEXTIMAGE_ON:
      case tsqlParser::THROW:
      case tsqlParser::TIES:
      case tsqlParser::TIME:
      case tsqlParser::TRY:
      case tsqlParser::TYPE:
      case tsqlParser::TYPE_WARNING:
      case tsqlParser::UNBOUNDED:
      case tsqlParser::UNCOMMITTED:
      case tsqlParser::UNKNOWN:
      case tsqlParser::USING:
      case tsqlParser::VAR:
      case tsqlParser::VARP:
      case tsqlParser::VIEWS:
      case tsqlParser::VIEW_METADATA:
      case tsqlParser::WORK:
      case tsqlParser::XML:
      case tsqlParser::XMLNAMESPACES:
      case tsqlParser::ZONE:
      case tsqlParser::DOUBLE_QUOTE_ID:
      case tsqlParser::SQUARE_BRACKET_ID:
      case tsqlParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(3054);
        r_id();
        break;
      }

      case tsqlParser::STRING: {
        enterOuterAlt(_localctx, 2);
        setState(3055);
        match(tsqlParser::STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- A_starContext ------------------------------------------------------------------

tsqlParser::A_starContext::A_starContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::A_starContext::STAR() {
  return getToken(tsqlParser::STAR, 0);
}


size_t tsqlParser::A_starContext::getRuleIndex() const {
  return tsqlParser::RuleA_star;
}


std::any tsqlParser::A_starContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitA_star(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::A_starContext* tsqlParser::a_star() {
  A_starContext *_localctx = _tracker.createInstance<A_starContext>(_ctx, getState());
  enterRule(_localctx, 312, tsqlParser::RuleA_star);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3058);
    match(tsqlParser::STAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_value_constructorContext ------------------------------------------------------------------

tsqlParser::Table_value_constructorContext::Table_value_constructorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Table_value_constructorContext::VALUES() {
  return getToken(tsqlParser::VALUES, 0);
}

std::vector<tsqlParser::Value_listContext *> tsqlParser::Table_value_constructorContext::value_list() {
  return getRuleContexts<tsqlParser::Value_listContext>();
}

tsqlParser::Value_listContext* tsqlParser::Table_value_constructorContext::value_list(size_t i) {
  return getRuleContext<tsqlParser::Value_listContext>(i);
}

std::vector<tree::TerminalNode *> tsqlParser::Table_value_constructorContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Table_value_constructorContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::Table_value_constructorContext::getRuleIndex() const {
  return tsqlParser::RuleTable_value_constructor;
}


std::any tsqlParser::Table_value_constructorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitTable_value_constructor(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Table_value_constructorContext* tsqlParser::table_value_constructor() {
  Table_value_constructorContext *_localctx = _tracker.createInstance<Table_value_constructorContext>(_ctx, getState());
  enterRule(_localctx, 314, tsqlParser::RuleTable_value_constructor);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3060);
    match(tsqlParser::VALUES);
    setState(3061);
    value_list();
    setState(3066);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 423, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3062);
        match(tsqlParser::COMMA);
        setState(3063);
        value_list(); 
      }
      setState(3068);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 423, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_listContext ------------------------------------------------------------------

tsqlParser::Expression_listContext::Expression_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tsqlParser::ExpressionContext *> tsqlParser::Expression_listContext::expression() {
  return getRuleContexts<tsqlParser::ExpressionContext>();
}

tsqlParser::ExpressionContext* tsqlParser::Expression_listContext::expression(size_t i) {
  return getRuleContext<tsqlParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> tsqlParser::Expression_listContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Expression_listContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::Expression_listContext::getRuleIndex() const {
  return tsqlParser::RuleExpression_list;
}


std::any tsqlParser::Expression_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitExpression_list(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Expression_listContext* tsqlParser::expression_list() {
  Expression_listContext *_localctx = _tracker.createInstance<Expression_listContext>(_ctx, getState());
  enterRule(_localctx, 316, tsqlParser::RuleExpression_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3069);
    expression(0);
    setState(3074);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == tsqlParser::COMMA) {
      setState(3070);
      match(tsqlParser::COMMA);
      setState(3071);
      expression(0);
      setState(3076);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Value_listContext ------------------------------------------------------------------

tsqlParser::Value_listContext::Value_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Value_listContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tsqlParser::Expression_listContext* tsqlParser::Value_listContext::expression_list() {
  return getRuleContext<tsqlParser::Expression_listContext>(0);
}

tree::TerminalNode* tsqlParser::Value_listContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}


size_t tsqlParser::Value_listContext::getRuleIndex() const {
  return tsqlParser::RuleValue_list;
}


std::any tsqlParser::Value_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitValue_list(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Value_listContext* tsqlParser::value_list() {
  Value_listContext *_localctx = _tracker.createInstance<Value_listContext>(_ctx, getState());
  enterRule(_localctx, 318, tsqlParser::RuleValue_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3077);
    match(tsqlParser::LR_BRACKET);
    setState(3078);
    expression_list();
    setState(3079);
    match(tsqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Next_value_forContext ------------------------------------------------------------------

tsqlParser::Next_value_forContext::Next_value_forContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Next_value_forContext::NEXT() {
  return getToken(tsqlParser::NEXT, 0);
}

tree::TerminalNode* tsqlParser::Next_value_forContext::VALUE() {
  return getToken(tsqlParser::VALUE, 0);
}

tree::TerminalNode* tsqlParser::Next_value_forContext::FOR() {
  return getToken(tsqlParser::FOR, 0);
}


size_t tsqlParser::Next_value_forContext::getRuleIndex() const {
  return tsqlParser::RuleNext_value_for;
}


std::any tsqlParser::Next_value_forContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitNext_value_for(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Next_value_forContext* tsqlParser::next_value_for() {
  Next_value_forContext *_localctx = _tracker.createInstance<Next_value_forContext>(_ctx, getState());
  enterRule(_localctx, 320, tsqlParser::RuleNext_value_for);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3081);
    match(tsqlParser::NEXT);
    setState(3082);
    match(tsqlParser::VALUE);
    setState(3083);
    match(tsqlParser::FOR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Next_value_for_functionContext ------------------------------------------------------------------

tsqlParser::Next_value_for_functionContext::Next_value_for_functionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::Next_value_forContext* tsqlParser::Next_value_for_functionContext::next_value_for() {
  return getRuleContext<tsqlParser::Next_value_forContext>(0);
}

tsqlParser::Over_clauseContext* tsqlParser::Next_value_for_functionContext::over_clause() {
  return getRuleContext<tsqlParser::Over_clauseContext>(0);
}

tsqlParser::Func_proc_nameContext* tsqlParser::Next_value_for_functionContext::func_proc_name() {
  return getRuleContext<tsqlParser::Func_proc_nameContext>(0);
}


size_t tsqlParser::Next_value_for_functionContext::getRuleIndex() const {
  return tsqlParser::RuleNext_value_for_function;
}


std::any tsqlParser::Next_value_for_functionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitNext_value_for_function(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Next_value_for_functionContext* tsqlParser::next_value_for_function() {
  Next_value_for_functionContext *_localctx = _tracker.createInstance<Next_value_for_functionContext>(_ctx, getState());
  enterRule(_localctx, 322, tsqlParser::RuleNext_value_for_function);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3085);
    next_value_for();
    setState(3086);
    antlrcpp::downCast<Next_value_for_functionContext *>(_localctx)->args = func_proc_name();
    setState(3087);
    over_clause();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Ranking_windowed_functionContext ------------------------------------------------------------------

tsqlParser::Ranking_windowed_functionContext::Ranking_windowed_functionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Ranking_windowed_functionContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Ranking_windowed_functionContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tsqlParser::Over_clauseContext* tsqlParser::Ranking_windowed_functionContext::over_clause() {
  return getRuleContext<tsqlParser::Over_clauseContext>(0);
}

tree::TerminalNode* tsqlParser::Ranking_windowed_functionContext::RANK() {
  return getToken(tsqlParser::RANK, 0);
}

tree::TerminalNode* tsqlParser::Ranking_windowed_functionContext::DENSE_RANK() {
  return getToken(tsqlParser::DENSE_RANK, 0);
}

tree::TerminalNode* tsqlParser::Ranking_windowed_functionContext::ROW_NUMBER() {
  return getToken(tsqlParser::ROW_NUMBER, 0);
}

std::vector<tsqlParser::ExpressionContext *> tsqlParser::Ranking_windowed_functionContext::expression() {
  return getRuleContexts<tsqlParser::ExpressionContext>();
}

tsqlParser::ExpressionContext* tsqlParser::Ranking_windowed_functionContext::expression(size_t i) {
  return getRuleContext<tsqlParser::ExpressionContext>(i);
}

tree::TerminalNode* tsqlParser::Ranking_windowed_functionContext::NTILE() {
  return getToken(tsqlParser::NTILE, 0);
}

tree::TerminalNode* tsqlParser::Ranking_windowed_functionContext::FIRST_VALUE() {
  return getToken(tsqlParser::FIRST_VALUE, 0);
}

tree::TerminalNode* tsqlParser::Ranking_windowed_functionContext::LAST_VALUE() {
  return getToken(tsqlParser::LAST_VALUE, 0);
}

tree::TerminalNode* tsqlParser::Ranking_windowed_functionContext::LEAD() {
  return getToken(tsqlParser::LEAD, 0);
}

tree::TerminalNode* tsqlParser::Ranking_windowed_functionContext::LAG() {
  return getToken(tsqlParser::LAG, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Ranking_windowed_functionContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Ranking_windowed_functionContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::Ranking_windowed_functionContext::getRuleIndex() const {
  return tsqlParser::RuleRanking_windowed_function;
}


std::any tsqlParser::Ranking_windowed_functionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitRanking_windowed_function(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Ranking_windowed_functionContext* tsqlParser::ranking_windowed_function() {
  Ranking_windowed_functionContext *_localctx = _tracker.createInstance<Ranking_windowed_functionContext>(_ctx, getState());
  enterRule(_localctx, 324, tsqlParser::RuleRanking_windowed_function);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3112);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::DENSE_RANK:
      case tsqlParser::RANK:
      case tsqlParser::ROW_NUMBER: {
        enterOuterAlt(_localctx, 1);
        setState(3089);
        _la = _input->LA(1);
        if (!(_la == tsqlParser::DENSE_RANK || _la == tsqlParser::RANK

        || _la == tsqlParser::ROW_NUMBER)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(3090);
        match(tsqlParser::LR_BRACKET);
        setState(3091);
        match(tsqlParser::RR_BRACKET);
        setState(3092);
        over_clause();
        break;
      }

      case tsqlParser::FIRST_VALUE:
      case tsqlParser::LAST_VALUE:
      case tsqlParser::NTILE: {
        enterOuterAlt(_localctx, 2);
        setState(3093);
        _la = _input->LA(1);
        if (!((((_la - 282) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 282)) & 2305843013508661249) != 0)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(3094);
        match(tsqlParser::LR_BRACKET);
        setState(3095);
        expression(0);
        setState(3096);
        match(tsqlParser::RR_BRACKET);
        setState(3097);
        over_clause();
        break;
      }

      case tsqlParser::LAG:
      case tsqlParser::LEAD: {
        enterOuterAlt(_localctx, 3);
        setState(3099);
        _la = _input->LA(1);
        if (!(_la == tsqlParser::LAG

        || _la == tsqlParser::LEAD)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(3100);
        match(tsqlParser::LR_BRACKET);
        setState(3101);
        expression(0);
        setState(3106);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == tsqlParser::COMMA) {
          setState(3102);
          match(tsqlParser::COMMA);
          setState(3103);
          expression(0);
          setState(3108);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(3109);
        match(tsqlParser::RR_BRACKET);
        setState(3110);
        over_clause();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Aggregate_windowed_functionContext ------------------------------------------------------------------

tsqlParser::Aggregate_windowed_functionContext::Aggregate_windowed_functionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Aggregate_windowed_functionContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tsqlParser::ExpressionContext* tsqlParser::Aggregate_windowed_functionContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

tree::TerminalNode* tsqlParser::Aggregate_windowed_functionContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Aggregate_windowed_functionContext::AVG() {
  return getToken(tsqlParser::AVG, 0);
}

tree::TerminalNode* tsqlParser::Aggregate_windowed_functionContext::MAX() {
  return getToken(tsqlParser::MAX, 0);
}

tree::TerminalNode* tsqlParser::Aggregate_windowed_functionContext::MIN() {
  return getToken(tsqlParser::MIN, 0);
}

tree::TerminalNode* tsqlParser::Aggregate_windowed_functionContext::SUM() {
  return getToken(tsqlParser::SUM, 0);
}

tree::TerminalNode* tsqlParser::Aggregate_windowed_functionContext::STDEV() {
  return getToken(tsqlParser::STDEV, 0);
}

tree::TerminalNode* tsqlParser::Aggregate_windowed_functionContext::STDEVP() {
  return getToken(tsqlParser::STDEVP, 0);
}

tree::TerminalNode* tsqlParser::Aggregate_windowed_functionContext::VAR() {
  return getToken(tsqlParser::VAR, 0);
}

tree::TerminalNode* tsqlParser::Aggregate_windowed_functionContext::VARP() {
  return getToken(tsqlParser::VARP, 0);
}

tsqlParser::All_distinctContext* tsqlParser::Aggregate_windowed_functionContext::all_distinct() {
  return getRuleContext<tsqlParser::All_distinctContext>(0);
}

tsqlParser::Over_clauseContext* tsqlParser::Aggregate_windowed_functionContext::over_clause() {
  return getRuleContext<tsqlParser::Over_clauseContext>(0);
}

tree::TerminalNode* tsqlParser::Aggregate_windowed_functionContext::COUNT() {
  return getToken(tsqlParser::COUNT, 0);
}

tree::TerminalNode* tsqlParser::Aggregate_windowed_functionContext::COUNT_BIG() {
  return getToken(tsqlParser::COUNT_BIG, 0);
}

tree::TerminalNode* tsqlParser::Aggregate_windowed_functionContext::STAR() {
  return getToken(tsqlParser::STAR, 0);
}

tree::TerminalNode* tsqlParser::Aggregate_windowed_functionContext::CHECKSUM_AGG() {
  return getToken(tsqlParser::CHECKSUM_AGG, 0);
}

tree::TerminalNode* tsqlParser::Aggregate_windowed_functionContext::GROUPING() {
  return getToken(tsqlParser::GROUPING, 0);
}

tree::TerminalNode* tsqlParser::Aggregate_windowed_functionContext::GROUPING_ID() {
  return getToken(tsqlParser::GROUPING_ID, 0);
}

tsqlParser::Expression_listContext* tsqlParser::Aggregate_windowed_functionContext::expression_list() {
  return getRuleContext<tsqlParser::Expression_listContext>(0);
}


size_t tsqlParser::Aggregate_windowed_functionContext::getRuleIndex() const {
  return tsqlParser::RuleAggregate_windowed_function;
}


std::any tsqlParser::Aggregate_windowed_functionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitAggregate_windowed_function(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Aggregate_windowed_functionContext* tsqlParser::aggregate_windowed_function() {
  Aggregate_windowed_functionContext *_localctx = _tracker.createInstance<Aggregate_windowed_functionContext>(_ctx, getState());
  enterRule(_localctx, 326, tsqlParser::RuleAggregate_windowed_function);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3155);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::AVG:
      case tsqlParser::MAX:
      case tsqlParser::MIN:
      case tsqlParser::STDEV:
      case tsqlParser::STDEVP:
      case tsqlParser::SUM:
      case tsqlParser::VAR:
      case tsqlParser::VARP: {
        enterOuterAlt(_localctx, 1);
        setState(3114);
        _la = _input->LA(1);
        if (!(_la == tsqlParser::AVG || _la == tsqlParser::MAX

        || _la == tsqlParser::MIN || (((_la - 406) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 406)) & 805306387) != 0)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(3115);
        match(tsqlParser::LR_BRACKET);
        setState(3117);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == tsqlParser::ALL

        || _la == tsqlParser::DISTINCT) {
          setState(3116);
          all_distinct();
        }
        setState(3119);
        expression(0);
        setState(3120);
        match(tsqlParser::RR_BRACKET);
        setState(3122);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 428, _ctx)) {
        case 1: {
          setState(3121);
          over_clause();
          break;
        }

        default:
          break;
        }
        break;
      }

      case tsqlParser::COUNT:
      case tsqlParser::COUNT_BIG: {
        enterOuterAlt(_localctx, 2);
        setState(3124);
        _la = _input->LA(1);
        if (!(_la == tsqlParser::COUNT

        || _la == tsqlParser::COUNT_BIG)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(3125);
        match(tsqlParser::LR_BRACKET);
        setState(3131);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case tsqlParser::STAR: {
            setState(3126);
            antlrcpp::downCast<Aggregate_windowed_functionContext *>(_localctx)->args = match(tsqlParser::STAR);
            break;
          }

          case tsqlParser::ALL:
          case tsqlParser::CASE:
          case tsqlParser::COALESCE:
          case tsqlParser::CONVERT:
          case tsqlParser::CURRENT_TIMESTAMP:
          case tsqlParser::CURRENT_USER:
          case tsqlParser::DEFAULT:
          case tsqlParser::DISTINCT:
          case tsqlParser::EXP:
          case tsqlParser::FILLFACTOR:
          case tsqlParser::FORCESEEK:
          case tsqlParser::IDENTITY:
          case tsqlParser::IIF:
          case tsqlParser::LEFT:
          case tsqlParser::LOG:
          case tsqlParser::LOG10:
          case tsqlParser::NEXT:
          case tsqlParser::NULL_:
          case tsqlParser::NULLIF:
          case tsqlParser::NUMERIC:
          case tsqlParser::OVER:
          case tsqlParser::RIGHT:
          case tsqlParser::SESSION_USER:
          case tsqlParser::SIGN:
          case tsqlParser::SYSTEM_USER:
          case tsqlParser::TRY_CAST:
          case tsqlParser::TRY_CONVERT:
          case tsqlParser::TRY_PARSE:
          case tsqlParser::VALUE:
          case tsqlParser::ABSOLUTE:
          case tsqlParser::APPLY:
          case tsqlParser::AUTO:
          case tsqlParser::AVG:
          case tsqlParser::BASE64:
          case tsqlParser::BINARY_CHECKSUM:
          case tsqlParser::CALLER:
          case tsqlParser::CAST:
          case tsqlParser::CATCH:
          case tsqlParser::CEILING:
          case tsqlParser::CHECKSUM:
          case tsqlParser::CHECKSUM_AGG:
          case tsqlParser::COMMITTED:
          case tsqlParser::CONCAT:
          case tsqlParser::CONTROL:
          case tsqlParser::COOKIE:
          case tsqlParser::COS:
          case tsqlParser::COUNT:
          case tsqlParser::COUNT_BIG:
          case tsqlParser::DATE:
          case tsqlParser::DATEADD:
          case tsqlParser::DATEDIFF:
          case tsqlParser::DATENAME:
          case tsqlParser::DATEPART:
          case tsqlParser::DATETIMEOFFSETFROMPARTS:
          case tsqlParser::DELAY:
          case tsqlParser::DELETED:
          case tsqlParser::DENSE_RANK:
          case tsqlParser::DISABLE:
          case tsqlParser::DYNAMIC:
          case tsqlParser::ENCRYPTION:
          case tsqlParser::EXIST:
          case tsqlParser::EXPAND:
          case tsqlParser::FAST:
          case tsqlParser::FAST_FORWARD:
          case tsqlParser::FIRST:
          case tsqlParser::FIRST_VALUE:
          case tsqlParser::FLOOR:
          case tsqlParser::FOLLOWING:
          case tsqlParser::FORCE:
          case tsqlParser::FORCED:
          case tsqlParser::FORWARD_ONLY:
          case tsqlParser::FULLSCAN:
          case tsqlParser::GLOBAL:
          case tsqlParser::GROUPING:
          case tsqlParser::GROUPING_ID:
          case tsqlParser::HASH:
          case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
          case tsqlParser::IMPERSONATE:
          case tsqlParser::INSENSITIVE:
          case tsqlParser::INSERTED:
          case tsqlParser::ISOLATION:
          case tsqlParser::IO:
          case tsqlParser::KEEP:
          case tsqlParser::KEEPFIXED:
          case tsqlParser::KEYSET:
          case tsqlParser::LAG:
          case tsqlParser::LAST:
          case tsqlParser::LAST_VALUE:
          case tsqlParser::LEAD:
          case tsqlParser::LEVEL:
          case tsqlParser::LOCAL:
          case tsqlParser::LOCK_ESCALATION:
          case tsqlParser::LOGIN:
          case tsqlParser::LOOP:
          case tsqlParser::MARK:
          case tsqlParser::MAX:
          case tsqlParser::MAXDOP:
          case tsqlParser::MAXRECURSION:
          case tsqlParser::MIN:
          case tsqlParser::MIN_ACTIVE_ROWVERSION:
          case tsqlParser::MODIFY:
          case tsqlParser::NAME:
          case tsqlParser::NOCOUNT:
          case tsqlParser::NODES:
          case tsqlParser::NOEXPAND:
          case tsqlParser::NORECOMPUTE:
          case tsqlParser::NTILE:
          case tsqlParser::NUMBER:
          case tsqlParser::OFFSET:
          case tsqlParser::ONLINE:
          case tsqlParser::ONLY:
          case tsqlParser::OPTIMISTIC:
          case tsqlParser::OPTIMIZE:
          case tsqlParser::OUT:
          case tsqlParser::OUTPUT:
          case tsqlParser::OWNER:
          case tsqlParser::PARAMETERIZATION:
          case tsqlParser::PARSE:
          case tsqlParser::PARTITION:
          case tsqlParser::PATH:
          case tsqlParser::PERCENTILE_CONT:
          case tsqlParser::POWER:
          case tsqlParser::PRECEDING:
          case tsqlParser::PRIOR:
          case tsqlParser::PRIVILEGES:
          case tsqlParser::QUERY:
          case tsqlParser::RANGE:
          case tsqlParser::RANK:
          case tsqlParser::READONLY:
          case tsqlParser::READ_ONLY:
          case tsqlParser::RECOMPILE:
          case tsqlParser::RELATIVE:
          case tsqlParser::REMOTE:
          case tsqlParser::REPEATABLE:
          case tsqlParser::ROBUST:
          case tsqlParser::ROOT:
          case tsqlParser::ROUND:
          case tsqlParser::ROW:
          case tsqlParser::ROWGUID:
          case tsqlParser::ROWS:
          case tsqlParser::ROW_NUMBER:
          case tsqlParser::SAMPLE:
          case tsqlParser::SCHEMABINDING:
          case tsqlParser::SCROLL:
          case tsqlParser::SCROLL_LOCKS:
          case tsqlParser::SELF:
          case tsqlParser::SERIALIZABLE:
          case tsqlParser::SIMPLE:
          case tsqlParser::SIN:
          case tsqlParser::SIZE:
          case tsqlParser::SNAPSHOT:
          case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
          case tsqlParser::STATIC:
          case tsqlParser::STATS_STREAM:
          case tsqlParser::STDEV:
          case tsqlParser::STDEVP:
          case tsqlParser::STRING_AGG:
          case tsqlParser::STRING_SPLIT:
          case tsqlParser::SUM:
          case tsqlParser::SQRT:
          case tsqlParser::SQUARE:
          case tsqlParser::TAN:
          case tsqlParser::TEXTIMAGE_ON:
          case tsqlParser::THROW:
          case tsqlParser::TIES:
          case tsqlParser::TIME:
          case tsqlParser::TRY:
          case tsqlParser::TYPE:
          case tsqlParser::TYPE_WARNING:
          case tsqlParser::UNBOUNDED:
          case tsqlParser::UNCOMMITTED:
          case tsqlParser::UNKNOWN:
          case tsqlParser::USING:
          case tsqlParser::VAR:
          case tsqlParser::VARP:
          case tsqlParser::VIEWS:
          case tsqlParser::VIEW_METADATA:
          case tsqlParser::WORK:
          case tsqlParser::XML:
          case tsqlParser::XMLNAMESPACES:
          case tsqlParser::ZONE:
          case tsqlParser::DOUBLE_QUOTE_ID:
          case tsqlParser::SQUARE_BRACKET_ID:
          case tsqlParser::LOCAL_ID:
          case tsqlParser::DECIMAL:
          case tsqlParser::ID:
          case tsqlParser::STRING:
          case tsqlParser::BINARY:
          case tsqlParser::FLOAT:
          case tsqlParser::REAL:
          case tsqlParser::DOLLAR:
          case tsqlParser::LR_BRACKET:
          case tsqlParser::PLUS:
          case tsqlParser::MINUS:
          case tsqlParser::BIT_NOT: {
            setState(3128);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == tsqlParser::ALL

            || _la == tsqlParser::DISTINCT) {
              setState(3127);
              all_distinct();
            }
            setState(3130);
            expression(0);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(3133);
        match(tsqlParser::RR_BRACKET);
        setState(3135);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 431, _ctx)) {
        case 1: {
          setState(3134);
          over_clause();
          break;
        }

        default:
          break;
        }
        break;
      }

      case tsqlParser::CHECKSUM_AGG: {
        enterOuterAlt(_localctx, 3);
        setState(3137);
        match(tsqlParser::CHECKSUM_AGG);
        setState(3138);
        match(tsqlParser::LR_BRACKET);
        setState(3140);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == tsqlParser::ALL

        || _la == tsqlParser::DISTINCT) {
          setState(3139);
          all_distinct();
        }
        setState(3142);
        expression(0);
        setState(3143);
        match(tsqlParser::RR_BRACKET);
        break;
      }

      case tsqlParser::GROUPING: {
        enterOuterAlt(_localctx, 4);
        setState(3145);
        match(tsqlParser::GROUPING);
        setState(3146);
        match(tsqlParser::LR_BRACKET);
        setState(3147);
        expression(0);
        setState(3148);
        match(tsqlParser::RR_BRACKET);
        break;
      }

      case tsqlParser::GROUPING_ID: {
        enterOuterAlt(_localctx, 5);
        setState(3150);
        match(tsqlParser::GROUPING_ID);
        setState(3151);
        match(tsqlParser::LR_BRACKET);
        setState(3152);
        expression_list();
        setState(3153);
        match(tsqlParser::RR_BRACKET);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- All_distinctContext ------------------------------------------------------------------

tsqlParser::All_distinctContext::All_distinctContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::All_distinctContext::ALL() {
  return getToken(tsqlParser::ALL, 0);
}

tree::TerminalNode* tsqlParser::All_distinctContext::DISTINCT() {
  return getToken(tsqlParser::DISTINCT, 0);
}


size_t tsqlParser::All_distinctContext::getRuleIndex() const {
  return tsqlParser::RuleAll_distinct;
}


std::any tsqlParser::All_distinctContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitAll_distinct(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::All_distinctContext* tsqlParser::all_distinct() {
  All_distinctContext *_localctx = _tracker.createInstance<All_distinctContext>(_ctx, getState());
  enterRule(_localctx, 328, tsqlParser::RuleAll_distinct);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3157);
    _la = _input->LA(1);
    if (!(_la == tsqlParser::ALL

    || _la == tsqlParser::DISTINCT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Over_clauseContext ------------------------------------------------------------------

tsqlParser::Over_clauseContext::Over_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Over_clauseContext::OVER() {
  return getToken(tsqlParser::OVER, 0);
}

tree::TerminalNode* tsqlParser::Over_clauseContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Over_clauseContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Over_clauseContext::PARTITION() {
  return getToken(tsqlParser::PARTITION, 0);
}

tree::TerminalNode* tsqlParser::Over_clauseContext::BY() {
  return getToken(tsqlParser::BY, 0);
}

tsqlParser::Expression_listContext* tsqlParser::Over_clauseContext::expression_list() {
  return getRuleContext<tsqlParser::Expression_listContext>(0);
}

tsqlParser::Order_by_clauseContext* tsqlParser::Over_clauseContext::order_by_clause() {
  return getRuleContext<tsqlParser::Order_by_clauseContext>(0);
}

tsqlParser::Row_or_range_clauseContext* tsqlParser::Over_clauseContext::row_or_range_clause() {
  return getRuleContext<tsqlParser::Row_or_range_clauseContext>(0);
}


size_t tsqlParser::Over_clauseContext::getRuleIndex() const {
  return tsqlParser::RuleOver_clause;
}


std::any tsqlParser::Over_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitOver_clause(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Over_clauseContext* tsqlParser::over_clause() {
  Over_clauseContext *_localctx = _tracker.createInstance<Over_clauseContext>(_ctx, getState());
  enterRule(_localctx, 330, tsqlParser::RuleOver_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3159);
    match(tsqlParser::OVER);
    setState(3160);
    match(tsqlParser::LR_BRACKET);
    setState(3164);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::PARTITION) {
      setState(3161);
      match(tsqlParser::PARTITION);
      setState(3162);
      match(tsqlParser::BY);
      setState(3163);
      expression_list();
    }
    setState(3167);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::ORDER) {
      setState(3166);
      order_by_clause();
    }
    setState(3170);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::RANGE

    || _la == tsqlParser::ROWS) {
      setState(3169);
      row_or_range_clause();
    }
    setState(3172);
    match(tsqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Row_or_range_clauseContext ------------------------------------------------------------------

tsqlParser::Row_or_range_clauseContext::Row_or_range_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::Window_frame_extentContext* tsqlParser::Row_or_range_clauseContext::window_frame_extent() {
  return getRuleContext<tsqlParser::Window_frame_extentContext>(0);
}

tree::TerminalNode* tsqlParser::Row_or_range_clauseContext::ROWS() {
  return getToken(tsqlParser::ROWS, 0);
}

tree::TerminalNode* tsqlParser::Row_or_range_clauseContext::RANGE() {
  return getToken(tsqlParser::RANGE, 0);
}


size_t tsqlParser::Row_or_range_clauseContext::getRuleIndex() const {
  return tsqlParser::RuleRow_or_range_clause;
}


std::any tsqlParser::Row_or_range_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitRow_or_range_clause(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Row_or_range_clauseContext* tsqlParser::row_or_range_clause() {
  Row_or_range_clauseContext *_localctx = _tracker.createInstance<Row_or_range_clauseContext>(_ctx, getState());
  enterRule(_localctx, 332, tsqlParser::RuleRow_or_range_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3174);
    _la = _input->LA(1);
    if (!(_la == tsqlParser::RANGE

    || _la == tsqlParser::ROWS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3175);
    window_frame_extent();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Window_frame_extentContext ------------------------------------------------------------------

tsqlParser::Window_frame_extentContext::Window_frame_extentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::Window_frame_precedingContext* tsqlParser::Window_frame_extentContext::window_frame_preceding() {
  return getRuleContext<tsqlParser::Window_frame_precedingContext>(0);
}

tree::TerminalNode* tsqlParser::Window_frame_extentContext::BETWEEN() {
  return getToken(tsqlParser::BETWEEN, 0);
}

std::vector<tsqlParser::Window_frame_boundContext *> tsqlParser::Window_frame_extentContext::window_frame_bound() {
  return getRuleContexts<tsqlParser::Window_frame_boundContext>();
}

tsqlParser::Window_frame_boundContext* tsqlParser::Window_frame_extentContext::window_frame_bound(size_t i) {
  return getRuleContext<tsqlParser::Window_frame_boundContext>(i);
}

tree::TerminalNode* tsqlParser::Window_frame_extentContext::AND() {
  return getToken(tsqlParser::AND, 0);
}


size_t tsqlParser::Window_frame_extentContext::getRuleIndex() const {
  return tsqlParser::RuleWindow_frame_extent;
}


std::any tsqlParser::Window_frame_extentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitWindow_frame_extent(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Window_frame_extentContext* tsqlParser::window_frame_extent() {
  Window_frame_extentContext *_localctx = _tracker.createInstance<Window_frame_extentContext>(_ctx, getState());
  enterRule(_localctx, 334, tsqlParser::RuleWindow_frame_extent);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3183);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::CURRENT:
      case tsqlParser::UNBOUNDED:
      case tsqlParser::DECIMAL: {
        enterOuterAlt(_localctx, 1);
        setState(3177);
        window_frame_preceding();
        break;
      }

      case tsqlParser::BETWEEN: {
        enterOuterAlt(_localctx, 2);
        setState(3178);
        match(tsqlParser::BETWEEN);
        setState(3179);
        window_frame_bound();
        setState(3180);
        match(tsqlParser::AND);
        setState(3181);
        window_frame_bound();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Window_frame_boundContext ------------------------------------------------------------------

tsqlParser::Window_frame_boundContext::Window_frame_boundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::Window_frame_precedingContext* tsqlParser::Window_frame_boundContext::window_frame_preceding() {
  return getRuleContext<tsqlParser::Window_frame_precedingContext>(0);
}

tsqlParser::Window_frame_followingContext* tsqlParser::Window_frame_boundContext::window_frame_following() {
  return getRuleContext<tsqlParser::Window_frame_followingContext>(0);
}


size_t tsqlParser::Window_frame_boundContext::getRuleIndex() const {
  return tsqlParser::RuleWindow_frame_bound;
}


std::any tsqlParser::Window_frame_boundContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitWindow_frame_bound(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Window_frame_boundContext* tsqlParser::window_frame_bound() {
  Window_frame_boundContext *_localctx = _tracker.createInstance<Window_frame_boundContext>(_ctx, getState());
  enterRule(_localctx, 336, tsqlParser::RuleWindow_frame_bound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3187);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 438, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3185);
      window_frame_preceding();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3186);
      window_frame_following();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Window_frame_precedingContext ------------------------------------------------------------------

tsqlParser::Window_frame_precedingContext::Window_frame_precedingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Window_frame_precedingContext::UNBOUNDED() {
  return getToken(tsqlParser::UNBOUNDED, 0);
}

tree::TerminalNode* tsqlParser::Window_frame_precedingContext::PRECEDING() {
  return getToken(tsqlParser::PRECEDING, 0);
}

tree::TerminalNode* tsqlParser::Window_frame_precedingContext::DECIMAL() {
  return getToken(tsqlParser::DECIMAL, 0);
}

tree::TerminalNode* tsqlParser::Window_frame_precedingContext::CURRENT() {
  return getToken(tsqlParser::CURRENT, 0);
}

tree::TerminalNode* tsqlParser::Window_frame_precedingContext::ROW() {
  return getToken(tsqlParser::ROW, 0);
}


size_t tsqlParser::Window_frame_precedingContext::getRuleIndex() const {
  return tsqlParser::RuleWindow_frame_preceding;
}


std::any tsqlParser::Window_frame_precedingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitWindow_frame_preceding(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Window_frame_precedingContext* tsqlParser::window_frame_preceding() {
  Window_frame_precedingContext *_localctx = _tracker.createInstance<Window_frame_precedingContext>(_ctx, getState());
  enterRule(_localctx, 338, tsqlParser::RuleWindow_frame_preceding);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3195);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::UNBOUNDED: {
        enterOuterAlt(_localctx, 1);
        setState(3189);
        match(tsqlParser::UNBOUNDED);
        setState(3190);
        match(tsqlParser::PRECEDING);
        break;
      }

      case tsqlParser::DECIMAL: {
        enterOuterAlt(_localctx, 2);
        setState(3191);
        match(tsqlParser::DECIMAL);
        setState(3192);
        match(tsqlParser::PRECEDING);
        break;
      }

      case tsqlParser::CURRENT: {
        enterOuterAlt(_localctx, 3);
        setState(3193);
        match(tsqlParser::CURRENT);
        setState(3194);
        match(tsqlParser::ROW);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Window_frame_followingContext ------------------------------------------------------------------

tsqlParser::Window_frame_followingContext::Window_frame_followingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Window_frame_followingContext::UNBOUNDED() {
  return getToken(tsqlParser::UNBOUNDED, 0);
}

tree::TerminalNode* tsqlParser::Window_frame_followingContext::FOLLOWING() {
  return getToken(tsqlParser::FOLLOWING, 0);
}

tree::TerminalNode* tsqlParser::Window_frame_followingContext::DECIMAL() {
  return getToken(tsqlParser::DECIMAL, 0);
}


size_t tsqlParser::Window_frame_followingContext::getRuleIndex() const {
  return tsqlParser::RuleWindow_frame_following;
}


std::any tsqlParser::Window_frame_followingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitWindow_frame_following(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Window_frame_followingContext* tsqlParser::window_frame_following() {
  Window_frame_followingContext *_localctx = _tracker.createInstance<Window_frame_followingContext>(_ctx, getState());
  enterRule(_localctx, 340, tsqlParser::RuleWindow_frame_following);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3201);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::UNBOUNDED: {
        enterOuterAlt(_localctx, 1);
        setState(3197);
        match(tsqlParser::UNBOUNDED);
        setState(3198);
        match(tsqlParser::FOLLOWING);
        break;
      }

      case tsqlParser::DECIMAL: {
        enterOuterAlt(_localctx, 2);
        setState(3199);
        match(tsqlParser::DECIMAL);
        setState(3200);
        match(tsqlParser::FOLLOWING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_database_optionContext ------------------------------------------------------------------

tsqlParser::Create_database_optionContext::Create_database_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Create_database_optionContext::FILESTREAM() {
  return getToken(tsqlParser::FILESTREAM, 0);
}

std::vector<tsqlParser::Database_filestream_optionContext *> tsqlParser::Create_database_optionContext::database_filestream_option() {
  return getRuleContexts<tsqlParser::Database_filestream_optionContext>();
}

tsqlParser::Database_filestream_optionContext* tsqlParser::Create_database_optionContext::database_filestream_option(size_t i) {
  return getRuleContext<tsqlParser::Database_filestream_optionContext>(i);
}

std::vector<tree::TerminalNode *> tsqlParser::Create_database_optionContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Create_database_optionContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}

tree::TerminalNode* tsqlParser::Create_database_optionContext::DEFAULT_LANGUAGE() {
  return getToken(tsqlParser::DEFAULT_LANGUAGE, 0);
}

tree::TerminalNode* tsqlParser::Create_database_optionContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

tsqlParser::R_idContext* tsqlParser::Create_database_optionContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tree::TerminalNode* tsqlParser::Create_database_optionContext::STRING() {
  return getToken(tsqlParser::STRING, 0);
}

tree::TerminalNode* tsqlParser::Create_database_optionContext::DEFAULT_FULLTEXT_LANGUAGE() {
  return getToken(tsqlParser::DEFAULT_FULLTEXT_LANGUAGE, 0);
}

tree::TerminalNode* tsqlParser::Create_database_optionContext::NESTED_TRIGGERS() {
  return getToken(tsqlParser::NESTED_TRIGGERS, 0);
}

tree::TerminalNode* tsqlParser::Create_database_optionContext::OFF() {
  return getToken(tsqlParser::OFF, 0);
}

tree::TerminalNode* tsqlParser::Create_database_optionContext::ON() {
  return getToken(tsqlParser::ON, 0);
}

tree::TerminalNode* tsqlParser::Create_database_optionContext::TRANSFORM_NOISE_WORDS() {
  return getToken(tsqlParser::TRANSFORM_NOISE_WORDS, 0);
}

tree::TerminalNode* tsqlParser::Create_database_optionContext::TWO_DIGIT_YEAR_CUTOFF() {
  return getToken(tsqlParser::TWO_DIGIT_YEAR_CUTOFF, 0);
}

tree::TerminalNode* tsqlParser::Create_database_optionContext::DECIMAL() {
  return getToken(tsqlParser::DECIMAL, 0);
}

tree::TerminalNode* tsqlParser::Create_database_optionContext::DB_CHAINING() {
  return getToken(tsqlParser::DB_CHAINING, 0);
}

tree::TerminalNode* tsqlParser::Create_database_optionContext::TRUSTWORTHY() {
  return getToken(tsqlParser::TRUSTWORTHY, 0);
}


size_t tsqlParser::Create_database_optionContext::getRuleIndex() const {
  return tsqlParser::RuleCreate_database_option;
}


std::any tsqlParser::Create_database_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitCreate_database_option(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Create_database_optionContext* tsqlParser::create_database_option() {
  Create_database_optionContext *_localctx = _tracker.createInstance<Create_database_optionContext>(_ctx, getState());
  enterRule(_localctx, 342, tsqlParser::RuleCreate_database_option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(3237);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::FILESTREAM: {
        enterOuterAlt(_localctx, 1);
        setState(3203);
        match(tsqlParser::FILESTREAM);

        setState(3204);
        database_filestream_option();
        setState(3209);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 441, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(3205);
            match(tsqlParser::COMMA);
            setState(3206);
            database_filestream_option(); 
          }
          setState(3211);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 441, _ctx);
        }
        break;
      }

      case tsqlParser::DEFAULT_LANGUAGE: {
        enterOuterAlt(_localctx, 2);
        setState(3212);
        match(tsqlParser::DEFAULT_LANGUAGE);
        setState(3213);
        match(tsqlParser::EQUAL);
        setState(3216);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case tsqlParser::FILLFACTOR:
          case tsqlParser::FORCESEEK:
          case tsqlParser::NEXT:
          case tsqlParser::NUMERIC:
          case tsqlParser::VALUE:
          case tsqlParser::ABSOLUTE:
          case tsqlParser::APPLY:
          case tsqlParser::AUTO:
          case tsqlParser::AVG:
          case tsqlParser::BASE64:
          case tsqlParser::CALLER:
          case tsqlParser::CAST:
          case tsqlParser::CATCH:
          case tsqlParser::CHECKSUM_AGG:
          case tsqlParser::COMMITTED:
          case tsqlParser::CONCAT:
          case tsqlParser::CONTROL:
          case tsqlParser::COOKIE:
          case tsqlParser::COUNT:
          case tsqlParser::COUNT_BIG:
          case tsqlParser::DATE:
          case tsqlParser::DELAY:
          case tsqlParser::DELETED:
          case tsqlParser::DENSE_RANK:
          case tsqlParser::DISABLE:
          case tsqlParser::DYNAMIC:
          case tsqlParser::ENCRYPTION:
          case tsqlParser::EXIST:
          case tsqlParser::EXPAND:
          case tsqlParser::FAST:
          case tsqlParser::FAST_FORWARD:
          case tsqlParser::FIRST:
          case tsqlParser::FIRST_VALUE:
          case tsqlParser::FOLLOWING:
          case tsqlParser::FORCE:
          case tsqlParser::FORCED:
          case tsqlParser::FORWARD_ONLY:
          case tsqlParser::FULLSCAN:
          case tsqlParser::GLOBAL:
          case tsqlParser::GROUPING:
          case tsqlParser::GROUPING_ID:
          case tsqlParser::HASH:
          case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
          case tsqlParser::IMPERSONATE:
          case tsqlParser::INSENSITIVE:
          case tsqlParser::INSERTED:
          case tsqlParser::ISOLATION:
          case tsqlParser::IO:
          case tsqlParser::KEEP:
          case tsqlParser::KEEPFIXED:
          case tsqlParser::KEYSET:
          case tsqlParser::LAG:
          case tsqlParser::LAST:
          case tsqlParser::LAST_VALUE:
          case tsqlParser::LEAD:
          case tsqlParser::LEVEL:
          case tsqlParser::LOCAL:
          case tsqlParser::LOCK_ESCALATION:
          case tsqlParser::LOGIN:
          case tsqlParser::LOOP:
          case tsqlParser::MARK:
          case tsqlParser::MAX:
          case tsqlParser::MAXDOP:
          case tsqlParser::MAXRECURSION:
          case tsqlParser::MIN:
          case tsqlParser::MODIFY:
          case tsqlParser::NAME:
          case tsqlParser::NOCOUNT:
          case tsqlParser::NODES:
          case tsqlParser::NOEXPAND:
          case tsqlParser::NORECOMPUTE:
          case tsqlParser::NTILE:
          case tsqlParser::NUMBER:
          case tsqlParser::OFFSET:
          case tsqlParser::ONLINE:
          case tsqlParser::ONLY:
          case tsqlParser::OPTIMISTIC:
          case tsqlParser::OPTIMIZE:
          case tsqlParser::OUT:
          case tsqlParser::OUTPUT:
          case tsqlParser::OWNER:
          case tsqlParser::PARAMETERIZATION:
          case tsqlParser::PARTITION:
          case tsqlParser::PATH:
          case tsqlParser::PRECEDING:
          case tsqlParser::PRIOR:
          case tsqlParser::PRIVILEGES:
          case tsqlParser::QUERY:
          case tsqlParser::RANGE:
          case tsqlParser::RANK:
          case tsqlParser::READONLY:
          case tsqlParser::READ_ONLY:
          case tsqlParser::RECOMPILE:
          case tsqlParser::RELATIVE:
          case tsqlParser::REMOTE:
          case tsqlParser::REPEATABLE:
          case tsqlParser::ROBUST:
          case tsqlParser::ROOT:
          case tsqlParser::ROW:
          case tsqlParser::ROWGUID:
          case tsqlParser::ROWS:
          case tsqlParser::ROW_NUMBER:
          case tsqlParser::SAMPLE:
          case tsqlParser::SCHEMABINDING:
          case tsqlParser::SCROLL:
          case tsqlParser::SCROLL_LOCKS:
          case tsqlParser::SELF:
          case tsqlParser::SERIALIZABLE:
          case tsqlParser::SIMPLE:
          case tsqlParser::SIZE:
          case tsqlParser::SNAPSHOT:
          case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
          case tsqlParser::STATIC:
          case tsqlParser::STATS_STREAM:
          case tsqlParser::STDEV:
          case tsqlParser::STDEVP:
          case tsqlParser::SUM:
          case tsqlParser::TEXTIMAGE_ON:
          case tsqlParser::THROW:
          case tsqlParser::TIES:
          case tsqlParser::TIME:
          case tsqlParser::TRY:
          case tsqlParser::TYPE:
          case tsqlParser::TYPE_WARNING:
          case tsqlParser::UNBOUNDED:
          case tsqlParser::UNCOMMITTED:
          case tsqlParser::UNKNOWN:
          case tsqlParser::USING:
          case tsqlParser::VAR:
          case tsqlParser::VARP:
          case tsqlParser::VIEWS:
          case tsqlParser::VIEW_METADATA:
          case tsqlParser::WORK:
          case tsqlParser::XML:
          case tsqlParser::XMLNAMESPACES:
          case tsqlParser::ZONE:
          case tsqlParser::DOUBLE_QUOTE_ID:
          case tsqlParser::SQUARE_BRACKET_ID:
          case tsqlParser::ID: {
            setState(3214);
            r_id();
            break;
          }

          case tsqlParser::STRING: {
            setState(3215);
            match(tsqlParser::STRING);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case tsqlParser::DEFAULT_FULLTEXT_LANGUAGE: {
        enterOuterAlt(_localctx, 3);
        setState(3218);
        match(tsqlParser::DEFAULT_FULLTEXT_LANGUAGE);
        setState(3219);
        match(tsqlParser::EQUAL);
        setState(3222);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case tsqlParser::FILLFACTOR:
          case tsqlParser::FORCESEEK:
          case tsqlParser::NEXT:
          case tsqlParser::NUMERIC:
          case tsqlParser::VALUE:
          case tsqlParser::ABSOLUTE:
          case tsqlParser::APPLY:
          case tsqlParser::AUTO:
          case tsqlParser::AVG:
          case tsqlParser::BASE64:
          case tsqlParser::CALLER:
          case tsqlParser::CAST:
          case tsqlParser::CATCH:
          case tsqlParser::CHECKSUM_AGG:
          case tsqlParser::COMMITTED:
          case tsqlParser::CONCAT:
          case tsqlParser::CONTROL:
          case tsqlParser::COOKIE:
          case tsqlParser::COUNT:
          case tsqlParser::COUNT_BIG:
          case tsqlParser::DATE:
          case tsqlParser::DELAY:
          case tsqlParser::DELETED:
          case tsqlParser::DENSE_RANK:
          case tsqlParser::DISABLE:
          case tsqlParser::DYNAMIC:
          case tsqlParser::ENCRYPTION:
          case tsqlParser::EXIST:
          case tsqlParser::EXPAND:
          case tsqlParser::FAST:
          case tsqlParser::FAST_FORWARD:
          case tsqlParser::FIRST:
          case tsqlParser::FIRST_VALUE:
          case tsqlParser::FOLLOWING:
          case tsqlParser::FORCE:
          case tsqlParser::FORCED:
          case tsqlParser::FORWARD_ONLY:
          case tsqlParser::FULLSCAN:
          case tsqlParser::GLOBAL:
          case tsqlParser::GROUPING:
          case tsqlParser::GROUPING_ID:
          case tsqlParser::HASH:
          case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
          case tsqlParser::IMPERSONATE:
          case tsqlParser::INSENSITIVE:
          case tsqlParser::INSERTED:
          case tsqlParser::ISOLATION:
          case tsqlParser::IO:
          case tsqlParser::KEEP:
          case tsqlParser::KEEPFIXED:
          case tsqlParser::KEYSET:
          case tsqlParser::LAG:
          case tsqlParser::LAST:
          case tsqlParser::LAST_VALUE:
          case tsqlParser::LEAD:
          case tsqlParser::LEVEL:
          case tsqlParser::LOCAL:
          case tsqlParser::LOCK_ESCALATION:
          case tsqlParser::LOGIN:
          case tsqlParser::LOOP:
          case tsqlParser::MARK:
          case tsqlParser::MAX:
          case tsqlParser::MAXDOP:
          case tsqlParser::MAXRECURSION:
          case tsqlParser::MIN:
          case tsqlParser::MODIFY:
          case tsqlParser::NAME:
          case tsqlParser::NOCOUNT:
          case tsqlParser::NODES:
          case tsqlParser::NOEXPAND:
          case tsqlParser::NORECOMPUTE:
          case tsqlParser::NTILE:
          case tsqlParser::NUMBER:
          case tsqlParser::OFFSET:
          case tsqlParser::ONLINE:
          case tsqlParser::ONLY:
          case tsqlParser::OPTIMISTIC:
          case tsqlParser::OPTIMIZE:
          case tsqlParser::OUT:
          case tsqlParser::OUTPUT:
          case tsqlParser::OWNER:
          case tsqlParser::PARAMETERIZATION:
          case tsqlParser::PARTITION:
          case tsqlParser::PATH:
          case tsqlParser::PRECEDING:
          case tsqlParser::PRIOR:
          case tsqlParser::PRIVILEGES:
          case tsqlParser::QUERY:
          case tsqlParser::RANGE:
          case tsqlParser::RANK:
          case tsqlParser::READONLY:
          case tsqlParser::READ_ONLY:
          case tsqlParser::RECOMPILE:
          case tsqlParser::RELATIVE:
          case tsqlParser::REMOTE:
          case tsqlParser::REPEATABLE:
          case tsqlParser::ROBUST:
          case tsqlParser::ROOT:
          case tsqlParser::ROW:
          case tsqlParser::ROWGUID:
          case tsqlParser::ROWS:
          case tsqlParser::ROW_NUMBER:
          case tsqlParser::SAMPLE:
          case tsqlParser::SCHEMABINDING:
          case tsqlParser::SCROLL:
          case tsqlParser::SCROLL_LOCKS:
          case tsqlParser::SELF:
          case tsqlParser::SERIALIZABLE:
          case tsqlParser::SIMPLE:
          case tsqlParser::SIZE:
          case tsqlParser::SNAPSHOT:
          case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
          case tsqlParser::STATIC:
          case tsqlParser::STATS_STREAM:
          case tsqlParser::STDEV:
          case tsqlParser::STDEVP:
          case tsqlParser::SUM:
          case tsqlParser::TEXTIMAGE_ON:
          case tsqlParser::THROW:
          case tsqlParser::TIES:
          case tsqlParser::TIME:
          case tsqlParser::TRY:
          case tsqlParser::TYPE:
          case tsqlParser::TYPE_WARNING:
          case tsqlParser::UNBOUNDED:
          case tsqlParser::UNCOMMITTED:
          case tsqlParser::UNKNOWN:
          case tsqlParser::USING:
          case tsqlParser::VAR:
          case tsqlParser::VARP:
          case tsqlParser::VIEWS:
          case tsqlParser::VIEW_METADATA:
          case tsqlParser::WORK:
          case tsqlParser::XML:
          case tsqlParser::XMLNAMESPACES:
          case tsqlParser::ZONE:
          case tsqlParser::DOUBLE_QUOTE_ID:
          case tsqlParser::SQUARE_BRACKET_ID:
          case tsqlParser::ID: {
            setState(3220);
            r_id();
            break;
          }

          case tsqlParser::STRING: {
            setState(3221);
            match(tsqlParser::STRING);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case tsqlParser::NESTED_TRIGGERS: {
        enterOuterAlt(_localctx, 4);
        setState(3224);
        match(tsqlParser::NESTED_TRIGGERS);
        setState(3225);
        match(tsqlParser::EQUAL);
        setState(3226);
        _la = _input->LA(1);
        if (!(_la == tsqlParser::OFF

        || _la == tsqlParser::ON)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case tsqlParser::TRANSFORM_NOISE_WORDS: {
        enterOuterAlt(_localctx, 5);
        setState(3227);
        match(tsqlParser::TRANSFORM_NOISE_WORDS);
        setState(3228);
        match(tsqlParser::EQUAL);
        setState(3229);
        _la = _input->LA(1);
        if (!(_la == tsqlParser::OFF

        || _la == tsqlParser::ON)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case tsqlParser::TWO_DIGIT_YEAR_CUTOFF: {
        enterOuterAlt(_localctx, 6);
        setState(3230);
        match(tsqlParser::TWO_DIGIT_YEAR_CUTOFF);
        setState(3231);
        match(tsqlParser::EQUAL);
        setState(3232);
        match(tsqlParser::DECIMAL);
        break;
      }

      case tsqlParser::DB_CHAINING: {
        enterOuterAlt(_localctx, 7);
        setState(3233);
        match(tsqlParser::DB_CHAINING);
        setState(3234);
        _la = _input->LA(1);
        if (!(_la == tsqlParser::OFF

        || _la == tsqlParser::ON)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case tsqlParser::TRUSTWORTHY: {
        enterOuterAlt(_localctx, 8);
        setState(3235);
        match(tsqlParser::TRUSTWORTHY);
        setState(3236);
        _la = _input->LA(1);
        if (!(_la == tsqlParser::OFF

        || _la == tsqlParser::ON)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Database_filestream_optionContext ------------------------------------------------------------------

tsqlParser::Database_filestream_optionContext::Database_filestream_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Database_filestream_optionContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Database_filestream_optionContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Database_filestream_optionContext::NON_TRANSACTED_ACCESS() {
  return getToken(tsqlParser::NON_TRANSACTED_ACCESS, 0);
}

tree::TerminalNode* tsqlParser::Database_filestream_optionContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

tree::TerminalNode* tsqlParser::Database_filestream_optionContext::DIRECTORY_NAME() {
  return getToken(tsqlParser::DIRECTORY_NAME, 0);
}

tree::TerminalNode* tsqlParser::Database_filestream_optionContext::STRING() {
  return getToken(tsqlParser::STRING, 0);
}

tree::TerminalNode* tsqlParser::Database_filestream_optionContext::OFF() {
  return getToken(tsqlParser::OFF, 0);
}

tree::TerminalNode* tsqlParser::Database_filestream_optionContext::READ_ONLY() {
  return getToken(tsqlParser::READ_ONLY, 0);
}

tree::TerminalNode* tsqlParser::Database_filestream_optionContext::FULL() {
  return getToken(tsqlParser::FULL, 0);
}


size_t tsqlParser::Database_filestream_optionContext::getRuleIndex() const {
  return tsqlParser::RuleDatabase_filestream_option;
}


std::any tsqlParser::Database_filestream_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDatabase_filestream_option(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Database_filestream_optionContext* tsqlParser::database_filestream_option() {
  Database_filestream_optionContext *_localctx = _tracker.createInstance<Database_filestream_optionContext>(_ctx, getState());
  enterRule(_localctx, 344, tsqlParser::RuleDatabase_filestream_option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3239);
    match(tsqlParser::LR_BRACKET);
    setState(3246);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::NON_TRANSACTED_ACCESS: {
        setState(3240);
        match(tsqlParser::NON_TRANSACTED_ACCESS);
        setState(3241);
        match(tsqlParser::EQUAL);
        setState(3242);
        _la = _input->LA(1);
        if (!(_la == tsqlParser::FULL

        || _la == tsqlParser::OFF || _la == tsqlParser::READ_ONLY)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case tsqlParser::DIRECTORY_NAME: {
        setState(3243);
        match(tsqlParser::DIRECTORY_NAME);
        setState(3244);
        match(tsqlParser::EQUAL);
        setState(3245);
        match(tsqlParser::STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3248);
    match(tsqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Database_file_specContext ------------------------------------------------------------------

tsqlParser::Database_file_specContext::Database_file_specContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::File_groupContext* tsqlParser::Database_file_specContext::file_group() {
  return getRuleContext<tsqlParser::File_groupContext>(0);
}

tsqlParser::File_specContext* tsqlParser::Database_file_specContext::file_spec() {
  return getRuleContext<tsqlParser::File_specContext>(0);
}


size_t tsqlParser::Database_file_specContext::getRuleIndex() const {
  return tsqlParser::RuleDatabase_file_spec;
}


std::any tsqlParser::Database_file_specContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDatabase_file_spec(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Database_file_specContext* tsqlParser::database_file_spec() {
  Database_file_specContext *_localctx = _tracker.createInstance<Database_file_specContext>(_ctx, getState());
  enterRule(_localctx, 346, tsqlParser::RuleDatabase_file_spec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3252);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::FILEGROUP: {
        enterOuterAlt(_localctx, 1);
        setState(3250);
        file_group();
        break;
      }

      case tsqlParser::LR_BRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(3251);
        file_spec();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- File_groupContext ------------------------------------------------------------------

tsqlParser::File_groupContext::File_groupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::File_groupContext::FILEGROUP() {
  return getToken(tsqlParser::FILEGROUP, 0);
}

tsqlParser::R_idContext* tsqlParser::File_groupContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

std::vector<tsqlParser::File_specContext *> tsqlParser::File_groupContext::file_spec() {
  return getRuleContexts<tsqlParser::File_specContext>();
}

tsqlParser::File_specContext* tsqlParser::File_groupContext::file_spec(size_t i) {
  return getRuleContext<tsqlParser::File_specContext>(i);
}

std::vector<tree::TerminalNode *> tsqlParser::File_groupContext::CONTAINS() {
  return getTokens(tsqlParser::CONTAINS);
}

tree::TerminalNode* tsqlParser::File_groupContext::CONTAINS(size_t i) {
  return getToken(tsqlParser::CONTAINS, i);
}

tree::TerminalNode* tsqlParser::File_groupContext::FILESTREAM() {
  return getToken(tsqlParser::FILESTREAM, 0);
}

tree::TerminalNode* tsqlParser::File_groupContext::DEFAULT() {
  return getToken(tsqlParser::DEFAULT, 0);
}

tree::TerminalNode* tsqlParser::File_groupContext::MEMORY_OPTIMIZED_DATA() {
  return getToken(tsqlParser::MEMORY_OPTIMIZED_DATA, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::File_groupContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::File_groupContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::File_groupContext::getRuleIndex() const {
  return tsqlParser::RuleFile_group;
}


std::any tsqlParser::File_groupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitFile_group(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::File_groupContext* tsqlParser::file_group() {
  File_groupContext *_localctx = _tracker.createInstance<File_groupContext>(_ctx, getState());
  enterRule(_localctx, 348, tsqlParser::RuleFile_group);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3254);
    match(tsqlParser::FILEGROUP);
    setState(3255);
    r_id();
    setState(3258);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 447, _ctx)) {
    case 1: {
      setState(3256);
      match(tsqlParser::CONTAINS);
      setState(3257);
      match(tsqlParser::FILESTREAM);
      break;
    }

    default:
      break;
    }
    setState(3261);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::DEFAULT) {
      setState(3260);
      match(tsqlParser::DEFAULT);
    }
    setState(3265);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::CONTAINS) {
      setState(3263);
      match(tsqlParser::CONTAINS);
      setState(3264);
      match(tsqlParser::MEMORY_OPTIMIZED_DATA);
    }
    setState(3267);
    file_spec();
    setState(3272);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 450, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3268);
        match(tsqlParser::COMMA);
        setState(3269);
        file_spec(); 
      }
      setState(3274);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 450, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- File_specContext ------------------------------------------------------------------

tsqlParser::File_specContext::File_specContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::File_specContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::File_specContext::NAME() {
  return getToken(tsqlParser::NAME, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::File_specContext::EQUAL() {
  return getTokens(tsqlParser::EQUAL);
}

tree::TerminalNode* tsqlParser::File_specContext::EQUAL(size_t i) {
  return getToken(tsqlParser::EQUAL, i);
}

tree::TerminalNode* tsqlParser::File_specContext::FILENAME() {
  return getToken(tsqlParser::FILENAME, 0);
}

tree::TerminalNode* tsqlParser::File_specContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::File_specContext::STRING() {
  return getTokens(tsqlParser::STRING);
}

tree::TerminalNode* tsqlParser::File_specContext::STRING(size_t i) {
  return getToken(tsqlParser::STRING, i);
}

tsqlParser::R_idContext* tsqlParser::File_specContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

std::vector<tree::TerminalNode *> tsqlParser::File_specContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::File_specContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}

tree::TerminalNode* tsqlParser::File_specContext::SIZE() {
  return getToken(tsqlParser::SIZE, 0);
}

std::vector<tsqlParser::File_sizeContext *> tsqlParser::File_specContext::file_size() {
  return getRuleContexts<tsqlParser::File_sizeContext>();
}

tsqlParser::File_sizeContext* tsqlParser::File_specContext::file_size(size_t i) {
  return getRuleContext<tsqlParser::File_sizeContext>(i);
}

tree::TerminalNode* tsqlParser::File_specContext::MAXSIZE() {
  return getToken(tsqlParser::MAXSIZE, 0);
}

tree::TerminalNode* tsqlParser::File_specContext::FILEGROWTH() {
  return getToken(tsqlParser::FILEGROWTH, 0);
}

tree::TerminalNode* tsqlParser::File_specContext::UNLIMITED() {
  return getToken(tsqlParser::UNLIMITED, 0);
}


size_t tsqlParser::File_specContext::getRuleIndex() const {
  return tsqlParser::RuleFile_spec;
}


std::any tsqlParser::File_specContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitFile_spec(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::File_specContext* tsqlParser::file_spec() {
  File_specContext *_localctx = _tracker.createInstance<File_specContext>(_ctx, getState());
  enterRule(_localctx, 350, tsqlParser::RuleFile_spec);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3275);
    match(tsqlParser::LR_BRACKET);
    setState(3276);
    match(tsqlParser::NAME);
    setState(3277);
    match(tsqlParser::EQUAL);
    setState(3280);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::FILLFACTOR:
      case tsqlParser::FORCESEEK:
      case tsqlParser::NEXT:
      case tsqlParser::NUMERIC:
      case tsqlParser::VALUE:
      case tsqlParser::ABSOLUTE:
      case tsqlParser::APPLY:
      case tsqlParser::AUTO:
      case tsqlParser::AVG:
      case tsqlParser::BASE64:
      case tsqlParser::CALLER:
      case tsqlParser::CAST:
      case tsqlParser::CATCH:
      case tsqlParser::CHECKSUM_AGG:
      case tsqlParser::COMMITTED:
      case tsqlParser::CONCAT:
      case tsqlParser::CONTROL:
      case tsqlParser::COOKIE:
      case tsqlParser::COUNT:
      case tsqlParser::COUNT_BIG:
      case tsqlParser::DATE:
      case tsqlParser::DELAY:
      case tsqlParser::DELETED:
      case tsqlParser::DENSE_RANK:
      case tsqlParser::DISABLE:
      case tsqlParser::DYNAMIC:
      case tsqlParser::ENCRYPTION:
      case tsqlParser::EXIST:
      case tsqlParser::EXPAND:
      case tsqlParser::FAST:
      case tsqlParser::FAST_FORWARD:
      case tsqlParser::FIRST:
      case tsqlParser::FIRST_VALUE:
      case tsqlParser::FOLLOWING:
      case tsqlParser::FORCE:
      case tsqlParser::FORCED:
      case tsqlParser::FORWARD_ONLY:
      case tsqlParser::FULLSCAN:
      case tsqlParser::GLOBAL:
      case tsqlParser::GROUPING:
      case tsqlParser::GROUPING_ID:
      case tsqlParser::HASH:
      case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
      case tsqlParser::IMPERSONATE:
      case tsqlParser::INSENSITIVE:
      case tsqlParser::INSERTED:
      case tsqlParser::ISOLATION:
      case tsqlParser::IO:
      case tsqlParser::KEEP:
      case tsqlParser::KEEPFIXED:
      case tsqlParser::KEYSET:
      case tsqlParser::LAG:
      case tsqlParser::LAST:
      case tsqlParser::LAST_VALUE:
      case tsqlParser::LEAD:
      case tsqlParser::LEVEL:
      case tsqlParser::LOCAL:
      case tsqlParser::LOCK_ESCALATION:
      case tsqlParser::LOGIN:
      case tsqlParser::LOOP:
      case tsqlParser::MARK:
      case tsqlParser::MAX:
      case tsqlParser::MAXDOP:
      case tsqlParser::MAXRECURSION:
      case tsqlParser::MIN:
      case tsqlParser::MODIFY:
      case tsqlParser::NAME:
      case tsqlParser::NOCOUNT:
      case tsqlParser::NODES:
      case tsqlParser::NOEXPAND:
      case tsqlParser::NORECOMPUTE:
      case tsqlParser::NTILE:
      case tsqlParser::NUMBER:
      case tsqlParser::OFFSET:
      case tsqlParser::ONLINE:
      case tsqlParser::ONLY:
      case tsqlParser::OPTIMISTIC:
      case tsqlParser::OPTIMIZE:
      case tsqlParser::OUT:
      case tsqlParser::OUTPUT:
      case tsqlParser::OWNER:
      case tsqlParser::PARAMETERIZATION:
      case tsqlParser::PARTITION:
      case tsqlParser::PATH:
      case tsqlParser::PRECEDING:
      case tsqlParser::PRIOR:
      case tsqlParser::PRIVILEGES:
      case tsqlParser::QUERY:
      case tsqlParser::RANGE:
      case tsqlParser::RANK:
      case tsqlParser::READONLY:
      case tsqlParser::READ_ONLY:
      case tsqlParser::RECOMPILE:
      case tsqlParser::RELATIVE:
      case tsqlParser::REMOTE:
      case tsqlParser::REPEATABLE:
      case tsqlParser::ROBUST:
      case tsqlParser::ROOT:
      case tsqlParser::ROW:
      case tsqlParser::ROWGUID:
      case tsqlParser::ROWS:
      case tsqlParser::ROW_NUMBER:
      case tsqlParser::SAMPLE:
      case tsqlParser::SCHEMABINDING:
      case tsqlParser::SCROLL:
      case tsqlParser::SCROLL_LOCKS:
      case tsqlParser::SELF:
      case tsqlParser::SERIALIZABLE:
      case tsqlParser::SIMPLE:
      case tsqlParser::SIZE:
      case tsqlParser::SNAPSHOT:
      case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
      case tsqlParser::STATIC:
      case tsqlParser::STATS_STREAM:
      case tsqlParser::STDEV:
      case tsqlParser::STDEVP:
      case tsqlParser::SUM:
      case tsqlParser::TEXTIMAGE_ON:
      case tsqlParser::THROW:
      case tsqlParser::TIES:
      case tsqlParser::TIME:
      case tsqlParser::TRY:
      case tsqlParser::TYPE:
      case tsqlParser::TYPE_WARNING:
      case tsqlParser::UNBOUNDED:
      case tsqlParser::UNCOMMITTED:
      case tsqlParser::UNKNOWN:
      case tsqlParser::USING:
      case tsqlParser::VAR:
      case tsqlParser::VARP:
      case tsqlParser::VIEWS:
      case tsqlParser::VIEW_METADATA:
      case tsqlParser::WORK:
      case tsqlParser::XML:
      case tsqlParser::XMLNAMESPACES:
      case tsqlParser::ZONE:
      case tsqlParser::DOUBLE_QUOTE_ID:
      case tsqlParser::SQUARE_BRACKET_ID:
      case tsqlParser::ID: {
        setState(3278);
        r_id();
        break;
      }

      case tsqlParser::STRING: {
        setState(3279);
        match(tsqlParser::STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3283);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::COMMA) {
      setState(3282);
      match(tsqlParser::COMMA);
    }
    setState(3285);
    match(tsqlParser::FILENAME);
    setState(3286);
    match(tsqlParser::EQUAL);
    setState(3287);
    antlrcpp::downCast<File_specContext *>(_localctx)->r_file = match(tsqlParser::STRING);
    setState(3289);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::COMMA) {
      setState(3288);
      match(tsqlParser::COMMA);
    }
    setState(3297);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::SIZE) {
      setState(3291);
      match(tsqlParser::SIZE);
      setState(3292);
      match(tsqlParser::EQUAL);
      setState(3293);
      file_size();
      setState(3295);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::COMMA) {
        setState(3294);
        match(tsqlParser::COMMA);
      }
    }
    setState(3308);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::MAXSIZE) {
      setState(3299);
      match(tsqlParser::MAXSIZE);
      setState(3300);
      match(tsqlParser::EQUAL);
      setState(3303);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case tsqlParser::DECIMAL: {
          setState(3301);
          file_size();
          break;
        }

        case tsqlParser::UNLIMITED: {
          setState(3302);
          match(tsqlParser::UNLIMITED);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(3306);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::COMMA) {
        setState(3305);
        match(tsqlParser::COMMA);
      }
    }
    setState(3316);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::FILEGROWTH) {
      setState(3310);
      match(tsqlParser::FILEGROWTH);
      setState(3311);
      match(tsqlParser::EQUAL);
      setState(3312);
      file_size();
      setState(3314);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::COMMA) {
        setState(3313);
        match(tsqlParser::COMMA);
      }
    }
    setState(3318);
    match(tsqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Full_table_nameContext ------------------------------------------------------------------

tsqlParser::Full_table_nameContext::Full_table_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tsqlParser::R_idContext *> tsqlParser::Full_table_nameContext::r_id() {
  return getRuleContexts<tsqlParser::R_idContext>();
}

tsqlParser::R_idContext* tsqlParser::Full_table_nameContext::r_id(size_t i) {
  return getRuleContext<tsqlParser::R_idContext>(i);
}

std::vector<tree::TerminalNode *> tsqlParser::Full_table_nameContext::DOT() {
  return getTokens(tsqlParser::DOT);
}

tree::TerminalNode* tsqlParser::Full_table_nameContext::DOT(size_t i) {
  return getToken(tsqlParser::DOT, i);
}


size_t tsqlParser::Full_table_nameContext::getRuleIndex() const {
  return tsqlParser::RuleFull_table_name;
}


std::any tsqlParser::Full_table_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitFull_table_name(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Full_table_nameContext* tsqlParser::full_table_name() {
  Full_table_nameContext *_localctx = _tracker.createInstance<Full_table_nameContext>(_ctx, getState());
  enterRule(_localctx, 352, tsqlParser::RuleFull_table_name);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3337);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 462, _ctx)) {
    case 1: {
      setState(3320);
      antlrcpp::downCast<Full_table_nameContext *>(_localctx)->server = r_id();
      setState(3321);
      match(tsqlParser::DOT);
      setState(3322);
      antlrcpp::downCast<Full_table_nameContext *>(_localctx)->database = r_id();
      setState(3323);
      match(tsqlParser::DOT);
      setState(3324);
      antlrcpp::downCast<Full_table_nameContext *>(_localctx)->schema = r_id();
      setState(3325);
      match(tsqlParser::DOT);
      break;
    }

    case 2: {
      setState(3327);
      antlrcpp::downCast<Full_table_nameContext *>(_localctx)->database = r_id();
      setState(3328);
      match(tsqlParser::DOT);
      setState(3330);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la - 71) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 71)) & 17729624997893) != 0 || (((_la - 196) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 196)) & 9969332866253825) != 0 || (((_la - 261) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 261)) & -148821964101331) != 0 || (((_la - 328) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 328)) & -47521180986790319) != 0 || (((_la - 393) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 393)) & 171699173404606099) != 0) {
        setState(3329);
        antlrcpp::downCast<Full_table_nameContext *>(_localctx)->schema = r_id();
      }
      setState(3332);
      match(tsqlParser::DOT);
      break;
    }

    case 3: {
      setState(3334);
      antlrcpp::downCast<Full_table_nameContext *>(_localctx)->schema = r_id();
      setState(3335);
      match(tsqlParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(3339);
    antlrcpp::downCast<Full_table_nameContext *>(_localctx)->table = r_id();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_nameContext ------------------------------------------------------------------

tsqlParser::Simple_nameContext::Simple_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tsqlParser::R_idContext *> tsqlParser::Simple_nameContext::r_id() {
  return getRuleContexts<tsqlParser::R_idContext>();
}

tsqlParser::R_idContext* tsqlParser::Simple_nameContext::r_id(size_t i) {
  return getRuleContext<tsqlParser::R_idContext>(i);
}

tree::TerminalNode* tsqlParser::Simple_nameContext::DOT() {
  return getToken(tsqlParser::DOT, 0);
}


size_t tsqlParser::Simple_nameContext::getRuleIndex() const {
  return tsqlParser::RuleSimple_name;
}


std::any tsqlParser::Simple_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitSimple_name(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Simple_nameContext* tsqlParser::simple_name() {
  Simple_nameContext *_localctx = _tracker.createInstance<Simple_nameContext>(_ctx, getState());
  enterRule(_localctx, 354, tsqlParser::RuleSimple_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3344);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 463, _ctx)) {
    case 1: {
      setState(3341);
      antlrcpp::downCast<Simple_nameContext *>(_localctx)->schema = r_id();
      setState(3342);
      match(tsqlParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(3346);
    antlrcpp::downCast<Simple_nameContext *>(_localctx)->name = r_id();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_proc_nameContext ------------------------------------------------------------------

tsqlParser::Func_proc_nameContext::Func_proc_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tsqlParser::R_idContext *> tsqlParser::Func_proc_nameContext::r_id() {
  return getRuleContexts<tsqlParser::R_idContext>();
}

tsqlParser::R_idContext* tsqlParser::Func_proc_nameContext::r_id(size_t i) {
  return getRuleContext<tsqlParser::R_idContext>(i);
}

std::vector<tree::TerminalNode *> tsqlParser::Func_proc_nameContext::DOT() {
  return getTokens(tsqlParser::DOT);
}

tree::TerminalNode* tsqlParser::Func_proc_nameContext::DOT(size_t i) {
  return getToken(tsqlParser::DOT, i);
}


size_t tsqlParser::Func_proc_nameContext::getRuleIndex() const {
  return tsqlParser::RuleFunc_proc_name;
}


std::any tsqlParser::Func_proc_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitFunc_proc_name(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Func_proc_nameContext* tsqlParser::func_proc_name() {
  Func_proc_nameContext *_localctx = _tracker.createInstance<Func_proc_nameContext>(_ctx, getState());
  enterRule(_localctx, 356, tsqlParser::RuleFunc_proc_name);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3358);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 465, _ctx)) {
    case 1: {
      setState(3348);
      antlrcpp::downCast<Func_proc_nameContext *>(_localctx)->database = r_id();
      setState(3349);
      match(tsqlParser::DOT);
      setState(3351);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la - 71) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 71)) & 17729624997893) != 0 || (((_la - 196) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 196)) & 9969332866253825) != 0 || (((_la - 261) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 261)) & -148821964101331) != 0 || (((_la - 328) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 328)) & -47521180986790319) != 0 || (((_la - 393) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 393)) & 171699173404606099) != 0) {
        setState(3350);
        antlrcpp::downCast<Func_proc_nameContext *>(_localctx)->schema = r_id();
      }
      setState(3353);
      match(tsqlParser::DOT);
      break;
    }

    case 2: {
      setState(3355);
      antlrcpp::downCast<Func_proc_nameContext *>(_localctx)->schema = r_id();
      setState(3356);
      match(tsqlParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(3360);
    antlrcpp::downCast<Func_proc_nameContext *>(_localctx)->procedure = r_id();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Ddl_objectContext ------------------------------------------------------------------

tsqlParser::Ddl_objectContext::Ddl_objectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::Full_table_nameContext* tsqlParser::Ddl_objectContext::full_table_name() {
  return getRuleContext<tsqlParser::Full_table_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Ddl_objectContext::LOCAL_ID() {
  return getToken(tsqlParser::LOCAL_ID, 0);
}


size_t tsqlParser::Ddl_objectContext::getRuleIndex() const {
  return tsqlParser::RuleDdl_object;
}


std::any tsqlParser::Ddl_objectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDdl_object(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Ddl_objectContext* tsqlParser::ddl_object() {
  Ddl_objectContext *_localctx = _tracker.createInstance<Ddl_objectContext>(_ctx, getState());
  enterRule(_localctx, 358, tsqlParser::RuleDdl_object);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3364);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::FILLFACTOR:
      case tsqlParser::FORCESEEK:
      case tsqlParser::NEXT:
      case tsqlParser::NUMERIC:
      case tsqlParser::VALUE:
      case tsqlParser::ABSOLUTE:
      case tsqlParser::APPLY:
      case tsqlParser::AUTO:
      case tsqlParser::AVG:
      case tsqlParser::BASE64:
      case tsqlParser::CALLER:
      case tsqlParser::CAST:
      case tsqlParser::CATCH:
      case tsqlParser::CHECKSUM_AGG:
      case tsqlParser::COMMITTED:
      case tsqlParser::CONCAT:
      case tsqlParser::CONTROL:
      case tsqlParser::COOKIE:
      case tsqlParser::COUNT:
      case tsqlParser::COUNT_BIG:
      case tsqlParser::DATE:
      case tsqlParser::DELAY:
      case tsqlParser::DELETED:
      case tsqlParser::DENSE_RANK:
      case tsqlParser::DISABLE:
      case tsqlParser::DYNAMIC:
      case tsqlParser::ENCRYPTION:
      case tsqlParser::EXIST:
      case tsqlParser::EXPAND:
      case tsqlParser::FAST:
      case tsqlParser::FAST_FORWARD:
      case tsqlParser::FIRST:
      case tsqlParser::FIRST_VALUE:
      case tsqlParser::FOLLOWING:
      case tsqlParser::FORCE:
      case tsqlParser::FORCED:
      case tsqlParser::FORWARD_ONLY:
      case tsqlParser::FULLSCAN:
      case tsqlParser::GLOBAL:
      case tsqlParser::GROUPING:
      case tsqlParser::GROUPING_ID:
      case tsqlParser::HASH:
      case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
      case tsqlParser::IMPERSONATE:
      case tsqlParser::INSENSITIVE:
      case tsqlParser::INSERTED:
      case tsqlParser::ISOLATION:
      case tsqlParser::IO:
      case tsqlParser::KEEP:
      case tsqlParser::KEEPFIXED:
      case tsqlParser::KEYSET:
      case tsqlParser::LAG:
      case tsqlParser::LAST:
      case tsqlParser::LAST_VALUE:
      case tsqlParser::LEAD:
      case tsqlParser::LEVEL:
      case tsqlParser::LOCAL:
      case tsqlParser::LOCK_ESCALATION:
      case tsqlParser::LOGIN:
      case tsqlParser::LOOP:
      case tsqlParser::MARK:
      case tsqlParser::MAX:
      case tsqlParser::MAXDOP:
      case tsqlParser::MAXRECURSION:
      case tsqlParser::MIN:
      case tsqlParser::MODIFY:
      case tsqlParser::NAME:
      case tsqlParser::NOCOUNT:
      case tsqlParser::NODES:
      case tsqlParser::NOEXPAND:
      case tsqlParser::NORECOMPUTE:
      case tsqlParser::NTILE:
      case tsqlParser::NUMBER:
      case tsqlParser::OFFSET:
      case tsqlParser::ONLINE:
      case tsqlParser::ONLY:
      case tsqlParser::OPTIMISTIC:
      case tsqlParser::OPTIMIZE:
      case tsqlParser::OUT:
      case tsqlParser::OUTPUT:
      case tsqlParser::OWNER:
      case tsqlParser::PARAMETERIZATION:
      case tsqlParser::PARTITION:
      case tsqlParser::PATH:
      case tsqlParser::PRECEDING:
      case tsqlParser::PRIOR:
      case tsqlParser::PRIVILEGES:
      case tsqlParser::QUERY:
      case tsqlParser::RANGE:
      case tsqlParser::RANK:
      case tsqlParser::READONLY:
      case tsqlParser::READ_ONLY:
      case tsqlParser::RECOMPILE:
      case tsqlParser::RELATIVE:
      case tsqlParser::REMOTE:
      case tsqlParser::REPEATABLE:
      case tsqlParser::ROBUST:
      case tsqlParser::ROOT:
      case tsqlParser::ROW:
      case tsqlParser::ROWGUID:
      case tsqlParser::ROWS:
      case tsqlParser::ROW_NUMBER:
      case tsqlParser::SAMPLE:
      case tsqlParser::SCHEMABINDING:
      case tsqlParser::SCROLL:
      case tsqlParser::SCROLL_LOCKS:
      case tsqlParser::SELF:
      case tsqlParser::SERIALIZABLE:
      case tsqlParser::SIMPLE:
      case tsqlParser::SIZE:
      case tsqlParser::SNAPSHOT:
      case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
      case tsqlParser::STATIC:
      case tsqlParser::STATS_STREAM:
      case tsqlParser::STDEV:
      case tsqlParser::STDEVP:
      case tsqlParser::SUM:
      case tsqlParser::TEXTIMAGE_ON:
      case tsqlParser::THROW:
      case tsqlParser::TIES:
      case tsqlParser::TIME:
      case tsqlParser::TRY:
      case tsqlParser::TYPE:
      case tsqlParser::TYPE_WARNING:
      case tsqlParser::UNBOUNDED:
      case tsqlParser::UNCOMMITTED:
      case tsqlParser::UNKNOWN:
      case tsqlParser::USING:
      case tsqlParser::VAR:
      case tsqlParser::VARP:
      case tsqlParser::VIEWS:
      case tsqlParser::VIEW_METADATA:
      case tsqlParser::WORK:
      case tsqlParser::XML:
      case tsqlParser::XMLNAMESPACES:
      case tsqlParser::ZONE:
      case tsqlParser::DOUBLE_QUOTE_ID:
      case tsqlParser::SQUARE_BRACKET_ID:
      case tsqlParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(3362);
        full_table_name();
        break;
      }

      case tsqlParser::LOCAL_ID: {
        enterOuterAlt(_localctx, 2);
        setState(3363);
        match(tsqlParser::LOCAL_ID);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Full_column_nameContext ------------------------------------------------------------------

tsqlParser::Full_column_nameContext::Full_column_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::R_idContext* tsqlParser::Full_column_nameContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tree::TerminalNode* tsqlParser::Full_column_nameContext::DOT() {
  return getToken(tsqlParser::DOT, 0);
}

tsqlParser::Full_table_nameContext* tsqlParser::Full_column_nameContext::full_table_name() {
  return getRuleContext<tsqlParser::Full_table_nameContext>(0);
}


size_t tsqlParser::Full_column_nameContext::getRuleIndex() const {
  return tsqlParser::RuleFull_column_name;
}


std::any tsqlParser::Full_column_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitFull_column_name(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Full_column_nameContext* tsqlParser::full_column_name() {
  Full_column_nameContext *_localctx = _tracker.createInstance<Full_column_nameContext>(_ctx, getState());
  enterRule(_localctx, 360, tsqlParser::RuleFull_column_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3369);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 467, _ctx)) {
    case 1: {
      setState(3366);
      antlrcpp::downCast<Full_column_nameContext *>(_localctx)->table = full_table_name();
      setState(3367);
      match(tsqlParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(3371);
    antlrcpp::downCast<Full_column_nameContext *>(_localctx)->name = r_id();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Column_name_listContext ------------------------------------------------------------------

tsqlParser::Column_name_listContext::Column_name_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tsqlParser::R_idContext *> tsqlParser::Column_name_listContext::r_id() {
  return getRuleContexts<tsqlParser::R_idContext>();
}

tsqlParser::R_idContext* tsqlParser::Column_name_listContext::r_id(size_t i) {
  return getRuleContext<tsqlParser::R_idContext>(i);
}

std::vector<tree::TerminalNode *> tsqlParser::Column_name_listContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Column_name_listContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::Column_name_listContext::getRuleIndex() const {
  return tsqlParser::RuleColumn_name_list;
}


std::any tsqlParser::Column_name_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitColumn_name_list(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Column_name_listContext* tsqlParser::column_name_list() {
  Column_name_listContext *_localctx = _tracker.createInstance<Column_name_listContext>(_ctx, getState());
  enterRule(_localctx, 362, tsqlParser::RuleColumn_name_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3373);
    r_id();
    setState(3378);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == tsqlParser::COMMA) {
      setState(3374);
      match(tsqlParser::COMMA);
      setState(3375);
      r_id();
      setState(3380);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cursor_nameContext ------------------------------------------------------------------

tsqlParser::Cursor_nameContext::Cursor_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::R_idContext* tsqlParser::Cursor_nameContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tree::TerminalNode* tsqlParser::Cursor_nameContext::LOCAL_ID() {
  return getToken(tsqlParser::LOCAL_ID, 0);
}


size_t tsqlParser::Cursor_nameContext::getRuleIndex() const {
  return tsqlParser::RuleCursor_name;
}


std::any tsqlParser::Cursor_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitCursor_name(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Cursor_nameContext* tsqlParser::cursor_name() {
  Cursor_nameContext *_localctx = _tracker.createInstance<Cursor_nameContext>(_ctx, getState());
  enterRule(_localctx, 364, tsqlParser::RuleCursor_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3383);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::FILLFACTOR:
      case tsqlParser::FORCESEEK:
      case tsqlParser::NEXT:
      case tsqlParser::NUMERIC:
      case tsqlParser::VALUE:
      case tsqlParser::ABSOLUTE:
      case tsqlParser::APPLY:
      case tsqlParser::AUTO:
      case tsqlParser::AVG:
      case tsqlParser::BASE64:
      case tsqlParser::CALLER:
      case tsqlParser::CAST:
      case tsqlParser::CATCH:
      case tsqlParser::CHECKSUM_AGG:
      case tsqlParser::COMMITTED:
      case tsqlParser::CONCAT:
      case tsqlParser::CONTROL:
      case tsqlParser::COOKIE:
      case tsqlParser::COUNT:
      case tsqlParser::COUNT_BIG:
      case tsqlParser::DATE:
      case tsqlParser::DELAY:
      case tsqlParser::DELETED:
      case tsqlParser::DENSE_RANK:
      case tsqlParser::DISABLE:
      case tsqlParser::DYNAMIC:
      case tsqlParser::ENCRYPTION:
      case tsqlParser::EXIST:
      case tsqlParser::EXPAND:
      case tsqlParser::FAST:
      case tsqlParser::FAST_FORWARD:
      case tsqlParser::FIRST:
      case tsqlParser::FIRST_VALUE:
      case tsqlParser::FOLLOWING:
      case tsqlParser::FORCE:
      case tsqlParser::FORCED:
      case tsqlParser::FORWARD_ONLY:
      case tsqlParser::FULLSCAN:
      case tsqlParser::GLOBAL:
      case tsqlParser::GROUPING:
      case tsqlParser::GROUPING_ID:
      case tsqlParser::HASH:
      case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
      case tsqlParser::IMPERSONATE:
      case tsqlParser::INSENSITIVE:
      case tsqlParser::INSERTED:
      case tsqlParser::ISOLATION:
      case tsqlParser::IO:
      case tsqlParser::KEEP:
      case tsqlParser::KEEPFIXED:
      case tsqlParser::KEYSET:
      case tsqlParser::LAG:
      case tsqlParser::LAST:
      case tsqlParser::LAST_VALUE:
      case tsqlParser::LEAD:
      case tsqlParser::LEVEL:
      case tsqlParser::LOCAL:
      case tsqlParser::LOCK_ESCALATION:
      case tsqlParser::LOGIN:
      case tsqlParser::LOOP:
      case tsqlParser::MARK:
      case tsqlParser::MAX:
      case tsqlParser::MAXDOP:
      case tsqlParser::MAXRECURSION:
      case tsqlParser::MIN:
      case tsqlParser::MODIFY:
      case tsqlParser::NAME:
      case tsqlParser::NOCOUNT:
      case tsqlParser::NODES:
      case tsqlParser::NOEXPAND:
      case tsqlParser::NORECOMPUTE:
      case tsqlParser::NTILE:
      case tsqlParser::NUMBER:
      case tsqlParser::OFFSET:
      case tsqlParser::ONLINE:
      case tsqlParser::ONLY:
      case tsqlParser::OPTIMISTIC:
      case tsqlParser::OPTIMIZE:
      case tsqlParser::OUT:
      case tsqlParser::OUTPUT:
      case tsqlParser::OWNER:
      case tsqlParser::PARAMETERIZATION:
      case tsqlParser::PARTITION:
      case tsqlParser::PATH:
      case tsqlParser::PRECEDING:
      case tsqlParser::PRIOR:
      case tsqlParser::PRIVILEGES:
      case tsqlParser::QUERY:
      case tsqlParser::RANGE:
      case tsqlParser::RANK:
      case tsqlParser::READONLY:
      case tsqlParser::READ_ONLY:
      case tsqlParser::RECOMPILE:
      case tsqlParser::RELATIVE:
      case tsqlParser::REMOTE:
      case tsqlParser::REPEATABLE:
      case tsqlParser::ROBUST:
      case tsqlParser::ROOT:
      case tsqlParser::ROW:
      case tsqlParser::ROWGUID:
      case tsqlParser::ROWS:
      case tsqlParser::ROW_NUMBER:
      case tsqlParser::SAMPLE:
      case tsqlParser::SCHEMABINDING:
      case tsqlParser::SCROLL:
      case tsqlParser::SCROLL_LOCKS:
      case tsqlParser::SELF:
      case tsqlParser::SERIALIZABLE:
      case tsqlParser::SIMPLE:
      case tsqlParser::SIZE:
      case tsqlParser::SNAPSHOT:
      case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
      case tsqlParser::STATIC:
      case tsqlParser::STATS_STREAM:
      case tsqlParser::STDEV:
      case tsqlParser::STDEVP:
      case tsqlParser::SUM:
      case tsqlParser::TEXTIMAGE_ON:
      case tsqlParser::THROW:
      case tsqlParser::TIES:
      case tsqlParser::TIME:
      case tsqlParser::TRY:
      case tsqlParser::TYPE:
      case tsqlParser::TYPE_WARNING:
      case tsqlParser::UNBOUNDED:
      case tsqlParser::UNCOMMITTED:
      case tsqlParser::UNKNOWN:
      case tsqlParser::USING:
      case tsqlParser::VAR:
      case tsqlParser::VARP:
      case tsqlParser::VIEWS:
      case tsqlParser::VIEW_METADATA:
      case tsqlParser::WORK:
      case tsqlParser::XML:
      case tsqlParser::XMLNAMESPACES:
      case tsqlParser::ZONE:
      case tsqlParser::DOUBLE_QUOTE_ID:
      case tsqlParser::SQUARE_BRACKET_ID:
      case tsqlParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(3381);
        r_id();
        break;
      }

      case tsqlParser::LOCAL_ID: {
        enterOuterAlt(_localctx, 2);
        setState(3382);
        match(tsqlParser::LOCAL_ID);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- On_offContext ------------------------------------------------------------------

tsqlParser::On_offContext::On_offContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::On_offContext::ON() {
  return getToken(tsqlParser::ON, 0);
}

tree::TerminalNode* tsqlParser::On_offContext::OFF() {
  return getToken(tsqlParser::OFF, 0);
}


size_t tsqlParser::On_offContext::getRuleIndex() const {
  return tsqlParser::RuleOn_off;
}


std::any tsqlParser::On_offContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitOn_off(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::On_offContext* tsqlParser::on_off() {
  On_offContext *_localctx = _tracker.createInstance<On_offContext>(_ctx, getState());
  enterRule(_localctx, 366, tsqlParser::RuleOn_off);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3385);
    _la = _input->LA(1);
    if (!(_la == tsqlParser::OFF

    || _la == tsqlParser::ON)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClusteredContext ------------------------------------------------------------------

tsqlParser::ClusteredContext::ClusteredContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::ClusteredContext::CLUSTERED() {
  return getToken(tsqlParser::CLUSTERED, 0);
}

tree::TerminalNode* tsqlParser::ClusteredContext::NONCLUSTERED() {
  return getToken(tsqlParser::NONCLUSTERED, 0);
}


size_t tsqlParser::ClusteredContext::getRuleIndex() const {
  return tsqlParser::RuleClustered;
}


std::any tsqlParser::ClusteredContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitClustered(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::ClusteredContext* tsqlParser::clustered() {
  ClusteredContext *_localctx = _tracker.createInstance<ClusteredContext>(_ctx, getState());
  enterRule(_localctx, 368, tsqlParser::RuleClustered);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3387);
    _la = _input->LA(1);
    if (!(_la == tsqlParser::CLUSTERED || _la == tsqlParser::NONCLUSTERED)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Null_notnullContext ------------------------------------------------------------------

tsqlParser::Null_notnullContext::Null_notnullContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Null_notnullContext::NULL_() {
  return getToken(tsqlParser::NULL_, 0);
}

tree::TerminalNode* tsqlParser::Null_notnullContext::NOT() {
  return getToken(tsqlParser::NOT, 0);
}


size_t tsqlParser::Null_notnullContext::getRuleIndex() const {
  return tsqlParser::RuleNull_notnull;
}


std::any tsqlParser::Null_notnullContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitNull_notnull(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Null_notnullContext* tsqlParser::null_notnull() {
  Null_notnullContext *_localctx = _tracker.createInstance<Null_notnullContext>(_ctx, getState());
  enterRule(_localctx, 370, tsqlParser::RuleNull_notnull);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3390);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::NOT) {
      setState(3389);
      match(tsqlParser::NOT);
    }
    setState(3392);
    match(tsqlParser::NULL_);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Scalar_function_nameContext ------------------------------------------------------------------

tsqlParser::Scalar_function_nameContext::Scalar_function_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::Func_proc_nameContext* tsqlParser::Scalar_function_nameContext::func_proc_name() {
  return getRuleContext<tsqlParser::Func_proc_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Scalar_function_nameContext::RIGHT() {
  return getToken(tsqlParser::RIGHT, 0);
}

tree::TerminalNode* tsqlParser::Scalar_function_nameContext::LEFT() {
  return getToken(tsqlParser::LEFT, 0);
}

tree::TerminalNode* tsqlParser::Scalar_function_nameContext::BINARY_CHECKSUM() {
  return getToken(tsqlParser::BINARY_CHECKSUM, 0);
}

tree::TerminalNode* tsqlParser::Scalar_function_nameContext::CHECKSUM() {
  return getToken(tsqlParser::CHECKSUM, 0);
}

tree::TerminalNode* tsqlParser::Scalar_function_nameContext::EXP() {
  return getToken(tsqlParser::EXP, 0);
}

tree::TerminalNode* tsqlParser::Scalar_function_nameContext::LOG() {
  return getToken(tsqlParser::LOG, 0);
}

tree::TerminalNode* tsqlParser::Scalar_function_nameContext::LOG10() {
  return getToken(tsqlParser::LOG10, 0);
}

tree::TerminalNode* tsqlParser::Scalar_function_nameContext::SQUARE() {
  return getToken(tsqlParser::SQUARE, 0);
}

tree::TerminalNode* tsqlParser::Scalar_function_nameContext::SQRT() {
  return getToken(tsqlParser::SQRT, 0);
}

tree::TerminalNode* tsqlParser::Scalar_function_nameContext::ROUND() {
  return getToken(tsqlParser::ROUND, 0);
}

tree::TerminalNode* tsqlParser::Scalar_function_nameContext::CEILING() {
  return getToken(tsqlParser::CEILING, 0);
}

tree::TerminalNode* tsqlParser::Scalar_function_nameContext::FLOOR() {
  return getToken(tsqlParser::FLOOR, 0);
}

tree::TerminalNode* tsqlParser::Scalar_function_nameContext::POWER() {
  return getToken(tsqlParser::POWER, 0);
}

tree::TerminalNode* tsqlParser::Scalar_function_nameContext::COS() {
  return getToken(tsqlParser::COS, 0);
}

tree::TerminalNode* tsqlParser::Scalar_function_nameContext::SIN() {
  return getToken(tsqlParser::SIN, 0);
}

tree::TerminalNode* tsqlParser::Scalar_function_nameContext::TAN() {
  return getToken(tsqlParser::TAN, 0);
}

tree::TerminalNode* tsqlParser::Scalar_function_nameContext::SIGN() {
  return getToken(tsqlParser::SIGN, 0);
}


size_t tsqlParser::Scalar_function_nameContext::getRuleIndex() const {
  return tsqlParser::RuleScalar_function_name;
}


std::any tsqlParser::Scalar_function_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitScalar_function_name(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Scalar_function_nameContext* tsqlParser::scalar_function_name() {
  Scalar_function_nameContext *_localctx = _tracker.createInstance<Scalar_function_nameContext>(_ctx, getState());
  enterRule(_localctx, 372, tsqlParser::RuleScalar_function_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3412);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::FILLFACTOR:
      case tsqlParser::FORCESEEK:
      case tsqlParser::NEXT:
      case tsqlParser::NUMERIC:
      case tsqlParser::VALUE:
      case tsqlParser::ABSOLUTE:
      case tsqlParser::APPLY:
      case tsqlParser::AUTO:
      case tsqlParser::AVG:
      case tsqlParser::BASE64:
      case tsqlParser::CALLER:
      case tsqlParser::CAST:
      case tsqlParser::CATCH:
      case tsqlParser::CHECKSUM_AGG:
      case tsqlParser::COMMITTED:
      case tsqlParser::CONCAT:
      case tsqlParser::CONTROL:
      case tsqlParser::COOKIE:
      case tsqlParser::COUNT:
      case tsqlParser::COUNT_BIG:
      case tsqlParser::DATE:
      case tsqlParser::DELAY:
      case tsqlParser::DELETED:
      case tsqlParser::DENSE_RANK:
      case tsqlParser::DISABLE:
      case tsqlParser::DYNAMIC:
      case tsqlParser::ENCRYPTION:
      case tsqlParser::EXIST:
      case tsqlParser::EXPAND:
      case tsqlParser::FAST:
      case tsqlParser::FAST_FORWARD:
      case tsqlParser::FIRST:
      case tsqlParser::FIRST_VALUE:
      case tsqlParser::FOLLOWING:
      case tsqlParser::FORCE:
      case tsqlParser::FORCED:
      case tsqlParser::FORWARD_ONLY:
      case tsqlParser::FULLSCAN:
      case tsqlParser::GLOBAL:
      case tsqlParser::GROUPING:
      case tsqlParser::GROUPING_ID:
      case tsqlParser::HASH:
      case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
      case tsqlParser::IMPERSONATE:
      case tsqlParser::INSENSITIVE:
      case tsqlParser::INSERTED:
      case tsqlParser::ISOLATION:
      case tsqlParser::IO:
      case tsqlParser::KEEP:
      case tsqlParser::KEEPFIXED:
      case tsqlParser::KEYSET:
      case tsqlParser::LAG:
      case tsqlParser::LAST:
      case tsqlParser::LAST_VALUE:
      case tsqlParser::LEAD:
      case tsqlParser::LEVEL:
      case tsqlParser::LOCAL:
      case tsqlParser::LOCK_ESCALATION:
      case tsqlParser::LOGIN:
      case tsqlParser::LOOP:
      case tsqlParser::MARK:
      case tsqlParser::MAX:
      case tsqlParser::MAXDOP:
      case tsqlParser::MAXRECURSION:
      case tsqlParser::MIN:
      case tsqlParser::MODIFY:
      case tsqlParser::NAME:
      case tsqlParser::NOCOUNT:
      case tsqlParser::NODES:
      case tsqlParser::NOEXPAND:
      case tsqlParser::NORECOMPUTE:
      case tsqlParser::NTILE:
      case tsqlParser::NUMBER:
      case tsqlParser::OFFSET:
      case tsqlParser::ONLINE:
      case tsqlParser::ONLY:
      case tsqlParser::OPTIMISTIC:
      case tsqlParser::OPTIMIZE:
      case tsqlParser::OUT:
      case tsqlParser::OUTPUT:
      case tsqlParser::OWNER:
      case tsqlParser::PARAMETERIZATION:
      case tsqlParser::PARTITION:
      case tsqlParser::PATH:
      case tsqlParser::PRECEDING:
      case tsqlParser::PRIOR:
      case tsqlParser::PRIVILEGES:
      case tsqlParser::QUERY:
      case tsqlParser::RANGE:
      case tsqlParser::RANK:
      case tsqlParser::READONLY:
      case tsqlParser::READ_ONLY:
      case tsqlParser::RECOMPILE:
      case tsqlParser::RELATIVE:
      case tsqlParser::REMOTE:
      case tsqlParser::REPEATABLE:
      case tsqlParser::ROBUST:
      case tsqlParser::ROOT:
      case tsqlParser::ROW:
      case tsqlParser::ROWGUID:
      case tsqlParser::ROWS:
      case tsqlParser::ROW_NUMBER:
      case tsqlParser::SAMPLE:
      case tsqlParser::SCHEMABINDING:
      case tsqlParser::SCROLL:
      case tsqlParser::SCROLL_LOCKS:
      case tsqlParser::SELF:
      case tsqlParser::SERIALIZABLE:
      case tsqlParser::SIMPLE:
      case tsqlParser::SIZE:
      case tsqlParser::SNAPSHOT:
      case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
      case tsqlParser::STATIC:
      case tsqlParser::STATS_STREAM:
      case tsqlParser::STDEV:
      case tsqlParser::STDEVP:
      case tsqlParser::SUM:
      case tsqlParser::TEXTIMAGE_ON:
      case tsqlParser::THROW:
      case tsqlParser::TIES:
      case tsqlParser::TIME:
      case tsqlParser::TRY:
      case tsqlParser::TYPE:
      case tsqlParser::TYPE_WARNING:
      case tsqlParser::UNBOUNDED:
      case tsqlParser::UNCOMMITTED:
      case tsqlParser::UNKNOWN:
      case tsqlParser::USING:
      case tsqlParser::VAR:
      case tsqlParser::VARP:
      case tsqlParser::VIEWS:
      case tsqlParser::VIEW_METADATA:
      case tsqlParser::WORK:
      case tsqlParser::XML:
      case tsqlParser::XMLNAMESPACES:
      case tsqlParser::ZONE:
      case tsqlParser::DOUBLE_QUOTE_ID:
      case tsqlParser::SQUARE_BRACKET_ID:
      case tsqlParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(3394);
        func_proc_name();
        break;
      }

      case tsqlParser::RIGHT: {
        enterOuterAlt(_localctx, 2);
        setState(3395);
        match(tsqlParser::RIGHT);
        break;
      }

      case tsqlParser::LEFT: {
        enterOuterAlt(_localctx, 3);
        setState(3396);
        match(tsqlParser::LEFT);
        break;
      }

      case tsqlParser::BINARY_CHECKSUM: {
        enterOuterAlt(_localctx, 4);
        setState(3397);
        match(tsqlParser::BINARY_CHECKSUM);
        break;
      }

      case tsqlParser::CHECKSUM: {
        enterOuterAlt(_localctx, 5);
        setState(3398);
        match(tsqlParser::CHECKSUM);
        break;
      }

      case tsqlParser::EXP: {
        enterOuterAlt(_localctx, 6);
        setState(3399);
        match(tsqlParser::EXP);
        break;
      }

      case tsqlParser::LOG: {
        enterOuterAlt(_localctx, 7);
        setState(3400);
        match(tsqlParser::LOG);
        break;
      }

      case tsqlParser::LOG10: {
        enterOuterAlt(_localctx, 8);
        setState(3401);
        match(tsqlParser::LOG10);
        break;
      }

      case tsqlParser::SQUARE: {
        enterOuterAlt(_localctx, 9);
        setState(3402);
        match(tsqlParser::SQUARE);
        break;
      }

      case tsqlParser::SQRT: {
        enterOuterAlt(_localctx, 10);
        setState(3403);
        match(tsqlParser::SQRT);
        break;
      }

      case tsqlParser::ROUND: {
        enterOuterAlt(_localctx, 11);
        setState(3404);
        match(tsqlParser::ROUND);
        break;
      }

      case tsqlParser::CEILING: {
        enterOuterAlt(_localctx, 12);
        setState(3405);
        match(tsqlParser::CEILING);
        break;
      }

      case tsqlParser::FLOOR: {
        enterOuterAlt(_localctx, 13);
        setState(3406);
        match(tsqlParser::FLOOR);
        break;
      }

      case tsqlParser::POWER: {
        enterOuterAlt(_localctx, 14);
        setState(3407);
        match(tsqlParser::POWER);
        break;
      }

      case tsqlParser::COS: {
        enterOuterAlt(_localctx, 15);
        setState(3408);
        match(tsqlParser::COS);
        break;
      }

      case tsqlParser::SIN: {
        enterOuterAlt(_localctx, 16);
        setState(3409);
        match(tsqlParser::SIN);
        break;
      }

      case tsqlParser::TAN: {
        enterOuterAlt(_localctx, 17);
        setState(3410);
        match(tsqlParser::TAN);
        break;
      }

      case tsqlParser::SIGN: {
        enterOuterAlt(_localctx, 18);
        setState(3411);
        match(tsqlParser::SIGN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Default_valueContext ------------------------------------------------------------------

tsqlParser::Default_valueContext::Default_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Default_valueContext::NULL_() {
  return getToken(tsqlParser::NULL_, 0);
}

tsqlParser::ConstantContext* tsqlParser::Default_valueContext::constant() {
  return getRuleContext<tsqlParser::ConstantContext>(0);
}


size_t tsqlParser::Default_valueContext::getRuleIndex() const {
  return tsqlParser::RuleDefault_value;
}


std::any tsqlParser::Default_valueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitDefault_value(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Default_valueContext* tsqlParser::default_value() {
  Default_valueContext *_localctx = _tracker.createInstance<Default_valueContext>(_ctx, getState());
  enterRule(_localctx, 374, tsqlParser::RuleDefault_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3416);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::NULL_: {
        enterOuterAlt(_localctx, 1);
        setState(3414);
        match(tsqlParser::NULL_);
        break;
      }

      case tsqlParser::DECIMAL:
      case tsqlParser::STRING:
      case tsqlParser::BINARY:
      case tsqlParser::FLOAT:
      case tsqlParser::REAL:
      case tsqlParser::DOLLAR:
      case tsqlParser::PLUS:
      case tsqlParser::MINUS: {
        enterOuterAlt(_localctx, 2);
        setState(3415);
        constant();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantContext ------------------------------------------------------------------

tsqlParser::ConstantContext::ConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::ConstantContext::STRING() {
  return getToken(tsqlParser::STRING, 0);
}

tree::TerminalNode* tsqlParser::ConstantContext::BINARY() {
  return getToken(tsqlParser::BINARY, 0);
}

tree::TerminalNode* tsqlParser::ConstantContext::DECIMAL() {
  return getToken(tsqlParser::DECIMAL, 0);
}

tsqlParser::SignContext* tsqlParser::ConstantContext::sign() {
  return getRuleContext<tsqlParser::SignContext>(0);
}

tree::TerminalNode* tsqlParser::ConstantContext::REAL() {
  return getToken(tsqlParser::REAL, 0);
}

tree::TerminalNode* tsqlParser::ConstantContext::FLOAT() {
  return getToken(tsqlParser::FLOAT, 0);
}

tree::TerminalNode* tsqlParser::ConstantContext::DOLLAR() {
  return getToken(tsqlParser::DOLLAR, 0);
}


size_t tsqlParser::ConstantContext::getRuleIndex() const {
  return tsqlParser::RuleConstant;
}


std::any tsqlParser::ConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitConstant(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::ConstantContext* tsqlParser::constant() {
  ConstantContext *_localctx = _tracker.createInstance<ConstantContext>(_ctx, getState());
  enterRule(_localctx, 376, tsqlParser::RuleConstant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3433);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 476, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3418);
      match(tsqlParser::STRING);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3419);
      match(tsqlParser::BINARY);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3421);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::PLUS

      || _la == tsqlParser::MINUS) {
        setState(3420);
        sign();
      }
      setState(3423);
      match(tsqlParser::DECIMAL);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3425);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::PLUS

      || _la == tsqlParser::MINUS) {
        setState(3424);
        sign();
      }
      setState(3427);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::FLOAT

      || _la == tsqlParser::REAL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3429);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::PLUS

      || _la == tsqlParser::MINUS) {
        setState(3428);
        sign();
      }
      setState(3431);
      antlrcpp::downCast<ConstantContext *>(_localctx)->dollar = match(tsqlParser::DOLLAR);
      setState(3432);
      _la = _input->LA(1);
      if (!(_la == tsqlParser::DECIMAL

      || _la == tsqlParser::FLOAT)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SignContext ------------------------------------------------------------------

tsqlParser::SignContext::SignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::SignContext::PLUS() {
  return getToken(tsqlParser::PLUS, 0);
}

tree::TerminalNode* tsqlParser::SignContext::MINUS() {
  return getToken(tsqlParser::MINUS, 0);
}


size_t tsqlParser::SignContext::getRuleIndex() const {
  return tsqlParser::RuleSign;
}


std::any tsqlParser::SignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitSign(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::SignContext* tsqlParser::sign() {
  SignContext *_localctx = _tracker.createInstance<SignContext>(_ctx, getState());
  enterRule(_localctx, 378, tsqlParser::RuleSign);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3435);
    _la = _input->LA(1);
    if (!(_la == tsqlParser::PLUS

    || _la == tsqlParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- R_idContext ------------------------------------------------------------------

tsqlParser::R_idContext::R_idContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::Simple_idContext* tsqlParser::R_idContext::simple_id() {
  return getRuleContext<tsqlParser::Simple_idContext>(0);
}

tree::TerminalNode* tsqlParser::R_idContext::DOUBLE_QUOTE_ID() {
  return getToken(tsqlParser::DOUBLE_QUOTE_ID, 0);
}

tree::TerminalNode* tsqlParser::R_idContext::SQUARE_BRACKET_ID() {
  return getToken(tsqlParser::SQUARE_BRACKET_ID, 0);
}


size_t tsqlParser::R_idContext::getRuleIndex() const {
  return tsqlParser::RuleR_id;
}


std::any tsqlParser::R_idContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitR_id(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::R_idContext* tsqlParser::r_id() {
  R_idContext *_localctx = _tracker.createInstance<R_idContext>(_ctx, getState());
  enterRule(_localctx, 380, tsqlParser::RuleR_id);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3440);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::FILLFACTOR:
      case tsqlParser::FORCESEEK:
      case tsqlParser::NEXT:
      case tsqlParser::NUMERIC:
      case tsqlParser::VALUE:
      case tsqlParser::ABSOLUTE:
      case tsqlParser::APPLY:
      case tsqlParser::AUTO:
      case tsqlParser::AVG:
      case tsqlParser::BASE64:
      case tsqlParser::CALLER:
      case tsqlParser::CAST:
      case tsqlParser::CATCH:
      case tsqlParser::CHECKSUM_AGG:
      case tsqlParser::COMMITTED:
      case tsqlParser::CONCAT:
      case tsqlParser::CONTROL:
      case tsqlParser::COOKIE:
      case tsqlParser::COUNT:
      case tsqlParser::COUNT_BIG:
      case tsqlParser::DATE:
      case tsqlParser::DELAY:
      case tsqlParser::DELETED:
      case tsqlParser::DENSE_RANK:
      case tsqlParser::DISABLE:
      case tsqlParser::DYNAMIC:
      case tsqlParser::ENCRYPTION:
      case tsqlParser::EXIST:
      case tsqlParser::EXPAND:
      case tsqlParser::FAST:
      case tsqlParser::FAST_FORWARD:
      case tsqlParser::FIRST:
      case tsqlParser::FIRST_VALUE:
      case tsqlParser::FOLLOWING:
      case tsqlParser::FORCE:
      case tsqlParser::FORCED:
      case tsqlParser::FORWARD_ONLY:
      case tsqlParser::FULLSCAN:
      case tsqlParser::GLOBAL:
      case tsqlParser::GROUPING:
      case tsqlParser::GROUPING_ID:
      case tsqlParser::HASH:
      case tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
      case tsqlParser::IMPERSONATE:
      case tsqlParser::INSENSITIVE:
      case tsqlParser::INSERTED:
      case tsqlParser::ISOLATION:
      case tsqlParser::IO:
      case tsqlParser::KEEP:
      case tsqlParser::KEEPFIXED:
      case tsqlParser::KEYSET:
      case tsqlParser::LAG:
      case tsqlParser::LAST:
      case tsqlParser::LAST_VALUE:
      case tsqlParser::LEAD:
      case tsqlParser::LEVEL:
      case tsqlParser::LOCAL:
      case tsqlParser::LOCK_ESCALATION:
      case tsqlParser::LOGIN:
      case tsqlParser::LOOP:
      case tsqlParser::MARK:
      case tsqlParser::MAX:
      case tsqlParser::MAXDOP:
      case tsqlParser::MAXRECURSION:
      case tsqlParser::MIN:
      case tsqlParser::MODIFY:
      case tsqlParser::NAME:
      case tsqlParser::NOCOUNT:
      case tsqlParser::NODES:
      case tsqlParser::NOEXPAND:
      case tsqlParser::NORECOMPUTE:
      case tsqlParser::NTILE:
      case tsqlParser::NUMBER:
      case tsqlParser::OFFSET:
      case tsqlParser::ONLINE:
      case tsqlParser::ONLY:
      case tsqlParser::OPTIMISTIC:
      case tsqlParser::OPTIMIZE:
      case tsqlParser::OUT:
      case tsqlParser::OUTPUT:
      case tsqlParser::OWNER:
      case tsqlParser::PARAMETERIZATION:
      case tsqlParser::PARTITION:
      case tsqlParser::PATH:
      case tsqlParser::PRECEDING:
      case tsqlParser::PRIOR:
      case tsqlParser::PRIVILEGES:
      case tsqlParser::QUERY:
      case tsqlParser::RANGE:
      case tsqlParser::RANK:
      case tsqlParser::READONLY:
      case tsqlParser::READ_ONLY:
      case tsqlParser::RECOMPILE:
      case tsqlParser::RELATIVE:
      case tsqlParser::REMOTE:
      case tsqlParser::REPEATABLE:
      case tsqlParser::ROBUST:
      case tsqlParser::ROOT:
      case tsqlParser::ROW:
      case tsqlParser::ROWGUID:
      case tsqlParser::ROWS:
      case tsqlParser::ROW_NUMBER:
      case tsqlParser::SAMPLE:
      case tsqlParser::SCHEMABINDING:
      case tsqlParser::SCROLL:
      case tsqlParser::SCROLL_LOCKS:
      case tsqlParser::SELF:
      case tsqlParser::SERIALIZABLE:
      case tsqlParser::SIMPLE:
      case tsqlParser::SIZE:
      case tsqlParser::SNAPSHOT:
      case tsqlParser::SPATIAL_WINDOW_MAX_CELLS:
      case tsqlParser::STATIC:
      case tsqlParser::STATS_STREAM:
      case tsqlParser::STDEV:
      case tsqlParser::STDEVP:
      case tsqlParser::SUM:
      case tsqlParser::TEXTIMAGE_ON:
      case tsqlParser::THROW:
      case tsqlParser::TIES:
      case tsqlParser::TIME:
      case tsqlParser::TRY:
      case tsqlParser::TYPE:
      case tsqlParser::TYPE_WARNING:
      case tsqlParser::UNBOUNDED:
      case tsqlParser::UNCOMMITTED:
      case tsqlParser::UNKNOWN:
      case tsqlParser::USING:
      case tsqlParser::VAR:
      case tsqlParser::VARP:
      case tsqlParser::VIEWS:
      case tsqlParser::VIEW_METADATA:
      case tsqlParser::WORK:
      case tsqlParser::XML:
      case tsqlParser::XMLNAMESPACES:
      case tsqlParser::ZONE:
      case tsqlParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(3437);
        simple_id();
        break;
      }

      case tsqlParser::DOUBLE_QUOTE_ID: {
        enterOuterAlt(_localctx, 2);
        setState(3438);
        match(tsqlParser::DOUBLE_QUOTE_ID);
        break;
      }

      case tsqlParser::SQUARE_BRACKET_ID: {
        enterOuterAlt(_localctx, 3);
        setState(3439);
        match(tsqlParser::SQUARE_BRACKET_ID);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_idContext ------------------------------------------------------------------

tsqlParser::Simple_idContext::Simple_idContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Simple_idContext::ID() {
  return getToken(tsqlParser::ID, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::IO() {
  return getToken(tsqlParser::IO, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::ABSOLUTE() {
  return getToken(tsqlParser::ABSOLUTE, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::APPLY() {
  return getToken(tsqlParser::APPLY, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::AUTO() {
  return getToken(tsqlParser::AUTO, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::AVG() {
  return getToken(tsqlParser::AVG, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::BASE64() {
  return getToken(tsqlParser::BASE64, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::CALLER() {
  return getToken(tsqlParser::CALLER, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::CAST() {
  return getToken(tsqlParser::CAST, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::CATCH() {
  return getToken(tsqlParser::CATCH, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::CHECKSUM_AGG() {
  return getToken(tsqlParser::CHECKSUM_AGG, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::COMMITTED() {
  return getToken(tsqlParser::COMMITTED, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::CONCAT() {
  return getToken(tsqlParser::CONCAT, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::CONTROL() {
  return getToken(tsqlParser::CONTROL, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::COOKIE() {
  return getToken(tsqlParser::COOKIE, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::COUNT() {
  return getToken(tsqlParser::COUNT, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::COUNT_BIG() {
  return getToken(tsqlParser::COUNT_BIG, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::DATE() {
  return getToken(tsqlParser::DATE, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::DELAY() {
  return getToken(tsqlParser::DELAY, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::DELETED() {
  return getToken(tsqlParser::DELETED, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::DENSE_RANK() {
  return getToken(tsqlParser::DENSE_RANK, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::DISABLE() {
  return getToken(tsqlParser::DISABLE, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::DYNAMIC() {
  return getToken(tsqlParser::DYNAMIC, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::ENCRYPTION() {
  return getToken(tsqlParser::ENCRYPTION, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::EXIST() {
  return getToken(tsqlParser::EXIST, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::EXPAND() {
  return getToken(tsqlParser::EXPAND, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::FAST() {
  return getToken(tsqlParser::FAST, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::FAST_FORWARD() {
  return getToken(tsqlParser::FAST_FORWARD, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::FILLFACTOR() {
  return getToken(tsqlParser::FILLFACTOR, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::FIRST() {
  return getToken(tsqlParser::FIRST, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::FIRST_VALUE() {
  return getToken(tsqlParser::FIRST_VALUE, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::FOLLOWING() {
  return getToken(tsqlParser::FOLLOWING, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::FORCE() {
  return getToken(tsqlParser::FORCE, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::FORCESEEK() {
  return getToken(tsqlParser::FORCESEEK, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::FORWARD_ONLY() {
  return getToken(tsqlParser::FORWARD_ONLY, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::FULLSCAN() {
  return getToken(tsqlParser::FULLSCAN, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::GLOBAL() {
  return getToken(tsqlParser::GLOBAL, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::GROUPING() {
  return getToken(tsqlParser::GROUPING, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::GROUPING_ID() {
  return getToken(tsqlParser::GROUPING_ID, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::HASH() {
  return getToken(tsqlParser::HASH, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::IMPERSONATE() {
  return getToken(tsqlParser::IMPERSONATE, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::INSENSITIVE() {
  return getToken(tsqlParser::INSENSITIVE, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::INSERTED() {
  return getToken(tsqlParser::INSERTED, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::ISOLATION() {
  return getToken(tsqlParser::ISOLATION, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::KEEP() {
  return getToken(tsqlParser::KEEP, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::KEEPFIXED() {
  return getToken(tsqlParser::KEEPFIXED, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::FORCED() {
  return getToken(tsqlParser::FORCED, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::KEYSET() {
  return getToken(tsqlParser::KEYSET, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() {
  return getToken(tsqlParser::IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::LAG() {
  return getToken(tsqlParser::LAG, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::LAST() {
  return getToken(tsqlParser::LAST, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::LAST_VALUE() {
  return getToken(tsqlParser::LAST_VALUE, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::LEAD() {
  return getToken(tsqlParser::LEAD, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::LEVEL() {
  return getToken(tsqlParser::LEVEL, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::LOCAL() {
  return getToken(tsqlParser::LOCAL, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::LOCK_ESCALATION() {
  return getToken(tsqlParser::LOCK_ESCALATION, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::LOGIN() {
  return getToken(tsqlParser::LOGIN, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::LOOP() {
  return getToken(tsqlParser::LOOP, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::MARK() {
  return getToken(tsqlParser::MARK, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::MAX() {
  return getToken(tsqlParser::MAX, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::MAXDOP() {
  return getToken(tsqlParser::MAXDOP, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::MAXRECURSION() {
  return getToken(tsqlParser::MAXRECURSION, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::MIN() {
  return getToken(tsqlParser::MIN, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::MODIFY() {
  return getToken(tsqlParser::MODIFY, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::NAME() {
  return getToken(tsqlParser::NAME, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::NEXT() {
  return getToken(tsqlParser::NEXT, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::NOCOUNT() {
  return getToken(tsqlParser::NOCOUNT, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::NODES() {
  return getToken(tsqlParser::NODES, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::NOEXPAND() {
  return getToken(tsqlParser::NOEXPAND, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::NORECOMPUTE() {
  return getToken(tsqlParser::NORECOMPUTE, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::NTILE() {
  return getToken(tsqlParser::NTILE, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::NUMBER() {
  return getToken(tsqlParser::NUMBER, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::NUMERIC() {
  return getToken(tsqlParser::NUMERIC, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::OFFSET() {
  return getToken(tsqlParser::OFFSET, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::ONLINE() {
  return getToken(tsqlParser::ONLINE, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::ONLY() {
  return getToken(tsqlParser::ONLY, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::OPTIMISTIC() {
  return getToken(tsqlParser::OPTIMISTIC, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::OPTIMIZE() {
  return getToken(tsqlParser::OPTIMIZE, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::OUT() {
  return getToken(tsqlParser::OUT, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::OUTPUT() {
  return getToken(tsqlParser::OUTPUT, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::OWNER() {
  return getToken(tsqlParser::OWNER, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::PARAMETERIZATION() {
  return getToken(tsqlParser::PARAMETERIZATION, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::PARTITION() {
  return getToken(tsqlParser::PARTITION, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::PATH() {
  return getToken(tsqlParser::PATH, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::PRECEDING() {
  return getToken(tsqlParser::PRECEDING, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::PRIOR() {
  return getToken(tsqlParser::PRIOR, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::PRIVILEGES() {
  return getToken(tsqlParser::PRIVILEGES, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::QUERY() {
  return getToken(tsqlParser::QUERY, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::RANGE() {
  return getToken(tsqlParser::RANGE, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::RANK() {
  return getToken(tsqlParser::RANK, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::READONLY() {
  return getToken(tsqlParser::READONLY, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::READ_ONLY() {
  return getToken(tsqlParser::READ_ONLY, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::RECOMPILE() {
  return getToken(tsqlParser::RECOMPILE, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::RELATIVE() {
  return getToken(tsqlParser::RELATIVE, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::REMOTE() {
  return getToken(tsqlParser::REMOTE, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::REPEATABLE() {
  return getToken(tsqlParser::REPEATABLE, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::ROBUST() {
  return getToken(tsqlParser::ROBUST, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::ROOT() {
  return getToken(tsqlParser::ROOT, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::ROW() {
  return getToken(tsqlParser::ROW, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::ROWGUID() {
  return getToken(tsqlParser::ROWGUID, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::ROWS() {
  return getToken(tsqlParser::ROWS, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::ROW_NUMBER() {
  return getToken(tsqlParser::ROW_NUMBER, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::SAMPLE() {
  return getToken(tsqlParser::SAMPLE, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::SCHEMABINDING() {
  return getToken(tsqlParser::SCHEMABINDING, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::SCROLL() {
  return getToken(tsqlParser::SCROLL, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::SCROLL_LOCKS() {
  return getToken(tsqlParser::SCROLL_LOCKS, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::SELF() {
  return getToken(tsqlParser::SELF, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::SERIALIZABLE() {
  return getToken(tsqlParser::SERIALIZABLE, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::SIMPLE() {
  return getToken(tsqlParser::SIMPLE, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::SIZE() {
  return getToken(tsqlParser::SIZE, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::SNAPSHOT() {
  return getToken(tsqlParser::SNAPSHOT, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::SPATIAL_WINDOW_MAX_CELLS() {
  return getToken(tsqlParser::SPATIAL_WINDOW_MAX_CELLS, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::STATIC() {
  return getToken(tsqlParser::STATIC, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::STATS_STREAM() {
  return getToken(tsqlParser::STATS_STREAM, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::STDEV() {
  return getToken(tsqlParser::STDEV, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::STDEVP() {
  return getToken(tsqlParser::STDEVP, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::SUM() {
  return getToken(tsqlParser::SUM, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::TEXTIMAGE_ON() {
  return getToken(tsqlParser::TEXTIMAGE_ON, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::THROW() {
  return getToken(tsqlParser::THROW, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::TIES() {
  return getToken(tsqlParser::TIES, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::TIME() {
  return getToken(tsqlParser::TIME, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::TRY() {
  return getToken(tsqlParser::TRY, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::TYPE() {
  return getToken(tsqlParser::TYPE, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::TYPE_WARNING() {
  return getToken(tsqlParser::TYPE_WARNING, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::UNBOUNDED() {
  return getToken(tsqlParser::UNBOUNDED, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::UNCOMMITTED() {
  return getToken(tsqlParser::UNCOMMITTED, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::UNKNOWN() {
  return getToken(tsqlParser::UNKNOWN, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::USING() {
  return getToken(tsqlParser::USING, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::VAR() {
  return getToken(tsqlParser::VAR, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::VARP() {
  return getToken(tsqlParser::VARP, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::VALUE() {
  return getToken(tsqlParser::VALUE, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::VIEW_METADATA() {
  return getToken(tsqlParser::VIEW_METADATA, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::VIEWS() {
  return getToken(tsqlParser::VIEWS, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::WORK() {
  return getToken(tsqlParser::WORK, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::XML() {
  return getToken(tsqlParser::XML, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::XMLNAMESPACES() {
  return getToken(tsqlParser::XMLNAMESPACES, 0);
}

tree::TerminalNode* tsqlParser::Simple_idContext::ZONE() {
  return getToken(tsqlParser::ZONE, 0);
}


size_t tsqlParser::Simple_idContext::getRuleIndex() const {
  return tsqlParser::RuleSimple_id;
}


std::any tsqlParser::Simple_idContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitSimple_id(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Simple_idContext* tsqlParser::simple_id() {
  Simple_idContext *_localctx = _tracker.createInstance<Simple_idContext>(_ctx, getState());
  enterRule(_localctx, 382, tsqlParser::RuleSimple_id);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3442);
    _la = _input->LA(1);
    if (!((((_la - 71) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 71)) & 17729624997893) != 0 || (((_la - 196) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 196)) & 9969332866253825) != 0 || (((_la - 261) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 261)) & -148821964101331) != 0 || (((_la - 328) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 328)) & -47521180986790319) != 0 || (((_la - 393) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 393)) & 144677575640383123) != 0)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Comparison_operatorContext ------------------------------------------------------------------

tsqlParser::Comparison_operatorContext::Comparison_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Comparison_operatorContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

tree::TerminalNode* tsqlParser::Comparison_operatorContext::GREATER() {
  return getToken(tsqlParser::GREATER, 0);
}

tree::TerminalNode* tsqlParser::Comparison_operatorContext::LESS() {
  return getToken(tsqlParser::LESS, 0);
}

tree::TerminalNode* tsqlParser::Comparison_operatorContext::EXCLAMATION() {
  return getToken(tsqlParser::EXCLAMATION, 0);
}


size_t tsqlParser::Comparison_operatorContext::getRuleIndex() const {
  return tsqlParser::RuleComparison_operator;
}


std::any tsqlParser::Comparison_operatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitComparison_operator(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Comparison_operatorContext* tsqlParser::comparison_operator() {
  Comparison_operatorContext *_localctx = _tracker.createInstance<Comparison_operatorContext>(_ctx, getState());
  enterRule(_localctx, 384, tsqlParser::RuleComparison_operator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3459);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 478, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3444);
      match(tsqlParser::EQUAL);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3445);
      match(tsqlParser::GREATER);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3446);
      match(tsqlParser::LESS);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3447);
      match(tsqlParser::LESS);
      setState(3448);
      match(tsqlParser::EQUAL);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3449);
      match(tsqlParser::GREATER);
      setState(3450);
      match(tsqlParser::EQUAL);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(3451);
      match(tsqlParser::LESS);
      setState(3452);
      match(tsqlParser::GREATER);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(3453);
      match(tsqlParser::EXCLAMATION);
      setState(3454);
      match(tsqlParser::EQUAL);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(3455);
      match(tsqlParser::EXCLAMATION);
      setState(3456);
      match(tsqlParser::GREATER);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(3457);
      match(tsqlParser::EXCLAMATION);
      setState(3458);
      match(tsqlParser::LESS);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assignment_operatorContext ------------------------------------------------------------------

tsqlParser::Assignment_operatorContext::Assignment_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Assignment_operatorContext::PLUS_ASSIGN() {
  return getToken(tsqlParser::PLUS_ASSIGN, 0);
}

tree::TerminalNode* tsqlParser::Assignment_operatorContext::MINUS_ASSIGN() {
  return getToken(tsqlParser::MINUS_ASSIGN, 0);
}

tree::TerminalNode* tsqlParser::Assignment_operatorContext::MULT_ASSIGN() {
  return getToken(tsqlParser::MULT_ASSIGN, 0);
}

tree::TerminalNode* tsqlParser::Assignment_operatorContext::DIV_ASSIGN() {
  return getToken(tsqlParser::DIV_ASSIGN, 0);
}

tree::TerminalNode* tsqlParser::Assignment_operatorContext::MOD_ASSIGN() {
  return getToken(tsqlParser::MOD_ASSIGN, 0);
}

tree::TerminalNode* tsqlParser::Assignment_operatorContext::AND_ASSIGN() {
  return getToken(tsqlParser::AND_ASSIGN, 0);
}

tree::TerminalNode* tsqlParser::Assignment_operatorContext::XOR_ASSIGN() {
  return getToken(tsqlParser::XOR_ASSIGN, 0);
}

tree::TerminalNode* tsqlParser::Assignment_operatorContext::OR_ASSIGN() {
  return getToken(tsqlParser::OR_ASSIGN, 0);
}


size_t tsqlParser::Assignment_operatorContext::getRuleIndex() const {
  return tsqlParser::RuleAssignment_operator;
}


std::any tsqlParser::Assignment_operatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitAssignment_operator(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Assignment_operatorContext* tsqlParser::assignment_operator() {
  Assignment_operatorContext *_localctx = _tracker.createInstance<Assignment_operatorContext>(_ctx, getState());
  enterRule(_localctx, 386, tsqlParser::RuleAssignment_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3461);
    _la = _input->LA(1);
    if (!((((_la - 459) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 459)) & 255) != 0)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- File_sizeContext ------------------------------------------------------------------

tsqlParser::File_sizeContext::File_sizeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::File_sizeContext::DECIMAL() {
  return getToken(tsqlParser::DECIMAL, 0);
}

tree::TerminalNode* tsqlParser::File_sizeContext::KB() {
  return getToken(tsqlParser::KB, 0);
}

tree::TerminalNode* tsqlParser::File_sizeContext::MB() {
  return getToken(tsqlParser::MB, 0);
}

tree::TerminalNode* tsqlParser::File_sizeContext::GB() {
  return getToken(tsqlParser::GB, 0);
}

tree::TerminalNode* tsqlParser::File_sizeContext::TB() {
  return getToken(tsqlParser::TB, 0);
}

tree::TerminalNode* tsqlParser::File_sizeContext::MODULE() {
  return getToken(tsqlParser::MODULE, 0);
}


size_t tsqlParser::File_sizeContext::getRuleIndex() const {
  return tsqlParser::RuleFile_size;
}


std::any tsqlParser::File_sizeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitFile_size(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::File_sizeContext* tsqlParser::file_size() {
  File_sizeContext *_localctx = _tracker.createInstance<File_sizeContext>(_ctx, getState());
  enterRule(_localctx, 388, tsqlParser::RuleFile_size);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3463);
    match(tsqlParser::DECIMAL);
    setState(3465);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la - 289) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 289)) & 137439477761) != 0 || _la == tsqlParser::TB

    || _la == tsqlParser::MODULE) {
      setState(3464);
      _la = _input->LA(1);
      if (!((((_la - 289) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 289)) & 137439477761) != 0 || _la == tsqlParser::TB

      || _la == tsqlParser::MODULE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_or_alter_procedureContext ------------------------------------------------------------------

tsqlParser::Create_or_alter_procedureContext::Create_or_alter_procedureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::Func_proc_nameContext* tsqlParser::Create_or_alter_procedureContext::func_proc_name() {
  return getRuleContext<tsqlParser::Func_proc_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Create_or_alter_procedureContext::AS() {
  return getToken(tsqlParser::AS, 0);
}

tsqlParser::Sql_clausesContext* tsqlParser::Create_or_alter_procedureContext::sql_clauses() {
  return getRuleContext<tsqlParser::Sql_clausesContext>(0);
}

tree::TerminalNode* tsqlParser::Create_or_alter_procedureContext::ALTER() {
  return getToken(tsqlParser::ALTER, 0);
}

tree::TerminalNode* tsqlParser::Create_or_alter_procedureContext::PROC() {
  return getToken(tsqlParser::PROC, 0);
}

tree::TerminalNode* tsqlParser::Create_or_alter_procedureContext::PROCEDURE() {
  return getToken(tsqlParser::PROCEDURE, 0);
}

tree::TerminalNode* tsqlParser::Create_or_alter_procedureContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}

tree::TerminalNode* tsqlParser::Create_or_alter_procedureContext::DECIMAL() {
  return getToken(tsqlParser::DECIMAL, 0);
}

std::vector<tsqlParser::Procedure_paramContext *> tsqlParser::Create_or_alter_procedureContext::procedure_param() {
  return getRuleContexts<tsqlParser::Procedure_paramContext>();
}

tsqlParser::Procedure_paramContext* tsqlParser::Create_or_alter_procedureContext::procedure_param(size_t i) {
  return getRuleContext<tsqlParser::Procedure_paramContext>(i);
}

tree::TerminalNode* tsqlParser::Create_or_alter_procedureContext::WITH() {
  return getToken(tsqlParser::WITH, 0);
}

std::vector<tsqlParser::Procedure_optionContext *> tsqlParser::Create_or_alter_procedureContext::procedure_option() {
  return getRuleContexts<tsqlParser::Procedure_optionContext>();
}

tsqlParser::Procedure_optionContext* tsqlParser::Create_or_alter_procedureContext::procedure_option(size_t i) {
  return getRuleContext<tsqlParser::Procedure_optionContext>(i);
}

tree::TerminalNode* tsqlParser::Create_or_alter_procedureContext::FOR() {
  return getToken(tsqlParser::FOR, 0);
}

tree::TerminalNode* tsqlParser::Create_or_alter_procedureContext::REPLICATION() {
  return getToken(tsqlParser::REPLICATION, 0);
}

tree::TerminalNode* tsqlParser::Create_or_alter_procedureContext::CREATE() {
  return getToken(tsqlParser::CREATE, 0);
}

tree::TerminalNode* tsqlParser::Create_or_alter_procedureContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Create_or_alter_procedureContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Create_or_alter_procedureContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}

tree::TerminalNode* tsqlParser::Create_or_alter_procedureContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Create_or_alter_procedureContext::OR() {
  return getToken(tsqlParser::OR, 0);
}


size_t tsqlParser::Create_or_alter_procedureContext::getRuleIndex() const {
  return tsqlParser::RuleCreate_or_alter_procedure;
}


std::any tsqlParser::Create_or_alter_procedureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitCreate_or_alter_procedure(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Create_or_alter_procedureContext* tsqlParser::create_or_alter_procedure() {
  Create_or_alter_procedureContext *_localctx = _tracker.createInstance<Create_or_alter_procedureContext>(_ctx, getState());
  enterRule(_localctx, 390, tsqlParser::RuleCreate_or_alter_procedure);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3473);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::CREATE: {
        setState(3467);
        match(tsqlParser::CREATE);
        setState(3470);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == tsqlParser::OR) {
          setState(3468);
          match(tsqlParser::OR);
          setState(3469);
          match(tsqlParser::ALTER);
        }
        break;
      }

      case tsqlParser::ALTER: {
        setState(3472);
        match(tsqlParser::ALTER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3475);
    antlrcpp::downCast<Create_or_alter_procedureContext *>(_localctx)->proc = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == tsqlParser::PROC

    || _la == tsqlParser::PROCEDURE)) {
      antlrcpp::downCast<Create_or_alter_procedureContext *>(_localctx)->proc = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3476);
    func_proc_name();
    setState(3479);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::SEMI) {
      setState(3477);
      match(tsqlParser::SEMI);
      setState(3478);
      match(tsqlParser::DECIMAL);
    }
    setState(3495);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::LOCAL_ID

    || _la == tsqlParser::LR_BRACKET) {
      setState(3482);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::LR_BRACKET) {
        setState(3481);
        match(tsqlParser::LR_BRACKET);
      }
      setState(3484);
      procedure_param();
      setState(3489);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == tsqlParser::COMMA) {
        setState(3485);
        match(tsqlParser::COMMA);
        setState(3486);
        procedure_param();
        setState(3491);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(3493);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::RR_BRACKET) {
        setState(3492);
        match(tsqlParser::RR_BRACKET);
      }
    }
    setState(3506);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::WITH) {
      setState(3497);
      match(tsqlParser::WITH);
      setState(3498);
      procedure_option();
      setState(3503);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == tsqlParser::COMMA) {
        setState(3499);
        match(tsqlParser::COMMA);
        setState(3500);
        procedure_option();
        setState(3505);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3510);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::FOR) {
      setState(3508);
      match(tsqlParser::FOR);
      setState(3509);
      match(tsqlParser::REPLICATION);
    }
    setState(3512);
    match(tsqlParser::AS);
    setState(3513);
    sql_clauses();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_or_alter_functionContext ------------------------------------------------------------------

tsqlParser::Create_or_alter_functionContext::Create_or_alter_functionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Create_or_alter_functionContext::FUNCTION() {
  return getToken(tsqlParser::FUNCTION, 0);
}

tsqlParser::Func_proc_nameContext* tsqlParser::Create_or_alter_functionContext::func_proc_name() {
  return getRuleContext<tsqlParser::Func_proc_nameContext>(0);
}

tree::TerminalNode* tsqlParser::Create_or_alter_functionContext::ALTER() {
  return getToken(tsqlParser::ALTER, 0);
}

tree::TerminalNode* tsqlParser::Create_or_alter_functionContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Create_or_alter_functionContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tsqlParser::Func_body_returns_selectContext* tsqlParser::Create_or_alter_functionContext::func_body_returns_select() {
  return getRuleContext<tsqlParser::Func_body_returns_selectContext>(0);
}

tsqlParser::Func_body_returns_tableContext* tsqlParser::Create_or_alter_functionContext::func_body_returns_table() {
  return getRuleContext<tsqlParser::Func_body_returns_tableContext>(0);
}

tsqlParser::Func_body_returns_scalarContext* tsqlParser::Create_or_alter_functionContext::func_body_returns_scalar() {
  return getRuleContext<tsqlParser::Func_body_returns_scalarContext>(0);
}

tree::TerminalNode* tsqlParser::Create_or_alter_functionContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}

tree::TerminalNode* tsqlParser::Create_or_alter_functionContext::CREATE() {
  return getToken(tsqlParser::CREATE, 0);
}

std::vector<tsqlParser::Procedure_paramContext *> tsqlParser::Create_or_alter_functionContext::procedure_param() {
  return getRuleContexts<tsqlParser::Procedure_paramContext>();
}

tsqlParser::Procedure_paramContext* tsqlParser::Create_or_alter_functionContext::procedure_param(size_t i) {
  return getRuleContext<tsqlParser::Procedure_paramContext>(i);
}

tree::TerminalNode* tsqlParser::Create_or_alter_functionContext::OR() {
  return getToken(tsqlParser::OR, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Create_or_alter_functionContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Create_or_alter_functionContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::Create_or_alter_functionContext::getRuleIndex() const {
  return tsqlParser::RuleCreate_or_alter_function;
}


std::any tsqlParser::Create_or_alter_functionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitCreate_or_alter_function(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Create_or_alter_functionContext* tsqlParser::create_or_alter_function() {
  Create_or_alter_functionContext *_localctx = _tracker.createInstance<Create_or_alter_functionContext>(_ctx, getState());
  enterRule(_localctx, 392, tsqlParser::RuleCreate_or_alter_function);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3521);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::CREATE: {
        setState(3515);
        match(tsqlParser::CREATE);
        setState(3518);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == tsqlParser::OR) {
          setState(3516);
          match(tsqlParser::OR);
          setState(3517);
          match(tsqlParser::ALTER);
        }
        break;
      }

      case tsqlParser::ALTER: {
        setState(3520);
        match(tsqlParser::ALTER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3523);
    match(tsqlParser::FUNCTION);
    setState(3524);
    func_proc_name();
    setState(3538);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 493, _ctx)) {
    case 1: {
      setState(3525);
      match(tsqlParser::LR_BRACKET);
      setState(3526);
      procedure_param();
      setState(3531);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == tsqlParser::COMMA) {
        setState(3527);
        match(tsqlParser::COMMA);
        setState(3528);
        procedure_param();
        setState(3533);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(3534);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 2: {
      setState(3536);
      match(tsqlParser::LR_BRACKET);
      setState(3537);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    default:
      break;
    }
    setState(3543);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 494, _ctx)) {
    case 1: {
      setState(3540);
      func_body_returns_select();
      break;
    }

    case 2: {
      setState(3541);
      func_body_returns_table();
      break;
    }

    case 3: {
      setState(3542);
      func_body_returns_scalar();
      break;
    }

    default:
      break;
    }
    setState(3546);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 495, _ctx)) {
    case 1: {
      setState(3545);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_body_returns_selectContext ------------------------------------------------------------------

tsqlParser::Func_body_returns_selectContext::Func_body_returns_selectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Func_body_returns_selectContext::RETURNS() {
  return getToken(tsqlParser::RETURNS, 0);
}

tree::TerminalNode* tsqlParser::Func_body_returns_selectContext::TABLE() {
  return getToken(tsqlParser::TABLE, 0);
}

tree::TerminalNode* tsqlParser::Func_body_returns_selectContext::RETURN() {
  return getToken(tsqlParser::RETURN, 0);
}

tree::TerminalNode* tsqlParser::Func_body_returns_selectContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tsqlParser::Select_statementContext* tsqlParser::Func_body_returns_selectContext::select_statement() {
  return getRuleContext<tsqlParser::Select_statementContext>(0);
}

tree::TerminalNode* tsqlParser::Func_body_returns_selectContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Func_body_returns_selectContext::WITH() {
  return getToken(tsqlParser::WITH, 0);
}

std::vector<tsqlParser::Function_optionContext *> tsqlParser::Func_body_returns_selectContext::function_option() {
  return getRuleContexts<tsqlParser::Function_optionContext>();
}

tsqlParser::Function_optionContext* tsqlParser::Func_body_returns_selectContext::function_option(size_t i) {
  return getRuleContext<tsqlParser::Function_optionContext>(i);
}

tree::TerminalNode* tsqlParser::Func_body_returns_selectContext::AS() {
  return getToken(tsqlParser::AS, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Func_body_returns_selectContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Func_body_returns_selectContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::Func_body_returns_selectContext::getRuleIndex() const {
  return tsqlParser::RuleFunc_body_returns_select;
}


std::any tsqlParser::Func_body_returns_selectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitFunc_body_returns_select(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Func_body_returns_selectContext* tsqlParser::func_body_returns_select() {
  Func_body_returns_selectContext *_localctx = _tracker.createInstance<Func_body_returns_selectContext>(_ctx, getState());
  enterRule(_localctx, 394, tsqlParser::RuleFunc_body_returns_select);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3548);
    match(tsqlParser::RETURNS);
    setState(3549);
    match(tsqlParser::TABLE);
    setState(3559);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::WITH) {
      setState(3550);
      match(tsqlParser::WITH);
      setState(3551);
      function_option();
      setState(3556);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == tsqlParser::COMMA) {
        setState(3552);
        match(tsqlParser::COMMA);
        setState(3553);
        function_option();
        setState(3558);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3562);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::AS) {
      setState(3561);
      match(tsqlParser::AS);
    }
    setState(3564);
    match(tsqlParser::RETURN);
    setState(3570);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 499, _ctx)) {
    case 1: {
      setState(3565);
      match(tsqlParser::LR_BRACKET);
      setState(3566);
      select_statement();
      setState(3567);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 2: {
      setState(3569);
      select_statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_body_returns_tableContext ------------------------------------------------------------------

tsqlParser::Func_body_returns_tableContext::Func_body_returns_tableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Func_body_returns_tableContext::RETURNS() {
  return getToken(tsqlParser::RETURNS, 0);
}

tree::TerminalNode* tsqlParser::Func_body_returns_tableContext::LOCAL_ID() {
  return getToken(tsqlParser::LOCAL_ID, 0);
}

tsqlParser::Table_type_definitionContext* tsqlParser::Func_body_returns_tableContext::table_type_definition() {
  return getRuleContext<tsqlParser::Table_type_definitionContext>(0);
}

tree::TerminalNode* tsqlParser::Func_body_returns_tableContext::BEGIN() {
  return getToken(tsqlParser::BEGIN, 0);
}

tree::TerminalNode* tsqlParser::Func_body_returns_tableContext::RETURN() {
  return getToken(tsqlParser::RETURN, 0);
}

tree::TerminalNode* tsqlParser::Func_body_returns_tableContext::END() {
  return getToken(tsqlParser::END, 0);
}

tree::TerminalNode* tsqlParser::Func_body_returns_tableContext::WITH() {
  return getToken(tsqlParser::WITH, 0);
}

std::vector<tsqlParser::Function_optionContext *> tsqlParser::Func_body_returns_tableContext::function_option() {
  return getRuleContexts<tsqlParser::Function_optionContext>();
}

tsqlParser::Function_optionContext* tsqlParser::Func_body_returns_tableContext::function_option(size_t i) {
  return getRuleContext<tsqlParser::Function_optionContext>(i);
}

tree::TerminalNode* tsqlParser::Func_body_returns_tableContext::AS() {
  return getToken(tsqlParser::AS, 0);
}

std::vector<tsqlParser::Sql_clauseContext *> tsqlParser::Func_body_returns_tableContext::sql_clause() {
  return getRuleContexts<tsqlParser::Sql_clauseContext>();
}

tsqlParser::Sql_clauseContext* tsqlParser::Func_body_returns_tableContext::sql_clause(size_t i) {
  return getRuleContext<tsqlParser::Sql_clauseContext>(i);
}

std::vector<tree::TerminalNode *> tsqlParser::Func_body_returns_tableContext::SEMI() {
  return getTokens(tsqlParser::SEMI);
}

tree::TerminalNode* tsqlParser::Func_body_returns_tableContext::SEMI(size_t i) {
  return getToken(tsqlParser::SEMI, i);
}

std::vector<tree::TerminalNode *> tsqlParser::Func_body_returns_tableContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Func_body_returns_tableContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::Func_body_returns_tableContext::getRuleIndex() const {
  return tsqlParser::RuleFunc_body_returns_table;
}


std::any tsqlParser::Func_body_returns_tableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitFunc_body_returns_table(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Func_body_returns_tableContext* tsqlParser::func_body_returns_table() {
  Func_body_returns_tableContext *_localctx = _tracker.createInstance<Func_body_returns_tableContext>(_ctx, getState());
  enterRule(_localctx, 396, tsqlParser::RuleFunc_body_returns_table);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3572);
    match(tsqlParser::RETURNS);
    setState(3573);
    match(tsqlParser::LOCAL_ID);
    setState(3574);
    table_type_definition();
    setState(3584);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::WITH) {
      setState(3575);
      match(tsqlParser::WITH);
      setState(3576);
      function_option();
      setState(3581);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == tsqlParser::COMMA) {
        setState(3577);
        match(tsqlParser::COMMA);
        setState(3578);
        function_option();
        setState(3583);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3587);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::AS) {
      setState(3586);
      match(tsqlParser::AS);
    }
    setState(3589);
    match(tsqlParser::BEGIN);
    setState(3593);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 503, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3590);
        sql_clause(); 
      }
      setState(3595);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 503, _ctx);
    }
    setState(3596);
    match(tsqlParser::RETURN);
    setState(3598);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::SEMI) {
      setState(3597);
      match(tsqlParser::SEMI);
    }
    setState(3600);
    match(tsqlParser::END);
    setState(3602);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 505, _ctx)) {
    case 1: {
      setState(3601);
      match(tsqlParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_body_returns_scalarContext ------------------------------------------------------------------

tsqlParser::Func_body_returns_scalarContext::Func_body_returns_scalarContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Func_body_returns_scalarContext::RETURNS() {
  return getToken(tsqlParser::RETURNS, 0);
}

tsqlParser::Data_typeContext* tsqlParser::Func_body_returns_scalarContext::data_type() {
  return getRuleContext<tsqlParser::Data_typeContext>(0);
}

tree::TerminalNode* tsqlParser::Func_body_returns_scalarContext::BEGIN() {
  return getToken(tsqlParser::BEGIN, 0);
}

tree::TerminalNode* tsqlParser::Func_body_returns_scalarContext::RETURN() {
  return getToken(tsqlParser::RETURN, 0);
}

tree::TerminalNode* tsqlParser::Func_body_returns_scalarContext::END() {
  return getToken(tsqlParser::END, 0);
}

tsqlParser::ExpressionContext* tsqlParser::Func_body_returns_scalarContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

tree::TerminalNode* tsqlParser::Func_body_returns_scalarContext::WITH() {
  return getToken(tsqlParser::WITH, 0);
}

std::vector<tsqlParser::Function_optionContext *> tsqlParser::Func_body_returns_scalarContext::function_option() {
  return getRuleContexts<tsqlParser::Function_optionContext>();
}

tsqlParser::Function_optionContext* tsqlParser::Func_body_returns_scalarContext::function_option(size_t i) {
  return getRuleContext<tsqlParser::Function_optionContext>(i);
}

tree::TerminalNode* tsqlParser::Func_body_returns_scalarContext::AS() {
  return getToken(tsqlParser::AS, 0);
}

std::vector<tsqlParser::Sql_clauseContext *> tsqlParser::Func_body_returns_scalarContext::sql_clause() {
  return getRuleContexts<tsqlParser::Sql_clauseContext>();
}

tsqlParser::Sql_clauseContext* tsqlParser::Func_body_returns_scalarContext::sql_clause(size_t i) {
  return getRuleContext<tsqlParser::Sql_clauseContext>(i);
}

tree::TerminalNode* tsqlParser::Func_body_returns_scalarContext::SEMI() {
  return getToken(tsqlParser::SEMI, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Func_body_returns_scalarContext::COMMA() {
  return getTokens(tsqlParser::COMMA);
}

tree::TerminalNode* tsqlParser::Func_body_returns_scalarContext::COMMA(size_t i) {
  return getToken(tsqlParser::COMMA, i);
}


size_t tsqlParser::Func_body_returns_scalarContext::getRuleIndex() const {
  return tsqlParser::RuleFunc_body_returns_scalar;
}


std::any tsqlParser::Func_body_returns_scalarContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitFunc_body_returns_scalar(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Func_body_returns_scalarContext* tsqlParser::func_body_returns_scalar() {
  Func_body_returns_scalarContext *_localctx = _tracker.createInstance<Func_body_returns_scalarContext>(_ctx, getState());
  enterRule(_localctx, 398, tsqlParser::RuleFunc_body_returns_scalar);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3604);
    match(tsqlParser::RETURNS);
    setState(3605);
    data_type();
    setState(3615);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::WITH) {
      setState(3606);
      match(tsqlParser::WITH);
      setState(3607);
      function_option();
      setState(3612);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == tsqlParser::COMMA) {
        setState(3608);
        match(tsqlParser::COMMA);
        setState(3609);
        function_option();
        setState(3614);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3618);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::AS) {
      setState(3617);
      match(tsqlParser::AS);
    }
    setState(3620);
    match(tsqlParser::BEGIN);
    setState(3624);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 509, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3621);
        sql_clause(); 
      }
      setState(3626);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 509, _ctx);
    }
    setState(3627);
    match(tsqlParser::RETURN);
    setState(3628);
    antlrcpp::downCast<Func_body_returns_scalarContext *>(_localctx)->ret = expression(0);
    setState(3630);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::SEMI) {
      setState(3629);
      match(tsqlParser::SEMI);
    }
    setState(3632);
    match(tsqlParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Procedure_paramContext ------------------------------------------------------------------

tsqlParser::Procedure_paramContext::Procedure_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Procedure_paramContext::LOCAL_ID() {
  return getToken(tsqlParser::LOCAL_ID, 0);
}

tsqlParser::Data_typeContext* tsqlParser::Procedure_paramContext::data_type() {
  return getRuleContext<tsqlParser::Data_typeContext>(0);
}

tsqlParser::R_idContext* tsqlParser::Procedure_paramContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tree::TerminalNode* tsqlParser::Procedure_paramContext::DOT() {
  return getToken(tsqlParser::DOT, 0);
}

tree::TerminalNode* tsqlParser::Procedure_paramContext::AS() {
  return getToken(tsqlParser::AS, 0);
}

tree::TerminalNode* tsqlParser::Procedure_paramContext::VARYING() {
  return getToken(tsqlParser::VARYING, 0);
}

tree::TerminalNode* tsqlParser::Procedure_paramContext::EQUAL() {
  return getToken(tsqlParser::EQUAL, 0);
}

tsqlParser::Default_valueContext* tsqlParser::Procedure_paramContext::default_value() {
  return getRuleContext<tsqlParser::Default_valueContext>(0);
}

tree::TerminalNode* tsqlParser::Procedure_paramContext::OUT() {
  return getToken(tsqlParser::OUT, 0);
}

tree::TerminalNode* tsqlParser::Procedure_paramContext::OUTPUT() {
  return getToken(tsqlParser::OUTPUT, 0);
}

tree::TerminalNode* tsqlParser::Procedure_paramContext::READONLY() {
  return getToken(tsqlParser::READONLY, 0);
}


size_t tsqlParser::Procedure_paramContext::getRuleIndex() const {
  return tsqlParser::RuleProcedure_param;
}


std::any tsqlParser::Procedure_paramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitProcedure_param(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Procedure_paramContext* tsqlParser::procedure_param() {
  Procedure_paramContext *_localctx = _tracker.createInstance<Procedure_paramContext>(_ctx, getState());
  enterRule(_localctx, 400, tsqlParser::RuleProcedure_param);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3634);
    match(tsqlParser::LOCAL_ID);
    setState(3638);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 511, _ctx)) {
    case 1: {
      setState(3635);
      r_id();
      setState(3636);
      match(tsqlParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(3641);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::AS) {
      setState(3640);
      match(tsqlParser::AS);
    }
    setState(3643);
    data_type();
    setState(3645);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::VARYING) {
      setState(3644);
      match(tsqlParser::VARYING);
    }
    setState(3649);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == tsqlParser::EQUAL) {
      setState(3647);
      match(tsqlParser::EQUAL);
      setState(3648);
      antlrcpp::downCast<Procedure_paramContext *>(_localctx)->default_val = default_value();
    }
    setState(3652);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la - 352) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 352)) & 131075) != 0) {
      setState(3651);
      _la = _input->LA(1);
      if (!((((_la - 352) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 352)) & 131075) != 0)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Procedure_optionContext ------------------------------------------------------------------

tsqlParser::Procedure_optionContext::Procedure_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Procedure_optionContext::ENCRYPTION() {
  return getToken(tsqlParser::ENCRYPTION, 0);
}

tree::TerminalNode* tsqlParser::Procedure_optionContext::RECOMPILE() {
  return getToken(tsqlParser::RECOMPILE, 0);
}

tsqlParser::Execute_clauseContext* tsqlParser::Procedure_optionContext::execute_clause() {
  return getRuleContext<tsqlParser::Execute_clauseContext>(0);
}


size_t tsqlParser::Procedure_optionContext::getRuleIndex() const {
  return tsqlParser::RuleProcedure_option;
}


std::any tsqlParser::Procedure_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitProcedure_option(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Procedure_optionContext* tsqlParser::procedure_option() {
  Procedure_optionContext *_localctx = _tracker.createInstance<Procedure_optionContext>(_ctx, getState());
  enterRule(_localctx, 402, tsqlParser::RuleProcedure_option);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3657);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::ENCRYPTION: {
        enterOuterAlt(_localctx, 1);
        setState(3654);
        match(tsqlParser::ENCRYPTION);
        break;
      }

      case tsqlParser::RECOMPILE: {
        enterOuterAlt(_localctx, 2);
        setState(3655);
        match(tsqlParser::RECOMPILE);
        break;
      }

      case tsqlParser::EXECUTE: {
        enterOuterAlt(_localctx, 3);
        setState(3656);
        execute_clause();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_optionContext ------------------------------------------------------------------

tsqlParser::Function_optionContext::Function_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Function_optionContext::ENCRYPTION() {
  return getToken(tsqlParser::ENCRYPTION, 0);
}

tree::TerminalNode* tsqlParser::Function_optionContext::SCHEMABINDING() {
  return getToken(tsqlParser::SCHEMABINDING, 0);
}

tree::TerminalNode* tsqlParser::Function_optionContext::RETURNS() {
  return getToken(tsqlParser::RETURNS, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Function_optionContext::NULL_() {
  return getTokens(tsqlParser::NULL_);
}

tree::TerminalNode* tsqlParser::Function_optionContext::NULL_(size_t i) {
  return getToken(tsqlParser::NULL_, i);
}

tree::TerminalNode* tsqlParser::Function_optionContext::ON() {
  return getToken(tsqlParser::ON, 0);
}

tree::TerminalNode* tsqlParser::Function_optionContext::INPUT() {
  return getToken(tsqlParser::INPUT, 0);
}

tree::TerminalNode* tsqlParser::Function_optionContext::CALLED() {
  return getToken(tsqlParser::CALLED, 0);
}

tsqlParser::Execute_clauseContext* tsqlParser::Function_optionContext::execute_clause() {
  return getRuleContext<tsqlParser::Execute_clauseContext>(0);
}


size_t tsqlParser::Function_optionContext::getRuleIndex() const {
  return tsqlParser::RuleFunction_option;
}


std::any tsqlParser::Function_optionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitFunction_option(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Function_optionContext* tsqlParser::function_option() {
  Function_optionContext *_localctx = _tracker.createInstance<Function_optionContext>(_ctx, getState());
  enterRule(_localctx, 404, tsqlParser::RuleFunction_option);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3671);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case tsqlParser::ENCRYPTION: {
        enterOuterAlt(_localctx, 1);
        setState(3659);
        match(tsqlParser::ENCRYPTION);
        break;
      }

      case tsqlParser::SCHEMABINDING: {
        enterOuterAlt(_localctx, 2);
        setState(3660);
        match(tsqlParser::SCHEMABINDING);
        break;
      }

      case tsqlParser::RETURNS: {
        enterOuterAlt(_localctx, 3);
        setState(3661);
        match(tsqlParser::RETURNS);
        setState(3662);
        match(tsqlParser::NULL_);
        setState(3663);
        match(tsqlParser::ON);
        setState(3664);
        match(tsqlParser::NULL_);
        setState(3665);
        match(tsqlParser::INPUT);
        break;
      }

      case tsqlParser::CALLED: {
        enterOuterAlt(_localctx, 4);
        setState(3666);
        match(tsqlParser::CALLED);
        setState(3667);
        match(tsqlParser::ON);
        setState(3668);
        match(tsqlParser::NULL_);
        setState(3669);
        match(tsqlParser::INPUT);
        break;
      }

      case tsqlParser::EXECUTE: {
        enterOuterAlt(_localctx, 5);
        setState(3670);
        execute_clause();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Percentile_contContext ------------------------------------------------------------------

tsqlParser::Percentile_contContext::Percentile_contContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::Percentile_contContext::PERCENTILE_CONT() {
  return getToken(tsqlParser::PERCENTILE_CONT, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Percentile_contContext::LR_BRACKET() {
  return getTokens(tsqlParser::LR_BRACKET);
}

tree::TerminalNode* tsqlParser::Percentile_contContext::LR_BRACKET(size_t i) {
  return getToken(tsqlParser::LR_BRACKET, i);
}

tsqlParser::ExpressionContext* tsqlParser::Percentile_contContext::expression() {
  return getRuleContext<tsqlParser::ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> tsqlParser::Percentile_contContext::RR_BRACKET() {
  return getTokens(tsqlParser::RR_BRACKET);
}

tree::TerminalNode* tsqlParser::Percentile_contContext::RR_BRACKET(size_t i) {
  return getToken(tsqlParser::RR_BRACKET, i);
}

tree::TerminalNode* tsqlParser::Percentile_contContext::WITHIN() {
  return getToken(tsqlParser::WITHIN, 0);
}

tree::TerminalNode* tsqlParser::Percentile_contContext::GROUP() {
  return getToken(tsqlParser::GROUP, 0);
}

tsqlParser::Order_by_clauseContext* tsqlParser::Percentile_contContext::order_by_clause() {
  return getRuleContext<tsqlParser::Order_by_clauseContext>(0);
}

tsqlParser::Over_clauseContext* tsqlParser::Percentile_contContext::over_clause() {
  return getRuleContext<tsqlParser::Over_clauseContext>(0);
}


size_t tsqlParser::Percentile_contContext::getRuleIndex() const {
  return tsqlParser::RulePercentile_cont;
}


std::any tsqlParser::Percentile_contContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitPercentile_cont(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Percentile_contContext* tsqlParser::percentile_cont() {
  Percentile_contContext *_localctx = _tracker.createInstance<Percentile_contContext>(_ctx, getState());
  enterRule(_localctx, 406, tsqlParser::RulePercentile_cont);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3673);
    match(tsqlParser::PERCENTILE_CONT);
    setState(3674);
    match(tsqlParser::LR_BRACKET);
    setState(3675);
    expression(0);
    setState(3676);
    match(tsqlParser::RR_BRACKET);
    setState(3677);
    match(tsqlParser::WITHIN);
    setState(3678);
    match(tsqlParser::GROUP);
    setState(3679);
    match(tsqlParser::LR_BRACKET);
    setState(3680);
    order_by_clause();
    setState(3681);
    match(tsqlParser::RR_BRACKET);
    setState(3682);
    over_clause();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- String_aggContext ------------------------------------------------------------------

tsqlParser::String_aggContext::String_aggContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* tsqlParser::String_aggContext::STRING_AGG() {
  return getToken(tsqlParser::STRING_AGG, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::String_aggContext::LR_BRACKET() {
  return getTokens(tsqlParser::LR_BRACKET);
}

tree::TerminalNode* tsqlParser::String_aggContext::LR_BRACKET(size_t i) {
  return getToken(tsqlParser::LR_BRACKET, i);
}

std::vector<tsqlParser::ExpressionContext *> tsqlParser::String_aggContext::expression() {
  return getRuleContexts<tsqlParser::ExpressionContext>();
}

tsqlParser::ExpressionContext* tsqlParser::String_aggContext::expression(size_t i) {
  return getRuleContext<tsqlParser::ExpressionContext>(i);
}

tree::TerminalNode* tsqlParser::String_aggContext::COMMA() {
  return getToken(tsqlParser::COMMA, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::String_aggContext::RR_BRACKET() {
  return getTokens(tsqlParser::RR_BRACKET);
}

tree::TerminalNode* tsqlParser::String_aggContext::RR_BRACKET(size_t i) {
  return getToken(tsqlParser::RR_BRACKET, i);
}

tree::TerminalNode* tsqlParser::String_aggContext::WITHIN() {
  return getToken(tsqlParser::WITHIN, 0);
}

tree::TerminalNode* tsqlParser::String_aggContext::GROUP() {
  return getToken(tsqlParser::GROUP, 0);
}

tsqlParser::Order_by_clauseContext* tsqlParser::String_aggContext::order_by_clause() {
  return getRuleContext<tsqlParser::Order_by_clauseContext>(0);
}


size_t tsqlParser::String_aggContext::getRuleIndex() const {
  return tsqlParser::RuleString_agg;
}


std::any tsqlParser::String_aggContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitString_agg(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::String_aggContext* tsqlParser::string_agg() {
  String_aggContext *_localctx = _tracker.createInstance<String_aggContext>(_ctx, getState());
  enterRule(_localctx, 408, tsqlParser::RuleString_agg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3684);
    match(tsqlParser::STRING_AGG);
    setState(3685);
    match(tsqlParser::LR_BRACKET);
    setState(3686);
    expression(0);
    setState(3687);
    match(tsqlParser::COMMA);
    setState(3688);
    expression(0);
    setState(3689);
    match(tsqlParser::RR_BRACKET);
    setState(3690);
    match(tsqlParser::WITHIN);
    setState(3691);
    match(tsqlParser::GROUP);
    setState(3692);
    match(tsqlParser::LR_BRACKET);
    setState(3693);
    order_by_clause();
    setState(3694);
    match(tsqlParser::RR_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Data_typeContext ------------------------------------------------------------------

tsqlParser::Data_typeContext::Data_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tsqlParser::R_idContext* tsqlParser::Data_typeContext::r_id() {
  return getRuleContext<tsqlParser::R_idContext>(0);
}

tree::TerminalNode* tsqlParser::Data_typeContext::IDENTITY() {
  return getToken(tsqlParser::IDENTITY, 0);
}

tree::TerminalNode* tsqlParser::Data_typeContext::LR_BRACKET() {
  return getToken(tsqlParser::LR_BRACKET, 0);
}

tree::TerminalNode* tsqlParser::Data_typeContext::RR_BRACKET() {
  return getToken(tsqlParser::RR_BRACKET, 0);
}

std::vector<tree::TerminalNode *> tsqlParser::Data_typeContext::DECIMAL() {
  return getTokens(tsqlParser::DECIMAL);
}

tree::TerminalNode* tsqlParser::Data_typeContext::DECIMAL(size_t i) {
  return getToken(tsqlParser::DECIMAL, i);
}

tree::TerminalNode* tsqlParser::Data_typeContext::MAX() {
  return getToken(tsqlParser::MAX, 0);
}

tree::TerminalNode* tsqlParser::Data_typeContext::COMMA() {
  return getToken(tsqlParser::COMMA, 0);
}

tree::TerminalNode* tsqlParser::Data_typeContext::DATE() {
  return getToken(tsqlParser::DATE, 0);
}

tree::TerminalNode* tsqlParser::Data_typeContext::DATETIME2() {
  return getToken(tsqlParser::DATETIME2, 0);
}

tree::TerminalNode* tsqlParser::Data_typeContext::DOUBLE() {
  return getToken(tsqlParser::DOUBLE, 0);
}

tree::TerminalNode* tsqlParser::Data_typeContext::PRECISION() {
  return getToken(tsqlParser::PRECISION, 0);
}

tree::TerminalNode* tsqlParser::Data_typeContext::INT() {
  return getToken(tsqlParser::INT, 0);
}

tree::TerminalNode* tsqlParser::Data_typeContext::TINYINT() {
  return getToken(tsqlParser::TINYINT, 0);
}

tree::TerminalNode* tsqlParser::Data_typeContext::SMALLINT() {
  return getToken(tsqlParser::SMALLINT, 0);
}

tree::TerminalNode* tsqlParser::Data_typeContext::BIGINT() {
  return getToken(tsqlParser::BIGINT, 0);
}


size_t tsqlParser::Data_typeContext::getRuleIndex() const {
  return tsqlParser::RuleData_type;
}


std::any tsqlParser::Data_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<tsqlVisitor*>(visitor))
    return parserVisitor->visitData_type(this);
  else
    return visitor->visitChildren(this);
}

tsqlParser::Data_typeContext* tsqlParser::data_type() {
  Data_typeContext *_localctx = _tracker.createInstance<Data_typeContext>(_ctx, getState());
  enterRule(_localctx, 410, tsqlParser::RuleData_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3722);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 522, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3696);
      r_id();
      setState(3698);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 518, _ctx)) {
      case 1: {
        setState(3697);
        match(tsqlParser::IDENTITY);
        break;
      }

      default:
        break;
      }
      setState(3707);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 520, _ctx)) {
      case 1: {
        setState(3700);
        match(tsqlParser::LR_BRACKET);
        setState(3701);
        _la = _input->LA(1);
        if (!(_la == tsqlParser::MAX || _la == tsqlParser::DECIMAL)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(3704);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == tsqlParser::COMMA) {
          setState(3702);
          match(tsqlParser::COMMA);
          setState(3703);
          match(tsqlParser::DECIMAL);
        }
        setState(3706);
        match(tsqlParser::RR_BRACKET);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3709);
      match(tsqlParser::DATE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3710);
      match(tsqlParser::DATETIME2);
      setState(3711);
      match(tsqlParser::LR_BRACKET);
      setState(3712);
      match(tsqlParser::DECIMAL);
      setState(3713);
      match(tsqlParser::RR_BRACKET);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3714);
      match(tsqlParser::DOUBLE);
      setState(3716);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == tsqlParser::PRECISION) {
        setState(3715);
        match(tsqlParser::PRECISION);
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3718);
      match(tsqlParser::INT);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(3719);
      match(tsqlParser::TINYINT);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(3720);
      match(tsqlParser::SMALLINT);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(3721);
      match(tsqlParser::BIGINT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool tsqlParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 104: return expressionSempred(antlrcpp::downCast<ExpressionContext *>(context), predicateIndex);
    case 113: return search_conditionSempred(antlrcpp::downCast<Search_conditionContext *>(context), predicateIndex);
    case 115: return query_expressionSempred(antlrcpp::downCast<Query_expressionContext *>(context), predicateIndex);
    case 135: return table_sourceSempred(antlrcpp::downCast<Table_sourceContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool tsqlParser::expressionSempred(ExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 15);
    case 1: return precpred(_ctx, 8);
    case 2: return precpred(_ctx, 6);
    case 3: return precpred(_ctx, 5);
    case 4: return precpred(_ctx, 16);
    case 5: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool tsqlParser::search_conditionSempred(Search_conditionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 6: return precpred(_ctx, 3);
    case 7: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool tsqlParser::query_expressionSempred(Query_expressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 8: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool tsqlParser::table_sourceSempred(Table_sourceContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 9: return precpred(_ctx, 3);
    case 10: return precpred(_ctx, 2);
    case 11: return precpred(_ctx, 4);

  default:
    break;
  }
  return true;
}

void tsqlParser::initialize() {
  ::antlr4::internal::call_once(tsqlParserOnceFlag, tsqlParserInitialize);
}
