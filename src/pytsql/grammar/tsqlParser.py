# Generated from tsql.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,485,3725,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,1,0,5,0,414,8,0,10,0,12,0,417,
        9,0,1,0,1,0,1,1,3,1,422,8,1,1,1,1,1,3,1,426,8,1,1,2,1,2,3,2,430,
        8,2,4,2,432,8,2,11,2,12,2,433,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,443,
        8,3,1,4,1,4,1,4,1,4,3,4,449,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,473,
        8,5,1,6,1,6,1,6,1,6,3,6,479,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,
        488,8,7,1,8,1,8,3,8,492,8,8,1,8,3,8,495,8,8,1,8,1,8,3,8,499,8,8,
        1,9,1,9,3,9,503,8,9,1,10,1,10,3,10,507,8,10,1,11,1,11,1,11,3,11,
        512,8,11,1,11,1,11,1,11,3,11,517,8,11,3,11,519,8,11,1,12,1,12,1,
        12,1,12,1,13,1,13,1,13,3,13,528,8,13,1,13,3,13,531,8,13,1,13,1,13,
        1,13,3,13,536,8,13,1,13,3,13,539,8,13,3,13,541,8,13,1,14,1,14,3,
        14,545,8,14,1,14,3,14,548,8,14,1,15,1,15,1,15,1,15,1,15,1,15,3,15,
        556,8,15,1,15,3,15,559,8,15,1,16,1,16,1,16,3,16,564,8,16,1,16,3,
        16,567,8,16,1,16,1,16,1,16,3,16,572,8,16,1,16,1,16,1,16,3,16,577,
        8,16,1,16,3,16,580,8,16,1,16,1,16,1,16,3,16,585,8,16,1,17,1,17,1,
        17,1,17,3,17,591,8,17,1,18,1,18,1,18,1,18,1,18,3,18,598,8,18,1,18,
        1,18,3,18,602,8,18,3,18,604,8,18,1,19,1,19,1,19,3,19,609,8,19,1,
        20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,5,20,620,8,20,10,20,12,
        20,623,9,20,1,20,1,20,3,20,627,8,20,1,21,1,21,1,21,1,21,1,21,1,21,
        3,21,635,8,21,1,22,3,22,638,8,22,1,22,1,22,3,22,642,8,22,1,22,3,
        22,645,8,22,1,22,1,22,3,22,649,8,22,1,22,3,22,652,8,22,1,22,1,22,
        3,22,656,8,22,1,22,3,22,659,8,22,1,22,3,22,662,8,22,1,22,3,22,665,
        8,22,1,22,3,22,668,8,22,1,23,1,23,3,23,672,8,23,1,23,1,23,1,23,3,
        23,677,8,23,1,24,3,24,680,8,24,1,24,1,24,3,24,684,8,24,1,24,3,24,
        687,8,24,1,24,1,24,3,24,691,8,24,1,24,3,24,694,8,24,1,24,1,24,3,
        24,698,8,24,1,24,1,24,1,24,1,24,3,24,704,8,24,1,24,3,24,707,8,24,
        1,24,1,24,3,24,711,8,24,1,24,3,24,714,8,24,1,24,3,24,717,8,24,1,
        25,1,25,1,25,1,25,1,25,3,25,724,8,25,1,26,3,26,727,8,26,1,26,1,26,
        3,26,731,8,26,1,26,3,26,734,8,26,1,26,3,26,737,8,26,1,26,3,26,740,
        8,26,1,27,3,27,743,8,27,1,27,1,27,3,27,747,8,27,1,27,1,27,3,27,751,
        8,27,1,27,3,27,754,8,27,1,27,1,27,1,27,1,27,5,27,760,8,27,10,27,
        12,27,763,9,27,1,27,3,27,766,8,27,1,27,1,27,3,27,770,8,27,1,27,3,
        27,773,8,27,1,27,3,27,776,8,27,1,27,3,27,779,8,27,1,27,3,27,782,
        8,27,1,28,1,28,1,28,1,28,1,28,3,28,789,8,28,1,28,1,28,3,28,793,8,
        28,3,28,795,8,28,1,29,1,29,1,29,1,29,5,29,801,8,29,10,29,12,29,804,
        9,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,812,8,29,3,29,814,8,29,1,
        30,1,30,3,30,818,8,30,1,30,3,30,821,8,30,1,30,3,30,824,8,30,1,31,
        1,31,1,31,3,31,829,8,31,1,31,1,31,1,31,3,31,834,8,31,1,31,3,31,837,
        8,31,1,32,1,32,1,32,1,32,1,32,1,32,3,32,845,8,32,1,32,1,32,3,32,
        849,8,32,1,32,1,32,1,32,5,32,854,8,32,10,32,12,32,857,9,32,3,32,
        859,8,32,1,32,1,32,1,32,1,32,1,32,5,32,866,8,32,10,32,12,32,869,
        9,32,3,32,871,8,32,1,32,1,32,3,32,875,8,32,1,32,1,32,1,32,1,32,5,
        32,881,8,32,10,32,12,32,884,9,32,3,32,886,8,32,1,33,1,33,3,33,890,
        8,33,1,33,3,33,893,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,
        902,8,33,1,33,1,33,1,33,1,33,1,33,3,33,909,8,33,1,33,1,33,3,33,913,
        8,33,1,33,1,33,3,33,917,8,33,1,33,3,33,920,8,33,1,33,1,33,3,33,924,
        8,33,1,33,3,33,927,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,1,34,1,34,1,34,3,34,943,8,34,1,34,1,34,3,34,947,8,
        34,1,34,1,34,1,34,1,34,3,34,953,8,34,3,34,955,8,34,1,34,3,34,958,
        8,34,1,35,1,35,1,35,1,35,1,35,1,35,3,35,966,8,35,1,35,1,35,1,35,
        1,35,3,35,972,8,35,1,35,1,35,1,35,3,35,977,8,35,1,35,3,35,980,8,
        35,1,36,1,36,1,36,1,36,3,36,986,8,36,1,37,1,37,1,37,1,37,1,37,1,
        37,3,37,994,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,1003,8,
        38,1,38,1,38,1,38,1,38,5,38,1009,8,38,10,38,12,38,1012,9,38,3,38,
        1014,8,38,1,38,1,38,1,38,1,38,1,38,3,38,1021,8,38,1,38,3,38,1024,
        8,38,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
        3,40,1064,8,40,1,40,3,40,1067,8,40,1,41,1,41,1,41,1,41,3,41,1073,
        8,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,1085,
        8,41,3,41,1087,8,41,1,41,3,41,1090,8,41,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,3,42,1114,8,42,1,43,1,43,1,43,1,43,1,43,1,43,
        1,43,1,43,1,43,3,43,1125,8,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,
        1133,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,1142,8,44,10,44,
        12,44,1145,9,44,5,44,1147,8,44,10,44,12,44,1150,9,44,3,44,1152,8,
        44,1,45,1,45,1,45,1,45,1,45,1,45,3,45,1160,8,45,1,46,1,46,1,46,1,
        46,1,47,1,47,1,47,1,47,3,47,1170,8,47,1,48,1,48,1,48,1,49,1,49,1,
        49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,
        54,1,54,1,54,1,54,1,54,1,54,3,54,1196,8,54,1,54,1,54,1,54,1,54,3,
        54,1202,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,1213,
        8,54,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,1,58,
        1,58,1,58,1,58,1,58,1,58,3,58,1232,8,58,1,59,1,59,1,59,1,59,1,59,
        1,59,3,59,1240,8,59,1,60,1,60,1,60,1,60,1,60,3,60,1247,8,60,1,61,
        1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
        1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,1270,8,61,1,62,1,62,1,62,
        1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,3,63,1283,8,63,1,64,1,64,
        1,64,1,64,3,64,1289,8,64,1,64,1,64,1,64,3,64,1294,8,64,1,64,3,64,
        1297,8,64,1,65,1,65,1,65,1,65,3,65,1303,8,65,1,65,1,65,3,65,1307,
        8,65,1,66,1,66,1,66,1,66,1,66,3,66,1314,8,66,1,66,1,66,3,66,1318,
        8,66,1,67,1,67,1,67,1,67,3,67,1324,8,67,1,67,1,67,3,67,1328,8,67,
        1,68,1,68,1,68,1,68,3,68,1334,8,68,1,68,1,68,3,68,1338,8,68,1,68,
        3,68,1341,8,68,1,69,1,69,1,69,1,69,3,69,1347,8,69,1,69,1,69,3,69,
        1351,8,69,1,70,1,70,1,70,1,70,3,70,1357,8,70,1,70,1,70,1,70,5,70,
        1362,8,70,10,70,12,70,1365,9,70,1,70,3,70,1368,8,70,1,71,1,71,1,
        71,1,71,3,71,1374,8,71,1,71,1,71,3,71,1378,8,71,1,72,1,72,1,72,1,
        72,3,72,1384,8,72,1,72,1,72,3,72,1388,8,72,1,73,1,73,1,73,1,73,1,
        73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1405,8,
        73,1,73,1,73,3,73,1409,8,73,1,74,1,74,1,74,1,74,3,74,1415,8,74,1,
        74,1,74,1,75,1,75,3,75,1421,8,75,1,76,1,76,1,76,1,76,1,76,1,76,1,
        76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1438,8,77,1,77,1,
        77,3,77,1442,8,77,1,77,1,77,1,77,1,78,1,78,1,78,3,78,1450,8,78,1,
        78,1,78,3,78,1454,8,78,1,78,3,78,1457,8,78,1,78,1,78,1,78,1,78,5,
        78,1463,8,78,10,78,12,78,1466,9,78,1,78,3,78,1469,8,78,3,78,1471,
        8,78,1,79,1,79,3,79,1475,8,79,1,79,1,79,3,79,1479,8,79,1,79,1,79,
        3,79,1483,8,79,1,79,1,79,3,79,1487,8,79,1,79,1,79,1,79,1,79,3,79,
        1493,8,79,1,79,1,79,3,79,1497,8,79,3,79,1499,8,79,1,80,1,80,1,80,
        3,80,1504,8,80,1,80,1,80,1,80,1,80,5,80,1510,8,80,10,80,12,80,1513,
        9,80,3,80,1515,8,80,1,80,3,80,1518,8,80,1,80,1,80,1,80,1,80,1,80,
        5,80,1525,8,80,10,80,12,80,1528,9,80,1,80,1,80,3,80,1532,8,80,1,
        80,1,80,1,80,3,80,1537,8,80,1,80,3,80,1540,8,80,3,80,1542,8,80,1,
        81,1,81,3,81,1546,8,81,1,81,1,81,3,81,1550,8,81,1,81,3,81,1553,8,
        81,1,81,1,81,3,81,1557,8,81,1,82,1,82,1,83,1,83,3,83,1563,8,83,1,
        83,1,83,1,83,3,83,1568,8,83,1,83,1,83,1,83,1,83,1,83,3,83,1575,8,
        83,3,83,1577,8,83,1,83,1,83,3,83,1581,8,83,1,83,1,83,1,83,1,83,1,
        83,3,83,1588,8,83,1,83,1,83,3,83,1592,8,83,1,83,3,83,1595,8,83,1,
        83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1604,8,83,1,83,3,83,1607,8,
        83,3,83,1609,8,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1618,8,
        84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1629,8,84,1,
        84,1,84,3,84,1633,8,84,3,84,1635,8,84,3,84,1637,8,84,1,85,1,85,1,
        85,1,85,3,85,1643,8,85,1,85,1,85,1,85,3,85,1648,8,85,1,85,1,85,1,
        85,1,85,1,85,3,85,1655,8,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,
        85,1,85,1,85,1,85,3,85,1668,8,85,3,85,1670,8,85,3,85,1672,8,85,1,
        85,3,85,1675,8,85,1,85,3,85,1678,8,85,1,86,1,86,1,86,1,86,1,86,3,
        86,1685,8,86,1,86,3,86,1688,8,86,1,86,1,86,1,86,1,86,3,86,1694,8,
        86,1,86,1,86,1,86,3,86,1699,8,86,3,86,1701,8,86,1,86,3,86,1704,8,
        86,1,86,1,86,1,86,1,86,3,86,1710,8,86,1,86,1,86,1,86,1,86,1,86,1,
        86,3,86,1718,8,86,3,86,1720,8,86,1,86,3,86,1723,8,86,1,86,1,86,3,
        86,1727,8,86,1,86,3,86,1730,8,86,1,86,1,86,1,86,1,86,3,86,1736,8,
        86,1,86,3,86,1739,8,86,1,86,1,86,3,86,1743,8,86,1,86,3,86,1746,8,
        86,1,86,1,86,1,86,1,86,3,86,1752,8,86,1,86,3,86,1755,8,86,3,86,1757,
        8,86,1,87,1,87,3,87,1761,8,87,1,88,1,88,1,88,3,88,1766,8,88,1,89,
        1,89,1,89,1,89,1,90,1,90,3,90,1774,8,90,1,90,1,90,1,90,3,90,1779,
        8,90,1,91,1,91,1,91,1,91,1,91,1,92,1,92,3,92,1788,8,92,1,92,5,92,
        1791,8,92,10,92,12,92,1794,9,92,1,93,1,93,3,93,1798,8,93,1,94,1,
        94,1,94,1,94,3,94,1804,8,94,1,94,1,94,3,94,1808,8,94,1,94,3,94,1811,
        8,94,1,94,1,94,3,94,1815,8,94,1,94,1,94,1,94,1,94,3,94,1821,8,94,
        1,94,1,94,1,94,1,94,1,94,1,94,3,94,1829,8,94,1,94,1,94,1,94,3,94,
        1834,8,94,3,94,1836,8,94,1,94,3,94,1839,8,94,1,94,5,94,1842,8,94,
        10,94,12,94,1845,9,94,1,95,1,95,3,95,1849,8,95,1,95,3,95,1852,8,
        95,1,95,1,95,1,95,3,95,1857,8,95,1,95,3,95,1860,8,95,1,95,3,95,1863,
        8,95,1,95,1,95,1,95,1,95,3,95,1869,8,95,1,95,1,95,1,95,1,95,3,95,
        1875,8,95,1,96,1,96,3,96,1879,8,96,1,96,1,96,1,96,3,96,1884,8,96,
        1,96,3,96,1887,8,96,1,96,1,96,1,96,3,96,1892,8,96,1,96,1,96,1,96,
        3,96,1897,8,96,5,96,1899,8,96,10,96,12,96,1902,9,96,1,96,1,96,3,
        96,1906,8,96,1,96,1,96,3,96,1910,8,96,1,96,1,96,1,96,1,96,1,96,1,
        96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,1927,8,96,1,
        96,1,96,1,96,1,96,3,96,1933,8,96,1,97,1,97,1,97,1,97,1,97,5,97,1940,
        8,97,10,97,12,97,1943,9,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,3,
        98,1952,8,98,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1962,8,
        99,3,99,1964,8,99,3,99,1966,8,99,1,99,3,99,1969,8,99,1,99,3,99,1972,
        8,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1983,8,99,
        3,99,1985,8,99,3,99,1987,8,99,1,99,3,99,1990,8,99,1,100,3,100,1993,
        8,100,1,100,3,100,1996,8,100,1,100,3,100,1999,8,100,1,100,3,100,
        2002,8,100,1,100,3,100,2005,8,100,1,100,1,100,1,100,1,101,1,101,
        1,101,1,101,1,101,1,101,1,101,3,101,2017,8,101,1,101,3,101,2020,
        8,101,1,101,3,101,2023,8,101,1,101,1,101,1,101,1,101,1,101,5,101,
        2030,8,101,10,101,12,101,2033,9,101,3,101,2035,8,101,1,101,3,101,
        2038,8,101,1,102,1,102,1,102,1,102,1,102,3,102,2045,8,102,1,102,
        3,102,2048,8,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
        1,102,1,102,1,102,1,102,3,102,2062,8,102,1,102,3,102,2065,8,102,
        1,102,1,102,1,102,1,102,1,102,3,102,2072,8,102,1,102,1,102,1,102,
        1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,
        2087,8,102,1,103,1,103,3,103,2091,8,103,1,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,4,104,2102,8,104,11,104,12,104,2103,
        1,104,1,104,3,104,2108,8,104,1,104,1,104,1,104,1,104,4,104,2114,
        8,104,11,104,12,104,2115,1,104,1,104,3,104,2120,8,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,3,104,2140,8,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,1,104,1,104,5,104,2163,8,104,10,104,
        12,104,2166,9,104,1,105,1,105,1,105,3,105,2171,8,105,1,105,1,105,
        1,105,1,105,1,105,3,105,2178,8,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,3,105,2187,8,105,1,106,1,106,1,107,1,107,1,107,1,107,
        1,107,1,107,1,107,1,107,3,107,2199,8,107,1,108,1,108,1,109,1,109,
        1,109,3,109,2206,8,109,1,109,1,109,1,109,5,109,2211,8,109,10,109,
        12,109,2214,9,109,1,110,1,110,1,110,1,110,1,110,3,110,2221,8,110,
        1,110,1,110,1,110,1,110,1,110,1,111,1,111,3,111,2230,8,111,1,111,
        1,111,3,111,2234,8,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,
        1,111,3,111,2244,8,111,1,112,1,112,1,112,5,112,2249,8,112,10,112,
        12,112,2252,9,112,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
        1,113,5,113,2263,8,113,10,113,12,113,2266,9,113,1,114,1,114,1,114,
        1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,
        1,114,1,114,1,114,1,114,1,114,1,114,3,114,2288,8,114,1,114,1,114,
        1,114,1,114,1,114,1,114,1,114,3,114,2297,8,114,1,114,1,114,1,114,
        1,114,3,114,2303,8,114,1,114,1,114,1,114,1,114,3,114,2309,8,114,
        1,114,1,114,1,114,1,114,3,114,2315,8,114,1,114,1,114,1,114,1,114,
        1,114,1,114,1,114,1,114,1,114,3,114,2326,8,114,1,115,1,115,1,115,
        1,115,1,115,1,115,3,115,2334,8,115,1,115,1,115,1,115,1,115,5,115,
        2340,8,115,10,115,12,115,2343,9,115,1,116,1,116,3,116,2347,8,116,
        1,116,1,116,3,116,2351,8,116,1,117,1,117,1,117,1,117,1,117,1,117,
        1,117,3,117,2360,8,117,1,118,1,118,3,118,2364,8,118,1,118,3,118,
        2367,8,118,1,118,1,118,1,118,3,118,2372,8,118,1,118,1,118,3,118,
        2376,8,118,1,118,1,118,1,118,1,118,3,118,2382,8,118,3,118,2384,8,
        118,1,118,1,118,3,118,2388,8,118,1,118,1,118,1,118,1,118,1,118,5,
        118,2395,8,118,10,118,12,118,2398,9,118,3,118,2400,8,118,1,118,3,
        118,2403,8,118,1,118,1,118,3,118,2407,8,118,1,118,1,118,3,118,2411,
        8,118,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,5,119,2421,
        8,119,10,119,12,119,2424,9,119,1,119,1,119,1,120,1,120,1,120,1,120,
        1,120,1,120,1,120,5,120,2435,8,120,10,120,12,120,2438,9,120,1,120,
        1,120,3,120,2442,8,120,1,121,1,121,1,121,3,121,2447,8,121,1,121,
        1,121,3,121,2451,8,121,1,122,1,122,1,122,1,122,1,122,3,122,2458,
        8,122,1,123,1,123,1,123,1,123,1,123,5,123,2465,8,123,10,123,12,123,
        2468,9,123,1,123,1,123,1,123,1,123,3,123,2474,8,123,3,123,2476,8,
        123,1,124,1,124,1,124,1,124,1,124,1,124,1,125,1,125,1,125,1,125,
        1,125,1,125,3,125,2490,8,125,1,125,1,125,1,125,1,125,1,125,1,125,
        3,125,2498,8,125,1,125,3,125,2501,8,125,3,125,2503,8,125,1,126,1,
        126,1,126,1,126,1,126,3,126,2510,8,126,1,127,1,127,3,127,2514,8,
        127,1,128,1,128,1,129,1,129,1,129,1,129,1,129,5,129,2523,8,129,10,
        129,12,129,2526,9,129,1,129,1,129,1,130,1,130,1,130,1,130,1,130,
        1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,
        1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,
        5,130,2557,8,130,10,130,12,130,2560,9,130,1,130,1,130,1,130,1,130,
        1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,3,130,2575,
        8,130,1,131,1,131,1,131,1,131,3,131,2581,8,131,1,132,1,132,1,132,
        5,132,2586,8,132,10,132,12,132,2589,9,132,1,133,1,133,1,133,3,133,
        2594,8,133,1,133,1,133,1,133,3,133,2599,8,133,1,133,1,133,1,133,
        1,133,1,133,1,133,3,133,2607,8,133,1,133,3,133,2610,8,133,3,133,
        2612,8,133,1,134,1,134,1,134,5,134,2617,8,134,10,134,12,134,2620,
        9,134,1,135,1,135,1,135,1,135,1,135,1,135,3,135,2628,8,135,1,135,
        1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,
        1,135,1,135,1,135,5,135,2645,8,135,10,135,12,135,2648,9,135,1,136,
        1,136,3,136,2652,8,136,1,136,3,136,2655,8,136,1,136,3,136,2658,8,
        136,1,136,1,136,3,136,2662,8,136,1,136,1,136,1,136,3,136,2667,8,
        136,3,136,2669,8,136,1,136,1,136,3,136,2673,8,136,1,136,1,136,3,
        136,2677,8,136,1,136,1,136,3,136,2681,8,136,1,136,1,136,1,136,1,
        136,1,136,3,136,2688,8,136,3,136,2690,8,136,3,136,2692,8,136,1,137,
        1,137,3,137,2696,8,137,1,137,1,137,1,137,3,137,2701,8,137,1,137,
        1,137,1,137,3,137,2706,8,137,1,138,1,138,1,139,1,139,1,140,3,140,
        2713,8,140,1,140,1,140,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        1,141,1,142,3,142,2726,8,142,1,142,1,142,3,142,2730,8,142,3,142,
        2732,8,142,1,142,3,142,2735,8,142,1,143,1,143,3,143,2739,8,143,1,
        144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,
        1,144,1,144,1,144,1,144,1,144,5,144,2757,8,144,10,144,12,144,2760,
        9,144,1,144,3,144,2763,8,144,1,144,1,144,3,144,2767,8,144,1,145,
        1,145,1,145,1,145,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,
        1,146,1,146,1,146,3,146,2784,8,146,1,147,1,147,1,147,1,147,1,147,
        3,147,2791,8,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
        1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
        1,147,1,147,3,147,2814,8,147,1,147,1,147,1,147,1,147,1,147,1,147,
        1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
        1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
        1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
        1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
        1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
        1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
        1,147,3,147,2889,8,147,1,147,1,147,3,147,2893,8,147,1,147,1,147,
        1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
        1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
        1,147,1,147,3,147,2921,8,147,1,147,1,147,1,147,1,147,1,147,1,147,
        1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
        1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
        1,147,1,147,1,147,1,147,3,147,2955,8,147,1,147,1,147,3,147,2959,
        8,147,1,148,1,148,1,148,1,148,1,148,1,149,1,149,1,149,1,149,1,149,
        1,150,3,150,2972,8,150,1,150,1,150,1,150,1,150,5,150,2978,8,150,
        10,150,12,150,2981,9,150,1,150,1,150,1,151,1,151,1,151,1,151,1,151,
        5,151,2990,8,151,10,151,12,151,2993,9,151,1,151,1,151,1,152,3,152,
        2998,8,152,1,152,1,152,1,152,1,152,1,152,5,152,3005,8,152,10,152,
        12,152,3008,9,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,
        1,152,1,152,1,152,1,152,5,152,3022,8,152,10,152,12,152,3025,9,152,
        1,152,1,152,1,152,3,152,3030,8,152,1,152,1,152,1,152,1,152,1,152,
        1,152,3,152,3038,8,152,1,153,1,153,3,153,3042,8,153,1,154,1,154,
        1,154,1,154,5,154,3048,8,154,10,154,12,154,3051,9,154,1,154,1,154,
        1,155,1,155,3,155,3057,8,155,1,156,1,156,1,157,1,157,1,157,1,157,
        5,157,3065,8,157,10,157,12,157,3068,9,157,1,158,1,158,1,158,5,158,
        3073,8,158,10,158,12,158,3076,9,158,1,159,1,159,1,159,1,159,1,160,
        1,160,1,160,1,160,1,161,1,161,1,161,1,161,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        5,162,3105,8,162,10,162,12,162,3108,9,162,1,162,1,162,1,162,3,162,
        3113,8,162,1,163,1,163,1,163,3,163,3118,8,163,1,163,1,163,1,163,
        3,163,3123,8,163,1,163,1,163,1,163,1,163,3,163,3129,8,163,1,163,
        3,163,3132,8,163,1,163,1,163,3,163,3136,8,163,1,163,1,163,1,163,
        3,163,3141,8,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,
        1,163,1,163,1,163,1,163,1,163,3,163,3156,8,163,1,164,1,164,1,165,
        1,165,1,165,1,165,1,165,3,165,3165,8,165,1,165,3,165,3168,8,165,
        1,165,3,165,3171,8,165,1,165,1,165,1,166,1,166,1,166,1,167,1,167,
        1,167,1,167,1,167,1,167,3,167,3184,8,167,1,168,1,168,3,168,3188,
        8,168,1,169,1,169,1,169,1,169,1,169,1,169,3,169,3196,8,169,1,170,
        1,170,1,170,1,170,3,170,3202,8,170,1,171,1,171,1,171,1,171,5,171,
        3208,8,171,10,171,12,171,3211,9,171,1,171,1,171,1,171,1,171,3,171,
        3217,8,171,1,171,1,171,1,171,1,171,3,171,3223,8,171,1,171,1,171,
        1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,
        3,171,3238,8,171,1,172,1,172,1,172,1,172,1,172,1,172,1,172,3,172,
        3247,8,172,1,172,1,172,1,173,1,173,3,173,3253,8,173,1,174,1,174,
        1,174,1,174,3,174,3259,8,174,1,174,3,174,3262,8,174,1,174,1,174,
        3,174,3266,8,174,1,174,1,174,1,174,5,174,3271,8,174,10,174,12,174,
        3274,9,174,1,175,1,175,1,175,1,175,1,175,3,175,3281,8,175,1,175,
        3,175,3284,8,175,1,175,1,175,1,175,1,175,3,175,3290,8,175,1,175,
        1,175,1,175,1,175,3,175,3296,8,175,3,175,3298,8,175,1,175,1,175,
        1,175,1,175,3,175,3304,8,175,1,175,3,175,3307,8,175,3,175,3309,8,
        175,1,175,1,175,1,175,1,175,3,175,3315,8,175,3,175,3317,8,175,1,
        175,1,175,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,
        1,176,3,176,3331,8,176,1,176,1,176,1,176,1,176,1,176,3,176,3338,
        8,176,1,176,1,176,1,177,1,177,1,177,3,177,3345,8,177,1,177,1,177,
        1,178,1,178,1,178,3,178,3352,8,178,1,178,1,178,1,178,1,178,1,178,
        3,178,3359,8,178,1,178,1,178,1,179,1,179,3,179,3365,8,179,1,180,
        1,180,1,180,3,180,3370,8,180,1,180,1,180,1,181,1,181,1,181,5,181,
        3377,8,181,10,181,12,181,3380,9,181,1,182,1,182,3,182,3384,8,182,
        1,183,1,183,1,184,1,184,1,185,3,185,3391,8,185,1,185,1,185,1,186,
        1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,
        1,186,1,186,1,186,1,186,1,186,1,186,3,186,3413,8,186,1,187,1,187,
        3,187,3417,8,187,1,188,1,188,1,188,3,188,3422,8,188,1,188,1,188,
        3,188,3426,8,188,1,188,1,188,3,188,3430,8,188,1,188,1,188,3,188,
        3434,8,188,1,189,1,189,1,190,1,190,1,190,3,190,3441,8,190,1,191,
        1,191,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,
        1,192,1,192,1,192,1,192,1,192,3,192,3460,8,192,1,193,1,193,1,194,
        1,194,3,194,3466,8,194,1,195,1,195,1,195,3,195,3471,8,195,1,195,
        3,195,3474,8,195,1,195,1,195,1,195,1,195,3,195,3480,8,195,1,195,
        3,195,3483,8,195,1,195,1,195,1,195,5,195,3488,8,195,10,195,12,195,
        3491,9,195,1,195,3,195,3494,8,195,3,195,3496,8,195,1,195,1,195,1,
        195,1,195,5,195,3502,8,195,10,195,12,195,3505,9,195,3,195,3507,8,
        195,1,195,1,195,3,195,3511,8,195,1,195,1,195,1,195,1,196,1,196,1,
        196,3,196,3519,8,196,1,196,3,196,3522,8,196,1,196,1,196,1,196,1,
        196,1,196,1,196,5,196,3530,8,196,10,196,12,196,3533,9,196,1,196,
        1,196,1,196,1,196,3,196,3539,8,196,1,196,1,196,1,196,3,196,3544,
        8,196,1,196,3,196,3547,8,196,1,197,1,197,1,197,1,197,1,197,1,197,
        5,197,3555,8,197,10,197,12,197,3558,9,197,3,197,3560,8,197,1,197,
        3,197,3563,8,197,1,197,1,197,1,197,1,197,1,197,1,197,3,197,3571,
        8,197,1,198,1,198,1,198,1,198,1,198,1,198,1,198,5,198,3580,8,198,
        10,198,12,198,3583,9,198,3,198,3585,8,198,1,198,3,198,3588,8,198,
        1,198,1,198,5,198,3592,8,198,10,198,12,198,3595,9,198,1,198,1,198,
        3,198,3599,8,198,1,198,1,198,3,198,3603,8,198,1,199,1,199,1,199,
        1,199,1,199,1,199,5,199,3611,8,199,10,199,12,199,3614,9,199,3,199,
        3616,8,199,1,199,3,199,3619,8,199,1,199,1,199,5,199,3623,8,199,10,
        199,12,199,3626,9,199,1,199,1,199,1,199,3,199,3631,8,199,1,199,1,
        199,1,200,1,200,1,200,1,200,3,200,3639,8,200,1,200,3,200,3642,8,
        200,1,200,1,200,3,200,3646,8,200,1,200,1,200,3,200,3650,8,200,1,
        200,3,200,3653,8,200,1,201,1,201,1,201,3,201,3658,8,201,1,202,1,
        202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
        3,202,3672,8,202,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,
        1,203,1,203,1,203,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,
        1,204,1,204,1,204,1,204,1,205,1,205,3,205,3699,8,205,1,205,1,205,
        1,205,1,205,3,205,3705,8,205,1,205,3,205,3708,8,205,1,205,1,205,
        1,205,1,205,1,205,1,205,1,205,3,205,3717,8,205,1,205,1,205,1,205,
        1,205,3,205,3723,8,205,1,205,0,4,208,226,230,270,206,0,2,4,6,8,10,
        12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
        56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
        100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
        164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
        196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
        228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,
        260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,
        292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,
        324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,
        356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,
        388,390,392,394,396,398,400,402,404,406,408,410,0,64,1,0,448,449,
        2,0,448,448,451,451,2,0,261,261,420,420,2,0,448,449,451,451,2,0,
        111,111,130,130,2,0,7,7,51,51,2,0,131,131,386,386,3,0,272,272,389,
        389,437,437,3,0,174,174,217,217,266,266,2,0,117,117,119,119,3,0,
        257,257,297,297,329,329,2,0,290,290,317,317,3,0,270,270,346,346,
        348,348,1,0,371,372,3,0,333,333,379,379,399,399,3,0,208,208,267,
        267,286,286,2,0,286,286,397,397,3,0,78,78,228,228,397,397,3,0,111,
        111,235,235,422,422,2,0,329,329,392,392,2,0,194,194,319,319,1,0,
        352,353,2,0,174,174,198,198,1,0,180,181,4,0,229,229,354,354,393,
        393,451,451,2,0,287,287,390,390,4,0,269,269,277,277,311,311,404,
        404,3,0,350,350,371,371,391,391,2,0,206,206,376,376,2,0,307,307,
        420,420,1,0,480,481,1,0,477,479,2,0,480,481,483,485,3,0,196,196,
        274,274,365,365,3,0,2,2,5,5,169,169,2,0,2,2,53,53,2,0,246,246,381,
        381,2,0,384,384,386,386,2,0,108,108,281,281,2,0,127,127,295,295,
        3,0,106,106,239,239,295,295,3,0,106,106,295,295,320,320,2,0,84,84,
        385,385,2,0,37,37,128,128,2,0,113,113,448,449,3,0,78,78,100,100,
        152,152,4,0,106,106,295,295,320,320,377,377,2,0,449,449,451,451,
        3,0,264,264,368,368,387,387,3,0,282,282,314,314,343,343,2,0,312,
        312,315,315,6,0,224,224,322,322,328,328,406,407,410,410,434,435,
        1,0,244,245,2,0,367,367,386,386,3,0,78,78,117,117,371,371,2,0,24,
        24,110,110,1,0,453,454,2,0,449,449,453,453,57,0,71,71,73,73,108,
        108,115,115,196,196,206,206,214,214,217,217,224,225,229,231,236,
        237,239,239,241,242,244,245,249,249,261,261,263,264,266,266,269,
        269,272,272,274,277,281,282,284,288,290,290,292,293,295,295,298,
        298,300,300,304,307,309,324,328,328,332,332,334,334,337,339,341,
        341,343,344,347,354,356,356,358,359,362,365,367,369,371,371,373,
        373,376,378,380,380,382,382,384,391,393,394,397,397,400,400,402,
        407,410,410,417,420,425,425,427,431,433,441,450,450,1,0,459,466,
        5,0,289,289,308,308,326,326,416,416,479,479,1,0,137,138,2,0,352,
        353,369,369,2,0,322,322,449,449,4316,0,415,1,0,0,0,2,421,1,0,0,0,
        4,431,1,0,0,0,6,442,1,0,0,0,8,448,1,0,0,0,10,472,1,0,0,0,12,478,
        1,0,0,0,14,487,1,0,0,0,16,489,1,0,0,0,18,500,1,0,0,0,20,504,1,0,
        0,0,22,518,1,0,0,0,24,520,1,0,0,0,26,540,1,0,0,0,28,542,1,0,0,0,
        30,549,1,0,0,0,32,560,1,0,0,0,34,586,1,0,0,0,36,592,1,0,0,0,38,605,
        1,0,0,0,40,610,1,0,0,0,42,634,1,0,0,0,44,637,1,0,0,0,46,676,1,0,
        0,0,48,679,1,0,0,0,50,723,1,0,0,0,52,726,1,0,0,0,54,742,1,0,0,0,
        56,783,1,0,0,0,58,796,1,0,0,0,60,817,1,0,0,0,62,836,1,0,0,0,64,838,
        1,0,0,0,66,887,1,0,0,0,68,928,1,0,0,0,70,959,1,0,0,0,72,981,1,0,
        0,0,74,987,1,0,0,0,76,995,1,0,0,0,78,1025,1,0,0,0,80,1027,1,0,0,
        0,82,1068,1,0,0,0,84,1113,1,0,0,0,86,1132,1,0,0,0,88,1134,1,0,0,
        0,90,1159,1,0,0,0,92,1161,1,0,0,0,94,1169,1,0,0,0,96,1171,1,0,0,
        0,98,1174,1,0,0,0,100,1177,1,0,0,0,102,1179,1,0,0,0,104,1181,1,0,
        0,0,106,1183,1,0,0,0,108,1212,1,0,0,0,110,1214,1,0,0,0,112,1219,
        1,0,0,0,114,1222,1,0,0,0,116,1231,1,0,0,0,118,1239,1,0,0,0,120,1246,
        1,0,0,0,122,1269,1,0,0,0,124,1271,1,0,0,0,126,1282,1,0,0,0,128,1284,
        1,0,0,0,130,1298,1,0,0,0,132,1308,1,0,0,0,134,1319,1,0,0,0,136,1329,
        1,0,0,0,138,1342,1,0,0,0,140,1352,1,0,0,0,142,1369,1,0,0,0,144,1379,
        1,0,0,0,146,1408,1,0,0,0,148,1410,1,0,0,0,150,1420,1,0,0,0,152,1422,
        1,0,0,0,154,1429,1,0,0,0,156,1470,1,0,0,0,158,1498,1,0,0,0,160,1541,
        1,0,0,0,162,1545,1,0,0,0,164,1558,1,0,0,0,166,1608,1,0,0,0,168,1636,
        1,0,0,0,170,1677,1,0,0,0,172,1756,1,0,0,0,174,1758,1,0,0,0,176,1762,
        1,0,0,0,178,1767,1,0,0,0,180,1771,1,0,0,0,182,1780,1,0,0,0,184,1785,
        1,0,0,0,186,1797,1,0,0,0,188,1799,1,0,0,0,190,1848,1,0,0,0,192,1878,
        1,0,0,0,194,1934,1,0,0,0,196,1946,1,0,0,0,198,1953,1,0,0,0,200,1992,
        1,0,0,0,202,2009,1,0,0,0,204,2086,1,0,0,0,206,2090,1,0,0,0,208,2139,
        1,0,0,0,210,2186,1,0,0,0,212,2188,1,0,0,0,214,2198,1,0,0,0,216,2200,
        1,0,0,0,218,2202,1,0,0,0,220,2215,1,0,0,0,222,2243,1,0,0,0,224,2245,
        1,0,0,0,226,2253,1,0,0,0,228,2325,1,0,0,0,230,2333,1,0,0,0,232,2350,
        1,0,0,0,234,2359,1,0,0,0,236,2361,1,0,0,0,238,2412,1,0,0,0,240,2441,
        1,0,0,0,242,2443,1,0,0,0,244,2452,1,0,0,0,246,2459,1,0,0,0,248,2477,
        1,0,0,0,250,2502,1,0,0,0,252,2504,1,0,0,0,254,2511,1,0,0,0,256,2515,
        1,0,0,0,258,2517,1,0,0,0,260,2574,1,0,0,0,262,2576,1,0,0,0,264,2582,
        1,0,0,0,266,2611,1,0,0,0,268,2613,1,0,0,0,270,2627,1,0,0,0,272,2691,
        1,0,0,0,274,2693,1,0,0,0,276,2707,1,0,0,0,278,2709,1,0,0,0,280,2712,
        1,0,0,0,282,2716,1,0,0,0,284,2731,1,0,0,0,286,2736,1,0,0,0,288,2766,
        1,0,0,0,290,2768,1,0,0,0,292,2783,1,0,0,0,294,2958,1,0,0,0,296,2960,
        1,0,0,0,298,2965,1,0,0,0,300,2971,1,0,0,0,302,2984,1,0,0,0,304,2997,
        1,0,0,0,306,3041,1,0,0,0,308,3043,1,0,0,0,310,3056,1,0,0,0,312,3058,
        1,0,0,0,314,3060,1,0,0,0,316,3069,1,0,0,0,318,3077,1,0,0,0,320,3081,
        1,0,0,0,322,3085,1,0,0,0,324,3112,1,0,0,0,326,3155,1,0,0,0,328,3157,
        1,0,0,0,330,3159,1,0,0,0,332,3174,1,0,0,0,334,3183,1,0,0,0,336,3187,
        1,0,0,0,338,3195,1,0,0,0,340,3201,1,0,0,0,342,3237,1,0,0,0,344,3239,
        1,0,0,0,346,3252,1,0,0,0,348,3254,1,0,0,0,350,3275,1,0,0,0,352,3337,
        1,0,0,0,354,3344,1,0,0,0,356,3358,1,0,0,0,358,3364,1,0,0,0,360,3369,
        1,0,0,0,362,3373,1,0,0,0,364,3383,1,0,0,0,366,3385,1,0,0,0,368,3387,
        1,0,0,0,370,3390,1,0,0,0,372,3412,1,0,0,0,374,3416,1,0,0,0,376,3433,
        1,0,0,0,378,3435,1,0,0,0,380,3440,1,0,0,0,382,3442,1,0,0,0,384,3459,
        1,0,0,0,386,3461,1,0,0,0,388,3463,1,0,0,0,390,3473,1,0,0,0,392,3521,
        1,0,0,0,394,3548,1,0,0,0,396,3572,1,0,0,0,398,3604,1,0,0,0,400,3634,
        1,0,0,0,402,3657,1,0,0,0,404,3671,1,0,0,0,406,3673,1,0,0,0,408,3684,
        1,0,0,0,410,3722,1,0,0,0,412,414,3,2,1,0,413,412,1,0,0,0,414,417,
        1,0,0,0,415,413,1,0,0,0,415,416,1,0,0,0,416,418,1,0,0,0,417,415,
        1,0,0,0,418,419,5,0,0,1,419,1,1,0,0,0,420,422,3,174,87,0,421,420,
        1,0,0,0,421,422,1,0,0,0,422,423,1,0,0,0,423,425,3,4,2,0,424,426,
        3,174,87,0,425,424,1,0,0,0,425,426,1,0,0,0,426,3,1,0,0,0,427,429,
        3,6,3,0,428,430,5,475,0,0,429,428,1,0,0,0,429,430,1,0,0,0,430,432,
        1,0,0,0,431,427,1,0,0,0,432,433,1,0,0,0,433,431,1,0,0,0,433,434,
        1,0,0,0,434,5,1,0,0,0,435,443,3,8,4,0,436,443,3,10,5,0,437,443,3,
        12,6,0,438,443,3,42,21,0,439,443,3,14,7,0,440,443,3,156,78,0,441,
        443,3,38,19,0,442,435,1,0,0,0,442,436,1,0,0,0,442,437,1,0,0,0,442,
        438,1,0,0,0,442,439,1,0,0,0,442,440,1,0,0,0,442,441,1,0,0,0,443,
        7,1,0,0,0,444,449,3,44,22,0,445,449,3,48,24,0,446,449,3,52,26,0,
        447,449,3,54,27,0,448,444,1,0,0,0,448,445,1,0,0,0,448,446,1,0,0,
        0,448,447,1,0,0,0,449,9,1,0,0,0,450,473,3,64,32,0,451,473,3,66,33,
        0,452,473,3,392,196,0,453,473,3,390,195,0,454,473,3,68,34,0,455,
        473,3,72,36,0,456,473,3,74,37,0,457,473,3,70,35,0,458,473,3,146,
        73,0,459,473,3,76,38,0,460,473,3,80,40,0,461,473,3,82,41,0,462,473,
        3,128,64,0,463,473,3,130,65,0,464,473,3,132,66,0,465,473,3,138,69,
        0,466,473,3,134,67,0,467,473,3,148,74,0,468,473,3,140,70,0,469,473,
        3,136,68,0,470,473,3,142,71,0,471,473,3,144,72,0,472,450,1,0,0,0,
        472,451,1,0,0,0,472,452,1,0,0,0,472,453,1,0,0,0,472,454,1,0,0,0,
        472,455,1,0,0,0,472,456,1,0,0,0,472,457,1,0,0,0,472,458,1,0,0,0,
        472,459,1,0,0,0,472,460,1,0,0,0,472,461,1,0,0,0,472,462,1,0,0,0,
        472,463,1,0,0,0,472,464,1,0,0,0,472,465,1,0,0,0,472,466,1,0,0,0,
        472,467,1,0,0,0,472,468,1,0,0,0,472,469,1,0,0,0,472,470,1,0,0,0,
        472,471,1,0,0,0,473,11,1,0,0,0,474,479,3,24,12,0,475,479,3,32,16,
        0,476,479,3,34,17,0,477,479,3,36,18,0,478,474,1,0,0,0,478,475,1,
        0,0,0,478,476,1,0,0,0,478,477,1,0,0,0,479,13,1,0,0,0,480,488,3,16,
        8,0,481,488,3,18,9,0,482,488,3,20,10,0,483,488,3,22,11,0,484,488,
        3,28,14,0,485,488,3,30,15,0,486,488,3,40,20,0,487,480,1,0,0,0,487,
        481,1,0,0,0,487,482,1,0,0,0,487,483,1,0,0,0,487,484,1,0,0,0,487,
        485,1,0,0,0,487,486,1,0,0,0,488,15,1,0,0,0,489,491,5,10,0,0,490,
        492,5,475,0,0,491,490,1,0,0,0,491,492,1,0,0,0,492,494,1,0,0,0,493,
        495,3,4,2,0,494,493,1,0,0,0,494,495,1,0,0,0,495,496,1,0,0,0,496,
        498,5,59,0,0,497,499,5,475,0,0,498,497,1,0,0,0,498,499,1,0,0,0,499,
        17,1,0,0,0,500,502,5,12,0,0,501,503,5,475,0,0,502,501,1,0,0,0,502,
        503,1,0,0,0,503,19,1,0,0,0,504,506,5,34,0,0,505,507,5,475,0,0,506,
        505,1,0,0,0,506,507,1,0,0,0,507,21,1,0,0,0,508,509,5,80,0,0,509,
        511,3,380,190,0,510,512,5,475,0,0,511,510,1,0,0,0,511,512,1,0,0,
        0,512,519,1,0,0,0,513,514,3,380,190,0,514,516,5,476,0,0,515,517,
        5,475,0,0,516,515,1,0,0,0,516,517,1,0,0,0,517,519,1,0,0,0,518,508,
        1,0,0,0,518,513,1,0,0,0,519,23,1,0,0,0,520,521,5,88,0,0,521,522,
        3,226,113,0,522,523,3,26,13,0,523,25,1,0,0,0,524,527,3,6,3,0,525,
        526,5,58,0,0,526,528,3,6,3,0,527,525,1,0,0,0,527,528,1,0,0,0,528,
        530,1,0,0,0,529,531,5,475,0,0,530,529,1,0,0,0,530,531,1,0,0,0,531,
        541,1,0,0,0,532,535,3,16,8,0,533,534,5,58,0,0,534,536,3,16,8,0,535,
        533,1,0,0,0,535,536,1,0,0,0,536,538,1,0,0,0,537,539,5,475,0,0,538,
        537,1,0,0,0,538,539,1,0,0,0,539,541,1,0,0,0,540,524,1,0,0,0,540,
        532,1,0,0,0,541,27,1,0,0,0,542,544,5,148,0,0,543,545,3,208,104,0,
        544,543,1,0,0,0,544,545,1,0,0,0,545,547,1,0,0,0,546,548,5,475,0,
        0,547,546,1,0,0,0,547,548,1,0,0,0,548,29,1,0,0,0,549,555,5,418,0,
        0,550,551,7,0,0,0,551,552,5,474,0,0,552,553,7,1,0,0,553,554,5,474,
        0,0,554,556,7,0,0,0,555,550,1,0,0,0,555,556,1,0,0,0,556,558,1,0,
        0,0,557,559,5,475,0,0,558,557,1,0,0,0,558,559,1,0,0,0,559,31,1,0,
        0,0,560,561,5,10,0,0,561,563,5,425,0,0,562,564,5,475,0,0,563,562,
        1,0,0,0,563,564,1,0,0,0,564,566,1,0,0,0,565,567,3,4,2,0,566,565,
        1,0,0,0,566,567,1,0,0,0,567,568,1,0,0,0,568,569,5,59,0,0,569,571,
        5,425,0,0,570,572,5,475,0,0,571,570,1,0,0,0,571,572,1,0,0,0,572,
        573,1,0,0,0,573,574,5,10,0,0,574,576,5,231,0,0,575,577,5,475,0,0,
        576,575,1,0,0,0,576,577,1,0,0,0,577,579,1,0,0,0,578,580,3,4,2,0,
        579,578,1,0,0,0,579,580,1,0,0,0,580,581,1,0,0,0,581,582,5,59,0,0,
        582,584,5,231,0,0,583,585,5,475,0,0,584,583,1,0,0,0,584,585,1,0,
        0,0,585,33,1,0,0,0,586,587,5,199,0,0,587,588,7,2,0,0,588,590,3,208,
        104,0,589,591,5,475,0,0,590,589,1,0,0,0,590,591,1,0,0,0,591,35,1,
        0,0,0,592,593,5,202,0,0,593,603,3,226,113,0,594,604,3,6,3,0,595,
        597,5,12,0,0,596,598,5,475,0,0,597,596,1,0,0,0,597,598,1,0,0,0,598,
        604,1,0,0,0,599,601,5,34,0,0,600,602,5,475,0,0,601,600,1,0,0,0,601,
        602,1,0,0,0,602,604,1,0,0,0,603,594,1,0,0,0,603,595,1,0,0,0,603,
        599,1,0,0,0,604,37,1,0,0,0,605,606,5,136,0,0,606,608,3,208,104,0,
        607,609,5,475,0,0,608,607,1,0,0,0,608,609,1,0,0,0,609,39,1,0,0,0,
        610,611,5,140,0,0,611,612,5,472,0,0,612,613,7,3,0,0,613,614,5,474,
        0,0,614,615,3,206,103,0,615,616,5,474,0,0,616,621,3,206,103,0,617,
        618,5,474,0,0,618,620,3,206,103,0,619,617,1,0,0,0,620,623,1,0,0,
        0,621,619,1,0,0,0,621,622,1,0,0,0,622,624,1,0,0,0,623,621,1,0,0,
        0,624,626,5,473,0,0,625,627,5,475,0,0,626,625,1,0,0,0,626,627,1,
        0,0,0,627,41,1,0,0,0,628,635,3,158,79,0,629,635,3,160,80,0,630,635,
        3,166,83,0,631,635,3,170,85,0,632,635,3,172,86,0,633,635,3,176,88,
        0,634,628,1,0,0,0,634,629,1,0,0,0,634,630,1,0,0,0,634,631,1,0,0,
        0,634,632,1,0,0,0,634,633,1,0,0,0,635,43,1,0,0,0,636,638,3,218,109,
        0,637,636,1,0,0,0,637,638,1,0,0,0,638,639,1,0,0,0,639,641,5,49,0,
        0,640,642,3,244,122,0,641,640,1,0,0,0,641,642,1,0,0,0,642,644,1,
        0,0,0,643,645,5,77,0,0,644,643,1,0,0,0,644,645,1,0,0,0,645,646,1,
        0,0,0,646,648,3,46,23,0,647,649,3,302,151,0,648,647,1,0,0,0,648,
        649,1,0,0,0,649,651,1,0,0,0,650,652,3,58,29,0,651,650,1,0,0,0,651,
        652,1,0,0,0,652,655,1,0,0,0,653,654,5,77,0,0,654,656,3,268,134,0,
        655,653,1,0,0,0,655,656,1,0,0,0,656,658,1,0,0,0,657,659,3,56,28,
        0,658,657,1,0,0,0,658,659,1,0,0,0,659,661,1,0,0,0,660,662,3,250,
        125,0,661,660,1,0,0,0,661,662,1,0,0,0,662,664,1,0,0,0,663,665,3,
        258,129,0,664,663,1,0,0,0,664,665,1,0,0,0,665,667,1,0,0,0,666,668,
        5,475,0,0,667,666,1,0,0,0,667,668,1,0,0,0,668,45,1,0,0,0,669,671,
        3,380,190,0,670,672,3,300,150,0,671,670,1,0,0,0,671,672,1,0,0,0,
        672,677,1,0,0,0,673,677,3,358,179,0,674,677,3,150,75,0,675,677,5,
        448,0,0,676,669,1,0,0,0,676,673,1,0,0,0,676,674,1,0,0,0,676,675,
        1,0,0,0,677,47,1,0,0,0,678,680,3,218,109,0,679,678,1,0,0,0,679,680,
        1,0,0,0,680,681,1,0,0,0,681,683,5,93,0,0,682,684,3,244,122,0,683,
        682,1,0,0,0,683,684,1,0,0,0,684,686,1,0,0,0,685,687,5,95,0,0,686,
        685,1,0,0,0,686,687,1,0,0,0,687,690,1,0,0,0,688,691,3,358,179,0,
        689,691,3,150,75,0,690,688,1,0,0,0,690,689,1,0,0,0,691,693,1,0,0,
        0,692,694,3,302,151,0,693,692,1,0,0,0,693,694,1,0,0,0,694,697,1,
        0,0,0,695,696,5,77,0,0,696,698,3,292,146,0,697,695,1,0,0,0,697,698,
        1,0,0,0,698,703,1,0,0,0,699,700,5,472,0,0,700,701,3,362,181,0,701,
        702,5,473,0,0,702,704,1,0,0,0,703,699,1,0,0,0,703,704,1,0,0,0,704,
        706,1,0,0,0,705,707,3,58,29,0,706,705,1,0,0,0,706,707,1,0,0,0,707,
        708,1,0,0,0,708,710,3,50,25,0,709,711,3,250,125,0,710,709,1,0,0,
        0,710,711,1,0,0,0,711,713,1,0,0,0,712,714,3,258,129,0,713,712,1,
        0,0,0,713,714,1,0,0,0,714,716,1,0,0,0,715,717,5,475,0,0,716,715,
        1,0,0,0,716,717,1,0,0,0,717,49,1,0,0,0,718,724,3,314,157,0,719,724,
        3,292,146,0,720,724,3,160,80,0,721,722,5,48,0,0,722,724,5,195,0,
        0,723,718,1,0,0,0,723,719,1,0,0,0,723,720,1,0,0,0,723,721,1,0,0,
        0,724,51,1,0,0,0,725,727,3,218,109,0,726,725,1,0,0,0,726,727,1,0,
        0,0,727,728,1,0,0,0,728,730,3,230,115,0,729,731,3,246,123,0,730,
        729,1,0,0,0,730,731,1,0,0,0,731,733,1,0,0,0,732,734,3,250,125,0,
        733,732,1,0,0,0,733,734,1,0,0,0,734,736,1,0,0,0,735,737,3,258,129,
        0,736,735,1,0,0,0,736,737,1,0,0,0,737,739,1,0,0,0,738,740,5,475,
        0,0,739,738,1,0,0,0,739,740,1,0,0,0,740,53,1,0,0,0,741,743,3,218,
        109,0,742,741,1,0,0,0,742,743,1,0,0,0,743,744,1,0,0,0,744,746,5,
        191,0,0,745,747,3,244,122,0,746,745,1,0,0,0,746,747,1,0,0,0,747,
        750,1,0,0,0,748,751,3,358,179,0,749,751,3,150,75,0,750,748,1,0,0,
        0,750,749,1,0,0,0,751,753,1,0,0,0,752,754,3,300,150,0,753,752,1,
        0,0,0,753,754,1,0,0,0,754,755,1,0,0,0,755,756,5,165,0,0,756,761,
        3,222,111,0,757,758,5,474,0,0,758,760,3,222,111,0,759,757,1,0,0,
        0,760,763,1,0,0,0,761,759,1,0,0,0,761,762,1,0,0,0,762,765,1,0,0,
        0,763,761,1,0,0,0,764,766,3,58,29,0,765,764,1,0,0,0,765,766,1,0,
        0,0,766,769,1,0,0,0,767,768,5,77,0,0,768,770,3,268,134,0,769,767,
        1,0,0,0,769,770,1,0,0,0,770,772,1,0,0,0,771,773,3,56,28,0,772,771,
        1,0,0,0,772,773,1,0,0,0,773,775,1,0,0,0,774,776,3,250,125,0,775,
        774,1,0,0,0,775,776,1,0,0,0,776,778,1,0,0,0,777,779,3,258,129,0,
        778,777,1,0,0,0,778,779,1,0,0,0,779,781,1,0,0,0,780,782,5,475,0,
        0,781,780,1,0,0,0,781,782,1,0,0,0,782,55,1,0,0,0,783,794,5,201,0,
        0,784,795,3,224,112,0,785,786,5,38,0,0,786,792,5,116,0,0,787,789,
        5,290,0,0,788,787,1,0,0,0,788,789,1,0,0,0,789,790,1,0,0,0,790,793,
        3,364,182,0,791,793,5,448,0,0,792,788,1,0,0,0,792,791,1,0,0,0,793,
        795,1,0,0,0,794,784,1,0,0,0,794,785,1,0,0,0,795,57,1,0,0,0,796,797,
        5,353,0,0,797,802,3,60,30,0,798,799,5,474,0,0,799,801,3,60,30,0,
        800,798,1,0,0,0,801,804,1,0,0,0,802,800,1,0,0,0,802,803,1,0,0,0,
        803,813,1,0,0,0,804,802,1,0,0,0,805,806,5,95,0,0,806,811,3,358,179,
        0,807,808,5,472,0,0,808,809,3,362,181,0,809,810,5,473,0,0,810,812,
        1,0,0,0,811,807,1,0,0,0,811,812,1,0,0,0,812,814,1,0,0,0,813,805,
        1,0,0,0,813,814,1,0,0,0,814,59,1,0,0,0,815,818,3,62,31,0,816,818,
        3,208,104,0,817,815,1,0,0,0,817,816,1,0,0,0,818,823,1,0,0,0,819,
        821,5,6,0,0,820,819,1,0,0,0,820,821,1,0,0,0,821,822,1,0,0,0,822,
        824,3,310,155,0,823,820,1,0,0,0,823,824,1,0,0,0,824,61,1,0,0,0,825,
        829,5,263,0,0,826,829,5,305,0,0,827,829,3,352,176,0,828,825,1,0,
        0,0,828,826,1,0,0,0,828,827,1,0,0,0,829,830,1,0,0,0,830,833,5,467,
        0,0,831,834,5,477,0,0,832,834,3,380,190,0,833,831,1,0,0,0,833,832,
        1,0,0,0,834,837,1,0,0,0,835,837,5,442,0,0,836,828,1,0,0,0,836,835,
        1,0,0,0,837,63,1,0,0,0,838,839,5,36,0,0,839,840,5,44,0,0,840,844,
        3,380,190,0,841,842,5,31,0,0,842,843,5,455,0,0,843,845,7,4,0,0,844,
        841,1,0,0,0,844,845,1,0,0,0,845,858,1,0,0,0,846,848,5,119,0,0,847,
        849,5,135,0,0,848,847,1,0,0,0,848,849,1,0,0,0,849,850,1,0,0,0,850,
        855,3,346,173,0,851,852,5,474,0,0,852,854,3,346,173,0,853,851,1,
        0,0,0,854,857,1,0,0,0,855,853,1,0,0,0,855,856,1,0,0,0,856,859,1,
        0,0,0,857,855,1,0,0,0,858,846,1,0,0,0,858,859,1,0,0,0,859,870,1,
        0,0,0,860,861,5,104,0,0,861,862,5,119,0,0,862,867,3,346,173,0,863,
        864,5,474,0,0,864,866,3,346,173,0,865,863,1,0,0,0,866,869,1,0,0,
        0,867,865,1,0,0,0,867,868,1,0,0,0,868,871,1,0,0,0,869,867,1,0,0,
        0,870,860,1,0,0,0,870,871,1,0,0,0,871,874,1,0,0,0,872,873,5,26,0,
        0,873,875,3,380,190,0,874,872,1,0,0,0,874,875,1,0,0,0,875,885,1,
        0,0,0,876,877,5,203,0,0,877,882,3,342,171,0,878,879,5,474,0,0,879,
        881,3,342,171,0,880,878,1,0,0,0,881,884,1,0,0,0,882,880,1,0,0,0,
        882,883,1,0,0,0,883,886,1,0,0,0,884,882,1,0,0,0,885,876,1,0,0,0,
        885,886,1,0,0,0,886,65,1,0,0,0,887,889,5,36,0,0,888,890,5,189,0,
        0,889,888,1,0,0,0,889,890,1,0,0,0,890,892,1,0,0,0,891,893,3,368,
        184,0,892,891,1,0,0,0,892,893,1,0,0,0,893,894,1,0,0,0,894,895,5,
        90,0,0,895,896,3,380,190,0,896,897,5,119,0,0,897,898,3,286,143,0,
        898,899,5,472,0,0,899,901,3,362,181,0,900,902,7,5,0,0,901,900,1,
        0,0,0,901,902,1,0,0,0,902,903,1,0,0,0,903,912,5,473,0,0,904,905,
        5,91,0,0,905,906,5,472,0,0,906,908,3,362,181,0,907,909,7,5,0,0,908,
        907,1,0,0,0,908,909,1,0,0,0,909,910,1,0,0,0,910,911,5,473,0,0,911,
        913,1,0,0,0,912,904,1,0,0,0,912,913,1,0,0,0,913,916,1,0,0,0,914,
        915,5,201,0,0,915,917,3,226,113,0,916,914,1,0,0,0,916,917,1,0,0,
        0,917,919,1,0,0,0,918,920,3,194,97,0,919,918,1,0,0,0,919,920,1,0,
        0,0,920,923,1,0,0,0,921,922,5,119,0,0,922,924,3,380,190,0,923,921,
        1,0,0,0,923,924,1,0,0,0,924,926,1,0,0,0,925,927,5,475,0,0,926,925,
        1,0,0,0,926,927,1,0,0,0,927,67,1,0,0,0,928,929,5,36,0,0,929,930,
        5,170,0,0,930,931,3,380,190,0,931,932,5,119,0,0,932,933,3,286,143,
        0,933,934,5,472,0,0,934,935,3,362,181,0,935,954,5,473,0,0,936,942,
        5,203,0,0,937,943,5,288,0,0,938,939,5,388,0,0,939,940,5,449,0,0,
        940,943,7,6,0,0,941,943,5,405,0,0,942,937,1,0,0,0,942,938,1,0,0,
        0,942,941,1,0,0,0,943,946,1,0,0,0,944,945,5,474,0,0,945,947,5,341,
        0,0,946,944,1,0,0,0,946,947,1,0,0,0,947,952,1,0,0,0,948,949,5,474,
        0,0,949,950,5,301,0,0,950,951,5,455,0,0,951,953,3,366,183,0,952,
        948,1,0,0,0,952,953,1,0,0,0,953,955,1,0,0,0,954,936,1,0,0,0,954,
        955,1,0,0,0,955,957,1,0,0,0,956,958,5,475,0,0,957,956,1,0,0,0,957,
        958,1,0,0,0,958,69,1,0,0,0,959,960,5,36,0,0,960,961,5,174,0,0,961,
        962,3,352,176,0,962,963,5,472,0,0,963,965,3,184,92,0,964,966,5,474,
        0,0,965,964,1,0,0,0,965,966,1,0,0,0,966,967,1,0,0,0,967,971,5,473,
        0,0,968,969,5,119,0,0,969,972,3,380,190,0,970,972,5,48,0,0,971,968,
        1,0,0,0,971,970,1,0,0,0,971,972,1,0,0,0,972,976,1,0,0,0,973,974,
        5,417,0,0,974,977,3,380,190,0,975,977,5,48,0,0,976,973,1,0,0,0,976,
        975,1,0,0,0,976,977,1,0,0,0,977,979,1,0,0,0,978,980,5,475,0,0,979,
        978,1,0,0,0,979,980,1,0,0,0,980,71,1,0,0,0,981,982,5,36,0,0,982,
        983,5,158,0,0,983,985,3,354,177,0,984,986,5,475,0,0,985,984,1,0,
        0,0,985,986,1,0,0,0,986,73,1,0,0,0,987,988,5,36,0,0,988,989,5,171,
        0,0,989,990,3,354,177,0,990,991,5,72,0,0,991,993,3,352,176,0,992,
        994,5,475,0,0,993,992,1,0,0,0,993,994,1,0,0,0,994,75,1,0,0,0,995,
        996,5,36,0,0,996,997,5,198,0,0,997,1002,3,354,177,0,998,999,5,472,
        0,0,999,1000,3,362,181,0,1000,1001,5,473,0,0,1001,1003,1,0,0,0,1002,
        998,1,0,0,0,1002,1003,1,0,0,0,1003,1013,1,0,0,0,1004,1005,5,203,
        0,0,1005,1010,3,78,39,0,1006,1007,5,474,0,0,1007,1009,3,78,39,0,
        1008,1006,1,0,0,0,1009,1012,1,0,0,0,1010,1008,1,0,0,0,1010,1011,
        1,0,0,0,1011,1014,1,0,0,0,1012,1010,1,0,0,0,1013,1004,1,0,0,0,1013,
        1014,1,0,0,0,1014,1015,1,0,0,0,1015,1016,5,6,0,0,1016,1020,3,52,
        26,0,1017,1018,5,203,0,0,1018,1019,5,21,0,0,1019,1021,5,125,0,0,
        1020,1017,1,0,0,0,1020,1021,1,0,0,0,1021,1023,1,0,0,0,1022,1024,
        5,475,0,0,1023,1022,1,0,0,0,1023,1024,1,0,0,0,1024,77,1,0,0,0,1025,
        1026,7,7,0,0,1026,79,1,0,0,0,1027,1028,5,3,0,0,1028,1029,5,174,0,
        0,1029,1063,3,352,176,0,1030,1031,5,165,0,0,1031,1032,5,472,0,0,
        1032,1033,5,318,0,0,1033,1034,5,455,0,0,1034,1035,7,8,0,0,1035,1064,
        5,473,0,0,1036,1037,5,1,0,0,1037,1064,3,186,93,0,1038,1039,5,56,
        0,0,1039,1040,5,30,0,0,1040,1064,3,380,190,0,1041,1042,5,203,0,0,
        1042,1043,5,21,0,0,1043,1044,5,1,0,0,1044,1045,5,30,0,0,1045,1046,
        3,380,190,0,1046,1047,5,74,0,0,1047,1048,5,98,0,0,1048,1049,5,472,
        0,0,1049,1050,3,362,181,0,1050,1051,5,473,0,0,1051,1052,5,144,0,
        0,1052,1053,3,352,176,0,1053,1054,5,472,0,0,1054,1055,3,362,181,
        0,1055,1056,5,473,0,0,1056,1064,1,0,0,0,1057,1058,5,21,0,0,1058,
        1059,5,30,0,0,1059,1064,3,380,190,0,1060,1061,5,3,0,0,1061,1062,
        5,27,0,0,1062,1064,3,184,92,0,1063,1030,1,0,0,0,1063,1036,1,0,0,
        0,1063,1038,1,0,0,0,1063,1041,1,0,0,0,1063,1057,1,0,0,0,1063,1060,
        1,0,0,0,1064,1066,1,0,0,0,1065,1067,5,475,0,0,1066,1065,1,0,0,0,
        1066,1067,1,0,0,0,1067,81,1,0,0,0,1068,1069,5,3,0,0,1069,1072,5,
        44,0,0,1070,1073,3,380,190,0,1071,1073,5,38,0,0,1072,1070,1,0,0,
        0,1072,1071,1,0,0,0,1073,1086,1,0,0,0,1074,1075,5,332,0,0,1075,1076,
        5,334,0,0,1076,1077,5,455,0,0,1077,1087,3,380,190,0,1078,1079,5,
        26,0,0,1079,1087,3,380,190,0,1080,1081,5,165,0,0,1081,1084,3,84,
        42,0,1082,1083,5,203,0,0,1083,1085,3,126,63,0,1084,1082,1,0,0,0,
        1084,1085,1,0,0,0,1085,1087,1,0,0,0,1086,1074,1,0,0,0,1086,1078,
        1,0,0,0,1086,1080,1,0,0,0,1087,1089,1,0,0,0,1088,1090,5,475,0,0,
        1089,1088,1,0,0,0,1089,1090,1,0,0,0,1090,83,1,0,0,0,1091,1114,3,
        86,43,0,1092,1114,3,88,44,0,1093,1114,3,92,46,0,1094,1114,3,94,47,
        0,1095,1114,3,96,48,0,1096,1114,3,98,49,0,1097,1114,3,100,50,0,1098,
        1114,3,102,51,0,1099,1114,3,104,52,0,1100,1114,3,106,53,0,1101,1114,
        3,108,54,0,1102,1103,5,280,0,0,1103,1114,3,344,172,0,1104,1114,3,
        110,55,0,1105,1114,3,112,56,0,1106,1114,3,114,57,0,1107,1114,3,116,
        58,0,1108,1114,3,118,59,0,1109,1114,3,120,60,0,1110,1114,3,122,61,
        0,1111,1114,3,124,62,0,1112,1114,3,126,63,0,1113,1091,1,0,0,0,1113,
        1092,1,0,0,0,1113,1093,1,0,0,0,1113,1094,1,0,0,0,1113,1095,1,0,0,
        0,1113,1096,1,0,0,0,1113,1097,1,0,0,0,1113,1098,1,0,0,0,1113,1099,
        1,0,0,0,1113,1100,1,0,0,0,1113,1101,1,0,0,0,1113,1102,1,0,0,0,1113,
        1104,1,0,0,0,1113,1105,1,0,0,0,1113,1106,1,0,0,0,1113,1107,1,0,0,
        0,1113,1108,1,0,0,0,1113,1109,1,0,0,0,1113,1110,1,0,0,0,1113,1111,
        1,0,0,0,1113,1112,1,0,0,0,1114,85,1,0,0,0,1115,1116,5,219,0,0,1116,
        1133,3,366,183,0,1117,1118,5,220,0,0,1118,1133,5,117,0,0,1119,1124,
        5,119,0,0,1120,1121,5,301,0,0,1121,1122,5,455,0,0,1122,1125,5,119,
        0,0,1123,1125,5,117,0,0,1124,1120,1,0,0,0,1124,1123,1,0,0,0,1125,
        1133,1,0,0,0,1126,1127,5,221,0,0,1127,1133,3,366,183,0,1128,1129,
        5,222,0,0,1129,1133,3,366,183,0,1130,1131,5,223,0,0,1131,1133,7,
        9,0,0,1132,1115,1,0,0,0,1132,1117,1,0,0,0,1132,1119,1,0,0,0,1132,
        1126,1,0,0,0,1132,1128,1,0,0,0,1132,1130,1,0,0,0,1133,87,1,0,0,0,
        1134,1135,5,234,0,0,1135,1151,5,455,0,0,1136,1152,5,117,0,0,1137,
        1148,5,119,0,0,1138,1143,3,90,45,0,1139,1140,5,474,0,0,1140,1142,
        3,90,45,0,1141,1139,1,0,0,0,1142,1145,1,0,0,0,1143,1141,1,0,0,0,
        1143,1144,1,0,0,0,1144,1147,1,0,0,0,1145,1143,1,0,0,0,1146,1138,
        1,0,0,0,1147,1150,1,0,0,0,1148,1146,1,0,0,0,1148,1149,1,0,0,0,1149,
        1152,1,0,0,0,1150,1148,1,0,0,0,1151,1136,1,0,0,0,1151,1137,1,0,0,
        0,1152,89,1,0,0,0,1153,1154,5,218,0,0,1154,1155,5,455,0,0,1155,1160,
        3,366,183,0,1156,1157,5,233,0,0,1157,1158,5,455,0,0,1158,1160,7,
        10,0,0,1159,1153,1,0,0,0,1159,1156,1,0,0,0,1160,91,1,0,0,0,1161,
        1162,5,31,0,0,1162,1163,5,455,0,0,1163,1164,7,4,0,0,1164,93,1,0,
        0,0,1165,1166,5,247,0,0,1166,1170,3,366,183,0,1167,1168,5,248,0,
        0,1168,1170,7,11,0,0,1169,1165,1,0,0,0,1169,1167,1,0,0,0,1170,95,
        1,0,0,0,1171,1172,5,256,0,0,1172,1173,3,366,183,0,1173,97,1,0,0,
        0,1174,1175,5,272,0,0,1175,1176,3,366,183,0,1176,99,1,0,0,0,1177,
        1178,7,12,0,0,1178,101,1,0,0,0,1179,1180,7,13,0,0,1180,103,1,0,0,
        0,1181,1182,7,14,0,0,1182,105,1,0,0,0,1183,1184,5,262,0,0,1184,1185,
        5,455,0,0,1185,1186,7,15,0,0,1186,107,1,0,0,0,1187,1188,5,258,0,
        0,1188,1213,3,366,183,0,1189,1190,5,424,0,0,1190,1213,3,366,183,
        0,1191,1192,5,260,0,0,1192,1195,5,455,0,0,1193,1196,3,380,190,0,
        1194,1196,5,451,0,0,1195,1193,1,0,0,0,1195,1194,1,0,0,0,1196,1213,
        1,0,0,0,1197,1198,5,259,0,0,1198,1201,5,455,0,0,1199,1202,3,380,
        190,0,1200,1202,5,451,0,0,1201,1199,1,0,0,0,1201,1200,1,0,0,0,1202,
        1213,1,0,0,0,1203,1204,5,335,0,0,1204,1205,5,455,0,0,1205,1213,7,
        9,0,0,1206,1207,5,423,0,0,1207,1208,5,455,0,0,1208,1213,7,9,0,0,
        1209,1210,5,426,0,0,1210,1211,5,455,0,0,1211,1213,5,449,0,0,1212,
        1187,1,0,0,0,1212,1189,1,0,0,0,1212,1191,1,0,0,0,1212,1197,1,0,0,
        0,1212,1203,1,0,0,0,1212,1206,1,0,0,0,1212,1209,1,0,0,0,1213,109,
        1,0,0,0,1214,1215,5,3,0,0,1215,1216,5,44,0,0,1216,1217,5,165,0,0,
        1217,1218,5,294,0,0,1218,111,1,0,0,0,1219,1220,5,331,0,0,1220,1221,
        7,9,0,0,1221,113,1,0,0,0,1222,1223,5,356,0,0,1223,1224,7,16,0,0,
        1224,115,1,0,0,0,1225,1226,5,374,0,0,1226,1232,7,17,0,0,1227,1228,
        5,422,0,0,1228,1232,3,366,183,0,1229,1230,5,355,0,0,1230,1232,7,
        18,0,0,1231,1225,1,0,0,0,1231,1227,1,0,0,0,1231,1229,1,0,0,0,1232,
        117,1,0,0,0,1233,1240,5,271,0,0,1234,1240,5,268,0,0,1235,1240,5,
        336,0,0,1236,1240,5,273,0,0,1237,1238,5,296,0,0,1238,1240,3,366,
        183,0,1239,1233,1,0,0,0,1239,1234,1,0,0,0,1239,1235,1,0,0,0,1239,
        1236,1,0,0,0,1239,1237,1,0,0,0,1240,119,1,0,0,0,1241,1242,5,209,
        0,0,1242,1247,3,366,183,0,1243,1244,5,370,0,0,1244,1247,7,9,0,0,
        1245,1247,7,9,0,0,1246,1241,1,0,0,0,1246,1243,1,0,0,0,1246,1245,
        1,0,0,0,1247,121,1,0,0,0,1248,1249,5,211,0,0,1249,1270,3,366,183,
        0,1250,1251,5,210,0,0,1251,1270,3,366,183,0,1252,1253,5,212,0,0,
        1253,1270,3,366,183,0,1254,1255,5,213,0,0,1255,1270,3,366,183,0,
        1256,1257,5,215,0,0,1257,1270,3,366,183,0,1258,1259,5,238,0,0,1259,
        1260,5,455,0,0,1260,1270,5,449,0,0,1261,1262,5,240,0,0,1262,1270,
        3,366,183,0,1263,1264,5,345,0,0,1264,1270,3,366,183,0,1265,1266,
        5,366,0,0,1266,1270,3,366,183,0,1267,1268,5,375,0,0,1268,1270,3,
        366,183,0,1269,1248,1,0,0,0,1269,1250,1,0,0,0,1269,1252,1,0,0,0,
        1269,1254,1,0,0,0,1269,1256,1,0,0,0,1269,1258,1,0,0,0,1269,1261,
        1,0,0,0,1269,1263,1,0,0,0,1269,1265,1,0,0,0,1269,1267,1,0,0,0,1270,
        123,1,0,0,0,1271,1272,5,415,0,0,1272,1273,5,455,0,0,1273,1274,5,
        449,0,0,1274,1275,7,19,0,0,1275,125,1,0,0,0,1276,1277,5,153,0,0,
        1277,1278,5,207,0,0,1278,1283,5,449,0,0,1279,1280,5,153,0,0,1280,
        1283,5,299,0,0,1281,1283,5,342,0,0,1282,1276,1,0,0,0,1282,1279,1,
        0,0,0,1282,1281,1,0,0,0,1283,127,1,0,0,0,1284,1285,5,56,0,0,1285,
        1288,5,90,0,0,1286,1287,5,88,0,0,1287,1289,5,64,0,0,1288,1286,1,
        0,0,0,1288,1289,1,0,0,0,1289,1290,1,0,0,0,1290,1293,3,380,190,0,
        1291,1292,5,119,0,0,1292,1294,3,352,176,0,1293,1291,1,0,0,0,1293,
        1294,1,0,0,0,1294,1296,1,0,0,0,1295,1297,5,475,0,0,1296,1295,1,0,
        0,0,1296,1297,1,0,0,0,1297,129,1,0,0,0,1298,1299,5,56,0,0,1299,1302,
        5,138,0,0,1300,1301,5,88,0,0,1301,1303,5,64,0,0,1302,1300,1,0,0,
        0,1302,1303,1,0,0,0,1303,1304,1,0,0,0,1304,1306,3,356,178,0,1305,
        1307,5,475,0,0,1306,1305,1,0,0,0,1306,1307,1,0,0,0,1307,131,1,0,
        0,0,1308,1309,5,56,0,0,1309,1313,5,170,0,0,1310,1311,3,352,176,0,
        1311,1312,5,467,0,0,1312,1314,1,0,0,0,1313,1310,1,0,0,0,1313,1314,
        1,0,0,0,1314,1315,1,0,0,0,1315,1317,3,380,190,0,1316,1318,5,475,
        0,0,1317,1316,1,0,0,0,1317,1318,1,0,0,0,1318,133,1,0,0,0,1319,1320,
        5,56,0,0,1320,1323,5,174,0,0,1321,1322,5,88,0,0,1322,1324,5,64,0,
        0,1323,1321,1,0,0,0,1323,1324,1,0,0,0,1324,1325,1,0,0,0,1325,1327,
        3,352,176,0,1326,1328,5,475,0,0,1327,1326,1,0,0,0,1327,1328,1,0,
        0,0,1328,135,1,0,0,0,1329,1330,5,56,0,0,1330,1333,5,44,0,0,1331,
        1332,5,88,0,0,1332,1334,5,64,0,0,1333,1331,1,0,0,0,1333,1334,1,0,
        0,0,1334,1337,1,0,0,0,1335,1338,3,380,190,0,1336,1338,5,38,0,0,1337,
        1335,1,0,0,0,1337,1336,1,0,0,0,1338,1340,1,0,0,0,1339,1341,5,475,
        0,0,1340,1339,1,0,0,0,1340,1341,1,0,0,0,1341,137,1,0,0,0,1342,1343,
        5,56,0,0,1343,1346,5,171,0,0,1344,1345,5,88,0,0,1345,1347,5,64,0,
        0,1346,1344,1,0,0,0,1346,1347,1,0,0,0,1347,1348,1,0,0,0,1348,1350,
        3,354,177,0,1349,1351,5,475,0,0,1350,1349,1,0,0,0,1350,1351,1,0,
        0,0,1351,139,1,0,0,0,1352,1353,5,56,0,0,1353,1356,5,198,0,0,1354,
        1355,5,88,0,0,1355,1357,5,64,0,0,1356,1354,1,0,0,0,1356,1357,1,0,
        0,0,1357,1358,1,0,0,0,1358,1363,3,354,177,0,1359,1360,5,474,0,0,
        1360,1362,3,354,177,0,1361,1359,1,0,0,0,1362,1365,1,0,0,0,1363,1361,
        1,0,0,0,1363,1364,1,0,0,0,1364,1367,1,0,0,0,1365,1363,1,0,0,0,1366,
        1368,5,475,0,0,1367,1366,1,0,0,0,1367,1368,1,0,0,0,1368,141,1,0,
        0,0,1369,1370,5,56,0,0,1370,1373,5,158,0,0,1371,1372,5,88,0,0,1372,
        1374,5,64,0,0,1373,1371,1,0,0,0,1373,1374,1,0,0,0,1374,1375,1,0,
        0,0,1375,1377,3,354,177,0,1376,1378,5,475,0,0,1377,1376,1,0,0,0,
        1377,1378,1,0,0,0,1378,143,1,0,0,0,1379,1380,5,56,0,0,1380,1383,
        5,79,0,0,1381,1382,5,88,0,0,1382,1384,5,64,0,0,1383,1381,1,0,0,0,
        1383,1384,1,0,0,0,1384,1385,1,0,0,0,1385,1387,3,356,178,0,1386,1388,
        5,475,0,0,1387,1386,1,0,0,0,1387,1388,1,0,0,0,1388,145,1,0,0,0,1389,
        1390,5,36,0,0,1390,1391,5,427,0,0,1391,1392,3,354,177,0,1392,1393,
        5,77,0,0,1393,1394,3,410,205,0,1394,1395,3,374,187,0,1395,1409,1,
        0,0,0,1396,1397,5,36,0,0,1397,1398,5,427,0,0,1398,1399,3,354,177,
        0,1399,1400,5,6,0,0,1400,1401,5,174,0,0,1401,1402,5,472,0,0,1402,
        1404,3,184,92,0,1403,1405,5,474,0,0,1404,1403,1,0,0,0,1404,1405,
        1,0,0,0,1405,1406,1,0,0,0,1406,1407,5,473,0,0,1407,1409,1,0,0,0,
        1408,1389,1,0,0,0,1408,1396,1,0,0,0,1409,147,1,0,0,0,1410,1411,5,
        56,0,0,1411,1414,5,427,0,0,1412,1413,5,88,0,0,1413,1415,5,64,0,0,
        1414,1412,1,0,0,0,1414,1415,1,0,0,0,1415,1416,1,0,0,0,1416,1417,
        3,354,177,0,1417,149,1,0,0,0,1418,1421,3,152,76,0,1419,1421,3,154,
        77,0,1420,1418,1,0,0,0,1420,1419,1,0,0,0,1421,151,1,0,0,0,1422,1423,
        5,122,0,0,1423,1424,5,472,0,0,1424,1425,3,380,190,0,1425,1426,5,
        474,0,0,1426,1427,5,451,0,0,1427,1428,5,473,0,0,1428,153,1,0,0,0,
        1429,1430,5,121,0,0,1430,1431,5,472,0,0,1431,1432,5,451,0,0,1432,
        1433,5,474,0,0,1433,1434,5,451,0,0,1434,1435,5,473,0,0,1435,1437,
        5,467,0,0,1436,1438,3,380,190,0,1437,1436,1,0,0,0,1437,1438,1,0,
        0,0,1438,1439,1,0,0,0,1439,1441,5,467,0,0,1440,1442,3,380,190,0,
        1441,1440,1,0,0,0,1441,1442,1,0,0,0,1442,1443,1,0,0,0,1443,1444,
        5,467,0,0,1444,1445,3,380,190,0,1445,155,1,0,0,0,1446,1447,5,47,
        0,0,1447,1449,5,448,0,0,1448,1450,5,6,0,0,1449,1448,1,0,0,0,1449,
        1450,1,0,0,0,1450,1453,1,0,0,0,1451,1454,3,182,91,0,1452,1454,3,
        268,134,0,1453,1451,1,0,0,0,1453,1452,1,0,0,0,1454,1456,1,0,0,0,
        1455,1457,5,475,0,0,1456,1455,1,0,0,0,1456,1457,1,0,0,0,1457,1471,
        1,0,0,0,1458,1459,5,47,0,0,1459,1464,3,180,90,0,1460,1461,5,474,
        0,0,1461,1463,3,180,90,0,1462,1460,1,0,0,0,1463,1466,1,0,0,0,1464,
        1462,1,0,0,0,1464,1465,1,0,0,0,1465,1468,1,0,0,0,1466,1464,1,0,0,
        0,1467,1469,5,475,0,0,1468,1467,1,0,0,0,1468,1469,1,0,0,0,1469,1471,
        1,0,0,0,1470,1446,1,0,0,0,1470,1458,1,0,0,0,1471,157,1,0,0,0,1472,
        1474,5,23,0,0,1473,1475,5,290,0,0,1474,1473,1,0,0,0,1474,1475,1,
        0,0,0,1475,1476,1,0,0,0,1476,1478,3,364,182,0,1477,1479,5,475,0,
        0,1478,1477,1,0,0,0,1478,1479,1,0,0,0,1479,1499,1,0,0,0,1480,1482,
        5,46,0,0,1481,1483,5,290,0,0,1482,1481,1,0,0,0,1482,1483,1,0,0,0,
        1483,1484,1,0,0,0,1484,1486,3,364,182,0,1485,1487,5,475,0,0,1486,
        1485,1,0,0,0,1486,1487,1,0,0,0,1487,1499,1,0,0,0,1488,1499,3,198,
        99,0,1489,1499,3,202,101,0,1490,1492,5,120,0,0,1491,1493,5,290,0,
        0,1492,1491,1,0,0,0,1492,1493,1,0,0,0,1493,1494,1,0,0,0,1494,1496,
        3,364,182,0,1495,1497,5,475,0,0,1496,1495,1,0,0,0,1496,1497,1,0,
        0,0,1497,1499,1,0,0,0,1498,1472,1,0,0,0,1498,1480,1,0,0,0,1498,1488,
        1,0,0,0,1498,1489,1,0,0,0,1498,1490,1,0,0,0,1499,159,1,0,0,0,1500,
        1503,5,63,0,0,1501,1502,5,448,0,0,1502,1504,5,455,0,0,1503,1501,
        1,0,0,0,1503,1504,1,0,0,0,1504,1505,1,0,0,0,1505,1514,3,356,178,
        0,1506,1511,3,162,81,0,1507,1508,5,474,0,0,1508,1510,3,162,81,0,
        1509,1507,1,0,0,0,1510,1513,1,0,0,0,1511,1509,1,0,0,0,1511,1512,
        1,0,0,0,1512,1515,1,0,0,0,1513,1511,1,0,0,0,1514,1506,1,0,0,0,1514,
        1515,1,0,0,0,1515,1517,1,0,0,0,1516,1518,5,475,0,0,1517,1516,1,0,
        0,0,1517,1518,1,0,0,0,1518,1542,1,0,0,0,1519,1520,5,63,0,0,1520,
        1521,5,472,0,0,1521,1526,3,164,82,0,1522,1523,5,480,0,0,1523,1525,
        3,164,82,0,1524,1522,1,0,0,0,1525,1528,1,0,0,0,1526,1524,1,0,0,0,
        1526,1527,1,0,0,0,1527,1529,1,0,0,0,1528,1526,1,0,0,0,1529,1536,
        5,473,0,0,1530,1532,5,6,0,0,1531,1530,1,0,0,0,1531,1532,1,0,0,0,
        1532,1533,1,0,0,0,1533,1534,7,20,0,0,1534,1535,5,455,0,0,1535,1537,
        5,451,0,0,1536,1531,1,0,0,0,1536,1537,1,0,0,0,1537,1539,1,0,0,0,
        1538,1540,5,475,0,0,1539,1538,1,0,0,0,1539,1540,1,0,0,0,1540,1542,
        1,0,0,0,1541,1500,1,0,0,0,1541,1519,1,0,0,0,1542,161,1,0,0,0,1543,
        1544,5,448,0,0,1544,1546,5,455,0,0,1545,1543,1,0,0,0,1545,1546,1,
        0,0,0,1546,1556,1,0,0,0,1547,1550,3,206,103,0,1548,1550,3,380,190,
        0,1549,1547,1,0,0,0,1549,1548,1,0,0,0,1550,1552,1,0,0,0,1551,1553,
        7,21,0,0,1552,1551,1,0,0,0,1552,1553,1,0,0,0,1553,1557,1,0,0,0,1554,
        1557,5,48,0,0,1555,1557,5,113,0,0,1556,1549,1,0,0,0,1556,1554,1,
        0,0,0,1556,1555,1,0,0,0,1557,163,1,0,0,0,1558,1559,7,1,0,0,1559,
        165,1,0,0,0,1560,1562,3,178,89,0,1561,1563,5,475,0,0,1562,1561,1,
        0,0,0,1562,1563,1,0,0,0,1563,1609,1,0,0,0,1564,1576,5,81,0,0,1565,
        1567,5,2,0,0,1566,1568,5,364,0,0,1567,1566,1,0,0,0,1567,1568,1,0,
        0,0,1568,1577,1,0,0,0,1569,1574,3,168,84,0,1570,1571,5,472,0,0,1571,
        1572,3,362,181,0,1572,1573,5,473,0,0,1573,1575,1,0,0,0,1574,1570,
        1,0,0,0,1574,1575,1,0,0,0,1575,1577,1,0,0,0,1576,1565,1,0,0,0,1576,
        1569,1,0,0,0,1577,1580,1,0,0,0,1578,1579,5,119,0,0,1579,1581,3,352,
        176,0,1580,1578,1,0,0,0,1580,1581,1,0,0,0,1581,1582,1,0,0,0,1582,
        1583,5,178,0,0,1583,1587,3,380,190,0,1584,1585,5,203,0,0,1585,1586,
        5,81,0,0,1586,1588,5,125,0,0,1587,1584,1,0,0,0,1587,1588,1,0,0,0,
        1588,1591,1,0,0,0,1589,1590,5,6,0,0,1590,1592,3,380,190,0,1591,1589,
        1,0,0,0,1591,1592,1,0,0,0,1592,1594,1,0,0,0,1593,1595,5,475,0,0,
        1594,1593,1,0,0,0,1594,1595,1,0,0,0,1595,1609,1,0,0,0,1596,1603,
        5,150,0,0,1597,1598,5,472,0,0,1598,1599,5,203,0,0,1599,1600,5,242,
        0,0,1600,1601,5,455,0,0,1601,1602,5,448,0,0,1602,1604,5,473,0,0,
        1603,1597,1,0,0,0,1603,1604,1,0,0,0,1604,1606,1,0,0,0,1605,1607,
        5,475,0,0,1606,1605,1,0,0,0,1606,1607,1,0,0,0,1607,1609,1,0,0,0,
        1608,1560,1,0,0,0,1608,1564,1,0,0,0,1608,1596,1,0,0,0,1609,167,1,
        0,0,0,1610,1637,5,63,0,0,1611,1612,5,198,0,0,1612,1637,3,380,190,
        0,1613,1614,5,413,0,0,1614,1637,3,380,190,0,1615,1617,5,241,0,0,
        1616,1618,3,380,190,0,1617,1616,1,0,0,0,1617,1618,1,0,0,0,1618,1637,
        1,0,0,0,1619,1620,5,36,0,0,1620,1637,7,22,0,0,1621,1637,5,396,0,
        0,1622,1637,5,300,0,0,1623,1637,5,160,0,0,1624,1637,5,144,0,0,1625,
        1637,5,93,0,0,1626,1634,5,3,0,0,1627,1629,5,5,0,0,1628,1627,1,0,
        0,0,1628,1629,1,0,0,0,1629,1632,1,0,0,0,1630,1633,3,380,190,0,1631,
        1633,5,44,0,0,1632,1630,1,0,0,0,1632,1631,1,0,0,0,1633,1635,1,0,
        0,0,1634,1628,1,0,0,0,1634,1635,1,0,0,0,1635,1637,1,0,0,0,1636,1610,
        1,0,0,0,1636,1611,1,0,0,0,1636,1613,1,0,0,0,1636,1615,1,0,0,0,1636,
        1619,1,0,0,0,1636,1621,1,0,0,0,1636,1622,1,0,0,0,1636,1623,1,0,0,
        0,1636,1624,1,0,0,0,1636,1625,1,0,0,0,1636,1626,1,0,0,0,1637,169,
        1,0,0,0,1638,1639,5,165,0,0,1639,1642,5,448,0,0,1640,1641,5,467,
        0,0,1641,1643,3,380,190,0,1642,1640,1,0,0,0,1642,1643,1,0,0,0,1643,
        1644,1,0,0,0,1644,1645,5,455,0,0,1645,1647,3,208,104,0,1646,1648,
        5,475,0,0,1647,1646,1,0,0,0,1647,1648,1,0,0,0,1648,1678,1,0,0,0,
        1649,1650,5,165,0,0,1650,1651,5,448,0,0,1651,1652,3,386,193,0,1652,
        1654,3,208,104,0,1653,1655,5,475,0,0,1654,1653,1,0,0,0,1654,1655,
        1,0,0,0,1655,1678,1,0,0,0,1656,1657,5,165,0,0,1657,1658,5,448,0,
        0,1658,1659,5,455,0,0,1659,1660,5,43,0,0,1660,1671,3,200,100,0,1661,
        1669,5,72,0,0,1662,1663,5,141,0,0,1663,1670,5,349,0,0,1664,1667,
        5,191,0,0,1665,1666,5,116,0,0,1666,1668,3,362,181,0,1667,1665,1,
        0,0,0,1667,1668,1,0,0,0,1668,1670,1,0,0,0,1669,1662,1,0,0,0,1669,
        1664,1,0,0,0,1670,1672,1,0,0,0,1671,1661,1,0,0,0,1671,1672,1,0,0,
        0,1672,1674,1,0,0,0,1673,1675,5,475,0,0,1674,1673,1,0,0,0,1674,1675,
        1,0,0,0,1675,1678,1,0,0,0,1676,1678,3,204,102,0,1677,1638,1,0,0,
        0,1677,1649,1,0,0,0,1677,1656,1,0,0,0,1677,1676,1,0,0,0,1678,171,
        1,0,0,0,1679,1680,5,10,0,0,1680,1681,5,54,0,0,1681,1684,7,23,0,0,
        1682,1685,3,380,190,0,1683,1685,5,448,0,0,1684,1682,1,0,0,0,1684,
        1683,1,0,0,0,1684,1685,1,0,0,0,1685,1687,1,0,0,0,1686,1688,5,475,
        0,0,1687,1686,1,0,0,0,1687,1688,1,0,0,0,1688,1757,1,0,0,0,1689,1690,
        5,10,0,0,1690,1700,7,23,0,0,1691,1694,3,380,190,0,1692,1694,5,448,
        0,0,1693,1691,1,0,0,0,1693,1692,1,0,0,0,1694,1698,1,0,0,0,1695,1696,
        5,203,0,0,1696,1697,5,321,0,0,1697,1699,5,451,0,0,1698,1695,1,0,
        0,0,1698,1699,1,0,0,0,1699,1701,1,0,0,0,1700,1693,1,0,0,0,1700,1701,
        1,0,0,0,1701,1703,1,0,0,0,1702,1704,5,475,0,0,1703,1702,1,0,0,0,
        1703,1704,1,0,0,0,1704,1757,1,0,0,0,1705,1706,5,28,0,0,1706,1719,
        7,23,0,0,1707,1710,3,380,190,0,1708,1710,5,448,0,0,1709,1707,1,0,
        0,0,1709,1708,1,0,0,0,1710,1717,1,0,0,0,1711,1712,5,203,0,0,1712,
        1713,5,472,0,0,1713,1714,5,262,0,0,1714,1715,5,455,0,0,1715,1716,
        7,9,0,0,1716,1718,5,473,0,0,1717,1711,1,0,0,0,1717,1718,1,0,0,0,
        1718,1720,1,0,0,0,1719,1709,1,0,0,0,1719,1720,1,0,0,0,1720,1722,
        1,0,0,0,1721,1723,5,475,0,0,1722,1721,1,0,0,0,1722,1723,1,0,0,0,
        1723,1757,1,0,0,0,1724,1726,5,28,0,0,1725,1727,5,438,0,0,1726,1725,
        1,0,0,0,1726,1727,1,0,0,0,1727,1729,1,0,0,0,1728,1730,5,475,0,0,
        1729,1728,1,0,0,0,1729,1730,1,0,0,0,1730,1757,1,0,0,0,1731,1732,
        5,153,0,0,1732,1735,7,23,0,0,1733,1736,3,380,190,0,1734,1736,5,448,
        0,0,1735,1733,1,0,0,0,1735,1734,1,0,0,0,1735,1736,1,0,0,0,1736,1738,
        1,0,0,0,1737,1739,5,475,0,0,1738,1737,1,0,0,0,1738,1739,1,0,0,0,
        1739,1757,1,0,0,0,1740,1742,5,153,0,0,1741,1743,5,438,0,0,1742,1741,
        1,0,0,0,1742,1743,1,0,0,0,1743,1745,1,0,0,0,1744,1746,5,475,0,0,
        1745,1744,1,0,0,0,1745,1746,1,0,0,0,1746,1757,1,0,0,0,1747,1748,
        5,157,0,0,1748,1751,7,23,0,0,1749,1752,3,380,190,0,1750,1752,5,448,
        0,0,1751,1749,1,0,0,0,1751,1750,1,0,0,0,1751,1752,1,0,0,0,1752,1754,
        1,0,0,0,1753,1755,5,475,0,0,1754,1753,1,0,0,0,1754,1755,1,0,0,0,
        1755,1757,1,0,0,0,1756,1679,1,0,0,0,1756,1689,1,0,0,0,1756,1705,
        1,0,0,0,1756,1724,1,0,0,0,1756,1731,1,0,0,0,1756,1740,1,0,0,0,1756,
        1747,1,0,0,0,1757,173,1,0,0,0,1758,1760,5,291,0,0,1759,1761,5,449,
        0,0,1760,1759,1,0,0,0,1760,1761,1,0,0,0,1761,175,1,0,0,0,1762,1763,
        5,193,0,0,1763,1765,3,380,190,0,1764,1766,5,475,0,0,1765,1764,1,
        0,0,0,1765,1766,1,0,0,0,1766,177,1,0,0,0,1767,1768,5,63,0,0,1768,
        1769,5,6,0,0,1769,1770,7,24,0,0,1770,179,1,0,0,0,1771,1773,5,448,
        0,0,1772,1774,5,6,0,0,1773,1772,1,0,0,0,1773,1774,1,0,0,0,1774,1775,
        1,0,0,0,1775,1778,3,410,205,0,1776,1777,5,455,0,0,1777,1779,3,208,
        104,0,1778,1776,1,0,0,0,1778,1779,1,0,0,0,1779,181,1,0,0,0,1780,
        1781,5,174,0,0,1781,1782,5,472,0,0,1782,1783,3,184,92,0,1783,1784,
        5,473,0,0,1784,183,1,0,0,0,1785,1792,3,186,93,0,1786,1788,5,474,
        0,0,1787,1786,1,0,0,0,1787,1788,1,0,0,0,1788,1789,1,0,0,0,1789,1791,
        3,186,93,0,1790,1787,1,0,0,0,1791,1794,1,0,0,0,1792,1790,1,0,0,0,
        1792,1793,1,0,0,0,1793,185,1,0,0,0,1794,1792,1,0,0,0,1795,1798,3,
        188,94,0,1796,1798,3,192,96,0,1797,1795,1,0,0,0,1797,1796,1,0,0,
        0,1798,187,1,0,0,0,1799,1803,3,380,190,0,1800,1804,3,410,205,0,1801,
        1802,5,6,0,0,1802,1804,3,208,104,0,1803,1800,1,0,0,0,1803,1801,1,
        0,0,0,1804,1807,1,0,0,0,1805,1806,5,26,0,0,1806,1808,3,380,190,0,
        1807,1805,1,0,0,0,1807,1808,1,0,0,0,1808,1810,1,0,0,0,1809,1811,
        3,370,185,0,1810,1809,1,0,0,0,1810,1811,1,0,0,0,1811,1835,1,0,0,
        0,1812,1813,5,30,0,0,1813,1815,3,380,190,0,1814,1812,1,0,0,0,1814,
        1815,1,0,0,0,1815,1816,1,0,0,0,1816,1817,5,48,0,0,1817,1820,3,214,
        107,0,1818,1819,5,203,0,0,1819,1821,5,195,0,0,1820,1818,1,0,0,0,
        1820,1821,1,0,0,0,1821,1836,1,0,0,0,1822,1828,5,84,0,0,1823,1824,
        5,472,0,0,1824,1825,5,449,0,0,1825,1826,5,474,0,0,1826,1827,5,449,
        0,0,1827,1829,5,473,0,0,1828,1823,1,0,0,0,1828,1829,1,0,0,0,1829,
        1833,1,0,0,0,1830,1831,5,112,0,0,1831,1832,5,72,0,0,1832,1834,5,
        145,0,0,1833,1830,1,0,0,0,1833,1834,1,0,0,0,1834,1836,1,0,0,0,1835,
        1814,1,0,0,0,1835,1822,1,0,0,0,1835,1836,1,0,0,0,1836,1838,1,0,0,
        0,1837,1839,5,155,0,0,1838,1837,1,0,0,0,1838,1839,1,0,0,0,1839,1843,
        1,0,0,0,1840,1842,3,190,95,0,1841,1840,1,0,0,0,1842,1845,1,0,0,0,
        1843,1841,1,0,0,0,1843,1844,1,0,0,0,1844,189,1,0,0,0,1845,1843,1,
        0,0,0,1846,1847,5,30,0,0,1847,1849,3,380,190,0,1848,1846,1,0,0,0,
        1848,1849,1,0,0,0,1849,1851,1,0,0,0,1850,1852,3,370,185,0,1851,1850,
        1,0,0,0,1851,1852,1,0,0,0,1852,1874,1,0,0,0,1853,1854,5,135,0,0,
        1854,1857,5,98,0,0,1855,1857,5,189,0,0,1856,1853,1,0,0,0,1856,1855,
        1,0,0,0,1857,1859,1,0,0,0,1858,1860,3,368,184,0,1859,1858,1,0,0,
        0,1859,1860,1,0,0,0,1860,1862,1,0,0,0,1861,1863,3,194,97,0,1862,
        1861,1,0,0,0,1862,1863,1,0,0,0,1863,1875,1,0,0,0,1864,1868,5,21,
        0,0,1865,1866,5,112,0,0,1866,1867,5,72,0,0,1867,1869,5,145,0,0,1868,
        1865,1,0,0,0,1868,1869,1,0,0,0,1869,1870,1,0,0,0,1870,1871,5,472,
        0,0,1871,1872,3,226,113,0,1872,1873,5,473,0,0,1873,1875,1,0,0,0,
        1874,1856,1,0,0,0,1874,1864,1,0,0,0,1875,191,1,0,0,0,1876,1877,5,
        30,0,0,1877,1879,3,380,190,0,1878,1876,1,0,0,0,1878,1879,1,0,0,0,
        1879,1932,1,0,0,0,1880,1881,5,135,0,0,1881,1884,5,98,0,0,1882,1884,
        5,189,0,0,1883,1880,1,0,0,0,1883,1882,1,0,0,0,1884,1886,1,0,0,0,
        1885,1887,3,368,184,0,1886,1885,1,0,0,0,1886,1887,1,0,0,0,1887,1888,
        1,0,0,0,1888,1889,5,472,0,0,1889,1891,3,380,190,0,1890,1892,7,5,
        0,0,1891,1890,1,0,0,0,1891,1892,1,0,0,0,1892,1900,1,0,0,0,1893,1894,
        5,474,0,0,1894,1896,3,380,190,0,1895,1897,7,5,0,0,1896,1895,1,0,
        0,0,1896,1897,1,0,0,0,1897,1899,1,0,0,0,1898,1893,1,0,0,0,1899,1902,
        1,0,0,0,1900,1898,1,0,0,0,1900,1901,1,0,0,0,1901,1903,1,0,0,0,1902,
        1900,1,0,0,0,1903,1905,5,473,0,0,1904,1906,3,194,97,0,1905,1904,
        1,0,0,0,1905,1906,1,0,0,0,1906,1909,1,0,0,0,1907,1908,5,119,0,0,
        1908,1910,3,380,190,0,1909,1907,1,0,0,0,1909,1910,1,0,0,0,1910,1933,
        1,0,0,0,1911,1912,5,74,0,0,1912,1913,5,98,0,0,1913,1914,5,472,0,
        0,1914,1915,3,362,181,0,1915,1916,5,473,0,0,1916,1917,5,144,0,0,
        1917,1918,3,352,176,0,1918,1919,5,472,0,0,1919,1920,3,362,181,0,
        1920,1921,5,473,0,0,1921,1933,1,0,0,0,1922,1926,5,21,0,0,1923,1924,
        5,112,0,0,1924,1925,5,72,0,0,1925,1927,5,145,0,0,1926,1923,1,0,0,
        0,1926,1927,1,0,0,0,1927,1928,1,0,0,0,1928,1929,5,472,0,0,1929,1930,
        3,226,113,0,1930,1931,5,473,0,0,1931,1933,1,0,0,0,1932,1883,1,0,
        0,0,1932,1911,1,0,0,0,1932,1922,1,0,0,0,1933,193,1,0,0,0,1934,1935,
        5,203,0,0,1935,1936,5,472,0,0,1936,1941,3,196,98,0,1937,1938,5,474,
        0,0,1938,1940,3,196,98,0,1939,1937,1,0,0,0,1940,1943,1,0,0,0,1941,
        1939,1,0,0,0,1941,1942,1,0,0,0,1942,1944,1,0,0,0,1943,1941,1,0,0,
        0,1944,1945,5,473,0,0,1945,195,1,0,0,0,1946,1947,3,382,191,0,1947,
        1951,5,455,0,0,1948,1952,3,382,191,0,1949,1952,3,366,183,0,1950,
        1952,5,449,0,0,1951,1948,1,0,0,0,1951,1949,1,0,0,0,1951,1950,1,0,
        0,0,1952,197,1,0,0,0,1953,1954,5,47,0,0,1954,1986,3,364,182,0,1955,
        1965,5,43,0,0,1956,1963,3,200,100,0,1957,1958,5,72,0,0,1958,1961,
        5,191,0,0,1959,1960,5,116,0,0,1960,1962,3,362,181,0,1961,1959,1,
        0,0,0,1961,1962,1,0,0,0,1962,1964,1,0,0,0,1963,1957,1,0,0,0,1963,
        1964,1,0,0,0,1964,1966,1,0,0,0,1965,1956,1,0,0,0,1965,1966,1,0,0,
        0,1966,1987,1,0,0,0,1967,1969,5,304,0,0,1968,1967,1,0,0,0,1968,1969,
        1,0,0,0,1969,1971,1,0,0,0,1970,1972,5,390,0,0,1971,1970,1,0,0,0,
        1971,1972,1,0,0,0,1972,1973,1,0,0,0,1973,1974,5,43,0,0,1974,1975,
        5,72,0,0,1975,1984,3,52,26,0,1976,1982,5,72,0,0,1977,1978,5,141,
        0,0,1978,1983,5,349,0,0,1979,1983,5,191,0,0,1980,1981,5,116,0,0,
        1981,1983,3,362,181,0,1982,1977,1,0,0,0,1982,1979,1,0,0,0,1982,1980,
        1,0,0,0,1983,1985,1,0,0,0,1984,1976,1,0,0,0,1984,1985,1,0,0,0,1985,
        1987,1,0,0,0,1986,1955,1,0,0,0,1986,1968,1,0,0,0,1987,1989,1,0,0,
        0,1988,1990,5,475,0,0,1989,1988,1,0,0,0,1989,1990,1,0,0,0,1990,199,
        1,0,0,0,1991,1993,7,11,0,0,1992,1991,1,0,0,0,1992,1993,1,0,0,0,1993,
        1995,1,0,0,0,1994,1996,7,25,0,0,1995,1994,1,0,0,0,1995,1996,1,0,
        0,0,1996,1998,1,0,0,0,1997,1999,7,26,0,0,1998,1997,1,0,0,0,1998,
        1999,1,0,0,0,1999,2001,1,0,0,0,2000,2002,7,27,0,0,2001,2000,1,0,
        0,0,2001,2002,1,0,0,0,2002,2004,1,0,0,0,2003,2005,5,428,0,0,2004,
        2003,1,0,0,0,2004,2005,1,0,0,0,2005,2006,1,0,0,0,2006,2007,5,72,
        0,0,2007,2008,3,52,26,0,2008,201,1,0,0,0,2009,2019,5,68,0,0,2010,
        2017,5,108,0,0,2011,2017,5,363,0,0,2012,2017,5,281,0,0,2013,2017,
        5,313,0,0,2014,2015,7,28,0,0,2015,2017,3,208,104,0,2016,2010,1,0,
        0,0,2016,2011,1,0,0,0,2016,2012,1,0,0,0,2016,2013,1,0,0,0,2016,2014,
        1,0,0,0,2016,2017,1,0,0,0,2017,2018,1,0,0,0,2018,2020,5,77,0,0,2019,
        2016,1,0,0,0,2019,2020,1,0,0,0,2020,2022,1,0,0,0,2021,2023,5,290,
        0,0,2022,2021,1,0,0,0,2022,2023,1,0,0,0,2023,2024,1,0,0,0,2024,2034,
        3,364,182,0,2025,2026,5,95,0,0,2026,2031,5,448,0,0,2027,2028,5,474,
        0,0,2028,2030,5,448,0,0,2029,2027,1,0,0,0,2030,2033,1,0,0,0,2031,
        2029,1,0,0,0,2031,2032,1,0,0,0,2032,2035,1,0,0,0,2033,2031,1,0,0,
        0,2034,2025,1,0,0,0,2034,2035,1,0,0,0,2035,2037,1,0,0,0,2036,2038,
        5,475,0,0,2037,2036,1,0,0,0,2037,2038,1,0,0,0,2038,203,1,0,0,0,2039,
        2040,5,165,0,0,2040,2044,3,380,190,0,2041,2045,3,380,190,0,2042,
        2045,3,206,103,0,2043,2045,3,366,183,0,2044,2041,1,0,0,0,2044,2042,
        1,0,0,0,2044,2043,1,0,0,0,2045,2047,1,0,0,0,2046,2048,5,475,0,0,
        2047,2046,1,0,0,0,2047,2048,1,0,0,0,2048,2087,1,0,0,0,2049,2050,
        5,165,0,0,2050,2051,5,181,0,0,2051,2052,5,306,0,0,2052,2061,5,316,
        0,0,2053,2054,5,141,0,0,2054,2062,5,430,0,0,2055,2056,5,141,0,0,
        2056,2062,5,237,0,0,2057,2058,5,378,0,0,2058,2062,5,141,0,0,2059,
        2062,5,402,0,0,2060,2062,5,394,0,0,2061,2053,1,0,0,0,2061,2055,1,
        0,0,0,2061,2057,1,0,0,0,2061,2059,1,0,0,0,2061,2060,1,0,0,0,2062,
        2064,1,0,0,0,2063,2065,5,475,0,0,2064,2063,1,0,0,0,2064,2065,1,0,
        0,0,2065,2087,1,0,0,0,2066,2067,5,165,0,0,2067,2068,5,86,0,0,2068,
        2069,3,352,176,0,2069,2071,3,366,183,0,2070,2072,5,475,0,0,2071,
        2070,1,0,0,0,2071,2072,1,0,0,0,2072,2087,1,0,0,0,2073,2074,5,165,
        0,0,2074,2075,5,210,0,0,2075,2087,3,366,183,0,2076,2077,5,165,0,
        0,2077,2078,5,366,0,0,2078,2087,3,366,183,0,2079,2080,5,165,0,0,
        2080,2081,5,212,0,0,2081,2087,3,366,183,0,2082,2083,5,165,0,0,2083,
        2084,5,170,0,0,2084,2085,7,29,0,0,2085,2087,3,366,183,0,2086,2039,
        1,0,0,0,2086,2049,1,0,0,0,2086,2066,1,0,0,0,2086,2073,1,0,0,0,2086,
        2076,1,0,0,0,2086,2079,1,0,0,0,2086,2082,1,0,0,0,2087,205,1,0,0,
        0,2088,2091,3,376,188,0,2089,2091,5,448,0,0,2090,2088,1,0,0,0,2090,
        2089,1,0,0,0,2091,207,1,0,0,0,2092,2093,6,104,-1,0,2093,2140,5,48,
        0,0,2094,2140,5,113,0,0,2095,2140,5,448,0,0,2096,2140,3,376,188,
        0,2097,2140,3,294,147,0,2098,2099,5,18,0,0,2099,2101,3,208,104,0,
        2100,2102,3,296,148,0,2101,2100,1,0,0,0,2102,2103,1,0,0,0,2103,2101,
        1,0,0,0,2103,2104,1,0,0,0,2104,2107,1,0,0,0,2105,2106,5,58,0,0,2106,
        2108,3,208,104,0,2107,2105,1,0,0,0,2107,2108,1,0,0,0,2108,2109,1,
        0,0,0,2109,2110,5,59,0,0,2110,2140,1,0,0,0,2111,2113,5,18,0,0,2112,
        2114,3,298,149,0,2113,2112,1,0,0,0,2114,2115,1,0,0,0,2115,2113,1,
        0,0,0,2115,2116,1,0,0,0,2116,2119,1,0,0,0,2117,2118,5,58,0,0,2118,
        2120,3,208,104,0,2119,2117,1,0,0,0,2119,2120,1,0,0,0,2120,2121,1,
        0,0,0,2121,2122,5,59,0,0,2122,2140,1,0,0,0,2123,2140,3,360,180,0,
        2124,2125,5,472,0,0,2125,2126,3,208,104,0,2126,2127,5,473,0,0,2127,
        2140,1,0,0,0,2128,2129,5,472,0,0,2129,2130,3,216,108,0,2130,2131,
        5,473,0,0,2131,2140,1,0,0,0,2132,2133,5,482,0,0,2133,2140,3,208,
        104,9,2134,2135,7,30,0,0,2135,2140,3,208,104,7,2136,2140,3,330,165,
        0,2137,2140,3,406,203,0,2138,2140,3,408,204,0,2139,2092,1,0,0,0,
        2139,2094,1,0,0,0,2139,2095,1,0,0,0,2139,2096,1,0,0,0,2139,2097,
        1,0,0,0,2139,2098,1,0,0,0,2139,2111,1,0,0,0,2139,2123,1,0,0,0,2139,
        2124,1,0,0,0,2139,2128,1,0,0,0,2139,2132,1,0,0,0,2139,2134,1,0,0,
        0,2139,2136,1,0,0,0,2139,2137,1,0,0,0,2139,2138,1,0,0,0,2140,2164,
        1,0,0,0,2141,2142,10,15,0,0,2142,2143,5,216,0,0,2143,2144,5,420,
        0,0,2144,2145,5,441,0,0,2145,2163,3,208,104,16,2146,2147,10,8,0,
        0,2147,2148,7,31,0,0,2148,2163,3,208,104,9,2149,2150,10,6,0,0,2150,
        2151,7,32,0,0,2151,2163,3,208,104,7,2152,2153,10,5,0,0,2153,2154,
        3,384,192,0,2154,2155,3,208,104,6,2155,2163,1,0,0,0,2156,2157,10,
        16,0,0,2157,2158,5,26,0,0,2158,2163,3,380,190,0,2159,2160,10,1,0,
        0,2160,2161,5,467,0,0,2161,2163,3,210,105,0,2162,2141,1,0,0,0,2162,
        2146,1,0,0,0,2162,2149,1,0,0,0,2162,2152,1,0,0,0,2162,2156,1,0,0,
        0,2162,2159,1,0,0,0,2163,2166,1,0,0,0,2164,2162,1,0,0,0,2164,2165,
        1,0,0,0,2165,209,1,0,0,0,2166,2164,1,0,0,0,2167,2168,3,212,106,0,
        2168,2170,5,472,0,0,2169,2171,3,316,158,0,2170,2169,1,0,0,0,2170,
        2171,1,0,0,0,2171,2172,1,0,0,0,2172,2173,5,473,0,0,2173,2187,1,0,
        0,0,2174,2175,5,338,0,0,2175,2177,5,472,0,0,2176,2178,3,316,158,
        0,2177,2176,1,0,0,0,2177,2178,1,0,0,0,2178,2179,1,0,0,0,2179,2180,
        5,473,0,0,2180,2181,5,6,0,0,2181,2182,3,380,190,0,2182,2183,5,472,
        0,0,2183,2184,3,380,190,0,2184,2185,5,473,0,0,2185,2187,1,0,0,0,
        2186,2167,1,0,0,0,2186,2174,1,0,0,0,2187,211,1,0,0,0,2188,2189,7,
        33,0,0,2189,213,1,0,0,0,2190,2199,5,113,0,0,2191,2199,3,376,188,
        0,2192,2199,3,294,147,0,2193,2199,5,448,0,0,2194,2195,5,472,0,0,
        2195,2196,3,214,107,0,2196,2197,5,473,0,0,2197,2199,1,0,0,0,2198,
        2190,1,0,0,0,2198,2191,1,0,0,0,2198,2192,1,0,0,0,2198,2193,1,0,0,
        0,2198,2194,1,0,0,0,2199,215,1,0,0,0,2200,2201,3,52,26,0,2201,217,
        1,0,0,0,2202,2205,5,203,0,0,2203,2204,5,440,0,0,2204,2206,5,474,
        0,0,2205,2203,1,0,0,0,2205,2206,1,0,0,0,2206,2207,1,0,0,0,2207,2212,
        3,220,110,0,2208,2209,5,474,0,0,2209,2211,3,220,110,0,2210,2208,
        1,0,0,0,2211,2214,1,0,0,0,2212,2210,1,0,0,0,2212,2213,1,0,0,0,2213,
        219,1,0,0,0,2214,2212,1,0,0,0,2215,2220,3,380,190,0,2216,2217,5,
        472,0,0,2217,2218,3,362,181,0,2218,2219,5,473,0,0,2219,2221,1,0,
        0,0,2220,2216,1,0,0,0,2220,2221,1,0,0,0,2221,2222,1,0,0,0,2222,2223,
        5,6,0,0,2223,2224,5,472,0,0,2224,2225,3,52,26,0,2225,2226,5,473,
        0,0,2226,221,1,0,0,0,2227,2230,3,360,180,0,2228,2230,5,448,0,0,2229,
        2227,1,0,0,0,2229,2228,1,0,0,0,2230,2233,1,0,0,0,2231,2234,5,455,
        0,0,2232,2234,3,386,193,0,2233,2231,1,0,0,0,2233,2232,1,0,0,0,2234,
        2235,1,0,0,0,2235,2244,3,208,104,0,2236,2237,3,380,190,0,2237,2238,
        5,467,0,0,2238,2239,3,380,190,0,2239,2240,5,472,0,0,2240,2241,3,
        316,158,0,2241,2242,5,473,0,0,2242,2244,1,0,0,0,2243,2229,1,0,0,
        0,2243,2236,1,0,0,0,2244,223,1,0,0,0,2245,2250,3,226,113,0,2246,
        2247,5,474,0,0,2247,2249,3,226,113,0,2248,2246,1,0,0,0,2249,2252,
        1,0,0,0,2250,2248,1,0,0,0,2250,2251,1,0,0,0,2251,225,1,0,0,0,2252,
        2250,1,0,0,0,2253,2254,6,113,-1,0,2254,2255,3,228,114,0,2255,2264,
        1,0,0,0,2256,2257,10,3,0,0,2257,2258,5,4,0,0,2258,2263,3,226,113,
        4,2259,2260,10,2,0,0,2260,2261,5,126,0,0,2261,2263,3,226,113,3,2262,
        2256,1,0,0,0,2262,2259,1,0,0,0,2263,2266,1,0,0,0,2264,2262,1,0,0,
        0,2264,2265,1,0,0,0,2265,227,1,0,0,0,2266,2264,1,0,0,0,2267,2268,
        5,112,0,0,2268,2326,3,228,114,0,2269,2270,5,64,0,0,2270,2271,5,472,
        0,0,2271,2272,3,216,108,0,2272,2273,5,473,0,0,2273,2326,1,0,0,0,
        2274,2275,3,208,104,0,2275,2276,3,384,192,0,2276,2277,3,208,104,
        0,2277,2326,1,0,0,0,2278,2279,3,208,104,0,2279,2280,3,384,192,0,
        2280,2281,7,34,0,0,2281,2282,5,472,0,0,2282,2283,3,216,108,0,2283,
        2284,5,473,0,0,2284,2326,1,0,0,0,2285,2287,3,208,104,0,2286,2288,
        5,112,0,0,2287,2286,1,0,0,0,2287,2288,1,0,0,0,2288,2289,1,0,0,0,
        2289,2290,5,11,0,0,2290,2291,3,208,104,0,2291,2292,5,4,0,0,2292,
        2293,3,208,104,0,2293,2326,1,0,0,0,2294,2296,3,208,104,0,2295,2297,
        5,112,0,0,2296,2295,1,0,0,0,2296,2297,1,0,0,0,2297,2298,1,0,0,0,
        2298,2299,5,89,0,0,2299,2302,5,472,0,0,2300,2303,3,216,108,0,2301,
        2303,3,316,158,0,2302,2300,1,0,0,0,2302,2301,1,0,0,0,2303,2304,1,
        0,0,0,2304,2305,5,473,0,0,2305,2326,1,0,0,0,2306,2308,3,208,104,
        0,2307,2309,5,112,0,0,2308,2307,1,0,0,0,2308,2309,1,0,0,0,2309,2310,
        1,0,0,0,2310,2311,5,101,0,0,2311,2314,3,208,104,0,2312,2313,5,61,
        0,0,2313,2315,3,208,104,0,2314,2312,1,0,0,0,2314,2315,1,0,0,0,2315,
        2326,1,0,0,0,2316,2317,3,208,104,0,2317,2318,5,96,0,0,2318,2319,
        3,370,185,0,2319,2326,1,0,0,0,2320,2321,5,472,0,0,2321,2322,3,226,
        113,0,2322,2323,5,473,0,0,2323,2326,1,0,0,0,2324,2326,5,449,0,0,
        2325,2267,1,0,0,0,2325,2269,1,0,0,0,2325,2274,1,0,0,0,2325,2278,
        1,0,0,0,2325,2285,1,0,0,0,2325,2294,1,0,0,0,2325,2306,1,0,0,0,2325,
        2316,1,0,0,0,2325,2320,1,0,0,0,2325,2324,1,0,0,0,2326,229,1,0,0,
        0,2327,2328,6,115,-1,0,2328,2329,5,472,0,0,2329,2330,3,230,115,0,
        2330,2331,5,473,0,0,2331,2334,1,0,0,0,2332,2334,3,236,118,0,2333,
        2327,1,0,0,0,2333,2332,1,0,0,0,2334,2341,1,0,0,0,2335,2336,10,2,
        0,0,2336,2337,3,232,116,0,2337,2338,3,230,115,3,2338,2340,1,0,0,
        0,2339,2335,1,0,0,0,2340,2343,1,0,0,0,2341,2339,1,0,0,0,2341,2342,
        1,0,0,0,2342,231,1,0,0,0,2343,2341,1,0,0,0,2344,2346,5,188,0,0,2345,
        2347,5,2,0,0,2346,2345,1,0,0,0,2346,2347,1,0,0,0,2347,2351,1,0,0,
        0,2348,2351,5,62,0,0,2349,2351,5,94,0,0,2350,2344,1,0,0,0,2350,2348,
        1,0,0,0,2350,2349,1,0,0,0,2351,233,1,0,0,0,2352,2353,5,472,0,0,2353,
        2354,3,234,117,0,2354,2355,5,473,0,0,2355,2360,1,0,0,0,2356,2360,
        3,230,115,0,2357,2360,3,208,104,0,2358,2360,3,314,157,0,2359,2352,
        1,0,0,0,2359,2356,1,0,0,0,2359,2357,1,0,0,0,2359,2358,1,0,0,0,2360,
        235,1,0,0,0,2361,2363,5,160,0,0,2362,2364,7,35,0,0,2363,2362,1,0,
        0,0,2363,2364,1,0,0,0,2364,2366,1,0,0,0,2365,2367,3,242,121,0,2366,
        2365,1,0,0,0,2366,2367,1,0,0,0,2367,2368,1,0,0,0,2368,2371,3,264,
        132,0,2369,2370,5,95,0,0,2370,2372,3,352,176,0,2371,2369,1,0,0,0,
        2371,2372,1,0,0,0,2372,2375,1,0,0,0,2373,2374,5,77,0,0,2374,2376,
        3,268,134,0,2375,2373,1,0,0,0,2375,2376,1,0,0,0,2376,2383,1,0,0,
        0,2377,2378,5,37,0,0,2378,2379,5,214,0,0,2379,2381,3,234,117,0,2380,
        2382,3,60,30,0,2381,2380,1,0,0,0,2381,2382,1,0,0,0,2382,2384,1,0,
        0,0,2383,2377,1,0,0,0,2383,2384,1,0,0,0,2384,2387,1,0,0,0,2385,2386,
        5,201,0,0,2386,2388,3,226,113,0,2387,2385,1,0,0,0,2387,2388,1,0,
        0,0,2388,2399,1,0,0,0,2389,2390,5,82,0,0,2390,2391,5,15,0,0,2391,
        2396,3,256,128,0,2392,2393,5,474,0,0,2393,2395,3,256,128,0,2394,
        2392,1,0,0,0,2395,2398,1,0,0,0,2396,2394,1,0,0,0,2396,2397,1,0,0,
        0,2397,2400,1,0,0,0,2398,2396,1,0,0,0,2399,2389,1,0,0,0,2399,2400,
        1,0,0,0,2400,2402,1,0,0,0,2401,2403,3,238,119,0,2402,2401,1,0,0,
        0,2402,2403,1,0,0,0,2403,2406,1,0,0,0,2404,2405,5,203,0,0,2405,2407,
        7,36,0,0,2406,2404,1,0,0,0,2406,2407,1,0,0,0,2407,2410,1,0,0,0,2408,
        2409,5,83,0,0,2409,2411,3,226,113,0,2410,2408,1,0,0,0,2410,2411,
        1,0,0,0,2411,237,1,0,0,0,2412,2413,5,82,0,0,2413,2414,5,15,0,0,2414,
        2415,5,292,0,0,2415,2416,5,395,0,0,2416,2417,5,472,0,0,2417,2422,
        3,240,120,0,2418,2419,5,474,0,0,2419,2421,3,240,120,0,2420,2418,
        1,0,0,0,2421,2424,1,0,0,0,2422,2420,1,0,0,0,2422,2423,1,0,0,0,2423,
        2425,1,0,0,0,2424,2422,1,0,0,0,2425,2426,5,473,0,0,2426,239,1,0,
        0,0,2427,2428,5,472,0,0,2428,2442,5,473,0,0,2429,2442,3,256,128,
        0,2430,2431,5,472,0,0,2431,2436,3,256,128,0,2432,2433,5,474,0,0,
        2433,2435,3,256,128,0,2434,2432,1,0,0,0,2435,2438,1,0,0,0,2436,2434,
        1,0,0,0,2436,2437,1,0,0,0,2437,2439,1,0,0,0,2438,2436,1,0,0,0,2439,
        2440,5,473,0,0,2440,2442,1,0,0,0,2441,2427,1,0,0,0,2441,2429,1,0,
        0,0,2441,2430,1,0,0,0,2442,241,1,0,0,0,2443,2444,5,179,0,0,2444,
        2446,3,208,104,0,2445,2447,5,131,0,0,2446,2445,1,0,0,0,2446,2447,
        1,0,0,0,2447,2450,1,0,0,0,2448,2449,5,203,0,0,2449,2451,5,419,0,
        0,2450,2448,1,0,0,0,2450,2451,1,0,0,0,2451,243,1,0,0,0,2452,2453,
        5,179,0,0,2453,2454,5,472,0,0,2454,2455,3,208,104,0,2455,2457,5,
        473,0,0,2456,2458,5,131,0,0,2457,2456,1,0,0,0,2457,2458,1,0,0,0,
        2458,245,1,0,0,0,2459,2460,5,127,0,0,2460,2461,5,15,0,0,2461,2466,
        3,254,127,0,2462,2463,5,474,0,0,2463,2465,3,254,127,0,2464,2462,
        1,0,0,0,2465,2468,1,0,0,0,2466,2464,1,0,0,0,2466,2467,1,0,0,0,2467,
        2475,1,0,0,0,2468,2466,1,0,0,0,2469,2470,5,347,0,0,2470,2471,3,208,
        104,0,2471,2473,7,37,0,0,2472,2474,3,248,124,0,2473,2472,1,0,0,0,
        2473,2474,1,0,0,0,2474,2476,1,0,0,0,2475,2469,1,0,0,0,2475,2476,
        1,0,0,0,2476,247,1,0,0,0,2477,2478,5,68,0,0,2478,2479,7,38,0,0,2479,
        2480,3,208,104,0,2480,2481,7,37,0,0,2481,2482,5,349,0,0,2482,249,
        1,0,0,0,2483,2484,5,72,0,0,2484,2503,5,13,0,0,2485,2486,5,72,0,0,
        2486,2487,5,439,0,0,2487,2489,5,217,0,0,2488,2490,3,252,126,0,2489,
        2488,1,0,0,0,2489,2490,1,0,0,0,2490,2503,1,0,0,0,2491,2492,5,72,
        0,0,2492,2493,5,439,0,0,2493,2497,5,359,0,0,2494,2495,5,472,0,0,
        2495,2496,5,451,0,0,2496,2498,5,473,0,0,2497,2494,1,0,0,0,2497,2498,
        1,0,0,0,2498,2500,1,0,0,0,2499,2501,3,252,126,0,2500,2499,1,0,0,
        0,2500,2501,1,0,0,0,2501,2503,1,0,0,0,2502,2483,1,0,0,0,2502,2485,
        1,0,0,0,2502,2491,1,0,0,0,2503,251,1,0,0,0,2504,2509,5,474,0,0,2505,
        2506,5,452,0,0,2506,2510,5,225,0,0,2507,2510,5,427,0,0,2508,2510,
        5,382,0,0,2509,2505,1,0,0,0,2509,2507,1,0,0,0,2509,2508,1,0,0,0,
        2510,253,1,0,0,0,2511,2513,3,208,104,0,2512,2514,7,5,0,0,2513,2512,
        1,0,0,0,2513,2514,1,0,0,0,2514,255,1,0,0,0,2515,2516,3,208,104,0,
        2516,257,1,0,0,0,2517,2518,5,125,0,0,2518,2519,5,472,0,0,2519,2524,
        3,260,130,0,2520,2521,5,474,0,0,2521,2523,3,260,130,0,2522,2520,
        1,0,0,0,2523,2526,1,0,0,0,2524,2522,1,0,0,0,2524,2525,1,0,0,0,2525,
        2527,1,0,0,0,2526,2524,1,0,0,0,2527,2528,5,473,0,0,2528,259,1,0,
        0,0,2529,2530,5,276,0,0,2530,2575,5,449,0,0,2531,2532,7,39,0,0,2532,
        2575,5,82,0,0,2533,2534,7,40,0,0,2534,2575,5,188,0,0,2535,2536,7,
        41,0,0,2536,2575,5,97,0,0,2537,2538,5,275,0,0,2538,2575,5,436,0,
        0,2539,2540,5,285,0,0,2540,2575,5,127,0,0,2541,2575,5,298,0,0,2542,
        2543,5,309,0,0,2543,2575,5,133,0,0,2544,2545,5,310,0,0,2545,2575,
        5,133,0,0,2546,2547,5,323,0,0,2547,2575,5,449,0,0,2548,2549,5,324,
        0,0,2549,2575,5,449,0,0,2550,2551,5,351,0,0,2551,2552,5,72,0,0,2552,
        2553,5,472,0,0,2553,2558,3,262,131,0,2554,2555,5,474,0,0,2555,2557,
        3,262,131,0,2556,2554,1,0,0,0,2557,2560,1,0,0,0,2558,2556,1,0,0,
        0,2558,2559,1,0,0,0,2559,2561,1,0,0,0,2560,2558,1,0,0,0,2561,2562,
        5,473,0,0,2562,2575,1,0,0,0,2563,2564,5,351,0,0,2564,2565,5,72,0,
        0,2565,2575,5,431,0,0,2566,2567,5,356,0,0,2567,2575,7,16,0,0,2568,
        2575,5,373,0,0,2569,2570,5,380,0,0,2570,2575,5,133,0,0,2571,2572,
        5,193,0,0,2572,2573,5,133,0,0,2573,2575,5,451,0,0,2574,2529,1,0,
        0,0,2574,2531,1,0,0,0,2574,2533,1,0,0,0,2574,2535,1,0,0,0,2574,2537,
        1,0,0,0,2574,2539,1,0,0,0,2574,2541,1,0,0,0,2574,2542,1,0,0,0,2574,
        2544,1,0,0,0,2574,2546,1,0,0,0,2574,2548,1,0,0,0,2574,2550,1,0,0,
        0,2574,2563,1,0,0,0,2574,2566,1,0,0,0,2574,2568,1,0,0,0,2574,2569,
        1,0,0,0,2574,2571,1,0,0,0,2575,261,1,0,0,0,2576,2580,5,448,0,0,2577,
        2581,5,431,0,0,2578,2579,5,455,0,0,2579,2581,3,376,188,0,2580,2577,
        1,0,0,0,2580,2578,1,0,0,0,2581,263,1,0,0,0,2582,2587,3,266,133,0,
        2583,2584,5,474,0,0,2584,2586,3,266,133,0,2585,2583,1,0,0,0,2586,
        2589,1,0,0,0,2587,2585,1,0,0,0,2587,2588,1,0,0,0,2588,265,1,0,0,
        0,2589,2587,1,0,0,0,2590,2591,3,352,176,0,2591,2592,5,467,0,0,2592,
        2594,1,0,0,0,2593,2590,1,0,0,0,2593,2594,1,0,0,0,2594,2598,1,0,0,
        0,2595,2599,3,312,156,0,2596,2597,5,471,0,0,2597,2599,7,42,0,0,2598,
        2595,1,0,0,0,2598,2596,1,0,0,0,2599,2612,1,0,0,0,2600,2601,3,310,
        155,0,2601,2602,5,455,0,0,2602,2603,3,208,104,0,2603,2612,1,0,0,
        0,2604,2609,3,208,104,0,2605,2607,5,6,0,0,2606,2605,1,0,0,0,2606,
        2607,1,0,0,0,2607,2608,1,0,0,0,2608,2610,3,310,155,0,2609,2606,1,
        0,0,0,2609,2610,1,0,0,0,2610,2612,1,0,0,0,2611,2593,1,0,0,0,2611,
        2600,1,0,0,0,2611,2604,1,0,0,0,2612,267,1,0,0,0,2613,2618,3,270,
        135,0,2614,2615,5,474,0,0,2615,2617,3,270,135,0,2616,2614,1,0,0,
        0,2617,2620,1,0,0,0,2618,2616,1,0,0,0,2618,2619,1,0,0,0,2619,269,
        1,0,0,0,2620,2618,1,0,0,0,2621,2622,6,135,-1,0,2622,2623,5,472,0,
        0,2623,2624,3,270,135,0,2624,2625,5,473,0,0,2625,2628,1,0,0,0,2626,
        2628,3,272,136,0,2627,2621,1,0,0,0,2627,2626,1,0,0,0,2628,2646,1,
        0,0,0,2629,2630,10,3,0,0,2630,2631,5,37,0,0,2631,2632,5,97,0,0,2632,
        2645,3,270,135,4,2633,2634,10,2,0,0,2634,2635,7,43,0,0,2635,2636,
        5,214,0,0,2636,2645,3,270,135,3,2637,2638,10,4,0,0,2638,2639,3,284,
        142,0,2639,2640,5,97,0,0,2640,2641,3,270,135,0,2641,2642,5,119,0,
        0,2642,2643,3,226,113,0,2643,2645,1,0,0,0,2644,2629,1,0,0,0,2644,
        2633,1,0,0,0,2644,2637,1,0,0,0,2645,2648,1,0,0,0,2646,2644,1,0,0,
        0,2646,2647,1,0,0,0,2647,271,1,0,0,0,2648,2646,1,0,0,0,2649,2651,
        3,352,176,0,2650,2652,3,274,137,0,2651,2650,1,0,0,0,2651,2652,1,
        0,0,0,2652,2654,1,0,0,0,2653,2655,3,280,140,0,2654,2653,1,0,0,0,
        2654,2655,1,0,0,0,2655,2657,1,0,0,0,2656,2658,3,300,150,0,2657,2656,
        1,0,0,0,2657,2658,1,0,0,0,2658,2692,1,0,0,0,2659,2661,3,288,144,
        0,2660,2662,3,280,140,0,2661,2660,1,0,0,0,2661,2662,1,0,0,0,2662,
        2692,1,0,0,0,2663,2668,3,292,146,0,2664,2666,3,280,140,0,2665,2667,
        3,308,154,0,2666,2665,1,0,0,0,2666,2667,1,0,0,0,2667,2669,1,0,0,
        0,2668,2664,1,0,0,0,2668,2669,1,0,0,0,2669,2692,1,0,0,0,2670,2672,
        3,282,141,0,2671,2673,3,280,140,0,2672,2671,1,0,0,0,2672,2673,1,
        0,0,0,2673,2692,1,0,0,0,2674,2676,3,294,147,0,2675,2677,3,280,140,
        0,2676,2675,1,0,0,0,2676,2677,1,0,0,0,2677,2692,1,0,0,0,2678,2680,
        5,448,0,0,2679,2681,3,280,140,0,2680,2679,1,0,0,0,2680,2681,1,0,
        0,0,2681,2692,1,0,0,0,2682,2683,5,448,0,0,2683,2684,5,467,0,0,2684,
        2689,3,294,147,0,2685,2687,3,280,140,0,2686,2688,3,308,154,0,2687,
        2686,1,0,0,0,2687,2688,1,0,0,0,2688,2690,1,0,0,0,2689,2685,1,0,0,
        0,2689,2690,1,0,0,0,2690,2692,1,0,0,0,2691,2649,1,0,0,0,2691,2659,
        1,0,0,0,2691,2663,1,0,0,0,2691,2670,1,0,0,0,2691,2674,1,0,0,0,2691,
        2678,1,0,0,0,2691,2682,1,0,0,0,2692,273,1,0,0,0,2693,2695,5,175,
        0,0,2694,2696,5,172,0,0,2695,2694,1,0,0,0,2695,2696,1,0,0,0,2696,
        2697,1,0,0,0,2697,2698,5,472,0,0,2698,2700,3,276,138,0,2699,2701,
        7,6,0,0,2700,2699,1,0,0,0,2700,2701,1,0,0,0,2701,2702,1,0,0,0,2702,
        2705,5,473,0,0,2703,2704,5,378,0,0,2704,2706,3,278,139,0,2705,2703,
        1,0,0,0,2705,2706,1,0,0,0,2706,275,1,0,0,0,2707,2708,5,449,0,0,2708,
        277,1,0,0,0,2709,2710,5,449,0,0,2710,279,1,0,0,0,2711,2713,5,6,0,
        0,2712,2711,1,0,0,0,2712,2713,1,0,0,0,2713,2714,1,0,0,0,2714,2715,
        3,380,190,0,2715,281,1,0,0,0,2716,2717,5,19,0,0,2717,2718,5,472,
        0,0,2718,2719,5,20,0,0,2719,2720,3,352,176,0,2720,2721,5,474,0,0,
        2721,2722,7,44,0,0,2722,2723,5,473,0,0,2723,283,1,0,0,0,2724,2726,
        5,92,0,0,2725,2724,1,0,0,0,2725,2726,1,0,0,0,2726,2732,1,0,0,0,2727,
        2729,7,45,0,0,2728,2730,5,128,0,0,2729,2728,1,0,0,0,2729,2730,1,
        0,0,0,2730,2732,1,0,0,0,2731,2725,1,0,0,0,2731,2727,1,0,0,0,2732,
        2734,1,0,0,0,2733,2735,7,46,0,0,2734,2733,1,0,0,0,2734,2735,1,0,
        0,0,2735,285,1,0,0,0,2736,2738,3,352,176,0,2737,2739,3,300,150,0,
        2738,2737,1,0,0,0,2738,2739,1,0,0,0,2739,287,1,0,0,0,2740,2741,5,
        123,0,0,2741,2742,5,472,0,0,2742,2743,5,451,0,0,2743,2744,5,474,
        0,0,2744,2745,5,451,0,0,2745,2746,5,474,0,0,2746,2747,5,451,0,0,
        2747,2767,5,473,0,0,2748,2749,5,123,0,0,2749,2750,5,472,0,0,2750,
        2751,5,14,0,0,2751,2752,5,451,0,0,2752,2762,5,474,0,0,2753,2758,
        3,290,145,0,2754,2755,5,474,0,0,2755,2757,3,290,145,0,2756,2754,
        1,0,0,0,2757,2760,1,0,0,0,2758,2756,1,0,0,0,2758,2759,1,0,0,0,2759,
        2763,1,0,0,0,2760,2758,1,0,0,0,2761,2763,3,380,190,0,2762,2753,1,
        0,0,0,2762,2761,1,0,0,0,2763,2764,1,0,0,0,2764,2765,5,473,0,0,2765,
        2767,1,0,0,0,2766,2740,1,0,0,0,2766,2748,1,0,0,0,2767,289,1,0,0,
        0,2768,2769,3,380,190,0,2769,2770,5,455,0,0,2770,2771,7,47,0,0,2771,
        291,1,0,0,0,2772,2784,3,216,108,0,2773,2774,5,472,0,0,2774,2775,
        3,216,108,0,2775,2776,5,473,0,0,2776,2784,1,0,0,0,2777,2778,5,472,
        0,0,2778,2779,3,314,157,0,2779,2780,5,473,0,0,2780,2781,3,280,140,
        0,2781,2782,3,308,154,0,2782,2784,1,0,0,0,2783,2772,1,0,0,0,2783,
        2773,1,0,0,0,2783,2777,1,0,0,0,2784,293,1,0,0,0,2785,2959,3,324,
        162,0,2786,2959,3,326,163,0,2787,2788,3,372,186,0,2788,2790,5,472,
        0,0,2789,2791,3,316,158,0,2790,2789,1,0,0,0,2790,2791,1,0,0,0,2791,
        2792,1,0,0,0,2792,2793,5,473,0,0,2793,2959,1,0,0,0,2794,2959,3,322,
        161,0,2795,2796,5,227,0,0,2796,2797,5,472,0,0,2797,2798,5,477,0,
        0,2798,2959,5,473,0,0,2799,2800,5,230,0,0,2800,2801,5,472,0,0,2801,
        2802,3,208,104,0,2802,2803,5,6,0,0,2803,2804,3,410,205,0,2804,2805,
        5,473,0,0,2805,2959,1,0,0,0,2806,2807,5,35,0,0,2807,2808,5,472,0,
        0,2808,2809,3,410,205,0,2809,2810,5,474,0,0,2810,2813,3,208,104,
        0,2811,2812,5,474,0,0,2812,2814,3,208,104,0,2813,2811,1,0,0,0,2813,
        2814,1,0,0,0,2814,2815,1,0,0,0,2815,2816,5,473,0,0,2816,2959,1,0,
        0,0,2817,2818,5,235,0,0,2818,2819,5,472,0,0,2819,2820,5,477,0,0,
        2820,2959,5,473,0,0,2821,2822,5,25,0,0,2822,2823,5,472,0,0,2823,
        2824,3,316,158,0,2824,2825,5,473,0,0,2825,2959,1,0,0,0,2826,2959,
        5,41,0,0,2827,2959,5,42,0,0,2828,2829,5,250,0,0,2829,2830,5,472,
        0,0,2830,2831,5,450,0,0,2831,2832,5,474,0,0,2832,2833,3,208,104,
        0,2833,2834,5,474,0,0,2834,2835,3,208,104,0,2835,2836,5,473,0,0,
        2836,2959,1,0,0,0,2837,2838,5,251,0,0,2838,2839,5,472,0,0,2839,2840,
        5,450,0,0,2840,2841,5,474,0,0,2841,2842,3,208,104,0,2842,2843,5,
        474,0,0,2843,2844,3,208,104,0,2844,2845,5,473,0,0,2845,2959,1,0,
        0,0,2846,2847,5,252,0,0,2847,2848,5,472,0,0,2848,2849,5,450,0,0,
        2849,2850,5,474,0,0,2850,2851,3,208,104,0,2851,2852,5,473,0,0,2852,
        2959,1,0,0,0,2853,2854,5,253,0,0,2854,2855,5,472,0,0,2855,2856,5,
        450,0,0,2856,2857,5,474,0,0,2857,2858,3,208,104,0,2858,2859,5,473,
        0,0,2859,2959,1,0,0,0,2860,2861,5,255,0,0,2861,2862,5,472,0,0,2862,
        2863,3,208,104,0,2863,2864,5,474,0,0,2864,2865,3,208,104,0,2865,
        2866,5,474,0,0,2866,2867,3,208,104,0,2867,2868,5,474,0,0,2868,2869,
        3,208,104,0,2869,2870,5,474,0,0,2870,2871,3,208,104,0,2871,2872,
        5,474,0,0,2872,2873,3,208,104,0,2873,2874,5,474,0,0,2874,2875,3,
        208,104,0,2875,2876,5,474,0,0,2876,2877,3,208,104,0,2877,2878,5,
        474,0,0,2878,2879,3,208,104,0,2879,2880,5,474,0,0,2880,2881,3,208,
        104,0,2881,2882,5,473,0,0,2882,2959,1,0,0,0,2883,2884,5,84,0,0,2884,
        2885,5,472,0,0,2885,2888,3,410,205,0,2886,2887,5,474,0,0,2887,2889,
        5,449,0,0,2888,2886,1,0,0,0,2888,2889,1,0,0,0,2889,2892,1,0,0,0,
        2890,2891,5,474,0,0,2891,2893,5,449,0,0,2892,2890,1,0,0,0,2892,2893,
        1,0,0,0,2893,2894,1,0,0,0,2894,2895,5,473,0,0,2895,2959,1,0,0,0,
        2896,2897,5,87,0,0,2897,2898,5,472,0,0,2898,2899,3,226,113,0,2899,
        2900,5,474,0,0,2900,2901,3,208,104,0,2901,2902,5,474,0,0,2902,2903,
        3,208,104,0,2903,2904,5,473,0,0,2904,2959,1,0,0,0,2905,2959,5,330,
        0,0,2906,2907,5,114,0,0,2907,2908,5,472,0,0,2908,2909,3,208,104,
        0,2909,2910,5,474,0,0,2910,2911,3,208,104,0,2911,2912,5,473,0,0,
        2912,2959,1,0,0,0,2913,2914,5,357,0,0,2914,2915,5,472,0,0,2915,2916,
        3,208,104,0,2916,2917,5,6,0,0,2917,2920,3,410,205,0,2918,2919,5,
        433,0,0,2919,2921,3,208,104,0,2920,2918,1,0,0,0,2920,2921,1,0,0,
        0,2921,2922,1,0,0,0,2922,2923,5,473,0,0,2923,2959,1,0,0,0,2924,2959,
        5,164,0,0,2925,2926,5,409,0,0,2926,2927,5,472,0,0,2927,2928,3,208,
        104,0,2928,2929,5,474,0,0,2929,2930,3,208,104,0,2930,2931,5,473,
        0,0,2931,2959,1,0,0,0,2932,2959,5,173,0,0,2933,2934,5,185,0,0,2934,
        2935,5,472,0,0,2935,2936,3,410,205,0,2936,2937,5,474,0,0,2937,2938,
        3,208,104,0,2938,2939,5,473,0,0,2939,2959,1,0,0,0,2940,2941,5,184,
        0,0,2941,2942,5,472,0,0,2942,2943,3,208,104,0,2943,2944,5,6,0,0,
        2944,2945,3,410,205,0,2945,2946,5,473,0,0,2946,2959,1,0,0,0,2947,
        2948,5,186,0,0,2948,2949,5,472,0,0,2949,2950,3,208,104,0,2950,2951,
        5,6,0,0,2951,2954,3,410,205,0,2952,2953,5,433,0,0,2953,2955,3,208,
        104,0,2954,2952,1,0,0,0,2954,2955,1,0,0,0,2955,2956,1,0,0,0,2956,
        2957,5,473,0,0,2957,2959,1,0,0,0,2958,2785,1,0,0,0,2958,2786,1,0,
        0,0,2958,2787,1,0,0,0,2958,2794,1,0,0,0,2958,2795,1,0,0,0,2958,2799,
        1,0,0,0,2958,2806,1,0,0,0,2958,2817,1,0,0,0,2958,2821,1,0,0,0,2958,
        2826,1,0,0,0,2958,2827,1,0,0,0,2958,2828,1,0,0,0,2958,2837,1,0,0,
        0,2958,2846,1,0,0,0,2958,2853,1,0,0,0,2958,2860,1,0,0,0,2958,2883,
        1,0,0,0,2958,2896,1,0,0,0,2958,2905,1,0,0,0,2958,2906,1,0,0,0,2958,
        2913,1,0,0,0,2958,2924,1,0,0,0,2958,2925,1,0,0,0,2958,2932,1,0,0,
        0,2958,2933,1,0,0,0,2958,2940,1,0,0,0,2958,2947,1,0,0,0,2959,295,
        1,0,0,0,2960,2961,5,200,0,0,2961,2962,3,208,104,0,2962,2963,5,177,
        0,0,2963,2964,3,208,104,0,2964,297,1,0,0,0,2965,2966,5,200,0,0,2966,
        2967,3,226,113,0,2967,2968,5,177,0,0,2968,2969,3,208,104,0,2969,
        299,1,0,0,0,2970,2972,5,203,0,0,2971,2970,1,0,0,0,2971,2972,1,0,
        0,0,2972,2973,1,0,0,0,2973,2974,5,472,0,0,2974,2979,3,304,152,0,
        2975,2976,5,474,0,0,2976,2978,3,304,152,0,2977,2975,1,0,0,0,2978,
        2981,1,0,0,0,2979,2977,1,0,0,0,2979,2980,1,0,0,0,2980,2982,1,0,0,
        0,2981,2979,1,0,0,0,2982,2983,5,473,0,0,2983,301,1,0,0,0,2984,2985,
        5,203,0,0,2985,2986,5,472,0,0,2986,2991,3,304,152,0,2987,2988,5,
        474,0,0,2988,2990,3,304,152,0,2989,2987,1,0,0,0,2990,2993,1,0,0,
        0,2991,2989,1,0,0,0,2991,2992,1,0,0,0,2992,2994,1,0,0,0,2993,2991,
        1,0,0,0,2994,2995,5,473,0,0,2995,303,1,0,0,0,2996,2998,5,339,0,0,
        2997,2996,1,0,0,0,2997,2998,1,0,0,0,2998,3037,1,0,0,0,2999,3000,
        5,90,0,0,3000,3001,5,472,0,0,3001,3006,3,306,153,0,3002,3003,5,474,
        0,0,3003,3005,3,306,153,0,3004,3002,1,0,0,0,3005,3008,1,0,0,0,3006,
        3004,1,0,0,0,3006,3007,1,0,0,0,3007,3009,1,0,0,0,3008,3006,1,0,0,
        0,3009,3010,5,473,0,0,3010,3038,1,0,0,0,3011,3012,5,90,0,0,3012,
        3013,5,455,0,0,3013,3038,3,306,153,0,3014,3029,5,73,0,0,3015,3016,
        5,472,0,0,3016,3017,3,306,153,0,3017,3018,5,472,0,0,3018,3023,5,
        450,0,0,3019,3020,5,474,0,0,3020,3022,5,450,0,0,3021,3019,1,0,0,
        0,3022,3025,1,0,0,0,3023,3021,1,0,0,0,3023,3024,1,0,0,0,3024,3026,
        1,0,0,0,3025,3023,1,0,0,0,3026,3027,5,473,0,0,3027,3028,5,473,0,
        0,3028,3030,1,0,0,0,3029,3015,1,0,0,0,3029,3030,1,0,0,0,3030,3038,
        1,0,0,0,3031,3038,5,394,0,0,3032,3038,5,402,0,0,3033,3034,5,403,
        0,0,3034,3035,5,455,0,0,3035,3038,5,449,0,0,3036,3038,5,450,0,0,
        3037,2999,1,0,0,0,3037,3011,1,0,0,0,3037,3014,1,0,0,0,3037,3031,
        1,0,0,0,3037,3032,1,0,0,0,3037,3033,1,0,0,0,3037,3036,1,0,0,0,3037,
        3038,1,0,0,0,3038,305,1,0,0,0,3039,3042,3,380,190,0,3040,3042,5,
        449,0,0,3041,3039,1,0,0,0,3041,3040,1,0,0,0,3042,307,1,0,0,0,3043,
        3044,5,472,0,0,3044,3049,3,310,155,0,3045,3046,5,474,0,0,3046,3048,
        3,310,155,0,3047,3045,1,0,0,0,3048,3051,1,0,0,0,3049,3047,1,0,0,
        0,3049,3050,1,0,0,0,3050,3052,1,0,0,0,3051,3049,1,0,0,0,3052,3053,
        5,473,0,0,3053,309,1,0,0,0,3054,3057,3,380,190,0,3055,3057,5,451,
        0,0,3056,3054,1,0,0,0,3056,3055,1,0,0,0,3057,311,1,0,0,0,3058,3059,
        5,477,0,0,3059,313,1,0,0,0,3060,3061,5,195,0,0,3061,3066,3,318,159,
        0,3062,3063,5,474,0,0,3063,3065,3,318,159,0,3064,3062,1,0,0,0,3065,
        3068,1,0,0,0,3066,3064,1,0,0,0,3066,3067,1,0,0,0,3067,315,1,0,0,
        0,3068,3066,1,0,0,0,3069,3074,3,208,104,0,3070,3071,5,474,0,0,3071,
        3073,3,208,104,0,3072,3070,1,0,0,0,3073,3076,1,0,0,0,3074,3072,1,
        0,0,0,3074,3075,1,0,0,0,3075,317,1,0,0,0,3076,3074,1,0,0,0,3077,
        3078,5,472,0,0,3078,3079,3,316,158,0,3079,3080,5,473,0,0,3080,319,
        1,0,0,0,3081,3082,5,108,0,0,3082,3083,5,196,0,0,3083,3084,5,72,0,
        0,3084,321,1,0,0,0,3085,3086,3,320,160,0,3086,3087,3,356,178,0,3087,
        3088,3,330,165,0,3088,323,1,0,0,0,3089,3090,7,48,0,0,3090,3091,5,
        472,0,0,3091,3092,5,473,0,0,3092,3113,3,330,165,0,3093,3094,7,49,
        0,0,3094,3095,5,472,0,0,3095,3096,3,208,104,0,3096,3097,5,473,0,
        0,3097,3098,3,330,165,0,3098,3113,1,0,0,0,3099,3100,7,50,0,0,3100,
        3101,5,472,0,0,3101,3106,3,208,104,0,3102,3103,5,474,0,0,3103,3105,
        3,208,104,0,3104,3102,1,0,0,0,3105,3108,1,0,0,0,3106,3104,1,0,0,
        0,3106,3107,1,0,0,0,3107,3109,1,0,0,0,3108,3106,1,0,0,0,3109,3110,
        5,473,0,0,3110,3111,3,330,165,0,3111,3113,1,0,0,0,3112,3089,1,0,
        0,0,3112,3093,1,0,0,0,3112,3099,1,0,0,0,3113,325,1,0,0,0,3114,3115,
        7,51,0,0,3115,3117,5,472,0,0,3116,3118,3,328,164,0,3117,3116,1,0,
        0,0,3117,3118,1,0,0,0,3118,3119,1,0,0,0,3119,3120,3,208,104,0,3120,
        3122,5,473,0,0,3121,3123,3,330,165,0,3122,3121,1,0,0,0,3122,3123,
        1,0,0,0,3123,3156,1,0,0,0,3124,3125,7,52,0,0,3125,3131,5,472,0,0,
        3126,3132,5,477,0,0,3127,3129,3,328,164,0,3128,3127,1,0,0,0,3128,
        3129,1,0,0,0,3129,3130,1,0,0,0,3130,3132,3,208,104,0,3131,3126,1,
        0,0,0,3131,3128,1,0,0,0,3132,3133,1,0,0,0,3133,3135,5,473,0,0,3134,
        3136,3,330,165,0,3135,3134,1,0,0,0,3135,3136,1,0,0,0,3136,3156,1,
        0,0,0,3137,3138,5,236,0,0,3138,3140,5,472,0,0,3139,3141,3,328,164,
        0,3140,3139,1,0,0,0,3140,3141,1,0,0,0,3141,3142,1,0,0,0,3142,3143,
        3,208,104,0,3143,3144,5,473,0,0,3144,3156,1,0,0,0,3145,3146,5,292,
        0,0,3146,3147,5,472,0,0,3147,3148,3,208,104,0,3148,3149,5,473,0,
        0,3149,3156,1,0,0,0,3150,3151,5,293,0,0,3151,3152,5,472,0,0,3152,
        3153,3,316,158,0,3153,3154,5,473,0,0,3154,3156,1,0,0,0,3155,3114,
        1,0,0,0,3155,3124,1,0,0,0,3155,3137,1,0,0,0,3155,3145,1,0,0,0,3155,
        3150,1,0,0,0,3156,327,1,0,0,0,3157,3158,7,35,0,0,3158,329,1,0,0,
        0,3159,3160,5,129,0,0,3160,3164,5,472,0,0,3161,3162,5,358,0,0,3162,
        3163,5,15,0,0,3163,3165,3,316,158,0,3164,3161,1,0,0,0,3164,3165,
        1,0,0,0,3165,3167,1,0,0,0,3166,3168,3,246,123,0,3167,3166,1,0,0,
        0,3167,3168,1,0,0,0,3168,3170,1,0,0,0,3169,3171,3,332,166,0,3170,
        3169,1,0,0,0,3170,3171,1,0,0,0,3171,3172,1,0,0,0,3172,3173,5,473,
        0,0,3173,331,1,0,0,0,3174,3175,7,53,0,0,3175,3176,3,334,167,0,3176,
        333,1,0,0,0,3177,3184,3,338,169,0,3178,3179,5,11,0,0,3179,3180,3,
        336,168,0,3180,3181,5,4,0,0,3181,3182,3,336,168,0,3182,3184,1,0,
        0,0,3183,3177,1,0,0,0,3183,3178,1,0,0,0,3184,335,1,0,0,0,3185,3188,
        3,338,169,0,3186,3188,3,340,170,0,3187,3185,1,0,0,0,3187,3186,1,
        0,0,0,3188,337,1,0,0,0,3189,3190,5,429,0,0,3190,3196,5,362,0,0,3191,
        3192,5,449,0,0,3192,3196,5,362,0,0,3193,3194,5,38,0,0,3194,3196,
        5,384,0,0,3195,3189,1,0,0,0,3195,3191,1,0,0,0,3195,3193,1,0,0,0,
        3196,339,1,0,0,0,3197,3198,5,429,0,0,3198,3202,5,284,0,0,3199,3200,
        5,449,0,0,3200,3202,5,284,0,0,3201,3197,1,0,0,0,3201,3199,1,0,0,
        0,3202,341,1,0,0,0,3203,3204,5,280,0,0,3204,3209,3,344,172,0,3205,
        3206,5,474,0,0,3206,3208,3,344,172,0,3207,3205,1,0,0,0,3208,3211,
        1,0,0,0,3209,3207,1,0,0,0,3209,3210,1,0,0,0,3210,3238,1,0,0,0,3211,
        3209,1,0,0,0,3212,3213,5,260,0,0,3213,3216,5,455,0,0,3214,3217,3,
        380,190,0,3215,3217,5,451,0,0,3216,3214,1,0,0,0,3216,3215,1,0,0,
        0,3217,3238,1,0,0,0,3218,3219,5,259,0,0,3219,3222,5,455,0,0,3220,
        3223,3,380,190,0,3221,3223,5,451,0,0,3222,3220,1,0,0,0,3222,3221,
        1,0,0,0,3223,3238,1,0,0,0,3224,3225,5,335,0,0,3225,3226,5,455,0,
        0,3226,3238,7,9,0,0,3227,3228,5,423,0,0,3228,3229,5,455,0,0,3229,
        3238,7,9,0,0,3230,3231,5,426,0,0,3231,3232,5,455,0,0,3232,3238,5,
        449,0,0,3233,3234,5,258,0,0,3234,3238,7,9,0,0,3235,3236,5,424,0,
        0,3236,3238,7,9,0,0,3237,3203,1,0,0,0,3237,3212,1,0,0,0,3237,3218,
        1,0,0,0,3237,3224,1,0,0,0,3237,3227,1,0,0,0,3237,3230,1,0,0,0,3237,
        3233,1,0,0,0,3237,3235,1,0,0,0,3238,343,1,0,0,0,3239,3246,5,472,
        0,0,3240,3241,5,340,0,0,3241,3242,5,455,0,0,3242,3247,7,54,0,0,3243,
        3244,5,265,0,0,3244,3245,5,455,0,0,3245,3247,5,451,0,0,3246,3240,
        1,0,0,0,3246,3243,1,0,0,0,3247,3248,1,0,0,0,3248,3249,5,473,0,0,
        3249,345,1,0,0,0,3250,3253,3,348,174,0,3251,3253,3,350,175,0,3252,
        3250,1,0,0,0,3252,3251,1,0,0,0,3253,347,1,0,0,0,3254,3255,5,278,
        0,0,3255,3258,3,380,190,0,3256,3257,5,32,0,0,3257,3259,5,280,0,0,
        3258,3256,1,0,0,0,3258,3259,1,0,0,0,3259,3261,1,0,0,0,3260,3262,
        5,48,0,0,3261,3260,1,0,0,0,3261,3262,1,0,0,0,3262,3265,1,0,0,0,3263,
        3264,5,32,0,0,3264,3266,5,327,0,0,3265,3263,1,0,0,0,3265,3266,1,
        0,0,0,3266,3267,1,0,0,0,3267,3272,3,350,175,0,3268,3269,5,474,0,
        0,3269,3271,3,350,175,0,3270,3268,1,0,0,0,3271,3274,1,0,0,0,3272,
        3270,1,0,0,0,3272,3273,1,0,0,0,3273,349,1,0,0,0,3274,3272,1,0,0,
        0,3275,3276,5,472,0,0,3276,3277,5,334,0,0,3277,3280,5,455,0,0,3278,
        3281,3,380,190,0,3279,3281,5,451,0,0,3280,3278,1,0,0,0,3280,3279,
        1,0,0,0,3281,3283,1,0,0,0,3282,3284,5,474,0,0,3283,3282,1,0,0,0,
        3283,3284,1,0,0,0,3284,3285,1,0,0,0,3285,3286,5,70,0,0,3286,3287,
        5,455,0,0,3287,3289,5,451,0,0,3288,3290,5,474,0,0,3289,3288,1,0,
        0,0,3289,3290,1,0,0,0,3290,3297,1,0,0,0,3291,3292,5,400,0,0,3292,
        3293,5,455,0,0,3293,3295,3,388,194,0,3294,3296,5,474,0,0,3295,3294,
        1,0,0,0,3295,3296,1,0,0,0,3296,3298,1,0,0,0,3297,3291,1,0,0,0,3297,
        3298,1,0,0,0,3298,3308,1,0,0,0,3299,3300,5,325,0,0,3300,3303,5,455,
        0,0,3301,3304,3,388,194,0,3302,3304,5,432,0,0,3303,3301,1,0,0,0,
        3303,3302,1,0,0,0,3304,3306,1,0,0,0,3305,3307,5,474,0,0,3306,3305,
        1,0,0,0,3306,3307,1,0,0,0,3307,3309,1,0,0,0,3308,3299,1,0,0,0,3308,
        3309,1,0,0,0,3309,3316,1,0,0,0,3310,3311,5,279,0,0,3311,3312,5,455,
        0,0,3312,3314,3,388,194,0,3313,3315,5,474,0,0,3314,3313,1,0,0,0,
        3314,3315,1,0,0,0,3315,3317,1,0,0,0,3316,3310,1,0,0,0,3316,3317,
        1,0,0,0,3317,3318,1,0,0,0,3318,3319,5,473,0,0,3319,351,1,0,0,0,3320,
        3321,3,380,190,0,3321,3322,5,467,0,0,3322,3323,3,380,190,0,3323,
        3324,5,467,0,0,3324,3325,3,380,190,0,3325,3326,5,467,0,0,3326,3338,
        1,0,0,0,3327,3328,3,380,190,0,3328,3330,5,467,0,0,3329,3331,3,380,
        190,0,3330,3329,1,0,0,0,3330,3331,1,0,0,0,3331,3332,1,0,0,0,3332,
        3333,5,467,0,0,3333,3338,1,0,0,0,3334,3335,3,380,190,0,3335,3336,
        5,467,0,0,3336,3338,1,0,0,0,3337,3320,1,0,0,0,3337,3327,1,0,0,0,
        3337,3334,1,0,0,0,3337,3338,1,0,0,0,3338,3339,1,0,0,0,3339,3340,
        3,380,190,0,3340,353,1,0,0,0,3341,3342,3,380,190,0,3342,3343,5,467,
        0,0,3343,3345,1,0,0,0,3344,3341,1,0,0,0,3344,3345,1,0,0,0,3345,3346,
        1,0,0,0,3346,3347,3,380,190,0,3347,355,1,0,0,0,3348,3349,3,380,190,
        0,3349,3351,5,467,0,0,3350,3352,3,380,190,0,3351,3350,1,0,0,0,3351,
        3352,1,0,0,0,3352,3353,1,0,0,0,3353,3354,5,467,0,0,3354,3359,1,0,
        0,0,3355,3356,3,380,190,0,3356,3357,5,467,0,0,3357,3359,1,0,0,0,
        3358,3348,1,0,0,0,3358,3355,1,0,0,0,3358,3359,1,0,0,0,3359,3360,
        1,0,0,0,3360,3361,3,380,190,0,3361,357,1,0,0,0,3362,3365,3,352,176,
        0,3363,3365,5,448,0,0,3364,3362,1,0,0,0,3364,3363,1,0,0,0,3365,359,
        1,0,0,0,3366,3367,3,352,176,0,3367,3368,5,467,0,0,3368,3370,1,0,
        0,0,3369,3366,1,0,0,0,3369,3370,1,0,0,0,3370,3371,1,0,0,0,3371,3372,
        3,380,190,0,3372,361,1,0,0,0,3373,3378,3,380,190,0,3374,3375,5,474,
        0,0,3375,3377,3,380,190,0,3376,3374,1,0,0,0,3377,3380,1,0,0,0,3378,
        3376,1,0,0,0,3378,3379,1,0,0,0,3379,363,1,0,0,0,3380,3378,1,0,0,
        0,3381,3384,3,380,190,0,3382,3384,5,448,0,0,3383,3381,1,0,0,0,3383,
        3382,1,0,0,0,3384,365,1,0,0,0,3385,3386,7,9,0,0,3386,367,1,0,0,0,
        3387,3388,7,55,0,0,3388,369,1,0,0,0,3389,3391,5,112,0,0,3390,3389,
        1,0,0,0,3390,3391,1,0,0,0,3391,3392,1,0,0,0,3392,3393,5,113,0,0,
        3393,371,1,0,0,0,3394,3413,3,356,178,0,3395,3413,5,152,0,0,3396,
        3413,5,100,0,0,3397,3413,5,227,0,0,3398,3413,5,235,0,0,3399,3413,
        5,66,0,0,3400,3413,5,104,0,0,3401,3413,5,105,0,0,3402,3413,5,412,
        0,0,3403,3413,5,411,0,0,3404,3413,5,383,0,0,3405,3413,5,232,0,0,
        3406,3413,5,283,0,0,3407,3413,5,361,0,0,3408,3413,5,243,0,0,3409,
        3413,5,398,0,0,3410,3413,5,414,0,0,3411,3413,5,168,0,0,3412,3394,
        1,0,0,0,3412,3395,1,0,0,0,3412,3396,1,0,0,0,3412,3397,1,0,0,0,3412,
        3398,1,0,0,0,3412,3399,1,0,0,0,3412,3400,1,0,0,0,3412,3401,1,0,0,
        0,3412,3402,1,0,0,0,3412,3403,1,0,0,0,3412,3404,1,0,0,0,3412,3405,
        1,0,0,0,3412,3406,1,0,0,0,3412,3407,1,0,0,0,3412,3408,1,0,0,0,3412,
        3409,1,0,0,0,3412,3410,1,0,0,0,3412,3411,1,0,0,0,3413,373,1,0,0,
        0,3414,3417,5,113,0,0,3415,3417,3,376,188,0,3416,3414,1,0,0,0,3416,
        3415,1,0,0,0,3417,375,1,0,0,0,3418,3434,5,451,0,0,3419,3434,5,452,
        0,0,3420,3422,3,378,189,0,3421,3420,1,0,0,0,3421,3422,1,0,0,0,3422,
        3423,1,0,0,0,3423,3434,5,449,0,0,3424,3426,3,378,189,0,3425,3424,
        1,0,0,0,3425,3426,1,0,0,0,3426,3427,1,0,0,0,3427,3434,7,56,0,0,3428,
        3430,3,378,189,0,3429,3428,1,0,0,0,3429,3430,1,0,0,0,3430,3431,1,
        0,0,0,3431,3432,5,471,0,0,3432,3434,7,57,0,0,3433,3418,1,0,0,0,3433,
        3419,1,0,0,0,3433,3421,1,0,0,0,3433,3425,1,0,0,0,3433,3429,1,0,0,
        0,3434,377,1,0,0,0,3435,3436,7,30,0,0,3436,379,1,0,0,0,3437,3441,
        3,382,191,0,3438,3441,5,446,0,0,3439,3441,5,447,0,0,3440,3437,1,
        0,0,0,3440,3438,1,0,0,0,3440,3439,1,0,0,0,3441,381,1,0,0,0,3442,
        3443,7,58,0,0,3443,383,1,0,0,0,3444,3460,5,455,0,0,3445,3460,5,456,
        0,0,3446,3460,5,457,0,0,3447,3448,5,457,0,0,3448,3460,5,455,0,0,
        3449,3450,5,456,0,0,3450,3460,5,455,0,0,3451,3452,5,457,0,0,3452,
        3460,5,456,0,0,3453,3454,5,458,0,0,3454,3460,5,455,0,0,3455,3456,
        5,458,0,0,3456,3460,5,456,0,0,3457,3458,5,458,0,0,3458,3460,5,457,
        0,0,3459,3444,1,0,0,0,3459,3445,1,0,0,0,3459,3446,1,0,0,0,3459,3447,
        1,0,0,0,3459,3449,1,0,0,0,3459,3451,1,0,0,0,3459,3453,1,0,0,0,3459,
        3455,1,0,0,0,3459,3457,1,0,0,0,3460,385,1,0,0,0,3461,3462,7,59,0,
        0,3462,387,1,0,0,0,3463,3465,5,449,0,0,3464,3466,7,60,0,0,3465,3464,
        1,0,0,0,3465,3466,1,0,0,0,3466,389,1,0,0,0,3467,3470,5,36,0,0,3468,
        3469,5,126,0,0,3469,3471,5,3,0,0,3470,3468,1,0,0,0,3470,3471,1,0,
        0,0,3471,3474,1,0,0,0,3472,3474,5,3,0,0,3473,3467,1,0,0,0,3473,3472,
        1,0,0,0,3474,3475,1,0,0,0,3475,3476,7,61,0,0,3476,3479,3,356,178,
        0,3477,3478,5,475,0,0,3478,3480,5,449,0,0,3479,3477,1,0,0,0,3479,
        3480,1,0,0,0,3480,3495,1,0,0,0,3481,3483,5,472,0,0,3482,3481,1,0,
        0,0,3482,3483,1,0,0,0,3483,3484,1,0,0,0,3484,3489,3,400,200,0,3485,
        3486,5,474,0,0,3486,3488,3,400,200,0,3487,3485,1,0,0,0,3488,3491,
        1,0,0,0,3489,3487,1,0,0,0,3489,3490,1,0,0,0,3490,3493,1,0,0,0,3491,
        3489,1,0,0,0,3492,3494,5,473,0,0,3493,3492,1,0,0,0,3493,3494,1,0,
        0,0,3494,3496,1,0,0,0,3495,3482,1,0,0,0,3495,3496,1,0,0,0,3496,3506,
        1,0,0,0,3497,3498,5,203,0,0,3498,3503,3,402,201,0,3499,3500,5,474,
        0,0,3500,3502,3,402,201,0,3501,3499,1,0,0,0,3502,3505,1,0,0,0,3503,
        3501,1,0,0,0,3503,3504,1,0,0,0,3504,3507,1,0,0,0,3505,3503,1,0,0,
        0,3506,3497,1,0,0,0,3506,3507,1,0,0,0,3507,3510,1,0,0,0,3508,3509,
        5,72,0,0,3509,3511,5,145,0,0,3510,3508,1,0,0,0,3510,3511,1,0,0,0,
        3511,3512,1,0,0,0,3512,3513,5,6,0,0,3513,3514,3,4,2,0,3514,391,1,
        0,0,0,3515,3518,5,36,0,0,3516,3517,5,126,0,0,3517,3519,5,3,0,0,3518,
        3516,1,0,0,0,3518,3519,1,0,0,0,3519,3522,1,0,0,0,3520,3522,5,3,0,
        0,3521,3515,1,0,0,0,3521,3520,1,0,0,0,3522,3523,1,0,0,0,3523,3524,
        5,79,0,0,3524,3538,3,356,178,0,3525,3526,5,472,0,0,3526,3531,3,400,
        200,0,3527,3528,5,474,0,0,3528,3530,3,400,200,0,3529,3527,1,0,0,
        0,3530,3533,1,0,0,0,3531,3529,1,0,0,0,3531,3532,1,0,0,0,3532,3534,
        1,0,0,0,3533,3531,1,0,0,0,3534,3535,5,473,0,0,3535,3539,1,0,0,0,
        3536,3537,5,472,0,0,3537,3539,5,473,0,0,3538,3525,1,0,0,0,3538,3536,
        1,0,0,0,3539,3543,1,0,0,0,3540,3544,3,394,197,0,3541,3544,3,396,
        198,0,3542,3544,3,398,199,0,3543,3540,1,0,0,0,3543,3541,1,0,0,0,
        3543,3542,1,0,0,0,3544,3546,1,0,0,0,3545,3547,5,475,0,0,3546,3545,
        1,0,0,0,3546,3547,1,0,0,0,3547,393,1,0,0,0,3548,3549,5,149,0,0,3549,
        3559,5,174,0,0,3550,3551,5,203,0,0,3551,3556,3,404,202,0,3552,3553,
        5,474,0,0,3553,3555,3,404,202,0,3554,3552,1,0,0,0,3555,3558,1,0,
        0,0,3556,3554,1,0,0,0,3556,3557,1,0,0,0,3557,3560,1,0,0,0,3558,3556,
        1,0,0,0,3559,3550,1,0,0,0,3559,3560,1,0,0,0,3560,3562,1,0,0,0,3561,
        3563,5,6,0,0,3562,3561,1,0,0,0,3562,3563,1,0,0,0,3563,3564,1,0,0,
        0,3564,3570,5,148,0,0,3565,3566,5,472,0,0,3566,3567,3,52,26,0,3567,
        3568,5,473,0,0,3568,3571,1,0,0,0,3569,3571,3,52,26,0,3570,3565,1,
        0,0,0,3570,3569,1,0,0,0,3571,395,1,0,0,0,3572,3573,5,149,0,0,3573,
        3574,5,448,0,0,3574,3584,3,182,91,0,3575,3576,5,203,0,0,3576,3581,
        3,404,202,0,3577,3578,5,474,0,0,3578,3580,3,404,202,0,3579,3577,
        1,0,0,0,3580,3583,1,0,0,0,3581,3579,1,0,0,0,3581,3582,1,0,0,0,3582,
        3585,1,0,0,0,3583,3581,1,0,0,0,3584,3575,1,0,0,0,3584,3585,1,0,0,
        0,3585,3587,1,0,0,0,3586,3588,5,6,0,0,3587,3586,1,0,0,0,3587,3588,
        1,0,0,0,3588,3589,1,0,0,0,3589,3593,5,10,0,0,3590,3592,3,6,3,0,3591,
        3590,1,0,0,0,3592,3595,1,0,0,0,3593,3591,1,0,0,0,3593,3594,1,0,0,
        0,3594,3596,1,0,0,0,3595,3593,1,0,0,0,3596,3598,5,148,0,0,3597,3599,
        5,475,0,0,3598,3597,1,0,0,0,3598,3599,1,0,0,0,3599,3600,1,0,0,0,
        3600,3602,5,59,0,0,3601,3603,5,475,0,0,3602,3601,1,0,0,0,3602,3603,
        1,0,0,0,3603,397,1,0,0,0,3604,3605,5,149,0,0,3605,3615,3,410,205,
        0,3606,3607,5,203,0,0,3607,3612,3,404,202,0,3608,3609,5,474,0,0,
        3609,3611,3,404,202,0,3610,3608,1,0,0,0,3611,3614,1,0,0,0,3612,3610,
        1,0,0,0,3612,3613,1,0,0,0,3613,3616,1,0,0,0,3614,3612,1,0,0,0,3615,
        3606,1,0,0,0,3615,3616,1,0,0,0,3616,3618,1,0,0,0,3617,3619,5,6,0,
        0,3618,3617,1,0,0,0,3618,3619,1,0,0,0,3619,3620,1,0,0,0,3620,3624,
        5,10,0,0,3621,3623,3,6,3,0,3622,3621,1,0,0,0,3623,3626,1,0,0,0,3624,
        3622,1,0,0,0,3624,3625,1,0,0,0,3625,3627,1,0,0,0,3626,3624,1,0,0,
        0,3627,3628,5,148,0,0,3628,3630,3,208,104,0,3629,3631,5,475,0,0,
        3630,3629,1,0,0,0,3630,3631,1,0,0,0,3631,3632,1,0,0,0,3632,3633,
        5,59,0,0,3633,399,1,0,0,0,3634,3638,5,448,0,0,3635,3636,3,380,190,
        0,3636,3637,5,467,0,0,3637,3639,1,0,0,0,3638,3635,1,0,0,0,3638,3639,
        1,0,0,0,3639,3641,1,0,0,0,3640,3642,5,6,0,0,3641,3640,1,0,0,0,3641,
        3642,1,0,0,0,3642,3643,1,0,0,0,3643,3645,3,410,205,0,3644,3646,5,
        197,0,0,3645,3644,1,0,0,0,3645,3646,1,0,0,0,3646,3649,1,0,0,0,3647,
        3648,5,455,0,0,3648,3650,3,374,187,0,3649,3647,1,0,0,0,3649,3650,
        1,0,0,0,3650,3652,1,0,0,0,3651,3653,7,62,0,0,3652,3651,1,0,0,0,3652,
        3653,1,0,0,0,3653,401,1,0,0,0,3654,3658,5,272,0,0,3655,3658,5,373,
        0,0,3656,3658,3,178,89,0,3657,3654,1,0,0,0,3657,3655,1,0,0,0,3657,
        3656,1,0,0,0,3658,403,1,0,0,0,3659,3672,5,272,0,0,3660,3672,5,389,
        0,0,3661,3662,5,149,0,0,3662,3663,5,113,0,0,3663,3664,5,119,0,0,
        3664,3665,5,113,0,0,3665,3672,5,302,0,0,3666,3667,5,16,0,0,3667,
        3668,5,119,0,0,3668,3669,5,113,0,0,3669,3672,5,302,0,0,3670,3672,
        3,178,89,0,3671,3659,1,0,0,0,3671,3660,1,0,0,0,3671,3661,1,0,0,0,
        3671,3666,1,0,0,0,3671,3670,1,0,0,0,3672,405,1,0,0,0,3673,3674,5,
        360,0,0,3674,3675,5,472,0,0,3675,3676,3,208,104,0,3676,3677,5,473,
        0,0,3677,3678,5,204,0,0,3678,3679,5,82,0,0,3679,3680,5,472,0,0,3680,
        3681,3,246,123,0,3681,3682,5,473,0,0,3682,3683,3,330,165,0,3683,
        407,1,0,0,0,3684,3685,5,408,0,0,3685,3686,5,472,0,0,3686,3687,3,
        208,104,0,3687,3688,5,474,0,0,3688,3689,3,208,104,0,3689,3690,5,
        473,0,0,3690,3691,5,204,0,0,3691,3692,5,82,0,0,3692,3693,5,472,0,
        0,3693,3694,3,246,123,0,3694,3695,5,473,0,0,3695,409,1,0,0,0,3696,
        3698,3,380,190,0,3697,3699,5,84,0,0,3698,3697,1,0,0,0,3698,3699,
        1,0,0,0,3699,3707,1,0,0,0,3700,3701,5,472,0,0,3701,3704,7,63,0,0,
        3702,3703,5,474,0,0,3703,3705,5,449,0,0,3704,3702,1,0,0,0,3704,3705,
        1,0,0,0,3705,3706,1,0,0,0,3706,3708,5,473,0,0,3707,3700,1,0,0,0,
        3707,3708,1,0,0,0,3708,3723,1,0,0,0,3709,3723,5,249,0,0,3710,3711,
        5,254,0,0,3711,3712,5,472,0,0,3712,3713,5,449,0,0,3713,3723,5,473,
        0,0,3714,3716,5,55,0,0,3715,3717,5,134,0,0,3716,3715,1,0,0,0,3716,
        3717,1,0,0,0,3717,3723,1,0,0,0,3718,3723,5,303,0,0,3719,3723,5,421,
        0,0,3720,3723,5,401,0,0,3721,3723,5,226,0,0,3722,3696,1,0,0,0,3722,
        3709,1,0,0,0,3722,3710,1,0,0,0,3722,3714,1,0,0,0,3722,3718,1,0,0,
        0,3722,3719,1,0,0,0,3722,3720,1,0,0,0,3722,3721,1,0,0,0,3723,411,
        1,0,0,0,523,415,421,425,429,433,442,448,472,478,487,491,494,498,
        502,506,511,516,518,527,530,535,538,540,544,547,555,558,563,566,
        571,576,579,584,590,597,601,603,608,621,626,634,637,641,644,648,
        651,655,658,661,664,667,671,676,679,683,686,690,693,697,703,706,
        710,713,716,723,726,730,733,736,739,742,746,750,753,761,765,769,
        772,775,778,781,788,792,794,802,811,813,817,820,823,828,833,836,
        844,848,855,858,867,870,874,882,885,889,892,901,908,912,916,919,
        923,926,942,946,952,954,957,965,971,976,979,985,993,1002,1010,1013,
        1020,1023,1063,1066,1072,1084,1086,1089,1113,1124,1132,1143,1148,
        1151,1159,1169,1195,1201,1212,1231,1239,1246,1269,1282,1288,1293,
        1296,1302,1306,1313,1317,1323,1327,1333,1337,1340,1346,1350,1356,
        1363,1367,1373,1377,1383,1387,1404,1408,1414,1420,1437,1441,1449,
        1453,1456,1464,1468,1470,1474,1478,1482,1486,1492,1496,1498,1503,
        1511,1514,1517,1526,1531,1536,1539,1541,1545,1549,1552,1556,1562,
        1567,1574,1576,1580,1587,1591,1594,1603,1606,1608,1617,1628,1632,
        1634,1636,1642,1647,1654,1667,1669,1671,1674,1677,1684,1687,1693,
        1698,1700,1703,1709,1717,1719,1722,1726,1729,1735,1738,1742,1745,
        1751,1754,1756,1760,1765,1773,1778,1787,1792,1797,1803,1807,1810,
        1814,1820,1828,1833,1835,1838,1843,1848,1851,1856,1859,1862,1868,
        1874,1878,1883,1886,1891,1896,1900,1905,1909,1926,1932,1941,1951,
        1961,1963,1965,1968,1971,1982,1984,1986,1989,1992,1995,1998,2001,
        2004,2016,2019,2022,2031,2034,2037,2044,2047,2061,2064,2071,2086,
        2090,2103,2107,2115,2119,2139,2162,2164,2170,2177,2186,2198,2205,
        2212,2220,2229,2233,2243,2250,2262,2264,2287,2296,2302,2308,2314,
        2325,2333,2341,2346,2350,2359,2363,2366,2371,2375,2381,2383,2387,
        2396,2399,2402,2406,2410,2422,2436,2441,2446,2450,2457,2466,2473,
        2475,2489,2497,2500,2502,2509,2513,2524,2558,2574,2580,2587,2593,
        2598,2606,2609,2611,2618,2627,2644,2646,2651,2654,2657,2661,2666,
        2668,2672,2676,2680,2687,2689,2691,2695,2700,2705,2712,2725,2729,
        2731,2734,2738,2758,2762,2766,2783,2790,2813,2888,2892,2920,2954,
        2958,2971,2979,2991,2997,3006,3023,3029,3037,3041,3049,3056,3066,
        3074,3106,3112,3117,3122,3128,3131,3135,3140,3155,3164,3167,3170,
        3183,3187,3195,3201,3209,3216,3222,3237,3246,3252,3258,3261,3265,
        3272,3280,3283,3289,3295,3297,3303,3306,3308,3314,3316,3330,3337,
        3344,3351,3358,3364,3369,3378,3383,3390,3412,3416,3421,3425,3429,
        3433,3440,3459,3465,3470,3473,3479,3482,3489,3493,3495,3503,3506,
        3510,3518,3521,3531,3538,3543,3546,3556,3559,3562,3570,3581,3584,
        3587,3593,3598,3602,3612,3615,3618,3624,3630,3638,3641,3645,3649,
        3652,3657,3671,3698,3704,3707,3716,3722
    ]

class tsqlParser ( Parser ):

    grammarFileName = "tsql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'='", "'>'", 
                     "'<'", "'!'", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'&='", "'^='", "'|='", "'.'", "'_'", "'@'", "'#'", 
                     "'$'", "'('", "')'", "','", "';'", "':'", "'*'", "'/'", 
                     "'%'", "'+'", "'-'", "'~'", "'|'", "'&'", "'^'" ]

    symbolicNames = [ "<INVALID>", "ADD", "ALL", "ALTER", "AND", "ANY", 
                      "AS", "ASC", "AUTHORIZATION", "BACKUP", "BEGIN", "BETWEEN", 
                      "BREAK", "BROWSE", "BULK", "BY", "CALLED", "CASCADE", 
                      "CASE", "CHANGETABLE", "CHANGES", "CHECK", "CHECKPOINT", 
                      "CLOSE", "CLUSTERED", "COALESCE", "COLLATE", "COLUMN", 
                      "COMMIT", "COMPUTE", "CONSTRAINT", "CONTAINMENT", 
                      "CONTAINS", "CONTAINSTABLE", "CONTINUE", "CONVERT", 
                      "CREATE", "CROSS", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", 
                      "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "DATABASE", 
                      "DBCC", "DEALLOCATE", "DECLARE", "DEFAULT", "DELETE", 
                      "DENY", "DESC", "DISK", "DISTINCT", "DISTRIBUTED", 
                      "DOUBLE", "DROP", "DUMP", "ELSE", "END", "ERRLVL", 
                      "ESCAPE", "EXCEPT", "EXECUTE", "EXISTS", "EXIT", "EXP", 
                      "EXTERNAL", "FETCH", "FILE", "FILENAME", "FILLFACTOR", 
                      "FOR", "FORCESEEK", "FOREIGN", "FREETEXT", "FREETEXTTABLE", 
                      "FROM", "FULL", "FUNCTION", "GOTO", "GRANT", "GROUP", 
                      "HAVING", "IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT", 
                      "IIF", "IF", "IN", "INDEX", "INCLUDE", "INNER", "INSERT", 
                      "INTERSECT", "INTO", "IS", "JOIN", "KEY", "KILL", 
                      "LEFT", "LIKE", "LINENO", "LOAD", "LOG", "LOG10", 
                      "MERGE", "NATIONAL", "NEXT", "NOCHECK", "NONCLUSTERED", 
                      "NONE", "NOT", "NULL_", "NULLIF", "NUMERIC", "OF", 
                      "OFF", "OFFSETS", "ON", "OPEN", "OPENDATASOURCE", 
                      "OPENQUERY", "OPENROWSET", "OPENXML", "OPTION", "OR", 
                      "ORDER", "OUTER", "OVER", "PARTIAL", "PERCENT", "PIVOT", 
                      "PLAN", "PRECISION", "PRIMARY", "PRINT", "PROC", "PROCEDURE", 
                      "PUBLIC", "RAISERROR", "READ", "READTEXT", "RECONFIGURE", 
                      "REFERENCES", "REPLICATION", "RESTORE", "RESTRICT", 
                      "RETURN", "RETURNS", "REVERT", "REVOKE", "RIGHT", 
                      "ROLLBACK", "ROWCOUNT", "ROWGUIDCOL", "RULE", "SAVE", 
                      "SCHEMA", "SECURITYAUDIT", "SELECT", "SEMANTICKEYPHRASETABLE", 
                      "SEMANTICSIMILARITYDETAILSTABLE", "SEMANTICSIMILARITYTABLE", 
                      "SESSION_USER", "SET", "SETUSER", "SHUTDOWN", "SIGN", 
                      "SOME", "STATISTICS", "SYNONYM", "SYSTEM", "SYSTEM_USER", 
                      "TABLE", "TABLESAMPLE", "TEXTSIZE", "THEN", "TO", 
                      "TOP", "TRAN", "TRANSACTION", "TRIGGER", "TRUNCATE", 
                      "TRY_CAST", "TRY_CONVERT", "TRY_PARSE", "TSEQUAL", 
                      "UNION", "UNIQUE", "UNPIVOT", "UPDATE", "UPDATETEXT", 
                      "USE", "USER", "VALUES", "VALUE", "VARYING", "VIEW", 
                      "WAITFOR", "WHEN", "WHERE", "WHILE", "WITH", "WITHIN", 
                      "WRITETEXT", "ABSOLUTE", "AFTER", "ALLOWED", "ALLOW_SNAPSHOT_ISOLATION", 
                      "ANSI_NULLS", "ANSI_NULL_DEFAULT", "ANSI_PADDING", 
                      "ANSI_WARNINGS", "APPLY", "ARITHABORT", "AT", "AUTO", 
                      "AUTO_CLEANUP", "AUTO_CLOSE", "AUTO_CREATE_STATISTICS", 
                      "AUTO_SHRINK", "AUTO_UPDATE_STATISTICS", "AUTO_UPDATE_STATISTICS_ASYNC", 
                      "AVG", "BASE64", "BIGINT", "BINARY_CHECKSUM", "BULK_LOGGED", 
                      "CALLER", "CAST", "CATCH", "CEILING", "CHANGE_RETENTION", 
                      "CHANGE_TRACKING", "CHECKSUM", "CHECKSUM_AGG", "COMMITTED", 
                      "COMPATIBILITY_LEVEL", "CONCAT", "CONCAT_NULL_YIELDS_NULL", 
                      "CONTROL", "COOKIE", "COS", "COUNT", "COUNT_BIG", 
                      "CUBE", "CURSOR_CLOSE_ON_COMMIT", "CURSOR_DEFAULT", 
                      "DATE", "DATEADD", "DATEDIFF", "DATENAME", "DATEPART", 
                      "DATETIME2", "DATETIMEOFFSETFROMPARTS", "DATE_CORRELATION_OPTIMIZATION", 
                      "DAYS", "DB_CHAINING", "DEFAULT_FULLTEXT_LANGUAGE", 
                      "DEFAULT_LANGUAGE", "DELAY", "DELAYED_DURABILITY", 
                      "DELETED", "DENSE_RANK", "DIRECTORY_NAME", "DISABLE", 
                      "DISABLED", "DISABLE_BROKER", "DYNAMIC", "EMERGENCY", 
                      "ENABLE_BROKER", "ENCRYPTION", "ERROR_BROKER_CONVERSATIONS", 
                      "EXIST", "EXPAND", "FAST", "FAST_FORWARD", "FILEGROUP", 
                      "FILEGROWTH", "FILESTREAM", "FIRST", "FIRST_VALUE", 
                      "FLOOR", "FOLLOWING", "FORCE", "FORCED", "FORWARD_ONLY", 
                      "FULLSCAN", "GB", "GLOBAL", "GO", "GROUPING", "GROUPING_ID", 
                      "HADR", "HASH", "HONOR_BROKER_PRIORITY", "HOURS", 
                      "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", "IMMEDIATE", 
                      "IMPERSONATE", "INCREMENTAL", "INPUT", "INT", "INSENSITIVE", 
                      "INSERTED", "ISOLATION", "IO", "KB", "KEEP", "KEEPFIXED", 
                      "KEYSET", "LAG", "LAST", "LAST_VALUE", "LEAD", "LEVEL", 
                      "LOCAL", "LOCK_ESCALATION", "LOGIN", "LOOP", "MARK", 
                      "MAX", "MAXDOP", "MAXRECURSION", "MAXSIZE", "MB", 
                      "MEMORY_OPTIMIZED_DATA", "MIN", "MINUTES", "MIN_ACTIVE_ROWVERSION", 
                      "MIXED_PAGE_ALLOCATION", "MODIFY", "MULTI_USER", "NAME", 
                      "NESTED_TRIGGERS", "NEW_BROKER", "NOCOUNT", "NODES", 
                      "NOEXPAND", "NON_TRANSACTED_ACCESS", "NORECOMPUTE", 
                      "NO_WAIT", "NTILE", "NUMBER", "NUMERIC_ROUNDABORT", 
                      "OFFLINE", "OFFSET", "ONLINE", "ONLY", "OPTIMISTIC", 
                      "OPTIMIZE", "OUT", "OUTPUT", "OWNER", "PAGE_VERIFY", 
                      "PARAMETERIZATION", "PARSE", "PARTITION", "PATH", 
                      "PERCENTILE_CONT", "POWER", "PRECEDING", "PRIOR", 
                      "PRIVILEGES", "QUERY", "QUOTED_IDENTIFIER", "RANGE", 
                      "RANK", "READONLY", "READ_COMMITTED_SNAPSHOT", "READ_ONLY", 
                      "READ_WRITE", "RECOMPILE", "RECOVERY", "RECURSIVE_TRIGGERS", 
                      "RELATIVE", "REMOTE", "REPEATABLE", "RESTRICTED_USER", 
                      "ROBUST", "ROLLUP", "ROOT", "ROUND", "ROW", "ROWGUID", 
                      "ROWS", "ROW_NUMBER", "SAMPLE", "SCHEMABINDING", "SCROLL", 
                      "SCROLL_LOCKS", "SECONDS", "SELF", "SERIALIZABLE", 
                      "SETS", "SHOWPLAN", "SIMPLE", "SIN", "SINGLE_USER", 
                      "SIZE", "SMALLINT", "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", 
                      "STATIC", "STATS_STREAM", "STDEV", "STDEVP", "STRING_AGG", 
                      "STRING_SPLIT", "SUM", "SQRT", "SQUARE", "TAKE", "TAN", 
                      "TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", "THROW", 
                      "TIES", "TIME", "TINYINT", "TORN_PAGE_DETECTION", 
                      "TRANSFORM_NOISE_WORDS", "TRUSTWORTHY", "TRY", "TWO_DIGIT_YEAR_CUTOFF", 
                      "TYPE", "TYPE_WARNING", "UNBOUNDED", "UNCOMMITTED", 
                      "UNKNOWN", "UNLIMITED", "USING", "VAR", "VARP", "VIEWS", 
                      "VIEW_METADATA", "WORK", "XML", "XMLNAMESPACES", "ZONE", 
                      "DOLLAR_ACTION", "SPACE", "COMMENT", "LINE_COMMENT", 
                      "DOUBLE_QUOTE_ID", "SQUARE_BRACKET_ID", "LOCAL_ID", 
                      "DECIMAL", "ID", "STRING", "BINARY", "FLOAT", "REAL", 
                      "EQUAL", "GREATER", "LESS", "EXCLAMATION", "PLUS_ASSIGN", 
                      "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
                      "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "DOT", "UNDERLINE", 
                      "AT_SIGN", "SHARP", "DOLLAR", "LR_BRACKET", "RR_BRACKET", 
                      "COMMA", "SEMI", "COLON", "STAR", "DIVIDE", "MODULE", 
                      "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_AND", "BIT_XOR" ]

    RULE_tsql_file = 0
    RULE_batch = 1
    RULE_sql_clauses = 2
    RULE_sql_clause = 3
    RULE_dml_clause = 4
    RULE_ddl_clause = 5
    RULE_cfl_statement = 6
    RULE_cfl_clause = 7
    RULE_block_statement = 8
    RULE_break_statement = 9
    RULE_continue_statement = 10
    RULE_goto_statement = 11
    RULE_if_statement = 12
    RULE_if_block = 13
    RULE_return_statement = 14
    RULE_throw_statement = 15
    RULE_try_catch_statement = 16
    RULE_waitfor_statement = 17
    RULE_while_statement = 18
    RULE_print_statement = 19
    RULE_raiseerror_statement = 20
    RULE_another_statement = 21
    RULE_delete_statement = 22
    RULE_delete_statement_from = 23
    RULE_insert_statement = 24
    RULE_insert_statement_value = 25
    RULE_select_statement = 26
    RULE_update_statement = 27
    RULE_where_clause_dml = 28
    RULE_output_clause = 29
    RULE_output_dml_list_elem = 30
    RULE_output_column_name = 31
    RULE_create_database = 32
    RULE_create_index = 33
    RULE_create_statistics = 34
    RULE_create_table = 35
    RULE_create_schema = 36
    RULE_create_synonym = 37
    RULE_create_view = 38
    RULE_view_attribute = 39
    RULE_alter_table = 40
    RULE_alter_database = 41
    RULE_database_optionspec = 42
    RULE_auto_option = 43
    RULE_change_tracking_option = 44
    RULE_change_tracking_option_list = 45
    RULE_containment_option = 46
    RULE_cursor_option = 47
    RULE_date_correlation_optimization_option = 48
    RULE_db_encryption_option = 49
    RULE_db_state_option = 50
    RULE_db_update_option = 51
    RULE_db_user_access_option = 52
    RULE_delayed_durability_option = 53
    RULE_external_access_option = 54
    RULE_hadr_options = 55
    RULE_mixed_page_allocation_option = 56
    RULE_parameterization_option = 57
    RULE_recovery_option = 58
    RULE_service_broker_option = 59
    RULE_snapshot_option = 60
    RULE_sql_option = 61
    RULE_target_recovery_time_option = 62
    RULE_termination = 63
    RULE_drop_index = 64
    RULE_drop_procedure = 65
    RULE_drop_statistics = 66
    RULE_drop_table = 67
    RULE_drop_database = 68
    RULE_drop_synonym = 69
    RULE_drop_view = 70
    RULE_drop_schema = 71
    RULE_drop_function = 72
    RULE_create_type = 73
    RULE_drop_type = 74
    RULE_rowset_function_limited = 75
    RULE_openquery = 76
    RULE_opendatasource = 77
    RULE_declare_statement = 78
    RULE_cursor_statement = 79
    RULE_execute_statement = 80
    RULE_execute_statement_arg = 81
    RULE_execute_var_string = 82
    RULE_security_statement = 83
    RULE_grant_permission = 84
    RULE_set_statement = 85
    RULE_transaction_statement = 86
    RULE_go_statement = 87
    RULE_use_statement = 88
    RULE_execute_clause = 89
    RULE_declare_local = 90
    RULE_table_type_definition = 91
    RULE_column_def_table_constraints = 92
    RULE_column_def_table_constraint = 93
    RULE_column_definition = 94
    RULE_column_constraint = 95
    RULE_table_constraint = 96
    RULE_index_options = 97
    RULE_index_option = 98
    RULE_declare_cursor = 99
    RULE_declare_set_cursor_common = 100
    RULE_fetch_cursor = 101
    RULE_set_special = 102
    RULE_constant_LOCAL_ID = 103
    RULE_expression = 104
    RULE_xml_method_call = 105
    RULE_simple_xml_method_name = 106
    RULE_constant_expression = 107
    RULE_subquery = 108
    RULE_with_expression = 109
    RULE_common_table_expression = 110
    RULE_update_elem = 111
    RULE_search_condition_list = 112
    RULE_search_condition = 113
    RULE_predicate = 114
    RULE_query_expression = 115
    RULE_union_op = 116
    RULE_cross_apply_expression = 117
    RULE_query_specification = 118
    RULE_group_by_grouping_sets = 119
    RULE_grouping_set = 120
    RULE_top_clause = 121
    RULE_top_clause_dm = 122
    RULE_order_by_clause = 123
    RULE_fetch_expression = 124
    RULE_for_clause = 125
    RULE_xml_common_directives = 126
    RULE_order_by_expression = 127
    RULE_group_by_item = 128
    RULE_option_clause = 129
    RULE_option = 130
    RULE_optimize_for_arg = 131
    RULE_select_list = 132
    RULE_select_list_elem = 133
    RULE_table_sources = 134
    RULE_table_source = 135
    RULE_table_source_item = 136
    RULE_tablesample_clause = 137
    RULE_sample_number = 138
    RULE_repeat_seed = 139
    RULE_table_alias = 140
    RULE_change_table = 141
    RULE_join_type = 142
    RULE_table_name_with_hint = 143
    RULE_rowset_function = 144
    RULE_bulk_option = 145
    RULE_derived_table = 146
    RULE_function_call = 147
    RULE_switch_section = 148
    RULE_switch_search_condition_section = 149
    RULE_with_table_hints = 150
    RULE_insert_with_table_hints = 151
    RULE_table_hint = 152
    RULE_index_value = 153
    RULE_column_alias_list = 154
    RULE_column_alias = 155
    RULE_a_star = 156
    RULE_table_value_constructor = 157
    RULE_expression_list = 158
    RULE_value_list = 159
    RULE_next_value_for = 160
    RULE_next_value_for_function = 161
    RULE_ranking_windowed_function = 162
    RULE_aggregate_windowed_function = 163
    RULE_all_distinct = 164
    RULE_over_clause = 165
    RULE_row_or_range_clause = 166
    RULE_window_frame_extent = 167
    RULE_window_frame_bound = 168
    RULE_window_frame_preceding = 169
    RULE_window_frame_following = 170
    RULE_create_database_option = 171
    RULE_database_filestream_option = 172
    RULE_database_file_spec = 173
    RULE_file_group = 174
    RULE_file_spec = 175
    RULE_full_table_name = 176
    RULE_simple_name = 177
    RULE_func_proc_name = 178
    RULE_ddl_object = 179
    RULE_full_column_name = 180
    RULE_column_name_list = 181
    RULE_cursor_name = 182
    RULE_on_off = 183
    RULE_clustered = 184
    RULE_null_notnull = 185
    RULE_scalar_function_name = 186
    RULE_default_value = 187
    RULE_constant = 188
    RULE_sign = 189
    RULE_r_id = 190
    RULE_simple_id = 191
    RULE_comparison_operator = 192
    RULE_assignment_operator = 193
    RULE_file_size = 194
    RULE_create_or_alter_procedure = 195
    RULE_create_or_alter_function = 196
    RULE_func_body_returns_select = 197
    RULE_func_body_returns_table = 198
    RULE_func_body_returns_scalar = 199
    RULE_procedure_param = 200
    RULE_procedure_option = 201
    RULE_function_option = 202
    RULE_percentile_cont = 203
    RULE_string_agg = 204
    RULE_data_type = 205

    ruleNames =  [ "tsql_file", "batch", "sql_clauses", "sql_clause", "dml_clause", 
                   "ddl_clause", "cfl_statement", "cfl_clause", "block_statement", 
                   "break_statement", "continue_statement", "goto_statement", 
                   "if_statement", "if_block", "return_statement", "throw_statement", 
                   "try_catch_statement", "waitfor_statement", "while_statement", 
                   "print_statement", "raiseerror_statement", "another_statement", 
                   "delete_statement", "delete_statement_from", "insert_statement", 
                   "insert_statement_value", "select_statement", "update_statement", 
                   "where_clause_dml", "output_clause", "output_dml_list_elem", 
                   "output_column_name", "create_database", "create_index", 
                   "create_statistics", "create_table", "create_schema", 
                   "create_synonym", "create_view", "view_attribute", "alter_table", 
                   "alter_database", "database_optionspec", "auto_option", 
                   "change_tracking_option", "change_tracking_option_list", 
                   "containment_option", "cursor_option", "date_correlation_optimization_option", 
                   "db_encryption_option", "db_state_option", "db_update_option", 
                   "db_user_access_option", "delayed_durability_option", 
                   "external_access_option", "hadr_options", "mixed_page_allocation_option", 
                   "parameterization_option", "recovery_option", "service_broker_option", 
                   "snapshot_option", "sql_option", "target_recovery_time_option", 
                   "termination", "drop_index", "drop_procedure", "drop_statistics", 
                   "drop_table", "drop_database", "drop_synonym", "drop_view", 
                   "drop_schema", "drop_function", "create_type", "drop_type", 
                   "rowset_function_limited", "openquery", "opendatasource", 
                   "declare_statement", "cursor_statement", "execute_statement", 
                   "execute_statement_arg", "execute_var_string", "security_statement", 
                   "grant_permission", "set_statement", "transaction_statement", 
                   "go_statement", "use_statement", "execute_clause", "declare_local", 
                   "table_type_definition", "column_def_table_constraints", 
                   "column_def_table_constraint", "column_definition", "column_constraint", 
                   "table_constraint", "index_options", "index_option", 
                   "declare_cursor", "declare_set_cursor_common", "fetch_cursor", 
                   "set_special", "constant_LOCAL_ID", "expression", "xml_method_call", 
                   "simple_xml_method_name", "constant_expression", "subquery", 
                   "with_expression", "common_table_expression", "update_elem", 
                   "search_condition_list", "search_condition", "predicate", 
                   "query_expression", "union_op", "cross_apply_expression", 
                   "query_specification", "group_by_grouping_sets", "grouping_set", 
                   "top_clause", "top_clause_dm", "order_by_clause", "fetch_expression", 
                   "for_clause", "xml_common_directives", "order_by_expression", 
                   "group_by_item", "option_clause", "option", "optimize_for_arg", 
                   "select_list", "select_list_elem", "table_sources", "table_source", 
                   "table_source_item", "tablesample_clause", "sample_number", 
                   "repeat_seed", "table_alias", "change_table", "join_type", 
                   "table_name_with_hint", "rowset_function", "bulk_option", 
                   "derived_table", "function_call", "switch_section", "switch_search_condition_section", 
                   "with_table_hints", "insert_with_table_hints", "table_hint", 
                   "index_value", "column_alias_list", "column_alias", "a_star", 
                   "table_value_constructor", "expression_list", "value_list", 
                   "next_value_for", "next_value_for_function", "ranking_windowed_function", 
                   "aggregate_windowed_function", "all_distinct", "over_clause", 
                   "row_or_range_clause", "window_frame_extent", "window_frame_bound", 
                   "window_frame_preceding", "window_frame_following", "create_database_option", 
                   "database_filestream_option", "database_file_spec", "file_group", 
                   "file_spec", "full_table_name", "simple_name", "func_proc_name", 
                   "ddl_object", "full_column_name", "column_name_list", 
                   "cursor_name", "on_off", "clustered", "null_notnull", 
                   "scalar_function_name", "default_value", "constant", 
                   "sign", "r_id", "simple_id", "comparison_operator", "assignment_operator", 
                   "file_size", "create_or_alter_procedure", "create_or_alter_function", 
                   "func_body_returns_select", "func_body_returns_table", 
                   "func_body_returns_scalar", "procedure_param", "procedure_option", 
                   "function_option", "percentile_cont", "string_agg", "data_type" ]

    EOF = Token.EOF
    ADD=1
    ALL=2
    ALTER=3
    AND=4
    ANY=5
    AS=6
    ASC=7
    AUTHORIZATION=8
    BACKUP=9
    BEGIN=10
    BETWEEN=11
    BREAK=12
    BROWSE=13
    BULK=14
    BY=15
    CALLED=16
    CASCADE=17
    CASE=18
    CHANGETABLE=19
    CHANGES=20
    CHECK=21
    CHECKPOINT=22
    CLOSE=23
    CLUSTERED=24
    COALESCE=25
    COLLATE=26
    COLUMN=27
    COMMIT=28
    COMPUTE=29
    CONSTRAINT=30
    CONTAINMENT=31
    CONTAINS=32
    CONTAINSTABLE=33
    CONTINUE=34
    CONVERT=35
    CREATE=36
    CROSS=37
    CURRENT=38
    CURRENT_DATE=39
    CURRENT_TIME=40
    CURRENT_TIMESTAMP=41
    CURRENT_USER=42
    CURSOR=43
    DATABASE=44
    DBCC=45
    DEALLOCATE=46
    DECLARE=47
    DEFAULT=48
    DELETE=49
    DENY=50
    DESC=51
    DISK=52
    DISTINCT=53
    DISTRIBUTED=54
    DOUBLE=55
    DROP=56
    DUMP=57
    ELSE=58
    END=59
    ERRLVL=60
    ESCAPE=61
    EXCEPT=62
    EXECUTE=63
    EXISTS=64
    EXIT=65
    EXP=66
    EXTERNAL=67
    FETCH=68
    FILE=69
    FILENAME=70
    FILLFACTOR=71
    FOR=72
    FORCESEEK=73
    FOREIGN=74
    FREETEXT=75
    FREETEXTTABLE=76
    FROM=77
    FULL=78
    FUNCTION=79
    GOTO=80
    GRANT=81
    GROUP=82
    HAVING=83
    IDENTITY=84
    IDENTITYCOL=85
    IDENTITY_INSERT=86
    IIF=87
    IF=88
    IN=89
    INDEX=90
    INCLUDE=91
    INNER=92
    INSERT=93
    INTERSECT=94
    INTO=95
    IS=96
    JOIN=97
    KEY=98
    KILL=99
    LEFT=100
    LIKE=101
    LINENO=102
    LOAD=103
    LOG=104
    LOG10=105
    MERGE=106
    NATIONAL=107
    NEXT=108
    NOCHECK=109
    NONCLUSTERED=110
    NONE=111
    NOT=112
    NULL_=113
    NULLIF=114
    NUMERIC=115
    OF=116
    OFF=117
    OFFSETS=118
    ON=119
    OPEN=120
    OPENDATASOURCE=121
    OPENQUERY=122
    OPENROWSET=123
    OPENXML=124
    OPTION=125
    OR=126
    ORDER=127
    OUTER=128
    OVER=129
    PARTIAL=130
    PERCENT=131
    PIVOT=132
    PLAN=133
    PRECISION=134
    PRIMARY=135
    PRINT=136
    PROC=137
    PROCEDURE=138
    PUBLIC=139
    RAISERROR=140
    READ=141
    READTEXT=142
    RECONFIGURE=143
    REFERENCES=144
    REPLICATION=145
    RESTORE=146
    RESTRICT=147
    RETURN=148
    RETURNS=149
    REVERT=150
    REVOKE=151
    RIGHT=152
    ROLLBACK=153
    ROWCOUNT=154
    ROWGUIDCOL=155
    RULE=156
    SAVE=157
    SCHEMA=158
    SECURITYAUDIT=159
    SELECT=160
    SEMANTICKEYPHRASETABLE=161
    SEMANTICSIMILARITYDETAILSTABLE=162
    SEMANTICSIMILARITYTABLE=163
    SESSION_USER=164
    SET=165
    SETUSER=166
    SHUTDOWN=167
    SIGN=168
    SOME=169
    STATISTICS=170
    SYNONYM=171
    SYSTEM=172
    SYSTEM_USER=173
    TABLE=174
    TABLESAMPLE=175
    TEXTSIZE=176
    THEN=177
    TO=178
    TOP=179
    TRAN=180
    TRANSACTION=181
    TRIGGER=182
    TRUNCATE=183
    TRY_CAST=184
    TRY_CONVERT=185
    TRY_PARSE=186
    TSEQUAL=187
    UNION=188
    UNIQUE=189
    UNPIVOT=190
    UPDATE=191
    UPDATETEXT=192
    USE=193
    USER=194
    VALUES=195
    VALUE=196
    VARYING=197
    VIEW=198
    WAITFOR=199
    WHEN=200
    WHERE=201
    WHILE=202
    WITH=203
    WITHIN=204
    WRITETEXT=205
    ABSOLUTE=206
    AFTER=207
    ALLOWED=208
    ALLOW_SNAPSHOT_ISOLATION=209
    ANSI_NULLS=210
    ANSI_NULL_DEFAULT=211
    ANSI_PADDING=212
    ANSI_WARNINGS=213
    APPLY=214
    ARITHABORT=215
    AT=216
    AUTO=217
    AUTO_CLEANUP=218
    AUTO_CLOSE=219
    AUTO_CREATE_STATISTICS=220
    AUTO_SHRINK=221
    AUTO_UPDATE_STATISTICS=222
    AUTO_UPDATE_STATISTICS_ASYNC=223
    AVG=224
    BASE64=225
    BIGINT=226
    BINARY_CHECKSUM=227
    BULK_LOGGED=228
    CALLER=229
    CAST=230
    CATCH=231
    CEILING=232
    CHANGE_RETENTION=233
    CHANGE_TRACKING=234
    CHECKSUM=235
    CHECKSUM_AGG=236
    COMMITTED=237
    COMPATIBILITY_LEVEL=238
    CONCAT=239
    CONCAT_NULL_YIELDS_NULL=240
    CONTROL=241
    COOKIE=242
    COS=243
    COUNT=244
    COUNT_BIG=245
    CUBE=246
    CURSOR_CLOSE_ON_COMMIT=247
    CURSOR_DEFAULT=248
    DATE=249
    DATEADD=250
    DATEDIFF=251
    DATENAME=252
    DATEPART=253
    DATETIME2=254
    DATETIMEOFFSETFROMPARTS=255
    DATE_CORRELATION_OPTIMIZATION=256
    DAYS=257
    DB_CHAINING=258
    DEFAULT_FULLTEXT_LANGUAGE=259
    DEFAULT_LANGUAGE=260
    DELAY=261
    DELAYED_DURABILITY=262
    DELETED=263
    DENSE_RANK=264
    DIRECTORY_NAME=265
    DISABLE=266
    DISABLED=267
    DISABLE_BROKER=268
    DYNAMIC=269
    EMERGENCY=270
    ENABLE_BROKER=271
    ENCRYPTION=272
    ERROR_BROKER_CONVERSATIONS=273
    EXIST=274
    EXPAND=275
    FAST=276
    FAST_FORWARD=277
    FILEGROUP=278
    FILEGROWTH=279
    FILESTREAM=280
    FIRST=281
    FIRST_VALUE=282
    FLOOR=283
    FOLLOWING=284
    FORCE=285
    FORCED=286
    FORWARD_ONLY=287
    FULLSCAN=288
    GB=289
    GLOBAL=290
    GO=291
    GROUPING=292
    GROUPING_ID=293
    HADR=294
    HASH=295
    HONOR_BROKER_PRIORITY=296
    HOURS=297
    IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=298
    IMMEDIATE=299
    IMPERSONATE=300
    INCREMENTAL=301
    INPUT=302
    INT=303
    INSENSITIVE=304
    INSERTED=305
    ISOLATION=306
    IO=307
    KB=308
    KEEP=309
    KEEPFIXED=310
    KEYSET=311
    LAG=312
    LAST=313
    LAST_VALUE=314
    LEAD=315
    LEVEL=316
    LOCAL=317
    LOCK_ESCALATION=318
    LOGIN=319
    LOOP=320
    MARK=321
    MAX=322
    MAXDOP=323
    MAXRECURSION=324
    MAXSIZE=325
    MB=326
    MEMORY_OPTIMIZED_DATA=327
    MIN=328
    MINUTES=329
    MIN_ACTIVE_ROWVERSION=330
    MIXED_PAGE_ALLOCATION=331
    MODIFY=332
    MULTI_USER=333
    NAME=334
    NESTED_TRIGGERS=335
    NEW_BROKER=336
    NOCOUNT=337
    NODES=338
    NOEXPAND=339
    NON_TRANSACTED_ACCESS=340
    NORECOMPUTE=341
    NO_WAIT=342
    NTILE=343
    NUMBER=344
    NUMERIC_ROUNDABORT=345
    OFFLINE=346
    OFFSET=347
    ONLINE=348
    ONLY=349
    OPTIMISTIC=350
    OPTIMIZE=351
    OUT=352
    OUTPUT=353
    OWNER=354
    PAGE_VERIFY=355
    PARAMETERIZATION=356
    PARSE=357
    PARTITION=358
    PATH=359
    PERCENTILE_CONT=360
    POWER=361
    PRECEDING=362
    PRIOR=363
    PRIVILEGES=364
    QUERY=365
    QUOTED_IDENTIFIER=366
    RANGE=367
    RANK=368
    READONLY=369
    READ_COMMITTED_SNAPSHOT=370
    READ_ONLY=371
    READ_WRITE=372
    RECOMPILE=373
    RECOVERY=374
    RECURSIVE_TRIGGERS=375
    RELATIVE=376
    REMOTE=377
    REPEATABLE=378
    RESTRICTED_USER=379
    ROBUST=380
    ROLLUP=381
    ROOT=382
    ROUND=383
    ROW=384
    ROWGUID=385
    ROWS=386
    ROW_NUMBER=387
    SAMPLE=388
    SCHEMABINDING=389
    SCROLL=390
    SCROLL_LOCKS=391
    SECONDS=392
    SELF=393
    SERIALIZABLE=394
    SETS=395
    SHOWPLAN=396
    SIMPLE=397
    SIN=398
    SINGLE_USER=399
    SIZE=400
    SMALLINT=401
    SNAPSHOT=402
    SPATIAL_WINDOW_MAX_CELLS=403
    STATIC=404
    STATS_STREAM=405
    STDEV=406
    STDEVP=407
    STRING_AGG=408
    STRING_SPLIT=409
    SUM=410
    SQRT=411
    SQUARE=412
    TAKE=413
    TAN=414
    TARGET_RECOVERY_TIME=415
    TB=416
    TEXTIMAGE_ON=417
    THROW=418
    TIES=419
    TIME=420
    TINYINT=421
    TORN_PAGE_DETECTION=422
    TRANSFORM_NOISE_WORDS=423
    TRUSTWORTHY=424
    TRY=425
    TWO_DIGIT_YEAR_CUTOFF=426
    TYPE=427
    TYPE_WARNING=428
    UNBOUNDED=429
    UNCOMMITTED=430
    UNKNOWN=431
    UNLIMITED=432
    USING=433
    VAR=434
    VARP=435
    VIEWS=436
    VIEW_METADATA=437
    WORK=438
    XML=439
    XMLNAMESPACES=440
    ZONE=441
    DOLLAR_ACTION=442
    SPACE=443
    COMMENT=444
    LINE_COMMENT=445
    DOUBLE_QUOTE_ID=446
    SQUARE_BRACKET_ID=447
    LOCAL_ID=448
    DECIMAL=449
    ID=450
    STRING=451
    BINARY=452
    FLOAT=453
    REAL=454
    EQUAL=455
    GREATER=456
    LESS=457
    EXCLAMATION=458
    PLUS_ASSIGN=459
    MINUS_ASSIGN=460
    MULT_ASSIGN=461
    DIV_ASSIGN=462
    MOD_ASSIGN=463
    AND_ASSIGN=464
    XOR_ASSIGN=465
    OR_ASSIGN=466
    DOT=467
    UNDERLINE=468
    AT_SIGN=469
    SHARP=470
    DOLLAR=471
    LR_BRACKET=472
    RR_BRACKET=473
    COMMA=474
    SEMI=475
    COLON=476
    STAR=477
    DIVIDE=478
    MODULE=479
    PLUS=480
    MINUS=481
    BIT_NOT=482
    BIT_OR=483
    BIT_AND=484
    BIT_XOR=485

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Tsql_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(tsqlParser.EOF, 0)

        def batch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.BatchContext)
            else:
                return self.getTypedRuleContext(tsqlParser.BatchContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_tsql_file




    def tsql_file(self):

        localctx = tsqlParser.Tsql_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_tsql_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & -9150540300454718456) != 0 or (((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 4645436661968937) != 0 or (((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & -7890306546597212143) != 0 or (((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & 7494145550770540563) != 0 or (((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 5188142120077987657) != 0 or (((_la - 332)) & ~0x3f) == 0 and ((1 << (_la - 332)) & 8067480458436254437) != 0 or (((_la - 397)) & ~0x3f) == 0 and ((1 << (_la - 397)) & 10731198337787881) != 0 or _la==472:
                self.state = 412
                self.batch()
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 418
            self.match(tsqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_clauses(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,0)


        def go_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Go_statementContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Go_statementContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_batch




    def batch(self):

        localctx = tsqlParser.BatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_batch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==291:
                self.state = 420
                self.go_statement()


            self.state = 423
            self.sql_clauses()
            self.state = 425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 424
                self.go_statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.SEMI)
            else:
                return self.getToken(tsqlParser.SEMI, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_sql_clauses




    def sql_clauses(self):

        localctx = tsqlParser.Sql_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_clauses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 427
                    self.sql_clause()
                    self.state = 429
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                    if la_ == 1:
                        self.state = 428
                        self.match(tsqlParser.SEMI)



                else:
                    raise NoViableAltException(self)
                self.state = 433 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_clause(self):
            return self.getTypedRuleContext(tsqlParser.Dml_clauseContext,0)


        def ddl_clause(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_clauseContext,0)


        def cfl_statement(self):
            return self.getTypedRuleContext(tsqlParser.Cfl_statementContext,0)


        def another_statement(self):
            return self.getTypedRuleContext(tsqlParser.Another_statementContext,0)


        def cfl_clause(self):
            return self.getTypedRuleContext(tsqlParser.Cfl_clauseContext,0)


        def declare_statement(self):
            return self.getTypedRuleContext(tsqlParser.Declare_statementContext,0)


        def print_statement(self):
            return self.getTypedRuleContext(tsqlParser.Print_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_sql_clause




    def sql_clause(self):

        localctx = tsqlParser.Sql_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_sql_clause)
        try:
            self.state = 442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 435
                self.dml_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 436
                self.ddl_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 437
                self.cfl_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 438
                self.another_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 439
                self.cfl_clause()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 440
                self.declare_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 441
                self.print_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dml_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def delete_statement(self):
            return self.getTypedRuleContext(tsqlParser.Delete_statementContext,0)


        def insert_statement(self):
            return self.getTypedRuleContext(tsqlParser.Insert_statementContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def update_statement(self):
            return self.getTypedRuleContext(tsqlParser.Update_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_dml_clause




    def dml_clause(self):

        localctx = tsqlParser.Dml_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_dml_clause)
        try:
            self.state = 448
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 444
                self.delete_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 445
                self.insert_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 446
                self.select_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 447
                self.update_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ddl_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_database(self):
            return self.getTypedRuleContext(tsqlParser.Create_databaseContext,0)


        def create_index(self):
            return self.getTypedRuleContext(tsqlParser.Create_indexContext,0)


        def create_or_alter_function(self):
            return self.getTypedRuleContext(tsqlParser.Create_or_alter_functionContext,0)


        def create_or_alter_procedure(self):
            return self.getTypedRuleContext(tsqlParser.Create_or_alter_procedureContext,0)


        def create_statistics(self):
            return self.getTypedRuleContext(tsqlParser.Create_statisticsContext,0)


        def create_schema(self):
            return self.getTypedRuleContext(tsqlParser.Create_schemaContext,0)


        def create_synonym(self):
            return self.getTypedRuleContext(tsqlParser.Create_synonymContext,0)


        def create_table(self):
            return self.getTypedRuleContext(tsqlParser.Create_tableContext,0)


        def create_type(self):
            return self.getTypedRuleContext(tsqlParser.Create_typeContext,0)


        def create_view(self):
            return self.getTypedRuleContext(tsqlParser.Create_viewContext,0)


        def alter_table(self):
            return self.getTypedRuleContext(tsqlParser.Alter_tableContext,0)


        def alter_database(self):
            return self.getTypedRuleContext(tsqlParser.Alter_databaseContext,0)


        def drop_index(self):
            return self.getTypedRuleContext(tsqlParser.Drop_indexContext,0)


        def drop_procedure(self):
            return self.getTypedRuleContext(tsqlParser.Drop_procedureContext,0)


        def drop_statistics(self):
            return self.getTypedRuleContext(tsqlParser.Drop_statisticsContext,0)


        def drop_synonym(self):
            return self.getTypedRuleContext(tsqlParser.Drop_synonymContext,0)


        def drop_table(self):
            return self.getTypedRuleContext(tsqlParser.Drop_tableContext,0)


        def drop_type(self):
            return self.getTypedRuleContext(tsqlParser.Drop_typeContext,0)


        def drop_view(self):
            return self.getTypedRuleContext(tsqlParser.Drop_viewContext,0)


        def drop_database(self):
            return self.getTypedRuleContext(tsqlParser.Drop_databaseContext,0)


        def drop_schema(self):
            return self.getTypedRuleContext(tsqlParser.Drop_schemaContext,0)


        def drop_function(self):
            return self.getTypedRuleContext(tsqlParser.Drop_functionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_ddl_clause




    def ddl_clause(self):

        localctx = tsqlParser.Ddl_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_ddl_clause)
        try:
            self.state = 472
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 450
                self.create_database()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 451
                self.create_index()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 452
                self.create_or_alter_function()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 453
                self.create_or_alter_procedure()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 454
                self.create_statistics()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 455
                self.create_schema()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 456
                self.create_synonym()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 457
                self.create_table()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 458
                self.create_type()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 459
                self.create_view()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 460
                self.alter_table()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 461
                self.alter_database()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 462
                self.drop_index()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 463
                self.drop_procedure()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 464
                self.drop_statistics()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 465
                self.drop_synonym()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 466
                self.drop_table()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 467
                self.drop_type()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 468
                self.drop_view()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 469
                self.drop_database()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 470
                self.drop_schema()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 471
                self.drop_function()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cfl_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_statement(self):
            return self.getTypedRuleContext(tsqlParser.If_statementContext,0)


        def try_catch_statement(self):
            return self.getTypedRuleContext(tsqlParser.Try_catch_statementContext,0)


        def waitfor_statement(self):
            return self.getTypedRuleContext(tsqlParser.Waitfor_statementContext,0)


        def while_statement(self):
            return self.getTypedRuleContext(tsqlParser.While_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_cfl_statement




    def cfl_statement(self):

        localctx = tsqlParser.Cfl_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_cfl_statement)
        try:
            self.state = 478
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [88]:
                self.enterOuterAlt(localctx, 1)
                self.state = 474
                self.if_statement()
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 475
                self.try_catch_statement()
                pass
            elif token in [199]:
                self.enterOuterAlt(localctx, 3)
                self.state = 476
                self.waitfor_statement()
                pass
            elif token in [202]:
                self.enterOuterAlt(localctx, 4)
                self.state = 477
                self.while_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cfl_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block_statement(self):
            return self.getTypedRuleContext(tsqlParser.Block_statementContext,0)


        def break_statement(self):
            return self.getTypedRuleContext(tsqlParser.Break_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(tsqlParser.Continue_statementContext,0)


        def goto_statement(self):
            return self.getTypedRuleContext(tsqlParser.Goto_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(tsqlParser.Return_statementContext,0)


        def throw_statement(self):
            return self.getTypedRuleContext(tsqlParser.Throw_statementContext,0)


        def raiseerror_statement(self):
            return self.getTypedRuleContext(tsqlParser.Raiseerror_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_cfl_clause




    def cfl_clause(self):

        localctx = tsqlParser.Cfl_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_cfl_clause)
        try:
            self.state = 487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 480
                self.block_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 481
                self.break_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 482
                self.continue_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 483
                self.goto_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 484
                self.return_statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 485
                self.throw_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 486
                self.raiseerror_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(tsqlParser.BEGIN, 0)

        def END(self):
            return self.getToken(tsqlParser.END, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.SEMI)
            else:
                return self.getToken(tsqlParser.SEMI, i)

        def sql_clauses(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_block_statement




    def block_statement(self):

        localctx = tsqlParser.Block_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_block_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.match(tsqlParser.BEGIN)
            self.state = 491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==475:
                self.state = 490
                self.match(tsqlParser.SEMI)


            self.state = 494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & -9150540300454718456) != 0 or (((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 4645436661968937) != 0 or (((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & -7890306546597212143) != 0 or (((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & 7494145550770540563) != 0 or (((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 5188142120044433225) != 0 or (((_la - 332)) & ~0x3f) == 0 and ((1 << (_la - 332)) & 8067480458436254437) != 0 or (((_la - 397)) & ~0x3f) == 0 and ((1 << (_la - 397)) & 10731198337787881) != 0 or _la==472:
                self.state = 493
                self.sql_clauses()


            self.state = 496
            self.match(tsqlParser.END)
            self.state = 498
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 497
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(tsqlParser.BREAK, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_break_statement




    def break_statement(self):

        localctx = tsqlParser.Break_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_break_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            self.match(tsqlParser.BREAK)
            self.state = 502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 501
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(tsqlParser.CONTINUE, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_continue_statement




    def continue_statement(self):

        localctx = tsqlParser.Continue_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_continue_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.match(tsqlParser.CONTINUE)
            self.state = 506
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 505
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Goto_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(tsqlParser.GOTO, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def COLON(self):
            return self.getToken(tsqlParser.COLON, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_goto_statement




    def goto_statement(self):

        localctx = tsqlParser.Goto_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_goto_statement)
        try:
            self.state = 518
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [80]:
                self.enterOuterAlt(localctx, 1)
                self.state = 508
                self.match(tsqlParser.GOTO)
                self.state = 509
                self.r_id()
                self.state = 511
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 510
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 450]:
                self.enterOuterAlt(localctx, 2)
                self.state = 513
                self.r_id()
                self.state = 514
                self.match(tsqlParser.COLON)
                self.state = 516
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 515
                    self.match(tsqlParser.SEMI)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def if_block(self):
            return self.getTypedRuleContext(tsqlParser.If_blockContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_if_statement




    def if_statement(self):

        localctx = tsqlParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_if_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.match(tsqlParser.IF)
            self.state = 521
            self.search_condition(0)
            self.state = 522
            self.if_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.if_expr = None # Sql_clauseContext
            self.else_expr = None # Sql_clauseContext
            self.if_block_expr = None # Block_statementContext
            self.else_block_expr = None # Block_statementContext

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,i)


        def ELSE(self):
            return self.getToken(tsqlParser.ELSE, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def block_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Block_statementContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Block_statementContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_if_block




    def if_block(self):

        localctx = tsqlParser.If_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_if_block)
        try:
            self.state = 540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 524
                localctx.if_expr = self.sql_clause()
                self.state = 527
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 525
                    self.match(tsqlParser.ELSE)
                    self.state = 526
                    localctx.else_expr = self.sql_clause()


                self.state = 530
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 529
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 532
                localctx.if_block_expr = self.block_statement()
                self.state = 535
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
                if la_ == 1:
                    self.state = 533
                    self.match(tsqlParser.ELSE)
                    self.state = 534
                    localctx.else_block_expr = self.block_statement()


                self.state = 538
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                if la_ == 1:
                    self.state = 537
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(tsqlParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_return_statement




    def return_statement(self):

        localctx = tsqlParser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_return_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.match(tsqlParser.RETURN)
            self.state = 544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 543
                self.expression(0)


            self.state = 547
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 546
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throw_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.error_number = None # Token
            self.message = None # Token
            self.state = None # Token

        def THROW(self):
            return self.getToken(tsqlParser.THROW, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LOCAL_ID)
            else:
                return self.getToken(tsqlParser.LOCAL_ID, i)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_throw_statement




    def throw_statement(self):

        localctx = tsqlParser.Throw_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_throw_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self.match(tsqlParser.THROW)
            self.state = 555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==448 or _la==449:
                self.state = 550
                localctx.error_number = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==448 or _la==449):
                    localctx.error_number = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 551
                self.match(tsqlParser.COMMA)
                self.state = 552
                localctx.message = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==448 or _la==451):
                    localctx.message = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 553
                self.match(tsqlParser.COMMA)
                self.state = 554
                localctx.state = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==448 or _la==449):
                    localctx.state = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 557
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_catch_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.try_clauses = None # Sql_clausesContext
            self.catch_clauses = None # Sql_clausesContext

        def BEGIN(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.BEGIN)
            else:
                return self.getToken(tsqlParser.BEGIN, i)

        def TRY(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.TRY)
            else:
                return self.getToken(tsqlParser.TRY, i)

        def END(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.END)
            else:
                return self.getToken(tsqlParser.END, i)

        def CATCH(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.CATCH)
            else:
                return self.getToken(tsqlParser.CATCH, i)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.SEMI)
            else:
                return self.getToken(tsqlParser.SEMI, i)

        def sql_clauses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clausesContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_try_catch_statement




    def try_catch_statement(self):

        localctx = tsqlParser.Try_catch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_try_catch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            self.match(tsqlParser.BEGIN)
            self.state = 561
            self.match(tsqlParser.TRY)
            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==475:
                self.state = 562
                self.match(tsqlParser.SEMI)


            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & -9150540300454718456) != 0 or (((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 4645436661968937) != 0 or (((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & -7890306546597212143) != 0 or (((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & 7494145550770540563) != 0 or (((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 5188142120044433225) != 0 or (((_la - 332)) & ~0x3f) == 0 and ((1 << (_la - 332)) & 8067480458436254437) != 0 or (((_la - 397)) & ~0x3f) == 0 and ((1 << (_la - 397)) & 10731198337787881) != 0 or _la==472:
                self.state = 565
                localctx.try_clauses = self.sql_clauses()


            self.state = 568
            self.match(tsqlParser.END)
            self.state = 569
            self.match(tsqlParser.TRY)
            self.state = 571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==475:
                self.state = 570
                self.match(tsqlParser.SEMI)


            self.state = 573
            self.match(tsqlParser.BEGIN)
            self.state = 574
            self.match(tsqlParser.CATCH)
            self.state = 576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==475:
                self.state = 575
                self.match(tsqlParser.SEMI)


            self.state = 579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & -9150540300454718456) != 0 or (((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 4645436661968937) != 0 or (((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & -7890306546597212143) != 0 or (((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & 7494145550770540563) != 0 or (((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 5188142120044433225) != 0 or (((_la - 332)) & ~0x3f) == 0 and ((1 << (_la - 332)) & 8067480458436254437) != 0 or (((_la - 397)) & ~0x3f) == 0 and ((1 << (_la - 397)) & 10731198337787881) != 0 or _la==472:
                self.state = 578
                localctx.catch_clauses = self.sql_clauses()


            self.state = 581
            self.match(tsqlParser.END)
            self.state = 582
            self.match(tsqlParser.CATCH)
            self.state = 584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 583
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Waitfor_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAITFOR(self):
            return self.getToken(tsqlParser.WAITFOR, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def DELAY(self):
            return self.getToken(tsqlParser.DELAY, 0)

        def TIME(self):
            return self.getToken(tsqlParser.TIME, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_waitfor_statement




    def waitfor_statement(self):

        localctx = tsqlParser.Waitfor_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_waitfor_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.match(tsqlParser.WAITFOR)
            self.state = 587
            _la = self._input.LA(1)
            if not(_la==261 or _la==420):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 588
            self.expression(0)
            self.state = 590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 589
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(tsqlParser.WHILE, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def sql_clause(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,0)


        def BREAK(self):
            return self.getToken(tsqlParser.BREAK, 0)

        def CONTINUE(self):
            return self.getToken(tsqlParser.CONTINUE, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_while_statement




    def while_statement(self):

        localctx = tsqlParser.While_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_while_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(tsqlParser.WHILE)
            self.state = 593
            self.search_condition(0)
            self.state = 603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 594
                self.sql_clause()
                pass

            elif la_ == 2:
                self.state = 595
                self.match(tsqlParser.BREAK)
                self.state = 597
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                if la_ == 1:
                    self.state = 596
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                self.state = 599
                self.match(tsqlParser.CONTINUE)
                self.state = 601
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 600
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Print_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(tsqlParser.PRINT, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_print_statement




    def print_statement(self):

        localctx = tsqlParser.Print_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_print_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(tsqlParser.PRINT)
            self.state = 606
            self.expression(0)
            self.state = 608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 607
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raiseerror_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.msg = None # Token
            self.severity = None # Constant_LOCAL_IDContext
            self.state = None # Constant_LOCAL_IDContext

        def RAISERROR(self):
            return self.getToken(tsqlParser.RAISERROR, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def constant_LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Constant_LOCAL_IDContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Constant_LOCAL_IDContext,i)


        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_raiseerror_statement




    def raiseerror_statement(self):

        localctx = tsqlParser.Raiseerror_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_raiseerror_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self.match(tsqlParser.RAISERROR)
            self.state = 611
            self.match(tsqlParser.LR_BRACKET)
            self.state = 612
            localctx.msg = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & 11) != 0):
                localctx.msg = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 613
            self.match(tsqlParser.COMMA)
            self.state = 614
            localctx.severity = self.constant_LOCAL_ID()
            self.state = 615
            self.match(tsqlParser.COMMA)
            self.state = 616
            localctx.state = self.constant_LOCAL_ID()
            self.state = 621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==474:
                self.state = 617
                self.match(tsqlParser.COMMA)
                self.state = 618
                self.constant_LOCAL_ID()
                self.state = 623
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 624
            self.match(tsqlParser.RR_BRACKET)
            self.state = 626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 625
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Another_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cursor_statement(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_statementContext,0)


        def execute_statement(self):
            return self.getTypedRuleContext(tsqlParser.Execute_statementContext,0)


        def security_statement(self):
            return self.getTypedRuleContext(tsqlParser.Security_statementContext,0)


        def set_statement(self):
            return self.getTypedRuleContext(tsqlParser.Set_statementContext,0)


        def transaction_statement(self):
            return self.getTypedRuleContext(tsqlParser.Transaction_statementContext,0)


        def use_statement(self):
            return self.getTypedRuleContext(tsqlParser.Use_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_another_statement




    def another_statement(self):

        localctx = tsqlParser.Another_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_another_statement)
        try:
            self.state = 634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 628
                self.cursor_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 629
                self.execute_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 630
                self.security_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 631
                self.set_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 632
                self.transaction_statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 633
                self.use_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(tsqlParser.DELETE, 0)

        def delete_statement_from(self):
            return self.getTypedRuleContext(tsqlParser.Delete_statement_fromContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def top_clause_dm(self):
            return self.getTypedRuleContext(tsqlParser.Top_clause_dmContext,0)


        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.FROM)
            else:
                return self.getToken(tsqlParser.FROM, i)

        def insert_with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.Insert_with_table_hintsContext,0)


        def output_clause(self):
            return self.getTypedRuleContext(tsqlParser.Output_clauseContext,0)


        def table_sources(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourcesContext,0)


        def where_clause_dml(self):
            return self.getTypedRuleContext(tsqlParser.Where_clause_dmlContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_delete_statement




    def delete_statement(self):

        localctx = tsqlParser.Delete_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_delete_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==203:
                self.state = 636
                self.with_expression()


            self.state = 639
            self.match(tsqlParser.DELETE)
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==179:
                self.state = 640
                self.top_clause_dm()


            self.state = 644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 643
                self.match(tsqlParser.FROM)


            self.state = 646
            self.delete_statement_from()
            self.state = 648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 647
                self.insert_with_table_hints()


            self.state = 651
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 650
                self.output_clause()


            self.state = 655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 653
                self.match(tsqlParser.FROM)
                self.state = 654
                self.table_sources()


            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==201:
                self.state = 657
                self.where_clause_dml()


            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 660
                self.for_clause()


            self.state = 664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 663
                self.option_clause()


            self.state = 667
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 666
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_statement_fromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table_var = None # Token

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)


        def ddl_object(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_function_limitedContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_delete_statement_from




    def delete_statement_from(self):

        localctx = tsqlParser.Delete_statement_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_delete_statement_from)
        try:
            self.state = 676
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 669
                self.r_id()
                self.state = 671
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 670
                    self.with_table_hints()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 673
                self.ddl_object()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 674
                self.rowset_function_limited()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 675
                localctx.table_var = self.match(tsqlParser.LOCAL_ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(tsqlParser.INSERT, 0)

        def insert_statement_value(self):
            return self.getTypedRuleContext(tsqlParser.Insert_statement_valueContext,0)


        def ddl_object(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_function_limitedContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def top_clause_dm(self):
            return self.getTypedRuleContext(tsqlParser.Top_clause_dmContext,0)


        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def insert_with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.Insert_with_table_hintsContext,0)


        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def derived_table(self):
            return self.getTypedRuleContext(tsqlParser.Derived_tableContext,0)


        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def output_clause(self):
            return self.getTypedRuleContext(tsqlParser.Output_clauseContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_insert_statement




    def insert_statement(self):

        localctx = tsqlParser.Insert_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_insert_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==203:
                self.state = 678
                self.with_expression()


            self.state = 681
            self.match(tsqlParser.INSERT)
            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==179:
                self.state = 682
                self.top_clause_dm()


            self.state = 686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 685
                self.match(tsqlParser.INTO)


            self.state = 690
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 448, 450]:
                self.state = 688
                self.ddl_object()
                pass
            elif token in [121, 122]:
                self.state = 689
                self.rowset_function_limited()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 692
                self.insert_with_table_hints()


            self.state = 697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 695
                self.match(tsqlParser.FROM)
                self.state = 696
                self.derived_table()


            self.state = 703
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 699
                self.match(tsqlParser.LR_BRACKET)
                self.state = 700
                self.column_name_list()
                self.state = 701
                self.match(tsqlParser.RR_BRACKET)


            self.state = 706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==353:
                self.state = 705
                self.output_clause()


            self.state = 708
            self.insert_statement_value()
            self.state = 710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 709
                self.for_clause()


            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 712
                self.option_clause()


            self.state = 716
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 715
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_statement_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_value_constructor(self):
            return self.getTypedRuleContext(tsqlParser.Table_value_constructorContext,0)


        def derived_table(self):
            return self.getTypedRuleContext(tsqlParser.Derived_tableContext,0)


        def execute_statement(self):
            return self.getTypedRuleContext(tsqlParser.Execute_statementContext,0)


        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def VALUES(self):
            return self.getToken(tsqlParser.VALUES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_insert_statement_value




    def insert_statement_value(self):

        localctx = tsqlParser.Insert_statement_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_insert_statement_value)
        try:
            self.state = 723
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [195]:
                self.enterOuterAlt(localctx, 1)
                self.state = 718
                self.table_value_constructor()
                pass
            elif token in [160, 203, 472]:
                self.enterOuterAlt(localctx, 2)
                self.state = 719
                self.derived_table()
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 3)
                self.state = 720
                self.execute_statement()
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 4)
                self.state = 721
                self.match(tsqlParser.DEFAULT)
                self.state = 722
                self.match(tsqlParser.VALUES)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_expression(self):
            return self.getTypedRuleContext(tsqlParser.Query_expressionContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(tsqlParser.Order_by_clauseContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_select_statement




    def select_statement(self):

        localctx = tsqlParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==203:
                self.state = 725
                self.with_expression()


            self.state = 728
            self.query_expression(0)
            self.state = 730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 729
                self.order_by_clause()


            self.state = 733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 732
                self.for_clause()


            self.state = 736
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 735
                self.option_clause()


            self.state = 739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 738
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(tsqlParser.UPDATE, 0)

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def update_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Update_elemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Update_elemContext,i)


        def ddl_object(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_function_limitedContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def top_clause_dm(self):
            return self.getTypedRuleContext(tsqlParser.Top_clause_dmContext,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def output_clause(self):
            return self.getTypedRuleContext(tsqlParser.Output_clauseContext,0)


        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def table_sources(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourcesContext,0)


        def where_clause_dml(self):
            return self.getTypedRuleContext(tsqlParser.Where_clause_dmlContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_update_statement




    def update_statement(self):

        localctx = tsqlParser.Update_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_update_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==203:
                self.state = 741
                self.with_expression()


            self.state = 744
            self.match(tsqlParser.UPDATE)
            self.state = 746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==179:
                self.state = 745
                self.top_clause_dm()


            self.state = 750
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 448, 450]:
                self.state = 748
                self.ddl_object()
                pass
            elif token in [121, 122]:
                self.state = 749
                self.rowset_function_limited()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==203 or _la==472:
                self.state = 752
                self.with_table_hints()


            self.state = 755
            self.match(tsqlParser.SET)
            self.state = 756
            self.update_elem()
            self.state = 761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==474:
                self.state = 757
                self.match(tsqlParser.COMMA)
                self.state = 758
                self.update_elem()
                self.state = 763
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 764
                self.output_clause()


            self.state = 769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 767
                self.match(tsqlParser.FROM)
                self.state = 768
                self.table_sources()


            self.state = 772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==201:
                self.state = 771
                self.where_clause_dml()


            self.state = 775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 774
                self.for_clause()


            self.state = 778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 777
                self.option_clause()


            self.state = 781
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 780
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clause_dmlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cursor_var = None # Token

        def WHERE(self):
            return self.getToken(tsqlParser.WHERE, 0)

        def search_condition_list(self):
            return self.getTypedRuleContext(tsqlParser.Search_condition_listContext,0)


        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_where_clause_dml




    def where_clause_dml(self):

        localctx = tsqlParser.Where_clause_dmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_where_clause_dml)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.match(tsqlParser.WHERE)
            self.state = 794
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 25, 35, 41, 42, 48, 64, 66, 71, 73, 84, 87, 100, 104, 105, 108, 112, 113, 114, 115, 129, 152, 164, 168, 173, 184, 185, 186, 196, 206, 214, 217, 224, 225, 227, 229, 230, 231, 232, 235, 236, 237, 239, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 255, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 330, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 398, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 448, 449, 450, 451, 452, 453, 454, 471, 472, 480, 481, 482]:
                self.state = 784
                self.search_condition_list()
                pass
            elif token in [38]:
                self.state = 785
                self.match(tsqlParser.CURRENT)
                self.state = 786
                self.match(tsqlParser.OF)
                self.state = 792
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 788
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                    if la_ == 1:
                        self.state = 787
                        self.match(tsqlParser.GLOBAL)


                    self.state = 790
                    self.cursor_name()
                    pass

                elif la_ == 2:
                    self.state = 791
                    localctx.cursor_var = self.match(tsqlParser.LOCAL_ID)
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def output_dml_list_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Output_dml_list_elemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Output_dml_list_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def ddl_object(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_objectContext,0)


        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_output_clause




    def output_clause(self):

        localctx = tsqlParser.Output_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_output_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(tsqlParser.OUTPUT)
            self.state = 797
            self.output_dml_list_elem()
            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==474:
                self.state = 798
                self.match(tsqlParser.COMMA)
                self.state = 799
                self.output_dml_list_elem()
                self.state = 804
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 805
                self.match(tsqlParser.INTO)
                self.state = 806
                self.ddl_object()
                self.state = 811
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 807
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 808
                    self.column_name_list()
                    self.state = 809
                    self.match(tsqlParser.RR_BRACKET)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_dml_list_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def output_column_name(self):
            return self.getTypedRuleContext(tsqlParser.Output_column_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(tsqlParser.Column_aliasContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_output_dml_list_elem




    def output_dml_list_elem(self):

        localctx = tsqlParser.Output_dml_list_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_output_dml_list_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 815
                self.output_column_name()
                pass

            elif la_ == 2:
                self.state = 816
                self.expression(0)
                pass


            self.state = 823
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6:
                    self.state = 819
                    self.match(tsqlParser.AS)


                self.state = 822
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(tsqlParser.DOT, 0)

        def DELETED(self):
            return self.getToken(tsqlParser.DELETED, 0)

        def INSERTED(self):
            return self.getToken(tsqlParser.INSERTED, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_table_nameContext,0)


        def STAR(self):
            return self.getToken(tsqlParser.STAR, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def DOLLAR_ACTION(self):
            return self.getToken(tsqlParser.DOLLAR_ACTION, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_output_column_name




    def output_column_name(self):

        localctx = tsqlParser.Output_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_output_column_name)
        try:
            self.state = 836
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 450]:
                self.enterOuterAlt(localctx, 1)
                self.state = 828
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 825
                    self.match(tsqlParser.DELETED)
                    pass

                elif la_ == 2:
                    self.state = 826
                    self.match(tsqlParser.INSERTED)
                    pass

                elif la_ == 3:
                    self.state = 827
                    self.full_table_name()
                    pass


                self.state = 830
                self.match(tsqlParser.DOT)
                self.state = 833
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [477]:
                    self.state = 831
                    self.match(tsqlParser.STAR)
                    pass
                elif token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 450]:
                    self.state = 832
                    self.r_id()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [442]:
                self.enterOuterAlt(localctx, 2)
                self.state = 835
                self.match(tsqlParser.DOLLAR_ACTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_databaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext
            self.collation_name = None # R_idContext

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def CONTAINMENT(self):
            return self.getToken(tsqlParser.CONTAINMENT, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ON)
            else:
                return self.getToken(tsqlParser.ON, i)

        def database_file_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Database_file_specContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Database_file_specContext,i)


        def LOG(self):
            return self.getToken(tsqlParser.LOG, 0)

        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def create_database_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Create_database_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Create_database_optionContext,i)


        def NONE(self):
            return self.getToken(tsqlParser.NONE, 0)

        def PARTIAL(self):
            return self.getToken(tsqlParser.PARTIAL, 0)

        def PRIMARY(self):
            return self.getToken(tsqlParser.PRIMARY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_database




    def create_database(self):

        localctx = tsqlParser.Create_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_create_database)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.match(tsqlParser.CREATE)
            self.state = 839
            self.match(tsqlParser.DATABASE)

            self.state = 840
            localctx.database = self.r_id()
            self.state = 844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 841
                self.match(tsqlParser.CONTAINMENT)
                self.state = 842
                self.match(tsqlParser.EQUAL)
                self.state = 843
                _la = self._input.LA(1)
                if not(_la==111 or _la==130):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 846
                self.match(tsqlParser.ON)
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 847
                    self.match(tsqlParser.PRIMARY)


                self.state = 850
                self.database_file_spec()
                self.state = 855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==474:
                    self.state = 851
                    self.match(tsqlParser.COMMA)
                    self.state = 852
                    self.database_file_spec()
                    self.state = 857
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 860
                self.match(tsqlParser.LOG)
                self.state = 861
                self.match(tsqlParser.ON)
                self.state = 862
                self.database_file_spec()
                self.state = 867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==474:
                    self.state = 863
                    self.match(tsqlParser.COMMA)
                    self.state = 864
                    self.database_file_spec()
                    self.state = 869
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 872
                self.match(tsqlParser.COLLATE)
                self.state = 873
                localctx.collation_name = self.r_id()


            self.state = 885
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 876
                self.match(tsqlParser.WITH)
                self.state = 877
                self.create_database_option()
                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==474:
                    self.state = 878
                    self.match(tsqlParser.COMMA)
                    self.state = 879
                    self.create_database_option()
                    self.state = 884
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.where = None # Search_conditionContext

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(tsqlParser.INDEX, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ON)
            else:
                return self.getToken(tsqlParser.ON, i)

        def table_name_with_hint(self):
            return self.getTypedRuleContext(tsqlParser.Table_name_with_hintContext,0)


        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LR_BRACKET)
            else:
                return self.getToken(tsqlParser.LR_BRACKET, i)

        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_name_listContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.RR_BRACKET)
            else:
                return self.getToken(tsqlParser.RR_BRACKET, i)

        def UNIQUE(self):
            return self.getToken(tsqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(tsqlParser.ClusteredContext,0)


        def INCLUDE(self):
            return self.getToken(tsqlParser.INCLUDE, 0)

        def WHERE(self):
            return self.getToken(tsqlParser.WHERE, 0)

        def index_options(self):
            return self.getTypedRuleContext(tsqlParser.Index_optionsContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def ASC(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ASC)
            else:
                return self.getToken(tsqlParser.ASC, i)

        def DESC(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DESC)
            else:
                return self.getToken(tsqlParser.DESC, i)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_create_index




    def create_index(self):

        localctx = tsqlParser.Create_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_create_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887
            self.match(tsqlParser.CREATE)
            self.state = 889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==189:
                self.state = 888
                self.match(tsqlParser.UNIQUE)


            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24 or _la==110:
                self.state = 891
                self.clustered()


            self.state = 894
            self.match(tsqlParser.INDEX)
            self.state = 895
            self.r_id()
            self.state = 896
            self.match(tsqlParser.ON)
            self.state = 897
            self.table_name_with_hint()
            self.state = 898
            self.match(tsqlParser.LR_BRACKET)
            self.state = 899
            self.column_name_list()
            self.state = 901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==51:
                self.state = 900
                _la = self._input.LA(1)
                if not(_la==7 or _la==51):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 903
            self.match(tsqlParser.RR_BRACKET)
            self.state = 912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 904
                self.match(tsqlParser.INCLUDE)
                self.state = 905
                self.match(tsqlParser.LR_BRACKET)
                self.state = 906
                self.column_name_list()
                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7 or _la==51:
                    self.state = 907
                    _la = self._input.LA(1)
                    if not(_la==7 or _la==51):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 910
                self.match(tsqlParser.RR_BRACKET)


            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==201:
                self.state = 914
                self.match(tsqlParser.WHERE)
                self.state = 915
                localctx.where = self.search_condition(0)


            self.state = 919
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 918
                self.index_options()


            self.state = 923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 921
                self.match(tsqlParser.ON)
                self.state = 922
                self.r_id()


            self.state = 926
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.state = 925
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_statisticsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def STATISTICS(self):
            return self.getToken(tsqlParser.STATISTICS, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def table_name_with_hint(self):
            return self.getTypedRuleContext(tsqlParser.Table_name_with_hintContext,0)


        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def FULLSCAN(self):
            return self.getToken(tsqlParser.FULLSCAN, 0)

        def SAMPLE(self):
            return self.getToken(tsqlParser.SAMPLE, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def STATS_STREAM(self):
            return self.getToken(tsqlParser.STATS_STREAM, 0)

        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def NORECOMPUTE(self):
            return self.getToken(tsqlParser.NORECOMPUTE, 0)

        def INCREMENTAL(self):
            return self.getToken(tsqlParser.INCREMENTAL, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_create_statistics




    def create_statistics(self):

        localctx = tsqlParser.Create_statisticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_create_statistics)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            self.match(tsqlParser.CREATE)
            self.state = 929
            self.match(tsqlParser.STATISTICS)
            self.state = 930
            self.r_id()
            self.state = 931
            self.match(tsqlParser.ON)
            self.state = 932
            self.table_name_with_hint()
            self.state = 933
            self.match(tsqlParser.LR_BRACKET)
            self.state = 934
            self.column_name_list()
            self.state = 935
            self.match(tsqlParser.RR_BRACKET)
            self.state = 954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 936
                self.match(tsqlParser.WITH)
                self.state = 942
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [288]:
                    self.state = 937
                    self.match(tsqlParser.FULLSCAN)
                    pass
                elif token in [388]:
                    self.state = 938
                    self.match(tsqlParser.SAMPLE)
                    self.state = 939
                    self.match(tsqlParser.DECIMAL)
                    self.state = 940
                    _la = self._input.LA(1)
                    if not(_la==131 or _la==386):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [405]:
                    self.state = 941
                    self.match(tsqlParser.STATS_STREAM)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 946
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 944
                    self.match(tsqlParser.COMMA)
                    self.state = 945
                    self.match(tsqlParser.NORECOMPUTE)


                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 948
                    self.match(tsqlParser.COMMA)
                    self.state = 949
                    self.match(tsqlParser.INCREMENTAL)
                    self.state = 950
                    self.match(tsqlParser.EQUAL)
                    self.state = 951
                    self.on_off()




            self.state = 957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 956
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_table_nameContext,0)


        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def column_def_table_constraints(self):
            return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintsContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(tsqlParser.COMMA, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DEFAULT)
            else:
                return self.getToken(tsqlParser.DEFAULT, i)

        def TEXTIMAGE_ON(self):
            return self.getToken(tsqlParser.TEXTIMAGE_ON, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_table




    def create_table(self):

        localctx = tsqlParser.Create_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_create_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            self.match(tsqlParser.CREATE)
            self.state = 960
            self.match(tsqlParser.TABLE)
            self.state = 961
            self.full_table_name()
            self.state = 962
            self.match(tsqlParser.LR_BRACKET)
            self.state = 963
            self.column_def_table_constraints()
            self.state = 965
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 964
                self.match(tsqlParser.COMMA)


            self.state = 967
            self.match(tsqlParser.RR_BRACKET)
            self.state = 971
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 968
                self.match(tsqlParser.ON)
                self.state = 969
                self.r_id()

            elif la_ == 2:
                self.state = 970
                self.match(tsqlParser.DEFAULT)


            self.state = 976
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 973
                self.match(tsqlParser.TEXTIMAGE_ON)
                self.state = 974
                self.r_id()

            elif la_ == 2:
                self.state = 975
                self.match(tsqlParser.DEFAULT)


            self.state = 979
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 978
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def SCHEMA(self):
            return self.getToken(tsqlParser.SCHEMA, 0)

        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_schema




    def create_schema(self):

        localctx = tsqlParser.Create_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_create_schema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.match(tsqlParser.CREATE)
            self.state = 982
            self.match(tsqlParser.SCHEMA)
            self.state = 983
            self.simple_name()
            self.state = 985
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 984
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_synonymContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def SYNONYM(self):
            return self.getToken(tsqlParser.SYNONYM, 0)

        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_table_nameContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_synonym




    def create_synonym(self):

        localctx = tsqlParser.Create_synonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_create_synonym)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 987
            self.match(tsqlParser.CREATE)
            self.state = 988
            self.match(tsqlParser.SYNONYM)
            self.state = 989
            self.simple_name()
            self.state = 990
            self.match(tsqlParser.FOR)
            self.state = 991
            self.full_table_name()
            self.state = 993
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 992
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_viewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(tsqlParser.VIEW, 0)

        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.WITH)
            else:
                return self.getToken(tsqlParser.WITH, i)

        def view_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.View_attributeContext)
            else:
                return self.getTypedRuleContext(tsqlParser.View_attributeContext,i)


        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(tsqlParser.OPTION, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_view




    def create_view(self):

        localctx = tsqlParser.Create_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_create_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.match(tsqlParser.CREATE)
            self.state = 996
            self.match(tsqlParser.VIEW)
            self.state = 997
            self.simple_name()
            self.state = 1002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==472:
                self.state = 998
                self.match(tsqlParser.LR_BRACKET)
                self.state = 999
                self.column_name_list()
                self.state = 1000
                self.match(tsqlParser.RR_BRACKET)


            self.state = 1013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==203:
                self.state = 1004
                self.match(tsqlParser.WITH)
                self.state = 1005
                self.view_attribute()
                self.state = 1010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==474:
                    self.state = 1006
                    self.match(tsqlParser.COMMA)
                    self.state = 1007
                    self.view_attribute()
                    self.state = 1012
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1015
            self.match(tsqlParser.AS)
            self.state = 1016
            self.select_statement()
            self.state = 1020
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 1017
                self.match(tsqlParser.WITH)
                self.state = 1018
                self.match(tsqlParser.CHECK)
                self.state = 1019
                self.match(tsqlParser.OPTION)


            self.state = 1023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1022
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class View_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def SCHEMABINDING(self):
            return self.getToken(tsqlParser.SCHEMABINDING, 0)

        def VIEW_METADATA(self):
            return self.getToken(tsqlParser.VIEW_METADATA, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_view_attribute




    def view_attribute(self):

        localctx = tsqlParser.View_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_view_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            _la = self._input.LA(1)
            if not(_la==272 or _la==389 or _la==437):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint = None # R_idContext
            self.fk = None # Column_name_listContext
            self.pk = None # Column_name_listContext

        def ALTER(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ALTER)
            else:
                return self.getToken(tsqlParser.ALTER, i)

        def TABLE(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.TABLE)
            else:
                return self.getToken(tsqlParser.TABLE, i)

        def full_table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Full_table_nameContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Full_table_nameContext,i)


        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LR_BRACKET)
            else:
                return self.getToken(tsqlParser.LR_BRACKET, i)

        def LOCK_ESCALATION(self):
            return self.getToken(tsqlParser.LOCK_ESCALATION, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.RR_BRACKET)
            else:
                return self.getToken(tsqlParser.RR_BRACKET, i)

        def ADD(self):
            return self.getToken(tsqlParser.ADD, 0)

        def column_def_table_constraint(self):
            return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintContext,0)


        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def FOREIGN(self):
            return self.getToken(tsqlParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(tsqlParser.KEY, 0)

        def REFERENCES(self):
            return self.getToken(tsqlParser.REFERENCES, 0)

        def COLUMN(self):
            return self.getToken(tsqlParser.COLUMN, 0)

        def column_def_table_constraints(self):
            return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintsContext,0)


        def AUTO(self):
            return self.getToken(tsqlParser.AUTO, 0)

        def DISABLE(self):
            return self.getToken(tsqlParser.DISABLE, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_name_listContext,i)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_alter_table




    def alter_table(self):

        localctx = tsqlParser.Alter_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_alter_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027
            self.match(tsqlParser.ALTER)
            self.state = 1028
            self.match(tsqlParser.TABLE)
            self.state = 1029
            self.full_table_name()
            self.state = 1063
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [165]:
                self.state = 1030
                self.match(tsqlParser.SET)
                self.state = 1031
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1032
                self.match(tsqlParser.LOCK_ESCALATION)
                self.state = 1033
                self.match(tsqlParser.EQUAL)
                self.state = 1034
                _la = self._input.LA(1)
                if not(_la==174 or _la==217 or _la==266):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1035
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [1]:
                self.state = 1036
                self.match(tsqlParser.ADD)
                self.state = 1037
                self.column_def_table_constraint()
                pass
            elif token in [56]:
                self.state = 1038
                self.match(tsqlParser.DROP)
                self.state = 1039
                self.match(tsqlParser.CONSTRAINT)
                self.state = 1040
                localctx.constraint = self.r_id()
                pass
            elif token in [203]:
                self.state = 1041
                self.match(tsqlParser.WITH)
                self.state = 1042
                self.match(tsqlParser.CHECK)
                self.state = 1043
                self.match(tsqlParser.ADD)
                self.state = 1044
                self.match(tsqlParser.CONSTRAINT)
                self.state = 1045
                localctx.constraint = self.r_id()
                self.state = 1046
                self.match(tsqlParser.FOREIGN)
                self.state = 1047
                self.match(tsqlParser.KEY)
                self.state = 1048
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1049
                localctx.fk = self.column_name_list()
                self.state = 1050
                self.match(tsqlParser.RR_BRACKET)
                self.state = 1051
                self.match(tsqlParser.REFERENCES)
                self.state = 1052
                self.full_table_name()
                self.state = 1053
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1054
                localctx.pk = self.column_name_list()
                self.state = 1055
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [21]:
                self.state = 1057
                self.match(tsqlParser.CHECK)
                self.state = 1058
                self.match(tsqlParser.CONSTRAINT)
                self.state = 1059
                localctx.constraint = self.r_id()
                pass
            elif token in [3]:
                self.state = 1060
                self.match(tsqlParser.ALTER)
                self.state = 1061
                self.match(tsqlParser.COLUMN)
                self.state = 1062
                self.column_def_table_constraints()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1066
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 1065
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_databaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext
            self.new_name = None # R_idContext
            self.collation = None # R_idContext

        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def MODIFY(self):
            return self.getToken(tsqlParser.MODIFY, 0)

        def NAME(self):
            return self.getToken(tsqlParser.NAME, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def database_optionspec(self):
            return self.getTypedRuleContext(tsqlParser.Database_optionspecContext,0)


        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def termination(self):
            return self.getTypedRuleContext(tsqlParser.TerminationContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_alter_database




    def alter_database(self):

        localctx = tsqlParser.Alter_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_alter_database)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            self.match(tsqlParser.ALTER)
            self.state = 1069
            self.match(tsqlParser.DATABASE)
            self.state = 1072
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 450]:
                self.state = 1070
                localctx.database = self.r_id()
                pass
            elif token in [38]:
                self.state = 1071
                self.match(tsqlParser.CURRENT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1086
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [332]:
                self.state = 1074
                self.match(tsqlParser.MODIFY)
                self.state = 1075
                self.match(tsqlParser.NAME)
                self.state = 1076
                self.match(tsqlParser.EQUAL)
                self.state = 1077
                localctx.new_name = self.r_id()
                pass
            elif token in [26]:
                self.state = 1078
                self.match(tsqlParser.COLLATE)
                self.state = 1079
                localctx.collation = self.r_id()
                pass
            elif token in [165]:
                self.state = 1080
                self.match(tsqlParser.SET)
                self.state = 1081
                self.database_optionspec()
                self.state = 1084
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 1082
                    self.match(tsqlParser.WITH)
                    self.state = 1083
                    self.termination()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1089
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.state = 1088
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_optionspecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def auto_option(self):
            return self.getTypedRuleContext(tsqlParser.Auto_optionContext,0)


        def change_tracking_option(self):
            return self.getTypedRuleContext(tsqlParser.Change_tracking_optionContext,0)


        def containment_option(self):
            return self.getTypedRuleContext(tsqlParser.Containment_optionContext,0)


        def cursor_option(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_optionContext,0)


        def date_correlation_optimization_option(self):
            return self.getTypedRuleContext(tsqlParser.Date_correlation_optimization_optionContext,0)


        def db_encryption_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_encryption_optionContext,0)


        def db_state_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_state_optionContext,0)


        def db_update_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_update_optionContext,0)


        def db_user_access_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_user_access_optionContext,0)


        def delayed_durability_option(self):
            return self.getTypedRuleContext(tsqlParser.Delayed_durability_optionContext,0)


        def external_access_option(self):
            return self.getTypedRuleContext(tsqlParser.External_access_optionContext,0)


        def FILESTREAM(self):
            return self.getToken(tsqlParser.FILESTREAM, 0)

        def database_filestream_option(self):
            return self.getTypedRuleContext(tsqlParser.Database_filestream_optionContext,0)


        def hadr_options(self):
            return self.getTypedRuleContext(tsqlParser.Hadr_optionsContext,0)


        def mixed_page_allocation_option(self):
            return self.getTypedRuleContext(tsqlParser.Mixed_page_allocation_optionContext,0)


        def parameterization_option(self):
            return self.getTypedRuleContext(tsqlParser.Parameterization_optionContext,0)


        def recovery_option(self):
            return self.getTypedRuleContext(tsqlParser.Recovery_optionContext,0)


        def service_broker_option(self):
            return self.getTypedRuleContext(tsqlParser.Service_broker_optionContext,0)


        def snapshot_option(self):
            return self.getTypedRuleContext(tsqlParser.Snapshot_optionContext,0)


        def sql_option(self):
            return self.getTypedRuleContext(tsqlParser.Sql_optionContext,0)


        def target_recovery_time_option(self):
            return self.getTypedRuleContext(tsqlParser.Target_recovery_time_optionContext,0)


        def termination(self):
            return self.getTypedRuleContext(tsqlParser.TerminationContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_database_optionspec




    def database_optionspec(self):

        localctx = tsqlParser.Database_optionspecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_database_optionspec)
        try:
            self.state = 1113
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1091
                self.auto_option()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1092
                self.change_tracking_option()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1093
                self.containment_option()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1094
                self.cursor_option()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1095
                self.date_correlation_optimization_option()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1096
                self.db_encryption_option()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1097
                self.db_state_option()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1098
                self.db_update_option()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1099
                self.db_user_access_option()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1100
                self.delayed_durability_option()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1101
                self.external_access_option()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1102
                self.match(tsqlParser.FILESTREAM)
                self.state = 1103
                self.database_filestream_option()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1104
                self.hadr_options()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1105
                self.mixed_page_allocation_option()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1106
                self.parameterization_option()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1107
                self.recovery_option()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1108
                self.service_broker_option()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1109
                self.snapshot_option()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1110
                self.sql_option()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1111
                self.target_recovery_time_option()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1112
                self.termination()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Auto_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO_CLOSE(self):
            return self.getToken(tsqlParser.AUTO_CLOSE, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def AUTO_CREATE_STATISTICS(self):
            return self.getToken(tsqlParser.AUTO_CREATE_STATISTICS, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ON)
            else:
                return self.getToken(tsqlParser.ON, i)

        def INCREMENTAL(self):
            return self.getToken(tsqlParser.INCREMENTAL, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def AUTO_SHRINK(self):
            return self.getToken(tsqlParser.AUTO_SHRINK, 0)

        def AUTO_UPDATE_STATISTICS(self):
            return self.getToken(tsqlParser.AUTO_UPDATE_STATISTICS, 0)

        def AUTO_UPDATE_STATISTICS_ASYNC(self):
            return self.getToken(tsqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_auto_option




    def auto_option(self):

        localctx = tsqlParser.Auto_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_auto_option)
        self._la = 0 # Token type
        try:
            self.state = 1132
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [219]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1115
                self.match(tsqlParser.AUTO_CLOSE)
                self.state = 1116
                self.on_off()
                pass
            elif token in [220]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1117
                self.match(tsqlParser.AUTO_CREATE_STATISTICS)
                self.state = 1118
                self.match(tsqlParser.OFF)
                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1119
                self.match(tsqlParser.ON)
                self.state = 1124
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [301]:
                    self.state = 1120
                    self.match(tsqlParser.INCREMENTAL)
                    self.state = 1121
                    self.match(tsqlParser.EQUAL)
                    self.state = 1122
                    self.match(tsqlParser.ON)
                    pass
                elif token in [117]:
                    self.state = 1123
                    self.match(tsqlParser.OFF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [221]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1126
                self.match(tsqlParser.AUTO_SHRINK)
                self.state = 1127
                self.on_off()
                pass
            elif token in [222]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1128
                self.match(tsqlParser.AUTO_UPDATE_STATISTICS)
                self.state = 1129
                self.on_off()
                pass
            elif token in [223]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1130
                self.match(tsqlParser.AUTO_UPDATE_STATISTICS_ASYNC)
                self.state = 1131
                _la = self._input.LA(1)
                if not(_la==117 or _la==119):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Change_tracking_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE_TRACKING(self):
            return self.getToken(tsqlParser.CHANGE_TRACKING, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def change_tracking_option_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Change_tracking_option_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Change_tracking_option_listContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_change_tracking_option




    def change_tracking_option(self):

        localctx = tsqlParser.Change_tracking_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_change_tracking_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.match(tsqlParser.CHANGE_TRACKING)
            self.state = 1135
            self.match(tsqlParser.EQUAL)
            self.state = 1151
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.state = 1136
                self.match(tsqlParser.OFF)
                pass
            elif token in [119]:
                self.state = 1137
                self.match(tsqlParser.ON)
                self.state = 1148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==218 or _la==233:
                    self.state = 1138
                    self.change_tracking_option_list()
                    self.state = 1143
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==474:
                        self.state = 1139
                        self.match(tsqlParser.COMMA)
                        self.state = 1140
                        self.change_tracking_option_list()
                        self.state = 1145
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1150
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Change_tracking_option_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO_CLEANUP(self):
            return self.getToken(tsqlParser.AUTO_CLEANUP, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def CHANGE_RETENTION(self):
            return self.getToken(tsqlParser.CHANGE_RETENTION, 0)

        def DAYS(self):
            return self.getToken(tsqlParser.DAYS, 0)

        def HOURS(self):
            return self.getToken(tsqlParser.HOURS, 0)

        def MINUTES(self):
            return self.getToken(tsqlParser.MINUTES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_change_tracking_option_list




    def change_tracking_option_list(self):

        localctx = tsqlParser.Change_tracking_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_change_tracking_option_list)
        self._la = 0 # Token type
        try:
            self.state = 1159
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [218]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1153
                self.match(tsqlParser.AUTO_CLEANUP)
                self.state = 1154
                self.match(tsqlParser.EQUAL)
                self.state = 1155
                self.on_off()
                pass
            elif token in [233]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1156
                self.match(tsqlParser.CHANGE_RETENTION)
                self.state = 1157
                self.match(tsqlParser.EQUAL)
                self.state = 1158
                _la = self._input.LA(1)
                if not(_la==257 or _la==297 or _la==329):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Containment_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINMENT(self):
            return self.getToken(tsqlParser.CONTAINMENT, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def NONE(self):
            return self.getToken(tsqlParser.NONE, 0)

        def PARTIAL(self):
            return self.getToken(tsqlParser.PARTIAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_containment_option




    def containment_option(self):

        localctx = tsqlParser.Containment_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_containment_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self.match(tsqlParser.CONTAINMENT)
            self.state = 1162
            self.match(tsqlParser.EQUAL)
            self.state = 1163
            _la = self._input.LA(1)
            if not(_la==111 or _la==130):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURSOR_CLOSE_ON_COMMIT(self):
            return self.getToken(tsqlParser.CURSOR_CLOSE_ON_COMMIT, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def CURSOR_DEFAULT(self):
            return self.getToken(tsqlParser.CURSOR_DEFAULT, 0)

        def LOCAL(self):
            return self.getToken(tsqlParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_cursor_option




    def cursor_option(self):

        localctx = tsqlParser.Cursor_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_cursor_option)
        self._la = 0 # Token type
        try:
            self.state = 1169
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [247]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1165
                self.match(tsqlParser.CURSOR_CLOSE_ON_COMMIT)
                self.state = 1166
                self.on_off()
                pass
            elif token in [248]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1167
                self.match(tsqlParser.CURSOR_DEFAULT)
                self.state = 1168
                _la = self._input.LA(1)
                if not(_la==290 or _la==317):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_correlation_optimization_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_CORRELATION_OPTIMIZATION(self):
            return self.getToken(tsqlParser.DATE_CORRELATION_OPTIMIZATION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_date_correlation_optimization_option




    def date_correlation_optimization_option(self):

        localctx = tsqlParser.Date_correlation_optimization_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_date_correlation_optimization_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1171
            self.match(tsqlParser.DATE_CORRELATION_OPTIMIZATION)
            self.state = 1172
            self.on_off()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Db_encryption_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_db_encryption_option




    def db_encryption_option(self):

        localctx = tsqlParser.Db_encryption_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_db_encryption_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1174
            self.match(tsqlParser.ENCRYPTION)
            self.state = 1175
            self.on_off()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Db_state_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONLINE(self):
            return self.getToken(tsqlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(tsqlParser.OFFLINE, 0)

        def EMERGENCY(self):
            return self.getToken(tsqlParser.EMERGENCY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_db_state_option




    def db_state_option(self):

        localctx = tsqlParser.Db_state_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_db_state_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            _la = self._input.LA(1)
            if not(_la==270 or _la==346 or _la==348):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Db_update_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def READ_WRITE(self):
            return self.getToken(tsqlParser.READ_WRITE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_db_update_option




    def db_update_option(self):

        localctx = tsqlParser.Db_update_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_db_update_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1179
            _la = self._input.LA(1)
            if not(_la==371 or _la==372):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Db_user_access_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SINGLE_USER(self):
            return self.getToken(tsqlParser.SINGLE_USER, 0)

        def RESTRICTED_USER(self):
            return self.getToken(tsqlParser.RESTRICTED_USER, 0)

        def MULTI_USER(self):
            return self.getToken(tsqlParser.MULTI_USER, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_db_user_access_option




    def db_user_access_option(self):

        localctx = tsqlParser.Db_user_access_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_db_user_access_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1181
            _la = self._input.LA(1)
            if not(_la==333 or _la==379 or _la==399):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delayed_durability_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELAYED_DURABILITY(self):
            return self.getToken(tsqlParser.DELAYED_DURABILITY, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DISABLED(self):
            return self.getToken(tsqlParser.DISABLED, 0)

        def ALLOWED(self):
            return self.getToken(tsqlParser.ALLOWED, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_delayed_durability_option




    def delayed_durability_option(self):

        localctx = tsqlParser.Delayed_durability_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_delayed_durability_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1183
            self.match(tsqlParser.DELAYED_DURABILITY)
            self.state = 1184
            self.match(tsqlParser.EQUAL)
            self.state = 1185
            _la = self._input.LA(1)
            if not(_la==208 or _la==267 or _la==286):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_access_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DB_CHAINING(self):
            return self.getToken(tsqlParser.DB_CHAINING, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def TRUSTWORTHY(self):
            return self.getToken(tsqlParser.TRUSTWORTHY, 0)

        def DEFAULT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_LANGUAGE, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def DEFAULT_FULLTEXT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0)

        def NESTED_TRIGGERS(self):
            return self.getToken(tsqlParser.NESTED_TRIGGERS, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def TRANSFORM_NOISE_WORDS(self):
            return self.getToken(tsqlParser.TRANSFORM_NOISE_WORDS, 0)

        def TWO_DIGIT_YEAR_CUTOFF(self):
            return self.getToken(tsqlParser.TWO_DIGIT_YEAR_CUTOFF, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_external_access_option




    def external_access_option(self):

        localctx = tsqlParser.External_access_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_external_access_option)
        self._la = 0 # Token type
        try:
            self.state = 1212
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [258]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1187
                self.match(tsqlParser.DB_CHAINING)
                self.state = 1188
                self.on_off()
                pass
            elif token in [424]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1189
                self.match(tsqlParser.TRUSTWORTHY)
                self.state = 1190
                self.on_off()
                pass
            elif token in [260]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1191
                self.match(tsqlParser.DEFAULT_LANGUAGE)
                self.state = 1192
                self.match(tsqlParser.EQUAL)
                self.state = 1195
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 450]:
                    self.state = 1193
                    self.r_id()
                    pass
                elif token in [451]:
                    self.state = 1194
                    self.match(tsqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [259]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1197
                self.match(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE)
                self.state = 1198
                self.match(tsqlParser.EQUAL)
                self.state = 1201
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 450]:
                    self.state = 1199
                    self.r_id()
                    pass
                elif token in [451]:
                    self.state = 1200
                    self.match(tsqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [335]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1203
                self.match(tsqlParser.NESTED_TRIGGERS)
                self.state = 1204
                self.match(tsqlParser.EQUAL)
                self.state = 1205
                _la = self._input.LA(1)
                if not(_la==117 or _la==119):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [423]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1206
                self.match(tsqlParser.TRANSFORM_NOISE_WORDS)
                self.state = 1207
                self.match(tsqlParser.EQUAL)
                self.state = 1208
                _la = self._input.LA(1)
                if not(_la==117 or _la==119):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [426]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1209
                self.match(tsqlParser.TWO_DIGIT_YEAR_CUTOFF)
                self.state = 1210
                self.match(tsqlParser.EQUAL)
                self.state = 1211
                self.match(tsqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hadr_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def HADR(self):
            return self.getToken(tsqlParser.HADR, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_hadr_options




    def hadr_options(self):

        localctx = tsqlParser.Hadr_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_hadr_options)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self.match(tsqlParser.ALTER)
            self.state = 1215
            self.match(tsqlParser.DATABASE)
            self.state = 1216
            self.match(tsqlParser.SET)
            self.state = 1217
            self.match(tsqlParser.HADR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mixed_page_allocation_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MIXED_PAGE_ALLOCATION(self):
            return self.getToken(tsqlParser.MIXED_PAGE_ALLOCATION, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_mixed_page_allocation_option




    def mixed_page_allocation_option(self):

        localctx = tsqlParser.Mixed_page_allocation_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_mixed_page_allocation_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            self.match(tsqlParser.MIXED_PAGE_ALLOCATION)
            self.state = 1220
            _la = self._input.LA(1)
            if not(_la==117 or _la==119):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameterization_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMETERIZATION(self):
            return self.getToken(tsqlParser.PARAMETERIZATION, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_parameterization_option




    def parameterization_option(self):

        localctx = tsqlParser.Parameterization_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_parameterization_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1222
            self.match(tsqlParser.PARAMETERIZATION)
            self.state = 1223
            _la = self._input.LA(1)
            if not(_la==286 or _la==397):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recovery_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECOVERY(self):
            return self.getToken(tsqlParser.RECOVERY, 0)

        def FULL(self):
            return self.getToken(tsqlParser.FULL, 0)

        def BULK_LOGGED(self):
            return self.getToken(tsqlParser.BULK_LOGGED, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def TORN_PAGE_DETECTION(self):
            return self.getToken(tsqlParser.TORN_PAGE_DETECTION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def PAGE_VERIFY(self):
            return self.getToken(tsqlParser.PAGE_VERIFY, 0)

        def CHECKSUM(self):
            return self.getToken(tsqlParser.CHECKSUM, 0)

        def NONE(self):
            return self.getToken(tsqlParser.NONE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_recovery_option




    def recovery_option(self):

        localctx = tsqlParser.Recovery_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_recovery_option)
        self._la = 0 # Token type
        try:
            self.state = 1231
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [374]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1225
                self.match(tsqlParser.RECOVERY)
                self.state = 1226
                _la = self._input.LA(1)
                if not(_la==78 or _la==228 or _la==397):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [422]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1227
                self.match(tsqlParser.TORN_PAGE_DETECTION)
                self.state = 1228
                self.on_off()
                pass
            elif token in [355]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1229
                self.match(tsqlParser.PAGE_VERIFY)
                self.state = 1230
                _la = self._input.LA(1)
                if not(_la==111 or _la==235 or _la==422):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Service_broker_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE_BROKER(self):
            return self.getToken(tsqlParser.ENABLE_BROKER, 0)

        def DISABLE_BROKER(self):
            return self.getToken(tsqlParser.DISABLE_BROKER, 0)

        def NEW_BROKER(self):
            return self.getToken(tsqlParser.NEW_BROKER, 0)

        def ERROR_BROKER_CONVERSATIONS(self):
            return self.getToken(tsqlParser.ERROR_BROKER_CONVERSATIONS, 0)

        def HONOR_BROKER_PRIORITY(self):
            return self.getToken(tsqlParser.HONOR_BROKER_PRIORITY, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_service_broker_option




    def service_broker_option(self):

        localctx = tsqlParser.Service_broker_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_service_broker_option)
        try:
            self.state = 1239
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [271]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1233
                self.match(tsqlParser.ENABLE_BROKER)
                pass
            elif token in [268]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1234
                self.match(tsqlParser.DISABLE_BROKER)
                pass
            elif token in [336]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1235
                self.match(tsqlParser.NEW_BROKER)
                pass
            elif token in [273]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1236
                self.match(tsqlParser.ERROR_BROKER_CONVERSATIONS)
                pass
            elif token in [296]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1237
                self.match(tsqlParser.HONOR_BROKER_PRIORITY)
                self.state = 1238
                self.on_off()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Snapshot_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = None # Token

        def ALLOW_SNAPSHOT_ISOLATION(self):
            return self.getToken(tsqlParser.ALLOW_SNAPSHOT_ISOLATION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def READ_COMMITTED_SNAPSHOT(self):
            return self.getToken(tsqlParser.READ_COMMITTED_SNAPSHOT, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_snapshot_option




    def snapshot_option(self):

        localctx = tsqlParser.Snapshot_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_snapshot_option)
        self._la = 0 # Token type
        try:
            self.state = 1246
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [209]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1241
                self.match(tsqlParser.ALLOW_SNAPSHOT_ISOLATION)
                self.state = 1242
                self.on_off()
                pass
            elif token in [370]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1243
                self.match(tsqlParser.READ_COMMITTED_SNAPSHOT)
                self.state = 1244
                _la = self._input.LA(1)
                if not(_la==117 or _la==119):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [117, 119]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1245
                localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==117 or _la==119):
                    localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANSI_NULL_DEFAULT(self):
            return self.getToken(tsqlParser.ANSI_NULL_DEFAULT, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def ANSI_NULLS(self):
            return self.getToken(tsqlParser.ANSI_NULLS, 0)

        def ANSI_PADDING(self):
            return self.getToken(tsqlParser.ANSI_PADDING, 0)

        def ANSI_WARNINGS(self):
            return self.getToken(tsqlParser.ANSI_WARNINGS, 0)

        def ARITHABORT(self):
            return self.getToken(tsqlParser.ARITHABORT, 0)

        def COMPATIBILITY_LEVEL(self):
            return self.getToken(tsqlParser.COMPATIBILITY_LEVEL, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def CONCAT_NULL_YIELDS_NULL(self):
            return self.getToken(tsqlParser.CONCAT_NULL_YIELDS_NULL, 0)

        def NUMERIC_ROUNDABORT(self):
            return self.getToken(tsqlParser.NUMERIC_ROUNDABORT, 0)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(tsqlParser.QUOTED_IDENTIFIER, 0)

        def RECURSIVE_TRIGGERS(self):
            return self.getToken(tsqlParser.RECURSIVE_TRIGGERS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_sql_option




    def sql_option(self):

        localctx = tsqlParser.Sql_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_sql_option)
        try:
            self.state = 1269
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [211]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1248
                self.match(tsqlParser.ANSI_NULL_DEFAULT)
                self.state = 1249
                self.on_off()
                pass
            elif token in [210]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1250
                self.match(tsqlParser.ANSI_NULLS)
                self.state = 1251
                self.on_off()
                pass
            elif token in [212]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1252
                self.match(tsqlParser.ANSI_PADDING)
                self.state = 1253
                self.on_off()
                pass
            elif token in [213]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1254
                self.match(tsqlParser.ANSI_WARNINGS)
                self.state = 1255
                self.on_off()
                pass
            elif token in [215]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1256
                self.match(tsqlParser.ARITHABORT)
                self.state = 1257
                self.on_off()
                pass
            elif token in [238]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1258
                self.match(tsqlParser.COMPATIBILITY_LEVEL)
                self.state = 1259
                self.match(tsqlParser.EQUAL)
                self.state = 1260
                self.match(tsqlParser.DECIMAL)
                pass
            elif token in [240]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1261
                self.match(tsqlParser.CONCAT_NULL_YIELDS_NULL)
                self.state = 1262
                self.on_off()
                pass
            elif token in [345]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1263
                self.match(tsqlParser.NUMERIC_ROUNDABORT)
                self.state = 1264
                self.on_off()
                pass
            elif token in [366]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1265
                self.match(tsqlParser.QUOTED_IDENTIFIER)
                self.state = 1266
                self.on_off()
                pass
            elif token in [375]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1267
                self.match(tsqlParser.RECURSIVE_TRIGGERS)
                self.state = 1268
                self.on_off()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_recovery_time_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TARGET_RECOVERY_TIME(self):
            return self.getToken(tsqlParser.TARGET_RECOVERY_TIME, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def SECONDS(self):
            return self.getToken(tsqlParser.SECONDS, 0)

        def MINUTES(self):
            return self.getToken(tsqlParser.MINUTES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_target_recovery_time_option




    def target_recovery_time_option(self):

        localctx = tsqlParser.Target_recovery_time_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_target_recovery_time_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1271
            self.match(tsqlParser.TARGET_RECOVERY_TIME)
            self.state = 1272
            self.match(tsqlParser.EQUAL)
            self.state = 1273
            self.match(tsqlParser.DECIMAL)
            self.state = 1274
            _la = self._input.LA(1)
            if not(_la==329 or _la==392):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TerminationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.seconds = None # Token

        def ROLLBACK(self):
            return self.getToken(tsqlParser.ROLLBACK, 0)

        def AFTER(self):
            return self.getToken(tsqlParser.AFTER, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def IMMEDIATE(self):
            return self.getToken(tsqlParser.IMMEDIATE, 0)

        def NO_WAIT(self):
            return self.getToken(tsqlParser.NO_WAIT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_termination




    def termination(self):

        localctx = tsqlParser.TerminationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_termination)
        try:
            self.state = 1282
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1276
                self.match(tsqlParser.ROLLBACK)
                self.state = 1277
                self.match(tsqlParser.AFTER)
                self.state = 1278
                localctx.seconds = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1279
                self.match(tsqlParser.ROLLBACK)
                self.state = 1280
                self.match(tsqlParser.IMMEDIATE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1281
                self.match(tsqlParser.NO_WAIT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # R_idContext

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def INDEX(self):
            return self.getToken(tsqlParser.INDEX, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_table_nameContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_index




    def drop_index(self):

        localctx = tsqlParser.Drop_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_drop_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1284
            self.match(tsqlParser.DROP)
            self.state = 1285
            self.match(tsqlParser.INDEX)
            self.state = 1288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 1286
                self.match(tsqlParser.IF)
                self.state = 1287
                self.match(tsqlParser.EXISTS)


            self.state = 1290
            localctx.name = self.r_id()
            self.state = 1293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 1291
                self.match(tsqlParser.ON)
                self.state = 1292
                self.full_table_name()


            self.state = 1296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.state = 1295
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_procedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def PROCEDURE(self):
            return self.getToken(tsqlParser.PROCEDURE, 0)

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_procedure




    def drop_procedure(self):

        localctx = tsqlParser.Drop_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_drop_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self.match(tsqlParser.DROP)
            self.state = 1299
            self.match(tsqlParser.PROCEDURE)
            self.state = 1302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 1300
                self.match(tsqlParser.IF)
                self.state = 1301
                self.match(tsqlParser.EXISTS)


            self.state = 1304
            self.func_proc_name()
            self.state = 1306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 1305
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_statisticsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # R_idContext

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def STATISTICS(self):
            return self.getToken(tsqlParser.STATISTICS, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def full_table_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_table_nameContext,0)


        def DOT(self):
            return self.getToken(tsqlParser.DOT, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_statistics




    def drop_statistics(self):

        localctx = tsqlParser.Drop_statisticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_drop_statistics)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1308
            self.match(tsqlParser.DROP)
            self.state = 1309
            self.match(tsqlParser.STATISTICS)
            self.state = 1313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 1310
                self.full_table_name()
                self.state = 1311
                self.match(tsqlParser.DOT)


            self.state = 1315
            localctx.name = self.r_id()
            self.state = 1317
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.state = 1316
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_table_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_table




    def drop_table(self):

        localctx = tsqlParser.Drop_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_drop_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1319
            self.match(tsqlParser.DROP)
            self.state = 1320
            self.match(tsqlParser.TABLE)
            self.state = 1323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 1321
                self.match(tsqlParser.IF)
                self.state = 1322
                self.match(tsqlParser.EXISTS)


            self.state = 1325
            self.full_table_name()
            self.state = 1327
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.state = 1326
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_databaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_database




    def drop_database(self):

        localctx = tsqlParser.Drop_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_drop_database)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1329
            self.match(tsqlParser.DROP)
            self.state = 1330
            self.match(tsqlParser.DATABASE)
            self.state = 1333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 1331
                self.match(tsqlParser.IF)
                self.state = 1332
                self.match(tsqlParser.EXISTS)


            self.state = 1337
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 450]:
                self.state = 1335
                localctx.database = self.r_id()
                pass
            elif token in [38]:
                self.state = 1336
                self.match(tsqlParser.CURRENT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1340
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 1339
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_synonymContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def SYNONYM(self):
            return self.getToken(tsqlParser.SYNONYM, 0)

        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_synonym




    def drop_synonym(self):

        localctx = tsqlParser.Drop_synonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_drop_synonym)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1342
            self.match(tsqlParser.DROP)
            self.state = 1343
            self.match(tsqlParser.SYNONYM)
            self.state = 1346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 1344
                self.match(tsqlParser.IF)
                self.state = 1345
                self.match(tsqlParser.EXISTS)


            self.state = 1348
            self.simple_name()
            self.state = 1350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.state = 1349
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_viewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def VIEW(self):
            return self.getToken(tsqlParser.VIEW, 0)

        def simple_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Simple_nameContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Simple_nameContext,i)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_view




    def drop_view(self):

        localctx = tsqlParser.Drop_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_drop_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1352
            self.match(tsqlParser.DROP)
            self.state = 1353
            self.match(tsqlParser.VIEW)
            self.state = 1356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 1354
                self.match(tsqlParser.IF)
                self.state = 1355
                self.match(tsqlParser.EXISTS)


            self.state = 1358
            self.simple_name()
            self.state = 1363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==474:
                self.state = 1359
                self.match(tsqlParser.COMMA)
                self.state = 1360
                self.simple_name()
                self.state = 1365
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.state = 1366
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def SCHEMA(self):
            return self.getToken(tsqlParser.SCHEMA, 0)

        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_schema




    def drop_schema(self):

        localctx = tsqlParser.Drop_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_drop_schema)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1369
            self.match(tsqlParser.DROP)
            self.state = 1370
            self.match(tsqlParser.SCHEMA)
            self.state = 1373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 1371
                self.match(tsqlParser.IF)
                self.state = 1372
                self.match(tsqlParser.EXISTS)


            self.state = 1375
            self.simple_name()
            self.state = 1377
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.state = 1376
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(tsqlParser.FUNCTION, 0)

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_function




    def drop_function(self):

        localctx = tsqlParser.Drop_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_drop_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1379
            self.match(tsqlParser.DROP)
            self.state = 1380
            self.match(tsqlParser.FUNCTION)
            self.state = 1383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 1381
                self.match(tsqlParser.IF)
                self.state = 1382
                self.match(tsqlParser.EXISTS)


            self.state = 1385
            self.func_proc_name()
            self.state = 1387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1386
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Simple_nameContext

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def default_value(self):
            return self.getTypedRuleContext(tsqlParser.Default_valueContext,0)


        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def column_def_table_constraints(self):
            return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintsContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(tsqlParser.COMMA, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_type




    def create_type(self):

        localctx = tsqlParser.Create_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_create_type)
        self._la = 0 # Token type
        try:
            self.state = 1408
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1389
                self.match(tsqlParser.CREATE)
                self.state = 1390
                self.match(tsqlParser.TYPE)
                self.state = 1391
                localctx.name = self.simple_name()
                self.state = 1392
                self.match(tsqlParser.FROM)
                self.state = 1393
                self.data_type()
                self.state = 1394
                self.default_value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1396
                self.match(tsqlParser.CREATE)
                self.state = 1397
                self.match(tsqlParser.TYPE)
                self.state = 1398
                localctx.name = self.simple_name()
                self.state = 1399
                self.match(tsqlParser.AS)
                self.state = 1400
                self.match(tsqlParser.TABLE)
                self.state = 1401
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1402
                self.column_def_table_constraints()
                self.state = 1404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 1403
                    self.match(tsqlParser.COMMA)


                self.state = 1406
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Simple_nameContext

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_type




    def drop_type(self):

        localctx = tsqlParser.Drop_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_drop_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self.match(tsqlParser.DROP)
            self.state = 1411
            self.match(tsqlParser.TYPE)
            self.state = 1414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 1412
                self.match(tsqlParser.IF)
                self.state = 1413
                self.match(tsqlParser.EXISTS)


            self.state = 1416
            localctx.name = self.simple_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rowset_function_limitedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openquery(self):
            return self.getTypedRuleContext(tsqlParser.OpenqueryContext,0)


        def opendatasource(self):
            return self.getTypedRuleContext(tsqlParser.OpendatasourceContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_rowset_function_limited




    def rowset_function_limited(self):

        localctx = tsqlParser.Rowset_function_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_rowset_function_limited)
        try:
            self.state = 1420
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [122]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1418
                self.openquery()
                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1419
                self.opendatasource()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.linked_server = None # R_idContext
            self.query = None # Token

        def OPENQUERY(self):
            return self.getToken(tsqlParser.OPENQUERY, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(tsqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_openquery




    def openquery(self):

        localctx = tsqlParser.OpenqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_openquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1422
            self.match(tsqlParser.OPENQUERY)
            self.state = 1423
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1424
            localctx.linked_server = self.r_id()
            self.state = 1425
            self.match(tsqlParser.COMMA)
            self.state = 1426
            localctx.query = self.match(tsqlParser.STRING)
            self.state = 1427
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpendatasourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider = None # Token
            self.init = None # Token
            self.database = None # R_idContext
            self.scheme = None # R_idContext
            self.table = None # R_idContext

        def OPENDATASOURCE(self):
            return self.getToken(tsqlParser.OPENDATASOURCE, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(tsqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DOT)
            else:
                return self.getToken(tsqlParser.DOT, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.STRING)
            else:
                return self.getToken(tsqlParser.STRING, i)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_opendatasource




    def opendatasource(self):

        localctx = tsqlParser.OpendatasourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_opendatasource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1429
            self.match(tsqlParser.OPENDATASOURCE)
            self.state = 1430
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1431
            localctx.provider = self.match(tsqlParser.STRING)
            self.state = 1432
            self.match(tsqlParser.COMMA)
            self.state = 1433
            localctx.init = self.match(tsqlParser.STRING)
            self.state = 1434
            self.match(tsqlParser.RR_BRACKET)
            self.state = 1435
            self.match(tsqlParser.DOT)
            self.state = 1437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 17729624997893) != 0 or (((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 9969332866253825) != 0 or (((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & -148821964101331) != 0 or (((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & -47521180986790319) != 0 or (((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & 171699173404606099) != 0:
                self.state = 1436
                localctx.database = self.r_id()


            self.state = 1439
            self.match(tsqlParser.DOT)
            self.state = 1441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 17729624997893) != 0 or (((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 9969332866253825) != 0 or (((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & -148821964101331) != 0 or (((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & -47521180986790319) != 0 or (((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & 171699173404606099) != 0:
                self.state = 1440
                localctx.scheme = self.r_id()


            self.state = 1443
            self.match(tsqlParser.DOT)

            self.state = 1444
            localctx.table = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(tsqlParser.DECLARE, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def table_type_definition(self):
            return self.getTypedRuleContext(tsqlParser.Table_type_definitionContext,0)


        def table_sources(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourcesContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def declare_local(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Declare_localContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Declare_localContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_declare_statement




    def declare_statement(self):

        localctx = tsqlParser.Declare_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_declare_statement)
        self._la = 0 # Token type
        try:
            self.state = 1470
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1446
                self.match(tsqlParser.DECLARE)
                self.state = 1447
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6:
                    self.state = 1448
                    self.match(tsqlParser.AS)


                self.state = 1453
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [174]:
                    self.state = 1451
                    self.table_type_definition()
                    pass
                elif token in [19, 25, 35, 41, 42, 66, 71, 73, 84, 87, 100, 104, 105, 108, 114, 115, 123, 152, 160, 164, 168, 173, 184, 185, 186, 196, 203, 206, 214, 217, 224, 225, 227, 229, 230, 231, 232, 235, 236, 237, 239, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 255, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 330, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 361, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 398, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 414, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 448, 450, 472]:
                    self.state = 1452
                    self.table_sources()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1456
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                if la_ == 1:
                    self.state = 1455
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1458
                self.match(tsqlParser.DECLARE)
                self.state = 1459
                self.declare_local()
                self.state = 1464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==474:
                    self.state = 1460
                    self.match(tsqlParser.COMMA)
                    self.state = 1461
                    self.declare_local()
                    self.state = 1466
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1468
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
                if la_ == 1:
                    self.state = 1467
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(tsqlParser.CLOSE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def DEALLOCATE(self):
            return self.getToken(tsqlParser.DEALLOCATE, 0)

        def declare_cursor(self):
            return self.getTypedRuleContext(tsqlParser.Declare_cursorContext,0)


        def fetch_cursor(self):
            return self.getTypedRuleContext(tsqlParser.Fetch_cursorContext,0)


        def OPEN(self):
            return self.getToken(tsqlParser.OPEN, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_cursor_statement




    def cursor_statement(self):

        localctx = tsqlParser.Cursor_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_cursor_statement)
        try:
            self.state = 1498
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [23]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1472
                self.match(tsqlParser.CLOSE)
                self.state = 1474
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 1473
                    self.match(tsqlParser.GLOBAL)


                self.state = 1476
                self.cursor_name()
                self.state = 1478
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                if la_ == 1:
                    self.state = 1477
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1480
                self.match(tsqlParser.DEALLOCATE)
                self.state = 1482
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                if la_ == 1:
                    self.state = 1481
                    self.match(tsqlParser.GLOBAL)


                self.state = 1484
                self.cursor_name()
                self.state = 1486
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1485
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1488
                self.declare_cursor()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1489
                self.fetch_cursor()
                pass
            elif token in [120]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1490
                self.match(tsqlParser.OPEN)
                self.state = 1492
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
                if la_ == 1:
                    self.state = 1491
                    self.match(tsqlParser.GLOBAL)


                self.state = 1494
                self.cursor_name()
                self.state = 1496
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
                if la_ == 1:
                    self.state = 1495
                    self.match(tsqlParser.SEMI)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.return_status = None # Token

        def EXECUTE(self):
            return self.getToken(tsqlParser.EXECUTE, 0)

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def execute_statement_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Execute_statement_argContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Execute_statement_argContext,i)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def execute_var_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Execute_var_stringContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Execute_var_stringContext,i)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.PLUS)
            else:
                return self.getToken(tsqlParser.PLUS, i)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def LOGIN(self):
            return self.getToken(tsqlParser.LOGIN, 0)

        def USER(self):
            return self.getToken(tsqlParser.USER, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_statement




    def execute_statement(self):

        localctx = tsqlParser.Execute_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_execute_statement)
        self._la = 0 # Token type
        try:
            self.state = 1541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1500
                self.match(tsqlParser.EXECUTE)
                self.state = 1503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==448:
                    self.state = 1501
                    localctx.return_status = self.match(tsqlParser.LOCAL_ID)
                    self.state = 1502
                    self.match(tsqlParser.EQUAL)


                self.state = 1505
                self.func_proc_name()
                self.state = 1514
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
                if la_ == 1:
                    self.state = 1506
                    self.execute_statement_arg()
                    self.state = 1511
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==474:
                        self.state = 1507
                        self.match(tsqlParser.COMMA)
                        self.state = 1508
                        self.execute_statement_arg()
                        self.state = 1513
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1517
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
                if la_ == 1:
                    self.state = 1516
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1519
                self.match(tsqlParser.EXECUTE)
                self.state = 1520
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1521
                self.execute_var_string()
                self.state = 1526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==480:
                    self.state = 1522
                    self.match(tsqlParser.PLUS)
                    self.state = 1523
                    self.execute_var_string()
                    self.state = 1528
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1529
                self.match(tsqlParser.RR_BRACKET)
                self.state = 1536
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
                if la_ == 1:
                    self.state = 1531
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==6:
                        self.state = 1530
                        self.match(tsqlParser.AS)


                    self.state = 1533
                    _la = self._input.LA(1)
                    if not(_la==194 or _la==319):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1534
                    self.match(tsqlParser.EQUAL)
                    self.state = 1535
                    self.match(tsqlParser.STRING)


                self.state = 1539
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                if la_ == 1:
                    self.state = 1538
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_statement_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.parameter = None # Token

        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def NULL_(self):
            return self.getToken(tsqlParser.NULL_, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def constant_LOCAL_ID(self):
            return self.getTypedRuleContext(tsqlParser.Constant_LOCAL_IDContext,0)


        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def OUT(self):
            return self.getToken(tsqlParser.OUT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_statement_arg




    def execute_statement_arg(self):

        localctx = tsqlParser.Execute_statement_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_execute_statement_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.state = 1543
                localctx.parameter = self.match(tsqlParser.LOCAL_ID)
                self.state = 1544
                self.match(tsqlParser.EQUAL)


            self.state = 1556
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 448, 449, 450, 451, 452, 453, 454, 471, 480, 481]:
                self.state = 1549
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [448, 449, 451, 452, 453, 454, 471, 480, 481]:
                    self.state = 1547
                    self.constant_LOCAL_ID()
                    pass
                elif token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 450]:
                    self.state = 1548
                    self.r_id()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1552
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                if la_ == 1:
                    self.state = 1551
                    _la = self._input.LA(1)
                    if not(_la==352 or _la==353):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [48]:
                self.state = 1554
                self.match(tsqlParser.DEFAULT)
                pass
            elif token in [113]:
                self.state = 1555
                self.match(tsqlParser.NULL_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_var_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_var_string




    def execute_var_string(self):

        localctx = tsqlParser.Execute_var_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_execute_var_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1558
            _la = self._input.LA(1)
            if not(_la==448 or _la==451):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Security_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.on_id = None # Full_table_nameContext
            self.to_principal = None # R_idContext
            self.as_principal = None # R_idContext

        def execute_clause(self):
            return self.getTypedRuleContext(tsqlParser.Execute_clauseContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.GRANT)
            else:
                return self.getToken(tsqlParser.GRANT, i)

        def TO(self):
            return self.getToken(tsqlParser.TO, 0)

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def grant_permission(self):
            return self.getTypedRuleContext(tsqlParser.Grant_permissionContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def OPTION(self):
            return self.getToken(tsqlParser.OPTION, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_table_nameContext,0)


        def PRIVILEGES(self):
            return self.getToken(tsqlParser.PRIVILEGES, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def REVERT(self):
            return self.getToken(tsqlParser.REVERT, 0)

        def COOKIE(self):
            return self.getToken(tsqlParser.COOKIE, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_security_statement




    def security_statement(self):

        localctx = tsqlParser.Security_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_security_statement)
        self._la = 0 # Token type
        try:
            self.state = 1608
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [63]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1560
                self.execute_clause()
                self.state = 1562
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                if la_ == 1:
                    self.state = 1561
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1564
                self.match(tsqlParser.GRANT)
                self.state = 1576
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [2]:
                    self.state = 1565
                    self.match(tsqlParser.ALL)
                    self.state = 1567
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==364:
                        self.state = 1566
                        self.match(tsqlParser.PRIVILEGES)


                    pass
                elif token in [3, 36, 63, 93, 144, 160, 198, 241, 300, 396, 413]:
                    self.state = 1569
                    self.grant_permission()
                    self.state = 1574
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==472:
                        self.state = 1570
                        self.match(tsqlParser.LR_BRACKET)
                        self.state = 1571
                        self.column_name_list()
                        self.state = 1572
                        self.match(tsqlParser.RR_BRACKET)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 1578
                    self.match(tsqlParser.ON)
                    self.state = 1579
                    localctx.on_id = self.full_table_name()


                self.state = 1582
                self.match(tsqlParser.TO)

                self.state = 1583
                localctx.to_principal = self.r_id()
                self.state = 1587
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
                if la_ == 1:
                    self.state = 1584
                    self.match(tsqlParser.WITH)
                    self.state = 1585
                    self.match(tsqlParser.GRANT)
                    self.state = 1586
                    self.match(tsqlParser.OPTION)


                self.state = 1591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6:
                    self.state = 1589
                    self.match(tsqlParser.AS)
                    self.state = 1590
                    localctx.as_principal = self.r_id()


                self.state = 1594
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
                if la_ == 1:
                    self.state = 1593
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [150]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1596
                self.match(tsqlParser.REVERT)
                self.state = 1603
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                if la_ == 1:
                    self.state = 1597
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 1598
                    self.match(tsqlParser.WITH)
                    self.state = 1599
                    self.match(tsqlParser.COOKIE)
                    self.state = 1600
                    self.match(tsqlParser.EQUAL)
                    self.state = 1601
                    self.match(tsqlParser.LOCAL_ID)
                    self.state = 1602
                    self.match(tsqlParser.RR_BRACKET)


                self.state = 1606
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
                if la_ == 1:
                    self.state = 1605
                    self.match(tsqlParser.SEMI)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_permissionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(tsqlParser.EXECUTE, 0)

        def VIEW(self):
            return self.getToken(tsqlParser.VIEW, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def TAKE(self):
            return self.getToken(tsqlParser.TAKE, 0)

        def CONTROL(self):
            return self.getToken(tsqlParser.CONTROL, 0)

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def SHOWPLAN(self):
            return self.getToken(tsqlParser.SHOWPLAN, 0)

        def IMPERSONATE(self):
            return self.getToken(tsqlParser.IMPERSONATE, 0)

        def SELECT(self):
            return self.getToken(tsqlParser.SELECT, 0)

        def REFERENCES(self):
            return self.getToken(tsqlParser.REFERENCES, 0)

        def INSERT(self):
            return self.getToken(tsqlParser.INSERT, 0)

        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def ANY(self):
            return self.getToken(tsqlParser.ANY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_grant_permission




    def grant_permission(self):

        localctx = tsqlParser.Grant_permissionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_grant_permission)
        self._la = 0 # Token type
        try:
            self.state = 1636
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [63]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1610
                self.match(tsqlParser.EXECUTE)
                pass
            elif token in [198]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1611
                self.match(tsqlParser.VIEW)
                self.state = 1612
                self.r_id()
                pass
            elif token in [413]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1613
                self.match(tsqlParser.TAKE)
                self.state = 1614
                self.r_id()
                pass
            elif token in [241]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1615
                self.match(tsqlParser.CONTROL)
                self.state = 1617
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 17729624997893) != 0 or (((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 9969332866253825) != 0 or (((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & -148821964101331) != 0 or (((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & -47521180986790319) != 0 or (((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & 171699173404606099) != 0:
                    self.state = 1616
                    self.r_id()


                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1619
                self.match(tsqlParser.CREATE)
                self.state = 1620
                _la = self._input.LA(1)
                if not(_la==174 or _la==198):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [396]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1621
                self.match(tsqlParser.SHOWPLAN)
                pass
            elif token in [300]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1622
                self.match(tsqlParser.IMPERSONATE)
                pass
            elif token in [160]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1623
                self.match(tsqlParser.SELECT)
                pass
            elif token in [144]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1624
                self.match(tsqlParser.REFERENCES)
                pass
            elif token in [93]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1625
                self.match(tsqlParser.INSERT)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1626
                self.match(tsqlParser.ALTER)
                self.state = 1634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5 or _la==44 or (((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 17729624997893) != 0 or (((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 9969332866253825) != 0 or (((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & -148821964101331) != 0 or (((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & -47521180986790319) != 0 or (((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & 171699173404606099) != 0:
                    self.state = 1628
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==5:
                        self.state = 1627
                        self.match(tsqlParser.ANY)


                    self.state = 1632
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 450]:
                        self.state = 1630
                        self.r_id()
                        pass
                    elif token in [44]:
                        self.state = 1631
                        self.match(tsqlParser.DATABASE)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.member_name = None # R_idContext

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def DOT(self):
            return self.getToken(tsqlParser.DOT, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(tsqlParser.Assignment_operatorContext,0)


        def CURSOR(self):
            return self.getToken(tsqlParser.CURSOR, 0)

        def declare_set_cursor_common(self):
            return self.getTypedRuleContext(tsqlParser.Declare_set_cursor_commonContext,0)


        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def READ(self):
            return self.getToken(tsqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def UPDATE(self):
            return self.getToken(tsqlParser.UPDATE, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def set_special(self):
            return self.getTypedRuleContext(tsqlParser.Set_specialContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_set_statement




    def set_statement(self):

        localctx = tsqlParser.Set_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_set_statement)
        self._la = 0 # Token type
        try:
            self.state = 1677
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1638
                self.match(tsqlParser.SET)
                self.state = 1639
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==467:
                    self.state = 1640
                    self.match(tsqlParser.DOT)
                    self.state = 1641
                    localctx.member_name = self.r_id()


                self.state = 1644
                self.match(tsqlParser.EQUAL)
                self.state = 1645
                self.expression(0)
                self.state = 1647
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
                if la_ == 1:
                    self.state = 1646
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1649
                self.match(tsqlParser.SET)
                self.state = 1650
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1651
                self.assignment_operator()
                self.state = 1652
                self.expression(0)
                self.state = 1654
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
                if la_ == 1:
                    self.state = 1653
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1656
                self.match(tsqlParser.SET)
                self.state = 1657
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1658
                self.match(tsqlParser.EQUAL)
                self.state = 1659
                self.match(tsqlParser.CURSOR)
                self.state = 1660
                self.declare_set_cursor_common()
                self.state = 1671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==72:
                    self.state = 1661
                    self.match(tsqlParser.FOR)
                    self.state = 1669
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [141]:
                        self.state = 1662
                        self.match(tsqlParser.READ)
                        self.state = 1663
                        self.match(tsqlParser.ONLY)
                        pass
                    elif token in [191]:
                        self.state = 1664
                        self.match(tsqlParser.UPDATE)
                        self.state = 1667
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==116:
                            self.state = 1665
                            self.match(tsqlParser.OF)
                            self.state = 1666
                            self.column_name_list()


                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 1674
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
                if la_ == 1:
                    self.state = 1673
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1676
                self.set_special()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(tsqlParser.BEGIN, 0)

        def DISTRIBUTED(self):
            return self.getToken(tsqlParser.DISTRIBUTED, 0)

        def TRAN(self):
            return self.getToken(tsqlParser.TRAN, 0)

        def TRANSACTION(self):
            return self.getToken(tsqlParser.TRANSACTION, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def MARK(self):
            return self.getToken(tsqlParser.MARK, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def COMMIT(self):
            return self.getToken(tsqlParser.COMMIT, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def DELAYED_DURABILITY(self):
            return self.getToken(tsqlParser.DELAYED_DURABILITY, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def WORK(self):
            return self.getToken(tsqlParser.WORK, 0)

        def ROLLBACK(self):
            return self.getToken(tsqlParser.ROLLBACK, 0)

        def SAVE(self):
            return self.getToken(tsqlParser.SAVE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_transaction_statement




    def transaction_statement(self):

        localctx = tsqlParser.Transaction_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_transaction_statement)
        self._la = 0 # Token type
        try:
            self.state = 1756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1679
                self.match(tsqlParser.BEGIN)
                self.state = 1680
                self.match(tsqlParser.DISTRIBUTED)
                self.state = 1681
                _la = self._input.LA(1)
                if not(_la==180 or _la==181):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1684
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
                if la_ == 1:
                    self.state = 1682
                    self.r_id()

                elif la_ == 2:
                    self.state = 1683
                    self.match(tsqlParser.LOCAL_ID)


                self.state = 1687
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
                if la_ == 1:
                    self.state = 1686
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1689
                self.match(tsqlParser.BEGIN)
                self.state = 1690
                _la = self._input.LA(1)
                if not(_la==180 or _la==181):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1700
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
                if la_ == 1:
                    self.state = 1693
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 450]:
                        self.state = 1691
                        self.r_id()
                        pass
                    elif token in [448]:
                        self.state = 1692
                        self.match(tsqlParser.LOCAL_ID)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1698
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
                    if la_ == 1:
                        self.state = 1695
                        self.match(tsqlParser.WITH)
                        self.state = 1696
                        self.match(tsqlParser.MARK)
                        self.state = 1697
                        self.match(tsqlParser.STRING)




                self.state = 1703
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
                if la_ == 1:
                    self.state = 1702
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1705
                self.match(tsqlParser.COMMIT)
                self.state = 1706
                _la = self._input.LA(1)
                if not(_la==180 or _la==181):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1719
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
                if la_ == 1:
                    self.state = 1709
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 450]:
                        self.state = 1707
                        self.r_id()
                        pass
                    elif token in [448]:
                        self.state = 1708
                        self.match(tsqlParser.LOCAL_ID)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1717
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                    if la_ == 1:
                        self.state = 1711
                        self.match(tsqlParser.WITH)
                        self.state = 1712
                        self.match(tsqlParser.LR_BRACKET)
                        self.state = 1713
                        self.match(tsqlParser.DELAYED_DURABILITY)
                        self.state = 1714
                        self.match(tsqlParser.EQUAL)
                        self.state = 1715
                        _la = self._input.LA(1)
                        if not(_la==117 or _la==119):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1716
                        self.match(tsqlParser.RR_BRACKET)




                self.state = 1722
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
                if la_ == 1:
                    self.state = 1721
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1724
                self.match(tsqlParser.COMMIT)
                self.state = 1726
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
                if la_ == 1:
                    self.state = 1725
                    self.match(tsqlParser.WORK)


                self.state = 1729
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
                if la_ == 1:
                    self.state = 1728
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1731
                self.match(tsqlParser.ROLLBACK)
                self.state = 1732
                _la = self._input.LA(1)
                if not(_la==180 or _la==181):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1735
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
                if la_ == 1:
                    self.state = 1733
                    self.r_id()

                elif la_ == 2:
                    self.state = 1734
                    self.match(tsqlParser.LOCAL_ID)


                self.state = 1738
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
                if la_ == 1:
                    self.state = 1737
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1740
                self.match(tsqlParser.ROLLBACK)
                self.state = 1742
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
                if la_ == 1:
                    self.state = 1741
                    self.match(tsqlParser.WORK)


                self.state = 1745
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
                if la_ == 1:
                    self.state = 1744
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1747
                self.match(tsqlParser.SAVE)
                self.state = 1748
                _la = self._input.LA(1)
                if not(_la==180 or _la==181):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1751
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
                if la_ == 1:
                    self.state = 1749
                    self.r_id()

                elif la_ == 2:
                    self.state = 1750
                    self.match(tsqlParser.LOCAL_ID)


                self.state = 1754
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
                if la_ == 1:
                    self.state = 1753
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Go_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.count = None # Token

        def GO(self):
            return self.getToken(tsqlParser.GO, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_go_statement




    def go_statement(self):

        localctx = tsqlParser.Go_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_go_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1758
            self.match(tsqlParser.GO)
            self.state = 1760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==449:
                self.state = 1759
                localctx.count = self.match(tsqlParser.DECIMAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Use_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext

        def USE(self):
            return self.getToken(tsqlParser.USE, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_use_statement




    def use_statement(self):

        localctx = tsqlParser.Use_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_use_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1762
            self.match(tsqlParser.USE)
            self.state = 1763
            localctx.database = self.r_id()
            self.state = 1765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
            if la_ == 1:
                self.state = 1764
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.clause = None # Token

        def EXECUTE(self):
            return self.getToken(tsqlParser.EXECUTE, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def CALLER(self):
            return self.getToken(tsqlParser.CALLER, 0)

        def SELF(self):
            return self.getToken(tsqlParser.SELF, 0)

        def OWNER(self):
            return self.getToken(tsqlParser.OWNER, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_clause




    def execute_clause(self):

        localctx = tsqlParser.Execute_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_execute_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1767
            self.match(tsqlParser.EXECUTE)
            self.state = 1768
            self.match(tsqlParser.AS)
            self.state = 1769
            localctx.clause = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==229 or _la==354 or _la==393 or _la==451):
                localctx.clause = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_localContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_declare_local




    def declare_local(self):

        localctx = tsqlParser.Declare_localContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_declare_local)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1771
            self.match(tsqlParser.LOCAL_ID)
            self.state = 1773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 1772
                self.match(tsqlParser.AS)


            self.state = 1775
            self.data_type()
            self.state = 1778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==455:
                self.state = 1776
                self.match(tsqlParser.EQUAL)
                self.state = 1777
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_type_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def column_def_table_constraints(self):
            return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintsContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_type_definition




    def table_type_definition(self):

        localctx = tsqlParser.Table_type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_table_type_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1780
            self.match(tsqlParser.TABLE)
            self.state = 1781
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1782
            self.column_def_table_constraints()
            self.state = 1783
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_def_table_constraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_def_table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_def_table_constraintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_def_table_constraints




    def column_def_table_constraints(self):

        localctx = tsqlParser.Column_def_table_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_column_def_table_constraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1785
            self.column_def_table_constraint()
            self.state = 1792
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,250,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1787
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==474:
                        self.state = 1786
                        self.match(tsqlParser.COMMA)


                    self.state = 1789
                    self.column_def_table_constraint() 
                self.state = 1794
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,250,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_def_table_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_definition(self):
            return self.getTypedRuleContext(tsqlParser.Column_definitionContext,0)


        def table_constraint(self):
            return self.getTypedRuleContext(tsqlParser.Table_constraintContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_column_def_table_constraint




    def column_def_table_constraint(self):

        localctx = tsqlParser.Column_def_table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_column_def_table_constraint)
        try:
            self.state = 1797
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 450]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1795
                self.column_definition()
                pass
            elif token in [21, 30, 74, 135, 189]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1796
                self.table_constraint()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint = None # R_idContext
            self.seed = None # Token
            self.increment = None # Token

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)

        def null_notnull(self):
            return self.getTypedRuleContext(tsqlParser.Null_notnullContext,0)


        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(tsqlParser.Constant_expressionContext,0)


        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)

        def ROWGUIDCOL(self):
            return self.getToken(tsqlParser.ROWGUIDCOL, 0)

        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_constraintContext,i)


        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def VALUES(self):
            return self.getToken(tsqlParser.VALUES, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(tsqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_definition




    def column_definition(self):

        localctx = tsqlParser.Column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_column_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1799
            self.r_id()
            self.state = 1803
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55, 71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 226, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 254, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 401, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 421, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 450]:
                self.state = 1800
                self.data_type()
                pass
            elif token in [6]:
                self.state = 1801
                self.match(tsqlParser.AS)
                self.state = 1802
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 1805
                self.match(tsqlParser.COLLATE)
                self.state = 1806
                self.r_id()


            self.state = 1810
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
            if la_ == 1:
                self.state = 1809
                self.null_notnull()


            self.state = 1835
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.state = 1814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 1812
                    self.match(tsqlParser.CONSTRAINT)
                    self.state = 1813
                    localctx.constraint = self.r_id()


                self.state = 1816
                self.match(tsqlParser.DEFAULT)
                self.state = 1817
                self.constant_expression()
                self.state = 1820
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                if la_ == 1:
                    self.state = 1818
                    self.match(tsqlParser.WITH)
                    self.state = 1819
                    self.match(tsqlParser.VALUES)



            elif la_ == 2:
                self.state = 1822
                self.match(tsqlParser.IDENTITY)
                self.state = 1828
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
                if la_ == 1:
                    self.state = 1823
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 1824
                    localctx.seed = self.match(tsqlParser.DECIMAL)
                    self.state = 1825
                    self.match(tsqlParser.COMMA)
                    self.state = 1826
                    localctx.increment = self.match(tsqlParser.DECIMAL)
                    self.state = 1827
                    self.match(tsqlParser.RR_BRACKET)


                self.state = 1833
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
                if la_ == 1:
                    self.state = 1830
                    self.match(tsqlParser.NOT)
                    self.state = 1831
                    self.match(tsqlParser.FOR)
                    self.state = 1832
                    self.match(tsqlParser.REPLICATION)




            self.state = 1838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==155:
                self.state = 1837
                self.match(tsqlParser.ROWGUIDCOL)


            self.state = 1843
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,261,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1840
                    self.column_constraint() 
                self.state = 1845
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,261,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def null_notnull(self):
            return self.getTypedRuleContext(tsqlParser.Null_notnullContext,0)


        def PRIMARY(self):
            return self.getToken(tsqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(tsqlParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(tsqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(tsqlParser.ClusteredContext,0)


        def index_options(self):
            return self.getTypedRuleContext(tsqlParser.Index_optionsContext,0)


        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_constraint




    def column_constraint(self):

        localctx = tsqlParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 1846
                self.match(tsqlParser.CONSTRAINT)
                self.state = 1847
                self.r_id()


            self.state = 1851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112 or _la==113:
                self.state = 1850
                self.null_notnull()


            self.state = 1874
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135, 189]:
                self.state = 1856
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [135]:
                    self.state = 1853
                    self.match(tsqlParser.PRIMARY)
                    self.state = 1854
                    self.match(tsqlParser.KEY)
                    pass
                elif token in [189]:
                    self.state = 1855
                    self.match(tsqlParser.UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1859
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24 or _la==110:
                    self.state = 1858
                    self.clustered()


                self.state = 1862
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
                if la_ == 1:
                    self.state = 1861
                    self.index_options()


                pass
            elif token in [21]:
                self.state = 1864
                self.match(tsqlParser.CHECK)
                self.state = 1868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==112:
                    self.state = 1865
                    self.match(tsqlParser.NOT)
                    self.state = 1866
                    self.match(tsqlParser.FOR)
                    self.state = 1867
                    self.match(tsqlParser.REPLICATION)


                self.state = 1870
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1871
                self.search_condition(0)
                self.state = 1872
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fk = None # Column_name_listContext
            self.pk = None # Column_name_listContext

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LR_BRACKET)
            else:
                return self.getToken(tsqlParser.LR_BRACKET, i)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.RR_BRACKET)
            else:
                return self.getToken(tsqlParser.RR_BRACKET, i)

        def FOREIGN(self):
            return self.getToken(tsqlParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(tsqlParser.KEY, 0)

        def REFERENCES(self):
            return self.getToken(tsqlParser.REFERENCES, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_table_nameContext,0)


        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_name_listContext,i)


        def PRIMARY(self):
            return self.getToken(tsqlParser.PRIMARY, 0)

        def UNIQUE(self):
            return self.getToken(tsqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(tsqlParser.ClusteredContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def index_options(self):
            return self.getTypedRuleContext(tsqlParser.Index_optionsContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def ASC(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ASC)
            else:
                return self.getToken(tsqlParser.ASC, i)

        def DESC(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DESC)
            else:
                return self.getToken(tsqlParser.DESC, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_constraint




    def table_constraint(self):

        localctx = tsqlParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 1876
                self.match(tsqlParser.CONSTRAINT)
                self.state = 1877
                self.r_id()


            self.state = 1932
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135, 189]:
                self.state = 1883
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [135]:
                    self.state = 1880
                    self.match(tsqlParser.PRIMARY)
                    self.state = 1881
                    self.match(tsqlParser.KEY)
                    pass
                elif token in [189]:
                    self.state = 1882
                    self.match(tsqlParser.UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24 or _la==110:
                    self.state = 1885
                    self.clustered()


                self.state = 1888
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1889
                self.r_id()
                self.state = 1891
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7 or _la==51:
                    self.state = 1890
                    _la = self._input.LA(1)
                    if not(_la==7 or _la==51):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==474:
                    self.state = 1893
                    self.match(tsqlParser.COMMA)
                    self.state = 1894
                    self.r_id()
                    self.state = 1896
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==7 or _la==51:
                        self.state = 1895
                        _la = self._input.LA(1)
                        if not(_la==7 or _la==51):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1902
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1903
                self.match(tsqlParser.RR_BRACKET)
                self.state = 1905
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
                if la_ == 1:
                    self.state = 1904
                    self.index_options()


                self.state = 1909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 1907
                    self.match(tsqlParser.ON)
                    self.state = 1908
                    self.r_id()


                pass
            elif token in [74]:
                self.state = 1911
                self.match(tsqlParser.FOREIGN)
                self.state = 1912
                self.match(tsqlParser.KEY)
                self.state = 1913
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1914
                localctx.fk = self.column_name_list()
                self.state = 1915
                self.match(tsqlParser.RR_BRACKET)
                self.state = 1916
                self.match(tsqlParser.REFERENCES)
                self.state = 1917
                self.full_table_name()
                self.state = 1918
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1919
                localctx.pk = self.column_name_list()
                self.state = 1920
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [21]:
                self.state = 1922
                self.match(tsqlParser.CHECK)
                self.state = 1926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==112:
                    self.state = 1923
                    self.match(tsqlParser.NOT)
                    self.state = 1924
                    self.match(tsqlParser.FOR)
                    self.state = 1925
                    self.match(tsqlParser.REPLICATION)


                self.state = 1928
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1929
                self.search_condition(0)
                self.state = 1930
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def index_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Index_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Index_optionContext,i)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_index_options




    def index_options(self):

        localctx = tsqlParser.Index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1934
            self.match(tsqlParser.WITH)
            self.state = 1935
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1936
            self.index_option()
            self.state = 1941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==474:
                self.state = 1937
                self.match(tsqlParser.COMMA)
                self.state = 1938
                self.index_option()
                self.state = 1943
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1944
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Simple_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Simple_idContext,i)


        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_index_option




    def index_option(self):

        localctx = tsqlParser.Index_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_index_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1946
            self.simple_id()
            self.state = 1947
            self.match(tsqlParser.EQUAL)
            self.state = 1951
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 450]:
                self.state = 1948
                self.simple_id()
                pass
            elif token in [117, 119]:
                self.state = 1949
                self.on_off()
                pass
            elif token in [449]:
                self.state = 1950
                self.match(tsqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_cursorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(tsqlParser.DECLARE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def CURSOR(self):
            return self.getToken(tsqlParser.CURSOR, 0)

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.FOR)
            else:
                return self.getToken(tsqlParser.FOR, i)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def declare_set_cursor_common(self):
            return self.getTypedRuleContext(tsqlParser.Declare_set_cursor_commonContext,0)


        def INSENSITIVE(self):
            return self.getToken(tsqlParser.INSENSITIVE, 0)

        def SCROLL(self):
            return self.getToken(tsqlParser.SCROLL, 0)

        def READ(self):
            return self.getToken(tsqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def UPDATE(self):
            return self.getToken(tsqlParser.UPDATE, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_declare_cursor




    def declare_cursor(self):

        localctx = tsqlParser.Declare_cursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_declare_cursor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1953
            self.match(tsqlParser.DECLARE)
            self.state = 1954
            self.cursor_name()
            self.state = 1986
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
            if la_ == 1:
                self.state = 1955
                self.match(tsqlParser.CURSOR)
                self.state = 1965
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
                if la_ == 1:
                    self.state = 1956
                    self.declare_set_cursor_common()
                    self.state = 1963
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==72:
                        self.state = 1957
                        self.match(tsqlParser.FOR)
                        self.state = 1958
                        self.match(tsqlParser.UPDATE)
                        self.state = 1961
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==116:
                            self.state = 1959
                            self.match(tsqlParser.OF)
                            self.state = 1960
                            self.column_name_list()






                pass

            elif la_ == 2:
                self.state = 1968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==304:
                    self.state = 1967
                    self.match(tsqlParser.INSENSITIVE)


                self.state = 1971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==390:
                    self.state = 1970
                    self.match(tsqlParser.SCROLL)


                self.state = 1973
                self.match(tsqlParser.CURSOR)
                self.state = 1974
                self.match(tsqlParser.FOR)
                self.state = 1975
                self.select_statement()
                self.state = 1984
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==72:
                    self.state = 1976
                    self.match(tsqlParser.FOR)
                    self.state = 1982
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [141]:
                        self.state = 1977
                        self.match(tsqlParser.READ)
                        self.state = 1978
                        self.match(tsqlParser.ONLY)
                        pass
                    elif token in [191]:
                        self.state = 1979
                        self.match(tsqlParser.UPDATE)
                        pass
                    elif token in [116]:
                        self.state = 1980
                        self.match(tsqlParser.OF)
                        self.state = 1981
                        self.column_name_list()
                        pass
                    else:
                        raise NoViableAltException(self)



                pass


            self.state = 1989
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
            if la_ == 1:
                self.state = 1988
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_set_cursor_commonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def TYPE_WARNING(self):
            return self.getToken(tsqlParser.TYPE_WARNING, 0)

        def LOCAL(self):
            return self.getToken(tsqlParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def FORWARD_ONLY(self):
            return self.getToken(tsqlParser.FORWARD_ONLY, 0)

        def SCROLL(self):
            return self.getToken(tsqlParser.SCROLL, 0)

        def STATIC(self):
            return self.getToken(tsqlParser.STATIC, 0)

        def KEYSET(self):
            return self.getToken(tsqlParser.KEYSET, 0)

        def DYNAMIC(self):
            return self.getToken(tsqlParser.DYNAMIC, 0)

        def FAST_FORWARD(self):
            return self.getToken(tsqlParser.FAST_FORWARD, 0)

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def SCROLL_LOCKS(self):
            return self.getToken(tsqlParser.SCROLL_LOCKS, 0)

        def OPTIMISTIC(self):
            return self.getToken(tsqlParser.OPTIMISTIC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_declare_set_cursor_common




    def declare_set_cursor_common(self):

        localctx = tsqlParser.Declare_set_cursor_commonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_declare_set_cursor_common)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==290 or _la==317:
                self.state = 1991
                _la = self._input.LA(1)
                if not(_la==290 or _la==317):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==287 or _la==390:
                self.state = 1994
                _la = self._input.LA(1)
                if not(_la==287 or _la==390):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 269)) & ~0x3f) == 0 and ((1 << (_la - 269)) & 4398046511361) != 0 or _la==404:
                self.state = 1997
                _la = self._input.LA(1)
                if not((((_la - 269)) & ~0x3f) == 0 and ((1 << (_la - 269)) & 4398046511361) != 0 or _la==404):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 350)) & ~0x3f) == 0 and ((1 << (_la - 350)) & 2199025352705) != 0:
                self.state = 2000
                _la = self._input.LA(1)
                if not((((_la - 350)) & ~0x3f) == 0 and ((1 << (_la - 350)) & 2199025352705) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==428:
                self.state = 2003
                self.match(tsqlParser.TYPE_WARNING)


            self.state = 2006
            self.match(tsqlParser.FOR)
            self.state = 2007
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fetch_cursorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FETCH(self):
            return self.getToken(tsqlParser.FETCH, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LOCAL_ID)
            else:
                return self.getToken(tsqlParser.LOCAL_ID, i)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def NEXT(self):
            return self.getToken(tsqlParser.NEXT, 0)

        def PRIOR(self):
            return self.getToken(tsqlParser.PRIOR, 0)

        def FIRST(self):
            return self.getToken(tsqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(tsqlParser.LAST, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def ABSOLUTE(self):
            return self.getToken(tsqlParser.ABSOLUTE, 0)

        def RELATIVE(self):
            return self.getToken(tsqlParser.RELATIVE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_fetch_cursor




    def fetch_cursor(self):

        localctx = tsqlParser.Fetch_cursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_fetch_cursor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2009
            self.match(tsqlParser.FETCH)
            self.state = 2019
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.state = 2016
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [108]:
                    self.state = 2010
                    self.match(tsqlParser.NEXT)
                    pass
                elif token in [363]:
                    self.state = 2011
                    self.match(tsqlParser.PRIOR)
                    pass
                elif token in [281]:
                    self.state = 2012
                    self.match(tsqlParser.FIRST)
                    pass
                elif token in [313]:
                    self.state = 2013
                    self.match(tsqlParser.LAST)
                    pass
                elif token in [206, 376]:
                    self.state = 2014
                    _la = self._input.LA(1)
                    if not(_la==206 or _la==376):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2015
                    self.expression(0)
                    pass
                elif token in [77]:
                    pass
                else:
                    pass
                self.state = 2018
                self.match(tsqlParser.FROM)


            self.state = 2022
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
            if la_ == 1:
                self.state = 2021
                self.match(tsqlParser.GLOBAL)


            self.state = 2024
            self.cursor_name()
            self.state = 2034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 2025
                self.match(tsqlParser.INTO)
                self.state = 2026
                self.match(tsqlParser.LOCAL_ID)
                self.state = 2031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==474:
                    self.state = 2027
                    self.match(tsqlParser.COMMA)
                    self.state = 2028
                    self.match(tsqlParser.LOCAL_ID)
                    self.state = 2033
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2037
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
            if la_ == 1:
                self.state = 2036
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_specialContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # R_idContext
            self.value = None # R_idContext
            self.set_type = None # Token

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def constant_LOCAL_ID(self):
            return self.getTypedRuleContext(tsqlParser.Constant_LOCAL_IDContext,0)


        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def ISOLATION(self):
            return self.getToken(tsqlParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(tsqlParser.LEVEL, 0)

        def TRANSACTION(self):
            return self.getToken(tsqlParser.TRANSACTION, 0)

        def READ(self):
            return self.getToken(tsqlParser.READ, 0)

        def UNCOMMITTED(self):
            return self.getToken(tsqlParser.UNCOMMITTED, 0)

        def COMMITTED(self):
            return self.getToken(tsqlParser.COMMITTED, 0)

        def REPEATABLE(self):
            return self.getToken(tsqlParser.REPEATABLE, 0)

        def SNAPSHOT(self):
            return self.getToken(tsqlParser.SNAPSHOT, 0)

        def SERIALIZABLE(self):
            return self.getToken(tsqlParser.SERIALIZABLE, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_table_nameContext,0)


        def IDENTITY_INSERT(self):
            return self.getToken(tsqlParser.IDENTITY_INSERT, 0)

        def ANSI_NULLS(self):
            return self.getToken(tsqlParser.ANSI_NULLS, 0)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(tsqlParser.QUOTED_IDENTIFIER, 0)

        def ANSI_PADDING(self):
            return self.getToken(tsqlParser.ANSI_PADDING, 0)

        def STATISTICS(self):
            return self.getToken(tsqlParser.STATISTICS, 0)

        def TIME(self):
            return self.getToken(tsqlParser.TIME, 0)

        def IO(self):
            return self.getToken(tsqlParser.IO, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_set_special




    def set_special(self):

        localctx = tsqlParser.Set_specialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_set_special)
        self._la = 0 # Token type
        try:
            self.state = 2086
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2039
                self.match(tsqlParser.SET)
                self.state = 2040
                localctx.key = self.r_id()
                self.state = 2044
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 450]:
                    self.state = 2041
                    localctx.value = self.r_id()
                    pass
                elif token in [448, 449, 451, 452, 453, 454, 471, 480, 481]:
                    self.state = 2042
                    self.constant_LOCAL_ID()
                    pass
                elif token in [117, 119]:
                    self.state = 2043
                    self.on_off()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2047
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
                if la_ == 1:
                    self.state = 2046
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2049
                self.match(tsqlParser.SET)
                self.state = 2050
                localctx.set_type = self.match(tsqlParser.TRANSACTION)
                self.state = 2051
                self.match(tsqlParser.ISOLATION)
                self.state = 2052
                self.match(tsqlParser.LEVEL)
                self.state = 2061
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
                if la_ == 1:
                    self.state = 2053
                    self.match(tsqlParser.READ)
                    self.state = 2054
                    self.match(tsqlParser.UNCOMMITTED)
                    pass

                elif la_ == 2:
                    self.state = 2055
                    self.match(tsqlParser.READ)
                    self.state = 2056
                    self.match(tsqlParser.COMMITTED)
                    pass

                elif la_ == 3:
                    self.state = 2057
                    self.match(tsqlParser.REPEATABLE)
                    self.state = 2058
                    self.match(tsqlParser.READ)
                    pass

                elif la_ == 4:
                    self.state = 2059
                    self.match(tsqlParser.SNAPSHOT)
                    pass

                elif la_ == 5:
                    self.state = 2060
                    self.match(tsqlParser.SERIALIZABLE)
                    pass


                self.state = 2064
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
                if la_ == 1:
                    self.state = 2063
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2066
                self.match(tsqlParser.SET)
                self.state = 2067
                localctx.set_type = self.match(tsqlParser.IDENTITY_INSERT)
                self.state = 2068
                self.full_table_name()
                self.state = 2069
                self.on_off()
                self.state = 2071
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
                if la_ == 1:
                    self.state = 2070
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2073
                self.match(tsqlParser.SET)
                self.state = 2074
                localctx.set_type = self.match(tsqlParser.ANSI_NULLS)
                self.state = 2075
                self.on_off()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2076
                self.match(tsqlParser.SET)
                self.state = 2077
                localctx.set_type = self.match(tsqlParser.QUOTED_IDENTIFIER)
                self.state = 2078
                self.on_off()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2079
                self.match(tsqlParser.SET)
                self.state = 2080
                localctx.set_type = self.match(tsqlParser.ANSI_PADDING)
                self.state = 2081
                self.on_off()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2082
                self.match(tsqlParser.SET)
                self.state = 2083
                localctx.set_type = self.match(tsqlParser.STATISTICS)
                self.state = 2084
                _la = self._input.LA(1)
                if not(_la==307 or _la==420):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2085
                self.on_off()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_LOCAL_IDContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_constant_LOCAL_ID




    def constant_LOCAL_ID(self):

        localctx = tsqlParser.Constant_LOCAL_IDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_constant_LOCAL_ID)
        try:
            self.state = 2090
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [449, 451, 452, 453, 454, 471, 480, 481]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2088
                self.constant()
                pass
            elif token in [448]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2089
                self.match(tsqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Binary_operator_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def STAR(self):
            return self.getToken(tsqlParser.STAR, 0)
        def DIVIDE(self):
            return self.getToken(tsqlParser.DIVIDE, 0)
        def MODULE(self):
            return self.getToken(tsqlParser.MODULE, 0)
        def PLUS(self):
            return self.getToken(tsqlParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(tsqlParser.MINUS, 0)
        def BIT_AND(self):
            return self.getToken(tsqlParser.BIT_AND, 0)
        def BIT_XOR(self):
            return self.getToken(tsqlParser.BIT_XOR, 0)
        def BIT_OR(self):
            return self.getToken(tsqlParser.BIT_OR, 0)
        def comparison_operator(self):
            return self.getTypedRuleContext(tsqlParser.Comparison_operatorContext,0)



    class Unary_operator_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def BIT_NOT(self):
            return self.getToken(tsqlParser.BIT_NOT, 0)
        def PLUS(self):
            return self.getToken(tsqlParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(tsqlParser.MINUS, 0)


    class Function_call_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)
        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)



    class Conversion_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def AT(self):
            return self.getToken(tsqlParser.AT, 0)
        def TIME(self):
            return self.getToken(tsqlParser.TIME, 0)
        def ZONE(self):
            return self.getToken(tsqlParser.ZONE, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)



    class Case_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.caseExpr = None # ExpressionContext
            self.elseExpr = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(tsqlParser.CASE, 0)
        def END(self):
            return self.getToken(tsqlParser.END, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def switch_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Switch_sectionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Switch_sectionContext,i)

        def ELSE(self):
            return self.getToken(tsqlParser.ELSE, 0)
        def switch_search_condition_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Switch_search_condition_sectionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Switch_search_condition_sectionContext,i)



    class Column_ref_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def full_column_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_column_nameContext,0)



    class String_agg_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def string_agg(self):
            return self.getTypedRuleContext(tsqlParser.String_aggContext,0)



    class Percentile_cont_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def percentile_cont(self):
            return self.getTypedRuleContext(tsqlParser.Percentile_contContext,0)



    class Primitive_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)
        def NULL_(self):
            return self.getToken(tsqlParser.NULL_, 0)
        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)
        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)



    class Bracket_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)


    class Subquery_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)
        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)


    class Over_clause_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)



    class Xml_method_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def DOT(self):
            return self.getToken(tsqlParser.DOT, 0)
        def xml_method_call(self):
            return self.getTypedRuleContext(tsqlParser.Xml_method_callContext,0)




    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = tsqlParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 208
        self.enterRecursionRule(localctx, 208, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2139
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2093
                self.match(tsqlParser.DEFAULT)
                pass

            elif la_ == 2:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2094
                self.match(tsqlParser.NULL_)
                pass

            elif la_ == 3:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2095
                self.match(tsqlParser.LOCAL_ID)
                pass

            elif la_ == 4:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2096
                self.constant()
                pass

            elif la_ == 5:
                localctx = tsqlParser.Function_call_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2097
                self.function_call()
                pass

            elif la_ == 6:
                localctx = tsqlParser.Case_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2098
                self.match(tsqlParser.CASE)
                self.state = 2099
                localctx.caseExpr = self.expression(0)
                self.state = 2101 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2100
                    self.switch_section()
                    self.state = 2103 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==200):
                        break

                self.state = 2107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==58:
                    self.state = 2105
                    self.match(tsqlParser.ELSE)
                    self.state = 2106
                    localctx.elseExpr = self.expression(0)


                self.state = 2109
                self.match(tsqlParser.END)
                pass

            elif la_ == 7:
                localctx = tsqlParser.Case_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2111
                self.match(tsqlParser.CASE)
                self.state = 2113 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2112
                    self.switch_search_condition_section()
                    self.state = 2115 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==200):
                        break

                self.state = 2119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==58:
                    self.state = 2117
                    self.match(tsqlParser.ELSE)
                    self.state = 2118
                    localctx.elseExpr = self.expression(0)


                self.state = 2121
                self.match(tsqlParser.END)
                pass

            elif la_ == 8:
                localctx = tsqlParser.Column_ref_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2123
                self.full_column_name()
                pass

            elif la_ == 9:
                localctx = tsqlParser.Bracket_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2124
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2125
                self.expression(0)
                self.state = 2126
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = tsqlParser.Subquery_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2128
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2129
                self.subquery()
                self.state = 2130
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 11:
                localctx = tsqlParser.Unary_operator_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2132
                localctx.op = self.match(tsqlParser.BIT_NOT)
                self.state = 2133
                self.expression(9)
                pass

            elif la_ == 12:
                localctx = tsqlParser.Unary_operator_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2134
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==480 or _la==481):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2135
                self.expression(7)
                pass

            elif la_ == 13:
                localctx = tsqlParser.Over_clause_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2136
                self.over_clause()
                pass

            elif la_ == 14:
                localctx = tsqlParser.Percentile_cont_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2137
                self.percentile_cont()
                pass

            elif la_ == 15:
                localctx = tsqlParser.String_agg_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2138
                self.string_agg()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2164
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,314,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2162
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
                    if la_ == 1:
                        localctx = tsqlParser.Conversion_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2141
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 2142
                        self.match(tsqlParser.AT)
                        self.state = 2143
                        self.match(tsqlParser.TIME)
                        self.state = 2144
                        self.match(tsqlParser.ZONE)
                        self.state = 2145
                        localctx.right = self.expression(16)
                        pass

                    elif la_ == 2:
                        localctx = tsqlParser.Binary_operator_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2146
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 2147
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la - 477)) & ~0x3f) == 0 and ((1 << (_la - 477)) & 7) != 0):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2148
                        localctx.right = self.expression(9)
                        pass

                    elif la_ == 3:
                        localctx = tsqlParser.Binary_operator_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2149
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 2150
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la - 480)) & ~0x3f) == 0 and ((1 << (_la - 480)) & 59) != 0):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2151
                        localctx.right = self.expression(7)
                        pass

                    elif la_ == 4:
                        localctx = tsqlParser.Binary_operator_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2152
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 2153
                        self.comparison_operator()
                        self.state = 2154
                        localctx.right = self.expression(6)
                        pass

                    elif la_ == 5:
                        localctx = tsqlParser.Function_call_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2156
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 2157
                        self.match(tsqlParser.COLLATE)
                        self.state = 2158
                        self.r_id()
                        pass

                    elif la_ == 6:
                        localctx = tsqlParser.Xml_method_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2159
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2160
                        self.match(tsqlParser.DOT)
                        self.state = 2161
                        self.xml_method_call()
                        pass

             
                self.state = 2166
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,314,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Xml_method_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table = None # R_idContext
            self.column = None # R_idContext

        def simple_xml_method_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_xml_method_nameContext,0)


        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LR_BRACKET)
            else:
                return self.getToken(tsqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.RR_BRACKET)
            else:
                return self.getToken(tsqlParser.RR_BRACKET, i)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def NODES(self):
            return self.getToken(tsqlParser.NODES, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_xml_method_call




    def xml_method_call(self):

        localctx = tsqlParser.Xml_method_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_xml_method_call)
        self._la = 0 # Token type
        try:
            self.state = 2186
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [196, 274, 365]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2167
                self.simple_xml_method_name()
                self.state = 2168
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2170
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 288106440032256) != 0 or (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -9222381634573827935) != 0 or (((_la - 152)) & ~0x3f) == 0 and ((1 << (_la - 152)) & 4629718039189852161) != 0 or (((_la - 217)) & ~0x3f) == 0 and ((1 << (_la - 217)) & 2203052274704250241) != 0 or (((_la - 281)) & ~0x3f) == 0 and ((1 << (_la - 281)) & -2942381077000725761) != 0 or (((_la - 347)) & ~0x3f) == 0 and ((1 << (_la - 347)) & -23397629359030529) != 0 or (((_la - 411)) & ~0x3f) == 0 and ((1 << (_la - 411)) & 3458782073792185291) != 0 or (((_la - 480)) & ~0x3f) == 0 and ((1 << (_la - 480)) & 7) != 0:
                    self.state = 2169
                    self.expression_list()


                self.state = 2172
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [338]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2174
                self.match(tsqlParser.NODES)
                self.state = 2175
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 288106440032256) != 0 or (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -9222381634573827935) != 0 or (((_la - 152)) & ~0x3f) == 0 and ((1 << (_la - 152)) & 4629718039189852161) != 0 or (((_la - 217)) & ~0x3f) == 0 and ((1 << (_la - 217)) & 2203052274704250241) != 0 or (((_la - 281)) & ~0x3f) == 0 and ((1 << (_la - 281)) & -2942381077000725761) != 0 or (((_la - 347)) & ~0x3f) == 0 and ((1 << (_la - 347)) & -23397629359030529) != 0 or (((_la - 411)) & ~0x3f) == 0 and ((1 << (_la - 411)) & 3458782073792185291) != 0 or (((_la - 480)) & ~0x3f) == 0 and ((1 << (_la - 480)) & 7) != 0:
                    self.state = 2176
                    self.expression_list()


                self.state = 2179
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2180
                self.match(tsqlParser.AS)
                self.state = 2181
                localctx.table = self.r_id()
                self.state = 2182
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2183
                localctx.column = self.r_id()
                self.state = 2184
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_xml_method_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUERY(self):
            return self.getToken(tsqlParser.QUERY, 0)

        def VALUE(self):
            return self.getToken(tsqlParser.VALUE, 0)

        def EXIST(self):
            return self.getToken(tsqlParser.EXIST, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_simple_xml_method_name




    def simple_xml_method_name(self):

        localctx = tsqlParser.Simple_xml_method_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_simple_xml_method_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2188
            _la = self._input.LA(1)
            if not(_la==196 or _la==274 or _la==365):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_(self):
            return self.getToken(tsqlParser.NULL_, 0)

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(tsqlParser.Constant_expressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_constant_expression




    def constant_expression(self):

        localctx = tsqlParser.Constant_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_constant_expression)
        try:
            self.state = 2198
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [113]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2190
                self.match(tsqlParser.NULL_)
                pass
            elif token in [449, 451, 452, 453, 454, 471, 480, 481]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2191
                self.constant()
                pass
            elif token in [25, 35, 41, 42, 66, 71, 73, 84, 87, 100, 104, 105, 108, 114, 115, 152, 164, 168, 173, 184, 185, 186, 196, 206, 214, 217, 224, 225, 227, 229, 230, 231, 232, 235, 236, 237, 239, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 255, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 330, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 361, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 398, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 414, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 450]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2192
                self.function_call()
                pass
            elif token in [448]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2193
                self.match(tsqlParser.LOCAL_ID)
                pass
            elif token in [472]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2194
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2195
                self.constant_expression()
                self.state = 2196
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_subquery




    def subquery(self):

        localctx = tsqlParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2200
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Common_table_expressionContext,i)


        def XMLNAMESPACES(self):
            return self.getToken(tsqlParser.XMLNAMESPACES, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_with_expression




    def with_expression(self):

        localctx = tsqlParser.With_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_with_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2202
            self.match(tsqlParser.WITH)
            self.state = 2205
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
            if la_ == 1:
                self.state = 2203
                self.match(tsqlParser.XMLNAMESPACES)
                self.state = 2204
                self.match(tsqlParser.COMMA)


            self.state = 2207
            self.common_table_expression()
            self.state = 2212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==474:
                self.state = 2208
                self.match(tsqlParser.COMMA)
                self.state = 2209
                self.common_table_expression()
                self.state = 2214
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expression_name = None # R_idContext

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LR_BRACKET)
            else:
                return self.getToken(tsqlParser.LR_BRACKET, i)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.RR_BRACKET)
            else:
                return self.getToken(tsqlParser.RR_BRACKET, i)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_common_table_expression




    def common_table_expression(self):

        localctx = tsqlParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2215
            localctx.expression_name = self.r_id()
            self.state = 2220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==472:
                self.state = 2216
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2217
                self.column_name_list()
                self.state = 2218
                self.match(tsqlParser.RR_BRACKET)


            self.state = 2222
            self.match(tsqlParser.AS)
            self.state = 2223
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2224
            self.select_statement()
            self.state = 2225
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.udt_column_name = None # R_idContext
            self.method_name = None # R_idContext

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def full_column_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_column_nameContext,0)


        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def assignment_operator(self):
            return self.getTypedRuleContext(tsqlParser.Assignment_operatorContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def DOT(self):
            return self.getToken(tsqlParser.DOT, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_update_elem




    def update_elem(self):

        localctx = tsqlParser.Update_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_update_elem)
        try:
            self.state = 2243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2229
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 450]:
                    self.state = 2227
                    self.full_column_name()
                    pass
                elif token in [448]:
                    self.state = 2228
                    localctx.name = self.match(tsqlParser.LOCAL_ID)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2233
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [455]:
                    self.state = 2231
                    self.match(tsqlParser.EQUAL)
                    pass
                elif token in [459, 460, 461, 462, 463, 464, 465, 466]:
                    self.state = 2232
                    self.assignment_operator()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2235
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2236
                localctx.udt_column_name = self.r_id()
                self.state = 2237
                self.match(tsqlParser.DOT)
                self.state = 2238
                localctx.method_name = self.r_id()
                self.state = 2239
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2240
                self.expression_list()
                self.state = 2241
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Search_condition_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_conditionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_search_condition_list




    def search_condition_list(self):

        localctx = tsqlParser.Search_condition_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_search_condition_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2245
            self.search_condition(0)
            self.state = 2250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==474:
                self.state = 2246
                self.match(tsqlParser.COMMA)
                self.state = 2247
                self.search_condition(0)
                self.state = 2252
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Search_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_search_condition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Search_cond_orContext(Search_conditionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Search_conditionContext
            super().__init__(parser)
            self.left = None # Search_conditionContext
            self.op = None # Token
            self.right = None # Search_conditionContext
            self.copyFrom(ctx)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_conditionContext,i)

        def OR(self):
            return self.getToken(tsqlParser.OR, 0)


    class Search_cond_predContext(Search_conditionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Search_conditionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(tsqlParser.PredicateContext,0)



    class Search_cond_andContext(Search_conditionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Search_conditionContext
            super().__init__(parser)
            self.left = None # Search_conditionContext
            self.op = None # Token
            self.right = None # Search_conditionContext
            self.copyFrom(ctx)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_conditionContext,i)

        def AND(self):
            return self.getToken(tsqlParser.AND, 0)



    def search_condition(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = tsqlParser.Search_conditionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 226
        self.enterRecursionRule(localctx, 226, self.RULE_search_condition, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = tsqlParser.Search_cond_predContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2254
            self.predicate()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2264
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,327,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2262
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
                    if la_ == 1:
                        localctx = tsqlParser.Search_cond_andContext(self, tsqlParser.Search_conditionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_search_condition)
                        self.state = 2256
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2257
                        localctx.op = self.match(tsqlParser.AND)
                        self.state = 2258
                        localctx.right = self.search_condition(4)
                        pass

                    elif la_ == 2:
                        localctx = tsqlParser.Search_cond_orContext(self, tsqlParser.Search_conditionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_search_condition)
                        self.state = 2259
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2260
                        localctx.op = self.match(tsqlParser.OR)
                        self.state = 2261
                        localctx.right = self.search_condition(3)
                        pass

             
                self.state = 2266
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,327,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_predicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Binary_in_expressionContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def IN(self):
            return self.getToken(tsqlParser.IN, 0)
        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)


    class Unary_operator_expression2Context(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.op = None # Token
            self.expr = None # SubqueryContext
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)
        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)
        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)



    class Binary_mod_expressionContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right_1 = None # ExpressionContext
            self.right_2 = None # ExpressionContext
            self.copyFrom(ctx)

        def AND(self):
            return self.getToken(tsqlParser.AND, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def BETWEEN(self):
            return self.getToken(tsqlParser.BETWEEN, 0)
        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)
        def LIKE(self):
            return self.getToken(tsqlParser.LIKE, 0)
        def ESCAPE(self):
            return self.getToken(tsqlParser.ESCAPE, 0)


    class Unary_operator_expression3Context(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.op = None # Token
            self.expr = None # PredicateContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)
        def predicate(self):
            return self.getTypedRuleContext(tsqlParser.PredicateContext,0)



    class Bracket_search_expressionContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)
        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)


    class Sublink_expressionContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.test_expr = None # ExpressionContext
            self.op = None # Comparison_operatorContext
            self.pref = None # Token
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)
        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def comparison_operator(self):
            return self.getTypedRuleContext(tsqlParser.Comparison_operatorContext,0)

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)
        def SOME(self):
            return self.getToken(tsqlParser.SOME, 0)
        def ANY(self):
            return self.getToken(tsqlParser.ANY, 0)


    class Binary_operator_expression3Context(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # Null_notnullContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def IS(self):
            return self.getToken(tsqlParser.IS, 0)
        def null_notnull(self):
            return self.getTypedRuleContext(tsqlParser.Null_notnullContext,0)



    class Binary_operator_expression2Context(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Comparison_operatorContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def comparison_operator(self):
            return self.getTypedRuleContext(tsqlParser.Comparison_operatorContext,0)



    class Decimal_expressionContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)



    def predicate(self):

        localctx = tsqlParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 2325
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Unary_operator_expression3Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2267
                localctx.op = self.match(tsqlParser.NOT)
                self.state = 2268
                localctx.expr = self.predicate()
                pass

            elif la_ == 2:
                localctx = tsqlParser.Unary_operator_expression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2269
                localctx.op = self.match(tsqlParser.EXISTS)
                self.state = 2270
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2271
                localctx.expr = self.subquery()
                self.state = 2272
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                localctx = tsqlParser.Binary_operator_expression2Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2274
                localctx.left = self.expression(0)
                self.state = 2275
                localctx.op = self.comparison_operator()
                self.state = 2276
                localctx.right = self.expression(0)
                pass

            elif la_ == 4:
                localctx = tsqlParser.Sublink_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2278
                localctx.test_expr = self.expression(0)
                self.state = 2279
                localctx.op = self.comparison_operator()
                self.state = 2280
                localctx.pref = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==2 or _la==5 or _la==169):
                    localctx.pref = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2281
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2282
                self.subquery()
                self.state = 2283
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                localctx = tsqlParser.Binary_mod_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2285
                localctx.left = self.expression(0)
                self.state = 2287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==112:
                    self.state = 2286
                    self.match(tsqlParser.NOT)


                self.state = 2289
                localctx.op = self.match(tsqlParser.BETWEEN)
                self.state = 2290
                localctx.right_1 = self.expression(0)
                self.state = 2291
                self.match(tsqlParser.AND)
                self.state = 2292
                localctx.right_2 = self.expression(0)
                pass

            elif la_ == 6:
                localctx = tsqlParser.Binary_in_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2294
                localctx.left = self.expression(0)
                self.state = 2296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==112:
                    self.state = 2295
                    self.match(tsqlParser.NOT)


                self.state = 2298
                localctx.op = self.match(tsqlParser.IN)
                self.state = 2299
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2302
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
                if la_ == 1:
                    self.state = 2300
                    self.subquery()
                    pass

                elif la_ == 2:
                    self.state = 2301
                    self.expression_list()
                    pass


                self.state = 2304
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 7:
                localctx = tsqlParser.Binary_mod_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2306
                localctx.left = self.expression(0)
                self.state = 2308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==112:
                    self.state = 2307
                    self.match(tsqlParser.NOT)


                self.state = 2310
                localctx.op = self.match(tsqlParser.LIKE)
                self.state = 2311
                localctx.right_1 = self.expression(0)
                self.state = 2314
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
                if la_ == 1:
                    self.state = 2312
                    self.match(tsqlParser.ESCAPE)
                    self.state = 2313
                    localctx.right_2 = self.expression(0)


                pass

            elif la_ == 8:
                localctx = tsqlParser.Binary_operator_expression3Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2316
                localctx.left = self.expression(0)
                self.state = 2317
                localctx.op = self.match(tsqlParser.IS)
                self.state = 2318
                localctx.right = self.null_notnull()
                pass

            elif la_ == 9:
                localctx = tsqlParser.Bracket_search_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2320
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2321
                self.search_condition(0)
                self.state = 2322
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = tsqlParser.Decimal_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 2324
                self.match(tsqlParser.DECIMAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_query_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Bracket_query_expressionContext(Query_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Query_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)
        def query_expression(self):
            return self.getTypedRuleContext(tsqlParser.Query_expressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)


    class Query_specification_expressionContext(Query_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Query_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query_specification(self):
            return self.getTypedRuleContext(tsqlParser.Query_specificationContext,0)



    class Union_query_expressionContext(Query_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Query_expressionContext
            super().__init__(parser)
            self.left = None # Query_expressionContext
            self.op = None # Union_opContext
            self.right = None # Query_expressionContext
            self.copyFrom(ctx)

        def query_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Query_expressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Query_expressionContext,i)

        def union_op(self):
            return self.getTypedRuleContext(tsqlParser.Union_opContext,0)




    def query_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = tsqlParser.Query_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 230
        self.enterRecursionRule(localctx, 230, self.RULE_query_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2333
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [472]:
                localctx = tsqlParser.Bracket_query_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2328
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2329
                self.query_expression(0)
                self.state = 2330
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [160]:
                localctx = tsqlParser.Query_specification_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2332
                self.query_specification()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2341
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,335,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = tsqlParser.Union_query_expressionContext(self, tsqlParser.Query_expressionContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_query_expression)
                    self.state = 2335
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 2336
                    localctx.op = self.union_op()
                    self.state = 2337
                    localctx.right = self.query_expression(3) 
                self.state = 2343
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,335,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Union_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(tsqlParser.UNION, 0)

        def EXCEPT(self):
            return self.getToken(tsqlParser.EXCEPT, 0)

        def INTERSECT(self):
            return self.getToken(tsqlParser.INTERSECT, 0)

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_union_op




    def union_op(self):

        localctx = tsqlParser.Union_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_union_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2350
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [188]:
                self.state = 2344
                self.match(tsqlParser.UNION)
                self.state = 2346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 2345
                    self.match(tsqlParser.ALL)


                pass
            elif token in [62]:
                self.state = 2348
                self.match(tsqlParser.EXCEPT)
                pass
            elif token in [94]:
                self.state = 2349
                self.match(tsqlParser.INTERSECT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cross_apply_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def cross_apply_expression(self):
            return self.getTypedRuleContext(tsqlParser.Cross_apply_expressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def query_expression(self):
            return self.getTypedRuleContext(tsqlParser.Query_expressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def table_value_constructor(self):
            return self.getTypedRuleContext(tsqlParser.Table_value_constructorContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_cross_apply_expression




    def cross_apply_expression(self):

        localctx = tsqlParser.Cross_apply_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_cross_apply_expression)
        try:
            self.state = 2359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,338,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2352
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2353
                self.cross_apply_expression()
                self.state = 2354
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2356
                self.query_expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2357
                self.expression(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2358
                self.table_value_constructor()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pref = None # Token
            self.where = None # Search_conditionContext
            self.having = None # Search_conditionContext

        def SELECT(self):
            return self.getToken(tsqlParser.SELECT, 0)

        def select_list(self):
            return self.getTypedRuleContext(tsqlParser.Select_listContext,0)


        def top_clause(self):
            return self.getTypedRuleContext(tsqlParser.Top_clauseContext,0)


        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_table_nameContext,0)


        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def table_sources(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourcesContext,0)


        def CROSS(self):
            return self.getToken(tsqlParser.CROSS, 0)

        def APPLY(self):
            return self.getToken(tsqlParser.APPLY, 0)

        def cross_apply_expression(self):
            return self.getTypedRuleContext(tsqlParser.Cross_apply_expressionContext,0)


        def WHERE(self):
            return self.getToken(tsqlParser.WHERE, 0)

        def GROUP(self):
            return self.getToken(tsqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(tsqlParser.BY, 0)

        def group_by_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Group_by_itemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Group_by_itemContext,i)


        def group_by_grouping_sets(self):
            return self.getTypedRuleContext(tsqlParser.Group_by_grouping_setsContext,0)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def HAVING(self):
            return self.getToken(tsqlParser.HAVING, 0)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_conditionContext,i)


        def CUBE(self):
            return self.getToken(tsqlParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(tsqlParser.ROLLUP, 0)

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(tsqlParser.DISTINCT, 0)

        def output_dml_list_elem(self):
            return self.getTypedRuleContext(tsqlParser.Output_dml_list_elemContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_query_specification




    def query_specification(self):

        localctx = tsqlParser.Query_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_query_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2361
            self.match(tsqlParser.SELECT)
            self.state = 2363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2 or _la==53:
                self.state = 2362
                localctx.pref = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==2 or _la==53):
                    localctx.pref = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==179:
                self.state = 2365
                self.top_clause()


            self.state = 2368
            self.select_list()
            self.state = 2371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
            if la_ == 1:
                self.state = 2369
                self.match(tsqlParser.INTO)
                self.state = 2370
                self.full_table_name()


            self.state = 2375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
            if la_ == 1:
                self.state = 2373
                self.match(tsqlParser.FROM)
                self.state = 2374
                self.table_sources()


            self.state = 2383
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
            if la_ == 1:
                self.state = 2377
                self.match(tsqlParser.CROSS)
                self.state = 2378
                self.match(tsqlParser.APPLY)
                self.state = 2379
                self.cross_apply_expression()
                self.state = 2381
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
                if la_ == 1:
                    self.state = 2380
                    self.output_dml_list_elem()




            self.state = 2387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
            if la_ == 1:
                self.state = 2385
                self.match(tsqlParser.WHERE)
                self.state = 2386
                localctx.where = self.search_condition(0)


            self.state = 2399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,347,self._ctx)
            if la_ == 1:
                self.state = 2389
                self.match(tsqlParser.GROUP)
                self.state = 2390
                self.match(tsqlParser.BY)
                self.state = 2391
                self.group_by_item()
                self.state = 2396
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,346,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2392
                        self.match(tsqlParser.COMMA)
                        self.state = 2393
                        self.group_by_item() 
                    self.state = 2398
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,346,self._ctx)



            self.state = 2402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
            if la_ == 1:
                self.state = 2401
                self.group_by_grouping_sets()


            self.state = 2406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
            if la_ == 1:
                self.state = 2404
                self.match(tsqlParser.WITH)
                self.state = 2405
                _la = self._input.LA(1)
                if not(_la==246 or _la==381):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2410
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
            if la_ == 1:
                self.state = 2408
                self.match(tsqlParser.HAVING)
                self.state = 2409
                localctx.having = self.search_condition(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_grouping_setsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(tsqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(tsqlParser.BY, 0)

        def GROUPING(self):
            return self.getToken(tsqlParser.GROUPING, 0)

        def SETS(self):
            return self.getToken(tsqlParser.SETS, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def grouping_set(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Grouping_setContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Grouping_setContext,i)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_group_by_grouping_sets




    def group_by_grouping_sets(self):

        localctx = tsqlParser.Group_by_grouping_setsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_group_by_grouping_sets)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2412
            self.match(tsqlParser.GROUP)
            self.state = 2413
            self.match(tsqlParser.BY)
            self.state = 2414
            self.match(tsqlParser.GROUPING)
            self.state = 2415
            self.match(tsqlParser.SETS)
            self.state = 2416
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2417
            self.grouping_set()
            self.state = 2422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==474:
                self.state = 2418
                self.match(tsqlParser.COMMA)
                self.state = 2419
                self.grouping_set()
                self.state = 2424
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2425
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def group_by_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Group_by_itemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Group_by_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_grouping_set




    def grouping_set(self):

        localctx = tsqlParser.Grouping_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_grouping_set)
        self._la = 0 # Token type
        try:
            self.state = 2441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,353,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2427
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2428
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2429
                self.group_by_item()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2430
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2431
                self.group_by_item()
                self.state = 2436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==474:
                    self.state = 2432
                    self.match(tsqlParser.COMMA)
                    self.state = 2433
                    self.group_by_item()
                    self.state = 2438
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2439
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(tsqlParser.TOP, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def TIES(self):
            return self.getToken(tsqlParser.TIES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_top_clause




    def top_clause(self):

        localctx = tsqlParser.Top_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_top_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2443
            self.match(tsqlParser.TOP)
            self.state = 2444
            self.expression(0)
            self.state = 2446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 2445
                self.match(tsqlParser.PERCENT)


            self.state = 2450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==203:
                self.state = 2448
                self.match(tsqlParser.WITH)
                self.state = 2449
                self.match(tsqlParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_clause_dmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(tsqlParser.TOP, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_top_clause_dm




    def top_clause_dm(self):

        localctx = tsqlParser.Top_clause_dmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_top_clause_dm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2452
            self.match(tsqlParser.TOP)
            self.state = 2453
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2454
            self.expression(0)
            self.state = 2455
            self.match(tsqlParser.RR_BRACKET)
            self.state = 2457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 2456
                self.match(tsqlParser.PERCENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.offset = None # ExpressionContext

        def ORDER(self):
            return self.getToken(tsqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(tsqlParser.BY, 0)

        def order_by_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Order_by_expressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Order_by_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def OFFSET(self):
            return self.getToken(tsqlParser.OFFSET, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def ROW(self):
            return self.getToken(tsqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def fetch_expression(self):
            return self.getTypedRuleContext(tsqlParser.Fetch_expressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_order_by_clause




    def order_by_clause(self):

        localctx = tsqlParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2459
            self.match(tsqlParser.ORDER)
            self.state = 2460
            self.match(tsqlParser.BY)
            self.state = 2461
            self.order_by_expression()
            self.state = 2466
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,357,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2462
                    self.match(tsqlParser.COMMA)
                    self.state = 2463
                    self.order_by_expression() 
                self.state = 2468
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,357,self._ctx)

            self.state = 2475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
            if la_ == 1:
                self.state = 2469
                self.match(tsqlParser.OFFSET)
                self.state = 2470
                localctx.offset = self.expression(0)
                self.state = 2471
                _la = self._input.LA(1)
                if not(_la==384 or _la==386):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2473
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,358,self._ctx)
                if la_ == 1:
                    self.state = 2472
                    self.fetch_expression()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fetch_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FETCH(self):
            return self.getToken(tsqlParser.FETCH, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def FIRST(self):
            return self.getToken(tsqlParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(tsqlParser.NEXT, 0)

        def ROW(self):
            return self.getToken(tsqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_fetch_expression




    def fetch_expression(self):

        localctx = tsqlParser.Fetch_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_fetch_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2477
            self.match(tsqlParser.FETCH)
            self.state = 2478
            _la = self._input.LA(1)
            if not(_la==108 or _la==281):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2479
            self.expression(0)
            self.state = 2480
            _la = self._input.LA(1)
            if not(_la==384 or _la==386):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2481
            self.match(tsqlParser.ONLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def BROWSE(self):
            return self.getToken(tsqlParser.BROWSE, 0)

        def XML(self):
            return self.getToken(tsqlParser.XML, 0)

        def AUTO(self):
            return self.getToken(tsqlParser.AUTO, 0)

        def xml_common_directives(self):
            return self.getTypedRuleContext(tsqlParser.Xml_common_directivesContext,0)


        def PATH(self):
            return self.getToken(tsqlParser.PATH, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_for_clause




    def for_clause(self):

        localctx = tsqlParser.For_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_for_clause)
        try:
            self.state = 2502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2483
                self.match(tsqlParser.FOR)
                self.state = 2484
                self.match(tsqlParser.BROWSE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2485
                self.match(tsqlParser.FOR)
                self.state = 2486
                self.match(tsqlParser.XML)
                self.state = 2487
                self.match(tsqlParser.AUTO)
                self.state = 2489
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
                if la_ == 1:
                    self.state = 2488
                    self.xml_common_directives()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2491
                self.match(tsqlParser.FOR)
                self.state = 2492
                self.match(tsqlParser.XML)
                self.state = 2493
                self.match(tsqlParser.PATH)
                self.state = 2497
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
                if la_ == 1:
                    self.state = 2494
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 2495
                    self.match(tsqlParser.STRING)
                    self.state = 2496
                    self.match(tsqlParser.RR_BRACKET)


                self.state = 2500
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,362,self._ctx)
                if la_ == 1:
                    self.state = 2499
                    self.xml_common_directives()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_common_directivesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(tsqlParser.COMMA, 0)

        def BINARY(self):
            return self.getToken(tsqlParser.BINARY, 0)

        def BASE64(self):
            return self.getToken(tsqlParser.BASE64, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def ROOT(self):
            return self.getToken(tsqlParser.ROOT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_xml_common_directives




    def xml_common_directives(self):

        localctx = tsqlParser.Xml_common_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_xml_common_directives)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2504
            self.match(tsqlParser.COMMA)
            self.state = 2509
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [452]:
                self.state = 2505
                self.match(tsqlParser.BINARY)
                self.state = 2506
                self.match(tsqlParser.BASE64)
                pass
            elif token in [427]:
                self.state = 2507
                self.match(tsqlParser.TYPE)
                pass
            elif token in [382]:
                self.state = 2508
                self.match(tsqlParser.ROOT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.direction = None # Token

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(tsqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(tsqlParser.DESC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_order_by_expression




    def order_by_expression(self):

        localctx = tsqlParser.Order_by_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_order_by_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2511
            self.expression(0)
            self.state = 2513
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
            if la_ == 1:
                self.state = 2512
                localctx.direction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==7 or _la==51):
                    localctx.direction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_group_by_item




    def group_by_item(self):

        localctx = tsqlParser.Group_by_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_group_by_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2515
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Option_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(tsqlParser.OPTION, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.OptionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.OptionContext,i)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_option_clause




    def option_clause(self):

        localctx = tsqlParser.Option_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_option_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2517
            self.match(tsqlParser.OPTION)
            self.state = 2518
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2519
            self.option()
            self.state = 2524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==474:
                self.state = 2520
                self.match(tsqlParser.COMMA)
                self.state = 2521
                self.option()
                self.state = 2526
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2527
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.number_rows = None # Token
            self.number_of_processors = None # Token
            self.number_recursion = None # Token

        def FAST(self):
            return self.getToken(tsqlParser.FAST, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def GROUP(self):
            return self.getToken(tsqlParser.GROUP, 0)

        def HASH(self):
            return self.getToken(tsqlParser.HASH, 0)

        def ORDER(self):
            return self.getToken(tsqlParser.ORDER, 0)

        def UNION(self):
            return self.getToken(tsqlParser.UNION, 0)

        def MERGE(self):
            return self.getToken(tsqlParser.MERGE, 0)

        def CONCAT(self):
            return self.getToken(tsqlParser.CONCAT, 0)

        def JOIN(self):
            return self.getToken(tsqlParser.JOIN, 0)

        def LOOP(self):
            return self.getToken(tsqlParser.LOOP, 0)

        def EXPAND(self):
            return self.getToken(tsqlParser.EXPAND, 0)

        def VIEWS(self):
            return self.getToken(tsqlParser.VIEWS, 0)

        def FORCE(self):
            return self.getToken(tsqlParser.FORCE, 0)

        def IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX(self):
            return self.getToken(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)

        def KEEP(self):
            return self.getToken(tsqlParser.KEEP, 0)

        def PLAN(self):
            return self.getToken(tsqlParser.PLAN, 0)

        def KEEPFIXED(self):
            return self.getToken(tsqlParser.KEEPFIXED, 0)

        def MAXDOP(self):
            return self.getToken(tsqlParser.MAXDOP, 0)

        def MAXRECURSION(self):
            return self.getToken(tsqlParser.MAXRECURSION, 0)

        def OPTIMIZE(self):
            return self.getToken(tsqlParser.OPTIMIZE, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def optimize_for_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Optimize_for_argContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Optimize_for_argContext,i)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def UNKNOWN(self):
            return self.getToken(tsqlParser.UNKNOWN, 0)

        def PARAMETERIZATION(self):
            return self.getToken(tsqlParser.PARAMETERIZATION, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def RECOMPILE(self):
            return self.getToken(tsqlParser.RECOMPILE, 0)

        def ROBUST(self):
            return self.getToken(tsqlParser.ROBUST, 0)

        def USE(self):
            return self.getToken(tsqlParser.USE, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_option




    def option(self):

        localctx = tsqlParser.OptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_option)
        self._la = 0 # Token type
        try:
            self.state = 2574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2529
                self.match(tsqlParser.FAST)
                self.state = 2530
                localctx.number_rows = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2531
                _la = self._input.LA(1)
                if not(_la==127 or _la==295):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2532
                self.match(tsqlParser.GROUP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2533
                _la = self._input.LA(1)
                if not(_la==106 or _la==239 or _la==295):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2534
                self.match(tsqlParser.UNION)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2535
                _la = self._input.LA(1)
                if not(_la==106 or _la==295 or _la==320):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2536
                self.match(tsqlParser.JOIN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2537
                self.match(tsqlParser.EXPAND)
                self.state = 2538
                self.match(tsqlParser.VIEWS)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2539
                self.match(tsqlParser.FORCE)
                self.state = 2540
                self.match(tsqlParser.ORDER)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2541
                self.match(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2542
                self.match(tsqlParser.KEEP)
                self.state = 2543
                self.match(tsqlParser.PLAN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2544
                self.match(tsqlParser.KEEPFIXED)
                self.state = 2545
                self.match(tsqlParser.PLAN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2546
                self.match(tsqlParser.MAXDOP)
                self.state = 2547
                localctx.number_of_processors = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2548
                self.match(tsqlParser.MAXRECURSION)
                self.state = 2549
                localctx.number_recursion = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2550
                self.match(tsqlParser.OPTIMIZE)
                self.state = 2551
                self.match(tsqlParser.FOR)
                self.state = 2552
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2553
                self.optimize_for_arg()
                self.state = 2558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==474:
                    self.state = 2554
                    self.match(tsqlParser.COMMA)
                    self.state = 2555
                    self.optimize_for_arg()
                    self.state = 2560
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2561
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2563
                self.match(tsqlParser.OPTIMIZE)
                self.state = 2564
                self.match(tsqlParser.FOR)
                self.state = 2565
                self.match(tsqlParser.UNKNOWN)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2566
                self.match(tsqlParser.PARAMETERIZATION)
                self.state = 2567
                _la = self._input.LA(1)
                if not(_la==286 or _la==397):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2568
                self.match(tsqlParser.RECOMPILE)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2569
                self.match(tsqlParser.ROBUST)
                self.state = 2570
                self.match(tsqlParser.PLAN)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2571
                self.match(tsqlParser.USE)
                self.state = 2572
                self.match(tsqlParser.PLAN)
                self.state = 2573
                self.match(tsqlParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Optimize_for_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def UNKNOWN(self):
            return self.getToken(tsqlParser.UNKNOWN, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_optimize_for_arg




    def optimize_for_arg(self):

        localctx = tsqlParser.Optimize_for_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_optimize_for_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2576
            self.match(tsqlParser.LOCAL_ID)
            self.state = 2580
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [431]:
                self.state = 2577
                self.match(tsqlParser.UNKNOWN)
                pass
            elif token in [455]:
                self.state = 2578
                self.match(tsqlParser.EQUAL)
                self.state = 2579
                self.constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_list_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Select_list_elemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Select_list_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_select_list




    def select_list(self):

        localctx = tsqlParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_select_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2582
            self.select_list_elem()
            self.state = 2587
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,370,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2583
                    self.match(tsqlParser.COMMA)
                    self.state = 2584
                    self.select_list_elem() 
                self.state = 2589
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,370,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_list_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.alias = None # Column_aliasContext

        def a_star(self):
            return self.getTypedRuleContext(tsqlParser.A_starContext,0)


        def DOLLAR(self):
            return self.getToken(tsqlParser.DOLLAR, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_table_nameContext,0)


        def DOT(self):
            return self.getToken(tsqlParser.DOT, 0)

        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)

        def ROWGUID(self):
            return self.getToken(tsqlParser.ROWGUID, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(tsqlParser.Column_aliasContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_select_list_elem




    def select_list_elem(self):

        localctx = tsqlParser.Select_list_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_select_list_elem)
        self._la = 0 # Token type
        try:
            self.state = 2611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,375,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 17729624997893) != 0 or (((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 9969332866253825) != 0 or (((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & -148821964101331) != 0 or (((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & -47521180986790319) != 0 or (((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & 171699173404606099) != 0:
                    self.state = 2590
                    self.full_table_name()
                    self.state = 2591
                    self.match(tsqlParser.DOT)


                self.state = 2598
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [477]:
                    self.state = 2595
                    self.a_star()
                    pass
                elif token in [471]:
                    self.state = 2596
                    self.match(tsqlParser.DOLLAR)
                    self.state = 2597
                    _la = self._input.LA(1)
                    if not(_la==84 or _la==385):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2600
                localctx.alias = self.column_alias()
                self.state = 2601
                self.match(tsqlParser.EQUAL)
                self.state = 2602
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2604
                self.expression(0)
                self.state = 2609
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
                if la_ == 1:
                    self.state = 2606
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==6:
                        self.state = 2605
                        self.match(tsqlParser.AS)


                    self.state = 2608
                    localctx.alias = self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_sourcesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_sourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_sources




    def table_sources(self):

        localctx = tsqlParser.Table_sourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_table_sources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2613
            self.table_source(0)
            self.state = 2618
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,376,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2614
                    self.match(tsqlParser.COMMA)
                    self.state = 2615
                    self.table_source(0) 
                self.state = 2620
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,376,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_table_source

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Cross_joinContext(Table_sourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_sourceContext
            super().__init__(parser)
            self.left = None # Table_sourceContext
            self.op = None # Token
            self.right = None # Table_sourceContext
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(tsqlParser.JOIN, 0)
        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_sourceContext,i)

        def CROSS(self):
            return self.getToken(tsqlParser.CROSS, 0)


    class Table_source_item_joinContext(Table_sourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_sourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_source_item(self):
            return self.getTypedRuleContext(tsqlParser.Table_source_itemContext,0)



    class Standard_joinContext(Table_sourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_sourceContext
            super().__init__(parser)
            self.left = None # Table_sourceContext
            self.right = None # Table_sourceContext
            self.copyFrom(ctx)

        def join_type(self):
            return self.getTypedRuleContext(tsqlParser.Join_typeContext,0)

        def JOIN(self):
            return self.getToken(tsqlParser.JOIN, 0)
        def ON(self):
            return self.getToken(tsqlParser.ON, 0)
        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)

        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_sourceContext,i)



    class Apply_joinContext(Table_sourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_sourceContext
            super().__init__(parser)
            self.left = None # Table_sourceContext
            self.op = None # Token
            self.right = None # Table_sourceContext
            self.copyFrom(ctx)

        def APPLY(self):
            return self.getToken(tsqlParser.APPLY, 0)
        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_sourceContext,i)

        def CROSS(self):
            return self.getToken(tsqlParser.CROSS, 0)
        def OUTER(self):
            return self.getToken(tsqlParser.OUTER, 0)


    class Bracket_table_sourceContext(Table_sourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_sourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)
        def table_source(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourceContext,0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)



    def table_source(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = tsqlParser.Table_sourceContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 270
        self.enterRecursionRule(localctx, 270, self.RULE_table_source, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Bracket_table_sourceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2622
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2623
                self.table_source(0)
                self.state = 2624
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                localctx = tsqlParser.Table_source_item_joinContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2626
                self.table_source_item()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2646
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,379,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2644
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
                    if la_ == 1:
                        localctx = tsqlParser.Cross_joinContext(self, tsqlParser.Table_sourceContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_table_source)
                        self.state = 2629
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2630
                        localctx.op = self.match(tsqlParser.CROSS)
                        self.state = 2631
                        self.match(tsqlParser.JOIN)
                        self.state = 2632
                        localctx.right = self.table_source(4)
                        pass

                    elif la_ == 2:
                        localctx = tsqlParser.Apply_joinContext(self, tsqlParser.Table_sourceContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_table_source)
                        self.state = 2633
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2634
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==37 or _la==128):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2635
                        self.match(tsqlParser.APPLY)
                        self.state = 2636
                        localctx.right = self.table_source(3)
                        pass

                    elif la_ == 3:
                        localctx = tsqlParser.Standard_joinContext(self, tsqlParser.Table_sourceContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_table_source)
                        self.state = 2637
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 2638
                        self.join_type()
                        self.state = 2639
                        self.match(tsqlParser.JOIN)
                        self.state = 2640
                        localctx.right = self.table_source(0)
                        self.state = 2641
                        self.match(tsqlParser.ON)
                        self.state = 2642
                        self.search_condition(0)
                        pass

             
                self.state = 2648
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,379,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Table_source_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_table_source_item

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Table_source_item_simpleContext(Table_source_itemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_source_itemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rowset_function(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_functionContext,0)

        def table_alias(self):
            return self.getTypedRuleContext(tsqlParser.Table_aliasContext,0)

        def change_table(self):
            return self.getTypedRuleContext(tsqlParser.Change_tableContext,0)

        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)


    class Table_source_item_complexContext(Table_source_itemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_source_itemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def derived_table(self):
            return self.getTypedRuleContext(tsqlParser.Derived_tableContext,0)

        def table_alias(self):
            return self.getTypedRuleContext(tsqlParser.Table_aliasContext,0)

        def column_alias_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_alias_listContext,0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)
        def DOT(self):
            return self.getToken(tsqlParser.DOT, 0)
        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)



    class Table_source_item_nameContext(Table_source_itemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_source_itemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def full_table_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_table_nameContext,0)

        def tablesample_clause(self):
            return self.getTypedRuleContext(tsqlParser.Tablesample_clauseContext,0)

        def table_alias(self):
            return self.getTypedRuleContext(tsqlParser.Table_aliasContext,0)

        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)




    def table_source_item(self):

        localctx = tsqlParser.Table_source_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_table_source_item)
        try:
            self.state = 2691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,391,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Table_source_item_nameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2649
                self.full_table_name()
                self.state = 2651
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
                if la_ == 1:
                    self.state = 2650
                    self.tablesample_clause()


                self.state = 2654
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,381,self._ctx)
                if la_ == 1:
                    self.state = 2653
                    self.table_alias()


                self.state = 2657
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
                if la_ == 1:
                    self.state = 2656
                    self.with_table_hints()


                pass

            elif la_ == 2:
                localctx = tsqlParser.Table_source_item_simpleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2659
                self.rowset_function()
                self.state = 2661
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,383,self._ctx)
                if la_ == 1:
                    self.state = 2660
                    self.table_alias()


                pass

            elif la_ == 3:
                localctx = tsqlParser.Table_source_item_complexContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2663
                self.derived_table()
                self.state = 2668
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,385,self._ctx)
                if la_ == 1:
                    self.state = 2664
                    self.table_alias()
                    self.state = 2666
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,384,self._ctx)
                    if la_ == 1:
                        self.state = 2665
                        self.column_alias_list()




                pass

            elif la_ == 4:
                localctx = tsqlParser.Table_source_item_simpleContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2670
                self.change_table()
                self.state = 2672
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,386,self._ctx)
                if la_ == 1:
                    self.state = 2671
                    self.table_alias()


                pass

            elif la_ == 5:
                localctx = tsqlParser.Table_source_item_simpleContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2674
                self.function_call()
                self.state = 2676
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
                if la_ == 1:
                    self.state = 2675
                    self.table_alias()


                pass

            elif la_ == 6:
                localctx = tsqlParser.Table_source_item_simpleContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2678
                self.match(tsqlParser.LOCAL_ID)
                self.state = 2680
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,388,self._ctx)
                if la_ == 1:
                    self.state = 2679
                    self.table_alias()


                pass

            elif la_ == 7:
                localctx = tsqlParser.Table_source_item_complexContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2682
                self.match(tsqlParser.LOCAL_ID)
                self.state = 2683
                self.match(tsqlParser.DOT)
                self.state = 2684
                self.function_call()
                self.state = 2689
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,390,self._ctx)
                if la_ == 1:
                    self.state = 2685
                    self.table_alias()
                    self.state = 2687
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,389,self._ctx)
                    if la_ == 1:
                        self.state = 2686
                        self.column_alias_list()




                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tablesample_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESAMPLE(self):
            return self.getToken(tsqlParser.TABLESAMPLE, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def sample_number(self):
            return self.getTypedRuleContext(tsqlParser.Sample_numberContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def SYSTEM(self):
            return self.getToken(tsqlParser.SYSTEM, 0)

        def REPEATABLE(self):
            return self.getToken(tsqlParser.REPEATABLE, 0)

        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def repeat_seed(self):
            return self.getTypedRuleContext(tsqlParser.Repeat_seedContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_tablesample_clause




    def tablesample_clause(self):

        localctx = tsqlParser.Tablesample_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_tablesample_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2693
            self.match(tsqlParser.TABLESAMPLE)
            self.state = 2695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==172:
                self.state = 2694
                self.match(tsqlParser.SYSTEM)


            self.state = 2697
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2698
            self.sample_number()
            self.state = 2700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131 or _la==386:
                self.state = 2699
                _la = self._input.LA(1)
                if not(_la==131 or _la==386):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2702
            self.match(tsqlParser.RR_BRACKET)
            self.state = 2705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,394,self._ctx)
            if la_ == 1:
                self.state = 2703
                self.match(tsqlParser.REPEATABLE)

                self.state = 2704
                self.repeat_seed()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_sample_number




    def sample_number(self):

        localctx = tsqlParser.Sample_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_sample_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2707
            self.match(tsqlParser.DECIMAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Repeat_seedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_repeat_seed




    def repeat_seed(self):

        localctx = tsqlParser.Repeat_seedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_repeat_seed)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2709
            self.match(tsqlParser.DECIMAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_alias




    def table_alias(self):

        localctx = tsqlParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_table_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 2711
                self.match(tsqlParser.AS)


            self.state = 2714
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Change_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGETABLE(self):
            return self.getToken(tsqlParser.CHANGETABLE, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def CHANGES(self):
            return self.getToken(tsqlParser.CHANGES, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_table_nameContext,0)


        def COMMA(self):
            return self.getToken(tsqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def NULL_(self):
            return self.getToken(tsqlParser.NULL_, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_change_table




    def change_table(self):

        localctx = tsqlParser.Change_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_change_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2716
            self.match(tsqlParser.CHANGETABLE)
            self.state = 2717
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2718
            self.match(tsqlParser.CHANGES)
            self.state = 2719
            self.full_table_name()
            self.state = 2720
            self.match(tsqlParser.COMMA)
            self.state = 2721
            _la = self._input.LA(1)
            if not(_la==113 or _la==448 or _la==449):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2722
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.join_hint = None # Token

        def LEFT(self):
            return self.getToken(tsqlParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(tsqlParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(tsqlParser.FULL, 0)

        def INNER(self):
            return self.getToken(tsqlParser.INNER, 0)

        def OUTER(self):
            return self.getToken(tsqlParser.OUTER, 0)

        def LOOP(self):
            return self.getToken(tsqlParser.LOOP, 0)

        def HASH(self):
            return self.getToken(tsqlParser.HASH, 0)

        def MERGE(self):
            return self.getToken(tsqlParser.MERGE, 0)

        def REMOTE(self):
            return self.getToken(tsqlParser.REMOTE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_join_type




    def join_type(self):

        localctx = tsqlParser.Join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_join_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2731
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [92, 97, 106, 295, 320, 377]:
                self.state = 2725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 2724
                    self.match(tsqlParser.INNER)


                pass
            elif token in [78, 100, 152]:
                self.state = 2727
                _la = self._input.LA(1)
                if not(_la==78 or _la==100 or _la==152):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 2728
                    self.match(tsqlParser.OUTER)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 2734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106 or _la==295 or _la==320 or _la==377:
                self.state = 2733
                localctx.join_hint = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==106 or _la==295 or _la==320 or _la==377):
                    localctx.join_hint = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_name_with_hintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def full_table_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_table_nameContext,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_name_with_hint




    def table_name_with_hint(self):

        localctx = tsqlParser.Table_name_with_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_table_name_with_hint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2736
            self.full_table_name()
            self.state = 2738
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,400,self._ctx)
            if la_ == 1:
                self.state = 2737
                self.with_table_hints()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rowset_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider_name = None # Token
            self.connectionString = None # Token
            self.sql = None # Token
            self.data_file = None # Token

        def OPENROWSET(self):
            return self.getToken(tsqlParser.OPENROWSET, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.STRING)
            else:
                return self.getToken(tsqlParser.STRING, i)

        def BULK(self):
            return self.getToken(tsqlParser.BULK, 0)

        def bulk_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Bulk_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Bulk_optionContext,i)


        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_rowset_function




    def rowset_function(self):

        localctx = tsqlParser.Rowset_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_rowset_function)
        self._la = 0 # Token type
        try:
            self.state = 2766
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,403,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2740
                self.match(tsqlParser.OPENROWSET)
                self.state = 2741
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2742
                localctx.provider_name = self.match(tsqlParser.STRING)
                self.state = 2743
                self.match(tsqlParser.COMMA)
                self.state = 2744
                localctx.connectionString = self.match(tsqlParser.STRING)
                self.state = 2745
                self.match(tsqlParser.COMMA)
                self.state = 2746
                localctx.sql = self.match(tsqlParser.STRING)
                self.state = 2747
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2748
                self.match(tsqlParser.OPENROWSET)
                self.state = 2749
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2750
                self.match(tsqlParser.BULK)
                self.state = 2751
                localctx.data_file = self.match(tsqlParser.STRING)
                self.state = 2752
                self.match(tsqlParser.COMMA)
                self.state = 2762
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,402,self._ctx)
                if la_ == 1:
                    self.state = 2753
                    self.bulk_option()
                    self.state = 2758
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==474:
                        self.state = 2754
                        self.match(tsqlParser.COMMA)
                        self.state = 2755
                        self.bulk_option()
                        self.state = 2760
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 2761
                    self.r_id()
                    pass


                self.state = 2764
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bulk_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.bulk_option_value = None # Token

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_bulk_option




    def bulk_option(self):

        localctx = tsqlParser.Bulk_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_bulk_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2768
            self.r_id()
            self.state = 2769
            self.match(tsqlParser.EQUAL)
            self.state = 2770
            localctx.bulk_option_value = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==449 or _la==451):
                localctx.bulk_option_value = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Derived_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)


        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def table_value_constructor(self):
            return self.getTypedRuleContext(tsqlParser.Table_value_constructorContext,0)


        def table_alias(self):
            return self.getTypedRuleContext(tsqlParser.Table_aliasContext,0)


        def column_alias_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_alias_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_derived_table




    def derived_table(self):

        localctx = tsqlParser.Derived_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_derived_table)
        try:
            self.state = 2783
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,404,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2772
                self.subquery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2773
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2774
                self.subquery()
                self.state = 2775
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2777
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2778
                self.table_value_constructor()
                self.state = 2779
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2780
                self.table_alias()
                self.state = 2781
                self.column_alias_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_function_call

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Standard_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.style = None # ExpressionContext
            self.seed = None # Token
            self.increment = None # Token
            self.copyFrom(ctx)

        def scalar_function_name(self):
            return self.getTypedRuleContext(tsqlParser.Scalar_function_nameContext,0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)
        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)

        def BINARY_CHECKSUM(self):
            return self.getToken(tsqlParser.BINARY_CHECKSUM, 0)
        def STAR(self):
            return self.getToken(tsqlParser.STAR, 0)
        def CONVERT(self):
            return self.getToken(tsqlParser.CONVERT, 0)
        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def COALESCE(self):
            return self.getToken(tsqlParser.COALESCE, 0)
        def DATEADD(self):
            return self.getToken(tsqlParser.DATEADD, 0)
        def ID(self):
            return self.getToken(tsqlParser.ID, 0)
        def DATEDIFF(self):
            return self.getToken(tsqlParser.DATEDIFF, 0)
        def DATENAME(self):
            return self.getToken(tsqlParser.DATENAME, 0)
        def DATEPART(self):
            return self.getToken(tsqlParser.DATEPART, 0)
        def DATETIMEOFFSETFROMPARTS(self):
            return self.getToken(tsqlParser.DATETIMEOFFSETFROMPARTS, 0)
        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)
        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)
        def IIF(self):
            return self.getToken(tsqlParser.IIF, 0)
        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)

        def NULLIF(self):
            return self.getToken(tsqlParser.NULLIF, 0)
        def STRING_SPLIT(self):
            return self.getToken(tsqlParser.STRING_SPLIT, 0)
        def TRY_CONVERT(self):
            return self.getToken(tsqlParser.TRY_CONVERT, 0)


    class Aggregate_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggregate_windowed_function(self):
            return self.getTypedRuleContext(tsqlParser.Aggregate_windowed_functionContext,0)



    class Nvf_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def next_value_for_function(self):
            return self.getTypedRuleContext(tsqlParser.Next_value_for_functionContext,0)



    class Rank_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ranking_windowed_function(self):
            return self.getTypedRuleContext(tsqlParser.Ranking_windowed_functionContext,0)



    class Expression_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.alias = None # Data_typeContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def PARSE(self):
            return self.getToken(tsqlParser.PARSE, 0)
        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)
        def AS(self):
            return self.getToken(tsqlParser.AS, 0)
        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)

        def USING(self):
            return self.getToken(tsqlParser.USING, 0)
        def TRY_PARSE(self):
            return self.getToken(tsqlParser.TRY_PARSE, 0)


    class Simple_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHECKSUM(self):
            return self.getToken(tsqlParser.CHECKSUM, 0)
        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)
        def STAR(self):
            return self.getToken(tsqlParser.STAR, 0)
        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(tsqlParser.CURRENT_TIMESTAMP, 0)
        def CURRENT_USER(self):
            return self.getToken(tsqlParser.CURRENT_USER, 0)
        def MIN_ACTIVE_ROWVERSION(self):
            return self.getToken(tsqlParser.MIN_ACTIVE_ROWVERSION, 0)
        def SESSION_USER(self):
            return self.getToken(tsqlParser.SESSION_USER, 0)
        def SYSTEM_USER(self):
            return self.getToken(tsqlParser.SYSTEM_USER, 0)


    class Cast_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.alias = None # Data_typeContext
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(tsqlParser.CAST, 0)
        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)
        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)
        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)

        def TRY_CAST(self):
            return self.getToken(tsqlParser.TRY_CAST, 0)



    def function_call(self):

        localctx = tsqlParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.state = 2958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,411,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Rank_callContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2785
                self.ranking_windowed_function()
                pass

            elif la_ == 2:
                localctx = tsqlParser.Aggregate_callContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2786
                self.aggregate_windowed_function()
                pass

            elif la_ == 3:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2787
                self.scalar_function_name()
                self.state = 2788
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 288106440032256) != 0 or (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -9222381634573827935) != 0 or (((_la - 152)) & ~0x3f) == 0 and ((1 << (_la - 152)) & 4629718039189852161) != 0 or (((_la - 217)) & ~0x3f) == 0 and ((1 << (_la - 217)) & 2203052274704250241) != 0 or (((_la - 281)) & ~0x3f) == 0 and ((1 << (_la - 281)) & -2942381077000725761) != 0 or (((_la - 347)) & ~0x3f) == 0 and ((1 << (_la - 347)) & -23397629359030529) != 0 or (((_la - 411)) & ~0x3f) == 0 and ((1 << (_la - 411)) & 3458782073792185291) != 0 or (((_la - 480)) & ~0x3f) == 0 and ((1 << (_la - 480)) & 7) != 0:
                    self.state = 2789
                    self.expression_list()


                self.state = 2792
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                localctx = tsqlParser.Nvf_callContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2794
                self.next_value_for_function()
                pass

            elif la_ == 5:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2795
                self.match(tsqlParser.BINARY_CHECKSUM)
                self.state = 2796
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2797
                self.match(tsqlParser.STAR)
                self.state = 2798
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                localctx = tsqlParser.Cast_callContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2799
                self.match(tsqlParser.CAST)
                self.state = 2800
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2801
                self.expression(0)
                self.state = 2802
                self.match(tsqlParser.AS)
                self.state = 2803
                localctx.alias = self.data_type()
                self.state = 2804
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 7:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2806
                self.match(tsqlParser.CONVERT)
                self.state = 2807
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2808
                self.data_type()
                self.state = 2809
                self.match(tsqlParser.COMMA)
                self.state = 2810
                self.expression(0)
                self.state = 2813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 2811
                    self.match(tsqlParser.COMMA)
                    self.state = 2812
                    localctx.style = self.expression(0)


                self.state = 2815
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 8:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2817
                self.match(tsqlParser.CHECKSUM)
                self.state = 2818
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2819
                self.match(tsqlParser.STAR)
                self.state = 2820
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 9:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2821
                self.match(tsqlParser.COALESCE)
                self.state = 2822
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2823
                self.expression_list()
                self.state = 2824
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 2826
                self.match(tsqlParser.CURRENT_TIMESTAMP)
                pass

            elif la_ == 11:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 2827
                self.match(tsqlParser.CURRENT_USER)
                pass

            elif la_ == 12:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 2828
                self.match(tsqlParser.DATEADD)
                self.state = 2829
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2830
                self.match(tsqlParser.ID)
                self.state = 2831
                self.match(tsqlParser.COMMA)
                self.state = 2832
                self.expression(0)
                self.state = 2833
                self.match(tsqlParser.COMMA)
                self.state = 2834
                self.expression(0)
                self.state = 2835
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 2837
                self.match(tsqlParser.DATEDIFF)
                self.state = 2838
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2839
                self.match(tsqlParser.ID)
                self.state = 2840
                self.match(tsqlParser.COMMA)
                self.state = 2841
                self.expression(0)
                self.state = 2842
                self.match(tsqlParser.COMMA)
                self.state = 2843
                self.expression(0)
                self.state = 2844
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 14:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 2846
                self.match(tsqlParser.DATENAME)
                self.state = 2847
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2848
                self.match(tsqlParser.ID)
                self.state = 2849
                self.match(tsqlParser.COMMA)
                self.state = 2850
                self.expression(0)
                self.state = 2851
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 15:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 2853
                self.match(tsqlParser.DATEPART)
                self.state = 2854
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2855
                self.match(tsqlParser.ID)
                self.state = 2856
                self.match(tsqlParser.COMMA)
                self.state = 2857
                self.expression(0)
                self.state = 2858
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 16:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 2860
                self.match(tsqlParser.DATETIMEOFFSETFROMPARTS)
                self.state = 2861
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2862
                self.expression(0)
                self.state = 2863
                self.match(tsqlParser.COMMA)
                self.state = 2864
                self.expression(0)
                self.state = 2865
                self.match(tsqlParser.COMMA)
                self.state = 2866
                self.expression(0)
                self.state = 2867
                self.match(tsqlParser.COMMA)
                self.state = 2868
                self.expression(0)
                self.state = 2869
                self.match(tsqlParser.COMMA)
                self.state = 2870
                self.expression(0)
                self.state = 2871
                self.match(tsqlParser.COMMA)
                self.state = 2872
                self.expression(0)
                self.state = 2873
                self.match(tsqlParser.COMMA)
                self.state = 2874
                self.expression(0)
                self.state = 2875
                self.match(tsqlParser.COMMA)
                self.state = 2876
                self.expression(0)
                self.state = 2877
                self.match(tsqlParser.COMMA)
                self.state = 2878
                self.expression(0)
                self.state = 2879
                self.match(tsqlParser.COMMA)
                self.state = 2880
                self.expression(0)
                self.state = 2881
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 17:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 2883
                self.match(tsqlParser.IDENTITY)
                self.state = 2884
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2885
                self.data_type()
                self.state = 2888
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
                if la_ == 1:
                    self.state = 2886
                    self.match(tsqlParser.COMMA)
                    self.state = 2887
                    localctx.seed = self.match(tsqlParser.DECIMAL)


                self.state = 2892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 2890
                    self.match(tsqlParser.COMMA)
                    self.state = 2891
                    localctx.increment = self.match(tsqlParser.DECIMAL)


                self.state = 2894
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 18:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 2896
                self.match(tsqlParser.IIF)
                self.state = 2897
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2898
                self.search_condition(0)
                self.state = 2899
                self.match(tsqlParser.COMMA)
                self.state = 2900
                self.expression(0)
                self.state = 2901
                self.match(tsqlParser.COMMA)
                self.state = 2902
                self.expression(0)
                self.state = 2903
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 19:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 2905
                self.match(tsqlParser.MIN_ACTIVE_ROWVERSION)
                pass

            elif la_ == 20:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 2906
                self.match(tsqlParser.NULLIF)
                self.state = 2907
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2908
                self.expression(0)
                self.state = 2909
                self.match(tsqlParser.COMMA)
                self.state = 2910
                self.expression(0)
                self.state = 2911
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 21:
                localctx = tsqlParser.Expression_callContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 2913
                self.match(tsqlParser.PARSE)
                self.state = 2914
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2915
                localctx.left = self.expression(0)
                self.state = 2916
                self.match(tsqlParser.AS)
                self.state = 2917
                localctx.alias = self.data_type()
                self.state = 2920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==433:
                    self.state = 2918
                    self.match(tsqlParser.USING)
                    self.state = 2919
                    localctx.right = self.expression(0)


                self.state = 2922
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 22:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 2924
                self.match(tsqlParser.SESSION_USER)
                pass

            elif la_ == 23:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 2925
                self.match(tsqlParser.STRING_SPLIT)
                self.state = 2926
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2927
                self.expression(0)
                self.state = 2928
                self.match(tsqlParser.COMMA)
                self.state = 2929
                self.expression(0)
                self.state = 2930
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 24:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 2932
                self.match(tsqlParser.SYSTEM_USER)
                pass

            elif la_ == 25:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 2933
                self.match(tsqlParser.TRY_CONVERT)
                self.state = 2934
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2935
                self.data_type()
                self.state = 2936
                self.match(tsqlParser.COMMA)
                self.state = 2937
                self.expression(0)
                self.state = 2938
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 26:
                localctx = tsqlParser.Cast_callContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 2940
                self.match(tsqlParser.TRY_CAST)
                self.state = 2941
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2942
                self.expression(0)
                self.state = 2943
                self.match(tsqlParser.AS)
                self.state = 2944
                localctx.alias = self.data_type()
                self.state = 2945
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 27:
                localctx = tsqlParser.Expression_callContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 2947
                self.match(tsqlParser.TRY_PARSE)
                self.state = 2948
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2949
                localctx.left = self.expression(0)
                self.state = 2950
                self.match(tsqlParser.AS)
                self.state = 2951
                localctx.alias = self.data_type()
                self.state = 2954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==433:
                    self.state = 2952
                    self.match(tsqlParser.USING)
                    self.state = 2953
                    localctx.right = self.expression(0)


                self.state = 2956
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whenExpr = None # ExpressionContext
            self.thenExpr = None # ExpressionContext

        def WHEN(self):
            return self.getToken(tsqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(tsqlParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_switch_section




    def switch_section(self):

        localctx = tsqlParser.Switch_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_switch_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2960
            self.match(tsqlParser.WHEN)
            self.state = 2961
            localctx.whenExpr = self.expression(0)
            self.state = 2962
            self.match(tsqlParser.THEN)
            self.state = 2963
            localctx.thenExpr = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_search_condition_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whenExpr = None # Search_conditionContext
            self.thenExpr = None # ExpressionContext

        def WHEN(self):
            return self.getToken(tsqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(tsqlParser.THEN, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_switch_search_condition_section




    def switch_search_condition_section(self):

        localctx = tsqlParser.Switch_search_condition_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_switch_search_condition_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2965
            self.match(tsqlParser.WHEN)
            self.state = 2966
            localctx.whenExpr = self.search_condition(0)
            self.state = 2967
            self.match(tsqlParser.THEN)
            self.state = 2968
            localctx.thenExpr = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_table_hintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def table_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_hintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_hintContext,i)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_with_table_hints




    def with_table_hints(self):

        localctx = tsqlParser.With_table_hintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_with_table_hints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==203:
                self.state = 2970
                self.match(tsqlParser.WITH)


            self.state = 2973
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2974
            self.table_hint()
            self.state = 2979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==474:
                self.state = 2975
                self.match(tsqlParser.COMMA)
                self.state = 2976
                self.table_hint()
                self.state = 2981
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2982
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_with_table_hintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def table_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_hintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_hintContext,i)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_insert_with_table_hints




    def insert_with_table_hints(self):

        localctx = tsqlParser.Insert_with_table_hintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_insert_with_table_hints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2984
            self.match(tsqlParser.WITH)
            self.state = 2985
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2986
            self.table_hint()
            self.state = 2991
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==474:
                self.state = 2987
                self.match(tsqlParser.COMMA)
                self.state = 2988
                self.table_hint()
                self.state = 2993
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2994
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_hintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOEXPAND(self):
            return self.getToken(tsqlParser.NOEXPAND, 0)

        def INDEX(self):
            return self.getToken(tsqlParser.INDEX, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LR_BRACKET)
            else:
                return self.getToken(tsqlParser.LR_BRACKET, i)

        def index_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Index_valueContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Index_valueContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.RR_BRACKET)
            else:
                return self.getToken(tsqlParser.RR_BRACKET, i)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def FORCESEEK(self):
            return self.getToken(tsqlParser.FORCESEEK, 0)

        def SERIALIZABLE(self):
            return self.getToken(tsqlParser.SERIALIZABLE, 0)

        def SNAPSHOT(self):
            return self.getToken(tsqlParser.SNAPSHOT, 0)

        def SPATIAL_WINDOW_MAX_CELLS(self):
            return self.getToken(tsqlParser.SPATIAL_WINDOW_MAX_CELLS, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ID)
            else:
                return self.getToken(tsqlParser.ID, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_hint




    def table_hint(self):

        localctx = tsqlParser.Table_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_table_hint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==339:
                self.state = 2996
                self.match(tsqlParser.NOEXPAND)


            self.state = 3037
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,419,self._ctx)
            if la_ == 1:
                self.state = 2999
                self.match(tsqlParser.INDEX)
                self.state = 3000
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3001
                self.index_value()
                self.state = 3006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==474:
                    self.state = 3002
                    self.match(tsqlParser.COMMA)
                    self.state = 3003
                    self.index_value()
                    self.state = 3008
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3009
                self.match(tsqlParser.RR_BRACKET)

            elif la_ == 2:
                self.state = 3011
                self.match(tsqlParser.INDEX)
                self.state = 3012
                self.match(tsqlParser.EQUAL)
                self.state = 3013
                self.index_value()

            elif la_ == 3:
                self.state = 3014
                self.match(tsqlParser.FORCESEEK)
                self.state = 3029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==472:
                    self.state = 3015
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 3016
                    self.index_value()
                    self.state = 3017
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 3018
                    self.match(tsqlParser.ID)
                    self.state = 3023
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==474:
                        self.state = 3019
                        self.match(tsqlParser.COMMA)
                        self.state = 3020
                        self.match(tsqlParser.ID)
                        self.state = 3025
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3026
                    self.match(tsqlParser.RR_BRACKET)
                    self.state = 3027
                    self.match(tsqlParser.RR_BRACKET)



            elif la_ == 4:
                self.state = 3031
                self.match(tsqlParser.SERIALIZABLE)

            elif la_ == 5:
                self.state = 3032
                self.match(tsqlParser.SNAPSHOT)

            elif la_ == 6:
                self.state = 3033
                self.match(tsqlParser.SPATIAL_WINDOW_MAX_CELLS)
                self.state = 3034
                self.match(tsqlParser.EQUAL)
                self.state = 3035
                self.match(tsqlParser.DECIMAL)

            elif la_ == 7:
                self.state = 3036
                self.match(tsqlParser.ID)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_index_value




    def index_value(self):

        localctx = tsqlParser.Index_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_index_value)
        try:
            self.state = 3041
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 450]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3039
                self.r_id()
                pass
            elif token in [449]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3040
                self.match(tsqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_alias_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_aliasContext,i)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_alias_list




    def column_alias_list(self):

        localctx = tsqlParser.Column_alias_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_column_alias_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3043
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3044
            self.column_alias()
            self.state = 3049
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==474:
                self.state = 3045
                self.match(tsqlParser.COMMA)
                self.state = 3046
                self.column_alias()
                self.state = 3051
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3052
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_alias




    def column_alias(self):

        localctx = tsqlParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_column_alias)
        try:
            self.state = 3056
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 450]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3054
                self.r_id()
                pass
            elif token in [451]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3055
                self.match(tsqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_starContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(tsqlParser.STAR, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_a_star




    def a_star(self):

        localctx = tsqlParser.A_starContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_a_star)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3058
            self.match(tsqlParser.STAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_value_constructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(tsqlParser.VALUES, 0)

        def value_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Value_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Value_listContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_value_constructor




    def table_value_constructor(self):

        localctx = tsqlParser.Table_value_constructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_table_value_constructor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3060
            self.match(tsqlParser.VALUES)
            self.state = 3061
            self.value_list()
            self.state = 3066
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,423,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3062
                    self.match(tsqlParser.COMMA)
                    self.state = 3063
                    self.value_list() 
                self.state = 3068
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,423,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_expression_list




    def expression_list(self):

        localctx = tsqlParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3069
            self.expression(0)
            self.state = 3074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==474:
                self.state = 3070
                self.match(tsqlParser.COMMA)
                self.state = 3071
                self.expression(0)
                self.state = 3076
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_value_list




    def value_list(self):

        localctx = tsqlParser.Value_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_value_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3077
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3078
            self.expression_list()
            self.state = 3079
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Next_value_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEXT(self):
            return self.getToken(tsqlParser.NEXT, 0)

        def VALUE(self):
            return self.getToken(tsqlParser.VALUE, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_next_value_for




    def next_value_for(self):

        localctx = tsqlParser.Next_value_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_next_value_for)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3081
            self.match(tsqlParser.NEXT)
            self.state = 3082
            self.match(tsqlParser.VALUE)
            self.state = 3083
            self.match(tsqlParser.FOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Next_value_for_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.args = None # Func_proc_nameContext

        def next_value_for(self):
            return self.getTypedRuleContext(tsqlParser.Next_value_forContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_next_value_for_function




    def next_value_for_function(self):

        localctx = tsqlParser.Next_value_for_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_next_value_for_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3085
            self.next_value_for()
            self.state = 3086
            localctx.args = self.func_proc_name()
            self.state = 3087
            self.over_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ranking_windowed_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def RANK(self):
            return self.getToken(tsqlParser.RANK, 0)

        def DENSE_RANK(self):
            return self.getToken(tsqlParser.DENSE_RANK, 0)

        def ROW_NUMBER(self):
            return self.getToken(tsqlParser.ROW_NUMBER, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def NTILE(self):
            return self.getToken(tsqlParser.NTILE, 0)

        def FIRST_VALUE(self):
            return self.getToken(tsqlParser.FIRST_VALUE, 0)

        def LAST_VALUE(self):
            return self.getToken(tsqlParser.LAST_VALUE, 0)

        def LEAD(self):
            return self.getToken(tsqlParser.LEAD, 0)

        def LAG(self):
            return self.getToken(tsqlParser.LAG, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_ranking_windowed_function




    def ranking_windowed_function(self):

        localctx = tsqlParser.Ranking_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_ranking_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 3112
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [264, 368, 387]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3089
                _la = self._input.LA(1)
                if not(_la==264 or _la==368 or _la==387):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3090
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3091
                self.match(tsqlParser.RR_BRACKET)
                self.state = 3092
                self.over_clause()
                pass
            elif token in [282, 314, 343]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3093
                _la = self._input.LA(1)
                if not((((_la - 282)) & ~0x3f) == 0 and ((1 << (_la - 282)) & 2305843013508661249) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3094
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3095
                self.expression(0)
                self.state = 3096
                self.match(tsqlParser.RR_BRACKET)
                self.state = 3097
                self.over_clause()
                pass
            elif token in [312, 315]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3099
                _la = self._input.LA(1)
                if not(_la==312 or _la==315):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3100
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3101
                self.expression(0)
                self.state = 3106
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==474:
                    self.state = 3102
                    self.match(tsqlParser.COMMA)
                    self.state = 3103
                    self.expression(0)
                    self.state = 3108
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3109
                self.match(tsqlParser.RR_BRACKET)
                self.state = 3110
                self.over_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_windowed_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.args = None # Token

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def AVG(self):
            return self.getToken(tsqlParser.AVG, 0)

        def MAX(self):
            return self.getToken(tsqlParser.MAX, 0)

        def MIN(self):
            return self.getToken(tsqlParser.MIN, 0)

        def SUM(self):
            return self.getToken(tsqlParser.SUM, 0)

        def STDEV(self):
            return self.getToken(tsqlParser.STDEV, 0)

        def STDEVP(self):
            return self.getToken(tsqlParser.STDEVP, 0)

        def VAR(self):
            return self.getToken(tsqlParser.VAR, 0)

        def VARP(self):
            return self.getToken(tsqlParser.VARP, 0)

        def all_distinct(self):
            return self.getTypedRuleContext(tsqlParser.All_distinctContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def COUNT(self):
            return self.getToken(tsqlParser.COUNT, 0)

        def COUNT_BIG(self):
            return self.getToken(tsqlParser.COUNT_BIG, 0)

        def STAR(self):
            return self.getToken(tsqlParser.STAR, 0)

        def CHECKSUM_AGG(self):
            return self.getToken(tsqlParser.CHECKSUM_AGG, 0)

        def GROUPING(self):
            return self.getToken(tsqlParser.GROUPING, 0)

        def GROUPING_ID(self):
            return self.getToken(tsqlParser.GROUPING_ID, 0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_aggregate_windowed_function




    def aggregate_windowed_function(self):

        localctx = tsqlParser.Aggregate_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_aggregate_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 3155
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [224, 322, 328, 406, 407, 410, 434, 435]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3114
                _la = self._input.LA(1)
                if not(_la==224 or _la==322 or _la==328 or (((_la - 406)) & ~0x3f) == 0 and ((1 << (_la - 406)) & 805306387) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3115
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==53:
                    self.state = 3116
                    self.all_distinct()


                self.state = 3119
                self.expression(0)
                self.state = 3120
                self.match(tsqlParser.RR_BRACKET)
                self.state = 3122
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,428,self._ctx)
                if la_ == 1:
                    self.state = 3121
                    self.over_clause()


                pass
            elif token in [244, 245]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3124
                _la = self._input.LA(1)
                if not(_la==244 or _la==245):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3125
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3131
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [477]:
                    self.state = 3126
                    localctx.args = self.match(tsqlParser.STAR)
                    pass
                elif token in [2, 18, 25, 35, 41, 42, 48, 53, 66, 71, 73, 84, 87, 100, 104, 105, 108, 113, 114, 115, 129, 152, 164, 168, 173, 184, 185, 186, 196, 206, 214, 217, 224, 225, 227, 229, 230, 231, 232, 235, 236, 237, 239, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 255, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 330, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 398, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 448, 449, 450, 451, 452, 453, 454, 471, 472, 480, 481, 482]:
                    self.state = 3128
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==2 or _la==53:
                        self.state = 3127
                        self.all_distinct()


                    self.state = 3130
                    self.expression(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3133
                self.match(tsqlParser.RR_BRACKET)
                self.state = 3135
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,431,self._ctx)
                if la_ == 1:
                    self.state = 3134
                    self.over_clause()


                pass
            elif token in [236]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3137
                self.match(tsqlParser.CHECKSUM_AGG)
                self.state = 3138
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==53:
                    self.state = 3139
                    self.all_distinct()


                self.state = 3142
                self.expression(0)
                self.state = 3143
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [292]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3145
                self.match(tsqlParser.GROUPING)
                self.state = 3146
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3147
                self.expression(0)
                self.state = 3148
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [293]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3150
                self.match(tsqlParser.GROUPING_ID)
                self.state = 3151
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3152
                self.expression_list()
                self.state = 3153
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_distinctContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(tsqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_all_distinct




    def all_distinct(self):

        localctx = tsqlParser.All_distinctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_all_distinct)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3157
            _la = self._input.LA(1)
            if not(_la==2 or _la==53):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Over_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(tsqlParser.OVER, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def PARTITION(self):
            return self.getToken(tsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(tsqlParser.BY, 0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(tsqlParser.Order_by_clauseContext,0)


        def row_or_range_clause(self):
            return self.getTypedRuleContext(tsqlParser.Row_or_range_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_over_clause




    def over_clause(self):

        localctx = tsqlParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3159
            self.match(tsqlParser.OVER)
            self.state = 3160
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==358:
                self.state = 3161
                self.match(tsqlParser.PARTITION)
                self.state = 3162
                self.match(tsqlParser.BY)
                self.state = 3163
                self.expression_list()


            self.state = 3167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 3166
                self.order_by_clause()


            self.state = 3170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==367 or _la==386:
                self.state = 3169
                self.row_or_range_clause()


            self.state = 3172
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_or_range_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_extent(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_extentContext,0)


        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(tsqlParser.RANGE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_row_or_range_clause




    def row_or_range_clause(self):

        localctx = tsqlParser.Row_or_range_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_row_or_range_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3174
            _la = self._input.LA(1)
            if not(_la==367 or _la==386):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3175
            self.window_frame_extent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_extentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_preceding(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_precedingContext,0)


        def BETWEEN(self):
            return self.getToken(tsqlParser.BETWEEN, 0)

        def window_frame_bound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Window_frame_boundContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Window_frame_boundContext,i)


        def AND(self):
            return self.getToken(tsqlParser.AND, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_extent




    def window_frame_extent(self):

        localctx = tsqlParser.Window_frame_extentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_window_frame_extent)
        try:
            self.state = 3183
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 429, 449]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3177
                self.window_frame_preceding()
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3178
                self.match(tsqlParser.BETWEEN)
                self.state = 3179
                self.window_frame_bound()
                self.state = 3180
                self.match(tsqlParser.AND)
                self.state = 3181
                self.window_frame_bound()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_boundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_preceding(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_precedingContext,0)


        def window_frame_following(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_followingContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_bound




    def window_frame_bound(self):

        localctx = tsqlParser.Window_frame_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_window_frame_bound)
        try:
            self.state = 3187
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,438,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3185
                self.window_frame_preceding()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3186
                self.window_frame_following()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_precedingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(tsqlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(tsqlParser.PRECEDING, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(tsqlParser.ROW, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_preceding




    def window_frame_preceding(self):

        localctx = tsqlParser.Window_frame_precedingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_window_frame_preceding)
        try:
            self.state = 3195
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [429]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3189
                self.match(tsqlParser.UNBOUNDED)
                self.state = 3190
                self.match(tsqlParser.PRECEDING)
                pass
            elif token in [449]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3191
                self.match(tsqlParser.DECIMAL)
                self.state = 3192
                self.match(tsqlParser.PRECEDING)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3193
                self.match(tsqlParser.CURRENT)
                self.state = 3194
                self.match(tsqlParser.ROW)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_followingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(tsqlParser.UNBOUNDED, 0)

        def FOLLOWING(self):
            return self.getToken(tsqlParser.FOLLOWING, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_following




    def window_frame_following(self):

        localctx = tsqlParser.Window_frame_followingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_window_frame_following)
        try:
            self.state = 3201
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [429]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3197
                self.match(tsqlParser.UNBOUNDED)
                self.state = 3198
                self.match(tsqlParser.FOLLOWING)
                pass
            elif token in [449]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3199
                self.match(tsqlParser.DECIMAL)
                self.state = 3200
                self.match(tsqlParser.FOLLOWING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_database_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILESTREAM(self):
            return self.getToken(tsqlParser.FILESTREAM, 0)

        def database_filestream_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Database_filestream_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Database_filestream_optionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def DEFAULT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_LANGUAGE, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def DEFAULT_FULLTEXT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0)

        def NESTED_TRIGGERS(self):
            return self.getToken(tsqlParser.NESTED_TRIGGERS, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def TRANSFORM_NOISE_WORDS(self):
            return self.getToken(tsqlParser.TRANSFORM_NOISE_WORDS, 0)

        def TWO_DIGIT_YEAR_CUTOFF(self):
            return self.getToken(tsqlParser.TWO_DIGIT_YEAR_CUTOFF, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def DB_CHAINING(self):
            return self.getToken(tsqlParser.DB_CHAINING, 0)

        def TRUSTWORTHY(self):
            return self.getToken(tsqlParser.TRUSTWORTHY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_database_option




    def create_database_option(self):

        localctx = tsqlParser.Create_database_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_create_database_option)
        self._la = 0 # Token type
        try:
            self.state = 3237
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [280]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3203
                self.match(tsqlParser.FILESTREAM)

                self.state = 3204
                self.database_filestream_option()
                self.state = 3209
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,441,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3205
                        self.match(tsqlParser.COMMA)
                        self.state = 3206
                        self.database_filestream_option() 
                    self.state = 3211
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,441,self._ctx)

                pass
            elif token in [260]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3212
                self.match(tsqlParser.DEFAULT_LANGUAGE)
                self.state = 3213
                self.match(tsqlParser.EQUAL)
                self.state = 3216
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 450]:
                    self.state = 3214
                    self.r_id()
                    pass
                elif token in [451]:
                    self.state = 3215
                    self.match(tsqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [259]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3218
                self.match(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE)
                self.state = 3219
                self.match(tsqlParser.EQUAL)
                self.state = 3222
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 450]:
                    self.state = 3220
                    self.r_id()
                    pass
                elif token in [451]:
                    self.state = 3221
                    self.match(tsqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [335]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3224
                self.match(tsqlParser.NESTED_TRIGGERS)
                self.state = 3225
                self.match(tsqlParser.EQUAL)
                self.state = 3226
                _la = self._input.LA(1)
                if not(_la==117 or _la==119):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [423]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3227
                self.match(tsqlParser.TRANSFORM_NOISE_WORDS)
                self.state = 3228
                self.match(tsqlParser.EQUAL)
                self.state = 3229
                _la = self._input.LA(1)
                if not(_la==117 or _la==119):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [426]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3230
                self.match(tsqlParser.TWO_DIGIT_YEAR_CUTOFF)
                self.state = 3231
                self.match(tsqlParser.EQUAL)
                self.state = 3232
                self.match(tsqlParser.DECIMAL)
                pass
            elif token in [258]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3233
                self.match(tsqlParser.DB_CHAINING)
                self.state = 3234
                _la = self._input.LA(1)
                if not(_la==117 or _la==119):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [424]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3235
                self.match(tsqlParser.TRUSTWORTHY)
                self.state = 3236
                _la = self._input.LA(1)
                if not(_la==117 or _la==119):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_filestream_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def NON_TRANSACTED_ACCESS(self):
            return self.getToken(tsqlParser.NON_TRANSACTED_ACCESS, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DIRECTORY_NAME(self):
            return self.getToken(tsqlParser.DIRECTORY_NAME, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def FULL(self):
            return self.getToken(tsqlParser.FULL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_database_filestream_option




    def database_filestream_option(self):

        localctx = tsqlParser.Database_filestream_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_database_filestream_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3239
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3246
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [340]:
                self.state = 3240
                self.match(tsqlParser.NON_TRANSACTED_ACCESS)
                self.state = 3241
                self.match(tsqlParser.EQUAL)
                self.state = 3242
                _la = self._input.LA(1)
                if not(_la==78 or _la==117 or _la==371):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [265]:
                self.state = 3243
                self.match(tsqlParser.DIRECTORY_NAME)
                self.state = 3244
                self.match(tsqlParser.EQUAL)
                self.state = 3245
                self.match(tsqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3248
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_file_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def file_group(self):
            return self.getTypedRuleContext(tsqlParser.File_groupContext,0)


        def file_spec(self):
            return self.getTypedRuleContext(tsqlParser.File_specContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_database_file_spec




    def database_file_spec(self):

        localctx = tsqlParser.Database_file_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_database_file_spec)
        try:
            self.state = 3252
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [278]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3250
                self.file_group()
                pass
            elif token in [472]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3251
                self.file_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILEGROUP(self):
            return self.getToken(tsqlParser.FILEGROUP, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def file_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.File_specContext)
            else:
                return self.getTypedRuleContext(tsqlParser.File_specContext,i)


        def CONTAINS(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.CONTAINS)
            else:
                return self.getToken(tsqlParser.CONTAINS, i)

        def FILESTREAM(self):
            return self.getToken(tsqlParser.FILESTREAM, 0)

        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def MEMORY_OPTIMIZED_DATA(self):
            return self.getToken(tsqlParser.MEMORY_OPTIMIZED_DATA, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_file_group




    def file_group(self):

        localctx = tsqlParser.File_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_file_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3254
            self.match(tsqlParser.FILEGROUP)
            self.state = 3255
            self.r_id()
            self.state = 3258
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,447,self._ctx)
            if la_ == 1:
                self.state = 3256
                self.match(tsqlParser.CONTAINS)
                self.state = 3257
                self.match(tsqlParser.FILESTREAM)


            self.state = 3261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 3260
                self.match(tsqlParser.DEFAULT)


            self.state = 3265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 3263
                self.match(tsqlParser.CONTAINS)
                self.state = 3264
                self.match(tsqlParser.MEMORY_OPTIMIZED_DATA)


            self.state = 3267
            self.file_spec()
            self.state = 3272
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,450,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3268
                    self.match(tsqlParser.COMMA)
                    self.state = 3269
                    self.file_spec() 
                self.state = 3274
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,450,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.r_file = None # Token

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def NAME(self):
            return self.getToken(tsqlParser.NAME, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.EQUAL)
            else:
                return self.getToken(tsqlParser.EQUAL, i)

        def FILENAME(self):
            return self.getToken(tsqlParser.FILENAME, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.STRING)
            else:
                return self.getToken(tsqlParser.STRING, i)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def SIZE(self):
            return self.getToken(tsqlParser.SIZE, 0)

        def file_size(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.File_sizeContext)
            else:
                return self.getTypedRuleContext(tsqlParser.File_sizeContext,i)


        def MAXSIZE(self):
            return self.getToken(tsqlParser.MAXSIZE, 0)

        def FILEGROWTH(self):
            return self.getToken(tsqlParser.FILEGROWTH, 0)

        def UNLIMITED(self):
            return self.getToken(tsqlParser.UNLIMITED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_file_spec




    def file_spec(self):

        localctx = tsqlParser.File_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_file_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3275
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3276
            self.match(tsqlParser.NAME)
            self.state = 3277
            self.match(tsqlParser.EQUAL)
            self.state = 3280
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 450]:
                self.state = 3278
                self.r_id()
                pass
            elif token in [451]:
                self.state = 3279
                self.match(tsqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 3282
                self.match(tsqlParser.COMMA)


            self.state = 3285
            self.match(tsqlParser.FILENAME)
            self.state = 3286
            self.match(tsqlParser.EQUAL)
            self.state = 3287
            localctx.r_file = self.match(tsqlParser.STRING)
            self.state = 3289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 3288
                self.match(tsqlParser.COMMA)


            self.state = 3297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==400:
                self.state = 3291
                self.match(tsqlParser.SIZE)
                self.state = 3292
                self.match(tsqlParser.EQUAL)
                self.state = 3293
                self.file_size()
                self.state = 3295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 3294
                    self.match(tsqlParser.COMMA)




            self.state = 3308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==325:
                self.state = 3299
                self.match(tsqlParser.MAXSIZE)
                self.state = 3300
                self.match(tsqlParser.EQUAL)
                self.state = 3303
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [449]:
                    self.state = 3301
                    self.file_size()
                    pass
                elif token in [432]:
                    self.state = 3302
                    self.match(tsqlParser.UNLIMITED)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3306
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 3305
                    self.match(tsqlParser.COMMA)




            self.state = 3316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279:
                self.state = 3310
                self.match(tsqlParser.FILEGROWTH)
                self.state = 3311
                self.match(tsqlParser.EQUAL)
                self.state = 3312
                self.file_size()
                self.state = 3314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 3313
                    self.match(tsqlParser.COMMA)




            self.state = 3318
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.server = None # R_idContext
            self.database = None # R_idContext
            self.schema = None # R_idContext
            self.table = None # R_idContext

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DOT)
            else:
                return self.getToken(tsqlParser.DOT, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_full_table_name




    def full_table_name(self):

        localctx = tsqlParser.Full_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_full_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,462,self._ctx)
            if la_ == 1:
                self.state = 3320
                localctx.server = self.r_id()
                self.state = 3321
                self.match(tsqlParser.DOT)
                self.state = 3322
                localctx.database = self.r_id()
                self.state = 3323
                self.match(tsqlParser.DOT)
                self.state = 3324
                localctx.schema = self.r_id()
                self.state = 3325
                self.match(tsqlParser.DOT)

            elif la_ == 2:
                self.state = 3327
                localctx.database = self.r_id()
                self.state = 3328
                self.match(tsqlParser.DOT)
                self.state = 3330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 17729624997893) != 0 or (((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 9969332866253825) != 0 or (((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & -148821964101331) != 0 or (((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & -47521180986790319) != 0 or (((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & 171699173404606099) != 0:
                    self.state = 3329
                    localctx.schema = self.r_id()


                self.state = 3332
                self.match(tsqlParser.DOT)

            elif la_ == 3:
                self.state = 3334
                localctx.schema = self.r_id()
                self.state = 3335
                self.match(tsqlParser.DOT)


            self.state = 3339
            localctx.table = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # R_idContext
            self.name = None # R_idContext

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def DOT(self):
            return self.getToken(tsqlParser.DOT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_simple_name




    def simple_name(self):

        localctx = tsqlParser.Simple_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_simple_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3344
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,463,self._ctx)
            if la_ == 1:
                self.state = 3341
                localctx.schema = self.r_id()
                self.state = 3342
                self.match(tsqlParser.DOT)


            self.state = 3346
            localctx.name = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_proc_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext
            self.schema = None # R_idContext
            self.procedure = None # R_idContext

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DOT)
            else:
                return self.getToken(tsqlParser.DOT, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_func_proc_name




    def func_proc_name(self):

        localctx = tsqlParser.Func_proc_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_func_proc_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,465,self._ctx)
            if la_ == 1:
                self.state = 3348
                localctx.database = self.r_id()
                self.state = 3349
                self.match(tsqlParser.DOT)
                self.state = 3351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 17729624997893) != 0 or (((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 9969332866253825) != 0 or (((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & -148821964101331) != 0 or (((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & -47521180986790319) != 0 or (((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & 171699173404606099) != 0:
                    self.state = 3350
                    localctx.schema = self.r_id()


                self.state = 3353
                self.match(tsqlParser.DOT)

            elif la_ == 2:
                self.state = 3355
                localctx.schema = self.r_id()
                self.state = 3356
                self.match(tsqlParser.DOT)


            self.state = 3360
            localctx.procedure = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ddl_objectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def full_table_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_table_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_ddl_object




    def ddl_object(self):

        localctx = tsqlParser.Ddl_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_ddl_object)
        try:
            self.state = 3364
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 450]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3362
                self.full_table_name()
                pass
            elif token in [448]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3363
                self.match(tsqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table = None # Full_table_nameContext
            self.name = None # R_idContext

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def DOT(self):
            return self.getToken(tsqlParser.DOT, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_table_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_full_column_name




    def full_column_name(self):

        localctx = tsqlParser.Full_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_full_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3369
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,467,self._ctx)
            if la_ == 1:
                self.state = 3366
                localctx.table = self.full_table_name()
                self.state = 3367
                self.match(tsqlParser.DOT)


            self.state = 3371
            localctx.name = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_name_list




    def column_name_list(self):

        localctx = tsqlParser.Column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3373
            self.r_id()
            self.state = 3378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==474:
                self.state = 3374
                self.match(tsqlParser.COMMA)
                self.state = 3375
                self.r_id()
                self.state = 3380
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_cursor_name




    def cursor_name(self):

        localctx = tsqlParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_cursor_name)
        try:
            self.state = 3383
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 450]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3381
                self.r_id()
                pass
            elif token in [448]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3382
                self.match(tsqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_offContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_on_off




    def on_off(self):

        localctx = tsqlParser.On_offContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_on_off)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3385
            _la = self._input.LA(1)
            if not(_la==117 or _la==119):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClusteredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTERED(self):
            return self.getToken(tsqlParser.CLUSTERED, 0)

        def NONCLUSTERED(self):
            return self.getToken(tsqlParser.NONCLUSTERED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_clustered




    def clustered(self):

        localctx = tsqlParser.ClusteredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_clustered)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3387
            _la = self._input.LA(1)
            if not(_la==24 or _la==110):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_notnullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_(self):
            return self.getToken(tsqlParser.NULL_, 0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_null_notnull




    def null_notnull(self):

        localctx = tsqlParser.Null_notnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_null_notnull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 3389
                self.match(tsqlParser.NOT)


            self.state = 3392
            self.match(tsqlParser.NULL_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scalar_function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def RIGHT(self):
            return self.getToken(tsqlParser.RIGHT, 0)

        def LEFT(self):
            return self.getToken(tsqlParser.LEFT, 0)

        def BINARY_CHECKSUM(self):
            return self.getToken(tsqlParser.BINARY_CHECKSUM, 0)

        def CHECKSUM(self):
            return self.getToken(tsqlParser.CHECKSUM, 0)

        def EXP(self):
            return self.getToken(tsqlParser.EXP, 0)

        def LOG(self):
            return self.getToken(tsqlParser.LOG, 0)

        def LOG10(self):
            return self.getToken(tsqlParser.LOG10, 0)

        def SQUARE(self):
            return self.getToken(tsqlParser.SQUARE, 0)

        def SQRT(self):
            return self.getToken(tsqlParser.SQRT, 0)

        def ROUND(self):
            return self.getToken(tsqlParser.ROUND, 0)

        def CEILING(self):
            return self.getToken(tsqlParser.CEILING, 0)

        def FLOOR(self):
            return self.getToken(tsqlParser.FLOOR, 0)

        def POWER(self):
            return self.getToken(tsqlParser.POWER, 0)

        def COS(self):
            return self.getToken(tsqlParser.COS, 0)

        def SIN(self):
            return self.getToken(tsqlParser.SIN, 0)

        def TAN(self):
            return self.getToken(tsqlParser.TAN, 0)

        def SIGN(self):
            return self.getToken(tsqlParser.SIGN, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_scalar_function_name




    def scalar_function_name(self):

        localctx = tsqlParser.Scalar_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_scalar_function_name)
        try:
            self.state = 3412
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 450]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3394
                self.func_proc_name()
                pass
            elif token in [152]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3395
                self.match(tsqlParser.RIGHT)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3396
                self.match(tsqlParser.LEFT)
                pass
            elif token in [227]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3397
                self.match(tsqlParser.BINARY_CHECKSUM)
                pass
            elif token in [235]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3398
                self.match(tsqlParser.CHECKSUM)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3399
                self.match(tsqlParser.EXP)
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3400
                self.match(tsqlParser.LOG)
                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3401
                self.match(tsqlParser.LOG10)
                pass
            elif token in [412]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3402
                self.match(tsqlParser.SQUARE)
                pass
            elif token in [411]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3403
                self.match(tsqlParser.SQRT)
                pass
            elif token in [383]:
                self.enterOuterAlt(localctx, 11)
                self.state = 3404
                self.match(tsqlParser.ROUND)
                pass
            elif token in [232]:
                self.enterOuterAlt(localctx, 12)
                self.state = 3405
                self.match(tsqlParser.CEILING)
                pass
            elif token in [283]:
                self.enterOuterAlt(localctx, 13)
                self.state = 3406
                self.match(tsqlParser.FLOOR)
                pass
            elif token in [361]:
                self.enterOuterAlt(localctx, 14)
                self.state = 3407
                self.match(tsqlParser.POWER)
                pass
            elif token in [243]:
                self.enterOuterAlt(localctx, 15)
                self.state = 3408
                self.match(tsqlParser.COS)
                pass
            elif token in [398]:
                self.enterOuterAlt(localctx, 16)
                self.state = 3409
                self.match(tsqlParser.SIN)
                pass
            elif token in [414]:
                self.enterOuterAlt(localctx, 17)
                self.state = 3410
                self.match(tsqlParser.TAN)
                pass
            elif token in [168]:
                self.enterOuterAlt(localctx, 18)
                self.state = 3411
                self.match(tsqlParser.SIGN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_(self):
            return self.getToken(tsqlParser.NULL_, 0)

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_default_value




    def default_value(self):

        localctx = tsqlParser.Default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_default_value)
        try:
            self.state = 3416
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [113]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3414
                self.match(tsqlParser.NULL_)
                pass
            elif token in [449, 451, 452, 453, 454, 471, 480, 481]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3415
                self.constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dollar = None # Token

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def BINARY(self):
            return self.getToken(tsqlParser.BINARY, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def sign(self):
            return self.getTypedRuleContext(tsqlParser.SignContext,0)


        def REAL(self):
            return self.getToken(tsqlParser.REAL, 0)

        def FLOAT(self):
            return self.getToken(tsqlParser.FLOAT, 0)

        def DOLLAR(self):
            return self.getToken(tsqlParser.DOLLAR, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_constant




    def constant(self):

        localctx = tsqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 3433
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,476,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3418
                self.match(tsqlParser.STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3419
                self.match(tsqlParser.BINARY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==480 or _la==481:
                    self.state = 3420
                    self.sign()


                self.state = 3423
                self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==480 or _la==481:
                    self.state = 3424
                    self.sign()


                self.state = 3427
                _la = self._input.LA(1)
                if not(_la==453 or _la==454):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==480 or _la==481:
                    self.state = 3428
                    self.sign()


                self.state = 3431
                localctx.dollar = self.match(tsqlParser.DOLLAR)
                self.state = 3432
                _la = self._input.LA(1)
                if not(_la==449 or _la==453):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(tsqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(tsqlParser.MINUS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_sign




    def sign(self):

        localctx = tsqlParser.SignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_sign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3435
            _la = self._input.LA(1)
            if not(_la==480 or _la==481):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class R_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_id(self):
            return self.getTypedRuleContext(tsqlParser.Simple_idContext,0)


        def DOUBLE_QUOTE_ID(self):
            return self.getToken(tsqlParser.DOUBLE_QUOTE_ID, 0)

        def SQUARE_BRACKET_ID(self):
            return self.getToken(tsqlParser.SQUARE_BRACKET_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_r_id




    def r_id(self):

        localctx = tsqlParser.R_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_r_id)
        try:
            self.state = 3440
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71, 73, 108, 115, 196, 206, 214, 217, 224, 225, 229, 230, 231, 236, 237, 239, 241, 242, 244, 245, 249, 261, 263, 264, 266, 269, 272, 274, 275, 276, 277, 281, 282, 284, 285, 286, 287, 288, 290, 292, 293, 295, 298, 300, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 332, 334, 337, 338, 339, 341, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 364, 365, 367, 368, 369, 371, 373, 376, 377, 378, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 417, 418, 419, 420, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 450]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3437
                self.simple_id()
                pass
            elif token in [446]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3438
                self.match(tsqlParser.DOUBLE_QUOTE_ID)
                pass
            elif token in [447]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3439
                self.match(tsqlParser.SQUARE_BRACKET_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(tsqlParser.ID, 0)

        def IO(self):
            return self.getToken(tsqlParser.IO, 0)

        def ABSOLUTE(self):
            return self.getToken(tsqlParser.ABSOLUTE, 0)

        def APPLY(self):
            return self.getToken(tsqlParser.APPLY, 0)

        def AUTO(self):
            return self.getToken(tsqlParser.AUTO, 0)

        def AVG(self):
            return self.getToken(tsqlParser.AVG, 0)

        def BASE64(self):
            return self.getToken(tsqlParser.BASE64, 0)

        def CALLER(self):
            return self.getToken(tsqlParser.CALLER, 0)

        def CAST(self):
            return self.getToken(tsqlParser.CAST, 0)

        def CATCH(self):
            return self.getToken(tsqlParser.CATCH, 0)

        def CHECKSUM_AGG(self):
            return self.getToken(tsqlParser.CHECKSUM_AGG, 0)

        def COMMITTED(self):
            return self.getToken(tsqlParser.COMMITTED, 0)

        def CONCAT(self):
            return self.getToken(tsqlParser.CONCAT, 0)

        def CONTROL(self):
            return self.getToken(tsqlParser.CONTROL, 0)

        def COOKIE(self):
            return self.getToken(tsqlParser.COOKIE, 0)

        def COUNT(self):
            return self.getToken(tsqlParser.COUNT, 0)

        def COUNT_BIG(self):
            return self.getToken(tsqlParser.COUNT_BIG, 0)

        def DATE(self):
            return self.getToken(tsqlParser.DATE, 0)

        def DELAY(self):
            return self.getToken(tsqlParser.DELAY, 0)

        def DELETED(self):
            return self.getToken(tsqlParser.DELETED, 0)

        def DENSE_RANK(self):
            return self.getToken(tsqlParser.DENSE_RANK, 0)

        def DISABLE(self):
            return self.getToken(tsqlParser.DISABLE, 0)

        def DYNAMIC(self):
            return self.getToken(tsqlParser.DYNAMIC, 0)

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def EXIST(self):
            return self.getToken(tsqlParser.EXIST, 0)

        def EXPAND(self):
            return self.getToken(tsqlParser.EXPAND, 0)

        def FAST(self):
            return self.getToken(tsqlParser.FAST, 0)

        def FAST_FORWARD(self):
            return self.getToken(tsqlParser.FAST_FORWARD, 0)

        def FILLFACTOR(self):
            return self.getToken(tsqlParser.FILLFACTOR, 0)

        def FIRST(self):
            return self.getToken(tsqlParser.FIRST, 0)

        def FIRST_VALUE(self):
            return self.getToken(tsqlParser.FIRST_VALUE, 0)

        def FOLLOWING(self):
            return self.getToken(tsqlParser.FOLLOWING, 0)

        def FORCE(self):
            return self.getToken(tsqlParser.FORCE, 0)

        def FORCESEEK(self):
            return self.getToken(tsqlParser.FORCESEEK, 0)

        def FORWARD_ONLY(self):
            return self.getToken(tsqlParser.FORWARD_ONLY, 0)

        def FULLSCAN(self):
            return self.getToken(tsqlParser.FULLSCAN, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def GROUPING(self):
            return self.getToken(tsqlParser.GROUPING, 0)

        def GROUPING_ID(self):
            return self.getToken(tsqlParser.GROUPING_ID, 0)

        def HASH(self):
            return self.getToken(tsqlParser.HASH, 0)

        def IMPERSONATE(self):
            return self.getToken(tsqlParser.IMPERSONATE, 0)

        def INSENSITIVE(self):
            return self.getToken(tsqlParser.INSENSITIVE, 0)

        def INSERTED(self):
            return self.getToken(tsqlParser.INSERTED, 0)

        def ISOLATION(self):
            return self.getToken(tsqlParser.ISOLATION, 0)

        def KEEP(self):
            return self.getToken(tsqlParser.KEEP, 0)

        def KEEPFIXED(self):
            return self.getToken(tsqlParser.KEEPFIXED, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def KEYSET(self):
            return self.getToken(tsqlParser.KEYSET, 0)

        def IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX(self):
            return self.getToken(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)

        def LAG(self):
            return self.getToken(tsqlParser.LAG, 0)

        def LAST(self):
            return self.getToken(tsqlParser.LAST, 0)

        def LAST_VALUE(self):
            return self.getToken(tsqlParser.LAST_VALUE, 0)

        def LEAD(self):
            return self.getToken(tsqlParser.LEAD, 0)

        def LEVEL(self):
            return self.getToken(tsqlParser.LEVEL, 0)

        def LOCAL(self):
            return self.getToken(tsqlParser.LOCAL, 0)

        def LOCK_ESCALATION(self):
            return self.getToken(tsqlParser.LOCK_ESCALATION, 0)

        def LOGIN(self):
            return self.getToken(tsqlParser.LOGIN, 0)

        def LOOP(self):
            return self.getToken(tsqlParser.LOOP, 0)

        def MARK(self):
            return self.getToken(tsqlParser.MARK, 0)

        def MAX(self):
            return self.getToken(tsqlParser.MAX, 0)

        def MAXDOP(self):
            return self.getToken(tsqlParser.MAXDOP, 0)

        def MAXRECURSION(self):
            return self.getToken(tsqlParser.MAXRECURSION, 0)

        def MIN(self):
            return self.getToken(tsqlParser.MIN, 0)

        def MODIFY(self):
            return self.getToken(tsqlParser.MODIFY, 0)

        def NAME(self):
            return self.getToken(tsqlParser.NAME, 0)

        def NEXT(self):
            return self.getToken(tsqlParser.NEXT, 0)

        def NOCOUNT(self):
            return self.getToken(tsqlParser.NOCOUNT, 0)

        def NODES(self):
            return self.getToken(tsqlParser.NODES, 0)

        def NOEXPAND(self):
            return self.getToken(tsqlParser.NOEXPAND, 0)

        def NORECOMPUTE(self):
            return self.getToken(tsqlParser.NORECOMPUTE, 0)

        def NTILE(self):
            return self.getToken(tsqlParser.NTILE, 0)

        def NUMBER(self):
            return self.getToken(tsqlParser.NUMBER, 0)

        def NUMERIC(self):
            return self.getToken(tsqlParser.NUMERIC, 0)

        def OFFSET(self):
            return self.getToken(tsqlParser.OFFSET, 0)

        def ONLINE(self):
            return self.getToken(tsqlParser.ONLINE, 0)

        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def OPTIMISTIC(self):
            return self.getToken(tsqlParser.OPTIMISTIC, 0)

        def OPTIMIZE(self):
            return self.getToken(tsqlParser.OPTIMIZE, 0)

        def OUT(self):
            return self.getToken(tsqlParser.OUT, 0)

        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def OWNER(self):
            return self.getToken(tsqlParser.OWNER, 0)

        def PARAMETERIZATION(self):
            return self.getToken(tsqlParser.PARAMETERIZATION, 0)

        def PARTITION(self):
            return self.getToken(tsqlParser.PARTITION, 0)

        def PATH(self):
            return self.getToken(tsqlParser.PATH, 0)

        def PRECEDING(self):
            return self.getToken(tsqlParser.PRECEDING, 0)

        def PRIOR(self):
            return self.getToken(tsqlParser.PRIOR, 0)

        def PRIVILEGES(self):
            return self.getToken(tsqlParser.PRIVILEGES, 0)

        def QUERY(self):
            return self.getToken(tsqlParser.QUERY, 0)

        def RANGE(self):
            return self.getToken(tsqlParser.RANGE, 0)

        def RANK(self):
            return self.getToken(tsqlParser.RANK, 0)

        def READONLY(self):
            return self.getToken(tsqlParser.READONLY, 0)

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def RECOMPILE(self):
            return self.getToken(tsqlParser.RECOMPILE, 0)

        def RELATIVE(self):
            return self.getToken(tsqlParser.RELATIVE, 0)

        def REMOTE(self):
            return self.getToken(tsqlParser.REMOTE, 0)

        def REPEATABLE(self):
            return self.getToken(tsqlParser.REPEATABLE, 0)

        def ROBUST(self):
            return self.getToken(tsqlParser.ROBUST, 0)

        def ROOT(self):
            return self.getToken(tsqlParser.ROOT, 0)

        def ROW(self):
            return self.getToken(tsqlParser.ROW, 0)

        def ROWGUID(self):
            return self.getToken(tsqlParser.ROWGUID, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def ROW_NUMBER(self):
            return self.getToken(tsqlParser.ROW_NUMBER, 0)

        def SAMPLE(self):
            return self.getToken(tsqlParser.SAMPLE, 0)

        def SCHEMABINDING(self):
            return self.getToken(tsqlParser.SCHEMABINDING, 0)

        def SCROLL(self):
            return self.getToken(tsqlParser.SCROLL, 0)

        def SCROLL_LOCKS(self):
            return self.getToken(tsqlParser.SCROLL_LOCKS, 0)

        def SELF(self):
            return self.getToken(tsqlParser.SELF, 0)

        def SERIALIZABLE(self):
            return self.getToken(tsqlParser.SERIALIZABLE, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def SIZE(self):
            return self.getToken(tsqlParser.SIZE, 0)

        def SNAPSHOT(self):
            return self.getToken(tsqlParser.SNAPSHOT, 0)

        def SPATIAL_WINDOW_MAX_CELLS(self):
            return self.getToken(tsqlParser.SPATIAL_WINDOW_MAX_CELLS, 0)

        def STATIC(self):
            return self.getToken(tsqlParser.STATIC, 0)

        def STATS_STREAM(self):
            return self.getToken(tsqlParser.STATS_STREAM, 0)

        def STDEV(self):
            return self.getToken(tsqlParser.STDEV, 0)

        def STDEVP(self):
            return self.getToken(tsqlParser.STDEVP, 0)

        def SUM(self):
            return self.getToken(tsqlParser.SUM, 0)

        def TEXTIMAGE_ON(self):
            return self.getToken(tsqlParser.TEXTIMAGE_ON, 0)

        def THROW(self):
            return self.getToken(tsqlParser.THROW, 0)

        def TIES(self):
            return self.getToken(tsqlParser.TIES, 0)

        def TIME(self):
            return self.getToken(tsqlParser.TIME, 0)

        def TRY(self):
            return self.getToken(tsqlParser.TRY, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def TYPE_WARNING(self):
            return self.getToken(tsqlParser.TYPE_WARNING, 0)

        def UNBOUNDED(self):
            return self.getToken(tsqlParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(tsqlParser.UNCOMMITTED, 0)

        def UNKNOWN(self):
            return self.getToken(tsqlParser.UNKNOWN, 0)

        def USING(self):
            return self.getToken(tsqlParser.USING, 0)

        def VAR(self):
            return self.getToken(tsqlParser.VAR, 0)

        def VARP(self):
            return self.getToken(tsqlParser.VARP, 0)

        def VALUE(self):
            return self.getToken(tsqlParser.VALUE, 0)

        def VIEW_METADATA(self):
            return self.getToken(tsqlParser.VIEW_METADATA, 0)

        def VIEWS(self):
            return self.getToken(tsqlParser.VIEWS, 0)

        def WORK(self):
            return self.getToken(tsqlParser.WORK, 0)

        def XML(self):
            return self.getToken(tsqlParser.XML, 0)

        def XMLNAMESPACES(self):
            return self.getToken(tsqlParser.XMLNAMESPACES, 0)

        def ZONE(self):
            return self.getToken(tsqlParser.ZONE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_simple_id




    def simple_id(self):

        localctx = tsqlParser.Simple_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_simple_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3442
            _la = self._input.LA(1)
            if not((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 17729624997893) != 0 or (((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 9969332866253825) != 0 or (((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & -148821964101331) != 0 or (((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & -47521180986790319) != 0 or (((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & 144677575640383123) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comparison_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def GREATER(self):
            return self.getToken(tsqlParser.GREATER, 0)

        def LESS(self):
            return self.getToken(tsqlParser.LESS, 0)

        def EXCLAMATION(self):
            return self.getToken(tsqlParser.EXCLAMATION, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_comparison_operator




    def comparison_operator(self):

        localctx = tsqlParser.Comparison_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_comparison_operator)
        try:
            self.state = 3459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,478,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3444
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3445
                self.match(tsqlParser.GREATER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3446
                self.match(tsqlParser.LESS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3447
                self.match(tsqlParser.LESS)
                self.state = 3448
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3449
                self.match(tsqlParser.GREATER)
                self.state = 3450
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3451
                self.match(tsqlParser.LESS)
                self.state = 3452
                self.match(tsqlParser.GREATER)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3453
                self.match(tsqlParser.EXCLAMATION)
                self.state = 3454
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3455
                self.match(tsqlParser.EXCLAMATION)
                self.state = 3456
                self.match(tsqlParser.GREATER)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3457
                self.match(tsqlParser.EXCLAMATION)
                self.state = 3458
                self.match(tsqlParser.LESS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS_ASSIGN(self):
            return self.getToken(tsqlParser.PLUS_ASSIGN, 0)

        def MINUS_ASSIGN(self):
            return self.getToken(tsqlParser.MINUS_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(tsqlParser.MULT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(tsqlParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(tsqlParser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(tsqlParser.AND_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(tsqlParser.XOR_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(tsqlParser.OR_ASSIGN, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_assignment_operator




    def assignment_operator(self):

        localctx = tsqlParser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_assignment_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3461
            _la = self._input.LA(1)
            if not((((_la - 459)) & ~0x3f) == 0 and ((1 << (_la - 459)) & 255) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_sizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def KB(self):
            return self.getToken(tsqlParser.KB, 0)

        def MB(self):
            return self.getToken(tsqlParser.MB, 0)

        def GB(self):
            return self.getToken(tsqlParser.GB, 0)

        def TB(self):
            return self.getToken(tsqlParser.TB, 0)

        def MODULE(self):
            return self.getToken(tsqlParser.MODULE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_file_size




    def file_size(self):

        localctx = tsqlParser.File_sizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_file_size)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3463
            self.match(tsqlParser.DECIMAL)
            self.state = 3465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 289)) & ~0x3f) == 0 and ((1 << (_la - 289)) & 137439477761) != 0 or _la==416 or _la==479:
                self.state = 3464
                _la = self._input.LA(1)
                if not((((_la - 289)) & ~0x3f) == 0 and ((1 << (_la - 289)) & 137439477761) != 0 or _la==416 or _la==479):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_or_alter_procedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.proc = None # Token

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def sql_clauses(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,0)


        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def PROC(self):
            return self.getToken(tsqlParser.PROC, 0)

        def PROCEDURE(self):
            return self.getToken(tsqlParser.PROCEDURE, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def procedure_param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Procedure_paramContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Procedure_paramContext,i)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def procedure_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Procedure_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Procedure_optionContext,i)


        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def OR(self):
            return self.getToken(tsqlParser.OR, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_or_alter_procedure




    def create_or_alter_procedure(self):

        localctx = tsqlParser.Create_or_alter_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_create_or_alter_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3473
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [36]:
                self.state = 3467
                self.match(tsqlParser.CREATE)
                self.state = 3470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==126:
                    self.state = 3468
                    self.match(tsqlParser.OR)
                    self.state = 3469
                    self.match(tsqlParser.ALTER)


                pass
            elif token in [3]:
                self.state = 3472
                self.match(tsqlParser.ALTER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3475
            localctx.proc = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==137 or _la==138):
                localctx.proc = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3476
            self.func_proc_name()
            self.state = 3479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==475:
                self.state = 3477
                self.match(tsqlParser.SEMI)
                self.state = 3478
                self.match(tsqlParser.DECIMAL)


            self.state = 3495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==448 or _la==472:
                self.state = 3482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==472:
                    self.state = 3481
                    self.match(tsqlParser.LR_BRACKET)


                self.state = 3484
                self.procedure_param()
                self.state = 3489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==474:
                    self.state = 3485
                    self.match(tsqlParser.COMMA)
                    self.state = 3486
                    self.procedure_param()
                    self.state = 3491
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==473:
                    self.state = 3492
                    self.match(tsqlParser.RR_BRACKET)




            self.state = 3506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==203:
                self.state = 3497
                self.match(tsqlParser.WITH)
                self.state = 3498
                self.procedure_option()
                self.state = 3503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==474:
                    self.state = 3499
                    self.match(tsqlParser.COMMA)
                    self.state = 3500
                    self.procedure_option()
                    self.state = 3505
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 3508
                self.match(tsqlParser.FOR)
                self.state = 3509
                self.match(tsqlParser.REPLICATION)


            self.state = 3512
            self.match(tsqlParser.AS)
            self.state = 3513
            self.sql_clauses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_or_alter_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(tsqlParser.FUNCTION, 0)

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def func_body_returns_select(self):
            return self.getTypedRuleContext(tsqlParser.Func_body_returns_selectContext,0)


        def func_body_returns_table(self):
            return self.getTypedRuleContext(tsqlParser.Func_body_returns_tableContext,0)


        def func_body_returns_scalar(self):
            return self.getTypedRuleContext(tsqlParser.Func_body_returns_scalarContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def procedure_param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Procedure_paramContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Procedure_paramContext,i)


        def OR(self):
            return self.getToken(tsqlParser.OR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_or_alter_function




    def create_or_alter_function(self):

        localctx = tsqlParser.Create_or_alter_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_create_or_alter_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3521
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [36]:
                self.state = 3515
                self.match(tsqlParser.CREATE)
                self.state = 3518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==126:
                    self.state = 3516
                    self.match(tsqlParser.OR)
                    self.state = 3517
                    self.match(tsqlParser.ALTER)


                pass
            elif token in [3]:
                self.state = 3520
                self.match(tsqlParser.ALTER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3523
            self.match(tsqlParser.FUNCTION)
            self.state = 3524
            self.func_proc_name()
            self.state = 3538
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,493,self._ctx)
            if la_ == 1:
                self.state = 3525
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3526
                self.procedure_param()
                self.state = 3531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==474:
                    self.state = 3527
                    self.match(tsqlParser.COMMA)
                    self.state = 3528
                    self.procedure_param()
                    self.state = 3533
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3534
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.state = 3536
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3537
                self.match(tsqlParser.RR_BRACKET)
                pass


            self.state = 3543
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,494,self._ctx)
            if la_ == 1:
                self.state = 3540
                self.func_body_returns_select()
                pass

            elif la_ == 2:
                self.state = 3541
                self.func_body_returns_table()
                pass

            elif la_ == 3:
                self.state = 3542
                self.func_body_returns_scalar()
                pass


            self.state = 3546
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,495,self._ctx)
            if la_ == 1:
                self.state = 3545
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_body_returns_selectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(tsqlParser.RETURNS, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def RETURN(self):
            return self.getToken(tsqlParser.RETURN, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def function_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Function_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Function_optionContext,i)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_func_body_returns_select




    def func_body_returns_select(self):

        localctx = tsqlParser.Func_body_returns_selectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_func_body_returns_select)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3548
            self.match(tsqlParser.RETURNS)
            self.state = 3549
            self.match(tsqlParser.TABLE)
            self.state = 3559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==203:
                self.state = 3550
                self.match(tsqlParser.WITH)
                self.state = 3551
                self.function_option()
                self.state = 3556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==474:
                    self.state = 3552
                    self.match(tsqlParser.COMMA)
                    self.state = 3553
                    self.function_option()
                    self.state = 3558
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 3561
                self.match(tsqlParser.AS)


            self.state = 3564
            self.match(tsqlParser.RETURN)
            self.state = 3570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,499,self._ctx)
            if la_ == 1:
                self.state = 3565
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3566
                self.select_statement()
                self.state = 3567
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.state = 3569
                self.select_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_body_returns_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(tsqlParser.RETURNS, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def table_type_definition(self):
            return self.getTypedRuleContext(tsqlParser.Table_type_definitionContext,0)


        def BEGIN(self):
            return self.getToken(tsqlParser.BEGIN, 0)

        def RETURN(self):
            return self.getToken(tsqlParser.RETURN, 0)

        def END(self):
            return self.getToken(tsqlParser.END, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def function_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Function_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Function_optionContext,i)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.SEMI)
            else:
                return self.getToken(tsqlParser.SEMI, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_func_body_returns_table




    def func_body_returns_table(self):

        localctx = tsqlParser.Func_body_returns_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_func_body_returns_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3572
            self.match(tsqlParser.RETURNS)
            self.state = 3573
            self.match(tsqlParser.LOCAL_ID)
            self.state = 3574
            self.table_type_definition()
            self.state = 3584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==203:
                self.state = 3575
                self.match(tsqlParser.WITH)
                self.state = 3576
                self.function_option()
                self.state = 3581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==474:
                    self.state = 3577
                    self.match(tsqlParser.COMMA)
                    self.state = 3578
                    self.function_option()
                    self.state = 3583
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 3586
                self.match(tsqlParser.AS)


            self.state = 3589
            self.match(tsqlParser.BEGIN)
            self.state = 3593
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,503,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3590
                    self.sql_clause() 
                self.state = 3595
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,503,self._ctx)

            self.state = 3596
            self.match(tsqlParser.RETURN)
            self.state = 3598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==475:
                self.state = 3597
                self.match(tsqlParser.SEMI)


            self.state = 3600
            self.match(tsqlParser.END)
            self.state = 3602
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,505,self._ctx)
            if la_ == 1:
                self.state = 3601
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_body_returns_scalarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ret = None # ExpressionContext

        def RETURNS(self):
            return self.getToken(tsqlParser.RETURNS, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def BEGIN(self):
            return self.getToken(tsqlParser.BEGIN, 0)

        def RETURN(self):
            return self.getToken(tsqlParser.RETURN, 0)

        def END(self):
            return self.getToken(tsqlParser.END, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def function_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Function_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Function_optionContext,i)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,i)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_func_body_returns_scalar




    def func_body_returns_scalar(self):

        localctx = tsqlParser.Func_body_returns_scalarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_func_body_returns_scalar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3604
            self.match(tsqlParser.RETURNS)
            self.state = 3605
            self.data_type()
            self.state = 3615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==203:
                self.state = 3606
                self.match(tsqlParser.WITH)
                self.state = 3607
                self.function_option()
                self.state = 3612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==474:
                    self.state = 3608
                    self.match(tsqlParser.COMMA)
                    self.state = 3609
                    self.function_option()
                    self.state = 3614
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 3617
                self.match(tsqlParser.AS)


            self.state = 3620
            self.match(tsqlParser.BEGIN)
            self.state = 3624
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,509,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3621
                    self.sql_clause() 
                self.state = 3626
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,509,self._ctx)

            self.state = 3627
            self.match(tsqlParser.RETURN)
            self.state = 3628
            localctx.ret = self.expression(0)
            self.state = 3630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==475:
                self.state = 3629
                self.match(tsqlParser.SEMI)


            self.state = 3632
            self.match(tsqlParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_paramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.default_val = None # Default_valueContext

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def DOT(self):
            return self.getToken(tsqlParser.DOT, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def VARYING(self):
            return self.getToken(tsqlParser.VARYING, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def default_value(self):
            return self.getTypedRuleContext(tsqlParser.Default_valueContext,0)


        def OUT(self):
            return self.getToken(tsqlParser.OUT, 0)

        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def READONLY(self):
            return self.getToken(tsqlParser.READONLY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_procedure_param




    def procedure_param(self):

        localctx = tsqlParser.Procedure_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_procedure_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3634
            self.match(tsqlParser.LOCAL_ID)
            self.state = 3638
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,511,self._ctx)
            if la_ == 1:
                self.state = 3635
                self.r_id()
                self.state = 3636
                self.match(tsqlParser.DOT)


            self.state = 3641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 3640
                self.match(tsqlParser.AS)


            self.state = 3643
            self.data_type()
            self.state = 3645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==197:
                self.state = 3644
                self.match(tsqlParser.VARYING)


            self.state = 3649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==455:
                self.state = 3647
                self.match(tsqlParser.EQUAL)
                self.state = 3648
                localctx.default_val = self.default_value()


            self.state = 3652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 352)) & ~0x3f) == 0 and ((1 << (_la - 352)) & 131075) != 0:
                self.state = 3651
                _la = self._input.LA(1)
                if not((((_la - 352)) & ~0x3f) == 0 and ((1 << (_la - 352)) & 131075) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def RECOMPILE(self):
            return self.getToken(tsqlParser.RECOMPILE, 0)

        def execute_clause(self):
            return self.getTypedRuleContext(tsqlParser.Execute_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_procedure_option




    def procedure_option(self):

        localctx = tsqlParser.Procedure_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_procedure_option)
        try:
            self.state = 3657
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [272]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3654
                self.match(tsqlParser.ENCRYPTION)
                pass
            elif token in [373]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3655
                self.match(tsqlParser.RECOMPILE)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3656
                self.execute_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def SCHEMABINDING(self):
            return self.getToken(tsqlParser.SCHEMABINDING, 0)

        def RETURNS(self):
            return self.getToken(tsqlParser.RETURNS, 0)

        def NULL_(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.NULL_)
            else:
                return self.getToken(tsqlParser.NULL_, i)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def INPUT(self):
            return self.getToken(tsqlParser.INPUT, 0)

        def CALLED(self):
            return self.getToken(tsqlParser.CALLED, 0)

        def execute_clause(self):
            return self.getTypedRuleContext(tsqlParser.Execute_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_function_option




    def function_option(self):

        localctx = tsqlParser.Function_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_function_option)
        try:
            self.state = 3671
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [272]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3659
                self.match(tsqlParser.ENCRYPTION)
                pass
            elif token in [389]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3660
                self.match(tsqlParser.SCHEMABINDING)
                pass
            elif token in [149]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3661
                self.match(tsqlParser.RETURNS)
                self.state = 3662
                self.match(tsqlParser.NULL_)
                self.state = 3663
                self.match(tsqlParser.ON)
                self.state = 3664
                self.match(tsqlParser.NULL_)
                self.state = 3665
                self.match(tsqlParser.INPUT)
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3666
                self.match(tsqlParser.CALLED)
                self.state = 3667
                self.match(tsqlParser.ON)
                self.state = 3668
                self.match(tsqlParser.NULL_)
                self.state = 3669
                self.match(tsqlParser.INPUT)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3670
                self.execute_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Percentile_contContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERCENTILE_CONT(self):
            return self.getToken(tsqlParser.PERCENTILE_CONT, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LR_BRACKET)
            else:
                return self.getToken(tsqlParser.LR_BRACKET, i)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.RR_BRACKET)
            else:
                return self.getToken(tsqlParser.RR_BRACKET, i)

        def WITHIN(self):
            return self.getToken(tsqlParser.WITHIN, 0)

        def GROUP(self):
            return self.getToken(tsqlParser.GROUP, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(tsqlParser.Order_by_clauseContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_percentile_cont




    def percentile_cont(self):

        localctx = tsqlParser.Percentile_contContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_percentile_cont)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3673
            self.match(tsqlParser.PERCENTILE_CONT)
            self.state = 3674
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3675
            self.expression(0)
            self.state = 3676
            self.match(tsqlParser.RR_BRACKET)
            self.state = 3677
            self.match(tsqlParser.WITHIN)
            self.state = 3678
            self.match(tsqlParser.GROUP)
            self.state = 3679
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3680
            self.order_by_clause()
            self.state = 3681
            self.match(tsqlParser.RR_BRACKET)
            self.state = 3682
            self.over_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_aggContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_AGG(self):
            return self.getToken(tsqlParser.STRING_AGG, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LR_BRACKET)
            else:
                return self.getToken(tsqlParser.LR_BRACKET, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(tsqlParser.COMMA, 0)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.RR_BRACKET)
            else:
                return self.getToken(tsqlParser.RR_BRACKET, i)

        def WITHIN(self):
            return self.getToken(tsqlParser.WITHIN, 0)

        def GROUP(self):
            return self.getToken(tsqlParser.GROUP, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(tsqlParser.Order_by_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_string_agg




    def string_agg(self):

        localctx = tsqlParser.String_aggContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_string_agg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3684
            self.match(tsqlParser.STRING_AGG)
            self.state = 3685
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3686
            self.expression(0)
            self.state = 3687
            self.match(tsqlParser.COMMA)
            self.state = 3688
            self.expression(0)
            self.state = 3689
            self.match(tsqlParser.RR_BRACKET)
            self.state = 3690
            self.match(tsqlParser.WITHIN)
            self.state = 3691
            self.match(tsqlParser.GROUP)
            self.state = 3692
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3693
            self.order_by_clause()
            self.state = 3694
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)

        def MAX(self):
            return self.getToken(tsqlParser.MAX, 0)

        def COMMA(self):
            return self.getToken(tsqlParser.COMMA, 0)

        def DATE(self):
            return self.getToken(tsqlParser.DATE, 0)

        def DATETIME2(self):
            return self.getToken(tsqlParser.DATETIME2, 0)

        def DOUBLE(self):
            return self.getToken(tsqlParser.DOUBLE, 0)

        def PRECISION(self):
            return self.getToken(tsqlParser.PRECISION, 0)

        def INT(self):
            return self.getToken(tsqlParser.INT, 0)

        def TINYINT(self):
            return self.getToken(tsqlParser.TINYINT, 0)

        def SMALLINT(self):
            return self.getToken(tsqlParser.SMALLINT, 0)

        def BIGINT(self):
            return self.getToken(tsqlParser.BIGINT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_data_type




    def data_type(self):

        localctx = tsqlParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_data_type)
        self._la = 0 # Token type
        try:
            self.state = 3722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,522,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3696
                self.r_id()
                self.state = 3698
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,518,self._ctx)
                if la_ == 1:
                    self.state = 3697
                    self.match(tsqlParser.IDENTITY)


                self.state = 3707
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,520,self._ctx)
                if la_ == 1:
                    self.state = 3700
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 3701
                    _la = self._input.LA(1)
                    if not(_la==322 or _la==449):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3704
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==474:
                        self.state = 3702
                        self.match(tsqlParser.COMMA)
                        self.state = 3703
                        self.match(tsqlParser.DECIMAL)


                    self.state = 3706
                    self.match(tsqlParser.RR_BRACKET)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3709
                self.match(tsqlParser.DATE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3710
                self.match(tsqlParser.DATETIME2)
                self.state = 3711
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3712
                self.match(tsqlParser.DECIMAL)
                self.state = 3713
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3714
                self.match(tsqlParser.DOUBLE)
                self.state = 3716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 3715
                    self.match(tsqlParser.PRECISION)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3718
                self.match(tsqlParser.INT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3719
                self.match(tsqlParser.TINYINT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3720
                self.match(tsqlParser.SMALLINT)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3721
                self.match(tsqlParser.BIGINT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[104] = self.expression_sempred
        self._predicates[113] = self.search_condition_sempred
        self._predicates[115] = self.query_expression_sempred
        self._predicates[135] = self.table_source_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         

    def search_condition_sempred(self, localctx:Search_conditionContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

    def query_expression_sempred(self, localctx:Query_expressionContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def table_source_sempred(self, localctx:Table_sourceContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         




