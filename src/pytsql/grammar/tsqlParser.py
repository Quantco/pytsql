# Generated from tsql.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u01e7")
        buf.write("\u0e91\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd")
        buf.write("\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\3\2\7")
        buf.write("\2\u01a2\n\2\f\2\16\2\u01a5\13\2\3\2\3\2\3\3\5\3\u01aa")
        buf.write("\n\3\3\3\3\3\5\3\u01ae\n\3\3\4\3\4\5\4\u01b2\n\4\6\4\u01b4")
        buf.write("\n\4\r\4\16\4\u01b5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u01bf")
        buf.write("\n\5\3\6\3\6\3\6\3\6\5\6\u01c5\n\6\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\5\7\u01dd\n\7\3\b\3\b\3\b\3\b\5\b\u01e3")
        buf.write("\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u01ec\n\t\3\n\3\n")
        buf.write("\5\n\u01f0\n\n\3\n\5\n\u01f3\n\n\3\n\3\n\5\n\u01f7\n\n")
        buf.write("\3\13\3\13\5\13\u01fb\n\13\3\f\3\f\5\f\u01ff\n\f\3\r\3")
        buf.write("\r\3\r\5\r\u0204\n\r\3\r\3\r\3\r\5\r\u0209\n\r\5\r\u020b")
        buf.write("\n\r\3\16\3\16\3\16\3\16\3\17\3\17\3\17\5\17\u0214\n\17")
        buf.write("\3\17\5\17\u0217\n\17\3\17\3\17\3\17\5\17\u021c\n\17\3")
        buf.write("\17\5\17\u021f\n\17\5\17\u0221\n\17\3\20\3\20\5\20\u0225")
        buf.write("\n\20\3\20\5\20\u0228\n\20\3\21\3\21\3\21\3\21\3\21\3")
        buf.write("\21\5\21\u0230\n\21\3\21\5\21\u0233\n\21\3\22\3\22\3\22")
        buf.write("\5\22\u0238\n\22\3\22\5\22\u023b\n\22\3\22\3\22\3\22\5")
        buf.write("\22\u0240\n\22\3\22\3\22\3\22\5\22\u0245\n\22\3\22\5\22")
        buf.write("\u0248\n\22\3\22\3\22\3\22\5\22\u024d\n\22\3\23\3\23\3")
        buf.write("\23\3\23\5\23\u0253\n\23\3\24\3\24\3\24\3\24\3\24\5\24")
        buf.write("\u025a\n\24\3\24\3\24\5\24\u025e\n\24\5\24\u0260\n\24")
        buf.write("\3\25\3\25\3\25\5\25\u0265\n\25\3\26\3\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\7\26\u0270\n\26\f\26\16\26\u0273")
        buf.write("\13\26\3\26\3\26\5\26\u0277\n\26\3\27\3\27\3\27\3\27\3")
        buf.write("\27\3\27\5\27\u027f\n\27\3\30\5\30\u0282\n\30\3\30\3\30")
        buf.write("\5\30\u0286\n\30\3\30\5\30\u0289\n\30\3\30\3\30\5\30\u028d")
        buf.write("\n\30\3\30\5\30\u0290\n\30\3\30\3\30\5\30\u0294\n\30\3")
        buf.write("\30\5\30\u0297\n\30\3\30\5\30\u029a\n\30\3\30\5\30\u029d")
        buf.write("\n\30\3\30\5\30\u02a0\n\30\3\31\3\31\5\31\u02a4\n\31\3")
        buf.write("\31\3\31\3\31\5\31\u02a9\n\31\3\32\5\32\u02ac\n\32\3\32")
        buf.write("\3\32\5\32\u02b0\n\32\3\32\5\32\u02b3\n\32\3\32\3\32\5")
        buf.write("\32\u02b7\n\32\3\32\5\32\u02ba\n\32\3\32\3\32\5\32\u02be")
        buf.write("\n\32\3\32\3\32\3\32\3\32\5\32\u02c4\n\32\3\32\5\32\u02c7")
        buf.write("\n\32\3\32\3\32\5\32\u02cb\n\32\3\32\5\32\u02ce\n\32\3")
        buf.write("\32\5\32\u02d1\n\32\3\33\3\33\3\33\3\33\3\33\5\33\u02d8")
        buf.write("\n\33\3\34\5\34\u02db\n\34\3\34\3\34\5\34\u02df\n\34\3")
        buf.write("\34\5\34\u02e2\n\34\3\34\5\34\u02e5\n\34\3\34\5\34\u02e8")
        buf.write("\n\34\3\35\5\35\u02eb\n\35\3\35\3\35\5\35\u02ef\n\35\3")
        buf.write("\35\3\35\5\35\u02f3\n\35\3\35\5\35\u02f6\n\35\3\35\3\35")
        buf.write("\3\35\3\35\7\35\u02fc\n\35\f\35\16\35\u02ff\13\35\3\35")
        buf.write("\5\35\u0302\n\35\3\35\3\35\5\35\u0306\n\35\3\35\5\35\u0309")
        buf.write("\n\35\3\35\5\35\u030c\n\35\3\35\5\35\u030f\n\35\3\35\5")
        buf.write("\35\u0312\n\35\3\36\3\36\3\36\3\36\3\36\5\36\u0319\n\36")
        buf.write("\3\36\3\36\5\36\u031d\n\36\5\36\u031f\n\36\3\37\3\37\3")
        buf.write("\37\3\37\7\37\u0325\n\37\f\37\16\37\u0328\13\37\3\37\3")
        buf.write("\37\3\37\5\37\u032d\n\37\3\37\3\37\3\37\3\37\5\37\u0333")
        buf.write("\n\37\5\37\u0335\n\37\3 \3 \5 \u0339\n \3 \5 \u033c\n")
        buf.write(" \3 \5 \u033f\n \3!\3!\3!\5!\u0344\n!\3!\3!\3!\5!\u0349")
        buf.write("\n!\3!\5!\u034c\n!\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u0354\n")
        buf.write("\"\3\"\3\"\5\"\u0358\n\"\3\"\3\"\3\"\7\"\u035d\n\"\f\"")
        buf.write("\16\"\u0360\13\"\5\"\u0362\n\"\3\"\3\"\3\"\3\"\3\"\7\"")
        buf.write("\u0369\n\"\f\"\16\"\u036c\13\"\5\"\u036e\n\"\3\"\3\"\5")
        buf.write("\"\u0372\n\"\3\"\3\"\3\"\3\"\7\"\u0378\n\"\f\"\16\"\u037b")
        buf.write("\13\"\5\"\u037d\n\"\3#\3#\5#\u0381\n#\3#\5#\u0384\n#\3")
        buf.write("#\3#\3#\3#\3#\3#\3#\5#\u038d\n#\3#\3#\3#\3#\3#\5#\u0394")
        buf.write("\n#\3#\3#\5#\u0398\n#\3#\3#\5#\u039c\n#\3#\5#\u039f\n")
        buf.write("#\3#\3#\5#\u03a3\n#\3#\5#\u03a6\n#\3$\3$\3$\3$\3$\3$\3")
        buf.write("$\3$\3$\3$\3$\3$\3$\3$\5$\u03b6\n$\3$\3$\5$\u03ba\n$\3")
        buf.write("$\3$\3$\3$\5$\u03c0\n$\5$\u03c2\n$\3$\5$\u03c5\n$\3%\3")
        buf.write("%\3%\3%\3%\3%\5%\u03cd\n%\3%\3%\3%\3%\5%\u03d3\n%\3%\3")
        buf.write("%\3%\5%\u03d8\n%\3%\5%\u03db\n%\3&\3&\3&\3&\5&\u03e1\n")
        buf.write("&\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u03e9\n\'\3(\3(\3(\3(\3")
        buf.write("(\3(\3(\5(\u03f2\n(\3(\3(\3(\3(\7(\u03f8\n(\f(\16(\u03fb")
        buf.write("\13(\5(\u03fd\n(\3(\3(\3(\3(\3(\5(\u0404\n(\3(\5(\u0407")
        buf.write("\n(\3)\3)\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3")
        buf.write("*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3")
        buf.write("*\3*\3*\3*\5*\u042f\n*\3*\5*\u0432\n*\3+\3+\3+\3+\5+\u0438")
        buf.write("\n+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\5+\u0444\n+\5+\u0446")
        buf.write("\n+\3+\5+\u0449\n+\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u0461\n,\3-\3-\3-\3")
        buf.write("-\3-\3-\3-\3-\3-\5-\u046c\n-\3-\3-\3-\3-\3-\3-\5-\u0474")
        buf.write("\n-\3.\3.\3.\3.\3.\3.\3.\7.\u047d\n.\f.\16.\u0480\13.")
        buf.write("\7.\u0482\n.\f.\16.\u0485\13.\5.\u0487\n.\3/\3/\3/\3/")
        buf.write("\3/\3/\5/\u048f\n/\3\60\3\60\3\60\3\60\3\61\3\61\3\61")
        buf.write("\3\61\5\61\u0499\n\61\3\62\3\62\3\62\3\63\3\63\3\63\3")
        buf.write("\64\3\64\3\65\3\65\3\66\3\66\3\67\3\67\3\67\3\67\38\3")
        buf.write("8\38\38\38\38\38\38\58\u04b3\n8\38\38\38\38\58\u04b9\n")
        buf.write("8\38\38\38\38\38\38\38\38\38\58\u04c4\n8\39\39\39\39\3")
        buf.write("9\3:\3:\3:\3;\3;\3;\3<\3<\3<\3<\3<\3<\5<\u04d7\n<\3=\3")
        buf.write("=\3=\3=\3=\3=\5=\u04df\n=\3>\3>\3>\3>\3>\5>\u04e6\n>\3")
        buf.write("?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3")
        buf.write("?\3?\3?\5?\u04fd\n?\3@\3@\3@\3@\3@\3A\3A\3A\3A\3A\3A\5")
        buf.write("A\u050a\nA\3B\3B\3B\3B\5B\u0510\nB\3B\3B\3B\5B\u0515\n")
        buf.write("B\3B\5B\u0518\nB\3C\3C\3C\3C\5C\u051e\nC\3C\3C\5C\u0522")
        buf.write("\nC\3D\3D\3D\3D\3D\5D\u0529\nD\3D\3D\5D\u052d\nD\3E\3")
        buf.write("E\3E\3E\5E\u0533\nE\3E\3E\5E\u0537\nE\3F\3F\3F\3F\5F\u053d")
        buf.write("\nF\3F\3F\5F\u0541\nF\3F\5F\u0544\nF\3G\3G\3G\3G\5G\u054a")
        buf.write("\nG\3G\3G\5G\u054e\nG\3H\3H\3H\3H\5H\u0554\nH\3H\3H\3")
        buf.write("H\7H\u0559\nH\fH\16H\u055c\13H\3H\5H\u055f\nH\3I\3I\3")
        buf.write("I\3I\5I\u0565\nI\3I\3I\5I\u0569\nI\3J\3J\3J\3J\5J\u056f")
        buf.write("\nJ\3J\3J\5J\u0573\nJ\3K\3K\3K\3K\3K\3K\3K\3L\3L\3L\3")
        buf.write("L\5L\u0580\nL\3L\3L\3M\3M\5M\u0586\nM\3N\3N\3N\3N\3N\3")
        buf.write("N\3N\3O\3O\3O\3O\3O\3O\3O\3O\5O\u0597\nO\3O\3O\5O\u059b")
        buf.write("\nO\3O\3O\3O\3P\3P\3P\5P\u05a3\nP\3P\3P\5P\u05a7\nP\3")
        buf.write("P\3P\3P\3P\7P\u05ad\nP\fP\16P\u05b0\13P\3P\5P\u05b3\n")
        buf.write("P\5P\u05b5\nP\3Q\3Q\5Q\u05b9\nQ\3Q\3Q\5Q\u05bd\nQ\3Q\3")
        buf.write("Q\5Q\u05c1\nQ\3Q\3Q\5Q\u05c5\nQ\3Q\3Q\3Q\3Q\5Q\u05cb\n")
        buf.write("Q\3Q\3Q\5Q\u05cf\nQ\5Q\u05d1\nQ\3R\3R\3R\5R\u05d6\nR\3")
        buf.write("R\3R\3R\3R\7R\u05dc\nR\fR\16R\u05df\13R\5R\u05e1\nR\3")
        buf.write("R\5R\u05e4\nR\3R\3R\3R\3R\3R\7R\u05eb\nR\fR\16R\u05ee")
        buf.write("\13R\3R\3R\5R\u05f2\nR\3R\3R\3R\5R\u05f7\nR\3R\5R\u05fa")
        buf.write("\nR\5R\u05fc\nR\3S\3S\5S\u0600\nS\3S\3S\5S\u0604\nS\3")
        buf.write("S\5S\u0607\nS\3S\3S\5S\u060b\nS\3T\3T\3U\3U\5U\u0611\n")
        buf.write("U\3U\3U\3U\5U\u0616\nU\3U\3U\3U\3U\3U\5U\u061d\nU\5U\u061f")
        buf.write("\nU\3U\3U\5U\u0623\nU\3U\3U\3U\3U\3U\5U\u062a\nU\3U\3")
        buf.write("U\5U\u062e\nU\3U\5U\u0631\nU\3U\3U\3U\3U\3U\3U\3U\5U\u063a")
        buf.write("\nU\3U\5U\u063d\nU\5U\u063f\nU\3V\3V\3V\3V\3V\3V\3V\5")
        buf.write("V\u0648\nV\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u0653\nV\3V\3")
        buf.write("V\5V\u0657\nV\5V\u0659\nV\5V\u065b\nV\3W\3W\3W\3W\5W\u0661")
        buf.write("\nW\3W\3W\3W\5W\u0666\nW\3W\3W\3W\3W\3W\5W\u066d\nW\3")
        buf.write("W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\5W\u067a\nW\5W\u067c\n")
        buf.write("W\5W\u067e\nW\3W\5W\u0681\nW\3W\5W\u0684\nW\3X\3X\3X\3")
        buf.write("X\3X\5X\u068b\nX\3X\5X\u068e\nX\3X\3X\3X\3X\5X\u0694\n")
        buf.write("X\3X\3X\3X\5X\u0699\nX\5X\u069b\nX\3X\5X\u069e\nX\3X\3")
        buf.write("X\3X\3X\5X\u06a4\nX\3X\3X\3X\3X\3X\3X\5X\u06ac\nX\5X\u06ae")
        buf.write("\nX\3X\5X\u06b1\nX\3X\3X\5X\u06b5\nX\3X\5X\u06b8\nX\3")
        buf.write("X\3X\3X\3X\5X\u06be\nX\3X\5X\u06c1\nX\3X\3X\5X\u06c5\n")
        buf.write("X\3X\5X\u06c8\nX\3X\3X\3X\3X\5X\u06ce\nX\3X\5X\u06d1\n")
        buf.write("X\5X\u06d3\nX\3Y\3Y\5Y\u06d7\nY\3Z\3Z\3Z\5Z\u06dc\nZ\3")
        buf.write("[\3[\3[\3[\3\\\3\\\5\\\u06e4\n\\\3\\\3\\\3\\\5\\\u06e9")
        buf.write("\n\\\3]\3]\3]\3]\3]\3^\3^\5^\u06f2\n^\3^\7^\u06f5\n^\f")
        buf.write("^\16^\u06f8\13^\3_\3_\5_\u06fc\n_\3`\3`\3`\3`\5`\u0702")
        buf.write("\n`\3`\3`\5`\u0706\n`\3`\5`\u0709\n`\3`\3`\5`\u070d\n")
        buf.write("`\3`\3`\3`\3`\5`\u0713\n`\3`\3`\3`\3`\3`\3`\5`\u071b\n")
        buf.write("`\3`\3`\3`\5`\u0720\n`\5`\u0722\n`\3`\5`\u0725\n`\3`\7")
        buf.write("`\u0728\n`\f`\16`\u072b\13`\3a\3a\5a\u072f\na\3a\5a\u0732")
        buf.write("\na\3a\3a\3a\5a\u0737\na\3a\5a\u073a\na\3a\5a\u073d\n")
        buf.write("a\3a\3a\3a\3a\5a\u0743\na\3a\3a\3a\3a\5a\u0749\na\3b\3")
        buf.write("b\5b\u074d\nb\3b\3b\3b\5b\u0752\nb\3b\5b\u0755\nb\3b\3")
        buf.write("b\3b\5b\u075a\nb\3b\3b\3b\5b\u075f\nb\7b\u0761\nb\fb\16")
        buf.write("b\u0764\13b\3b\3b\5b\u0768\nb\3b\3b\5b\u076c\nb\3b\3b")
        buf.write("\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\3b\5b\u077d\nb\3")
        buf.write("b\3b\3b\3b\5b\u0783\nb\3c\3c\3c\3c\3c\7c\u078a\nc\fc\16")
        buf.write("c\u078d\13c\3c\3c\3d\3d\3d\3d\3d\5d\u0796\nd\3e\3e\3e")
        buf.write("\3e\3e\3e\3e\3e\5e\u07a0\ne\5e\u07a2\ne\5e\u07a4\ne\3")
        buf.write("e\5e\u07a7\ne\3e\5e\u07aa\ne\3e\3e\3e\3e\3e\3e\3e\3e\3")
        buf.write("e\5e\u07b5\ne\5e\u07b7\ne\5e\u07b9\ne\3e\5e\u07bc\ne\3")
        buf.write("f\5f\u07bf\nf\3f\5f\u07c2\nf\3f\5f\u07c5\nf\3f\5f\u07c8")
        buf.write("\nf\3f\5f\u07cb\nf\3f\3f\3f\3g\3g\3g\3g\3g\3g\3g\5g\u07d7")
        buf.write("\ng\3g\5g\u07da\ng\3g\5g\u07dd\ng\3g\3g\3g\3g\3g\7g\u07e4")
        buf.write("\ng\fg\16g\u07e7\13g\5g\u07e9\ng\3g\5g\u07ec\ng\3h\3h")
        buf.write("\3h\3h\3h\5h\u07f3\nh\3h\5h\u07f6\nh\3h\3h\3h\3h\3h\3")
        buf.write("h\3h\3h\3h\3h\3h\3h\5h\u0804\nh\3h\5h\u0807\nh\3h\3h\3")
        buf.write("h\3h\3h\5h\u080e\nh\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3")
        buf.write("h\3h\5h\u081d\nh\3i\3i\5i\u0821\ni\3j\3j\3j\3j\3j\3j\3")
        buf.write("j\3j\3j\6j\u082c\nj\rj\16j\u082d\3j\3j\5j\u0832\nj\3j")
        buf.write("\3j\3j\3j\6j\u0838\nj\rj\16j\u0839\3j\3j\5j\u083e\nj\3")
        buf.write("j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\5")
        buf.write("j\u0852\nj\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3")
        buf.write("j\3j\3j\3j\3j\3j\3j\7j\u0869\nj\fj\16j\u086c\13j\3k\3")
        buf.write("k\3k\5k\u0871\nk\3k\3k\3k\3k\3k\5k\u0878\nk\3k\3k\3k\3")
        buf.write("k\3k\3k\3k\5k\u0881\nk\3l\3l\3m\3m\3m\3m\3m\3m\3m\3m\5")
        buf.write("m\u088d\nm\3n\3n\3o\3o\3o\5o\u0894\no\3o\3o\3o\7o\u0899")
        buf.write("\no\fo\16o\u089c\13o\3p\3p\3p\3p\3p\5p\u08a3\np\3p\3p")
        buf.write("\3p\3p\3p\3q\3q\5q\u08ac\nq\3q\3q\5q\u08b0\nq\3q\3q\3")
        buf.write("q\3q\3q\3q\3q\3q\5q\u08ba\nq\3r\3r\3r\7r\u08bf\nr\fr\16")
        buf.write("r\u08c2\13r\3s\3s\3s\3s\3s\3s\3s\3s\3s\7s\u08cd\ns\fs")
        buf.write("\16s\u08d0\13s\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t")
        buf.write("\3t\3t\3t\3t\3t\3t\3t\5t\u08e6\nt\3t\3t\3t\3t\3t\3t\3")
        buf.write("t\5t\u08ef\nt\3t\3t\3t\3t\5t\u08f5\nt\3t\3t\3t\3t\5t\u08fb")
        buf.write("\nt\3t\3t\3t\3t\5t\u0901\nt\3t\3t\3t\3t\3t\3t\3t\3t\3")
        buf.write("t\5t\u090c\nt\3u\3u\3u\3u\3u\3u\5u\u0914\nu\3u\3u\3u\3")
        buf.write("u\7u\u091a\nu\fu\16u\u091d\13u\3v\3v\5v\u0921\nv\3v\3")
        buf.write("v\5v\u0925\nv\3w\3w\3w\3w\3w\3w\3w\5w\u092e\nw\3x\3x\5")
        buf.write("x\u0932\nx\3x\5x\u0935\nx\3x\3x\3x\5x\u093a\nx\3x\3x\5")
        buf.write("x\u093e\nx\3x\3x\3x\3x\5x\u0944\nx\5x\u0946\nx\3x\3x\5")
        buf.write("x\u094a\nx\3x\3x\3x\3x\3x\7x\u0951\nx\fx\16x\u0954\13")
        buf.write("x\5x\u0956\nx\3x\5x\u0959\nx\3x\3x\5x\u095d\nx\3x\3x\5")
        buf.write("x\u0961\nx\3y\3y\3y\3y\3y\3y\3y\3y\7y\u096b\ny\fy\16y")
        buf.write("\u096e\13y\3y\3y\3z\3z\3z\3z\3z\3z\3z\7z\u0979\nz\fz\16")
        buf.write("z\u097c\13z\3z\3z\5z\u0980\nz\3{\3{\3{\5{\u0985\n{\3{")
        buf.write("\3{\5{\u0989\n{\3|\3|\3|\3|\3|\5|\u0990\n|\3}\3}\3}\3")
        buf.write("}\3}\7}\u0997\n}\f}\16}\u099a\13}\3}\3}\3}\3}\5}\u09a0")
        buf.write("\n}\5}\u09a2\n}\3~\3~\3~\3~\3~\3~\3\177\3\177\3\177\3")
        buf.write("\177\3\177\3\177\5\177\u09b0\n\177\3\177\3\177\3\177\3")
        buf.write("\177\3\177\3\177\5\177\u09b8\n\177\3\177\5\177\u09bb\n")
        buf.write("\177\5\177\u09bd\n\177\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write("\3\u0080\5\u0080\u09c4\n\u0080\3\u0081\3\u0081\5\u0081")
        buf.write("\u09c8\n\u0081\3\u0082\3\u0082\3\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\3\u0083\7\u0083\u09d1\n\u0083\f\u0083\16\u0083")
        buf.write("\u09d4\13\u0083\3\u0083\3\u0083\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\3\u0084\7\u0084\u09f3\n\u0084\f\u0084")
        buf.write("\16\u0084\u09f6\13\u0084\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\5\u0084\u0a05\n\u0084\3\u0085\3\u0085")
        buf.write("\3\u0085\3\u0085\5\u0085\u0a0b\n\u0085\3\u0086\3\u0086")
        buf.write("\3\u0086\7\u0086\u0a10\n\u0086\f\u0086\16\u0086\u0a13")
        buf.write("\13\u0086\3\u0087\3\u0087\3\u0087\5\u0087\u0a18\n\u0087")
        buf.write("\3\u0087\3\u0087\3\u0087\5\u0087\u0a1d\n\u0087\3\u0087")
        buf.write("\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0a25")
        buf.write("\n\u0087\3\u0087\5\u0087\u0a28\n\u0087\5\u0087\u0a2a\n")
        buf.write("\u0087\3\u0088\3\u0088\3\u0088\7\u0088\u0a2f\n\u0088\f")
        buf.write("\u0088\16\u0088\u0a32\13\u0088\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\5\u0089\u0a3a\n\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\7\u0089\u0a4b\n\u0089\f\u0089\16\u0089\u0a4e\13\u0089")
        buf.write("\3\u008a\3\u008a\5\u008a\u0a52\n\u008a\3\u008a\5\u008a")
        buf.write("\u0a55\n\u008a\3\u008a\5\u008a\u0a58\n\u008a\3\u008a\3")
        buf.write("\u008a\5\u008a\u0a5c\n\u008a\3\u008a\3\u008a\3\u008a\5")
        buf.write("\u008a\u0a61\n\u008a\5\u008a\u0a63\n\u008a\3\u008a\3\u008a")
        buf.write("\5\u008a\u0a67\n\u008a\3\u008a\3\u008a\5\u008a\u0a6b\n")
        buf.write("\u008a\3\u008a\3\u008a\5\u008a\u0a6f\n\u008a\3\u008a\3")
        buf.write("\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u0a76\n\u008a\5")
        buf.write("\u008a\u0a78\n\u008a\5\u008a\u0a7a\n\u008a\3\u008b\3\u008b")
        buf.write("\5\u008b\u0a7e\n\u008b\3\u008b\3\u008b\3\u008b\5\u008b")
        buf.write("\u0a83\n\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0a88\n")
        buf.write("\u008b\3\u008c\3\u008c\3\u008d\3\u008d\3\u008e\5\u008e")
        buf.write("\u0a8f\n\u008e\3\u008e\3\u008e\3\u008f\3\u008f\3\u008f")
        buf.write("\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u0090\5\u0090")
        buf.write("\u0a9c\n\u0090\3\u0090\3\u0090\5\u0090\u0aa0\n\u0090\5")
        buf.write("\u0090\u0aa2\n\u0090\3\u0090\5\u0090\u0aa5\n\u0090\3\u0091")
        buf.write("\3\u0091\5\u0091\u0aa9\n\u0091\3\u0092\3\u0092\3\u0092")
        buf.write("\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092")
        buf.write("\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\7\u0092")
        buf.write("\u0abb\n\u0092\f\u0092\16\u0092\u0abe\13\u0092\3\u0092")
        buf.write("\5\u0092\u0ac1\n\u0092\3\u0092\3\u0092\5\u0092\u0ac5\n")
        buf.write("\u0092\3\u0093\3\u0093\3\u0093\3\u0093\3\u0094\3\u0094")
        buf.write("\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094")
        buf.write("\3\u0094\3\u0094\5\u0094\u0ad6\n\u0094\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\5\u0095\u0add\n\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095")
        buf.write("\u0af4\n\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095\u0b3f")
        buf.write("\n\u0095\3\u0095\3\u0095\5\u0095\u0b43\n\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095\u0b5f\n\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095\u0b81\n\u0095")
        buf.write("\3\u0095\3\u0095\5\u0095\u0b85\n\u0095\3\u0096\3\u0096")
        buf.write("\3\u0096\3\u0096\3\u0096\3\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0098\5\u0098\u0b92\n\u0098\3\u0098\3\u0098")
        buf.write("\3\u0098\3\u0098\7\u0098\u0b98\n\u0098\f\u0098\16\u0098")
        buf.write("\u0b9b\13\u0098\3\u0098\3\u0098\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\7\u0099\u0ba4\n\u0099\f\u0099\16\u0099")
        buf.write("\u0ba7\13\u0099\3\u0099\3\u0099\3\u009a\5\u009a\u0bac")
        buf.write("\n\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\7\u009a")
        buf.write("\u0bb3\n\u009a\f\u009a\16\u009a\u0bb6\13\u009a\3\u009a")
        buf.write("\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a")
        buf.write("\3\u009a\3\u009a\3\u009a\3\u009a\7\u009a\u0bc4\n\u009a")
        buf.write("\f\u009a\16\u009a\u0bc7\13\u009a\3\u009a\3\u009a\3\u009a")
        buf.write("\5\u009a\u0bcc\n\u009a\3\u009a\3\u009a\3\u009a\3\u009a")
        buf.write("\3\u009a\3\u009a\5\u009a\u0bd4\n\u009a\3\u009b\3\u009b")
        buf.write("\5\u009b\u0bd8\n\u009b\3\u009c\3\u009c\3\u009c\3\u009c")
        buf.write("\7\u009c\u0bde\n\u009c\f\u009c\16\u009c\u0be1\13\u009c")
        buf.write("\3\u009c\3\u009c\3\u009d\3\u009d\5\u009d\u0be7\n\u009d")
        buf.write("\3\u009e\3\u009e\3\u009f\3\u009f\3\u009f\3\u009f\7\u009f")
        buf.write("\u0bef\n\u009f\f\u009f\16\u009f\u0bf2\13\u009f\3\u00a0")
        buf.write("\3\u00a0\3\u00a0\7\u00a0\u0bf7\n\u00a0\f\u00a0\16\u00a0")
        buf.write("\u0bfa\13\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a2")
        buf.write("\3\u00a2\3\u00a2\3\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\7\u00a4\u0c17\n\u00a4\f\u00a4\16\u00a4\u0c1a")
        buf.write("\13\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0c1f\n\u00a4")
        buf.write("\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0c24\n\u00a5\3\u00a5")
        buf.write("\3\u00a5\3\u00a5\5\u00a5\u0c29\n\u00a5\3\u00a5\3\u00a5")
        buf.write("\3\u00a5\3\u00a5\5\u00a5\u0c2f\n\u00a5\3\u00a5\5\u00a5")
        buf.write("\u0c32\n\u00a5\3\u00a5\3\u00a5\5\u00a5\u0c36\n\u00a5\3")
        buf.write("\u00a5\3\u00a5\3\u00a5\5\u00a5\u0c3b\n\u00a5\3\u00a5\3")
        buf.write("\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5")
        buf.write("\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0c4a")
        buf.write("\n\u00a5\3\u00a6\3\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7")
        buf.write("\3\u00a7\5\u00a7\u0c53\n\u00a7\3\u00a7\5\u00a7\u0c56\n")
        buf.write("\u00a7\3\u00a7\5\u00a7\u0c59\n\u00a7\3\u00a7\3\u00a7\3")
        buf.write("\u00a8\3\u00a8\3\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9")
        buf.write("\3\u00a9\3\u00a9\5\u00a9\u0c66\n\u00a9\3\u00aa\3\u00aa")
        buf.write("\5\u00aa\u0c6a\n\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\5\u00ab\u0c72\n\u00ab\3\u00ac\3\u00ac")
        buf.write("\3\u00ac\3\u00ac\5\u00ac\u0c78\n\u00ac\3\u00ad\3\u00ad")
        buf.write("\3\u00ad\3\u00ad\7\u00ad\u0c7e\n\u00ad\f\u00ad\16\u00ad")
        buf.write("\u0c81\13\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad")
        buf.write("\u0c87\n\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad")
        buf.write("\u0c8d\n\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad")
        buf.write("\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad")
        buf.write("\3\u00ad\5\u00ad\u0c9c\n\u00ad\3\u00ae\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u0ca5\n\u00ae")
        buf.write("\3\u00ae\3\u00ae\3\u00af\3\u00af\5\u00af\u0cab\n\u00af")
        buf.write("\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u0cb1\n\u00b0")
        buf.write("\3\u00b0\5\u00b0\u0cb4\n\u00b0\3\u00b0\3\u00b0\5\u00b0")
        buf.write("\u0cb8\n\u00b0\3\u00b0\3\u00b0\3\u00b0\7\u00b0\u0cbd\n")
        buf.write("\u00b0\f\u00b0\16\u00b0\u0cc0\13\u00b0\3\u00b1\3\u00b1")
        buf.write("\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u0cc7\n\u00b1\3\u00b1")
        buf.write("\5\u00b1\u0cca\n\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1")
        buf.write("\5\u00b1\u0cd0\n\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1")
        buf.write("\5\u00b1\u0cd6\n\u00b1\5\u00b1\u0cd8\n\u00b1\3\u00b1\3")
        buf.write("\u00b1\3\u00b1\3\u00b1\5\u00b1\u0cde\n\u00b1\3\u00b1\5")
        buf.write("\u00b1\u0ce1\n\u00b1\5\u00b1\u0ce3\n\u00b1\3\u00b1\3\u00b1")
        buf.write("\3\u00b1\3\u00b1\5\u00b1\u0ce9\n\u00b1\5\u00b1\u0ceb\n")
        buf.write("\u00b1\3\u00b1\3\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2")
        buf.write("\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2")
        buf.write("\u0cf9\n\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2")
        buf.write("\5\u00b2\u0d00\n\u00b2\3\u00b2\3\u00b2\3\u00b3\3\u00b3")
        buf.write("\3\u00b3\5\u00b3\u0d07\n\u00b3\3\u00b3\3\u00b3\3\u00b3")
        buf.write("\3\u00b3\3\u00b3\5\u00b3\u0d0e\n\u00b3\3\u00b3\3\u00b3")
        buf.write("\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u0d15\n\u00b4\3\u00b4")
        buf.write("\3\u00b4\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0d1c\n\u00b5")
        buf.write("\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0d23")
        buf.write("\n\u00b5\3\u00b5\3\u00b5\3\u00b6\3\u00b6\5\u00b6\u0d29")
        buf.write("\n\u00b6\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0d2e\n\u00b7")
        buf.write("\3\u00b7\3\u00b7\3\u00b8\3\u00b8\3\u00b8\7\u00b8\u0d35")
        buf.write("\n\u00b8\f\u00b8\16\u00b8\u0d38\13\u00b8\3\u00b9\3\u00b9")
        buf.write("\5\u00b9\u0d3c\n\u00b9\3\u00ba\3\u00ba\3\u00bb\3\u00bb")
        buf.write("\3\u00bc\5\u00bc\u0d43\n\u00bc\3\u00bc\3\u00bc\3\u00bd")
        buf.write("\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd")
        buf.write("\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd")
        buf.write("\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0d59\n\u00bd\3\u00be")
        buf.write("\3\u00be\5\u00be\u0d5d\n\u00be\3\u00bf\3\u00bf\3\u00bf")
        buf.write("\5\u00bf\u0d62\n\u00bf\3\u00bf\3\u00bf\5\u00bf\u0d66\n")
        buf.write("\u00bf\3\u00bf\3\u00bf\5\u00bf\u0d6a\n\u00bf\3\u00bf\3")
        buf.write("\u00bf\5\u00bf\u0d6e\n\u00bf\3\u00c0\3\u00c0\3\u00c1\3")
        buf.write("\u00c1\3\u00c1\5\u00c1\u0d75\n\u00c1\3\u00c2\3\u00c2\3")
        buf.write("\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3")
        buf.write("\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3")
        buf.write("\3\u00c3\5\u00c3\u0d88\n\u00c3\3\u00c4\3\u00c4\3\u00c5")
        buf.write("\3\u00c5\5\u00c5\u0d8e\n\u00c5\3\u00c6\3\u00c6\3\u00c6")
        buf.write("\5\u00c6\u0d93\n\u00c6\3\u00c6\5\u00c6\u0d96\n\u00c6\3")
        buf.write("\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u0d9c\n\u00c6\3")
        buf.write("\u00c6\5\u00c6\u0d9f\n\u00c6\3\u00c6\3\u00c6\3\u00c6\7")
        buf.write("\u00c6\u0da4\n\u00c6\f\u00c6\16\u00c6\u0da7\13\u00c6\3")
        buf.write("\u00c6\5\u00c6\u0daa\n\u00c6\5\u00c6\u0dac\n\u00c6\3\u00c6")
        buf.write("\3\u00c6\3\u00c6\3\u00c6\7\u00c6\u0db2\n\u00c6\f\u00c6")
        buf.write("\16\u00c6\u0db5\13\u00c6\5\u00c6\u0db7\n\u00c6\3\u00c6")
        buf.write("\3\u00c6\5\u00c6\u0dbb\n\u00c6\3\u00c6\3\u00c6\3\u00c6")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u0dc3\n\u00c7\3\u00c7")
        buf.write("\5\u00c7\u0dc6\n\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\7\u00c7\u0dce\n\u00c7\f\u00c7\16\u00c7")
        buf.write("\u0dd1\13\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7")
        buf.write("\u0dd7\n\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u0ddc\n")
        buf.write("\u00c7\3\u00c7\5\u00c7\u0ddf\n\u00c7\3\u00c8\3\u00c8\3")
        buf.write("\u00c8\3\u00c8\3\u00c8\3\u00c8\7\u00c8\u0de7\n\u00c8\f")
        buf.write("\u00c8\16\u00c8\u0dea\13\u00c8\5\u00c8\u0dec\n\u00c8\3")
        buf.write("\u00c8\5\u00c8\u0def\n\u00c8\3\u00c8\3\u00c8\3\u00c8\3")
        buf.write("\u00c8\3\u00c8\3\u00c8\5\u00c8\u0df7\n\u00c8\3\u00c9\3")
        buf.write("\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\7\u00c9")
        buf.write("\u0e00\n\u00c9\f\u00c9\16\u00c9\u0e03\13\u00c9\5\u00c9")
        buf.write("\u0e05\n\u00c9\3\u00c9\5\u00c9\u0e08\n\u00c9\3\u00c9\3")
        buf.write("\u00c9\7\u00c9\u0e0c\n\u00c9\f\u00c9\16\u00c9\u0e0f\13")
        buf.write("\u00c9\3\u00c9\3\u00c9\5\u00c9\u0e13\n\u00c9\3\u00c9\3")
        buf.write("\u00c9\5\u00c9\u0e17\n\u00c9\3\u00ca\3\u00ca\3\u00ca\3")
        buf.write("\u00ca\3\u00ca\3\u00ca\7\u00ca\u0e1f\n\u00ca\f\u00ca\16")
        buf.write("\u00ca\u0e22\13\u00ca\5\u00ca\u0e24\n\u00ca\3\u00ca\5")
        buf.write("\u00ca\u0e27\n\u00ca\3\u00ca\3\u00ca\7\u00ca\u0e2b\n\u00ca")
        buf.write("\f\u00ca\16\u00ca\u0e2e\13\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\5\u00ca\u0e33\n\u00ca\3\u00ca\3\u00ca\3\u00cb\3\u00cb")
        buf.write("\3\u00cb\3\u00cb\5\u00cb\u0e3b\n\u00cb\3\u00cb\5\u00cb")
        buf.write("\u0e3e\n\u00cb\3\u00cb\3\u00cb\5\u00cb\u0e42\n\u00cb\3")
        buf.write("\u00cb\3\u00cb\5\u00cb\u0e46\n\u00cb\3\u00cb\5\u00cb\u0e49")
        buf.write("\n\u00cb\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u0e4e\n\u00cc")
        buf.write("\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd")
        buf.write("\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u0e5c")
        buf.write("\n\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce")
        buf.write("\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00cf\3\u00cf")
        buf.write("\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf")
        buf.write("\3\u00cf\3\u00cf\3\u00cf\3\u00d0\3\u00d0\5\u00d0\u0e77")
        buf.write("\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u0e7d")
        buf.write("\n\u00d0\3\u00d0\5\u00d0\u0e80\n\u00d0\3\u00d0\3\u00d0")
        buf.write("\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u0e89")
        buf.write("\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u0e8f")
        buf.write("\n\u00d0\3\u00d0\2\6\u00d2\u00e4\u00e8\u0110\u00d1\2\4")
        buf.write("\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64")
        buf.write("\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc")
        buf.write("\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de")
        buf.write("\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0")
        buf.write("\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102")
        buf.write("\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114")
        buf.write("\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126")
        buf.write("\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138")
        buf.write("\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a")
        buf.write("\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c")
        buf.write("\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e")
        buf.write("\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180")
        buf.write("\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192")
        buf.write("\u0194\u0196\u0198\u019a\u019c\u019e\2B\3\2\u01c2\u01c3")
        buf.write("\4\2\u01c2\u01c2\u01c5\u01c5\4\2\u0107\u0107\u01a6\u01a6")
        buf.write("\4\2\u01c2\u01c3\u01c5\u01c5\4\2qq\u0084\u0084\4\2\t\t")
        buf.write("\65\65\4\2\u0085\u0085\u0184\u0184\5\2\u0112\u0112\u0187")
        buf.write("\u0187\u01b7\u01b7\5\2\u00b0\u00b0\u00db\u00db\u010c\u010c")
        buf.write("\4\2wwyy\5\2\u0103\u0103\u012b\u012b\u014b\u014b\4\2\u0124")
        buf.write("\u0124\u013f\u013f\5\2\u0110\u0110\u015c\u015c\u015e\u015e")
        buf.write("\3\2\u0175\u0176\5\2\u014f\u014f\u017d\u017d\u0191\u0191")
        buf.write("\5\2\u00d2\u00d2\u010d\u010d\u0120\u0120\4\2\u0120\u0120")
        buf.write("\u018f\u018f\5\2PP\u00e6\u00e6\u018f\u018f\5\2qq\u00ed")
        buf.write("\u00ed\u01a8\u01a8\4\2\u014b\u014b\u018a\u018a\4\2\u00c4")
        buf.write("\u00c4\u0141\u0141\3\2\u0162\u0163\4\2\u00b0\u00b0\u00c8")
        buf.write("\u00c8\3\2\u00b6\u00b7\6\2\u00e7\u00e7\u0164\u0164\u018b")
        buf.write("\u018b\u01c5\u01c5\4\2\u0121\u0121\u0188\u0188\6\2\u010f")
        buf.write("\u010f\u0117\u0117\u0139\u0139\u0196\u0196\5\2\u0160\u0160")
        buf.write("\u0175\u0175\u0189\u0189\4\2\u00d0\u00d0\u017a\u017a\4")
        buf.write("\2\u0135\u0135\u01a6\u01a6\3\2\u01e2\u01e3\3\2\u01df\u01e1")
        buf.write("\4\2\u01e2\u01e3\u01e5\u01e7\5\2\u00c6\u00c6\u0114\u0114")
        buf.write("\u016f\u016f\5\2\4\4\7\7\u00ab\u00ab\4\2\4\4\67\67\4\2")
        buf.write("\u00f8\u00f8\u017f\u017f\4\2\u0182\u0182\u0184\u0184\4")
        buf.write("\2nn\u011b\u011b\4\2\u0081\u0081\u0129\u0129\5\2ll\u00f1")
        buf.write("\u00f1\u0129\u0129\5\2ll\u0129\u0129\u0142\u0142\4\2V")
        buf.write("V\u0183\u0183\4\2\'\'\u0082\u0082\4\2ss\u01c2\u01c3\5")
        buf.write("\2PPff\u009a\u009a\6\2ll\u0129\u0129\u0142\u0142\u017b")
        buf.write("\u017b\4\2\u01c3\u01c3\u01c5\u01c5\5\2\u010a\u010a\u0172")
        buf.write("\u0172\u0185\u0185\5\2\u011c\u011c\u013c\u013c\u0159\u0159")
        buf.write("\4\2\u013a\u013a\u013d\u013d\b\2\u00e2\u00e2\u0144\u0144")
        buf.write("\u014a\u014a\u0198\u0199\u019c\u019c\u01b4\u01b5\3\2\u00f6")
        buf.write("\u00f7\4\2\u0171\u0171\u0184\u0184\5\2PPww\u0175\u0175")
        buf.write("\4\2\32\32pp\3\2\u01c7\u01c8\4\2\u01c3\u01c3\u01c7\u01c7")
        buf.write(";\2IIKKnnuu\u00c6\u00c6\u00d0\u00d0\u00d8\u00d8\u00db")
        buf.write("\u00db\u00e2\u00e3\u00e7\u00e9\u00ee\u00ef\u00f1\u00f1")
        buf.write("\u00f3\u00f4\u00f6\u00f7\u00fb\u00fb\u0107\u0107\u0109")
        buf.write("\u010a\u010c\u010c\u010f\u010f\u0112\u0112\u0114\u0117")
        buf.write("\u011b\u011c\u011e\u0122\u0124\u0124\u0126\u0127\u0129")
        buf.write("\u0129\u012c\u012c\u012e\u012e\u0132\u0135\u0137\u0146")
        buf.write("\u014a\u014a\u014e\u014e\u0150\u0150\u0153\u0155\u0157")
        buf.write("\u0157\u0159\u015a\u015d\u0164\u0166\u0166\u0168\u0169")
        buf.write("\u016c\u016f\u0171\u0173\u0175\u0175\u0177\u0177\u017a")
        buf.write("\u017c\u017e\u017e\u0180\u0180\u0182\u0189\u018b\u018c")
        buf.write("\u018f\u018f\u0192\u0192\u0194\u0199\u019c\u019c\u01a3")
        buf.write("\u01a6\u01ab\u01ab\u01ad\u01b1\u01b3\u01bb\u01c4\u01c4")
        buf.write("\3\2\u01cd\u01d4\7\2\u0123\u0123\u0136\u0136\u0148\u0148")
        buf.write("\u01a2\u01a2\u01e1\u01e1\3\2\u008b\u008c\4\2\u0162\u0163")
        buf.write("\u0173\u0173\4\2\u0144\u0144\u01c3\u01c3\2\u10e0\2\u01a3")
        buf.write("\3\2\2\2\4\u01a9\3\2\2\2\6\u01b3\3\2\2\2\b\u01be\3\2\2")
        buf.write("\2\n\u01c4\3\2\2\2\f\u01dc\3\2\2\2\16\u01e2\3\2\2\2\20")
        buf.write("\u01eb\3\2\2\2\22\u01ed\3\2\2\2\24\u01f8\3\2\2\2\26\u01fc")
        buf.write("\3\2\2\2\30\u020a\3\2\2\2\32\u020c\3\2\2\2\34\u0220\3")
        buf.write("\2\2\2\36\u0222\3\2\2\2 \u0229\3\2\2\2\"\u0234\3\2\2\2")
        buf.write("$\u024e\3\2\2\2&\u0254\3\2\2\2(\u0261\3\2\2\2*\u0266\3")
        buf.write("\2\2\2,\u027e\3\2\2\2.\u0281\3\2\2\2\60\u02a8\3\2\2\2")
        buf.write("\62\u02ab\3\2\2\2\64\u02d7\3\2\2\2\66\u02da\3\2\2\28\u02ea")
        buf.write("\3\2\2\2:\u0313\3\2\2\2<\u0320\3\2\2\2>\u0338\3\2\2\2")
        buf.write("@\u034b\3\2\2\2B\u034d\3\2\2\2D\u037e\3\2\2\2F\u03a7\3")
        buf.write("\2\2\2H\u03c6\3\2\2\2J\u03dc\3\2\2\2L\u03e2\3\2\2\2N\u03ea")
        buf.write("\3\2\2\2P\u0408\3\2\2\2R\u040a\3\2\2\2T\u0433\3\2\2\2")
        buf.write("V\u0460\3\2\2\2X\u0473\3\2\2\2Z\u0475\3\2\2\2\\\u048e")
        buf.write("\3\2\2\2^\u0490\3\2\2\2`\u0498\3\2\2\2b\u049a\3\2\2\2")
        buf.write("d\u049d\3\2\2\2f\u04a0\3\2\2\2h\u04a2\3\2\2\2j\u04a4\3")
        buf.write("\2\2\2l\u04a6\3\2\2\2n\u04c3\3\2\2\2p\u04c5\3\2\2\2r\u04ca")
        buf.write("\3\2\2\2t\u04cd\3\2\2\2v\u04d6\3\2\2\2x\u04de\3\2\2\2")
        buf.write("z\u04e5\3\2\2\2|\u04fc\3\2\2\2~\u04fe\3\2\2\2\u0080\u0509")
        buf.write("\3\2\2\2\u0082\u050b\3\2\2\2\u0084\u0519\3\2\2\2\u0086")
        buf.write("\u0523\3\2\2\2\u0088\u052e\3\2\2\2\u008a\u0538\3\2\2\2")
        buf.write("\u008c\u0545\3\2\2\2\u008e\u054f\3\2\2\2\u0090\u0560\3")
        buf.write("\2\2\2\u0092\u056a\3\2\2\2\u0094\u0574\3\2\2\2\u0096\u057b")
        buf.write("\3\2\2\2\u0098\u0585\3\2\2\2\u009a\u0587\3\2\2\2\u009c")
        buf.write("\u058e\3\2\2\2\u009e\u05b4\3\2\2\2\u00a0\u05d0\3\2\2\2")
        buf.write("\u00a2\u05fb\3\2\2\2\u00a4\u05ff\3\2\2\2\u00a6\u060c\3")
        buf.write("\2\2\2\u00a8\u063e\3\2\2\2\u00aa\u065a\3\2\2\2\u00ac\u0683")
        buf.write("\3\2\2\2\u00ae\u06d2\3\2\2\2\u00b0\u06d4\3\2\2\2\u00b2")
        buf.write("\u06d8\3\2\2\2\u00b4\u06dd\3\2\2\2\u00b6\u06e1\3\2\2\2")
        buf.write("\u00b8\u06ea\3\2\2\2\u00ba\u06ef\3\2\2\2\u00bc\u06fb\3")
        buf.write("\2\2\2\u00be\u06fd\3\2\2\2\u00c0\u072e\3\2\2\2\u00c2\u074c")
        buf.write("\3\2\2\2\u00c4\u0784\3\2\2\2\u00c6\u0790\3\2\2\2\u00c8")
        buf.write("\u0797\3\2\2\2\u00ca\u07be\3\2\2\2\u00cc\u07cf\3\2\2\2")
        buf.write("\u00ce\u081c\3\2\2\2\u00d0\u0820\3\2\2\2\u00d2\u0851\3")
        buf.write("\2\2\2\u00d4\u0880\3\2\2\2\u00d6\u0882\3\2\2\2\u00d8\u088c")
        buf.write("\3\2\2\2\u00da\u088e\3\2\2\2\u00dc\u0890\3\2\2\2\u00de")
        buf.write("\u089d\3\2\2\2\u00e0\u08b9\3\2\2\2\u00e2\u08bb\3\2\2\2")
        buf.write("\u00e4\u08c3\3\2\2\2\u00e6\u090b\3\2\2\2\u00e8\u0913\3")
        buf.write("\2\2\2\u00ea\u0924\3\2\2\2\u00ec\u092d\3\2\2\2\u00ee\u092f")
        buf.write("\3\2\2\2\u00f0\u0962\3\2\2\2\u00f2\u097f\3\2\2\2\u00f4")
        buf.write("\u0981\3\2\2\2\u00f6\u098a\3\2\2\2\u00f8\u0991\3\2\2\2")
        buf.write("\u00fa\u09a3\3\2\2\2\u00fc\u09bc\3\2\2\2\u00fe\u09be\3")
        buf.write("\2\2\2\u0100\u09c5\3\2\2\2\u0102\u09c9\3\2\2\2\u0104\u09cb")
        buf.write("\3\2\2\2\u0106\u0a04\3\2\2\2\u0108\u0a06\3\2\2\2\u010a")
        buf.write("\u0a0c\3\2\2\2\u010c\u0a29\3\2\2\2\u010e\u0a2b\3\2\2\2")
        buf.write("\u0110\u0a39\3\2\2\2\u0112\u0a79\3\2\2\2\u0114\u0a7b\3")
        buf.write("\2\2\2\u0116\u0a89\3\2\2\2\u0118\u0a8b\3\2\2\2\u011a\u0a8e")
        buf.write("\3\2\2\2\u011c\u0a92\3\2\2\2\u011e\u0aa1\3\2\2\2\u0120")
        buf.write("\u0aa6\3\2\2\2\u0122\u0ac4\3\2\2\2\u0124\u0ac6\3\2\2\2")
        buf.write("\u0126\u0ad5\3\2\2\2\u0128\u0b84\3\2\2\2\u012a\u0b86\3")
        buf.write("\2\2\2\u012c\u0b8b\3\2\2\2\u012e\u0b91\3\2\2\2\u0130\u0b9e")
        buf.write("\3\2\2\2\u0132\u0bab\3\2\2\2\u0134\u0bd7\3\2\2\2\u0136")
        buf.write("\u0bd9\3\2\2\2\u0138\u0be6\3\2\2\2\u013a\u0be8\3\2\2\2")
        buf.write("\u013c\u0bea\3\2\2\2\u013e\u0bf3\3\2\2\2\u0140\u0bfb\3")
        buf.write("\2\2\2\u0142\u0bff\3\2\2\2\u0144\u0c03\3\2\2\2\u0146\u0c1e")
        buf.write("\3\2\2\2\u0148\u0c49\3\2\2\2\u014a\u0c4b\3\2\2\2\u014c")
        buf.write("\u0c4d\3\2\2\2\u014e\u0c5c\3\2\2\2\u0150\u0c65\3\2\2\2")
        buf.write("\u0152\u0c69\3\2\2\2\u0154\u0c71\3\2\2\2\u0156\u0c77\3")
        buf.write("\2\2\2\u0158\u0c9b\3\2\2\2\u015a\u0c9d\3\2\2\2\u015c\u0caa")
        buf.write("\3\2\2\2\u015e\u0cac\3\2\2\2\u0160\u0cc1\3\2\2\2\u0162")
        buf.write("\u0cff\3\2\2\2\u0164\u0d0d\3\2\2\2\u0166\u0d14\3\2\2\2")
        buf.write("\u0168\u0d22\3\2\2\2\u016a\u0d28\3\2\2\2\u016c\u0d2d\3")
        buf.write("\2\2\2\u016e\u0d31\3\2\2\2\u0170\u0d3b\3\2\2\2\u0172\u0d3d")
        buf.write("\3\2\2\2\u0174\u0d3f\3\2\2\2\u0176\u0d42\3\2\2\2\u0178")
        buf.write("\u0d58\3\2\2\2\u017a\u0d5c\3\2\2\2\u017c\u0d6d\3\2\2\2")
        buf.write("\u017e\u0d6f\3\2\2\2\u0180\u0d74\3\2\2\2\u0182\u0d76\3")
        buf.write("\2\2\2\u0184\u0d87\3\2\2\2\u0186\u0d89\3\2\2\2\u0188\u0d8b")
        buf.write("\3\2\2\2\u018a\u0d95\3\2\2\2\u018c\u0dc5\3\2\2\2\u018e")
        buf.write("\u0de0\3\2\2\2\u0190\u0df8\3\2\2\2\u0192\u0e18\3\2\2\2")
        buf.write("\u0194\u0e36\3\2\2\2\u0196\u0e4d\3\2\2\2\u0198\u0e5b\3")
        buf.write("\2\2\2\u019a\u0e5d\3\2\2\2\u019c\u0e68\3\2\2\2\u019e\u0e8e")
        buf.write("\3\2\2\2\u01a0\u01a2\5\4\3\2\u01a1\u01a0\3\2\2\2\u01a2")
        buf.write("\u01a5\3\2\2\2\u01a3\u01a1\3\2\2\2\u01a3\u01a4\3\2\2\2")
        buf.write("\u01a4\u01a6\3\2\2\2\u01a5\u01a3\3\2\2\2\u01a6\u01a7\7")
        buf.write("\2\2\3\u01a7\3\3\2\2\2\u01a8\u01aa\5\u00b0Y\2\u01a9\u01a8")
        buf.write("\3\2\2\2\u01a9\u01aa\3\2\2\2\u01aa\u01ab\3\2\2\2\u01ab")
        buf.write("\u01ad\5\6\4\2\u01ac\u01ae\5\u00b0Y\2\u01ad\u01ac\3\2")
        buf.write("\2\2\u01ad\u01ae\3\2\2\2\u01ae\5\3\2\2\2\u01af\u01b1\5")
        buf.write("\b\5\2\u01b0\u01b2\7\u01dd\2\2\u01b1\u01b0\3\2\2\2\u01b1")
        buf.write("\u01b2\3\2\2\2\u01b2\u01b4\3\2\2\2\u01b3\u01af\3\2\2\2")
        buf.write("\u01b4\u01b5\3\2\2\2\u01b5\u01b3\3\2\2\2\u01b5\u01b6\3")
        buf.write("\2\2\2\u01b6\7\3\2\2\2\u01b7\u01bf\5\n\6\2\u01b8\u01bf")
        buf.write("\5\f\7\2\u01b9\u01bf\5\16\b\2\u01ba\u01bf\5,\27\2\u01bb")
        buf.write("\u01bf\5\20\t\2\u01bc\u01bf\5\u009eP\2\u01bd\u01bf\5(")
        buf.write("\25\2\u01be\u01b7\3\2\2\2\u01be\u01b8\3\2\2\2\u01be\u01b9")
        buf.write("\3\2\2\2\u01be\u01ba\3\2\2\2\u01be\u01bb\3\2\2\2\u01be")
        buf.write("\u01bc\3\2\2\2\u01be\u01bd\3\2\2\2\u01bf\t\3\2\2\2\u01c0")
        buf.write("\u01c5\5.\30\2\u01c1\u01c5\5\62\32\2\u01c2\u01c5\5\66")
        buf.write("\34\2\u01c3\u01c5\58\35\2\u01c4\u01c0\3\2\2\2\u01c4\u01c1")
        buf.write("\3\2\2\2\u01c4\u01c2\3\2\2\2\u01c4\u01c3\3\2\2\2\u01c5")
        buf.write("\13\3\2\2\2\u01c6\u01dd\5B\"\2\u01c7\u01dd\5D#\2\u01c8")
        buf.write("\u01dd\5\u018c\u00c7\2\u01c9\u01dd\5\u018a\u00c6\2\u01ca")
        buf.write("\u01dd\5F$\2\u01cb\u01dd\5J&\2\u01cc\u01dd\5L\'\2\u01cd")
        buf.write("\u01dd\5H%\2\u01ce\u01dd\5\u0094K\2\u01cf\u01dd\5N(\2")
        buf.write("\u01d0\u01dd\5R*\2\u01d1\u01dd\5T+\2\u01d2\u01dd\5\u0082")
        buf.write("B\2\u01d3\u01dd\5\u0084C\2\u01d4\u01dd\5\u0086D\2\u01d5")
        buf.write("\u01dd\5\u008cG\2\u01d6\u01dd\5\u0088E\2\u01d7\u01dd\5")
        buf.write("\u0096L\2\u01d8\u01dd\5\u008eH\2\u01d9\u01dd\5\u008aF")
        buf.write("\2\u01da\u01dd\5\u0090I\2\u01db\u01dd\5\u0092J\2\u01dc")
        buf.write("\u01c6\3\2\2\2\u01dc\u01c7\3\2\2\2\u01dc\u01c8\3\2\2\2")
        buf.write("\u01dc\u01c9\3\2\2\2\u01dc\u01ca\3\2\2\2\u01dc\u01cb\3")
        buf.write("\2\2\2\u01dc\u01cc\3\2\2\2\u01dc\u01cd\3\2\2\2\u01dc\u01ce")
        buf.write("\3\2\2\2\u01dc\u01cf\3\2\2\2\u01dc\u01d0\3\2\2\2\u01dc")
        buf.write("\u01d1\3\2\2\2\u01dc\u01d2\3\2\2\2\u01dc\u01d3\3\2\2\2")
        buf.write("\u01dc\u01d4\3\2\2\2\u01dc\u01d5\3\2\2\2\u01dc\u01d6\3")
        buf.write("\2\2\2\u01dc\u01d7\3\2\2\2\u01dc\u01d8\3\2\2\2\u01dc\u01d9")
        buf.write("\3\2\2\2\u01dc\u01da\3\2\2\2\u01dc\u01db\3\2\2\2\u01dd")
        buf.write("\r\3\2\2\2\u01de\u01e3\5\32\16\2\u01df\u01e3\5\"\22\2")
        buf.write("\u01e0\u01e3\5$\23\2\u01e1\u01e3\5&\24\2\u01e2\u01de\3")
        buf.write("\2\2\2\u01e2\u01df\3\2\2\2\u01e2\u01e0\3\2\2\2\u01e2\u01e1")
        buf.write("\3\2\2\2\u01e3\17\3\2\2\2\u01e4\u01ec\5\22\n\2\u01e5\u01ec")
        buf.write("\5\24\13\2\u01e6\u01ec\5\26\f\2\u01e7\u01ec\5\30\r\2\u01e8")
        buf.write("\u01ec\5\36\20\2\u01e9\u01ec\5 \21\2\u01ea\u01ec\5*\26")
        buf.write("\2\u01eb\u01e4\3\2\2\2\u01eb\u01e5\3\2\2\2\u01eb\u01e6")
        buf.write("\3\2\2\2\u01eb\u01e7\3\2\2\2\u01eb\u01e8\3\2\2\2\u01eb")
        buf.write("\u01e9\3\2\2\2\u01eb\u01ea\3\2\2\2\u01ec\21\3\2\2\2\u01ed")
        buf.write("\u01ef\7\f\2\2\u01ee\u01f0\7\u01dd\2\2\u01ef\u01ee\3\2")
        buf.write("\2\2\u01ef\u01f0\3\2\2\2\u01f0\u01f2\3\2\2\2\u01f1\u01f3")
        buf.write("\5\6\4\2\u01f2\u01f1\3\2\2\2\u01f2\u01f3\3\2\2\2\u01f3")
        buf.write("\u01f4\3\2\2\2\u01f4\u01f6\7=\2\2\u01f5\u01f7\7\u01dd")
        buf.write("\2\2\u01f6\u01f5\3\2\2\2\u01f6\u01f7\3\2\2\2\u01f7\23")
        buf.write("\3\2\2\2\u01f8\u01fa\7\16\2\2\u01f9\u01fb\7\u01dd\2\2")
        buf.write("\u01fa\u01f9\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fb\25\3\2")
        buf.write("\2\2\u01fc\u01fe\7$\2\2\u01fd\u01ff\7\u01dd\2\2\u01fe")
        buf.write("\u01fd\3\2\2\2\u01fe\u01ff\3\2\2\2\u01ff\27\3\2\2\2\u0200")
        buf.write("\u0201\7R\2\2\u0201\u0203\5\u0180\u00c1\2\u0202\u0204")
        buf.write("\7\u01dd\2\2\u0203\u0202\3\2\2\2\u0203\u0204\3\2\2\2\u0204")
        buf.write("\u020b\3\2\2\2\u0205\u0206\5\u0180\u00c1\2\u0206\u0208")
        buf.write("\7\u01de\2\2\u0207\u0209\7\u01dd\2\2\u0208\u0207\3\2\2")
        buf.write("\2\u0208\u0209\3\2\2\2\u0209\u020b\3\2\2\2\u020a\u0200")
        buf.write("\3\2\2\2\u020a\u0205\3\2\2\2\u020b\31\3\2\2\2\u020c\u020d")
        buf.write("\7Z\2\2\u020d\u020e\5\u00e4s\2\u020e\u020f\5\34\17\2\u020f")
        buf.write("\33\3\2\2\2\u0210\u0213\5\b\5\2\u0211\u0212\7<\2\2\u0212")
        buf.write("\u0214\5\b\5\2\u0213\u0211\3\2\2\2\u0213\u0214\3\2\2\2")
        buf.write("\u0214\u0216\3\2\2\2\u0215\u0217\7\u01dd\2\2\u0216\u0215")
        buf.write("\3\2\2\2\u0216\u0217\3\2\2\2\u0217\u0221\3\2\2\2\u0218")
        buf.write("\u021b\5\22\n\2\u0219\u021a\7<\2\2\u021a\u021c\5\22\n")
        buf.write("\2\u021b\u0219\3\2\2\2\u021b\u021c\3\2\2\2\u021c\u021e")
        buf.write("\3\2\2\2\u021d\u021f\7\u01dd\2\2\u021e\u021d\3\2\2\2\u021e")
        buf.write("\u021f\3\2\2\2\u021f\u0221\3\2\2\2\u0220\u0210\3\2\2\2")
        buf.write("\u0220\u0218\3\2\2\2\u0221\35\3\2\2\2\u0222\u0224\7\u0096")
        buf.write("\2\2\u0223\u0225\5\u00d2j\2\u0224\u0223\3\2\2\2\u0224")
        buf.write("\u0225\3\2\2\2\u0225\u0227\3\2\2\2\u0226\u0228\7\u01dd")
        buf.write("\2\2\u0227\u0226\3\2\2\2\u0227\u0228\3\2\2\2\u0228\37")
        buf.write("\3\2\2\2\u0229\u022f\7\u01a4\2\2\u022a\u022b\t\2\2\2\u022b")
        buf.write("\u022c\7\u01dc\2\2\u022c\u022d\t\3\2\2\u022d\u022e\7\u01dc")
        buf.write("\2\2\u022e\u0230\t\2\2\2\u022f\u022a\3\2\2\2\u022f\u0230")
        buf.write("\3\2\2\2\u0230\u0232\3\2\2\2\u0231\u0233\7\u01dd\2\2\u0232")
        buf.write("\u0231\3\2\2\2\u0232\u0233\3\2\2\2\u0233!\3\2\2\2\u0234")
        buf.write("\u0235\7\f\2\2\u0235\u0237\7\u01ab\2\2\u0236\u0238\7\u01dd")
        buf.write("\2\2\u0237\u0236\3\2\2\2\u0237\u0238\3\2\2\2\u0238\u023a")
        buf.write("\3\2\2\2\u0239\u023b\5\6\4\2\u023a\u0239\3\2\2\2\u023a")
        buf.write("\u023b\3\2\2\2\u023b\u023c\3\2\2\2\u023c\u023d\7=\2\2")
        buf.write("\u023d\u023f\7\u01ab\2\2\u023e\u0240\7\u01dd\2\2\u023f")
        buf.write("\u023e\3\2\2\2\u023f\u0240\3\2\2\2\u0240\u0241\3\2\2\2")
        buf.write("\u0241\u0242\7\f\2\2\u0242\u0244\7\u00e9\2\2\u0243\u0245")
        buf.write("\7\u01dd\2\2\u0244\u0243\3\2\2\2\u0244\u0245\3\2\2\2\u0245")
        buf.write("\u0247\3\2\2\2\u0246\u0248\5\6\4\2\u0247\u0246\3\2\2\2")
        buf.write("\u0247\u0248\3\2\2\2\u0248\u0249\3\2\2\2\u0249\u024a\7")
        buf.write("=\2\2\u024a\u024c\7\u00e9\2\2\u024b\u024d\7\u01dd\2\2")
        buf.write("\u024c\u024b\3\2\2\2\u024c\u024d\3\2\2\2\u024d#\3\2\2")
        buf.write("\2\u024e\u024f\7\u00c9\2\2\u024f\u0250\t\4\2\2\u0250\u0252")
        buf.write("\5\u00d2j\2\u0251\u0253\7\u01dd\2\2\u0252\u0251\3\2\2")
        buf.write("\2\u0252\u0253\3\2\2\2\u0253%\3\2\2\2\u0254\u0255\7\u00cc")
        buf.write("\2\2\u0255\u025f\5\u00e4s\2\u0256\u0260\5\b\5\2\u0257")
        buf.write("\u0259\7\16\2\2\u0258\u025a\7\u01dd\2\2\u0259\u0258\3")
        buf.write("\2\2\2\u0259\u025a\3\2\2\2\u025a\u0260\3\2\2\2\u025b\u025d")
        buf.write("\7$\2\2\u025c\u025e\7\u01dd\2\2\u025d\u025c\3\2\2\2\u025d")
        buf.write("\u025e\3\2\2\2\u025e\u0260\3\2\2\2\u025f\u0256\3\2\2\2")
        buf.write("\u025f\u0257\3\2\2\2\u025f\u025b\3\2\2\2\u0260\'\3\2\2")
        buf.write("\2\u0261\u0262\7\u008a\2\2\u0262\u0264\5\u00d2j\2\u0263")
        buf.write("\u0265\7\u01dd\2\2\u0264\u0263\3\2\2\2\u0264\u0265\3\2")
        buf.write("\2\2\u0265)\3\2\2\2\u0266\u0267\7\u008e\2\2\u0267\u0268")
        buf.write("\7\u01da\2\2\u0268\u0269\t\5\2\2\u0269\u026a\7\u01dc\2")
        buf.write("\2\u026a\u026b\5\u00d0i\2\u026b\u026c\7\u01dc\2\2\u026c")
        buf.write("\u0271\5\u00d0i\2\u026d\u026e\7\u01dc\2\2\u026e\u0270")
        buf.write("\5\u00d0i\2\u026f\u026d\3\2\2\2\u0270\u0273\3\2\2\2\u0271")
        buf.write("\u026f\3\2\2\2\u0271\u0272\3\2\2\2\u0272\u0274\3\2\2\2")
        buf.write("\u0273\u0271\3\2\2\2\u0274\u0276\7\u01db\2\2\u0275\u0277")
        buf.write("\7\u01dd\2\2\u0276\u0275\3\2\2\2\u0276\u0277\3\2\2\2\u0277")
        buf.write("+\3\2\2\2\u0278\u027f\5\u00a0Q\2\u0279\u027f\5\u00a2R")
        buf.write("\2\u027a\u027f\5\u00a8U\2\u027b\u027f\5\u00acW\2\u027c")
        buf.write("\u027f\5\u00aeX\2\u027d\u027f\5\u00b2Z\2\u027e\u0278\3")
        buf.write("\2\2\2\u027e\u0279\3\2\2\2\u027e\u027a\3\2\2\2\u027e\u027b")
        buf.write("\3\2\2\2\u027e\u027c\3\2\2\2\u027e\u027d\3\2\2\2\u027f")
        buf.write("-\3\2\2\2\u0280\u0282\5\u00dco\2\u0281\u0280\3\2\2\2\u0281")
        buf.write("\u0282\3\2\2\2\u0282\u0283\3\2\2\2\u0283\u0285\7\63\2")
        buf.write("\2\u0284\u0286\5\u00f6|\2\u0285\u0284\3\2\2\2\u0285\u0286")
        buf.write("\3\2\2\2\u0286\u0288\3\2\2\2\u0287\u0289\7O\2\2\u0288")
        buf.write("\u0287\3\2\2\2\u0288\u0289\3\2\2\2\u0289\u028a\3\2\2\2")
        buf.write("\u028a\u028c\5\60\31\2\u028b\u028d\5\u0130\u0099\2\u028c")
        buf.write("\u028b\3\2\2\2\u028c\u028d\3\2\2\2\u028d\u028f\3\2\2\2")
        buf.write("\u028e\u0290\5<\37\2\u028f\u028e\3\2\2\2\u028f\u0290\3")
        buf.write("\2\2\2\u0290\u0293\3\2\2\2\u0291\u0292\7O\2\2\u0292\u0294")
        buf.write("\5\u010e\u0088\2\u0293\u0291\3\2\2\2\u0293\u0294\3\2\2")
        buf.write("\2\u0294\u0296\3\2\2\2\u0295\u0297\5:\36\2\u0296\u0295")
        buf.write("\3\2\2\2\u0296\u0297\3\2\2\2\u0297\u0299\3\2\2\2\u0298")
        buf.write("\u029a\5\u00fc\177\2\u0299\u0298\3\2\2\2\u0299\u029a\3")
        buf.write("\2\2\2\u029a\u029c\3\2\2\2\u029b\u029d\5\u0104\u0083\2")
        buf.write("\u029c\u029b\3\2\2\2\u029c\u029d\3\2\2\2\u029d\u029f\3")
        buf.write("\2\2\2\u029e\u02a0\7\u01dd\2\2\u029f\u029e\3\2\2\2\u029f")
        buf.write("\u02a0\3\2\2\2\u02a0/\3\2\2\2\u02a1\u02a3\5\u0180\u00c1")
        buf.write("\2\u02a2\u02a4\5\u012e\u0098\2\u02a3\u02a2\3\2\2\2\u02a3")
        buf.write("\u02a4\3\2\2\2\u02a4\u02a9\3\2\2\2\u02a5\u02a9\5\u016a")
        buf.write("\u00b6\2\u02a6\u02a9\5\u0098M\2\u02a7\u02a9\7\u01c2\2")
        buf.write("\2\u02a8\u02a1\3\2\2\2\u02a8\u02a5\3\2\2\2\u02a8\u02a6")
        buf.write("\3\2\2\2\u02a8\u02a7\3\2\2\2\u02a9\61\3\2\2\2\u02aa\u02ac")
        buf.write("\5\u00dco\2\u02ab\u02aa\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac")
        buf.write("\u02ad\3\2\2\2\u02ad\u02af\7_\2\2\u02ae\u02b0\5\u00f6")
        buf.write("|\2\u02af\u02ae\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b2")
        buf.write("\3\2\2\2\u02b1\u02b3\7a\2\2\u02b2\u02b1\3\2\2\2\u02b2")
        buf.write("\u02b3\3\2\2\2\u02b3\u02b6\3\2\2\2\u02b4\u02b7\5\u016a")
        buf.write("\u00b6\2\u02b5\u02b7\5\u0098M\2\u02b6\u02b4\3\2\2\2\u02b6")
        buf.write("\u02b5\3\2\2\2\u02b7\u02b9\3\2\2\2\u02b8\u02ba\5\u0130")
        buf.write("\u0099\2\u02b9\u02b8\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba")
        buf.write("\u02bd\3\2\2\2\u02bb\u02bc\7O\2\2\u02bc\u02be\5\u0126")
        buf.write("\u0094\2\u02bd\u02bb\3\2\2\2\u02bd\u02be\3\2\2\2\u02be")
        buf.write("\u02c3\3\2\2\2\u02bf\u02c0\7\u01da\2\2\u02c0\u02c1\5\u016e")
        buf.write("\u00b8\2\u02c1\u02c2\7\u01db\2\2\u02c2\u02c4\3\2\2\2\u02c3")
        buf.write("\u02bf\3\2\2\2\u02c3\u02c4\3\2\2\2\u02c4\u02c6\3\2\2\2")
        buf.write("\u02c5\u02c7\5<\37\2\u02c6\u02c5\3\2\2\2\u02c6\u02c7\3")
        buf.write("\2\2\2\u02c7\u02c8\3\2\2\2\u02c8\u02ca\5\64\33\2\u02c9")
        buf.write("\u02cb\5\u00fc\177\2\u02ca\u02c9\3\2\2\2\u02ca\u02cb\3")
        buf.write("\2\2\2\u02cb\u02cd\3\2\2\2\u02cc\u02ce\5\u0104\u0083\2")
        buf.write("\u02cd\u02cc\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce\u02d0\3")
        buf.write("\2\2\2\u02cf\u02d1\7\u01dd\2\2\u02d0\u02cf\3\2\2\2\u02d0")
        buf.write("\u02d1\3\2\2\2\u02d1\63\3\2\2\2\u02d2\u02d8\5\u013c\u009f")
        buf.write("\2\u02d3\u02d8\5\u0126\u0094\2\u02d4\u02d8\5\u00a2R\2")
        buf.write("\u02d5\u02d6\7\62\2\2\u02d6\u02d8\7\u00c5\2\2\u02d7\u02d2")
        buf.write("\3\2\2\2\u02d7\u02d3\3\2\2\2\u02d7\u02d4\3\2\2\2\u02d7")
        buf.write("\u02d5\3\2\2\2\u02d8\65\3\2\2\2\u02d9\u02db\5\u00dco\2")
        buf.write("\u02da\u02d9\3\2\2\2\u02da\u02db\3\2\2\2\u02db\u02dc\3")
        buf.write("\2\2\2\u02dc\u02de\5\u00e8u\2\u02dd\u02df\5\u00f8}\2\u02de")
        buf.write("\u02dd\3\2\2\2\u02de\u02df\3\2\2\2\u02df\u02e1\3\2\2\2")
        buf.write("\u02e0\u02e2\5\u00fc\177\2\u02e1\u02e0\3\2\2\2\u02e1\u02e2")
        buf.write("\3\2\2\2\u02e2\u02e4\3\2\2\2\u02e3\u02e5\5\u0104\u0083")
        buf.write("\2\u02e4\u02e3\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5\u02e7")
        buf.write("\3\2\2\2\u02e6\u02e8\7\u01dd\2\2\u02e7\u02e6\3\2\2\2\u02e7")
        buf.write("\u02e8\3\2\2\2\u02e8\67\3\2\2\2\u02e9\u02eb\5\u00dco\2")
        buf.write("\u02ea\u02e9\3\2\2\2\u02ea\u02eb\3\2\2\2\u02eb\u02ec\3")
        buf.write("\2\2\2\u02ec\u02ee\7\u00c1\2\2\u02ed\u02ef\5\u00f6|\2")
        buf.write("\u02ee\u02ed\3\2\2\2\u02ee\u02ef\3\2\2\2\u02ef\u02f2\3")
        buf.write("\2\2\2\u02f0\u02f3\5\u016a\u00b6\2\u02f1\u02f3\5\u0098")
        buf.write("M\2\u02f2\u02f0\3\2\2\2\u02f2\u02f1\3\2\2\2\u02f3\u02f5")
        buf.write("\3\2\2\2\u02f4\u02f6\5\u012e\u0098\2\u02f5\u02f4\3\2\2")
        buf.write("\2\u02f5\u02f6\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7\u02f8")
        buf.write("\7\u00a7\2\2\u02f8\u02fd\5\u00e0q\2\u02f9\u02fa\7\u01dc")
        buf.write("\2\2\u02fa\u02fc\5\u00e0q\2\u02fb\u02f9\3\2\2\2\u02fc")
        buf.write("\u02ff\3\2\2\2\u02fd\u02fb\3\2\2\2\u02fd\u02fe\3\2\2\2")
        buf.write("\u02fe\u0301\3\2\2\2\u02ff\u02fd\3\2\2\2\u0300\u0302\5")
        buf.write("<\37\2\u0301\u0300\3\2\2\2\u0301\u0302\3\2\2\2\u0302\u0305")
        buf.write("\3\2\2\2\u0303\u0304\7O\2\2\u0304\u0306\5\u010e\u0088")
        buf.write("\2\u0305\u0303\3\2\2\2\u0305\u0306\3\2\2\2\u0306\u0308")
        buf.write("\3\2\2\2\u0307\u0309\5:\36\2\u0308\u0307\3\2\2\2\u0308")
        buf.write("\u0309\3\2\2\2\u0309\u030b\3\2\2\2\u030a\u030c\5\u00fc")
        buf.write("\177\2\u030b\u030a\3\2\2\2\u030b\u030c\3\2\2\2\u030c\u030e")
        buf.write("\3\2\2\2\u030d\u030f\5\u0104\u0083\2\u030e\u030d\3\2\2")
        buf.write("\2\u030e\u030f\3\2\2\2\u030f\u0311\3\2\2\2\u0310\u0312")
        buf.write("\7\u01dd\2\2\u0311\u0310\3\2\2\2\u0311\u0312\3\2\2\2\u0312")
        buf.write("9\3\2\2\2\u0313\u031e\7\u00cb\2\2\u0314\u031f\5\u00e2")
        buf.write("r\2\u0315\u0316\7(\2\2\u0316\u031c\7v\2\2\u0317\u0319")
        buf.write("\7\u0124\2\2\u0318\u0317\3\2\2\2\u0318\u0319\3\2\2\2\u0319")
        buf.write("\u031a\3\2\2\2\u031a\u031d\5\u0170\u00b9\2\u031b\u031d")
        buf.write("\7\u01c2\2\2\u031c\u0318\3\2\2\2\u031c\u031b\3\2\2\2\u031d")
        buf.write("\u031f\3\2\2\2\u031e\u0314\3\2\2\2\u031e\u0315\3\2\2\2")
        buf.write("\u031f;\3\2\2\2\u0320\u0321\7\u0163\2\2\u0321\u0326\5")
        buf.write("> \2\u0322\u0323\7\u01dc\2\2\u0323\u0325\5> \2\u0324\u0322")
        buf.write("\3\2\2\2\u0325\u0328\3\2\2\2\u0326\u0324\3\2\2\2\u0326")
        buf.write("\u0327\3\2\2\2\u0327\u0334\3\2\2\2\u0328\u0326\3\2\2\2")
        buf.write("\u0329\u032c\7a\2\2\u032a\u032d\7\u01c2\2\2\u032b\u032d")
        buf.write("\5\u0164\u00b3\2\u032c\u032a\3\2\2\2\u032c\u032b\3\2\2")
        buf.write("\2\u032d\u0332\3\2\2\2\u032e\u032f\7\u01da\2\2\u032f\u0330")
        buf.write("\5\u016e\u00b8\2\u0330\u0331\7\u01db\2\2\u0331\u0333\3")
        buf.write("\2\2\2\u0332\u032e\3\2\2\2\u0332\u0333\3\2\2\2\u0333\u0335")
        buf.write("\3\2\2\2\u0334\u0329\3\2\2\2\u0334\u0335\3\2\2\2\u0335")
        buf.write("=\3\2\2\2\u0336\u0339\5@!\2\u0337\u0339\5\u00d2j\2\u0338")
        buf.write("\u0336\3\2\2\2\u0338\u0337\3\2\2\2\u0339\u033e\3\2\2\2")
        buf.write("\u033a\u033c\7\b\2\2\u033b\u033a\3\2\2\2\u033b\u033c\3")
        buf.write("\2\2\2\u033c\u033d\3\2\2\2\u033d\u033f\5\u0138\u009d\2")
        buf.write("\u033e\u033b\3\2\2\2\u033e\u033f\3\2\2\2\u033f?\3\2\2")
        buf.write("\2\u0340\u0344\7\u0109\2\2\u0341\u0344\7\u0133\2\2\u0342")
        buf.write("\u0344\5\u0164\u00b3\2\u0343\u0340\3\2\2\2\u0343\u0341")
        buf.write("\3\2\2\2\u0343\u0342\3\2\2\2\u0344\u0345\3\2\2\2\u0345")
        buf.write("\u0348\7\u01d5\2\2\u0346\u0349\7\u01df\2\2\u0347\u0349")
        buf.write("\5\u0180\u00c1\2\u0348\u0346\3\2\2\2\u0348\u0347\3\2\2")
        buf.write("\2\u0349\u034c\3\2\2\2\u034a\u034c\7\u01bc\2\2\u034b\u0343")
        buf.write("\3\2\2\2\u034b\u034a\3\2\2\2\u034cA\3\2\2\2\u034d\u034e")
        buf.write("\7&\2\2\u034e\u034f\7.\2\2\u034f\u0353\5\u0180\u00c1\2")
        buf.write("\u0350\u0351\7!\2\2\u0351\u0352\7\u01c9\2\2\u0352\u0354")
        buf.write("\t\6\2\2\u0353\u0350\3\2\2\2\u0353\u0354\3\2\2\2\u0354")
        buf.write("\u0361\3\2\2\2\u0355\u0357\7y\2\2\u0356\u0358\7\u0089")
        buf.write("\2\2\u0357\u0356\3\2\2\2\u0357\u0358\3\2\2\2\u0358\u0359")
        buf.write("\3\2\2\2\u0359\u035e\5\u015c\u00af\2\u035a\u035b\7\u01dc")
        buf.write("\2\2\u035b\u035d\5\u015c\u00af\2\u035c\u035a\3\2\2\2\u035d")
        buf.write("\u0360\3\2\2\2\u035e\u035c\3\2\2\2\u035e\u035f\3\2\2\2")
        buf.write("\u035f\u0362\3\2\2\2\u0360\u035e\3\2\2\2\u0361\u0355\3")
        buf.write("\2\2\2\u0361\u0362\3\2\2\2\u0362\u036d\3\2\2\2\u0363\u0364")
        buf.write("\7j\2\2\u0364\u0365\7y\2\2\u0365\u036a\5\u015c\u00af\2")
        buf.write("\u0366\u0367\7\u01dc\2\2\u0367\u0369\5\u015c\u00af\2\u0368")
        buf.write("\u0366\3\2\2\2\u0369\u036c\3\2\2\2\u036a\u0368\3\2\2\2")
        buf.write("\u036a\u036b\3\2\2\2\u036b\u036e\3\2\2\2\u036c\u036a\3")
        buf.write("\2\2\2\u036d\u0363\3\2\2\2\u036d\u036e\3\2\2\2\u036e\u0371")
        buf.write("\3\2\2\2\u036f\u0370\7\34\2\2\u0370\u0372\5\u0180\u00c1")
        buf.write("\2\u0371\u036f\3\2\2\2\u0371\u0372\3\2\2\2\u0372\u037c")
        buf.write("\3\2\2\2\u0373\u0374\7\u00cd\2\2\u0374\u0379\5\u0158\u00ad")
        buf.write("\2\u0375\u0376\7\u01dc\2\2\u0376\u0378\5\u0158\u00ad\2")
        buf.write("\u0377\u0375\3\2\2\2\u0378\u037b\3\2\2\2\u0379\u0377\3")
        buf.write("\2\2\2\u0379\u037a\3\2\2\2\u037a\u037d\3\2\2\2\u037b\u0379")
        buf.write("\3\2\2\2\u037c\u0373\3\2\2\2\u037c\u037d\3\2\2\2\u037d")
        buf.write("C\3\2\2\2\u037e\u0380\7&\2\2\u037f\u0381\7\u00bf\2\2\u0380")
        buf.write("\u037f\3\2\2\2\u0380\u0381\3\2\2\2\u0381\u0383\3\2\2\2")
        buf.write("\u0382\u0384\5\u0174\u00bb\2\u0383\u0382\3\2\2\2\u0383")
        buf.write("\u0384\3\2\2\2\u0384\u0385\3\2\2\2\u0385\u0386\7\\\2\2")
        buf.write("\u0386\u0387\5\u0180\u00c1\2\u0387\u0388\7y\2\2\u0388")
        buf.write("\u0389\5\u0120\u0091\2\u0389\u038a\7\u01da\2\2\u038a\u038c")
        buf.write("\5\u016e\u00b8\2\u038b\u038d\t\7\2\2\u038c\u038b\3\2\2")
        buf.write("\2\u038c\u038d\3\2\2\2\u038d\u038e\3\2\2\2\u038e\u0397")
        buf.write("\7\u01db\2\2\u038f\u0390\7]\2\2\u0390\u0391\7\u01da\2")
        buf.write("\2\u0391\u0393\5\u016e\u00b8\2\u0392\u0394\t\7\2\2\u0393")
        buf.write("\u0392\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u0395\3\2\2\2")
        buf.write("\u0395\u0396\7\u01db\2\2\u0396\u0398\3\2\2\2\u0397\u038f")
        buf.write("\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u039b\3\2\2\2\u0399")
        buf.write("\u039a\7\u00cb\2\2\u039a\u039c\5\u00e4s\2\u039b\u0399")
        buf.write("\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u039e\3\2\2\2\u039d")
        buf.write("\u039f\5\u00c4c\2\u039e\u039d\3\2\2\2\u039e\u039f\3\2")
        buf.write("\2\2\u039f\u03a2\3\2\2\2\u03a0\u03a1\7y\2\2\u03a1\u03a3")
        buf.write("\5\u0180\u00c1\2\u03a2\u03a0\3\2\2\2\u03a2\u03a3\3\2\2")
        buf.write("\2\u03a3\u03a5\3\2\2\2\u03a4\u03a6\7\u01dd\2\2\u03a5\u03a4")
        buf.write("\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6E\3\2\2\2\u03a7\u03a8")
        buf.write("\7&\2\2\u03a8\u03a9\7\u00ac\2\2\u03a9\u03aa\5\u0180\u00c1")
        buf.write("\2\u03aa\u03ab\7y\2\2\u03ab\u03ac\5\u0120\u0091\2\u03ac")
        buf.write("\u03ad\7\u01da\2\2\u03ad\u03ae\5\u016e\u00b8\2\u03ae\u03c1")
        buf.write("\7\u01db\2\2\u03af\u03b5\7\u00cd\2\2\u03b0\u03b6\7\u0122")
        buf.write("\2\2\u03b1\u03b2\7\u0186\2\2\u03b2\u03b3\7\u01c3\2\2\u03b3")
        buf.write("\u03b6\t\b\2\2\u03b4\u03b6\7\u0197\2\2\u03b5\u03b0\3\2")
        buf.write("\2\2\u03b5\u03b1\3\2\2\2\u03b5\u03b4\3\2\2\2\u03b6\u03b9")
        buf.write("\3\2\2\2\u03b7\u03b8\7\u01dc\2\2\u03b8\u03ba\7\u0157\2")
        buf.write("\2\u03b9\u03b7\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba\u03bf")
        buf.write("\3\2\2\2\u03bb\u03bc\7\u01dc\2\2\u03bc\u03bd\7\u012f\2")
        buf.write("\2\u03bd\u03be\7\u01c9\2\2\u03be\u03c0\5\u0172\u00ba\2")
        buf.write("\u03bf\u03bb\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0\u03c2\3")
        buf.write("\2\2\2\u03c1\u03af\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u03c4")
        buf.write("\3\2\2\2\u03c3\u03c5\7\u01dd\2\2\u03c4\u03c3\3\2\2\2\u03c4")
        buf.write("\u03c5\3\2\2\2\u03c5G\3\2\2\2\u03c6\u03c7\7&\2\2\u03c7")
        buf.write("\u03c8\7\u00b0\2\2\u03c8\u03c9\5\u0164\u00b3\2\u03c9\u03ca")
        buf.write("\7\u01da\2\2\u03ca\u03cc\5\u00ba^\2\u03cb\u03cd\7\u01dc")
        buf.write("\2\2\u03cc\u03cb\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd\u03ce")
        buf.write("\3\2\2\2\u03ce\u03d2\7\u01db\2\2\u03cf\u03d0\7y\2\2\u03d0")
        buf.write("\u03d3\5\u0180\u00c1\2\u03d1\u03d3\7\62\2\2\u03d2\u03cf")
        buf.write("\3\2\2\2\u03d2\u03d1\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3")
        buf.write("\u03d7\3\2\2\2\u03d4\u03d5\7\u01a3\2\2\u03d5\u03d8\5\u0180")
        buf.write("\u00c1\2\u03d6\u03d8\7\62\2\2\u03d7\u03d4\3\2\2\2\u03d7")
        buf.write("\u03d6\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8\u03da\3\2\2\2")
        buf.write("\u03d9\u03db\7\u01dd\2\2\u03da\u03d9\3\2\2\2\u03da\u03db")
        buf.write("\3\2\2\2\u03dbI\3\2\2\2\u03dc\u03dd\7&\2\2\u03dd\u03de")
        buf.write("\7\u00a0\2\2\u03de\u03e0\5\u0166\u00b4\2\u03df\u03e1\7")
        buf.write("\u01dd\2\2\u03e0\u03df\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1")
        buf.write("K\3\2\2\2\u03e2\u03e3\7&\2\2\u03e3\u03e4\7\u00ad\2\2\u03e4")
        buf.write("\u03e5\5\u0166\u00b4\2\u03e5\u03e6\7J\2\2\u03e6\u03e8")
        buf.write("\5\u0164\u00b3\2\u03e7\u03e9\7\u01dd\2\2\u03e8\u03e7\3")
        buf.write("\2\2\2\u03e8\u03e9\3\2\2\2\u03e9M\3\2\2\2\u03ea\u03eb")
        buf.write("\7&\2\2\u03eb\u03ec\7\u00c8\2\2\u03ec\u03f1\5\u0166\u00b4")
        buf.write("\2\u03ed\u03ee\7\u01da\2\2\u03ee\u03ef\5\u016e\u00b8\2")
        buf.write("\u03ef\u03f0\7\u01db\2\2\u03f0\u03f2\3\2\2\2\u03f1\u03ed")
        buf.write("\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u03fc\3\2\2\2\u03f3")
        buf.write("\u03f4\7\u00cd\2\2\u03f4\u03f9\5P)\2\u03f5\u03f6\7\u01dc")
        buf.write("\2\2\u03f6\u03f8\5P)\2\u03f7\u03f5\3\2\2\2\u03f8\u03fb")
        buf.write("\3\2\2\2\u03f9\u03f7\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa")
        buf.write("\u03fd\3\2\2\2\u03fb\u03f9\3\2\2\2\u03fc\u03f3\3\2\2\2")
        buf.write("\u03fc\u03fd\3\2\2\2\u03fd\u03fe\3\2\2\2\u03fe\u03ff\7")
        buf.write("\b\2\2\u03ff\u0403\5\66\34\2\u0400\u0401\7\u00cd\2\2\u0401")
        buf.write("\u0402\7\27\2\2\u0402\u0404\7\177\2\2\u0403\u0400\3\2")
        buf.write("\2\2\u0403\u0404\3\2\2\2\u0404\u0406\3\2\2\2\u0405\u0407")
        buf.write("\7\u01dd\2\2\u0406\u0405\3\2\2\2\u0406\u0407\3\2\2\2\u0407")
        buf.write("O\3\2\2\2\u0408\u0409\t\t\2\2\u0409Q\3\2\2\2\u040a\u040b")
        buf.write("\7\5\2\2\u040b\u040c\7\u00b0\2\2\u040c\u042e\5\u0164\u00b3")
        buf.write("\2\u040d\u040e\7\u00a7\2\2\u040e\u040f\7\u01da\2\2\u040f")
        buf.write("\u0410\7\u0140\2\2\u0410\u0411\7\u01c9\2\2\u0411\u0412")
        buf.write("\t\n\2\2\u0412\u042f\7\u01db\2\2\u0413\u0414\7\3\2\2\u0414")
        buf.write("\u042f\5\u00bc_\2\u0415\u0416\7:\2\2\u0416\u0417\7 \2")
        buf.write("\2\u0417\u042f\5\u0180\u00c1\2\u0418\u0419\7\u00cd\2\2")
        buf.write("\u0419\u041a\7\27\2\2\u041a\u041b\7\3\2\2\u041b\u041c")
        buf.write("\7 \2\2\u041c\u041d\5\u0180\u00c1\2\u041d\u041e\7L\2\2")
        buf.write("\u041e\u041f\7d\2\2\u041f\u0420\7\u01da\2\2\u0420\u0421")
        buf.write("\5\u016e\u00b8\2\u0421\u0422\7\u01db\2\2\u0422\u0423\7")
        buf.write("\u0092\2\2\u0423\u0424\5\u0164\u00b3\2\u0424\u0425\7\u01da")
        buf.write("\2\2\u0425\u0426\5\u016e\u00b8\2\u0426\u0427\7\u01db\2")
        buf.write("\2\u0427\u042f\3\2\2\2\u0428\u0429\7\27\2\2\u0429\u042a")
        buf.write("\7 \2\2\u042a\u042f\5\u0180\u00c1\2\u042b\u042c\7\5\2")
        buf.write("\2\u042c\u042d\7\35\2\2\u042d\u042f\5\u00ba^\2\u042e\u040d")
        buf.write("\3\2\2\2\u042e\u0413\3\2\2\2\u042e\u0415\3\2\2\2\u042e")
        buf.write("\u0418\3\2\2\2\u042e\u0428\3\2\2\2\u042e\u042b\3\2\2\2")
        buf.write("\u042f\u0431\3\2\2\2\u0430\u0432\7\u01dd\2\2\u0431\u0430")
        buf.write("\3\2\2\2\u0431\u0432\3\2\2\2\u0432S\3\2\2\2\u0433\u0434")
        buf.write("\7\5\2\2\u0434\u0437\7.\2\2\u0435\u0438\5\u0180\u00c1")
        buf.write("\2\u0436\u0438\7(\2\2\u0437\u0435\3\2\2\2\u0437\u0436")
        buf.write("\3\2\2\2\u0438\u0445\3\2\2\2\u0439\u043a\7\u014e\2\2\u043a")
        buf.write("\u043b\7\u0150\2\2\u043b\u043c\7\u01c9\2\2\u043c\u0446")
        buf.write("\5\u0180\u00c1\2\u043d\u043e\7\34\2\2\u043e\u0446\5\u0180")
        buf.write("\u00c1\2\u043f\u0440\7\u00a7\2\2\u0440\u0443\5V,\2\u0441")
        buf.write("\u0442\7\u00cd\2\2\u0442\u0444\5\u0080A\2\u0443\u0441")
        buf.write("\3\2\2\2\u0443\u0444\3\2\2\2\u0444\u0446\3\2\2\2\u0445")
        buf.write("\u0439\3\2\2\2\u0445\u043d\3\2\2\2\u0445\u043f\3\2\2\2")
        buf.write("\u0446\u0448\3\2\2\2\u0447\u0449\7\u01dd\2\2\u0448\u0447")
        buf.write("\3\2\2\2\u0448\u0449\3\2\2\2\u0449U\3\2\2\2\u044a\u0461")
        buf.write("\5X-\2\u044b\u0461\5Z.\2\u044c\u0461\5^\60\2\u044d\u0461")
        buf.write("\5`\61\2\u044e\u0461\5b\62\2\u044f\u0461\5d\63\2\u0450")
        buf.write("\u0461\5f\64\2\u0451\u0461\5h\65\2\u0452\u0461\5j\66\2")
        buf.write("\u0453\u0461\5l\67\2\u0454\u0461\5n8\2\u0455\u0456\7\u011a")
        buf.write("\2\2\u0456\u0461\5\u015a\u00ae\2\u0457\u0461\5p9\2\u0458")
        buf.write("\u0461\5r:\2\u0459\u0461\5t;\2\u045a\u0461\5v<\2\u045b")
        buf.write("\u0461\5x=\2\u045c\u0461\5z>\2\u045d\u0461\5|?\2\u045e")
        buf.write("\u0461\5~@\2\u045f\u0461\5\u0080A\2\u0460\u044a\3\2\2")
        buf.write("\2\u0460\u044b\3\2\2\2\u0460\u044c\3\2\2\2\u0460\u044d")
        buf.write("\3\2\2\2\u0460\u044e\3\2\2\2\u0460\u044f\3\2\2\2\u0460")
        buf.write("\u0450\3\2\2\2\u0460\u0451\3\2\2\2\u0460\u0452\3\2\2\2")
        buf.write("\u0460\u0453\3\2\2\2\u0460\u0454\3\2\2\2\u0460\u0455\3")
        buf.write("\2\2\2\u0460\u0457\3\2\2\2\u0460\u0458\3\2\2\2\u0460\u0459")
        buf.write("\3\2\2\2\u0460\u045a\3\2\2\2\u0460\u045b\3\2\2\2\u0460")
        buf.write("\u045c\3\2\2\2\u0460\u045d\3\2\2\2\u0460\u045e\3\2\2\2")
        buf.write("\u0460\u045f\3\2\2\2\u0461W\3\2\2\2\u0462\u0463\7\u00dd")
        buf.write("\2\2\u0463\u0474\5\u0172\u00ba\2\u0464\u0465\7\u00de\2")
        buf.write("\2\u0465\u0474\7w\2\2\u0466\u046b\7y\2\2\u0467\u0468\7")
        buf.write("\u012f\2\2\u0468\u0469\7\u01c9\2\2\u0469\u046c\7y\2\2")
        buf.write("\u046a\u046c\7w\2\2\u046b\u0467\3\2\2\2\u046b\u046a\3")
        buf.write("\2\2\2\u046c\u0474\3\2\2\2\u046d\u046e\7\u00df\2\2\u046e")
        buf.write("\u0474\5\u0172\u00ba\2\u046f\u0470\7\u00e0\2\2\u0470\u0474")
        buf.write("\5\u0172\u00ba\2\u0471\u0472\7\u00e1\2\2\u0472\u0474\t")
        buf.write("\13\2\2\u0473\u0462\3\2\2\2\u0473\u0464\3\2\2\2\u0473")
        buf.write("\u0466\3\2\2\2\u0473\u046d\3\2\2\2\u0473\u046f\3\2\2\2")
        buf.write("\u0473\u0471\3\2\2\2\u0474Y\3\2\2\2\u0475\u0476\7\u00ec")
        buf.write("\2\2\u0476\u0486\7\u01c9\2\2\u0477\u0487\7w\2\2\u0478")
        buf.write("\u0483\7y\2\2\u0479\u047e\5\\/\2\u047a\u047b\7\u01dc\2")
        buf.write("\2\u047b\u047d\5\\/\2\u047c\u047a\3\2\2\2\u047d\u0480")
        buf.write("\3\2\2\2\u047e\u047c\3\2\2\2\u047e\u047f\3\2\2\2\u047f")
        buf.write("\u0482\3\2\2\2\u0480\u047e\3\2\2\2\u0481\u0479\3\2\2\2")
        buf.write("\u0482\u0485\3\2\2\2\u0483\u0481\3\2\2\2\u0483\u0484\3")
        buf.write("\2\2\2\u0484\u0487\3\2\2\2\u0485\u0483\3\2\2\2\u0486\u0477")
        buf.write("\3\2\2\2\u0486\u0478\3\2\2\2\u0487[\3\2\2\2\u0488\u0489")
        buf.write("\7\u00dc\2\2\u0489\u048a\7\u01c9\2\2\u048a\u048f\5\u0172")
        buf.write("\u00ba\2\u048b\u048c\7\u00eb\2\2\u048c\u048d\7\u01c9\2")
        buf.write("\2\u048d\u048f\t\f\2\2\u048e\u0488\3\2\2\2\u048e\u048b")
        buf.write("\3\2\2\2\u048f]\3\2\2\2\u0490\u0491\7!\2\2\u0491\u0492")
        buf.write("\7\u01c9\2\2\u0492\u0493\t\6\2\2\u0493_\3\2\2\2\u0494")
        buf.write("\u0495\7\u00f9\2\2\u0495\u0499\5\u0172\u00ba\2\u0496\u0497")
        buf.write("\7\u00fa\2\2\u0497\u0499\t\r\2\2\u0498\u0494\3\2\2\2\u0498")
        buf.write("\u0496\3\2\2\2\u0499a\3\2\2\2\u049a\u049b\7\u0102\2\2")
        buf.write("\u049b\u049c\5\u0172\u00ba\2\u049cc\3\2\2\2\u049d\u049e")
        buf.write("\7\u0112\2\2\u049e\u049f\5\u0172\u00ba\2\u049fe\3\2\2")
        buf.write("\2\u04a0\u04a1\t\16\2\2\u04a1g\3\2\2\2\u04a2\u04a3\t\17")
        buf.write("\2\2\u04a3i\3\2\2\2\u04a4\u04a5\t\20\2\2\u04a5k\3\2\2")
        buf.write("\2\u04a6\u04a7\7\u0108\2\2\u04a7\u04a8\7\u01c9\2\2\u04a8")
        buf.write("\u04a9\t\21\2\2\u04a9m\3\2\2\2\u04aa\u04ab\7\u0104\2\2")
        buf.write("\u04ab\u04c4\5\u0172\u00ba\2\u04ac\u04ad\7\u01aa\2\2\u04ad")
        buf.write("\u04c4\5\u0172\u00ba\2\u04ae\u04af\7\u0106\2\2\u04af\u04b2")
        buf.write("\7\u01c9\2\2\u04b0\u04b3\5\u0180\u00c1\2\u04b1\u04b3\7")
        buf.write("\u01c5\2\2\u04b2\u04b0\3\2\2\2\u04b2\u04b1\3\2\2\2\u04b3")
        buf.write("\u04c4\3\2\2\2\u04b4\u04b5\7\u0105\2\2\u04b5\u04b8\7\u01c9")
        buf.write("\2\2\u04b6\u04b9\5\u0180\u00c1\2\u04b7\u04b9\7\u01c5\2")
        buf.write("\2\u04b8\u04b6\3\2\2\2\u04b8\u04b7\3\2\2\2\u04b9\u04c4")
        buf.write("\3\2\2\2\u04ba\u04bb\7\u0151\2\2\u04bb\u04bc\7\u01c9\2")
        buf.write("\2\u04bc\u04c4\t\13\2\2\u04bd\u04be\7\u01a9\2\2\u04be")
        buf.write("\u04bf\7\u01c9\2\2\u04bf\u04c4\t\13\2\2\u04c0\u04c1\7")
        buf.write("\u01ac\2\2\u04c1\u04c2\7\u01c9\2\2\u04c2\u04c4\7\u01c3")
        buf.write("\2\2\u04c3\u04aa\3\2\2\2\u04c3\u04ac\3\2\2\2\u04c3\u04ae")
        buf.write("\3\2\2\2\u04c3\u04b4\3\2\2\2\u04c3\u04ba\3\2\2\2\u04c3")
        buf.write("\u04bd\3\2\2\2\u04c3\u04c0\3\2\2\2\u04c4o\3\2\2\2\u04c5")
        buf.write("\u04c6\7\5\2\2\u04c6\u04c7\7.\2\2\u04c7\u04c8\7\u00a7")
        buf.write("\2\2\u04c8\u04c9\7\u0128\2\2\u04c9q\3\2\2\2\u04ca\u04cb")
        buf.write("\7\u014d\2\2\u04cb\u04cc\t\13\2\2\u04ccs\3\2\2\2\u04cd")
        buf.write("\u04ce\7\u0166\2\2\u04ce\u04cf\t\22\2\2\u04cfu\3\2\2\2")
        buf.write("\u04d0\u04d1\7\u0178\2\2\u04d1\u04d7\t\23\2\2\u04d2\u04d3")
        buf.write("\7\u01a8\2\2\u04d3\u04d7\5\u0172\u00ba\2\u04d4\u04d5\7")
        buf.write("\u0165\2\2\u04d5\u04d7\t\24\2\2\u04d6\u04d0\3\2\2\2\u04d6")
        buf.write("\u04d2\3\2\2\2\u04d6\u04d4\3\2\2\2\u04d7w\3\2\2\2\u04d8")
        buf.write("\u04df\7\u0111\2\2\u04d9\u04df\7\u010e\2\2\u04da\u04df")
        buf.write("\7\u0152\2\2\u04db\u04df\7\u0113\2\2\u04dc\u04dd\7\u012a")
        buf.write("\2\2\u04dd\u04df\5\u0172\u00ba\2\u04de\u04d8\3\2\2\2\u04de")
        buf.write("\u04d9\3\2\2\2\u04de\u04da\3\2\2\2\u04de\u04db\3\2\2\2")
        buf.write("\u04de\u04dc\3\2\2\2\u04dfy\3\2\2\2\u04e0\u04e1\7\u00d3")
        buf.write("\2\2\u04e1\u04e6\5\u0172\u00ba\2\u04e2\u04e3\7\u0174\2")
        buf.write("\2\u04e3\u04e6\t\13\2\2\u04e4\u04e6\t\13\2\2\u04e5\u04e0")
        buf.write("\3\2\2\2\u04e5\u04e2\3\2\2\2\u04e5\u04e4\3\2\2\2\u04e6")
        buf.write("{\3\2\2\2\u04e7\u04e8\7\u00d5\2\2\u04e8\u04fd\5\u0172")
        buf.write("\u00ba\2\u04e9\u04ea\7\u00d4\2\2\u04ea\u04fd\5\u0172\u00ba")
        buf.write("\2\u04eb\u04ec\7\u00d6\2\2\u04ec\u04fd\5\u0172\u00ba\2")
        buf.write("\u04ed\u04ee\7\u00d7\2\2\u04ee\u04fd\5\u0172\u00ba\2\u04ef")
        buf.write("\u04f0\7\u00d9\2\2\u04f0\u04fd\5\u0172\u00ba\2\u04f1\u04f2")
        buf.write("\7\u00f0\2\2\u04f2\u04f3\7\u01c9\2\2\u04f3\u04fd\7\u01c3")
        buf.write("\2\2\u04f4\u04f5\7\u00f2\2\2\u04f5\u04fd\5\u0172\u00ba")
        buf.write("\2\u04f6\u04f7\7\u015b\2\2\u04f7\u04fd\5\u0172\u00ba\2")
        buf.write("\u04f8\u04f9\7\u0170\2\2\u04f9\u04fd\5\u0172\u00ba\2\u04fa")
        buf.write("\u04fb\7\u0179\2\2\u04fb\u04fd\5\u0172\u00ba\2\u04fc\u04e7")
        buf.write("\3\2\2\2\u04fc\u04e9\3\2\2\2\u04fc\u04eb\3\2\2\2\u04fc")
        buf.write("\u04ed\3\2\2\2\u04fc\u04ef\3\2\2\2\u04fc\u04f1\3\2\2\2")
        buf.write("\u04fc\u04f4\3\2\2\2\u04fc\u04f6\3\2\2\2\u04fc\u04f8\3")
        buf.write("\2\2\2\u04fc\u04fa\3\2\2\2\u04fd}\3\2\2\2\u04fe\u04ff")
        buf.write("\7\u01a1\2\2\u04ff\u0500\7\u01c9\2\2\u0500\u0501\7\u01c3")
        buf.write("\2\2\u0501\u0502\t\25\2\2\u0502\177\3\2\2\2\u0503\u0504")
        buf.write("\7\u009b\2\2\u0504\u0505\7\u00d1\2\2\u0505\u050a\7\u01c3")
        buf.write("\2\2\u0506\u0507\7\u009b\2\2\u0507\u050a\7\u012d\2\2\u0508")
        buf.write("\u050a\7\u0158\2\2\u0509\u0503\3\2\2\2\u0509\u0506\3\2")
        buf.write("\2\2\u0509\u0508\3\2\2\2\u050a\u0081\3\2\2\2\u050b\u050c")
        buf.write("\7:\2\2\u050c\u050f\7\\\2\2\u050d\u050e\7Z\2\2\u050e\u0510")
        buf.write("\7B\2\2\u050f\u050d\3\2\2\2\u050f\u0510\3\2\2\2\u0510")
        buf.write("\u0511\3\2\2\2\u0511\u0514\5\u0180\u00c1\2\u0512\u0513")
        buf.write("\7y\2\2\u0513\u0515\5\u0164\u00b3\2\u0514\u0512\3\2\2")
        buf.write("\2\u0514\u0515\3\2\2\2\u0515\u0517\3\2\2\2\u0516\u0518")
        buf.write("\7\u01dd\2\2\u0517\u0516\3\2\2\2\u0517\u0518\3\2\2\2\u0518")
        buf.write("\u0083\3\2\2\2\u0519\u051a\7:\2\2\u051a\u051d\7\u008c")
        buf.write("\2\2\u051b\u051c\7Z\2\2\u051c\u051e\7B\2\2\u051d\u051b")
        buf.write("\3\2\2\2\u051d\u051e\3\2\2\2\u051e\u051f\3\2\2\2\u051f")
        buf.write("\u0521\5\u0168\u00b5\2\u0520\u0522\7\u01dd\2\2\u0521\u0520")
        buf.write("\3\2\2\2\u0521\u0522\3\2\2\2\u0522\u0085\3\2\2\2\u0523")
        buf.write("\u0524\7:\2\2\u0524\u0528\7\u00ac\2\2\u0525\u0526\5\u0164")
        buf.write("\u00b3\2\u0526\u0527\7\u01d5\2\2\u0527\u0529\3\2\2\2\u0528")
        buf.write("\u0525\3\2\2\2\u0528\u0529\3\2\2\2\u0529\u052a\3\2\2\2")
        buf.write("\u052a\u052c\5\u0180\u00c1\2\u052b\u052d\7\u01dd\2\2\u052c")
        buf.write("\u052b\3\2\2\2\u052c\u052d\3\2\2\2\u052d\u0087\3\2\2\2")
        buf.write("\u052e\u052f\7:\2\2\u052f\u0532\7\u00b0\2\2\u0530\u0531")
        buf.write("\7Z\2\2\u0531\u0533\7B\2\2\u0532\u0530\3\2\2\2\u0532\u0533")
        buf.write("\3\2\2\2\u0533\u0534\3\2\2\2\u0534\u0536\5\u0164\u00b3")
        buf.write("\2\u0535\u0537\7\u01dd\2\2\u0536\u0535\3\2\2\2\u0536\u0537")
        buf.write("\3\2\2\2\u0537\u0089\3\2\2\2\u0538\u0539\7:\2\2\u0539")
        buf.write("\u053c\7.\2\2\u053a\u053b\7Z\2\2\u053b\u053d\7B\2\2\u053c")
        buf.write("\u053a\3\2\2\2\u053c\u053d\3\2\2\2\u053d\u0540\3\2\2\2")
        buf.write("\u053e\u0541\5\u0180\u00c1\2\u053f\u0541\7(\2\2\u0540")
        buf.write("\u053e\3\2\2\2\u0540\u053f\3\2\2\2\u0541\u0543\3\2\2\2")
        buf.write("\u0542\u0544\7\u01dd\2\2\u0543\u0542\3\2\2\2\u0543\u0544")
        buf.write("\3\2\2\2\u0544\u008b\3\2\2\2\u0545\u0546\7:\2\2\u0546")
        buf.write("\u0549\7\u00ad\2\2\u0547\u0548\7Z\2\2\u0548\u054a\7B\2")
        buf.write("\2\u0549\u0547\3\2\2\2\u0549\u054a\3\2\2\2\u054a\u054b")
        buf.write("\3\2\2\2\u054b\u054d\5\u0166\u00b4\2\u054c\u054e\7\u01dd")
        buf.write("\2\2\u054d\u054c\3\2\2\2\u054d\u054e\3\2\2\2\u054e\u008d")
        buf.write("\3\2\2\2\u054f\u0550\7:\2\2\u0550\u0553\7\u00c8\2\2\u0551")
        buf.write("\u0552\7Z\2\2\u0552\u0554\7B\2\2\u0553\u0551\3\2\2\2\u0553")
        buf.write("\u0554\3\2\2\2\u0554\u0555\3\2\2\2\u0555\u055a\5\u0166")
        buf.write("\u00b4\2\u0556\u0557\7\u01dc\2\2\u0557\u0559\5\u0166\u00b4")
        buf.write("\2\u0558\u0556\3\2\2\2\u0559\u055c\3\2\2\2\u055a\u0558")
        buf.write("\3\2\2\2\u055a\u055b\3\2\2\2\u055b\u055e\3\2\2\2\u055c")
        buf.write("\u055a\3\2\2\2\u055d\u055f\7\u01dd\2\2\u055e\u055d\3\2")
        buf.write("\2\2\u055e\u055f\3\2\2\2\u055f\u008f\3\2\2\2\u0560\u0561")
        buf.write("\7:\2\2\u0561\u0564\7\u00a0\2\2\u0562\u0563\7Z\2\2\u0563")
        buf.write("\u0565\7B\2\2\u0564\u0562\3\2\2\2\u0564\u0565\3\2\2\2")
        buf.write("\u0565\u0566\3\2\2\2\u0566\u0568\5\u0166\u00b4\2\u0567")
        buf.write("\u0569\7\u01dd\2\2\u0568\u0567\3\2\2\2\u0568\u0569\3\2")
        buf.write("\2\2\u0569\u0091\3\2\2\2\u056a\u056b\7:\2\2\u056b\u056e")
        buf.write("\7Q\2\2\u056c\u056d\7Z\2\2\u056d\u056f\7B\2\2\u056e\u056c")
        buf.write("\3\2\2\2\u056e\u056f\3\2\2\2\u056f\u0570\3\2\2\2\u0570")
        buf.write("\u0572\5\u0168\u00b5\2\u0571\u0573\7\u01dd\2\2\u0572\u0571")
        buf.write("\3\2\2\2\u0572\u0573\3\2\2\2\u0573\u0093\3\2\2\2\u0574")
        buf.write("\u0575\7&\2\2\u0575\u0576\7\u01ad\2\2\u0576\u0577\5\u0166")
        buf.write("\u00b4\2\u0577\u0578\7O\2\2\u0578\u0579\5\u019e\u00d0")
        buf.write("\2\u0579\u057a\5\u017a\u00be\2\u057a\u0095\3\2\2\2\u057b")
        buf.write("\u057c\7:\2\2\u057c\u057f\7\u01ad\2\2\u057d\u057e\7Z\2")
        buf.write("\2\u057e\u0580\7B\2\2\u057f\u057d\3\2\2\2\u057f\u0580")
        buf.write("\3\2\2\2\u0580\u0581\3\2\2\2\u0581\u0582\5\u0166\u00b4")
        buf.write("\2\u0582\u0097\3\2\2\2\u0583\u0586\5\u009aN\2\u0584\u0586")
        buf.write("\5\u009cO\2\u0585\u0583\3\2\2\2\u0585\u0584\3\2\2\2\u0586")
        buf.write("\u0099\3\2\2\2\u0587\u0588\7|\2\2\u0588\u0589\7\u01da")
        buf.write("\2\2\u0589\u058a\5\u0180\u00c1\2\u058a\u058b\7\u01dc\2")
        buf.write("\2\u058b\u058c\7\u01c5\2\2\u058c\u058d\7\u01db\2\2\u058d")
        buf.write("\u009b\3\2\2\2\u058e\u058f\7{\2\2\u058f\u0590\7\u01da")
        buf.write("\2\2\u0590\u0591\7\u01c5\2\2\u0591\u0592\7\u01dc\2\2\u0592")
        buf.write("\u0593\7\u01c5\2\2\u0593\u0594\7\u01db\2\2\u0594\u0596")
        buf.write("\7\u01d5\2\2\u0595\u0597\5\u0180\u00c1\2\u0596\u0595\3")
        buf.write("\2\2\2\u0596\u0597\3\2\2\2\u0597\u0598\3\2\2\2\u0598\u059a")
        buf.write("\7\u01d5\2\2\u0599\u059b\5\u0180\u00c1\2\u059a\u0599\3")
        buf.write("\2\2\2\u059a\u059b\3\2\2\2\u059b\u059c\3\2\2\2\u059c\u059d")
        buf.write("\7\u01d5\2\2\u059d\u059e\5\u0180\u00c1\2\u059e\u009d\3")
        buf.write("\2\2\2\u059f\u05a0\7\61\2\2\u05a0\u05a2\7\u01c2\2\2\u05a1")
        buf.write("\u05a3\7\b\2\2\u05a2\u05a1\3\2\2\2\u05a2\u05a3\3\2\2\2")
        buf.write("\u05a3\u05a4\3\2\2\2\u05a4\u05a6\5\u00b8]\2\u05a5\u05a7")
        buf.write("\7\u01dd\2\2\u05a6\u05a5\3\2\2\2\u05a6\u05a7\3\2\2\2\u05a7")
        buf.write("\u05b5\3\2\2\2\u05a8\u05a9\7\61\2\2\u05a9\u05ae\5\u00b6")
        buf.write("\\\2\u05aa\u05ab\7\u01dc\2\2\u05ab\u05ad\5\u00b6\\\2\u05ac")
        buf.write("\u05aa\3\2\2\2\u05ad\u05b0\3\2\2\2\u05ae\u05ac\3\2\2\2")
        buf.write("\u05ae\u05af\3\2\2\2\u05af\u05b2\3\2\2\2\u05b0\u05ae\3")
        buf.write("\2\2\2\u05b1\u05b3\7\u01dd\2\2\u05b2\u05b1\3\2\2\2\u05b2")
        buf.write("\u05b3\3\2\2\2\u05b3\u05b5\3\2\2\2\u05b4\u059f\3\2\2\2")
        buf.write("\u05b4\u05a8\3\2\2\2\u05b5\u009f\3\2\2\2\u05b6\u05b8\7")
        buf.write("\31\2\2\u05b7\u05b9\7\u0124\2\2\u05b8\u05b7\3\2\2\2\u05b8")
        buf.write("\u05b9\3\2\2\2\u05b9\u05ba\3\2\2\2\u05ba\u05bc\5\u0170")
        buf.write("\u00b9\2\u05bb\u05bd\7\u01dd\2\2\u05bc\u05bb\3\2\2\2\u05bc")
        buf.write("\u05bd\3\2\2\2\u05bd\u05d1\3\2\2\2\u05be\u05c0\7\60\2")
        buf.write("\2\u05bf\u05c1\7\u0124\2\2\u05c0\u05bf\3\2\2\2\u05c0\u05c1")
        buf.write("\3\2\2\2\u05c1\u05c2\3\2\2\2\u05c2\u05c4\5\u0170\u00b9")
        buf.write("\2\u05c3\u05c5\7\u01dd\2\2\u05c4\u05c3\3\2\2\2\u05c4\u05c5")
        buf.write("\3\2\2\2\u05c5\u05d1\3\2\2\2\u05c6\u05d1\5\u00c8e\2\u05c7")
        buf.write("\u05d1\5\u00ccg\2\u05c8\u05ca\7z\2\2\u05c9\u05cb\7\u0124")
        buf.write("\2\2\u05ca\u05c9\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u05cc")
        buf.write("\3\2\2\2\u05cc\u05ce\5\u0170\u00b9\2\u05cd\u05cf\7\u01dd")
        buf.write("\2\2\u05ce\u05cd\3\2\2\2\u05ce\u05cf\3\2\2\2\u05cf\u05d1")
        buf.write("\3\2\2\2\u05d0\u05b6\3\2\2\2\u05d0\u05be\3\2\2\2\u05d0")
        buf.write("\u05c6\3\2\2\2\u05d0\u05c7\3\2\2\2\u05d0\u05c8\3\2\2\2")
        buf.write("\u05d1\u00a1\3\2\2\2\u05d2\u05d5\7A\2\2\u05d3\u05d4\7")
        buf.write("\u01c2\2\2\u05d4\u05d6\7\u01c9\2\2\u05d5\u05d3\3\2\2\2")
        buf.write("\u05d5\u05d6\3\2\2\2\u05d6\u05d7\3\2\2\2\u05d7\u05e0\5")
        buf.write("\u0168\u00b5\2\u05d8\u05dd\5\u00a4S\2\u05d9\u05da\7\u01dc")
        buf.write("\2\2\u05da\u05dc\5\u00a4S\2\u05db\u05d9\3\2\2\2\u05dc")
        buf.write("\u05df\3\2\2\2\u05dd\u05db\3\2\2\2\u05dd\u05de\3\2\2\2")
        buf.write("\u05de\u05e1\3\2\2\2\u05df\u05dd\3\2\2\2\u05e0\u05d8\3")
        buf.write("\2\2\2\u05e0\u05e1\3\2\2\2\u05e1\u05e3\3\2\2\2\u05e2\u05e4")
        buf.write("\7\u01dd\2\2\u05e3\u05e2\3\2\2\2\u05e3\u05e4\3\2\2\2\u05e4")
        buf.write("\u05fc\3\2\2\2\u05e5\u05e6\7A\2\2\u05e6\u05e7\7\u01da")
        buf.write("\2\2\u05e7\u05ec\5\u00a6T\2\u05e8\u05e9\7\u01e2\2\2\u05e9")
        buf.write("\u05eb\5\u00a6T\2\u05ea\u05e8\3\2\2\2\u05eb\u05ee\3\2")
        buf.write("\2\2\u05ec\u05ea\3\2\2\2\u05ec\u05ed\3\2\2\2\u05ed\u05ef")
        buf.write("\3\2\2\2\u05ee\u05ec\3\2\2\2\u05ef\u05f6\7\u01db\2\2\u05f0")
        buf.write("\u05f2\7\b\2\2\u05f1\u05f0\3\2\2\2\u05f1\u05f2\3\2\2\2")
        buf.write("\u05f2\u05f3\3\2\2\2\u05f3\u05f4\t\26\2\2\u05f4\u05f5")
        buf.write("\7\u01c9\2\2\u05f5\u05f7\7\u01c5\2\2\u05f6\u05f1\3\2\2")
        buf.write("\2\u05f6\u05f7\3\2\2\2\u05f7\u05f9\3\2\2\2\u05f8\u05fa")
        buf.write("\7\u01dd\2\2\u05f9\u05f8\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa")
        buf.write("\u05fc\3\2\2\2\u05fb\u05d2\3\2\2\2\u05fb\u05e5\3\2\2\2")
        buf.write("\u05fc\u00a3\3\2\2\2\u05fd\u05fe\7\u01c2\2\2\u05fe\u0600")
        buf.write("\7\u01c9\2\2\u05ff\u05fd\3\2\2\2\u05ff\u0600\3\2\2\2\u0600")
        buf.write("\u060a\3\2\2\2\u0601\u0604\5\u00d0i\2\u0602\u0604\5\u0180")
        buf.write("\u00c1\2\u0603\u0601\3\2\2\2\u0603\u0602\3\2\2\2\u0604")
        buf.write("\u0606\3\2\2\2\u0605\u0607\t\27\2\2\u0606\u0605\3\2\2")
        buf.write("\2\u0606\u0607\3\2\2\2\u0607\u060b\3\2\2\2\u0608\u060b")
        buf.write("\7\62\2\2\u0609\u060b\7s\2\2\u060a\u0603\3\2\2\2\u060a")
        buf.write("\u0608\3\2\2\2\u060a\u0609\3\2\2\2\u060b\u00a5\3\2\2\2")
        buf.write("\u060c\u060d\t\3\2\2\u060d\u00a7\3\2\2\2\u060e\u0610\5")
        buf.write("\u00b4[\2\u060f\u0611\7\u01dd\2\2\u0610\u060f\3\2\2\2")
        buf.write("\u0610\u0611\3\2\2\2\u0611\u063f\3\2\2\2\u0612\u061e\7")
        buf.write("S\2\2\u0613\u0615\7\4\2\2\u0614\u0616\7\u016e\2\2\u0615")
        buf.write("\u0614\3\2\2\2\u0615\u0616\3\2\2\2\u0616\u061f\3\2\2\2")
        buf.write("\u0617\u061c\5\u00aaV\2\u0618\u0619\7\u01da\2\2\u0619")
        buf.write("\u061a\5\u016e\u00b8\2\u061a\u061b\7\u01db\2\2\u061b\u061d")
        buf.write("\3\2\2\2\u061c\u0618\3\2\2\2\u061c\u061d\3\2\2\2\u061d")
        buf.write("\u061f\3\2\2\2\u061e\u0613\3\2\2\2\u061e\u0617\3\2\2\2")
        buf.write("\u061f\u0622\3\2\2\2\u0620\u0621\7y\2\2\u0621\u0623\5")
        buf.write("\u0164\u00b3\2\u0622\u0620\3\2\2\2\u0622\u0623\3\2\2\2")
        buf.write("\u0623\u0624\3\2\2\2\u0624\u0625\7\u00b4\2\2\u0625\u0629")
        buf.write("\5\u0180\u00c1\2\u0626\u0627\7\u00cd\2\2\u0627\u0628\7")
        buf.write("S\2\2\u0628\u062a\7\177\2\2\u0629\u0626\3\2\2\2\u0629")
        buf.write("\u062a\3\2\2\2\u062a\u062d\3\2\2\2\u062b\u062c\7\b\2\2")
        buf.write("\u062c\u062e\5\u0180\u00c1\2\u062d\u062b\3\2\2\2\u062d")
        buf.write("\u062e\3\2\2\2\u062e\u0630\3\2\2\2\u062f\u0631\7\u01dd")
        buf.write("\2\2\u0630\u062f\3\2\2\2\u0630\u0631\3\2\2\2\u0631\u063f")
        buf.write("\3\2\2\2\u0632\u0639\7\u0098\2\2\u0633\u0634\7\u01da\2")
        buf.write("\2\u0634\u0635\7\u00cd\2\2\u0635\u0636\7\u00f4\2\2\u0636")
        buf.write("\u0637\7\u01c9\2\2\u0637\u0638\7\u01c2\2\2\u0638\u063a")
        buf.write("\7\u01db\2\2\u0639\u0633\3\2\2\2\u0639\u063a\3\2\2\2\u063a")
        buf.write("\u063c\3\2\2\2\u063b\u063d\7\u01dd\2\2\u063c\u063b\3\2")
        buf.write("\2\2\u063c\u063d\3\2\2\2\u063d\u063f\3\2\2\2\u063e\u060e")
        buf.write("\3\2\2\2\u063e\u0612\3\2\2\2\u063e\u0632\3\2\2\2\u063f")
        buf.write("\u00a9\3\2\2\2\u0640\u065b\7A\2\2\u0641\u0642\7\u00c8")
        buf.write("\2\2\u0642\u065b\5\u0180\u00c1\2\u0643\u0644\7\u019f\2")
        buf.write("\2\u0644\u065b\5\u0180\u00c1\2\u0645\u0647\7\u00f3\2\2")
        buf.write("\u0646\u0648\5\u0180\u00c1\2\u0647\u0646\3\2\2\2\u0647")
        buf.write("\u0648\3\2\2\2\u0648\u065b\3\2\2\2\u0649\u064a\7&\2\2")
        buf.write("\u064a\u065b\t\30\2\2\u064b\u065b\7\u018e\2\2\u064c\u065b")
        buf.write("\7\u012e\2\2\u064d\u065b\7\u00a2\2\2\u064e\u065b\7\u0092")
        buf.write("\2\2\u064f\u065b\7_\2\2\u0650\u0658\7\5\2\2\u0651\u0653")
        buf.write("\7\7\2\2\u0652\u0651\3\2\2\2\u0652\u0653\3\2\2\2\u0653")
        buf.write("\u0656\3\2\2\2\u0654\u0657\5\u0180\u00c1\2\u0655\u0657")
        buf.write("\7.\2\2\u0656\u0654\3\2\2\2\u0656\u0655\3\2\2\2\u0657")
        buf.write("\u0659\3\2\2\2\u0658\u0652\3\2\2\2\u0658\u0659\3\2\2\2")
        buf.write("\u0659\u065b\3\2\2\2\u065a\u0640\3\2\2\2\u065a\u0641\3")
        buf.write("\2\2\2\u065a\u0643\3\2\2\2\u065a\u0645\3\2\2\2\u065a\u0649")
        buf.write("\3\2\2\2\u065a\u064b\3\2\2\2\u065a\u064c\3\2\2\2\u065a")
        buf.write("\u064d\3\2\2\2\u065a\u064e\3\2\2\2\u065a\u064f\3\2\2\2")
        buf.write("\u065a\u0650\3\2\2\2\u065b\u00ab\3\2\2\2\u065c\u065d\7")
        buf.write("\u00a7\2\2\u065d\u0660\7\u01c2\2\2\u065e\u065f\7\u01d5")
        buf.write("\2\2\u065f\u0661\5\u0180\u00c1\2\u0660\u065e\3\2\2\2\u0660")
        buf.write("\u0661\3\2\2\2\u0661\u0662\3\2\2\2\u0662\u0663\7\u01c9")
        buf.write("\2\2\u0663\u0665\5\u00d2j\2\u0664\u0666\7\u01dd\2\2\u0665")
        buf.write("\u0664\3\2\2\2\u0665\u0666\3\2\2\2\u0666\u0684\3\2\2\2")
        buf.write("\u0667\u0668\7\u00a7\2\2\u0668\u0669\7\u01c2\2\2\u0669")
        buf.write("\u066a\5\u0186\u00c4\2\u066a\u066c\5\u00d2j\2\u066b\u066d")
        buf.write("\7\u01dd\2\2\u066c\u066b\3\2\2\2\u066c\u066d\3\2\2\2\u066d")
        buf.write("\u0684\3\2\2\2\u066e\u066f\7\u00a7\2\2\u066f\u0670\7\u01c2")
        buf.write("\2\2\u0670\u0671\7\u01c9\2\2\u0671\u0672\7-\2\2\u0672")
        buf.write("\u067d\5\u00caf\2\u0673\u067b\7J\2\2\u0674\u0675\7\u008f")
        buf.write("\2\2\u0675\u067c\7\u015f\2\2\u0676\u0679\7\u00c1\2\2\u0677")
        buf.write("\u0678\7v\2\2\u0678\u067a\5\u016e\u00b8\2\u0679\u0677")
        buf.write("\3\2\2\2\u0679\u067a\3\2\2\2\u067a\u067c\3\2\2\2\u067b")
        buf.write("\u0674\3\2\2\2\u067b\u0676\3\2\2\2\u067c\u067e\3\2\2\2")
        buf.write("\u067d\u0673\3\2\2\2\u067d\u067e\3\2\2\2\u067e\u0680\3")
        buf.write("\2\2\2\u067f\u0681\7\u01dd\2\2\u0680\u067f\3\2\2\2\u0680")
        buf.write("\u0681\3\2\2\2\u0681\u0684\3\2\2\2\u0682\u0684\5\u00ce")
        buf.write("h\2\u0683\u065c\3\2\2\2\u0683\u0667\3\2\2\2\u0683\u066e")
        buf.write("\3\2\2\2\u0683\u0682\3\2\2\2\u0684\u00ad\3\2\2\2\u0685")
        buf.write("\u0686\7\f\2\2\u0686\u0687\78\2\2\u0687\u068a\t\31\2\2")
        buf.write("\u0688\u068b\5\u0180\u00c1\2\u0689\u068b\7\u01c2\2\2\u068a")
        buf.write("\u0688\3\2\2\2\u068a\u0689\3\2\2\2\u068a\u068b\3\2\2\2")
        buf.write("\u068b\u068d\3\2\2\2\u068c\u068e\7\u01dd\2\2\u068d\u068c")
        buf.write("\3\2\2\2\u068d\u068e\3\2\2\2\u068e\u06d3\3\2\2\2\u068f")
        buf.write("\u0690\7\f\2\2\u0690\u069a\t\31\2\2\u0691\u0694\5\u0180")
        buf.write("\u00c1\2\u0692\u0694\7\u01c2\2\2\u0693\u0691\3\2\2\2\u0693")
        buf.write("\u0692\3\2\2\2\u0694\u0698\3\2\2\2\u0695\u0696\7\u00cd")
        buf.write("\2\2\u0696\u0697\7\u0143\2\2\u0697\u0699\7\u01c5\2\2\u0698")
        buf.write("\u0695\3\2\2\2\u0698\u0699\3\2\2\2\u0699\u069b\3\2\2\2")
        buf.write("\u069a\u0693\3\2\2\2\u069a\u069b\3\2\2\2\u069b\u069d\3")
        buf.write("\2\2\2\u069c\u069e\7\u01dd\2\2\u069d\u069c\3\2\2\2\u069d")
        buf.write("\u069e\3\2\2\2\u069e\u06d3\3\2\2\2\u069f\u06a0\7\36\2")
        buf.write("\2\u06a0\u06ad\t\31\2\2\u06a1\u06a4\5\u0180\u00c1\2\u06a2")
        buf.write("\u06a4\7\u01c2\2\2\u06a3\u06a1\3\2\2\2\u06a3\u06a2\3\2")
        buf.write("\2\2\u06a4\u06ab\3\2\2\2\u06a5\u06a6\7\u00cd\2\2\u06a6")
        buf.write("\u06a7\7\u01da\2\2\u06a7\u06a8\7\u0108\2\2\u06a8\u06a9")
        buf.write("\7\u01c9\2\2\u06a9\u06aa\t\13\2\2\u06aa\u06ac\7\u01db")
        buf.write("\2\2\u06ab\u06a5\3\2\2\2\u06ab\u06ac\3\2\2\2\u06ac\u06ae")
        buf.write("\3\2\2\2\u06ad\u06a3\3\2\2\2\u06ad\u06ae\3\2\2\2\u06ae")
        buf.write("\u06b0\3\2\2\2\u06af\u06b1\7\u01dd\2\2\u06b0\u06af\3\2")
        buf.write("\2\2\u06b0\u06b1\3\2\2\2\u06b1\u06d3\3\2\2\2\u06b2\u06b4")
        buf.write("\7\36\2\2\u06b3\u06b5\7\u01b8\2\2\u06b4\u06b3\3\2\2\2")
        buf.write("\u06b4\u06b5\3\2\2\2\u06b5\u06b7\3\2\2\2\u06b6\u06b8\7")
        buf.write("\u01dd\2\2\u06b7\u06b6\3\2\2\2\u06b7\u06b8\3\2\2\2\u06b8")
        buf.write("\u06d3\3\2\2\2\u06b9\u06ba\7\u009b\2\2\u06ba\u06bd\t\31")
        buf.write("\2\2\u06bb\u06be\5\u0180\u00c1\2\u06bc\u06be\7\u01c2\2")
        buf.write("\2\u06bd\u06bb\3\2\2\2\u06bd\u06bc\3\2\2\2\u06bd\u06be")
        buf.write("\3\2\2\2\u06be\u06c0\3\2\2\2\u06bf\u06c1\7\u01dd\2\2\u06c0")
        buf.write("\u06bf\3\2\2\2\u06c0\u06c1\3\2\2\2\u06c1\u06d3\3\2\2\2")
        buf.write("\u06c2\u06c4\7\u009b\2\2\u06c3\u06c5\7\u01b8\2\2\u06c4")
        buf.write("\u06c3\3\2\2\2\u06c4\u06c5\3\2\2\2\u06c5\u06c7\3\2\2\2")
        buf.write("\u06c6\u06c8\7\u01dd\2\2\u06c7\u06c6\3\2\2\2\u06c7\u06c8")
        buf.write("\3\2\2\2\u06c8\u06d3\3\2\2\2\u06c9\u06ca\7\u009f\2\2\u06ca")
        buf.write("\u06cd\t\31\2\2\u06cb\u06ce\5\u0180\u00c1\2\u06cc\u06ce")
        buf.write("\7\u01c2\2\2\u06cd\u06cb\3\2\2\2\u06cd\u06cc\3\2\2\2\u06cd")
        buf.write("\u06ce\3\2\2\2\u06ce\u06d0\3\2\2\2\u06cf\u06d1\7\u01dd")
        buf.write("\2\2\u06d0\u06cf\3\2\2\2\u06d0\u06d1\3\2\2\2\u06d1\u06d3")
        buf.write("\3\2\2\2\u06d2\u0685\3\2\2\2\u06d2\u068f\3\2\2\2\u06d2")
        buf.write("\u069f\3\2\2\2\u06d2\u06b2\3\2\2\2\u06d2\u06b9\3\2\2\2")
        buf.write("\u06d2\u06c2\3\2\2\2\u06d2\u06c9\3\2\2\2\u06d3\u00af\3")
        buf.write("\2\2\2\u06d4\u06d6\7\u0125\2\2\u06d5\u06d7\7\u01c3\2\2")
        buf.write("\u06d6\u06d5\3\2\2\2\u06d6\u06d7\3\2\2\2\u06d7\u00b1\3")
        buf.write("\2\2\2\u06d8\u06d9\7\u00c3\2\2\u06d9\u06db\5\u0180\u00c1")
        buf.write("\2\u06da\u06dc\7\u01dd\2\2\u06db\u06da\3\2\2\2\u06db\u06dc")
        buf.write("\3\2\2\2\u06dc\u00b3\3\2\2\2\u06dd\u06de\7A\2\2\u06de")
        buf.write("\u06df\7\b\2\2\u06df\u06e0\t\32\2\2\u06e0\u00b5\3\2\2")
        buf.write("\2\u06e1\u06e3\7\u01c2\2\2\u06e2\u06e4\7\b\2\2\u06e3\u06e2")
        buf.write("\3\2\2\2\u06e3\u06e4\3\2\2\2\u06e4\u06e5\3\2\2\2\u06e5")
        buf.write("\u06e8\5\u019e\u00d0\2\u06e6\u06e7\7\u01c9\2\2\u06e7\u06e9")
        buf.write("\5\u00d2j\2\u06e8\u06e6\3\2\2\2\u06e8\u06e9\3\2\2\2\u06e9")
        buf.write("\u00b7\3\2\2\2\u06ea\u06eb\7\u00b0\2\2\u06eb\u06ec\7\u01da")
        buf.write("\2\2\u06ec\u06ed\5\u00ba^\2\u06ed\u06ee\7\u01db\2\2\u06ee")
        buf.write("\u00b9\3\2\2\2\u06ef\u06f6\5\u00bc_\2\u06f0\u06f2\7\u01dc")
        buf.write("\2\2\u06f1\u06f0\3\2\2\2\u06f1\u06f2\3\2\2\2\u06f2\u06f3")
        buf.write("\3\2\2\2\u06f3\u06f5\5\u00bc_\2\u06f4\u06f1\3\2\2\2\u06f5")
        buf.write("\u06f8\3\2\2\2\u06f6\u06f4\3\2\2\2\u06f6\u06f7\3\2\2\2")
        buf.write("\u06f7\u00bb\3\2\2\2\u06f8\u06f6\3\2\2\2\u06f9\u06fc\5")
        buf.write("\u00be`\2\u06fa\u06fc\5\u00c2b\2\u06fb\u06f9\3\2\2\2\u06fb")
        buf.write("\u06fa\3\2\2\2\u06fc\u00bd\3\2\2\2\u06fd\u0701\5\u0180")
        buf.write("\u00c1\2\u06fe\u0702\5\u019e\u00d0\2\u06ff\u0700\7\b\2")
        buf.write("\2\u0700\u0702\5\u00d2j\2\u0701\u06fe\3\2\2\2\u0701\u06ff")
        buf.write("\3\2\2\2\u0702\u0705\3\2\2\2\u0703\u0704\7\34\2\2\u0704")
        buf.write("\u0706\5\u0180\u00c1\2\u0705\u0703\3\2\2\2\u0705\u0706")
        buf.write("\3\2\2\2\u0706\u0708\3\2\2\2\u0707\u0709\5\u0176\u00bc")
        buf.write("\2\u0708\u0707\3\2\2\2\u0708\u0709\3\2\2\2\u0709\u0721")
        buf.write("\3\2\2\2\u070a\u070b\7 \2\2\u070b\u070d\5\u0180\u00c1")
        buf.write("\2\u070c\u070a\3\2\2\2\u070c\u070d\3\2\2\2\u070d\u070e")
        buf.write("\3\2\2\2\u070e\u070f\7\62\2\2\u070f\u0712\5\u00d8m\2\u0710")
        buf.write("\u0711\7\u00cd\2\2\u0711\u0713\7\u00c5\2\2\u0712\u0710")
        buf.write("\3\2\2\2\u0712\u0713\3\2\2\2\u0713\u0722\3\2\2\2\u0714")
        buf.write("\u071a\7V\2\2\u0715\u0716\7\u01da\2\2\u0716\u0717\7\u01c3")
        buf.write("\2\2\u0717\u0718\7\u01dc\2\2\u0718\u0719\7\u01c3\2\2\u0719")
        buf.write("\u071b\7\u01db\2\2\u071a\u0715\3\2\2\2\u071a\u071b\3\2")
        buf.write("\2\2\u071b\u071f\3\2\2\2\u071c\u071d\7r\2\2\u071d\u071e")
        buf.write("\7J\2\2\u071e\u0720\7\u0093\2\2\u071f\u071c\3\2\2\2\u071f")
        buf.write("\u0720\3\2\2\2\u0720\u0722\3\2\2\2\u0721\u070c\3\2\2\2")
        buf.write("\u0721\u0714\3\2\2\2\u0721\u0722\3\2\2\2\u0722\u0724\3")
        buf.write("\2\2\2\u0723\u0725\7\u009d\2\2\u0724\u0723\3\2\2\2\u0724")
        buf.write("\u0725\3\2\2\2\u0725\u0729\3\2\2\2\u0726\u0728\5\u00c0")
        buf.write("a\2\u0727\u0726\3\2\2\2\u0728\u072b\3\2\2\2\u0729\u0727")
        buf.write("\3\2\2\2\u0729\u072a\3\2\2\2\u072a\u00bf\3\2\2\2\u072b")
        buf.write("\u0729\3\2\2\2\u072c\u072d\7 \2\2\u072d\u072f\5\u0180")
        buf.write("\u00c1\2\u072e\u072c\3\2\2\2\u072e\u072f\3\2\2\2\u072f")
        buf.write("\u0731\3\2\2\2\u0730\u0732\5\u0176\u00bc\2\u0731\u0730")
        buf.write("\3\2\2\2\u0731\u0732\3\2\2\2\u0732\u0748\3\2\2\2\u0733")
        buf.write("\u0734\7\u0089\2\2\u0734\u0737\7d\2\2\u0735\u0737\7\u00bf")
        buf.write("\2\2\u0736\u0733\3\2\2\2\u0736\u0735\3\2\2\2\u0737\u0739")
        buf.write("\3\2\2\2\u0738\u073a\5\u0174\u00bb\2\u0739\u0738\3\2\2")
        buf.write("\2\u0739\u073a\3\2\2\2\u073a\u073c\3\2\2\2\u073b\u073d")
        buf.write("\5\u00c4c\2\u073c\u073b\3\2\2\2\u073c\u073d\3\2\2\2\u073d")
        buf.write("\u0749\3\2\2\2\u073e\u0742\7\27\2\2\u073f\u0740\7r\2\2")
        buf.write("\u0740\u0741\7J\2\2\u0741\u0743\7\u0093\2\2\u0742\u073f")
        buf.write("\3\2\2\2\u0742\u0743\3\2\2\2\u0743\u0744\3\2\2\2\u0744")
        buf.write("\u0745\7\u01da\2\2\u0745\u0746\5\u00e4s\2\u0746\u0747")
        buf.write("\7\u01db\2\2\u0747\u0749\3\2\2\2\u0748\u0736\3\2\2\2\u0748")
        buf.write("\u073e\3\2\2\2\u0749\u00c1\3\2\2\2\u074a\u074b\7 \2\2")
        buf.write("\u074b\u074d\5\u0180\u00c1\2\u074c\u074a\3\2\2\2\u074c")
        buf.write("\u074d\3\2\2\2\u074d\u0782\3\2\2\2\u074e\u074f\7\u0089")
        buf.write("\2\2\u074f\u0752\7d\2\2\u0750\u0752\7\u00bf\2\2\u0751")
        buf.write("\u074e\3\2\2\2\u0751\u0750\3\2\2\2\u0752\u0754\3\2\2\2")
        buf.write("\u0753\u0755\5\u0174\u00bb\2\u0754\u0753\3\2\2\2\u0754")
        buf.write("\u0755\3\2\2\2\u0755\u0756\3\2\2\2\u0756\u0757\7\u01da")
        buf.write("\2\2\u0757\u0759\5\u0180\u00c1\2\u0758\u075a\t\7\2\2\u0759")
        buf.write("\u0758\3\2\2\2\u0759\u075a\3\2\2\2\u075a\u0762\3\2\2\2")
        buf.write("\u075b\u075c\7\u01dc\2\2\u075c\u075e\5\u0180\u00c1\2\u075d")
        buf.write("\u075f\t\7\2\2\u075e\u075d\3\2\2\2\u075e\u075f\3\2\2\2")
        buf.write("\u075f\u0761\3\2\2\2\u0760\u075b\3\2\2\2\u0761\u0764\3")
        buf.write("\2\2\2\u0762\u0760\3\2\2\2\u0762\u0763\3\2\2\2\u0763\u0765")
        buf.write("\3\2\2\2\u0764\u0762\3\2\2\2\u0765\u0767\7\u01db\2\2\u0766")
        buf.write("\u0768\5\u00c4c\2\u0767\u0766\3\2\2\2\u0767\u0768\3\2")
        buf.write("\2\2\u0768\u076b\3\2\2\2\u0769\u076a\7y\2\2\u076a\u076c")
        buf.write("\5\u0180\u00c1\2\u076b\u0769\3\2\2\2\u076b\u076c\3\2\2")
        buf.write("\2\u076c\u0783\3\2\2\2\u076d\u076e\7L\2\2\u076e\u076f")
        buf.write("\7d\2\2\u076f\u0770\7\u01da\2\2\u0770\u0771\5\u016e\u00b8")
        buf.write("\2\u0771\u0772\7\u01db\2\2\u0772\u0773\7\u0092\2\2\u0773")
        buf.write("\u0774\5\u0164\u00b3\2\u0774\u0775\7\u01da\2\2\u0775\u0776")
        buf.write("\5\u016e\u00b8\2\u0776\u0777\7\u01db\2\2\u0777\u0783\3")
        buf.write("\2\2\2\u0778\u077c\7\27\2\2\u0779\u077a\7r\2\2\u077a\u077b")
        buf.write("\7J\2\2\u077b\u077d\7\u0093\2\2\u077c\u0779\3\2\2\2\u077c")
        buf.write("\u077d\3\2\2\2\u077d\u077e\3\2\2\2\u077e\u077f\7\u01da")
        buf.write("\2\2\u077f\u0780\5\u00e4s\2\u0780\u0781\7\u01db\2\2\u0781")
        buf.write("\u0783\3\2\2\2\u0782\u0751\3\2\2\2\u0782\u076d\3\2\2\2")
        buf.write("\u0782\u0778\3\2\2\2\u0783\u00c3\3\2\2\2\u0784\u0785\7")
        buf.write("\u00cd\2\2\u0785\u0786\7\u01da\2\2\u0786\u078b\5\u00c6")
        buf.write("d\2\u0787\u0788\7\u01dc\2\2\u0788\u078a\5\u00c6d\2\u0789")
        buf.write("\u0787\3\2\2\2\u078a\u078d\3\2\2\2\u078b\u0789\3\2\2\2")
        buf.write("\u078b\u078c\3\2\2\2\u078c\u078e\3\2\2\2\u078d\u078b\3")
        buf.write("\2\2\2\u078e\u078f\7\u01db\2\2\u078f\u00c5\3\2\2\2\u0790")
        buf.write("\u0791\5\u0182\u00c2\2\u0791\u0795\7\u01c9\2\2\u0792\u0796")
        buf.write("\5\u0182\u00c2\2\u0793\u0796\5\u0172\u00ba\2\u0794\u0796")
        buf.write("\7\u01c3\2\2\u0795\u0792\3\2\2\2\u0795\u0793\3\2\2\2\u0795")
        buf.write("\u0794\3\2\2\2\u0796\u00c7\3\2\2\2\u0797\u0798\7\61\2")
        buf.write("\2\u0798\u07b8\5\u0170\u00b9\2\u0799\u07a3\7-\2\2\u079a")
        buf.write("\u07a1\5\u00caf\2\u079b\u079c\7J\2\2\u079c\u079f\7\u00c1")
        buf.write("\2\2\u079d\u079e\7v\2\2\u079e\u07a0\5\u016e\u00b8\2\u079f")
        buf.write("\u079d\3\2\2\2\u079f\u07a0\3\2\2\2\u07a0\u07a2\3\2\2\2")
        buf.write("\u07a1\u079b\3\2\2\2\u07a1\u07a2\3\2\2\2\u07a2\u07a4\3")
        buf.write("\2\2\2\u07a3\u079a\3\2\2\2\u07a3\u07a4\3\2\2\2\u07a4\u07b9")
        buf.write("\3\2\2\2\u07a5\u07a7\7\u0132\2\2\u07a6\u07a5\3\2\2\2\u07a6")
        buf.write("\u07a7\3\2\2\2\u07a7\u07a9\3\2\2\2\u07a8\u07aa\7\u0188")
        buf.write("\2\2\u07a9\u07a8\3\2\2\2\u07a9\u07aa\3\2\2\2\u07aa\u07ab")
        buf.write("\3\2\2\2\u07ab\u07ac\7-\2\2\u07ac\u07ad\7J\2\2\u07ad\u07b6")
        buf.write("\5\66\34\2\u07ae\u07b4\7J\2\2\u07af\u07b0\7\u008f\2\2")
        buf.write("\u07b0\u07b5\7\u015f\2\2\u07b1\u07b5\7\u00c1\2\2\u07b2")
        buf.write("\u07b3\7v\2\2\u07b3\u07b5\5\u016e\u00b8\2\u07b4\u07af")
        buf.write("\3\2\2\2\u07b4\u07b1\3\2\2\2\u07b4\u07b2\3\2\2\2\u07b5")
        buf.write("\u07b7\3\2\2\2\u07b6\u07ae\3\2\2\2\u07b6\u07b7\3\2\2\2")
        buf.write("\u07b7\u07b9\3\2\2\2\u07b8\u0799\3\2\2\2\u07b8\u07a6\3")
        buf.write("\2\2\2\u07b9\u07bb\3\2\2\2\u07ba\u07bc\7\u01dd\2\2\u07bb")
        buf.write("\u07ba\3\2\2\2\u07bb\u07bc\3\2\2\2\u07bc\u00c9\3\2\2\2")
        buf.write("\u07bd\u07bf\t\r\2\2\u07be\u07bd\3\2\2\2\u07be\u07bf\3")
        buf.write("\2\2\2\u07bf\u07c1\3\2\2\2\u07c0\u07c2\t\33\2\2\u07c1")
        buf.write("\u07c0\3\2\2\2\u07c1\u07c2\3\2\2\2\u07c2\u07c4\3\2\2\2")
        buf.write("\u07c3\u07c5\t\34\2\2\u07c4\u07c3\3\2\2\2\u07c4\u07c5")
        buf.write("\3\2\2\2\u07c5\u07c7\3\2\2\2\u07c6\u07c8\t\35\2\2\u07c7")
        buf.write("\u07c6\3\2\2\2\u07c7\u07c8\3\2\2\2\u07c8\u07ca\3\2\2\2")
        buf.write("\u07c9\u07cb\7\u01ae\2\2\u07ca\u07c9\3\2\2\2\u07ca\u07cb")
        buf.write("\3\2\2\2\u07cb\u07cc\3\2\2\2\u07cc\u07cd\7J\2\2\u07cd")
        buf.write("\u07ce\5\66\34\2\u07ce\u00cb\3\2\2\2\u07cf\u07d9\7F\2")
        buf.write("\2\u07d0\u07d7\7n\2\2\u07d1\u07d7\7\u016d\2\2\u07d2\u07d7")
        buf.write("\7\u011b\2\2\u07d3\u07d7\7\u013b\2\2\u07d4\u07d5\t\36")
        buf.write("\2\2\u07d5\u07d7\5\u00d2j\2\u07d6\u07d0\3\2\2\2\u07d6")
        buf.write("\u07d1\3\2\2\2\u07d6\u07d2\3\2\2\2\u07d6\u07d3\3\2\2\2")
        buf.write("\u07d6\u07d4\3\2\2\2\u07d6\u07d7\3\2\2\2\u07d7\u07d8\3")
        buf.write("\2\2\2\u07d8\u07da\7O\2\2\u07d9\u07d6\3\2\2\2\u07d9\u07da")
        buf.write("\3\2\2\2\u07da\u07dc\3\2\2\2\u07db\u07dd\7\u0124\2\2\u07dc")
        buf.write("\u07db\3\2\2\2\u07dc\u07dd\3\2\2\2\u07dd\u07de\3\2\2\2")
        buf.write("\u07de\u07e8\5\u0170\u00b9\2\u07df\u07e0\7a\2\2\u07e0")
        buf.write("\u07e5\7\u01c2\2\2\u07e1\u07e2\7\u01dc\2\2\u07e2\u07e4")
        buf.write("\7\u01c2\2\2\u07e3\u07e1\3\2\2\2\u07e4\u07e7\3\2\2\2\u07e5")
        buf.write("\u07e3\3\2\2\2\u07e5\u07e6\3\2\2\2\u07e6\u07e9\3\2\2\2")
        buf.write("\u07e7\u07e5\3\2\2\2\u07e8\u07df\3\2\2\2\u07e8\u07e9\3")
        buf.write("\2\2\2\u07e9\u07eb\3\2\2\2\u07ea\u07ec\7\u01dd\2\2\u07eb")
        buf.write("\u07ea\3\2\2\2\u07eb\u07ec\3\2\2\2\u07ec\u00cd\3\2\2\2")
        buf.write("\u07ed\u07ee\7\u00a7\2\2\u07ee\u07f2\5\u0180\u00c1\2\u07ef")
        buf.write("\u07f3\5\u0180\u00c1\2\u07f0\u07f3\5\u00d0i\2\u07f1\u07f3")
        buf.write("\5\u0172\u00ba\2\u07f2\u07ef\3\2\2\2\u07f2\u07f0\3\2\2")
        buf.write("\2\u07f2\u07f1\3\2\2\2\u07f3\u07f5\3\2\2\2\u07f4\u07f6")
        buf.write("\7\u01dd\2\2\u07f5\u07f4\3\2\2\2\u07f5\u07f6\3\2\2\2\u07f6")
        buf.write("\u081d\3\2\2\2\u07f7\u07f8\7\u00a7\2\2\u07f8\u07f9\7\u00b7")
        buf.write("\2\2\u07f9\u07fa\7\u0134\2\2\u07fa\u0803\7\u013e\2\2\u07fb")
        buf.write("\u07fc\7\u008f\2\2\u07fc\u0804\7\u01b0\2\2\u07fd\u07fe")
        buf.write("\7\u008f\2\2\u07fe\u0804\7\u00ef\2\2\u07ff\u0800\7\u017c")
        buf.write("\2\2\u0800\u0804\7\u008f\2\2\u0801\u0804\7\u0194\2\2\u0802")
        buf.write("\u0804\7\u018c\2\2\u0803\u07fb\3\2\2\2\u0803\u07fd\3\2")
        buf.write("\2\2\u0803\u07ff\3\2\2\2\u0803\u0801\3\2\2\2\u0803\u0802")
        buf.write("\3\2\2\2\u0804\u0806\3\2\2\2\u0805\u0807\7\u01dd\2\2\u0806")
        buf.write("\u0805\3\2\2\2\u0806\u0807\3\2\2\2\u0807\u081d\3\2\2\2")
        buf.write("\u0808\u0809\7\u00a7\2\2\u0809\u080a\7X\2\2\u080a\u080b")
        buf.write("\5\u0164\u00b3\2\u080b\u080d\5\u0172\u00ba\2\u080c\u080e")
        buf.write("\7\u01dd\2\2\u080d\u080c\3\2\2\2\u080d\u080e\3\2\2\2\u080e")
        buf.write("\u081d\3\2\2\2\u080f\u0810\7\u00a7\2\2\u0810\u0811\7\u00d4")
        buf.write("\2\2\u0811\u081d\5\u0172\u00ba\2\u0812\u0813\7\u00a7\2")
        buf.write("\2\u0813\u0814\7\u0170\2\2\u0814\u081d\5\u0172\u00ba\2")
        buf.write("\u0815\u0816\7\u00a7\2\2\u0816\u0817\7\u00d6\2\2\u0817")
        buf.write("\u081d\5\u0172\u00ba\2\u0818\u0819\7\u00a7\2\2\u0819\u081a")
        buf.write("\7\u00ac\2\2\u081a\u081b\t\37\2\2\u081b\u081d\5\u0172")
        buf.write("\u00ba\2\u081c\u07ed\3\2\2\2\u081c\u07f7\3\2\2\2\u081c")
        buf.write("\u0808\3\2\2\2\u081c\u080f\3\2\2\2\u081c\u0812\3\2\2\2")
        buf.write("\u081c\u0815\3\2\2\2\u081c\u0818\3\2\2\2\u081d\u00cf\3")
        buf.write("\2\2\2\u081e\u0821\5\u017c\u00bf\2\u081f\u0821\7\u01c2")
        buf.write("\2\2\u0820\u081e\3\2\2\2\u0820\u081f\3\2\2\2\u0821\u00d1")
        buf.write("\3\2\2\2\u0822\u0823\bj\1\2\u0823\u0852\7\62\2\2\u0824")
        buf.write("\u0852\7s\2\2\u0825\u0852\7\u01c2\2\2\u0826\u0852\5\u017c")
        buf.write("\u00bf\2\u0827\u0852\5\u0128\u0095\2\u0828\u0829\7\24")
        buf.write("\2\2\u0829\u082b\5\u00d2j\2\u082a\u082c\5\u012a\u0096")
        buf.write("\2\u082b\u082a\3\2\2\2\u082c\u082d\3\2\2\2\u082d\u082b")
        buf.write("\3\2\2\2\u082d\u082e\3\2\2\2\u082e\u0831\3\2\2\2\u082f")
        buf.write("\u0830\7<\2\2\u0830\u0832\5\u00d2j\2\u0831\u082f\3\2\2")
        buf.write("\2\u0831\u0832\3\2\2\2\u0832\u0833\3\2\2\2\u0833\u0834")
        buf.write("\7=\2\2\u0834\u0852\3\2\2\2\u0835\u0837\7\24\2\2\u0836")
        buf.write("\u0838\5\u012c\u0097\2\u0837\u0836\3\2\2\2\u0838\u0839")
        buf.write("\3\2\2\2\u0839\u0837\3\2\2\2\u0839\u083a\3\2\2\2\u083a")
        buf.write("\u083d\3\2\2\2\u083b\u083c\7<\2\2\u083c\u083e\5\u00d2")
        buf.write("j\2\u083d\u083b\3\2\2\2\u083d\u083e\3\2\2\2\u083e\u083f")
        buf.write("\3\2\2\2\u083f\u0840\7=\2\2\u0840\u0852\3\2\2\2\u0841")
        buf.write("\u0852\5\u016c\u00b7\2\u0842\u0843\7\u01da\2\2\u0843\u0844")
        buf.write("\5\u00d2j\2\u0844\u0845\7\u01db\2\2\u0845\u0852\3\2\2")
        buf.write("\2\u0846\u0847\7\u01da\2\2\u0847\u0848\5\u00dan\2\u0848")
        buf.write("\u0849\7\u01db\2\2\u0849\u0852\3\2\2\2\u084a\u084b\7\u01e4")
        buf.write("\2\2\u084b\u0852\5\u00d2j\13\u084c\u084d\t \2\2\u084d")
        buf.write("\u0852\5\u00d2j\t\u084e\u0852\5\u014c\u00a7\2\u084f\u0852")
        buf.write("\5\u019a\u00ce\2\u0850\u0852\5\u019c\u00cf\2\u0851\u0822")
        buf.write("\3\2\2\2\u0851\u0824\3\2\2\2\u0851\u0825\3\2\2\2\u0851")
        buf.write("\u0826\3\2\2\2\u0851\u0827\3\2\2\2\u0851\u0828\3\2\2\2")
        buf.write("\u0851\u0835\3\2\2\2\u0851\u0841\3\2\2\2\u0851\u0842\3")
        buf.write("\2\2\2\u0851\u0846\3\2\2\2\u0851\u084a\3\2\2\2\u0851\u084c")
        buf.write("\3\2\2\2\u0851\u084e\3\2\2\2\u0851\u084f\3\2\2\2\u0851")
        buf.write("\u0850\3\2\2\2\u0852\u086a\3\2\2\2\u0853\u0854\f\21\2")
        buf.write("\2\u0854\u0855\7\u00da\2\2\u0855\u0856\7\u01a6\2\2\u0856")
        buf.write("\u0857\7\u01bb\2\2\u0857\u0869\5\u00d2j\22\u0858\u0859")
        buf.write("\f\n\2\2\u0859\u085a\t!\2\2\u085a\u0869\5\u00d2j\13\u085b")
        buf.write("\u085c\f\b\2\2\u085c\u085d\t\"\2\2\u085d\u0869\5\u00d2")
        buf.write("j\t\u085e\u085f\f\7\2\2\u085f\u0860\5\u0184\u00c3\2\u0860")
        buf.write("\u0861\5\u00d2j\b\u0861\u0869\3\2\2\2\u0862\u0863\f\22")
        buf.write("\2\2\u0863\u0864\7\34\2\2\u0864\u0869\5\u0180\u00c1\2")
        buf.write("\u0865\u0866\f\3\2\2\u0866\u0867\7\u01d5\2\2\u0867\u0869")
        buf.write("\5\u00d4k\2\u0868\u0853\3\2\2\2\u0868\u0858\3\2\2\2\u0868")
        buf.write("\u085b\3\2\2\2\u0868\u085e\3\2\2\2\u0868\u0862\3\2\2\2")
        buf.write("\u0868\u0865\3\2\2\2\u0869\u086c\3\2\2\2\u086a\u0868\3")
        buf.write("\2\2\2\u086a\u086b\3\2\2\2\u086b\u00d3\3\2\2\2\u086c\u086a")
        buf.write("\3\2\2\2\u086d\u086e\5\u00d6l\2\u086e\u0870\7\u01da\2")
        buf.write("\2\u086f\u0871\5\u013e\u00a0\2\u0870\u086f\3\2\2\2\u0870")
        buf.write("\u0871\3\2\2\2\u0871\u0872\3\2\2\2\u0872\u0873\7\u01db")
        buf.write("\2\2\u0873\u0881\3\2\2\2\u0874\u0875\7\u0154\2\2\u0875")
        buf.write("\u0877\7\u01da\2\2\u0876\u0878\5\u013e\u00a0\2\u0877\u0876")
        buf.write("\3\2\2\2\u0877\u0878\3\2\2\2\u0878\u0879\3\2\2\2\u0879")
        buf.write("\u087a\7\u01db\2\2\u087a\u087b\7\b\2\2\u087b\u087c\5\u0180")
        buf.write("\u00c1\2\u087c\u087d\7\u01da\2\2\u087d\u087e\5\u0180\u00c1")
        buf.write("\2\u087e\u087f\7\u01db\2\2\u087f\u0881\3\2\2\2\u0880\u086d")
        buf.write("\3\2\2\2\u0880\u0874\3\2\2\2\u0881\u00d5\3\2\2\2\u0882")
        buf.write("\u0883\t#\2\2\u0883\u00d7\3\2\2\2\u0884\u088d\7s\2\2\u0885")
        buf.write("\u088d\5\u017c\u00bf\2\u0886\u088d\5\u0128\u0095\2\u0887")
        buf.write("\u088d\7\u01c2\2\2\u0888\u0889\7\u01da\2\2\u0889\u088a")
        buf.write("\5\u00d8m\2\u088a\u088b\7\u01db\2\2\u088b\u088d\3\2\2")
        buf.write("\2\u088c\u0884\3\2\2\2\u088c\u0885\3\2\2\2\u088c\u0886")
        buf.write("\3\2\2\2\u088c\u0887\3\2\2\2\u088c\u0888\3\2\2\2\u088d")
        buf.write("\u00d9\3\2\2\2\u088e\u088f\5\66\34\2\u088f\u00db\3\2\2")
        buf.write("\2\u0890\u0893\7\u00cd\2\2\u0891\u0892\7\u01ba\2\2\u0892")
        buf.write("\u0894\7\u01dc\2\2\u0893\u0891\3\2\2\2\u0893\u0894\3\2")
        buf.write("\2\2\u0894\u0895\3\2\2\2\u0895\u089a\5\u00dep\2\u0896")
        buf.write("\u0897\7\u01dc\2\2\u0897\u0899\5\u00dep\2\u0898\u0896")
        buf.write("\3\2\2\2\u0899\u089c\3\2\2\2\u089a\u0898\3\2\2\2\u089a")
        buf.write("\u089b\3\2\2\2\u089b\u00dd\3\2\2\2\u089c\u089a\3\2\2\2")
        buf.write("\u089d\u08a2\5\u0180\u00c1\2\u089e\u089f\7\u01da\2\2\u089f")
        buf.write("\u08a0\5\u016e\u00b8\2\u08a0\u08a1\7\u01db\2\2\u08a1\u08a3")
        buf.write("\3\2\2\2\u08a2\u089e\3\2\2\2\u08a2\u08a3\3\2\2\2\u08a3")
        buf.write("\u08a4\3\2\2\2\u08a4\u08a5\7\b\2\2\u08a5\u08a6\7\u01da")
        buf.write("\2\2\u08a6\u08a7\5\66\34\2\u08a7\u08a8\7\u01db\2\2\u08a8")
        buf.write("\u00df\3\2\2\2\u08a9\u08ac\5\u016c\u00b7\2\u08aa\u08ac")
        buf.write("\7\u01c2\2\2\u08ab\u08a9\3\2\2\2\u08ab\u08aa\3\2\2\2\u08ac")
        buf.write("\u08af\3\2\2\2\u08ad\u08b0\7\u01c9\2\2\u08ae\u08b0\5\u0186")
        buf.write("\u00c4\2\u08af\u08ad\3\2\2\2\u08af\u08ae\3\2\2\2\u08b0")
        buf.write("\u08b1\3\2\2\2\u08b1\u08ba\5\u00d2j\2\u08b2\u08b3\5\u0180")
        buf.write("\u00c1\2\u08b3\u08b4\7\u01d5\2\2\u08b4\u08b5\5\u0180\u00c1")
        buf.write("\2\u08b5\u08b6\7\u01da\2\2\u08b6\u08b7\5\u013e\u00a0\2")
        buf.write("\u08b7\u08b8\7\u01db\2\2\u08b8\u08ba\3\2\2\2\u08b9\u08ab")
        buf.write("\3\2\2\2\u08b9\u08b2\3\2\2\2\u08ba\u00e1\3\2\2\2\u08bb")
        buf.write("\u08c0\5\u00e4s\2\u08bc\u08bd\7\u01dc\2\2\u08bd\u08bf")
        buf.write("\5\u00e4s\2\u08be\u08bc\3\2\2\2\u08bf\u08c2\3\2\2\2\u08c0")
        buf.write("\u08be\3\2\2\2\u08c0\u08c1\3\2\2\2\u08c1\u00e3\3\2\2\2")
        buf.write("\u08c2\u08c0\3\2\2\2\u08c3\u08c4\bs\1\2\u08c4\u08c5\5")
        buf.write("\u00e6t\2\u08c5\u08ce\3\2\2\2\u08c6\u08c7\f\5\2\2\u08c7")
        buf.write("\u08c8\7\6\2\2\u08c8\u08cd\5\u00e4s\6\u08c9\u08ca\f\4")
        buf.write("\2\2\u08ca\u08cb\7\u0080\2\2\u08cb\u08cd\5\u00e4s\5\u08cc")
        buf.write("\u08c6\3\2\2\2\u08cc\u08c9\3\2\2\2\u08cd\u08d0\3\2\2\2")
        buf.write("\u08ce\u08cc\3\2\2\2\u08ce\u08cf\3\2\2\2\u08cf\u00e5\3")
        buf.write("\2\2\2\u08d0\u08ce\3\2\2\2\u08d1\u08d2\7r\2\2\u08d2\u090c")
        buf.write("\5\u00e6t\2\u08d3\u08d4\7B\2\2\u08d4\u08d5\7\u01da\2\2")
        buf.write("\u08d5\u08d6\5\u00dan\2\u08d6\u08d7\7\u01db\2\2\u08d7")
        buf.write("\u090c\3\2\2\2\u08d8\u08d9\5\u00d2j\2\u08d9\u08da\5\u0184")
        buf.write("\u00c3\2\u08da\u08db\5\u00d2j\2\u08db\u090c\3\2\2\2\u08dc")
        buf.write("\u08dd\5\u00d2j\2\u08dd\u08de\5\u0184\u00c3\2\u08de\u08df")
        buf.write("\t$\2\2\u08df\u08e0\7\u01da\2\2\u08e0\u08e1\5\u00dan\2")
        buf.write("\u08e1\u08e2\7\u01db\2\2\u08e2\u090c\3\2\2\2\u08e3\u08e5")
        buf.write("\5\u00d2j\2\u08e4\u08e6\7r\2\2\u08e5\u08e4\3\2\2\2\u08e5")
        buf.write("\u08e6\3\2\2\2\u08e6\u08e7\3\2\2\2\u08e7\u08e8\7\r\2\2")
        buf.write("\u08e8\u08e9\5\u00d2j\2\u08e9\u08ea\7\6\2\2\u08ea\u08eb")
        buf.write("\5\u00d2j\2\u08eb\u090c\3\2\2\2\u08ec\u08ee\5\u00d2j\2")
        buf.write("\u08ed\u08ef\7r\2\2\u08ee\u08ed\3\2\2\2\u08ee\u08ef\3")
        buf.write("\2\2\2\u08ef\u08f0\3\2\2\2\u08f0\u08f1\7[\2\2\u08f1\u08f4")
        buf.write("\7\u01da\2\2\u08f2\u08f5\5\u00dan\2\u08f3\u08f5\5\u013e")
        buf.write("\u00a0\2\u08f4\u08f2\3\2\2\2\u08f4\u08f3\3\2\2\2\u08f5")
        buf.write("\u08f6\3\2\2\2\u08f6\u08f7\7\u01db\2\2\u08f7\u090c\3\2")
        buf.write("\2\2\u08f8\u08fa\5\u00d2j\2\u08f9\u08fb\7r\2\2\u08fa\u08f9")
        buf.write("\3\2\2\2\u08fa\u08fb\3\2\2\2\u08fb\u08fc\3\2\2\2\u08fc")
        buf.write("\u08fd\7g\2\2\u08fd\u0900\5\u00d2j\2\u08fe\u08ff\7?\2")
        buf.write("\2\u08ff\u0901\5\u00d2j\2\u0900\u08fe\3\2\2\2\u0900\u0901")
        buf.write("\3\2\2\2\u0901\u090c\3\2\2\2\u0902\u0903\5\u00d2j\2\u0903")
        buf.write("\u0904\7b\2\2\u0904\u0905\5\u0176\u00bc\2\u0905\u090c")
        buf.write("\3\2\2\2\u0906\u0907\7\u01da\2\2\u0907\u0908\5\u00e4s")
        buf.write("\2\u0908\u0909\7\u01db\2\2\u0909\u090c\3\2\2\2\u090a\u090c")
        buf.write("\7\u01c3\2\2\u090b\u08d1\3\2\2\2\u090b\u08d3\3\2\2\2\u090b")
        buf.write("\u08d8\3\2\2\2\u090b\u08dc\3\2\2\2\u090b\u08e3\3\2\2\2")
        buf.write("\u090b\u08ec\3\2\2\2\u090b\u08f8\3\2\2\2\u090b\u0902\3")
        buf.write("\2\2\2\u090b\u0906\3\2\2\2\u090b\u090a\3\2\2\2\u090c\u00e7")
        buf.write("\3\2\2\2\u090d\u090e\bu\1\2\u090e\u090f\7\u01da\2\2\u090f")
        buf.write("\u0910\5\u00e8u\2\u0910\u0911\7\u01db\2\2\u0911\u0914")
        buf.write("\3\2\2\2\u0912\u0914\5\u00eex\2\u0913\u090d\3\2\2\2\u0913")
        buf.write("\u0912\3\2\2\2\u0914\u091b\3\2\2\2\u0915\u0916\f\4\2\2")
        buf.write("\u0916\u0917\5\u00eav\2\u0917\u0918\5\u00e8u\5\u0918\u091a")
        buf.write("\3\2\2\2\u0919\u0915\3\2\2\2\u091a\u091d\3\2\2\2\u091b")
        buf.write("\u0919\3\2\2\2\u091b\u091c\3\2\2\2\u091c\u00e9\3\2\2\2")
        buf.write("\u091d\u091b\3\2\2\2\u091e\u0920\7\u00be\2\2\u091f\u0921")
        buf.write("\7\4\2\2\u0920\u091f\3\2\2\2\u0920\u0921\3\2\2\2\u0921")
        buf.write("\u0925\3\2\2\2\u0922\u0925\7@\2\2\u0923\u0925\7`\2\2\u0924")
        buf.write("\u091e\3\2\2\2\u0924\u0922\3\2\2\2\u0924\u0923\3\2\2\2")
        buf.write("\u0925\u00eb\3\2\2\2\u0926\u0927\7\u01da\2\2\u0927\u0928")
        buf.write("\5\u00ecw\2\u0928\u0929\7\u01db\2\2\u0929\u092e\3\2\2")
        buf.write("\2\u092a\u092e\5\u00e8u\2\u092b\u092e\5\u00d2j\2\u092c")
        buf.write("\u092e\5\u013c\u009f\2\u092d\u0926\3\2\2\2\u092d\u092a")
        buf.write("\3\2\2\2\u092d\u092b\3\2\2\2\u092d\u092c\3\2\2\2\u092e")
        buf.write("\u00ed\3\2\2\2\u092f\u0931\7\u00a2\2\2\u0930\u0932\t%")
        buf.write("\2\2\u0931\u0930\3\2\2\2\u0931\u0932\3\2\2\2\u0932\u0934")
        buf.write("\3\2\2\2\u0933\u0935\5\u00f4{\2\u0934\u0933\3\2\2\2\u0934")
        buf.write("\u0935\3\2\2\2\u0935\u0936\3\2\2\2\u0936\u0939\5\u010a")
        buf.write("\u0086\2\u0937\u0938\7a\2\2\u0938\u093a\5\u0164\u00b3")
        buf.write("\2\u0939\u0937\3\2\2\2\u0939\u093a\3\2\2\2\u093a\u093d")
        buf.write("\3\2\2\2\u093b\u093c\7O\2\2\u093c\u093e\5\u010e\u0088")
        buf.write("\2\u093d\u093b\3\2\2\2\u093d\u093e\3\2\2\2\u093e\u0945")
        buf.write("\3\2\2\2\u093f\u0940\7\'\2\2\u0940\u0941\7\u00d8\2\2\u0941")
        buf.write("\u0943\5\u00ecw\2\u0942\u0944\5> \2\u0943\u0942\3\2\2")
        buf.write("\2\u0943\u0944\3\2\2\2\u0944\u0946\3\2\2\2\u0945\u093f")
        buf.write("\3\2\2\2\u0945\u0946\3\2\2\2\u0946\u0949\3\2\2\2\u0947")
        buf.write("\u0948\7\u00cb\2\2\u0948\u094a\5\u00e4s\2\u0949\u0947")
        buf.write("\3\2\2\2\u0949\u094a\3\2\2\2\u094a\u0955\3\2\2\2\u094b")
        buf.write("\u094c\7T\2\2\u094c\u094d\7\21\2\2\u094d\u0952\5\u0102")
        buf.write("\u0082\2\u094e\u094f\7\u01dc\2\2\u094f\u0951\5\u0102\u0082")
        buf.write("\2\u0950\u094e\3\2\2\2\u0951\u0954\3\2\2\2\u0952\u0950")
        buf.write("\3\2\2\2\u0952\u0953\3\2\2\2\u0953\u0956\3\2\2\2\u0954")
        buf.write("\u0952\3\2\2\2\u0955\u094b\3\2\2\2\u0955\u0956\3\2\2\2")
        buf.write("\u0956\u0958\3\2\2\2\u0957\u0959\5\u00f0y\2\u0958\u0957")
        buf.write("\3\2\2\2\u0958\u0959\3\2\2\2\u0959\u095c\3\2\2\2\u095a")
        buf.write("\u095b\7\u00cd\2\2\u095b\u095d\t&\2\2\u095c\u095a\3\2")
        buf.write("\2\2\u095c\u095d\3\2\2\2\u095d\u0960\3\2\2\2\u095e\u095f")
        buf.write("\7U\2\2\u095f\u0961\5\u00e4s\2\u0960\u095e\3\2\2\2\u0960")
        buf.write("\u0961\3\2\2\2\u0961\u00ef\3\2\2\2\u0962\u0963\7T\2\2")
        buf.write("\u0963\u0964\7\21\2\2\u0964\u0965\7\u0126\2\2\u0965\u0966")
        buf.write("\7\u018d\2\2\u0966\u0967\7\u01da\2\2\u0967\u096c\5\u00f2")
        buf.write("z\2\u0968\u0969\7\u01dc\2\2\u0969\u096b\5\u00f2z\2\u096a")
        buf.write("\u0968\3\2\2\2\u096b\u096e\3\2\2\2\u096c\u096a\3\2\2\2")
        buf.write("\u096c\u096d\3\2\2\2\u096d\u096f\3\2\2\2\u096e\u096c\3")
        buf.write("\2\2\2\u096f\u0970\7\u01db\2\2\u0970\u00f1\3\2\2\2\u0971")
        buf.write("\u0972\7\u01da\2\2\u0972\u0980\7\u01db\2\2\u0973\u0980")
        buf.write("\5\u0102\u0082\2\u0974\u0975\7\u01da\2\2\u0975\u097a\5")
        buf.write("\u0102\u0082\2\u0976\u0977\7\u01dc\2\2\u0977\u0979\5\u0102")
        buf.write("\u0082\2\u0978\u0976\3\2\2\2\u0979\u097c\3\2\2\2\u097a")
        buf.write("\u0978\3\2\2\2\u097a\u097b\3\2\2\2\u097b\u097d\3\2\2\2")
        buf.write("\u097c\u097a\3\2\2\2\u097d\u097e\7\u01db\2\2\u097e\u0980")
        buf.write("\3\2\2\2\u097f\u0971\3\2\2\2\u097f\u0973\3\2\2\2\u097f")
        buf.write("\u0974\3\2\2\2\u0980\u00f3\3\2\2\2\u0981\u0982\7\u00b5")
        buf.write("\2\2\u0982\u0984\5\u00d2j\2\u0983\u0985\7\u0085\2\2\u0984")
        buf.write("\u0983\3\2\2\2\u0984\u0985\3\2\2\2\u0985\u0988\3\2\2\2")
        buf.write("\u0986\u0987\7\u00cd\2\2\u0987\u0989\7\u01a5\2\2\u0988")
        buf.write("\u0986\3\2\2\2\u0988\u0989\3\2\2\2\u0989\u00f5\3\2\2\2")
        buf.write("\u098a\u098b\7\u00b5\2\2\u098b\u098c\7\u01da\2\2\u098c")
        buf.write("\u098d\5\u00d2j\2\u098d\u098f\7\u01db\2\2\u098e\u0990")
        buf.write("\7\u0085\2\2\u098f\u098e\3\2\2\2\u098f\u0990\3\2\2\2\u0990")
        buf.write("\u00f7\3\2\2\2\u0991\u0992\7\u0081\2\2\u0992\u0993\7\21")
        buf.write("\2\2\u0993\u0998\5\u0100\u0081\2\u0994\u0995\7\u01dc\2")
        buf.write("\2\u0995\u0997\5\u0100\u0081\2\u0996\u0994\3\2\2\2\u0997")
        buf.write("\u099a\3\2\2\2\u0998\u0996\3\2\2\2\u0998\u0999\3\2\2\2")
        buf.write("\u0999\u09a1\3\2\2\2\u099a\u0998\3\2\2\2\u099b\u099c\7")
        buf.write("\u015d\2\2\u099c\u099d\5\u00d2j\2\u099d\u099f\t\'\2\2")
        buf.write("\u099e\u09a0\5\u00fa~\2\u099f\u099e\3\2\2\2\u099f\u09a0")
        buf.write("\3\2\2\2\u09a0\u09a2\3\2\2\2\u09a1\u099b\3\2\2\2\u09a1")
        buf.write("\u09a2\3\2\2\2\u09a2\u00f9\3\2\2\2\u09a3\u09a4\7F\2\2")
        buf.write("\u09a4\u09a5\t(\2\2\u09a5\u09a6\5\u00d2j\2\u09a6\u09a7")
        buf.write("\t\'\2\2\u09a7\u09a8\7\u015f\2\2\u09a8\u00fb\3\2\2\2\u09a9")
        buf.write("\u09aa\7J\2\2\u09aa\u09bd\7\17\2\2\u09ab\u09ac\7J\2\2")
        buf.write("\u09ac\u09ad\7\u01b9\2\2\u09ad\u09af\7\u00db\2\2\u09ae")
        buf.write("\u09b0\5\u00fe\u0080\2\u09af\u09ae\3\2\2\2\u09af\u09b0")
        buf.write("\3\2\2\2\u09b0\u09bd\3\2\2\2\u09b1\u09b2\7J\2\2\u09b2")
        buf.write("\u09b3\7\u01b9\2\2\u09b3\u09b7\7\u0169\2\2\u09b4\u09b5")
        buf.write("\7\u01da\2\2\u09b5\u09b6\7\u01c5\2\2\u09b6\u09b8\7\u01db")
        buf.write("\2\2\u09b7\u09b4\3\2\2\2\u09b7\u09b8\3\2\2\2\u09b8\u09ba")
        buf.write("\3\2\2\2\u09b9\u09bb\5\u00fe\u0080\2\u09ba\u09b9\3\2\2")
        buf.write("\2\u09ba\u09bb\3\2\2\2\u09bb\u09bd\3\2\2\2\u09bc\u09a9")
        buf.write("\3\2\2\2\u09bc\u09ab\3\2\2\2\u09bc\u09b1\3\2\2\2\u09bd")
        buf.write("\u00fd\3\2\2\2\u09be\u09c3\7\u01dc\2\2\u09bf\u09c0\7\u01c6")
        buf.write("\2\2\u09c0\u09c4\7\u00e3\2\2\u09c1\u09c4\7\u01ad\2\2\u09c2")
        buf.write("\u09c4\7\u0180\2\2\u09c3\u09bf\3\2\2\2\u09c3\u09c1\3\2")
        buf.write("\2\2\u09c3\u09c2\3\2\2\2\u09c4\u00ff\3\2\2\2\u09c5\u09c7")
        buf.write("\5\u00d2j\2\u09c6\u09c8\t\7\2\2\u09c7\u09c6\3\2\2\2\u09c7")
        buf.write("\u09c8\3\2\2\2\u09c8\u0101\3\2\2\2\u09c9\u09ca\5\u00d2")
        buf.write("j\2\u09ca\u0103\3\2\2\2\u09cb\u09cc\7\177\2\2\u09cc\u09cd")
        buf.write("\7\u01da\2\2\u09cd\u09d2\5\u0106\u0084\2\u09ce\u09cf\7")
        buf.write("\u01dc\2\2\u09cf\u09d1\5\u0106\u0084\2\u09d0\u09ce\3\2")
        buf.write("\2\2\u09d1\u09d4\3\2\2\2\u09d2\u09d0\3\2\2\2\u09d2\u09d3")
        buf.write("\3\2\2\2\u09d3\u09d5\3\2\2\2\u09d4\u09d2\3\2\2\2\u09d5")
        buf.write("\u09d6\7\u01db\2\2\u09d6\u0105\3\2\2\2\u09d7\u09d8\7\u0116")
        buf.write("\2\2\u09d8\u0a05\7\u01c3\2\2\u09d9\u09da\t)\2\2\u09da")
        buf.write("\u0a05\7T\2\2\u09db\u09dc\t*\2\2\u09dc\u0a05\7\u00be\2")
        buf.write("\2\u09dd\u09de\t+\2\2\u09de\u0a05\7c\2\2\u09df\u09e0\7")
        buf.write("\u0115\2\2\u09e0\u0a05\7\u01b6\2\2\u09e1\u09e2\7\u011f")
        buf.write("\2\2\u09e2\u0a05\7\u0081\2\2\u09e3\u0a05\7\u012c\2\2\u09e4")
        buf.write("\u09e5\7\u0137\2\2\u09e5\u0a05\7\u0087\2\2\u09e6\u09e7")
        buf.write("\7\u0138\2\2\u09e7\u0a05\7\u0087\2\2\u09e8\u09e9\7\u0145")
        buf.write("\2\2\u09e9\u0a05\7\u01c3\2\2\u09ea\u09eb\7\u0146\2\2\u09eb")
        buf.write("\u0a05\7\u01c3\2\2\u09ec\u09ed\7\u0161\2\2\u09ed\u09ee")
        buf.write("\7J\2\2\u09ee\u09ef\7\u01da\2\2\u09ef\u09f4\5\u0108\u0085")
        buf.write("\2\u09f0\u09f1\7\u01dc\2\2\u09f1\u09f3\5\u0108\u0085\2")
        buf.write("\u09f2\u09f0\3\2\2\2\u09f3\u09f6\3\2\2\2\u09f4\u09f2\3")
        buf.write("\2\2\2\u09f4\u09f5\3\2\2\2\u09f5\u09f7\3\2\2\2\u09f6\u09f4")
        buf.write("\3\2\2\2\u09f7\u09f8\7\u01db\2\2\u09f8\u0a05\3\2\2\2\u09f9")
        buf.write("\u09fa\7\u0161\2\2\u09fa\u09fb\7J\2\2\u09fb\u0a05\7\u01b1")
        buf.write("\2\2\u09fc\u09fd\7\u0166\2\2\u09fd\u0a05\t\22\2\2\u09fe")
        buf.write("\u0a05\7\u0177\2\2\u09ff\u0a00\7\u017e\2\2\u0a00\u0a05")
        buf.write("\7\u0087\2\2\u0a01\u0a02\7\u00c3\2\2\u0a02\u0a03\7\u0087")
        buf.write("\2\2\u0a03\u0a05\7\u01c5\2\2\u0a04\u09d7\3\2\2\2\u0a04")
        buf.write("\u09d9\3\2\2\2\u0a04\u09db\3\2\2\2\u0a04\u09dd\3\2\2\2")
        buf.write("\u0a04\u09df\3\2\2\2\u0a04\u09e1\3\2\2\2\u0a04\u09e3\3")
        buf.write("\2\2\2\u0a04\u09e4\3\2\2\2\u0a04\u09e6\3\2\2\2\u0a04\u09e8")
        buf.write("\3\2\2\2\u0a04\u09ea\3\2\2\2\u0a04\u09ec\3\2\2\2\u0a04")
        buf.write("\u09f9\3\2\2\2\u0a04\u09fc\3\2\2\2\u0a04\u09fe\3\2\2\2")
        buf.write("\u0a04\u09ff\3\2\2\2\u0a04\u0a01\3\2\2\2\u0a05\u0107\3")
        buf.write("\2\2\2\u0a06\u0a0a\7\u01c2\2\2\u0a07\u0a0b\7\u01b1\2\2")
        buf.write("\u0a08\u0a09\7\u01c9\2\2\u0a09\u0a0b\5\u017c\u00bf\2\u0a0a")
        buf.write("\u0a07\3\2\2\2\u0a0a\u0a08\3\2\2\2\u0a0b\u0109\3\2\2\2")
        buf.write("\u0a0c\u0a11\5\u010c\u0087\2\u0a0d\u0a0e\7\u01dc\2\2\u0a0e")
        buf.write("\u0a10\5\u010c\u0087\2\u0a0f\u0a0d\3\2\2\2\u0a10\u0a13")
        buf.write("\3\2\2\2\u0a11\u0a0f\3\2\2\2\u0a11\u0a12\3\2\2\2\u0a12")
        buf.write("\u010b\3\2\2\2\u0a13\u0a11\3\2\2\2\u0a14\u0a15\5\u0164")
        buf.write("\u00b3\2\u0a15\u0a16\7\u01d5\2\2\u0a16\u0a18\3\2\2\2\u0a17")
        buf.write("\u0a14\3\2\2\2\u0a17\u0a18\3\2\2\2\u0a18\u0a1c\3\2\2\2")
        buf.write("\u0a19\u0a1d\5\u013a\u009e\2\u0a1a\u0a1b\7\u01d9\2\2\u0a1b")
        buf.write("\u0a1d\t,\2\2\u0a1c\u0a19\3\2\2\2\u0a1c\u0a1a\3\2\2\2")
        buf.write("\u0a1d\u0a2a\3\2\2\2\u0a1e\u0a1f\5\u0138\u009d\2\u0a1f")
        buf.write("\u0a20\7\u01c9\2\2\u0a20\u0a21\5\u00d2j\2\u0a21\u0a2a")
        buf.write("\3\2\2\2\u0a22\u0a27\5\u00d2j\2\u0a23\u0a25\7\b\2\2\u0a24")
        buf.write("\u0a23\3\2\2\2\u0a24\u0a25\3\2\2\2\u0a25\u0a26\3\2\2\2")
        buf.write("\u0a26\u0a28\5\u0138\u009d\2\u0a27\u0a24\3\2\2\2\u0a27")
        buf.write("\u0a28\3\2\2\2\u0a28\u0a2a\3\2\2\2\u0a29\u0a17\3\2\2\2")
        buf.write("\u0a29\u0a1e\3\2\2\2\u0a29\u0a22\3\2\2\2\u0a2a\u010d\3")
        buf.write("\2\2\2\u0a2b\u0a30\5\u0110\u0089\2\u0a2c\u0a2d\7\u01dc")
        buf.write("\2\2\u0a2d\u0a2f\5\u0110\u0089\2\u0a2e\u0a2c\3\2\2\2\u0a2f")
        buf.write("\u0a32\3\2\2\2\u0a30\u0a2e\3\2\2\2\u0a30\u0a31\3\2\2\2")
        buf.write("\u0a31\u010f\3\2\2\2\u0a32\u0a30\3\2\2\2\u0a33\u0a34\b")
        buf.write("\u0089\1\2\u0a34\u0a35\7\u01da\2\2\u0a35\u0a36\5\u0110")
        buf.write("\u0089\2\u0a36\u0a37\7\u01db\2\2\u0a37\u0a3a\3\2\2\2\u0a38")
        buf.write("\u0a3a\5\u0112\u008a\2\u0a39\u0a33\3\2\2\2\u0a39\u0a38")
        buf.write("\3\2\2\2\u0a3a\u0a4c\3\2\2\2\u0a3b\u0a3c\f\5\2\2\u0a3c")
        buf.write("\u0a3d\7\'\2\2\u0a3d\u0a3e\7c\2\2\u0a3e\u0a4b\5\u0110")
        buf.write("\u0089\6\u0a3f\u0a40\f\4\2\2\u0a40\u0a41\t-\2\2\u0a41")
        buf.write("\u0a42\7\u00d8\2\2\u0a42\u0a4b\5\u0110\u0089\5\u0a43\u0a44")
        buf.write("\f\6\2\2\u0a44\u0a45\5\u011e\u0090\2\u0a45\u0a46\7c\2")
        buf.write("\2\u0a46\u0a47\5\u0110\u0089\2\u0a47\u0a48\7y\2\2\u0a48")
        buf.write("\u0a49\5\u00e4s\2\u0a49\u0a4b\3\2\2\2\u0a4a\u0a3b\3\2")
        buf.write("\2\2\u0a4a\u0a3f\3\2\2\2\u0a4a\u0a43\3\2\2\2\u0a4b\u0a4e")
        buf.write("\3\2\2\2\u0a4c\u0a4a\3\2\2\2\u0a4c\u0a4d\3\2\2\2\u0a4d")
        buf.write("\u0111\3\2\2\2\u0a4e\u0a4c\3\2\2\2\u0a4f\u0a51\5\u0164")
        buf.write("\u00b3\2\u0a50\u0a52\5\u0114\u008b\2\u0a51\u0a50\3\2\2")
        buf.write("\2\u0a51\u0a52\3\2\2\2\u0a52\u0a54\3\2\2\2\u0a53\u0a55")
        buf.write("\5\u011a\u008e\2\u0a54\u0a53\3\2\2\2\u0a54\u0a55\3\2\2")
        buf.write("\2\u0a55\u0a57\3\2\2\2\u0a56\u0a58\5\u012e\u0098\2\u0a57")
        buf.write("\u0a56\3\2\2\2\u0a57\u0a58\3\2\2\2\u0a58\u0a7a\3\2\2\2")
        buf.write("\u0a59\u0a5b\5\u0122\u0092\2\u0a5a\u0a5c\5\u011a\u008e")
        buf.write("\2\u0a5b\u0a5a\3\2\2\2\u0a5b\u0a5c\3\2\2\2\u0a5c\u0a7a")
        buf.write("\3\2\2\2\u0a5d\u0a62\5\u0126\u0094\2\u0a5e\u0a60\5\u011a")
        buf.write("\u008e\2\u0a5f\u0a61\5\u0136\u009c\2\u0a60\u0a5f\3\2\2")
        buf.write("\2\u0a60\u0a61\3\2\2\2\u0a61\u0a63\3\2\2\2\u0a62\u0a5e")
        buf.write("\3\2\2\2\u0a62\u0a63\3\2\2\2\u0a63\u0a7a\3\2\2\2\u0a64")
        buf.write("\u0a66\5\u011c\u008f\2\u0a65\u0a67\5\u011a\u008e\2\u0a66")
        buf.write("\u0a65\3\2\2\2\u0a66\u0a67\3\2\2\2\u0a67\u0a7a\3\2\2\2")
        buf.write("\u0a68\u0a6a\5\u0128\u0095\2\u0a69\u0a6b\5\u011a\u008e")
        buf.write("\2\u0a6a\u0a69\3\2\2\2\u0a6a\u0a6b\3\2\2\2\u0a6b\u0a7a")
        buf.write("\3\2\2\2\u0a6c\u0a6e\7\u01c2\2\2\u0a6d\u0a6f\5\u011a\u008e")
        buf.write("\2\u0a6e\u0a6d\3\2\2\2\u0a6e\u0a6f\3\2\2\2\u0a6f\u0a7a")
        buf.write("\3\2\2\2\u0a70\u0a71\7\u01c2\2\2\u0a71\u0a72\7\u01d5\2")
        buf.write("\2\u0a72\u0a77\5\u0128\u0095\2\u0a73\u0a75\5\u011a\u008e")
        buf.write("\2\u0a74\u0a76\5\u0136\u009c\2\u0a75\u0a74\3\2\2\2\u0a75")
        buf.write("\u0a76\3\2\2\2\u0a76\u0a78\3\2\2\2\u0a77\u0a73\3\2\2\2")
        buf.write("\u0a77\u0a78\3\2\2\2\u0a78\u0a7a\3\2\2\2\u0a79\u0a4f\3")
        buf.write("\2\2\2\u0a79\u0a59\3\2\2\2\u0a79\u0a5d\3\2\2\2\u0a79\u0a64")
        buf.write("\3\2\2\2\u0a79\u0a68\3\2\2\2\u0a79\u0a6c\3\2\2\2\u0a79")
        buf.write("\u0a70\3\2\2\2\u0a7a\u0113\3\2\2\2\u0a7b\u0a7d\7\u00b1")
        buf.write("\2\2\u0a7c\u0a7e\7\u00ae\2\2\u0a7d\u0a7c\3\2\2\2\u0a7d")
        buf.write("\u0a7e\3\2\2\2\u0a7e\u0a7f\3\2\2\2\u0a7f\u0a80\7\u01da")
        buf.write("\2\2\u0a80\u0a82\5\u0116\u008c\2\u0a81\u0a83\t\b\2\2\u0a82")
        buf.write("\u0a81\3\2\2\2\u0a82\u0a83\3\2\2\2\u0a83\u0a84\3\2\2\2")
        buf.write("\u0a84\u0a87\7\u01db\2\2\u0a85\u0a86\7\u017c\2\2\u0a86")
        buf.write("\u0a88\5\u0118\u008d\2\u0a87\u0a85\3\2\2\2\u0a87\u0a88")
        buf.write("\3\2\2\2\u0a88\u0115\3\2\2\2\u0a89\u0a8a\7\u01c3\2\2\u0a8a")
        buf.write("\u0117\3\2\2\2\u0a8b\u0a8c\7\u01c3\2\2\u0a8c\u0119\3\2")
        buf.write("\2\2\u0a8d\u0a8f\7\b\2\2\u0a8e\u0a8d\3\2\2\2\u0a8e\u0a8f")
        buf.write("\3\2\2\2\u0a8f\u0a90\3\2\2\2\u0a90\u0a91\5\u0180\u00c1")
        buf.write("\2\u0a91\u011b\3\2\2\2\u0a92\u0a93\7\25\2\2\u0a93\u0a94")
        buf.write("\7\u01da\2\2\u0a94\u0a95\7\26\2\2\u0a95\u0a96\5\u0164")
        buf.write("\u00b3\2\u0a96\u0a97\7\u01dc\2\2\u0a97\u0a98\t.\2\2\u0a98")
        buf.write("\u0a99\7\u01db\2\2\u0a99\u011d\3\2\2\2\u0a9a\u0a9c\7^")
        buf.write("\2\2\u0a9b\u0a9a\3\2\2\2\u0a9b\u0a9c\3\2\2\2\u0a9c\u0aa2")
        buf.write("\3\2\2\2\u0a9d\u0a9f\t/\2\2\u0a9e\u0aa0\7\u0082\2\2\u0a9f")
        buf.write("\u0a9e\3\2\2\2\u0a9f\u0aa0\3\2\2\2\u0aa0\u0aa2\3\2\2\2")
        buf.write("\u0aa1\u0a9b\3\2\2\2\u0aa1\u0a9d\3\2\2\2\u0aa2\u0aa4\3")
        buf.write("\2\2\2\u0aa3\u0aa5\t\60\2\2\u0aa4\u0aa3\3\2\2\2\u0aa4")
        buf.write("\u0aa5\3\2\2\2\u0aa5\u011f\3\2\2\2\u0aa6\u0aa8\5\u0164")
        buf.write("\u00b3\2\u0aa7\u0aa9\5\u012e\u0098\2\u0aa8\u0aa7\3\2\2")
        buf.write("\2\u0aa8\u0aa9\3\2\2\2\u0aa9\u0121\3\2\2\2\u0aaa\u0aab")
        buf.write("\7}\2\2\u0aab\u0aac\7\u01da\2\2\u0aac\u0aad\7\u01c5\2")
        buf.write("\2\u0aad\u0aae\7\u01dc\2\2\u0aae\u0aaf\7\u01c5\2\2\u0aaf")
        buf.write("\u0ab0\7\u01dc\2\2\u0ab0\u0ab1\7\u01c5\2\2\u0ab1\u0ac5")
        buf.write("\7\u01db\2\2\u0ab2\u0ab3\7}\2\2\u0ab3\u0ab4\7\u01da\2")
        buf.write("\2\u0ab4\u0ab5\7\20\2\2\u0ab5\u0ab6\7\u01c5\2\2\u0ab6")
        buf.write("\u0ac0\7\u01dc\2\2\u0ab7\u0abc\5\u0124\u0093\2\u0ab8\u0ab9")
        buf.write("\7\u01dc\2\2\u0ab9\u0abb\5\u0124\u0093\2\u0aba\u0ab8\3")
        buf.write("\2\2\2\u0abb\u0abe\3\2\2\2\u0abc\u0aba\3\2\2\2\u0abc\u0abd")
        buf.write("\3\2\2\2\u0abd\u0ac1\3\2\2\2\u0abe\u0abc\3\2\2\2\u0abf")
        buf.write("\u0ac1\5\u0180\u00c1\2\u0ac0\u0ab7\3\2\2\2\u0ac0\u0abf")
        buf.write("\3\2\2\2\u0ac1\u0ac2\3\2\2\2\u0ac2\u0ac3\7\u01db\2\2\u0ac3")
        buf.write("\u0ac5\3\2\2\2\u0ac4\u0aaa\3\2\2\2\u0ac4\u0ab2\3\2\2\2")
        buf.write("\u0ac5\u0123\3\2\2\2\u0ac6\u0ac7\5\u0180\u00c1\2\u0ac7")
        buf.write("\u0ac8\7\u01c9\2\2\u0ac8\u0ac9\t\61\2\2\u0ac9\u0125\3")
        buf.write("\2\2\2\u0aca\u0ad6\5\u00dan\2\u0acb\u0acc\7\u01da\2\2")
        buf.write("\u0acc\u0acd\5\u00dan\2\u0acd\u0ace\7\u01db\2\2\u0ace")
        buf.write("\u0ad6\3\2\2\2\u0acf\u0ad0\7\u01da\2\2\u0ad0\u0ad1\5\u013c")
        buf.write("\u009f\2\u0ad1\u0ad2\7\u01db\2\2\u0ad2\u0ad3\5\u011a\u008e")
        buf.write("\2\u0ad3\u0ad4\5\u0136\u009c\2\u0ad4\u0ad6\3\2\2\2\u0ad5")
        buf.write("\u0aca\3\2\2\2\u0ad5\u0acb\3\2\2\2\u0ad5\u0acf\3\2\2\2")
        buf.write("\u0ad6\u0127\3\2\2\2\u0ad7\u0b85\5\u0146\u00a4\2\u0ad8")
        buf.write("\u0b85\5\u0148\u00a5\2\u0ad9\u0ada\5\u0178\u00bd\2\u0ada")
        buf.write("\u0adc\7\u01da\2\2\u0adb\u0add\5\u013e\u00a0\2\u0adc\u0adb")
        buf.write("\3\2\2\2\u0adc\u0add\3\2\2\2\u0add\u0ade\3\2\2\2\u0ade")
        buf.write("\u0adf\7\u01db\2\2\u0adf\u0b85\3\2\2\2\u0ae0\u0b85\5\u0144")
        buf.write("\u00a3\2\u0ae1\u0ae2\7\u00e5\2\2\u0ae2\u0ae3\7\u01da\2")
        buf.write("\2\u0ae3\u0ae4\7\u01df\2\2\u0ae4\u0b85\7\u01db\2\2\u0ae5")
        buf.write("\u0ae6\7\u00e8\2\2\u0ae6\u0ae7\7\u01da\2\2\u0ae7\u0ae8")
        buf.write("\5\u00d2j\2\u0ae8\u0ae9\7\b\2\2\u0ae9\u0aea\5\u019e\u00d0")
        buf.write("\2\u0aea\u0aeb\7\u01db\2\2\u0aeb\u0b85\3\2\2\2\u0aec\u0aed")
        buf.write("\7%\2\2\u0aed\u0aee\7\u01da\2\2\u0aee\u0aef\5\u019e\u00d0")
        buf.write("\2\u0aef\u0af0\7\u01dc\2\2\u0af0\u0af3\5\u00d2j\2\u0af1")
        buf.write("\u0af2\7\u01dc\2\2\u0af2\u0af4\5\u00d2j\2\u0af3\u0af1")
        buf.write("\3\2\2\2\u0af3\u0af4\3\2\2\2\u0af4\u0af5\3\2\2\2\u0af5")
        buf.write("\u0af6\7\u01db\2\2\u0af6\u0b85\3\2\2\2\u0af7\u0af8\7\u00ed")
        buf.write("\2\2\u0af8\u0af9\7\u01da\2\2\u0af9\u0afa\7\u01df\2\2\u0afa")
        buf.write("\u0b85\7\u01db\2\2\u0afb\u0afc\7\33\2\2\u0afc\u0afd\7")
        buf.write("\u01da\2\2\u0afd\u0afe\5\u013e\u00a0\2\u0afe\u0aff\7\u01db")
        buf.write("\2\2\u0aff\u0b85\3\2\2\2\u0b00\u0b85\7+\2\2\u0b01\u0b85")
        buf.write("\7,\2\2\u0b02\u0b03\7\u00fc\2\2\u0b03\u0b04\7\u01da\2")
        buf.write("\2\u0b04\u0b05\7\u01c4\2\2\u0b05\u0b06\7\u01dc\2\2\u0b06")
        buf.write("\u0b07\5\u00d2j\2\u0b07\u0b08\7\u01dc\2\2\u0b08\u0b09")
        buf.write("\5\u00d2j\2\u0b09\u0b0a\7\u01db\2\2\u0b0a\u0b85\3\2\2")
        buf.write("\2\u0b0b\u0b0c\7\u00fd\2\2\u0b0c\u0b0d\7\u01da\2\2\u0b0d")
        buf.write("\u0b0e\7\u01c4\2\2\u0b0e\u0b0f\7\u01dc\2\2\u0b0f\u0b10")
        buf.write("\5\u00d2j\2\u0b10\u0b11\7\u01dc\2\2\u0b11\u0b12\5\u00d2")
        buf.write("j\2\u0b12\u0b13\7\u01db\2\2\u0b13\u0b85\3\2\2\2\u0b14")
        buf.write("\u0b15\7\u00fe\2\2\u0b15\u0b16\7\u01da\2\2\u0b16\u0b17")
        buf.write("\7\u01c4\2\2\u0b17\u0b18\7\u01dc\2\2\u0b18\u0b19\5\u00d2")
        buf.write("j\2\u0b19\u0b1a\7\u01db\2\2\u0b1a\u0b85\3\2\2\2\u0b1b")
        buf.write("\u0b1c\7\u00ff\2\2\u0b1c\u0b1d\7\u01da\2\2\u0b1d\u0b1e")
        buf.write("\7\u01c4\2\2\u0b1e\u0b1f\7\u01dc\2\2\u0b1f\u0b20\5\u00d2")
        buf.write("j\2\u0b20\u0b21\7\u01db\2\2\u0b21\u0b85\3\2\2\2\u0b22")
        buf.write("\u0b23\7\u0101\2\2\u0b23\u0b24\7\u01da\2\2\u0b24\u0b25")
        buf.write("\5\u00d2j\2\u0b25\u0b26\7\u01dc\2\2\u0b26\u0b27\5\u00d2")
        buf.write("j\2\u0b27\u0b28\7\u01dc\2\2\u0b28\u0b29\5\u00d2j\2\u0b29")
        buf.write("\u0b2a\7\u01dc\2\2\u0b2a\u0b2b\5\u00d2j\2\u0b2b\u0b2c")
        buf.write("\7\u01dc\2\2\u0b2c\u0b2d\5\u00d2j\2\u0b2d\u0b2e\7\u01dc")
        buf.write("\2\2\u0b2e\u0b2f\5\u00d2j\2\u0b2f\u0b30\7\u01dc\2\2\u0b30")
        buf.write("\u0b31\5\u00d2j\2\u0b31\u0b32\7\u01dc\2\2\u0b32\u0b33")
        buf.write("\5\u00d2j\2\u0b33\u0b34\7\u01dc\2\2\u0b34\u0b35\5\u00d2")
        buf.write("j\2\u0b35\u0b36\7\u01dc\2\2\u0b36\u0b37\5\u00d2j\2\u0b37")
        buf.write("\u0b38\7\u01db\2\2\u0b38\u0b85\3\2\2\2\u0b39\u0b3a\7V")
        buf.write("\2\2\u0b3a\u0b3b\7\u01da\2\2\u0b3b\u0b3e\5\u019e\u00d0")
        buf.write("\2\u0b3c\u0b3d\7\u01dc\2\2\u0b3d\u0b3f\7\u01c3\2\2\u0b3e")
        buf.write("\u0b3c\3\2\2\2\u0b3e\u0b3f\3\2\2\2\u0b3f\u0b42\3\2\2\2")
        buf.write("\u0b40\u0b41\7\u01dc\2\2\u0b41\u0b43\7\u01c3\2\2\u0b42")
        buf.write("\u0b40\3\2\2\2\u0b42\u0b43\3\2\2\2\u0b43\u0b44\3\2\2\2")
        buf.write("\u0b44\u0b45\7\u01db\2\2\u0b45\u0b85\3\2\2\2\u0b46\u0b47")
        buf.write("\7Y\2\2\u0b47\u0b48\7\u01da\2\2\u0b48\u0b49\5\u00e4s\2")
        buf.write("\u0b49\u0b4a\7\u01dc\2\2\u0b4a\u0b4b\5\u00d2j\2\u0b4b")
        buf.write("\u0b4c\7\u01dc\2\2\u0b4c\u0b4d\5\u00d2j\2\u0b4d\u0b4e")
        buf.write("\7\u01db\2\2\u0b4e\u0b85\3\2\2\2\u0b4f\u0b85\7\u014c\2")
        buf.write("\2\u0b50\u0b51\7t\2\2\u0b51\u0b52\7\u01da\2\2\u0b52\u0b53")
        buf.write("\5\u00d2j\2\u0b53\u0b54\7\u01dc\2\2\u0b54\u0b55\5\u00d2")
        buf.write("j\2\u0b55\u0b56\7\u01db\2\2\u0b56\u0b85\3\2\2\2\u0b57")
        buf.write("\u0b58\7\u0167\2\2\u0b58\u0b59\7\u01da\2\2\u0b59\u0b5a")
        buf.write("\5\u00d2j\2\u0b5a\u0b5b\7\b\2\2\u0b5b\u0b5e\5\u019e\u00d0")
        buf.write("\2\u0b5c\u0b5d\7\u01b3\2\2\u0b5d\u0b5f\5\u00d2j\2\u0b5e")
        buf.write("\u0b5c\3\2\2\2\u0b5e\u0b5f\3\2\2\2\u0b5f\u0b60\3\2\2\2")
        buf.write("\u0b60\u0b61\7\u01db\2\2\u0b61\u0b85\3\2\2\2\u0b62\u0b85")
        buf.write("\7\u00a6\2\2\u0b63\u0b64\7\u019b\2\2\u0b64\u0b65\7\u01da")
        buf.write("\2\2\u0b65\u0b66\5\u00d2j\2\u0b66\u0b67\7\u01dc\2\2\u0b67")
        buf.write("\u0b68\5\u00d2j\2\u0b68\u0b69\7\u01db\2\2\u0b69\u0b85")
        buf.write("\3\2\2\2\u0b6a\u0b85\7\u00af\2\2\u0b6b\u0b6c\7\u00bb\2")
        buf.write("\2\u0b6c\u0b6d\7\u01da\2\2\u0b6d\u0b6e\5\u019e\u00d0\2")
        buf.write("\u0b6e\u0b6f\7\u01dc\2\2\u0b6f\u0b70\5\u00d2j\2\u0b70")
        buf.write("\u0b71\7\u01db\2\2\u0b71\u0b85\3\2\2\2\u0b72\u0b73\7\u00ba")
        buf.write("\2\2\u0b73\u0b74\7\u01da\2\2\u0b74\u0b75\5\u00d2j\2\u0b75")
        buf.write("\u0b76\7\b\2\2\u0b76\u0b77\5\u019e\u00d0\2\u0b77\u0b78")
        buf.write("\7\u01db\2\2\u0b78\u0b85\3\2\2\2\u0b79\u0b7a\7\u00bc\2")
        buf.write("\2\u0b7a\u0b7b\7\u01da\2\2\u0b7b\u0b7c\5\u00d2j\2\u0b7c")
        buf.write("\u0b7d\7\b\2\2\u0b7d\u0b80\5\u019e\u00d0\2\u0b7e\u0b7f")
        buf.write("\7\u01b3\2\2\u0b7f\u0b81\5\u00d2j\2\u0b80\u0b7e\3\2\2")
        buf.write("\2\u0b80\u0b81\3\2\2\2\u0b81\u0b82\3\2\2\2\u0b82\u0b83")
        buf.write("\7\u01db\2\2\u0b83\u0b85\3\2\2\2\u0b84\u0ad7\3\2\2\2\u0b84")
        buf.write("\u0ad8\3\2\2\2\u0b84\u0ad9\3\2\2\2\u0b84\u0ae0\3\2\2\2")
        buf.write("\u0b84\u0ae1\3\2\2\2\u0b84\u0ae5\3\2\2\2\u0b84\u0aec\3")
        buf.write("\2\2\2\u0b84\u0af7\3\2\2\2\u0b84\u0afb\3\2\2\2\u0b84\u0b00")
        buf.write("\3\2\2\2\u0b84\u0b01\3\2\2\2\u0b84\u0b02\3\2\2\2\u0b84")
        buf.write("\u0b0b\3\2\2\2\u0b84\u0b14\3\2\2\2\u0b84\u0b1b\3\2\2\2")
        buf.write("\u0b84\u0b22\3\2\2\2\u0b84\u0b39\3\2\2\2\u0b84\u0b46\3")
        buf.write("\2\2\2\u0b84\u0b4f\3\2\2\2\u0b84\u0b50\3\2\2\2\u0b84\u0b57")
        buf.write("\3\2\2\2\u0b84\u0b62\3\2\2\2\u0b84\u0b63\3\2\2\2\u0b84")
        buf.write("\u0b6a\3\2\2\2\u0b84\u0b6b\3\2\2\2\u0b84\u0b72\3\2\2\2")
        buf.write("\u0b84\u0b79\3\2\2\2\u0b85\u0129\3\2\2\2\u0b86\u0b87\7")
        buf.write("\u00ca\2\2\u0b87\u0b88\5\u00d2j\2\u0b88\u0b89\7\u00b3")
        buf.write("\2\2\u0b89\u0b8a\5\u00d2j\2\u0b8a\u012b\3\2\2\2\u0b8b")
        buf.write("\u0b8c\7\u00ca\2\2\u0b8c\u0b8d\5\u00e4s\2\u0b8d\u0b8e")
        buf.write("\7\u00b3\2\2\u0b8e\u0b8f\5\u00d2j\2\u0b8f\u012d\3\2\2")
        buf.write("\2\u0b90\u0b92\7\u00cd\2\2\u0b91\u0b90\3\2\2\2\u0b91\u0b92")
        buf.write("\3\2\2\2\u0b92\u0b93\3\2\2\2\u0b93\u0b94\7\u01da\2\2\u0b94")
        buf.write("\u0b99\5\u0132\u009a\2\u0b95\u0b96\7\u01dc\2\2\u0b96\u0b98")
        buf.write("\5\u0132\u009a\2\u0b97\u0b95\3\2\2\2\u0b98\u0b9b\3\2\2")
        buf.write("\2\u0b99\u0b97\3\2\2\2\u0b99\u0b9a\3\2\2\2\u0b9a\u0b9c")
        buf.write("\3\2\2\2\u0b9b\u0b99\3\2\2\2\u0b9c\u0b9d\7\u01db\2\2\u0b9d")
        buf.write("\u012f\3\2\2\2\u0b9e\u0b9f\7\u00cd\2\2\u0b9f\u0ba0\7\u01da")
        buf.write("\2\2\u0ba0\u0ba5\5\u0132\u009a\2\u0ba1\u0ba2\7\u01dc\2")
        buf.write("\2\u0ba2\u0ba4\5\u0132\u009a\2\u0ba3\u0ba1\3\2\2\2\u0ba4")
        buf.write("\u0ba7\3\2\2\2\u0ba5\u0ba3\3\2\2\2\u0ba5\u0ba6\3\2\2\2")
        buf.write("\u0ba6\u0ba8\3\2\2\2\u0ba7\u0ba5\3\2\2\2\u0ba8\u0ba9\7")
        buf.write("\u01db\2\2\u0ba9\u0131\3\2\2\2\u0baa\u0bac\7\u0155\2\2")
        buf.write("\u0bab\u0baa\3\2\2\2\u0bab\u0bac\3\2\2\2\u0bac\u0bd3\3")
        buf.write("\2\2\2\u0bad\u0bae\7\\\2\2\u0bae\u0baf\7\u01da\2\2\u0baf")
        buf.write("\u0bb4\5\u0134\u009b\2\u0bb0\u0bb1\7\u01dc\2\2\u0bb1\u0bb3")
        buf.write("\5\u0134\u009b\2\u0bb2\u0bb0\3\2\2\2\u0bb3\u0bb6\3\2\2")
        buf.write("\2\u0bb4\u0bb2\3\2\2\2\u0bb4\u0bb5\3\2\2\2\u0bb5\u0bb7")
        buf.write("\3\2\2\2\u0bb6\u0bb4\3\2\2\2\u0bb7\u0bb8\7\u01db\2\2\u0bb8")
        buf.write("\u0bd4\3\2\2\2\u0bb9\u0bba\7\\\2\2\u0bba\u0bbb\7\u01c9")
        buf.write("\2\2\u0bbb\u0bd4\5\u0134\u009b\2\u0bbc\u0bcb\7K\2\2\u0bbd")
        buf.write("\u0bbe\7\u01da\2\2\u0bbe\u0bbf\5\u0134\u009b\2\u0bbf\u0bc0")
        buf.write("\7\u01da\2\2\u0bc0\u0bc5\7\u01c4\2\2\u0bc1\u0bc2\7\u01dc")
        buf.write("\2\2\u0bc2\u0bc4\7\u01c4\2\2\u0bc3\u0bc1\3\2\2\2\u0bc4")
        buf.write("\u0bc7\3\2\2\2\u0bc5\u0bc3\3\2\2\2\u0bc5\u0bc6\3\2\2\2")
        buf.write("\u0bc6\u0bc8\3\2\2\2\u0bc7\u0bc5\3\2\2\2\u0bc8\u0bc9\7")
        buf.write("\u01db\2\2\u0bc9\u0bca\7\u01db\2\2\u0bca\u0bcc\3\2\2\2")
        buf.write("\u0bcb\u0bbd\3\2\2\2\u0bcb\u0bcc\3\2\2\2\u0bcc\u0bd4\3")
        buf.write("\2\2\2\u0bcd\u0bd4\7\u018c\2\2\u0bce\u0bd4\7\u0194\2\2")
        buf.write("\u0bcf\u0bd0\7\u0195\2\2\u0bd0\u0bd1\7\u01c9\2\2\u0bd1")
        buf.write("\u0bd4\7\u01c3\2\2\u0bd2\u0bd4\7\u01c4\2\2\u0bd3\u0bad")
        buf.write("\3\2\2\2\u0bd3\u0bb9\3\2\2\2\u0bd3\u0bbc\3\2\2\2\u0bd3")
        buf.write("\u0bcd\3\2\2\2\u0bd3\u0bce\3\2\2\2\u0bd3\u0bcf\3\2\2\2")
        buf.write("\u0bd3\u0bd2\3\2\2\2\u0bd3\u0bd4\3\2\2\2\u0bd4\u0133\3")
        buf.write("\2\2\2\u0bd5\u0bd8\5\u0180\u00c1\2\u0bd6\u0bd8\7\u01c3")
        buf.write("\2\2\u0bd7\u0bd5\3\2\2\2\u0bd7\u0bd6\3\2\2\2\u0bd8\u0135")
        buf.write("\3\2\2\2\u0bd9\u0bda\7\u01da\2\2\u0bda\u0bdf\5\u0138\u009d")
        buf.write("\2\u0bdb\u0bdc\7\u01dc\2\2\u0bdc\u0bde\5\u0138\u009d\2")
        buf.write("\u0bdd\u0bdb\3\2\2\2\u0bde\u0be1\3\2\2\2\u0bdf\u0bdd\3")
        buf.write("\2\2\2\u0bdf\u0be0\3\2\2\2\u0be0\u0be2\3\2\2\2\u0be1\u0bdf")
        buf.write("\3\2\2\2\u0be2\u0be3\7\u01db\2\2\u0be3\u0137\3\2\2\2\u0be4")
        buf.write("\u0be7\5\u0180\u00c1\2\u0be5\u0be7\7\u01c5\2\2\u0be6\u0be4")
        buf.write("\3\2\2\2\u0be6\u0be5\3\2\2\2\u0be7\u0139\3\2\2\2\u0be8")
        buf.write("\u0be9\7\u01df\2\2\u0be9\u013b\3\2\2\2\u0bea\u0beb\7\u00c5")
        buf.write("\2\2\u0beb\u0bf0\5\u0140\u00a1\2\u0bec\u0bed\7\u01dc\2")
        buf.write("\2\u0bed\u0bef\5\u0140\u00a1\2\u0bee\u0bec\3\2\2\2\u0bef")
        buf.write("\u0bf2\3\2\2\2\u0bf0\u0bee\3\2\2\2\u0bf0\u0bf1\3\2\2\2")
        buf.write("\u0bf1\u013d\3\2\2\2\u0bf2\u0bf0\3\2\2\2\u0bf3\u0bf8\5")
        buf.write("\u00d2j\2\u0bf4\u0bf5\7\u01dc\2\2\u0bf5\u0bf7\5\u00d2")
        buf.write("j\2\u0bf6\u0bf4\3\2\2\2\u0bf7\u0bfa\3\2\2\2\u0bf8\u0bf6")
        buf.write("\3\2\2\2\u0bf8\u0bf9\3\2\2\2\u0bf9\u013f\3\2\2\2\u0bfa")
        buf.write("\u0bf8\3\2\2\2\u0bfb\u0bfc\7\u01da\2\2\u0bfc\u0bfd\5\u013e")
        buf.write("\u00a0\2\u0bfd\u0bfe\7\u01db\2\2\u0bfe\u0141\3\2\2\2\u0bff")
        buf.write("\u0c00\7n\2\2\u0c00\u0c01\7\u00c6\2\2\u0c01\u0c02\7J\2")
        buf.write("\2\u0c02\u0143\3\2\2\2\u0c03\u0c04\5\u0142\u00a2\2\u0c04")
        buf.write("\u0c05\5\u0168\u00b5\2\u0c05\u0c06\5\u014c\u00a7\2\u0c06")
        buf.write("\u0145\3\2\2\2\u0c07\u0c08\t\62\2\2\u0c08\u0c09\7\u01da")
        buf.write("\2\2\u0c09\u0c0a\7\u01db\2\2\u0c0a\u0c1f\5\u014c\u00a7")
        buf.write("\2\u0c0b\u0c0c\t\63\2\2\u0c0c\u0c0d\7\u01da\2\2\u0c0d")
        buf.write("\u0c0e\5\u00d2j\2\u0c0e\u0c0f\7\u01db\2\2\u0c0f\u0c10")
        buf.write("\5\u014c\u00a7\2\u0c10\u0c1f\3\2\2\2\u0c11\u0c12\t\64")
        buf.write("\2\2\u0c12\u0c13\7\u01da\2\2\u0c13\u0c18\5\u00d2j\2\u0c14")
        buf.write("\u0c15\7\u01dc\2\2\u0c15\u0c17\5\u00d2j\2\u0c16\u0c14")
        buf.write("\3\2\2\2\u0c17\u0c1a\3\2\2\2\u0c18\u0c16\3\2\2\2\u0c18")
        buf.write("\u0c19\3\2\2\2\u0c19\u0c1b\3\2\2\2\u0c1a\u0c18\3\2\2\2")
        buf.write("\u0c1b\u0c1c\7\u01db\2\2\u0c1c\u0c1d\5\u014c\u00a7\2\u0c1d")
        buf.write("\u0c1f\3\2\2\2\u0c1e\u0c07\3\2\2\2\u0c1e\u0c0b\3\2\2\2")
        buf.write("\u0c1e\u0c11\3\2\2\2\u0c1f\u0147\3\2\2\2\u0c20\u0c21\t")
        buf.write("\65\2\2\u0c21\u0c23\7\u01da\2\2\u0c22\u0c24\5\u014a\u00a6")
        buf.write("\2\u0c23\u0c22\3\2\2\2\u0c23\u0c24\3\2\2\2\u0c24\u0c25")
        buf.write("\3\2\2\2\u0c25\u0c26\5\u00d2j\2\u0c26\u0c28\7\u01db\2")
        buf.write("\2\u0c27\u0c29\5\u014c\u00a7\2\u0c28\u0c27\3\2\2\2\u0c28")
        buf.write("\u0c29\3\2\2\2\u0c29\u0c4a\3\2\2\2\u0c2a\u0c2b\t\66\2")
        buf.write("\2\u0c2b\u0c31\7\u01da\2\2\u0c2c\u0c32\7\u01df\2\2\u0c2d")
        buf.write("\u0c2f\5\u014a\u00a6\2\u0c2e\u0c2d\3\2\2\2\u0c2e\u0c2f")
        buf.write("\3\2\2\2\u0c2f\u0c30\3\2\2\2\u0c30\u0c32\5\u00d2j\2\u0c31")
        buf.write("\u0c2c\3\2\2\2\u0c31\u0c2e\3\2\2\2\u0c32\u0c33\3\2\2\2")
        buf.write("\u0c33\u0c35\7\u01db\2\2\u0c34\u0c36\5\u014c\u00a7\2\u0c35")
        buf.write("\u0c34\3\2\2\2\u0c35\u0c36\3\2\2\2\u0c36\u0c4a\3\2\2\2")
        buf.write("\u0c37\u0c38\7\u00ee\2\2\u0c38\u0c3a\7\u01da\2\2\u0c39")
        buf.write("\u0c3b\5\u014a\u00a6\2\u0c3a\u0c39\3\2\2\2\u0c3a\u0c3b")
        buf.write("\3\2\2\2\u0c3b\u0c3c\3\2\2\2\u0c3c\u0c3d\5\u00d2j\2\u0c3d")
        buf.write("\u0c3e\7\u01db\2\2\u0c3e\u0c4a\3\2\2\2\u0c3f\u0c40\7\u0126")
        buf.write("\2\2\u0c40\u0c41\7\u01da\2\2\u0c41\u0c42\5\u00d2j\2\u0c42")
        buf.write("\u0c43\7\u01db\2\2\u0c43\u0c4a\3\2\2\2\u0c44\u0c45\7\u0127")
        buf.write("\2\2\u0c45\u0c46\7\u01da\2\2\u0c46\u0c47\5\u013e\u00a0")
        buf.write("\2\u0c47\u0c48\7\u01db\2\2\u0c48\u0c4a\3\2\2\2\u0c49\u0c20")
        buf.write("\3\2\2\2\u0c49\u0c2a\3\2\2\2\u0c49\u0c37\3\2\2\2\u0c49")
        buf.write("\u0c3f\3\2\2\2\u0c49\u0c44\3\2\2\2\u0c4a\u0149\3\2\2\2")
        buf.write("\u0c4b\u0c4c\t%\2\2\u0c4c\u014b\3\2\2\2\u0c4d\u0c4e\7")
        buf.write("\u0083\2\2\u0c4e\u0c52\7\u01da\2\2\u0c4f\u0c50\7\u0168")
        buf.write("\2\2\u0c50\u0c51\7\21\2\2\u0c51\u0c53\5\u013e\u00a0\2")
        buf.write("\u0c52\u0c4f\3\2\2\2\u0c52\u0c53\3\2\2\2\u0c53\u0c55\3")
        buf.write("\2\2\2\u0c54\u0c56\5\u00f8}\2\u0c55\u0c54\3\2\2\2\u0c55")
        buf.write("\u0c56\3\2\2\2\u0c56\u0c58\3\2\2\2\u0c57\u0c59\5\u014e")
        buf.write("\u00a8\2\u0c58\u0c57\3\2\2\2\u0c58\u0c59\3\2\2\2\u0c59")
        buf.write("\u0c5a\3\2\2\2\u0c5a\u0c5b\7\u01db\2\2\u0c5b\u014d\3\2")
        buf.write("\2\2\u0c5c\u0c5d\t\67\2\2\u0c5d\u0c5e\5\u0150\u00a9\2")
        buf.write("\u0c5e\u014f\3\2\2\2\u0c5f\u0c66\5\u0154\u00ab\2\u0c60")
        buf.write("\u0c61\7\r\2\2\u0c61\u0c62\5\u0152\u00aa\2\u0c62\u0c63")
        buf.write("\7\6\2\2\u0c63\u0c64\5\u0152\u00aa\2\u0c64\u0c66\3\2\2")
        buf.write("\2\u0c65\u0c5f\3\2\2\2\u0c65\u0c60\3\2\2\2\u0c66\u0151")
        buf.write("\3\2\2\2\u0c67\u0c6a\5\u0154\u00ab\2\u0c68\u0c6a\5\u0156")
        buf.write("\u00ac\2\u0c69\u0c67\3\2\2\2\u0c69\u0c68\3\2\2\2\u0c6a")
        buf.write("\u0153\3\2\2\2\u0c6b\u0c6c\7\u01af\2\2\u0c6c\u0c72\7\u016c")
        buf.write("\2\2\u0c6d\u0c6e\7\u01c3\2\2\u0c6e\u0c72\7\u016c\2\2\u0c6f")
        buf.write("\u0c70\7(\2\2\u0c70\u0c72\7\u0182\2\2\u0c71\u0c6b\3\2")
        buf.write("\2\2\u0c71\u0c6d\3\2\2\2\u0c71\u0c6f\3\2\2\2\u0c72\u0155")
        buf.write("\3\2\2\2\u0c73\u0c74\7\u01af\2\2\u0c74\u0c78\7\u011e\2")
        buf.write("\2\u0c75\u0c76\7\u01c3\2\2\u0c76\u0c78\7\u011e\2\2\u0c77")
        buf.write("\u0c73\3\2\2\2\u0c77\u0c75\3\2\2\2\u0c78\u0157\3\2\2\2")
        buf.write("\u0c79\u0c7a\7\u011a\2\2\u0c7a\u0c7f\5\u015a\u00ae\2\u0c7b")
        buf.write("\u0c7c\7\u01dc\2\2\u0c7c\u0c7e\5\u015a\u00ae\2\u0c7d\u0c7b")
        buf.write("\3\2\2\2\u0c7e\u0c81\3\2\2\2\u0c7f\u0c7d\3\2\2\2\u0c7f")
        buf.write("\u0c80\3\2\2\2\u0c80\u0c9c\3\2\2\2\u0c81\u0c7f\3\2\2\2")
        buf.write("\u0c82\u0c83\7\u0106\2\2\u0c83\u0c86\7\u01c9\2\2\u0c84")
        buf.write("\u0c87\5\u0180\u00c1\2\u0c85\u0c87\7\u01c5\2\2\u0c86\u0c84")
        buf.write("\3\2\2\2\u0c86\u0c85\3\2\2\2\u0c87\u0c9c\3\2\2\2\u0c88")
        buf.write("\u0c89\7\u0105\2\2\u0c89\u0c8c\7\u01c9\2\2\u0c8a\u0c8d")
        buf.write("\5\u0180\u00c1\2\u0c8b\u0c8d\7\u01c5\2\2\u0c8c\u0c8a\3")
        buf.write("\2\2\2\u0c8c\u0c8b\3\2\2\2\u0c8d\u0c9c\3\2\2\2\u0c8e\u0c8f")
        buf.write("\7\u0151\2\2\u0c8f\u0c90\7\u01c9\2\2\u0c90\u0c9c\t\13")
        buf.write("\2\2\u0c91\u0c92\7\u01a9\2\2\u0c92\u0c93\7\u01c9\2\2\u0c93")
        buf.write("\u0c9c\t\13\2\2\u0c94\u0c95\7\u01ac\2\2\u0c95\u0c96\7")
        buf.write("\u01c9\2\2\u0c96\u0c9c\7\u01c3\2\2\u0c97\u0c98\7\u0104")
        buf.write("\2\2\u0c98\u0c9c\t\13\2\2\u0c99\u0c9a\7\u01aa\2\2\u0c9a")
        buf.write("\u0c9c\t\13\2\2\u0c9b\u0c79\3\2\2\2\u0c9b\u0c82\3\2\2")
        buf.write("\2\u0c9b\u0c88\3\2\2\2\u0c9b\u0c8e\3\2\2\2\u0c9b\u0c91")
        buf.write("\3\2\2\2\u0c9b\u0c94\3\2\2\2\u0c9b\u0c97\3\2\2\2\u0c9b")
        buf.write("\u0c99\3\2\2\2\u0c9c\u0159\3\2\2\2\u0c9d\u0ca4\7\u01da")
        buf.write("\2\2\u0c9e\u0c9f\7\u0156\2\2\u0c9f\u0ca0\7\u01c9\2\2\u0ca0")
        buf.write("\u0ca5\t8\2\2\u0ca1\u0ca2\7\u010b\2\2\u0ca2\u0ca3\7\u01c9")
        buf.write("\2\2\u0ca3\u0ca5\7\u01c5\2\2\u0ca4\u0c9e\3\2\2\2\u0ca4")
        buf.write("\u0ca1\3\2\2\2\u0ca5\u0ca6\3\2\2\2\u0ca6\u0ca7\7\u01db")
        buf.write("\2\2\u0ca7\u015b\3\2\2\2\u0ca8\u0cab\5\u015e\u00b0\2\u0ca9")
        buf.write("\u0cab\5\u0160\u00b1\2\u0caa\u0ca8\3\2\2\2\u0caa\u0ca9")
        buf.write("\3\2\2\2\u0cab\u015d\3\2\2\2\u0cac\u0cad\7\u0118\2\2\u0cad")
        buf.write("\u0cb0\5\u0180\u00c1\2\u0cae\u0caf\7\"\2\2\u0caf\u0cb1")
        buf.write("\7\u011a\2\2\u0cb0\u0cae\3\2\2\2\u0cb0\u0cb1\3\2\2\2\u0cb1")
        buf.write("\u0cb3\3\2\2\2\u0cb2\u0cb4\7\62\2\2\u0cb3\u0cb2\3\2\2")
        buf.write("\2\u0cb3\u0cb4\3\2\2\2\u0cb4\u0cb7\3\2\2\2\u0cb5\u0cb6")
        buf.write("\7\"\2\2\u0cb6\u0cb8\7\u0149\2\2\u0cb7\u0cb5\3\2\2\2\u0cb7")
        buf.write("\u0cb8\3\2\2\2\u0cb8\u0cb9\3\2\2\2\u0cb9\u0cbe\5\u0160")
        buf.write("\u00b1\2\u0cba\u0cbb\7\u01dc\2\2\u0cbb\u0cbd\5\u0160\u00b1")
        buf.write("\2\u0cbc\u0cba\3\2\2\2\u0cbd\u0cc0\3\2\2\2\u0cbe\u0cbc")
        buf.write("\3\2\2\2\u0cbe\u0cbf\3\2\2\2\u0cbf\u015f\3\2\2\2\u0cc0")
        buf.write("\u0cbe\3\2\2\2\u0cc1\u0cc2\7\u01da\2\2\u0cc2\u0cc3\7\u0150")
        buf.write("\2\2\u0cc3\u0cc6\7\u01c9\2\2\u0cc4\u0cc7\5\u0180\u00c1")
        buf.write("\2\u0cc5\u0cc7\7\u01c5\2\2\u0cc6\u0cc4\3\2\2\2\u0cc6\u0cc5")
        buf.write("\3\2\2\2\u0cc7\u0cc9\3\2\2\2\u0cc8\u0cca\7\u01dc\2\2\u0cc9")
        buf.write("\u0cc8\3\2\2\2\u0cc9\u0cca\3\2\2\2\u0cca\u0ccb\3\2\2\2")
        buf.write("\u0ccb\u0ccc\7H\2\2\u0ccc\u0ccd\7\u01c9\2\2\u0ccd\u0ccf")
        buf.write("\7\u01c5\2\2\u0cce\u0cd0\7\u01dc\2\2\u0ccf\u0cce\3\2\2")
        buf.write("\2\u0ccf\u0cd0\3\2\2\2\u0cd0\u0cd7\3\2\2\2\u0cd1\u0cd2")
        buf.write("\7\u0192\2\2\u0cd2\u0cd3\7\u01c9\2\2\u0cd3\u0cd5\5\u0188")
        buf.write("\u00c5\2\u0cd4\u0cd6\7\u01dc\2\2\u0cd5\u0cd4\3\2\2\2\u0cd5")
        buf.write("\u0cd6\3\2\2\2\u0cd6\u0cd8\3\2\2\2\u0cd7\u0cd1\3\2\2\2")
        buf.write("\u0cd7\u0cd8\3\2\2\2\u0cd8\u0ce2\3\2\2\2\u0cd9\u0cda\7")
        buf.write("\u0147\2\2\u0cda\u0cdd\7\u01c9\2\2\u0cdb\u0cde\5\u0188")
        buf.write("\u00c5\2\u0cdc\u0cde\7\u01b2\2\2\u0cdd\u0cdb\3\2\2\2\u0cdd")
        buf.write("\u0cdc\3\2\2\2\u0cde\u0ce0\3\2\2\2\u0cdf\u0ce1\7\u01dc")
        buf.write("\2\2\u0ce0\u0cdf\3\2\2\2\u0ce0\u0ce1\3\2\2\2\u0ce1\u0ce3")
        buf.write("\3\2\2\2\u0ce2\u0cd9\3\2\2\2\u0ce2\u0ce3\3\2\2\2\u0ce3")
        buf.write("\u0cea\3\2\2\2\u0ce4\u0ce5\7\u0119\2\2\u0ce5\u0ce6\7\u01c9")
        buf.write("\2\2\u0ce6\u0ce8\5\u0188\u00c5\2\u0ce7\u0ce9\7\u01dc\2")
        buf.write("\2\u0ce8\u0ce7\3\2\2\2\u0ce8\u0ce9\3\2\2\2\u0ce9\u0ceb")
        buf.write("\3\2\2\2\u0cea\u0ce4\3\2\2\2\u0cea\u0ceb\3\2\2\2\u0ceb")
        buf.write("\u0cec\3\2\2\2\u0cec\u0ced\7\u01db\2\2\u0ced\u0161\3\2")
        buf.write("\2\2\u0cee\u0cef\5\u0180\u00c1\2\u0cef\u0cf0\7\u01d5\2")
        buf.write("\2\u0cf0\u0cf1\5\u0180\u00c1\2\u0cf1\u0cf2\7\u01d5\2\2")
        buf.write("\u0cf2\u0cf3\5\u0180\u00c1\2\u0cf3\u0cf4\7\u01d5\2\2\u0cf4")
        buf.write("\u0d00\3\2\2\2\u0cf5\u0cf6\5\u0180\u00c1\2\u0cf6\u0cf8")
        buf.write("\7\u01d5\2\2\u0cf7\u0cf9\5\u0180\u00c1\2\u0cf8\u0cf7\3")
        buf.write("\2\2\2\u0cf8\u0cf9\3\2\2\2\u0cf9\u0cfa\3\2\2\2\u0cfa\u0cfb")
        buf.write("\7\u01d5\2\2\u0cfb\u0d00\3\2\2\2\u0cfc\u0cfd\5\u0180\u00c1")
        buf.write("\2\u0cfd\u0cfe\7\u01d5\2\2\u0cfe\u0d00\3\2\2\2\u0cff\u0cee")
        buf.write("\3\2\2\2\u0cff\u0cf5\3\2\2\2\u0cff\u0cfc\3\2\2\2\u0cff")
        buf.write("\u0d00\3\2\2\2\u0d00\u0d01\3\2\2\2\u0d01\u0d02\5\u0180")
        buf.write("\u00c1\2\u0d02\u0163\3\2\2\2\u0d03\u0d04\5\u0180\u00c1")
        buf.write("\2\u0d04\u0d06\7\u01d5\2\2\u0d05\u0d07\5\u0180\u00c1\2")
        buf.write("\u0d06\u0d05\3\2\2\2\u0d06\u0d07\3\2\2\2\u0d07\u0d08\3")
        buf.write("\2\2\2\u0d08\u0d09\7\u01d5\2\2\u0d09\u0d0e\3\2\2\2\u0d0a")
        buf.write("\u0d0b\5\u0180\u00c1\2\u0d0b\u0d0c\7\u01d5\2\2\u0d0c\u0d0e")
        buf.write("\3\2\2\2\u0d0d\u0d03\3\2\2\2\u0d0d\u0d0a\3\2\2\2\u0d0d")
        buf.write("\u0d0e\3\2\2\2\u0d0e\u0d0f\3\2\2\2\u0d0f\u0d10\5\u0180")
        buf.write("\u00c1\2\u0d10\u0165\3\2\2\2\u0d11\u0d12\5\u0180\u00c1")
        buf.write("\2\u0d12\u0d13\7\u01d5\2\2\u0d13\u0d15\3\2\2\2\u0d14\u0d11")
        buf.write("\3\2\2\2\u0d14\u0d15\3\2\2\2\u0d15\u0d16\3\2\2\2\u0d16")
        buf.write("\u0d17\5\u0180\u00c1\2\u0d17\u0167\3\2\2\2\u0d18\u0d19")
        buf.write("\5\u0180\u00c1\2\u0d19\u0d1b\7\u01d5\2\2\u0d1a\u0d1c\5")
        buf.write("\u0180\u00c1\2\u0d1b\u0d1a\3\2\2\2\u0d1b\u0d1c\3\2\2\2")
        buf.write("\u0d1c\u0d1d\3\2\2\2\u0d1d\u0d1e\7\u01d5\2\2\u0d1e\u0d23")
        buf.write("\3\2\2\2\u0d1f\u0d20\5\u0180\u00c1\2\u0d20\u0d21\7\u01d5")
        buf.write("\2\2\u0d21\u0d23\3\2\2\2\u0d22\u0d18\3\2\2\2\u0d22\u0d1f")
        buf.write("\3\2\2\2\u0d22\u0d23\3\2\2\2\u0d23\u0d24\3\2\2\2\u0d24")
        buf.write("\u0d25\5\u0180\u00c1\2\u0d25\u0169\3\2\2\2\u0d26\u0d29")
        buf.write("\5\u0162\u00b2\2\u0d27\u0d29\7\u01c2\2\2\u0d28\u0d26\3")
        buf.write("\2\2\2\u0d28\u0d27\3\2\2\2\u0d29\u016b\3\2\2\2\u0d2a\u0d2b")
        buf.write("\5\u0164\u00b3\2\u0d2b\u0d2c\7\u01d5\2\2\u0d2c\u0d2e\3")
        buf.write("\2\2\2\u0d2d\u0d2a\3\2\2\2\u0d2d\u0d2e\3\2\2\2\u0d2e\u0d2f")
        buf.write("\3\2\2\2\u0d2f\u0d30\5\u0180\u00c1\2\u0d30\u016d\3\2\2")
        buf.write("\2\u0d31\u0d36\5\u0180\u00c1\2\u0d32\u0d33\7\u01dc\2\2")
        buf.write("\u0d33\u0d35\5\u0180\u00c1\2\u0d34\u0d32\3\2\2\2\u0d35")
        buf.write("\u0d38\3\2\2\2\u0d36\u0d34\3\2\2\2\u0d36\u0d37\3\2\2\2")
        buf.write("\u0d37\u016f\3\2\2\2\u0d38\u0d36\3\2\2\2\u0d39\u0d3c\5")
        buf.write("\u0180\u00c1\2\u0d3a\u0d3c\7\u01c2\2\2\u0d3b\u0d39\3\2")
        buf.write("\2\2\u0d3b\u0d3a\3\2\2\2\u0d3c\u0171\3\2\2\2\u0d3d\u0d3e")
        buf.write("\t\13\2\2\u0d3e\u0173\3\2\2\2\u0d3f\u0d40\t9\2\2\u0d40")
        buf.write("\u0175\3\2\2\2\u0d41\u0d43\7r\2\2\u0d42\u0d41\3\2\2\2")
        buf.write("\u0d42\u0d43\3\2\2\2\u0d43\u0d44\3\2\2\2\u0d44\u0d45\7")
        buf.write("s\2\2\u0d45\u0177\3\2\2\2\u0d46\u0d59\5\u0168\u00b5\2")
        buf.write("\u0d47\u0d59\7\u009a\2\2\u0d48\u0d59\7f\2\2\u0d49\u0d59")
        buf.write("\7\u00e5\2\2\u0d4a\u0d59\7\u00ed\2\2\u0d4b\u0d59\7D\2")
        buf.write("\2\u0d4c\u0d59\7j\2\2\u0d4d\u0d59\7k\2\2\u0d4e\u0d59\7")
        buf.write("\u019e\2\2\u0d4f\u0d59\7\u019d\2\2\u0d50\u0d59\7\u0181")
        buf.write("\2\2\u0d51\u0d59\7\u00ea\2\2\u0d52\u0d59\7\u011d\2\2\u0d53")
        buf.write("\u0d59\7\u016b\2\2\u0d54\u0d59\7\u00f5\2\2\u0d55\u0d59")
        buf.write("\7\u0190\2\2\u0d56\u0d59\7\u01a0\2\2\u0d57\u0d59\7\u00aa")
        buf.write("\2\2\u0d58\u0d46\3\2\2\2\u0d58\u0d47\3\2\2\2\u0d58\u0d48")
        buf.write("\3\2\2\2\u0d58\u0d49\3\2\2\2\u0d58\u0d4a\3\2\2\2\u0d58")
        buf.write("\u0d4b\3\2\2\2\u0d58\u0d4c\3\2\2\2\u0d58\u0d4d\3\2\2\2")
        buf.write("\u0d58\u0d4e\3\2\2\2\u0d58\u0d4f\3\2\2\2\u0d58\u0d50\3")
        buf.write("\2\2\2\u0d58\u0d51\3\2\2\2\u0d58\u0d52\3\2\2\2\u0d58\u0d53")
        buf.write("\3\2\2\2\u0d58\u0d54\3\2\2\2\u0d58\u0d55\3\2\2\2\u0d58")
        buf.write("\u0d56\3\2\2\2\u0d58\u0d57\3\2\2\2\u0d59\u0179\3\2\2\2")
        buf.write("\u0d5a\u0d5d\7s\2\2\u0d5b\u0d5d\5\u017c\u00bf\2\u0d5c")
        buf.write("\u0d5a\3\2\2\2\u0d5c\u0d5b\3\2\2\2\u0d5d\u017b\3\2\2\2")
        buf.write("\u0d5e\u0d6e\7\u01c5\2\2\u0d5f\u0d6e\7\u01c6\2\2\u0d60")
        buf.write("\u0d62\5\u017e\u00c0\2\u0d61\u0d60\3\2\2\2\u0d61\u0d62")
        buf.write("\3\2\2\2\u0d62\u0d63\3\2\2\2\u0d63\u0d6e\7\u01c3\2\2\u0d64")
        buf.write("\u0d66\5\u017e\u00c0\2\u0d65\u0d64\3\2\2\2\u0d65\u0d66")
        buf.write("\3\2\2\2\u0d66\u0d67\3\2\2\2\u0d67\u0d6e\t:\2\2\u0d68")
        buf.write("\u0d6a\5\u017e\u00c0\2\u0d69\u0d68\3\2\2\2\u0d69\u0d6a")
        buf.write("\3\2\2\2\u0d6a\u0d6b\3\2\2\2\u0d6b\u0d6c\7\u01d9\2\2\u0d6c")
        buf.write("\u0d6e\t;\2\2\u0d6d\u0d5e\3\2\2\2\u0d6d\u0d5f\3\2\2\2")
        buf.write("\u0d6d\u0d61\3\2\2\2\u0d6d\u0d65\3\2\2\2\u0d6d\u0d69\3")
        buf.write("\2\2\2\u0d6e\u017d\3\2\2\2\u0d6f\u0d70\t \2\2\u0d70\u017f")
        buf.write("\3\2\2\2\u0d71\u0d75\5\u0182\u00c2\2\u0d72\u0d75\7\u01c0")
        buf.write("\2\2\u0d73\u0d75\7\u01c1\2\2\u0d74\u0d71\3\2\2\2\u0d74")
        buf.write("\u0d72\3\2\2\2\u0d74\u0d73\3\2\2\2\u0d75\u0181\3\2\2\2")
        buf.write("\u0d76\u0d77\t<\2\2\u0d77\u0183\3\2\2\2\u0d78\u0d88\7")
        buf.write("\u01c9\2\2\u0d79\u0d88\7\u01ca\2\2\u0d7a\u0d88\7\u01cb")
        buf.write("\2\2\u0d7b\u0d7c\7\u01cb\2\2\u0d7c\u0d88\7\u01c9\2\2\u0d7d")
        buf.write("\u0d7e\7\u01ca\2\2\u0d7e\u0d88\7\u01c9\2\2\u0d7f\u0d80")
        buf.write("\7\u01cb\2\2\u0d80\u0d88\7\u01ca\2\2\u0d81\u0d82\7\u01cc")
        buf.write("\2\2\u0d82\u0d88\7\u01c9\2\2\u0d83\u0d84\7\u01cc\2\2\u0d84")
        buf.write("\u0d88\7\u01ca\2\2\u0d85\u0d86\7\u01cc\2\2\u0d86\u0d88")
        buf.write("\7\u01cb\2\2\u0d87\u0d78\3\2\2\2\u0d87\u0d79\3\2\2\2\u0d87")
        buf.write("\u0d7a\3\2\2\2\u0d87\u0d7b\3\2\2\2\u0d87\u0d7d\3\2\2\2")
        buf.write("\u0d87\u0d7f\3\2\2\2\u0d87\u0d81\3\2\2\2\u0d87\u0d83\3")
        buf.write("\2\2\2\u0d87\u0d85\3\2\2\2\u0d88\u0185\3\2\2\2\u0d89\u0d8a")
        buf.write("\t=\2\2\u0d8a\u0187\3\2\2\2\u0d8b\u0d8d\7\u01c3\2\2\u0d8c")
        buf.write("\u0d8e\t>\2\2\u0d8d\u0d8c\3\2\2\2\u0d8d\u0d8e\3\2\2\2")
        buf.write("\u0d8e\u0189\3\2\2\2\u0d8f\u0d92\7&\2\2\u0d90\u0d91\7")
        buf.write("\u0080\2\2\u0d91\u0d93\7\5\2\2\u0d92\u0d90\3\2\2\2\u0d92")
        buf.write("\u0d93\3\2\2\2\u0d93\u0d96\3\2\2\2\u0d94\u0d96\7\5\2\2")
        buf.write("\u0d95\u0d8f\3\2\2\2\u0d95\u0d94\3\2\2\2\u0d96\u0d97\3")
        buf.write("\2\2\2\u0d97\u0d98\t?\2\2\u0d98\u0d9b\5\u0168\u00b5\2")
        buf.write("\u0d99\u0d9a\7\u01dd\2\2\u0d9a\u0d9c\7\u01c3\2\2\u0d9b")
        buf.write("\u0d99\3\2\2\2\u0d9b\u0d9c\3\2\2\2\u0d9c\u0dab\3\2\2\2")
        buf.write("\u0d9d\u0d9f\7\u01da\2\2\u0d9e\u0d9d\3\2\2\2\u0d9e\u0d9f")
        buf.write("\3\2\2\2\u0d9f\u0da0\3\2\2\2\u0da0\u0da5\5\u0194\u00cb")
        buf.write("\2\u0da1\u0da2\7\u01dc\2\2\u0da2\u0da4\5\u0194\u00cb\2")
        buf.write("\u0da3\u0da1\3\2\2\2\u0da4\u0da7\3\2\2\2\u0da5\u0da3\3")
        buf.write("\2\2\2\u0da5\u0da6\3\2\2\2\u0da6\u0da9\3\2\2\2\u0da7\u0da5")
        buf.write("\3\2\2\2\u0da8\u0daa\7\u01db\2\2\u0da9\u0da8\3\2\2\2\u0da9")
        buf.write("\u0daa\3\2\2\2\u0daa\u0dac\3\2\2\2\u0dab\u0d9e\3\2\2\2")
        buf.write("\u0dab\u0dac\3\2\2\2\u0dac\u0db6\3\2\2\2\u0dad\u0dae\7")
        buf.write("\u00cd\2\2\u0dae\u0db3\5\u0196\u00cc\2\u0daf\u0db0\7\u01dc")
        buf.write("\2\2\u0db0\u0db2\5\u0196\u00cc\2\u0db1\u0daf\3\2\2\2\u0db2")
        buf.write("\u0db5\3\2\2\2\u0db3\u0db1\3\2\2\2\u0db3\u0db4\3\2\2\2")
        buf.write("\u0db4\u0db7\3\2\2\2\u0db5\u0db3\3\2\2\2\u0db6\u0dad\3")
        buf.write("\2\2\2\u0db6\u0db7\3\2\2\2\u0db7\u0dba\3\2\2\2\u0db8\u0db9")
        buf.write("\7J\2\2\u0db9\u0dbb\7\u0093\2\2\u0dba\u0db8\3\2\2\2\u0dba")
        buf.write("\u0dbb\3\2\2\2\u0dbb\u0dbc\3\2\2\2\u0dbc\u0dbd\7\b\2\2")
        buf.write("\u0dbd\u0dbe\5\6\4\2\u0dbe\u018b\3\2\2\2\u0dbf\u0dc2\7")
        buf.write("&\2\2\u0dc0\u0dc1\7\u0080\2\2\u0dc1\u0dc3\7\5\2\2\u0dc2")
        buf.write("\u0dc0\3\2\2\2\u0dc2\u0dc3\3\2\2\2\u0dc3\u0dc6\3\2\2\2")
        buf.write("\u0dc4\u0dc6\7\5\2\2\u0dc5\u0dbf\3\2\2\2\u0dc5\u0dc4\3")
        buf.write("\2\2\2\u0dc6\u0dc7\3\2\2\2\u0dc7\u0dc8\7Q\2\2\u0dc8\u0dd6")
        buf.write("\5\u0168\u00b5\2\u0dc9\u0dca\7\u01da\2\2\u0dca\u0dcf\5")
        buf.write("\u0194\u00cb\2\u0dcb\u0dcc\7\u01dc\2\2\u0dcc\u0dce\5\u0194")
        buf.write("\u00cb\2\u0dcd\u0dcb\3\2\2\2\u0dce\u0dd1\3\2\2\2\u0dcf")
        buf.write("\u0dcd\3\2\2\2\u0dcf\u0dd0\3\2\2\2\u0dd0\u0dd2\3\2\2\2")
        buf.write("\u0dd1\u0dcf\3\2\2\2\u0dd2\u0dd3\7\u01db\2\2\u0dd3\u0dd7")
        buf.write("\3\2\2\2\u0dd4\u0dd5\7\u01da\2\2\u0dd5\u0dd7\7\u01db\2")
        buf.write("\2\u0dd6\u0dc9\3\2\2\2\u0dd6\u0dd4\3\2\2\2\u0dd7\u0ddb")
        buf.write("\3\2\2\2\u0dd8\u0ddc\5\u018e\u00c8\2\u0dd9\u0ddc\5\u0190")
        buf.write("\u00c9\2\u0dda\u0ddc\5\u0192\u00ca\2\u0ddb\u0dd8\3\2\2")
        buf.write("\2\u0ddb\u0dd9\3\2\2\2\u0ddb\u0dda\3\2\2\2\u0ddc\u0dde")
        buf.write("\3\2\2\2\u0ddd\u0ddf\7\u01dd\2\2\u0dde\u0ddd\3\2\2\2\u0dde")
        buf.write("\u0ddf\3\2\2\2\u0ddf\u018d\3\2\2\2\u0de0\u0de1\7\u0097")
        buf.write("\2\2\u0de1\u0deb\7\u00b0\2\2\u0de2\u0de3\7\u00cd\2\2\u0de3")
        buf.write("\u0de8\5\u0198\u00cd\2\u0de4\u0de5\7\u01dc\2\2\u0de5\u0de7")
        buf.write("\5\u0198\u00cd\2\u0de6\u0de4\3\2\2\2\u0de7\u0dea\3\2\2")
        buf.write("\2\u0de8\u0de6\3\2\2\2\u0de8\u0de9\3\2\2\2\u0de9\u0dec")
        buf.write("\3\2\2\2\u0dea\u0de8\3\2\2\2\u0deb\u0de2\3\2\2\2\u0deb")
        buf.write("\u0dec\3\2\2\2\u0dec\u0dee\3\2\2\2\u0ded\u0def\7\b\2\2")
        buf.write("\u0dee\u0ded\3\2\2\2\u0dee\u0def\3\2\2\2\u0def\u0df0\3")
        buf.write("\2\2\2\u0df0\u0df6\7\u0096\2\2\u0df1\u0df2\7\u01da\2\2")
        buf.write("\u0df2\u0df3\5\66\34\2\u0df3\u0df4\7\u01db\2\2\u0df4\u0df7")
        buf.write("\3\2\2\2\u0df5\u0df7\5\66\34\2\u0df6\u0df1\3\2\2\2\u0df6")
        buf.write("\u0df5\3\2\2\2\u0df7\u018f\3\2\2\2\u0df8\u0df9\7\u0097")
        buf.write("\2\2\u0df9\u0dfa\7\u01c2\2\2\u0dfa\u0e04\5\u00b8]\2\u0dfb")
        buf.write("\u0dfc\7\u00cd\2\2\u0dfc\u0e01\5\u0198\u00cd\2\u0dfd\u0dfe")
        buf.write("\7\u01dc\2\2\u0dfe\u0e00\5\u0198\u00cd\2\u0dff\u0dfd\3")
        buf.write("\2\2\2\u0e00\u0e03\3\2\2\2\u0e01\u0dff\3\2\2\2\u0e01\u0e02")
        buf.write("\3\2\2\2\u0e02\u0e05\3\2\2\2\u0e03\u0e01\3\2\2\2\u0e04")
        buf.write("\u0dfb\3\2\2\2\u0e04\u0e05\3\2\2\2\u0e05\u0e07\3\2\2\2")
        buf.write("\u0e06\u0e08\7\b\2\2\u0e07\u0e06\3\2\2\2\u0e07\u0e08\3")
        buf.write("\2\2\2\u0e08\u0e09\3\2\2\2\u0e09\u0e0d\7\f\2\2\u0e0a\u0e0c")
        buf.write("\5\b\5\2\u0e0b\u0e0a\3\2\2\2\u0e0c\u0e0f\3\2\2\2\u0e0d")
        buf.write("\u0e0b\3\2\2\2\u0e0d\u0e0e\3\2\2\2\u0e0e\u0e10\3\2\2\2")
        buf.write("\u0e0f\u0e0d\3\2\2\2\u0e10\u0e12\7\u0096\2\2\u0e11\u0e13")
        buf.write("\7\u01dd\2\2\u0e12\u0e11\3\2\2\2\u0e12\u0e13\3\2\2\2\u0e13")
        buf.write("\u0e14\3\2\2\2\u0e14\u0e16\7=\2\2\u0e15\u0e17\7\u01dd")
        buf.write("\2\2\u0e16\u0e15\3\2\2\2\u0e16\u0e17\3\2\2\2\u0e17\u0191")
        buf.write("\3\2\2\2\u0e18\u0e19\7\u0097\2\2\u0e19\u0e23\5\u019e\u00d0")
        buf.write("\2\u0e1a\u0e1b\7\u00cd\2\2\u0e1b\u0e20\5\u0198\u00cd\2")
        buf.write("\u0e1c\u0e1d\7\u01dc\2\2\u0e1d\u0e1f\5\u0198\u00cd\2\u0e1e")
        buf.write("\u0e1c\3\2\2\2\u0e1f\u0e22\3\2\2\2\u0e20\u0e1e\3\2\2\2")
        buf.write("\u0e20\u0e21\3\2\2\2\u0e21\u0e24\3\2\2\2\u0e22\u0e20\3")
        buf.write("\2\2\2\u0e23\u0e1a\3\2\2\2\u0e23\u0e24\3\2\2\2\u0e24\u0e26")
        buf.write("\3\2\2\2\u0e25\u0e27\7\b\2\2\u0e26\u0e25\3\2\2\2\u0e26")
        buf.write("\u0e27\3\2\2\2\u0e27\u0e28\3\2\2\2\u0e28\u0e2c\7\f\2\2")
        buf.write("\u0e29\u0e2b\5\b\5\2\u0e2a\u0e29\3\2\2\2\u0e2b\u0e2e\3")
        buf.write("\2\2\2\u0e2c\u0e2a\3\2\2\2\u0e2c\u0e2d\3\2\2\2\u0e2d\u0e2f")
        buf.write("\3\2\2\2\u0e2e\u0e2c\3\2\2\2\u0e2f\u0e30\7\u0096\2\2\u0e30")
        buf.write("\u0e32\5\u00d2j\2\u0e31\u0e33\7\u01dd\2\2\u0e32\u0e31")
        buf.write("\3\2\2\2\u0e32\u0e33\3\2\2\2\u0e33\u0e34\3\2\2\2\u0e34")
        buf.write("\u0e35\7=\2\2\u0e35\u0193\3\2\2\2\u0e36\u0e3a\7\u01c2")
        buf.write("\2\2\u0e37\u0e38\5\u0180\u00c1\2\u0e38\u0e39\7\u01d5\2")
        buf.write("\2\u0e39\u0e3b\3\2\2\2\u0e3a\u0e37\3\2\2\2\u0e3a\u0e3b")
        buf.write("\3\2\2\2\u0e3b\u0e3d\3\2\2\2\u0e3c\u0e3e\7\b\2\2\u0e3d")
        buf.write("\u0e3c\3\2\2\2\u0e3d\u0e3e\3\2\2\2\u0e3e\u0e3f\3\2\2\2")
        buf.write("\u0e3f\u0e41\5\u019e\u00d0\2\u0e40\u0e42\7\u00c7\2\2\u0e41")
        buf.write("\u0e40\3\2\2\2\u0e41\u0e42\3\2\2\2\u0e42\u0e45\3\2\2\2")
        buf.write("\u0e43\u0e44\7\u01c9\2\2\u0e44\u0e46\5\u017a\u00be\2\u0e45")
        buf.write("\u0e43\3\2\2\2\u0e45\u0e46\3\2\2\2\u0e46\u0e48\3\2\2\2")
        buf.write("\u0e47\u0e49\t@\2\2\u0e48\u0e47\3\2\2\2\u0e48\u0e49\3")
        buf.write("\2\2\2\u0e49\u0195\3\2\2\2\u0e4a\u0e4e\7\u0112\2\2\u0e4b")
        buf.write("\u0e4e\7\u0177\2\2\u0e4c\u0e4e\5\u00b4[\2\u0e4d\u0e4a")
        buf.write("\3\2\2\2\u0e4d\u0e4b\3\2\2\2\u0e4d\u0e4c\3\2\2\2\u0e4e")
        buf.write("\u0197\3\2\2\2\u0e4f\u0e5c\7\u0112\2\2\u0e50\u0e5c\7\u0187")
        buf.write("\2\2\u0e51\u0e52\7\u0097\2\2\u0e52\u0e53\7s\2\2\u0e53")
        buf.write("\u0e54\7y\2\2\u0e54\u0e55\7s\2\2\u0e55\u0e5c\7\u0130\2")
        buf.write("\2\u0e56\u0e57\7\22\2\2\u0e57\u0e58\7y\2\2\u0e58\u0e59")
        buf.write("\7s\2\2\u0e59\u0e5c\7\u0130\2\2\u0e5a\u0e5c\5\u00b4[\2")
        buf.write("\u0e5b\u0e4f\3\2\2\2\u0e5b\u0e50\3\2\2\2\u0e5b\u0e51\3")
        buf.write("\2\2\2\u0e5b\u0e56\3\2\2\2\u0e5b\u0e5a\3\2\2\2\u0e5c\u0199")
        buf.write("\3\2\2\2\u0e5d\u0e5e\7\u016a\2\2\u0e5e\u0e5f\7\u01da\2")
        buf.write("\2\u0e5f\u0e60\5\u00d2j\2\u0e60\u0e61\7\u01db\2\2\u0e61")
        buf.write("\u0e62\7\u00ce\2\2\u0e62\u0e63\7T\2\2\u0e63\u0e64\7\u01da")
        buf.write("\2\2\u0e64\u0e65\5\u00f8}\2\u0e65\u0e66\7\u01db\2\2\u0e66")
        buf.write("\u0e67\5\u014c\u00a7\2\u0e67\u019b\3\2\2\2\u0e68\u0e69")
        buf.write("\7\u019a\2\2\u0e69\u0e6a\7\u01da\2\2\u0e6a\u0e6b\5\u00d2")
        buf.write("j\2\u0e6b\u0e6c\7\u01dc\2\2\u0e6c\u0e6d\5\u00d2j\2\u0e6d")
        buf.write("\u0e6e\7\u01db\2\2\u0e6e\u0e6f\7\u00ce\2\2\u0e6f\u0e70")
        buf.write("\7T\2\2\u0e70\u0e71\7\u01da\2\2\u0e71\u0e72\5\u00f8}\2")
        buf.write("\u0e72\u0e73\7\u01db\2\2\u0e73\u019d\3\2\2\2\u0e74\u0e76")
        buf.write("\5\u0180\u00c1\2\u0e75\u0e77\7V\2\2\u0e76\u0e75\3\2\2")
        buf.write("\2\u0e76\u0e77\3\2\2\2\u0e77\u0e7f\3\2\2\2\u0e78\u0e79")
        buf.write("\7\u01da\2\2\u0e79\u0e7c\tA\2\2\u0e7a\u0e7b\7\u01dc\2")
        buf.write("\2\u0e7b\u0e7d\7\u01c3\2\2\u0e7c\u0e7a\3\2\2\2\u0e7c\u0e7d")
        buf.write("\3\2\2\2\u0e7d\u0e7e\3\2\2\2\u0e7e\u0e80\7\u01db\2\2\u0e7f")
        buf.write("\u0e78\3\2\2\2\u0e7f\u0e80\3\2\2\2\u0e80\u0e8f\3\2\2\2")
        buf.write("\u0e81\u0e8f\7\u00fb\2\2\u0e82\u0e83\7\u0100\2\2\u0e83")
        buf.write("\u0e84\7\u01da\2\2\u0e84\u0e85\7\u01c3\2\2\u0e85\u0e8f")
        buf.write("\7\u01db\2\2\u0e86\u0e88\79\2\2\u0e87\u0e89\7\u0088\2")
        buf.write("\2\u0e88\u0e87\3\2\2\2\u0e88\u0e89\3\2\2\2\u0e89\u0e8f")
        buf.write("\3\2\2\2\u0e8a\u0e8f\7\u0131\2\2\u0e8b\u0e8f\7\u01a7\2")
        buf.write("\2\u0e8c\u0e8f\7\u0193\2\2\u0e8d\u0e8f\7\u00e4\2\2\u0e8e")
        buf.write("\u0e74\3\2\2\2\u0e8e\u0e81\3\2\2\2\u0e8e\u0e82\3\2\2\2")
        buf.write("\u0e8e\u0e86\3\2\2\2\u0e8e\u0e8a\3\2\2\2\u0e8e\u0e8b\3")
        buf.write("\2\2\2\u0e8e\u0e8c\3\2\2\2\u0e8e\u0e8d\3\2\2\2\u0e8f\u019f")
        buf.write("\3\2\2\2\u020d\u01a3\u01a9\u01ad\u01b1\u01b5\u01be\u01c4")
        buf.write("\u01dc\u01e2\u01eb\u01ef\u01f2\u01f6\u01fa\u01fe\u0203")
        buf.write("\u0208\u020a\u0213\u0216\u021b\u021e\u0220\u0224\u0227")
        buf.write("\u022f\u0232\u0237\u023a\u023f\u0244\u0247\u024c\u0252")
        buf.write("\u0259\u025d\u025f\u0264\u0271\u0276\u027e\u0281\u0285")
        buf.write("\u0288\u028c\u028f\u0293\u0296\u0299\u029c\u029f\u02a3")
        buf.write("\u02a8\u02ab\u02af\u02b2\u02b6\u02b9\u02bd\u02c3\u02c6")
        buf.write("\u02ca\u02cd\u02d0\u02d7\u02da\u02de\u02e1\u02e4\u02e7")
        buf.write("\u02ea\u02ee\u02f2\u02f5\u02fd\u0301\u0305\u0308\u030b")
        buf.write("\u030e\u0311\u0318\u031c\u031e\u0326\u032c\u0332\u0334")
        buf.write("\u0338\u033b\u033e\u0343\u0348\u034b\u0353\u0357\u035e")
        buf.write("\u0361\u036a\u036d\u0371\u0379\u037c\u0380\u0383\u038c")
        buf.write("\u0393\u0397\u039b\u039e\u03a2\u03a5\u03b5\u03b9\u03bf")
        buf.write("\u03c1\u03c4\u03cc\u03d2\u03d7\u03da\u03e0\u03e8\u03f1")
        buf.write("\u03f9\u03fc\u0403\u0406\u042e\u0431\u0437\u0443\u0445")
        buf.write("\u0448\u0460\u046b\u0473\u047e\u0483\u0486\u048e\u0498")
        buf.write("\u04b2\u04b8\u04c3\u04d6\u04de\u04e5\u04fc\u0509\u050f")
        buf.write("\u0514\u0517\u051d\u0521\u0528\u052c\u0532\u0536\u053c")
        buf.write("\u0540\u0543\u0549\u054d\u0553\u055a\u055e\u0564\u0568")
        buf.write("\u056e\u0572\u057f\u0585\u0596\u059a\u05a2\u05a6\u05ae")
        buf.write("\u05b2\u05b4\u05b8\u05bc\u05c0\u05c4\u05ca\u05ce\u05d0")
        buf.write("\u05d5\u05dd\u05e0\u05e3\u05ec\u05f1\u05f6\u05f9\u05fb")
        buf.write("\u05ff\u0603\u0606\u060a\u0610\u0615\u061c\u061e\u0622")
        buf.write("\u0629\u062d\u0630\u0639\u063c\u063e\u0647\u0652\u0656")
        buf.write("\u0658\u065a\u0660\u0665\u066c\u0679\u067b\u067d\u0680")
        buf.write("\u0683\u068a\u068d\u0693\u0698\u069a\u069d\u06a3\u06ab")
        buf.write("\u06ad\u06b0\u06b4\u06b7\u06bd\u06c0\u06c4\u06c7\u06cd")
        buf.write("\u06d0\u06d2\u06d6\u06db\u06e3\u06e8\u06f1\u06f6\u06fb")
        buf.write("\u0701\u0705\u0708\u070c\u0712\u071a\u071f\u0721\u0724")
        buf.write("\u0729\u072e\u0731\u0736\u0739\u073c\u0742\u0748\u074c")
        buf.write("\u0751\u0754\u0759\u075e\u0762\u0767\u076b\u077c\u0782")
        buf.write("\u078b\u0795\u079f\u07a1\u07a3\u07a6\u07a9\u07b4\u07b6")
        buf.write("\u07b8\u07bb\u07be\u07c1\u07c4\u07c7\u07ca\u07d6\u07d9")
        buf.write("\u07dc\u07e5\u07e8\u07eb\u07f2\u07f5\u0803\u0806\u080d")
        buf.write("\u081c\u0820\u082d\u0831\u0839\u083d\u0851\u0868\u086a")
        buf.write("\u0870\u0877\u0880\u088c\u0893\u089a\u08a2\u08ab\u08af")
        buf.write("\u08b9\u08c0\u08cc\u08ce\u08e5\u08ee\u08f4\u08fa\u0900")
        buf.write("\u090b\u0913\u091b\u0920\u0924\u092d\u0931\u0934\u0939")
        buf.write("\u093d\u0943\u0945\u0949\u0952\u0955\u0958\u095c\u0960")
        buf.write("\u096c\u097a\u097f\u0984\u0988\u098f\u0998\u099f\u09a1")
        buf.write("\u09af\u09b7\u09ba\u09bc\u09c3\u09c7\u09d2\u09f4\u0a04")
        buf.write("\u0a0a\u0a11\u0a17\u0a1c\u0a24\u0a27\u0a29\u0a30\u0a39")
        buf.write("\u0a4a\u0a4c\u0a51\u0a54\u0a57\u0a5b\u0a60\u0a62\u0a66")
        buf.write("\u0a6a\u0a6e\u0a75\u0a77\u0a79\u0a7d\u0a82\u0a87\u0a8e")
        buf.write("\u0a9b\u0a9f\u0aa1\u0aa4\u0aa8\u0abc\u0ac0\u0ac4\u0ad5")
        buf.write("\u0adc\u0af3\u0b3e\u0b42\u0b5e\u0b80\u0b84\u0b91\u0b99")
        buf.write("\u0ba5\u0bab\u0bb4\u0bc5\u0bcb\u0bd3\u0bd7\u0bdf\u0be6")
        buf.write("\u0bf0\u0bf8\u0c18\u0c1e\u0c23\u0c28\u0c2e\u0c31\u0c35")
        buf.write("\u0c3a\u0c49\u0c52\u0c55\u0c58\u0c65\u0c69\u0c71\u0c77")
        buf.write("\u0c7f\u0c86\u0c8c\u0c9b\u0ca4\u0caa\u0cb0\u0cb3\u0cb7")
        buf.write("\u0cbe\u0cc6\u0cc9\u0ccf\u0cd5\u0cd7\u0cdd\u0ce0\u0ce2")
        buf.write("\u0ce8\u0cea\u0cf8\u0cff\u0d06\u0d0d\u0d14\u0d1b\u0d22")
        buf.write("\u0d28\u0d2d\u0d36\u0d3b\u0d42\u0d58\u0d5c\u0d61\u0d65")
        buf.write("\u0d69\u0d6d\u0d74\u0d87\u0d8d\u0d92\u0d95\u0d9b\u0d9e")
        buf.write("\u0da5\u0da9\u0dab\u0db3\u0db6\u0dba\u0dc2\u0dc5\u0dcf")
        buf.write("\u0dd6\u0ddb\u0dde\u0de8\u0deb\u0dee\u0df6\u0e01\u0e04")
        buf.write("\u0e07\u0e0d\u0e12\u0e16\u0e20\u0e23\u0e26\u0e2c\u0e32")
        buf.write("\u0e3a\u0e3d\u0e41\u0e45\u0e48\u0e4d\u0e5b\u0e76\u0e7c")
        buf.write("\u0e7f\u0e88\u0e8e")
        return buf.getvalue()


class tsqlParser ( Parser ):

    grammarFileName = "tsql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'='", "'>'", 
                     "'<'", "'!'", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'&='", "'^='", "'|='", "'.'", "'_'", "'@'", "'#'", 
                     "'$'", "'('", "')'", "','", "';'", "':'", "'*'", "'/'", 
                     "'%'", "'+'", "'-'", "'~'", "'|'", "'&'", "'^'" ]

    symbolicNames = [ "<INVALID>", "ADD", "ALL", "ALTER", "AND", "ANY", 
                      "AS", "ASC", "AUTHORIZATION", "BACKUP", "BEGIN", "BETWEEN", 
                      "BREAK", "BROWSE", "BULK", "BY", "CALLED", "CASCADE", 
                      "CASE", "CHANGETABLE", "CHANGES", "CHECK", "CHECKPOINT", 
                      "CLOSE", "CLUSTERED", "COALESCE", "COLLATE", "COLUMN", 
                      "COMMIT", "COMPUTE", "CONSTRAINT", "CONTAINMENT", 
                      "CONTAINS", "CONTAINSTABLE", "CONTINUE", "CONVERT", 
                      "CREATE", "CROSS", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", 
                      "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "DATABASE", 
                      "DBCC", "DEALLOCATE", "DECLARE", "DEFAULT", "DELETE", 
                      "DENY", "DESC", "DISK", "DISTINCT", "DISTRIBUTED", 
                      "DOUBLE", "DROP", "DUMP", "ELSE", "END", "ERRLVL", 
                      "ESCAPE", "EXCEPT", "EXECUTE", "EXISTS", "EXIT", "EXP", 
                      "EXTERNAL", "FETCH", "FILE", "FILENAME", "FILLFACTOR", 
                      "FOR", "FORCESEEK", "FOREIGN", "FREETEXT", "FREETEXTTABLE", 
                      "FROM", "FULL", "FUNCTION", "GOTO", "GRANT", "GROUP", 
                      "HAVING", "IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT", 
                      "IIF", "IF", "IN", "INDEX", "INCLUDE", "INNER", "INSERT", 
                      "INTERSECT", "INTO", "IS", "JOIN", "KEY", "KILL", 
                      "LEFT", "LIKE", "LINENO", "LOAD", "LOG", "LOG10", 
                      "MERGE", "NATIONAL", "NEXT", "NOCHECK", "NONCLUSTERED", 
                      "NONE", "NOT", "NULL_", "NULLIF", "NUMERIC", "OF", 
                      "OFF", "OFFSETS", "ON", "OPEN", "OPENDATASOURCE", 
                      "OPENQUERY", "OPENROWSET", "OPENXML", "OPTION", "OR", 
                      "ORDER", "OUTER", "OVER", "PARTIAL", "PERCENT", "PIVOT", 
                      "PLAN", "PRECISION", "PRIMARY", "PRINT", "PROC", "PROCEDURE", 
                      "PUBLIC", "RAISERROR", "READ", "READTEXT", "RECONFIGURE", 
                      "REFERENCES", "REPLICATION", "RESTORE", "RESTRICT", 
                      "RETURN", "RETURNS", "REVERT", "REVOKE", "RIGHT", 
                      "ROLLBACK", "ROWCOUNT", "ROWGUIDCOL", "RULE", "SAVE", 
                      "SCHEMA", "SECURITYAUDIT", "SELECT", "SEMANTICKEYPHRASETABLE", 
                      "SEMANTICSIMILARITYDETAILSTABLE", "SEMANTICSIMILARITYTABLE", 
                      "SESSION_USER", "SET", "SETUSER", "SHUTDOWN", "SIGN", 
                      "SOME", "STATISTICS", "SYNONYM", "SYSTEM", "SYSTEM_USER", 
                      "TABLE", "TABLESAMPLE", "TEXTSIZE", "THEN", "TO", 
                      "TOP", "TRAN", "TRANSACTION", "TRIGGER", "TRUNCATE", 
                      "TRY_CAST", "TRY_CONVERT", "TRY_PARSE", "TSEQUAL", 
                      "UNION", "UNIQUE", "UNPIVOT", "UPDATE", "UPDATETEXT", 
                      "USE", "USER", "VALUES", "VALUE", "VARYING", "VIEW", 
                      "WAITFOR", "WHEN", "WHERE", "WHILE", "WITH", "WITHIN", 
                      "WRITETEXT", "ABSOLUTE", "AFTER", "ALLOWED", "ALLOW_SNAPSHOT_ISOLATION", 
                      "ANSI_NULLS", "ANSI_NULL_DEFAULT", "ANSI_PADDING", 
                      "ANSI_WARNINGS", "APPLY", "ARITHABORT", "AT", "AUTO", 
                      "AUTO_CLEANUP", "AUTO_CLOSE", "AUTO_CREATE_STATISTICS", 
                      "AUTO_SHRINK", "AUTO_UPDATE_STATISTICS", "AUTO_UPDATE_STATISTICS_ASYNC", 
                      "AVG", "BASE64", "BIGINT", "BINARY_CHECKSUM", "BULK_LOGGED", 
                      "CALLER", "CAST", "CATCH", "CEILING", "CHANGE_RETENTION", 
                      "CHANGE_TRACKING", "CHECKSUM", "CHECKSUM_AGG", "COMMITTED", 
                      "COMPATIBILITY_LEVEL", "CONCAT", "CONCAT_NULL_YIELDS_NULL", 
                      "CONTROL", "COOKIE", "COS", "COUNT", "COUNT_BIG", 
                      "CUBE", "CURSOR_CLOSE_ON_COMMIT", "CURSOR_DEFAULT", 
                      "DATE", "DATEADD", "DATEDIFF", "DATENAME", "DATEPART", 
                      "DATETIME2", "DATETIMEOFFSETFROMPARTS", "DATE_CORRELATION_OPTIMIZATION", 
                      "DAYS", "DB_CHAINING", "DEFAULT_FULLTEXT_LANGUAGE", 
                      "DEFAULT_LANGUAGE", "DELAY", "DELAYED_DURABILITY", 
                      "DELETED", "DENSE_RANK", "DIRECTORY_NAME", "DISABLE", 
                      "DISABLED", "DISABLE_BROKER", "DYNAMIC", "EMERGENCY", 
                      "ENABLE_BROKER", "ENCRYPTION", "ERROR_BROKER_CONVERSATIONS", 
                      "EXIST", "EXPAND", "FAST", "FAST_FORWARD", "FILEGROUP", 
                      "FILEGROWTH", "FILESTREAM", "FIRST", "FIRST_VALUE", 
                      "FLOOR", "FOLLOWING", "FORCE", "FORCED", "FORWARD_ONLY", 
                      "FULLSCAN", "GB", "GLOBAL", "GO", "GROUPING", "GROUPING_ID", 
                      "HADR", "HASH", "HONOR_BROKER_PRIORITY", "HOURS", 
                      "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", "IMMEDIATE", 
                      "IMPERSONATE", "INCREMENTAL", "INPUT", "INT", "INSENSITIVE", 
                      "INSERTED", "ISOLATION", "IO", "KB", "KEEP", "KEEPFIXED", 
                      "KEYSET", "LAG", "LAST", "LAST_VALUE", "LEAD", "LEVEL", 
                      "LOCAL", "LOCK_ESCALATION", "LOGIN", "LOOP", "MARK", 
                      "MAX", "MAXDOP", "MAXRECURSION", "MAXSIZE", "MB", 
                      "MEMORY_OPTIMIZED_DATA", "MIN", "MINUTES", "MIN_ACTIVE_ROWVERSION", 
                      "MIXED_PAGE_ALLOCATION", "MODIFY", "MULTI_USER", "NAME", 
                      "NESTED_TRIGGERS", "NEW_BROKER", "NOCOUNT", "NODES", 
                      "NOEXPAND", "NON_TRANSACTED_ACCESS", "NORECOMPUTE", 
                      "NO_WAIT", "NTILE", "NUMBER", "NUMERIC_ROUNDABORT", 
                      "OFFLINE", "OFFSET", "ONLINE", "ONLY", "OPTIMISTIC", 
                      "OPTIMIZE", "OUT", "OUTPUT", "OWNER", "PAGE_VERIFY", 
                      "PARAMETERIZATION", "PARSE", "PARTITION", "PATH", 
                      "PERCENTILE_CONT", "POWER", "PRECEDING", "PRIOR", 
                      "PRIVILEGES", "QUERY", "QUOTED_IDENTIFIER", "RANGE", 
                      "RANK", "READONLY", "READ_COMMITTED_SNAPSHOT", "READ_ONLY", 
                      "READ_WRITE", "RECOMPILE", "RECOVERY", "RECURSIVE_TRIGGERS", 
                      "RELATIVE", "REMOTE", "REPEATABLE", "RESTRICTED_USER", 
                      "ROBUST", "ROLLUP", "ROOT", "ROUND", "ROW", "ROWGUID", 
                      "ROWS", "ROW_NUMBER", "SAMPLE", "SCHEMABINDING", "SCROLL", 
                      "SCROLL_LOCKS", "SECONDS", "SELF", "SERIALIZABLE", 
                      "SETS", "SHOWPLAN", "SIMPLE", "SIN", "SINGLE_USER", 
                      "SIZE", "SMALLINT", "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", 
                      "STATIC", "STATS_STREAM", "STDEV", "STDEVP", "STRING_AGG", 
                      "STRING_SPLIT", "SUM", "SQRT", "SQUARE", "TAKE", "TAN", 
                      "TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", "THROW", 
                      "TIES", "TIME", "TINYINT", "TORN_PAGE_DETECTION", 
                      "TRANSFORM_NOISE_WORDS", "TRUSTWORTHY", "TRY", "TWO_DIGIT_YEAR_CUTOFF", 
                      "TYPE", "TYPE_WARNING", "UNBOUNDED", "UNCOMMITTED", 
                      "UNKNOWN", "UNLIMITED", "USING", "VAR", "VARP", "VIEWS", 
                      "VIEW_METADATA", "WORK", "XML", "XMLNAMESPACES", "ZONE", 
                      "DOLLAR_ACTION", "SPACE", "COMMENT", "LINE_COMMENT", 
                      "DOUBLE_QUOTE_ID", "SQUARE_BRACKET_ID", "LOCAL_ID", 
                      "DECIMAL", "ID", "STRING", "BINARY", "FLOAT", "REAL", 
                      "EQUAL", "GREATER", "LESS", "EXCLAMATION", "PLUS_ASSIGN", 
                      "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
                      "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "DOT", "UNDERLINE", 
                      "AT_SIGN", "SHARP", "DOLLAR", "LR_BRACKET", "RR_BRACKET", 
                      "COMMA", "SEMI", "COLON", "STAR", "DIVIDE", "MODULE", 
                      "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_AND", "BIT_XOR" ]

    RULE_tsql_file = 0
    RULE_batch = 1
    RULE_sql_clauses = 2
    RULE_sql_clause = 3
    RULE_dml_clause = 4
    RULE_ddl_clause = 5
    RULE_cfl_statement = 6
    RULE_cfl_clause = 7
    RULE_block_statement = 8
    RULE_break_statement = 9
    RULE_continue_statement = 10
    RULE_goto_statement = 11
    RULE_if_statement = 12
    RULE_if_block = 13
    RULE_return_statement = 14
    RULE_throw_statement = 15
    RULE_try_catch_statement = 16
    RULE_waitfor_statement = 17
    RULE_while_statement = 18
    RULE_print_statement = 19
    RULE_raiseerror_statement = 20
    RULE_another_statement = 21
    RULE_delete_statement = 22
    RULE_delete_statement_from = 23
    RULE_insert_statement = 24
    RULE_insert_statement_value = 25
    RULE_select_statement = 26
    RULE_update_statement = 27
    RULE_where_clause_dml = 28
    RULE_output_clause = 29
    RULE_output_dml_list_elem = 30
    RULE_output_column_name = 31
    RULE_create_database = 32
    RULE_create_index = 33
    RULE_create_statistics = 34
    RULE_create_table = 35
    RULE_create_schema = 36
    RULE_create_synonym = 37
    RULE_create_view = 38
    RULE_view_attribute = 39
    RULE_alter_table = 40
    RULE_alter_database = 41
    RULE_database_optionspec = 42
    RULE_auto_option = 43
    RULE_change_tracking_option = 44
    RULE_change_tracking_option_list = 45
    RULE_containment_option = 46
    RULE_cursor_option = 47
    RULE_date_correlation_optimization_option = 48
    RULE_db_encryption_option = 49
    RULE_db_state_option = 50
    RULE_db_update_option = 51
    RULE_db_user_access_option = 52
    RULE_delayed_durability_option = 53
    RULE_external_access_option = 54
    RULE_hadr_options = 55
    RULE_mixed_page_allocation_option = 56
    RULE_parameterization_option = 57
    RULE_recovery_option = 58
    RULE_service_broker_option = 59
    RULE_snapshot_option = 60
    RULE_sql_option = 61
    RULE_target_recovery_time_option = 62
    RULE_termination = 63
    RULE_drop_index = 64
    RULE_drop_procedure = 65
    RULE_drop_statistics = 66
    RULE_drop_table = 67
    RULE_drop_database = 68
    RULE_drop_synonym = 69
    RULE_drop_view = 70
    RULE_drop_schema = 71
    RULE_drop_function = 72
    RULE_create_type = 73
    RULE_drop_type = 74
    RULE_rowset_function_limited = 75
    RULE_openquery = 76
    RULE_opendatasource = 77
    RULE_declare_statement = 78
    RULE_cursor_statement = 79
    RULE_execute_statement = 80
    RULE_execute_statement_arg = 81
    RULE_execute_var_string = 82
    RULE_security_statement = 83
    RULE_grant_permission = 84
    RULE_set_statement = 85
    RULE_transaction_statement = 86
    RULE_go_statement = 87
    RULE_use_statement = 88
    RULE_execute_clause = 89
    RULE_declare_local = 90
    RULE_table_type_definition = 91
    RULE_column_def_table_constraints = 92
    RULE_column_def_table_constraint = 93
    RULE_column_definition = 94
    RULE_column_constraint = 95
    RULE_table_constraint = 96
    RULE_index_options = 97
    RULE_index_option = 98
    RULE_declare_cursor = 99
    RULE_declare_set_cursor_common = 100
    RULE_fetch_cursor = 101
    RULE_set_special = 102
    RULE_constant_LOCAL_ID = 103
    RULE_expression = 104
    RULE_xml_method_call = 105
    RULE_simple_xml_method_name = 106
    RULE_constant_expression = 107
    RULE_subquery = 108
    RULE_with_expression = 109
    RULE_common_table_expression = 110
    RULE_update_elem = 111
    RULE_search_condition_list = 112
    RULE_search_condition = 113
    RULE_predicate = 114
    RULE_query_expression = 115
    RULE_union_op = 116
    RULE_cross_apply_expression = 117
    RULE_query_specification = 118
    RULE_group_by_grouping_sets = 119
    RULE_grouping_set = 120
    RULE_top_clause = 121
    RULE_top_clause_dm = 122
    RULE_order_by_clause = 123
    RULE_fetch_expression = 124
    RULE_for_clause = 125
    RULE_xml_common_directives = 126
    RULE_order_by_expression = 127
    RULE_group_by_item = 128
    RULE_option_clause = 129
    RULE_option = 130
    RULE_optimize_for_arg = 131
    RULE_select_list = 132
    RULE_select_list_elem = 133
    RULE_table_sources = 134
    RULE_table_source = 135
    RULE_table_source_item = 136
    RULE_tablesample_clause = 137
    RULE_sample_number = 138
    RULE_repeat_seed = 139
    RULE_table_alias = 140
    RULE_change_table = 141
    RULE_join_type = 142
    RULE_table_name_with_hint = 143
    RULE_rowset_function = 144
    RULE_bulk_option = 145
    RULE_derived_table = 146
    RULE_function_call = 147
    RULE_switch_section = 148
    RULE_switch_search_condition_section = 149
    RULE_with_table_hints = 150
    RULE_insert_with_table_hints = 151
    RULE_table_hint = 152
    RULE_index_value = 153
    RULE_column_alias_list = 154
    RULE_column_alias = 155
    RULE_a_star = 156
    RULE_table_value_constructor = 157
    RULE_expression_list = 158
    RULE_value_list = 159
    RULE_next_value_for = 160
    RULE_next_value_for_function = 161
    RULE_ranking_windowed_function = 162
    RULE_aggregate_windowed_function = 163
    RULE_all_distinct = 164
    RULE_over_clause = 165
    RULE_row_or_range_clause = 166
    RULE_window_frame_extent = 167
    RULE_window_frame_bound = 168
    RULE_window_frame_preceding = 169
    RULE_window_frame_following = 170
    RULE_create_database_option = 171
    RULE_database_filestream_option = 172
    RULE_database_file_spec = 173
    RULE_file_group = 174
    RULE_file_spec = 175
    RULE_full_table_name = 176
    RULE_table_name = 177
    RULE_simple_name = 178
    RULE_func_proc_name = 179
    RULE_ddl_object = 180
    RULE_full_column_name = 181
    RULE_column_name_list = 182
    RULE_cursor_name = 183
    RULE_on_off = 184
    RULE_clustered = 185
    RULE_null_notnull = 186
    RULE_scalar_function_name = 187
    RULE_default_value = 188
    RULE_constant = 189
    RULE_sign = 190
    RULE_r_id = 191
    RULE_simple_id = 192
    RULE_comparison_operator = 193
    RULE_assignment_operator = 194
    RULE_file_size = 195
    RULE_create_or_alter_procedure = 196
    RULE_create_or_alter_function = 197
    RULE_func_body_returns_select = 198
    RULE_func_body_returns_table = 199
    RULE_func_body_returns_scalar = 200
    RULE_procedure_param = 201
    RULE_procedure_option = 202
    RULE_function_option = 203
    RULE_percentile_cont = 204
    RULE_string_agg = 205
    RULE_data_type = 206

    ruleNames =  [ "tsql_file", "batch", "sql_clauses", "sql_clause", "dml_clause", 
                   "ddl_clause", "cfl_statement", "cfl_clause", "block_statement", 
                   "break_statement", "continue_statement", "goto_statement", 
                   "if_statement", "if_block", "return_statement", "throw_statement", 
                   "try_catch_statement", "waitfor_statement", "while_statement", 
                   "print_statement", "raiseerror_statement", "another_statement", 
                   "delete_statement", "delete_statement_from", "insert_statement", 
                   "insert_statement_value", "select_statement", "update_statement", 
                   "where_clause_dml", "output_clause", "output_dml_list_elem", 
                   "output_column_name", "create_database", "create_index", 
                   "create_statistics", "create_table", "create_schema", 
                   "create_synonym", "create_view", "view_attribute", "alter_table", 
                   "alter_database", "database_optionspec", "auto_option", 
                   "change_tracking_option", "change_tracking_option_list", 
                   "containment_option", "cursor_option", "date_correlation_optimization_option", 
                   "db_encryption_option", "db_state_option", "db_update_option", 
                   "db_user_access_option", "delayed_durability_option", 
                   "external_access_option", "hadr_options", "mixed_page_allocation_option", 
                   "parameterization_option", "recovery_option", "service_broker_option", 
                   "snapshot_option", "sql_option", "target_recovery_time_option", 
                   "termination", "drop_index", "drop_procedure", "drop_statistics", 
                   "drop_table", "drop_database", "drop_synonym", "drop_view", 
                   "drop_schema", "drop_function", "create_type", "drop_type", 
                   "rowset_function_limited", "openquery", "opendatasource", 
                   "declare_statement", "cursor_statement", "execute_statement", 
                   "execute_statement_arg", "execute_var_string", "security_statement", 
                   "grant_permission", "set_statement", "transaction_statement", 
                   "go_statement", "use_statement", "execute_clause", "declare_local", 
                   "table_type_definition", "column_def_table_constraints", 
                   "column_def_table_constraint", "column_definition", "column_constraint", 
                   "table_constraint", "index_options", "index_option", 
                   "declare_cursor", "declare_set_cursor_common", "fetch_cursor", 
                   "set_special", "constant_LOCAL_ID", "expression", "xml_method_call", 
                   "simple_xml_method_name", "constant_expression", "subquery", 
                   "with_expression", "common_table_expression", "update_elem", 
                   "search_condition_list", "search_condition", "predicate", 
                   "query_expression", "union_op", "cross_apply_expression", 
                   "query_specification", "group_by_grouping_sets", "grouping_set", 
                   "top_clause", "top_clause_dm", "order_by_clause", "fetch_expression", 
                   "for_clause", "xml_common_directives", "order_by_expression", 
                   "group_by_item", "option_clause", "option", "optimize_for_arg", 
                   "select_list", "select_list_elem", "table_sources", "table_source", 
                   "table_source_item", "tablesample_clause", "sample_number", 
                   "repeat_seed", "table_alias", "change_table", "join_type", 
                   "table_name_with_hint", "rowset_function", "bulk_option", 
                   "derived_table", "function_call", "switch_section", "switch_search_condition_section", 
                   "with_table_hints", "insert_with_table_hints", "table_hint", 
                   "index_value", "column_alias_list", "column_alias", "a_star", 
                   "table_value_constructor", "expression_list", "value_list", 
                   "next_value_for", "next_value_for_function", "ranking_windowed_function", 
                   "aggregate_windowed_function", "all_distinct", "over_clause", 
                   "row_or_range_clause", "window_frame_extent", "window_frame_bound", 
                   "window_frame_preceding", "window_frame_following", "create_database_option", 
                   "database_filestream_option", "database_file_spec", "file_group", 
                   "file_spec", "full_table_name", "table_name", "simple_name", 
                   "func_proc_name", "ddl_object", "full_column_name", "column_name_list", 
                   "cursor_name", "on_off", "clustered", "null_notnull", 
                   "scalar_function_name", "default_value", "constant", 
                   "sign", "r_id", "simple_id", "comparison_operator", "assignment_operator", 
                   "file_size", "create_or_alter_procedure", "create_or_alter_function", 
                   "func_body_returns_select", "func_body_returns_table", 
                   "func_body_returns_scalar", "procedure_param", "procedure_option", 
                   "function_option", "percentile_cont", "string_agg", "data_type" ]

    EOF = Token.EOF
    ADD=1
    ALL=2
    ALTER=3
    AND=4
    ANY=5
    AS=6
    ASC=7
    AUTHORIZATION=8
    BACKUP=9
    BEGIN=10
    BETWEEN=11
    BREAK=12
    BROWSE=13
    BULK=14
    BY=15
    CALLED=16
    CASCADE=17
    CASE=18
    CHANGETABLE=19
    CHANGES=20
    CHECK=21
    CHECKPOINT=22
    CLOSE=23
    CLUSTERED=24
    COALESCE=25
    COLLATE=26
    COLUMN=27
    COMMIT=28
    COMPUTE=29
    CONSTRAINT=30
    CONTAINMENT=31
    CONTAINS=32
    CONTAINSTABLE=33
    CONTINUE=34
    CONVERT=35
    CREATE=36
    CROSS=37
    CURRENT=38
    CURRENT_DATE=39
    CURRENT_TIME=40
    CURRENT_TIMESTAMP=41
    CURRENT_USER=42
    CURSOR=43
    DATABASE=44
    DBCC=45
    DEALLOCATE=46
    DECLARE=47
    DEFAULT=48
    DELETE=49
    DENY=50
    DESC=51
    DISK=52
    DISTINCT=53
    DISTRIBUTED=54
    DOUBLE=55
    DROP=56
    DUMP=57
    ELSE=58
    END=59
    ERRLVL=60
    ESCAPE=61
    EXCEPT=62
    EXECUTE=63
    EXISTS=64
    EXIT=65
    EXP=66
    EXTERNAL=67
    FETCH=68
    FILE=69
    FILENAME=70
    FILLFACTOR=71
    FOR=72
    FORCESEEK=73
    FOREIGN=74
    FREETEXT=75
    FREETEXTTABLE=76
    FROM=77
    FULL=78
    FUNCTION=79
    GOTO=80
    GRANT=81
    GROUP=82
    HAVING=83
    IDENTITY=84
    IDENTITYCOL=85
    IDENTITY_INSERT=86
    IIF=87
    IF=88
    IN=89
    INDEX=90
    INCLUDE=91
    INNER=92
    INSERT=93
    INTERSECT=94
    INTO=95
    IS=96
    JOIN=97
    KEY=98
    KILL=99
    LEFT=100
    LIKE=101
    LINENO=102
    LOAD=103
    LOG=104
    LOG10=105
    MERGE=106
    NATIONAL=107
    NEXT=108
    NOCHECK=109
    NONCLUSTERED=110
    NONE=111
    NOT=112
    NULL_=113
    NULLIF=114
    NUMERIC=115
    OF=116
    OFF=117
    OFFSETS=118
    ON=119
    OPEN=120
    OPENDATASOURCE=121
    OPENQUERY=122
    OPENROWSET=123
    OPENXML=124
    OPTION=125
    OR=126
    ORDER=127
    OUTER=128
    OVER=129
    PARTIAL=130
    PERCENT=131
    PIVOT=132
    PLAN=133
    PRECISION=134
    PRIMARY=135
    PRINT=136
    PROC=137
    PROCEDURE=138
    PUBLIC=139
    RAISERROR=140
    READ=141
    READTEXT=142
    RECONFIGURE=143
    REFERENCES=144
    REPLICATION=145
    RESTORE=146
    RESTRICT=147
    RETURN=148
    RETURNS=149
    REVERT=150
    REVOKE=151
    RIGHT=152
    ROLLBACK=153
    ROWCOUNT=154
    ROWGUIDCOL=155
    RULE=156
    SAVE=157
    SCHEMA=158
    SECURITYAUDIT=159
    SELECT=160
    SEMANTICKEYPHRASETABLE=161
    SEMANTICSIMILARITYDETAILSTABLE=162
    SEMANTICSIMILARITYTABLE=163
    SESSION_USER=164
    SET=165
    SETUSER=166
    SHUTDOWN=167
    SIGN=168
    SOME=169
    STATISTICS=170
    SYNONYM=171
    SYSTEM=172
    SYSTEM_USER=173
    TABLE=174
    TABLESAMPLE=175
    TEXTSIZE=176
    THEN=177
    TO=178
    TOP=179
    TRAN=180
    TRANSACTION=181
    TRIGGER=182
    TRUNCATE=183
    TRY_CAST=184
    TRY_CONVERT=185
    TRY_PARSE=186
    TSEQUAL=187
    UNION=188
    UNIQUE=189
    UNPIVOT=190
    UPDATE=191
    UPDATETEXT=192
    USE=193
    USER=194
    VALUES=195
    VALUE=196
    VARYING=197
    VIEW=198
    WAITFOR=199
    WHEN=200
    WHERE=201
    WHILE=202
    WITH=203
    WITHIN=204
    WRITETEXT=205
    ABSOLUTE=206
    AFTER=207
    ALLOWED=208
    ALLOW_SNAPSHOT_ISOLATION=209
    ANSI_NULLS=210
    ANSI_NULL_DEFAULT=211
    ANSI_PADDING=212
    ANSI_WARNINGS=213
    APPLY=214
    ARITHABORT=215
    AT=216
    AUTO=217
    AUTO_CLEANUP=218
    AUTO_CLOSE=219
    AUTO_CREATE_STATISTICS=220
    AUTO_SHRINK=221
    AUTO_UPDATE_STATISTICS=222
    AUTO_UPDATE_STATISTICS_ASYNC=223
    AVG=224
    BASE64=225
    BIGINT=226
    BINARY_CHECKSUM=227
    BULK_LOGGED=228
    CALLER=229
    CAST=230
    CATCH=231
    CEILING=232
    CHANGE_RETENTION=233
    CHANGE_TRACKING=234
    CHECKSUM=235
    CHECKSUM_AGG=236
    COMMITTED=237
    COMPATIBILITY_LEVEL=238
    CONCAT=239
    CONCAT_NULL_YIELDS_NULL=240
    CONTROL=241
    COOKIE=242
    COS=243
    COUNT=244
    COUNT_BIG=245
    CUBE=246
    CURSOR_CLOSE_ON_COMMIT=247
    CURSOR_DEFAULT=248
    DATE=249
    DATEADD=250
    DATEDIFF=251
    DATENAME=252
    DATEPART=253
    DATETIME2=254
    DATETIMEOFFSETFROMPARTS=255
    DATE_CORRELATION_OPTIMIZATION=256
    DAYS=257
    DB_CHAINING=258
    DEFAULT_FULLTEXT_LANGUAGE=259
    DEFAULT_LANGUAGE=260
    DELAY=261
    DELAYED_DURABILITY=262
    DELETED=263
    DENSE_RANK=264
    DIRECTORY_NAME=265
    DISABLE=266
    DISABLED=267
    DISABLE_BROKER=268
    DYNAMIC=269
    EMERGENCY=270
    ENABLE_BROKER=271
    ENCRYPTION=272
    ERROR_BROKER_CONVERSATIONS=273
    EXIST=274
    EXPAND=275
    FAST=276
    FAST_FORWARD=277
    FILEGROUP=278
    FILEGROWTH=279
    FILESTREAM=280
    FIRST=281
    FIRST_VALUE=282
    FLOOR=283
    FOLLOWING=284
    FORCE=285
    FORCED=286
    FORWARD_ONLY=287
    FULLSCAN=288
    GB=289
    GLOBAL=290
    GO=291
    GROUPING=292
    GROUPING_ID=293
    HADR=294
    HASH=295
    HONOR_BROKER_PRIORITY=296
    HOURS=297
    IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=298
    IMMEDIATE=299
    IMPERSONATE=300
    INCREMENTAL=301
    INPUT=302
    INT=303
    INSENSITIVE=304
    INSERTED=305
    ISOLATION=306
    IO=307
    KB=308
    KEEP=309
    KEEPFIXED=310
    KEYSET=311
    LAG=312
    LAST=313
    LAST_VALUE=314
    LEAD=315
    LEVEL=316
    LOCAL=317
    LOCK_ESCALATION=318
    LOGIN=319
    LOOP=320
    MARK=321
    MAX=322
    MAXDOP=323
    MAXRECURSION=324
    MAXSIZE=325
    MB=326
    MEMORY_OPTIMIZED_DATA=327
    MIN=328
    MINUTES=329
    MIN_ACTIVE_ROWVERSION=330
    MIXED_PAGE_ALLOCATION=331
    MODIFY=332
    MULTI_USER=333
    NAME=334
    NESTED_TRIGGERS=335
    NEW_BROKER=336
    NOCOUNT=337
    NODES=338
    NOEXPAND=339
    NON_TRANSACTED_ACCESS=340
    NORECOMPUTE=341
    NO_WAIT=342
    NTILE=343
    NUMBER=344
    NUMERIC_ROUNDABORT=345
    OFFLINE=346
    OFFSET=347
    ONLINE=348
    ONLY=349
    OPTIMISTIC=350
    OPTIMIZE=351
    OUT=352
    OUTPUT=353
    OWNER=354
    PAGE_VERIFY=355
    PARAMETERIZATION=356
    PARSE=357
    PARTITION=358
    PATH=359
    PERCENTILE_CONT=360
    POWER=361
    PRECEDING=362
    PRIOR=363
    PRIVILEGES=364
    QUERY=365
    QUOTED_IDENTIFIER=366
    RANGE=367
    RANK=368
    READONLY=369
    READ_COMMITTED_SNAPSHOT=370
    READ_ONLY=371
    READ_WRITE=372
    RECOMPILE=373
    RECOVERY=374
    RECURSIVE_TRIGGERS=375
    RELATIVE=376
    REMOTE=377
    REPEATABLE=378
    RESTRICTED_USER=379
    ROBUST=380
    ROLLUP=381
    ROOT=382
    ROUND=383
    ROW=384
    ROWGUID=385
    ROWS=386
    ROW_NUMBER=387
    SAMPLE=388
    SCHEMABINDING=389
    SCROLL=390
    SCROLL_LOCKS=391
    SECONDS=392
    SELF=393
    SERIALIZABLE=394
    SETS=395
    SHOWPLAN=396
    SIMPLE=397
    SIN=398
    SINGLE_USER=399
    SIZE=400
    SMALLINT=401
    SNAPSHOT=402
    SPATIAL_WINDOW_MAX_CELLS=403
    STATIC=404
    STATS_STREAM=405
    STDEV=406
    STDEVP=407
    STRING_AGG=408
    STRING_SPLIT=409
    SUM=410
    SQRT=411
    SQUARE=412
    TAKE=413
    TAN=414
    TARGET_RECOVERY_TIME=415
    TB=416
    TEXTIMAGE_ON=417
    THROW=418
    TIES=419
    TIME=420
    TINYINT=421
    TORN_PAGE_DETECTION=422
    TRANSFORM_NOISE_WORDS=423
    TRUSTWORTHY=424
    TRY=425
    TWO_DIGIT_YEAR_CUTOFF=426
    TYPE=427
    TYPE_WARNING=428
    UNBOUNDED=429
    UNCOMMITTED=430
    UNKNOWN=431
    UNLIMITED=432
    USING=433
    VAR=434
    VARP=435
    VIEWS=436
    VIEW_METADATA=437
    WORK=438
    XML=439
    XMLNAMESPACES=440
    ZONE=441
    DOLLAR_ACTION=442
    SPACE=443
    COMMENT=444
    LINE_COMMENT=445
    DOUBLE_QUOTE_ID=446
    SQUARE_BRACKET_ID=447
    LOCAL_ID=448
    DECIMAL=449
    ID=450
    STRING=451
    BINARY=452
    FLOAT=453
    REAL=454
    EQUAL=455
    GREATER=456
    LESS=457
    EXCLAMATION=458
    PLUS_ASSIGN=459
    MINUS_ASSIGN=460
    MULT_ASSIGN=461
    DIV_ASSIGN=462
    MOD_ASSIGN=463
    AND_ASSIGN=464
    XOR_ASSIGN=465
    OR_ASSIGN=466
    DOT=467
    UNDERLINE=468
    AT_SIGN=469
    SHARP=470
    DOLLAR=471
    LR_BRACKET=472
    RR_BRACKET=473
    COMMA=474
    SEMI=475
    COLON=476
    STAR=477
    DIVIDE=478
    MODULE=479
    PLUS=480
    MINUS=481
    BIT_NOT=482
    BIT_OR=483
    BIT_AND=484
    BIT_XOR=485

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Tsql_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(tsqlParser.EOF, 0)

        def batch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.BatchContext)
            else:
                return self.getTypedRuleContext(tsqlParser.BatchContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_tsql_file




    def tsql_file(self):

        localctx = tsqlParser.Tsql_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_tsql_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.ALTER) | (1 << tsqlParser.BEGIN) | (1 << tsqlParser.BREAK) | (1 << tsqlParser.CLOSE) | (1 << tsqlParser.COMMIT) | (1 << tsqlParser.CONTINUE) | (1 << tsqlParser.CREATE) | (1 << tsqlParser.DEALLOCATE) | (1 << tsqlParser.DECLARE) | (1 << tsqlParser.DELETE) | (1 << tsqlParser.DROP) | (1 << tsqlParser.EXECUTE))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (tsqlParser.FETCH - 68)) | (1 << (tsqlParser.FILLFACTOR - 68)) | (1 << (tsqlParser.FORCESEEK - 68)) | (1 << (tsqlParser.GOTO - 68)) | (1 << (tsqlParser.GRANT - 68)) | (1 << (tsqlParser.IF - 68)) | (1 << (tsqlParser.INSERT - 68)) | (1 << (tsqlParser.NEXT - 68)) | (1 << (tsqlParser.NUMERIC - 68)) | (1 << (tsqlParser.OPEN - 68)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (tsqlParser.PRINT - 136)) | (1 << (tsqlParser.RAISERROR - 136)) | (1 << (tsqlParser.RETURN - 136)) | (1 << (tsqlParser.REVERT - 136)) | (1 << (tsqlParser.ROLLBACK - 136)) | (1 << (tsqlParser.SAVE - 136)) | (1 << (tsqlParser.SELECT - 136)) | (1 << (tsqlParser.SET - 136)) | (1 << (tsqlParser.UPDATE - 136)) | (1 << (tsqlParser.USE - 136)) | (1 << (tsqlParser.VALUE - 136)) | (1 << (tsqlParser.WAITFOR - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (tsqlParser.WHILE - 202)) | (1 << (tsqlParser.WITH - 202)) | (1 << (tsqlParser.ABSOLUTE - 202)) | (1 << (tsqlParser.APPLY - 202)) | (1 << (tsqlParser.AUTO - 202)) | (1 << (tsqlParser.AVG - 202)) | (1 << (tsqlParser.BASE64 - 202)) | (1 << (tsqlParser.CALLER - 202)) | (1 << (tsqlParser.CAST - 202)) | (1 << (tsqlParser.CATCH - 202)) | (1 << (tsqlParser.CHECKSUM_AGG - 202)) | (1 << (tsqlParser.COMMITTED - 202)) | (1 << (tsqlParser.CONCAT - 202)) | (1 << (tsqlParser.CONTROL - 202)) | (1 << (tsqlParser.COOKIE - 202)) | (1 << (tsqlParser.COUNT - 202)) | (1 << (tsqlParser.COUNT_BIG - 202)) | (1 << (tsqlParser.DATE - 202)) | (1 << (tsqlParser.DELAY - 202)) | (1 << (tsqlParser.DELETED - 202)) | (1 << (tsqlParser.DENSE_RANK - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (tsqlParser.DISABLE - 266)) | (1 << (tsqlParser.DYNAMIC - 266)) | (1 << (tsqlParser.ENCRYPTION - 266)) | (1 << (tsqlParser.EXIST - 266)) | (1 << (tsqlParser.EXPAND - 266)) | (1 << (tsqlParser.FAST - 266)) | (1 << (tsqlParser.FAST_FORWARD - 266)) | (1 << (tsqlParser.FIRST - 266)) | (1 << (tsqlParser.FIRST_VALUE - 266)) | (1 << (tsqlParser.FOLLOWING - 266)) | (1 << (tsqlParser.FORCE - 266)) | (1 << (tsqlParser.FORCED - 266)) | (1 << (tsqlParser.FORWARD_ONLY - 266)) | (1 << (tsqlParser.FULLSCAN - 266)) | (1 << (tsqlParser.GLOBAL - 266)) | (1 << (tsqlParser.GO - 266)) | (1 << (tsqlParser.GROUPING - 266)) | (1 << (tsqlParser.GROUPING_ID - 266)) | (1 << (tsqlParser.HASH - 266)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 266)) | (1 << (tsqlParser.IMPERSONATE - 266)) | (1 << (tsqlParser.INSENSITIVE - 266)) | (1 << (tsqlParser.INSERTED - 266)) | (1 << (tsqlParser.ISOLATION - 266)) | (1 << (tsqlParser.IO - 266)) | (1 << (tsqlParser.KEEP - 266)) | (1 << (tsqlParser.KEEPFIXED - 266)) | (1 << (tsqlParser.KEYSET - 266)) | (1 << (tsqlParser.LAG - 266)) | (1 << (tsqlParser.LAST - 266)) | (1 << (tsqlParser.LAST_VALUE - 266)) | (1 << (tsqlParser.LEAD - 266)) | (1 << (tsqlParser.LEVEL - 266)) | (1 << (tsqlParser.LOCAL - 266)) | (1 << (tsqlParser.LOCK_ESCALATION - 266)) | (1 << (tsqlParser.LOGIN - 266)) | (1 << (tsqlParser.LOOP - 266)) | (1 << (tsqlParser.MARK - 266)) | (1 << (tsqlParser.MAX - 266)) | (1 << (tsqlParser.MAXDOP - 266)) | (1 << (tsqlParser.MAXRECURSION - 266)) | (1 << (tsqlParser.MIN - 266)))) != 0) or ((((_la - 332)) & ~0x3f) == 0 and ((1 << (_la - 332)) & ((1 << (tsqlParser.MODIFY - 332)) | (1 << (tsqlParser.NAME - 332)) | (1 << (tsqlParser.NOCOUNT - 332)) | (1 << (tsqlParser.NODES - 332)) | (1 << (tsqlParser.NOEXPAND - 332)) | (1 << (tsqlParser.NORECOMPUTE - 332)) | (1 << (tsqlParser.NTILE - 332)) | (1 << (tsqlParser.NUMBER - 332)) | (1 << (tsqlParser.OFFSET - 332)) | (1 << (tsqlParser.ONLINE - 332)) | (1 << (tsqlParser.ONLY - 332)) | (1 << (tsqlParser.OPTIMISTIC - 332)) | (1 << (tsqlParser.OPTIMIZE - 332)) | (1 << (tsqlParser.OUT - 332)) | (1 << (tsqlParser.OUTPUT - 332)) | (1 << (tsqlParser.OWNER - 332)) | (1 << (tsqlParser.PARAMETERIZATION - 332)) | (1 << (tsqlParser.PARTITION - 332)) | (1 << (tsqlParser.PATH - 332)) | (1 << (tsqlParser.PRECEDING - 332)) | (1 << (tsqlParser.PRIOR - 332)) | (1 << (tsqlParser.PRIVILEGES - 332)) | (1 << (tsqlParser.QUERY - 332)) | (1 << (tsqlParser.RANGE - 332)) | (1 << (tsqlParser.RANK - 332)) | (1 << (tsqlParser.READONLY - 332)) | (1 << (tsqlParser.READ_ONLY - 332)) | (1 << (tsqlParser.RECOMPILE - 332)) | (1 << (tsqlParser.RELATIVE - 332)) | (1 << (tsqlParser.REMOTE - 332)) | (1 << (tsqlParser.REPEATABLE - 332)) | (1 << (tsqlParser.ROBUST - 332)) | (1 << (tsqlParser.ROOT - 332)) | (1 << (tsqlParser.ROW - 332)) | (1 << (tsqlParser.ROWGUID - 332)) | (1 << (tsqlParser.ROWS - 332)) | (1 << (tsqlParser.ROW_NUMBER - 332)) | (1 << (tsqlParser.SAMPLE - 332)) | (1 << (tsqlParser.SCHEMABINDING - 332)) | (1 << (tsqlParser.SCROLL - 332)) | (1 << (tsqlParser.SCROLL_LOCKS - 332)) | (1 << (tsqlParser.SELF - 332)) | (1 << (tsqlParser.SERIALIZABLE - 332)))) != 0) or ((((_la - 397)) & ~0x3f) == 0 and ((1 << (_la - 397)) & ((1 << (tsqlParser.SIMPLE - 397)) | (1 << (tsqlParser.SIZE - 397)) | (1 << (tsqlParser.SNAPSHOT - 397)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 397)) | (1 << (tsqlParser.STATIC - 397)) | (1 << (tsqlParser.STATS_STREAM - 397)) | (1 << (tsqlParser.STDEV - 397)) | (1 << (tsqlParser.STDEVP - 397)) | (1 << (tsqlParser.SUM - 397)) | (1 << (tsqlParser.TEXTIMAGE_ON - 397)) | (1 << (tsqlParser.THROW - 397)) | (1 << (tsqlParser.TIES - 397)) | (1 << (tsqlParser.TIME - 397)) | (1 << (tsqlParser.TRY - 397)) | (1 << (tsqlParser.TYPE - 397)) | (1 << (tsqlParser.TYPE_WARNING - 397)) | (1 << (tsqlParser.UNBOUNDED - 397)) | (1 << (tsqlParser.UNCOMMITTED - 397)) | (1 << (tsqlParser.UNKNOWN - 397)) | (1 << (tsqlParser.USING - 397)) | (1 << (tsqlParser.VAR - 397)) | (1 << (tsqlParser.VARP - 397)) | (1 << (tsqlParser.VIEWS - 397)) | (1 << (tsqlParser.VIEW_METADATA - 397)) | (1 << (tsqlParser.WORK - 397)) | (1 << (tsqlParser.XML - 397)) | (1 << (tsqlParser.XMLNAMESPACES - 397)) | (1 << (tsqlParser.ZONE - 397)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 397)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 397)) | (1 << (tsqlParser.ID - 397)))) != 0) or _la==tsqlParser.LR_BRACKET:
                self.state = 414
                self.batch()
                self.state = 419
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 420
            self.match(tsqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_clauses(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,0)


        def go_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Go_statementContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Go_statementContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_batch




    def batch(self):

        localctx = tsqlParser.BatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_batch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.GO:
                self.state = 422
                self.go_statement()


            self.state = 425
            self.sql_clauses()
            self.state = 427
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 426
                self.go_statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.SEMI)
            else:
                return self.getToken(tsqlParser.SEMI, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_sql_clauses




    def sql_clauses(self):

        localctx = tsqlParser.Sql_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_clauses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 433 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 429
                    self.sql_clause()
                    self.state = 431
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                    if la_ == 1:
                        self.state = 430
                        self.match(tsqlParser.SEMI)



                else:
                    raise NoViableAltException(self)
                self.state = 435 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_clause(self):
            return self.getTypedRuleContext(tsqlParser.Dml_clauseContext,0)


        def ddl_clause(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_clauseContext,0)


        def cfl_statement(self):
            return self.getTypedRuleContext(tsqlParser.Cfl_statementContext,0)


        def another_statement(self):
            return self.getTypedRuleContext(tsqlParser.Another_statementContext,0)


        def cfl_clause(self):
            return self.getTypedRuleContext(tsqlParser.Cfl_clauseContext,0)


        def declare_statement(self):
            return self.getTypedRuleContext(tsqlParser.Declare_statementContext,0)


        def print_statement(self):
            return self.getTypedRuleContext(tsqlParser.Print_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_sql_clause




    def sql_clause(self):

        localctx = tsqlParser.Sql_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_sql_clause)
        try:
            self.state = 444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 437
                self.dml_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 438
                self.ddl_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 439
                self.cfl_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 440
                self.another_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 441
                self.cfl_clause()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 442
                self.declare_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 443
                self.print_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dml_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def delete_statement(self):
            return self.getTypedRuleContext(tsqlParser.Delete_statementContext,0)


        def insert_statement(self):
            return self.getTypedRuleContext(tsqlParser.Insert_statementContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def update_statement(self):
            return self.getTypedRuleContext(tsqlParser.Update_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_dml_clause




    def dml_clause(self):

        localctx = tsqlParser.Dml_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_dml_clause)
        try:
            self.state = 450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 446
                self.delete_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 447
                self.insert_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 448
                self.select_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 449
                self.update_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ddl_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_database(self):
            return self.getTypedRuleContext(tsqlParser.Create_databaseContext,0)


        def create_index(self):
            return self.getTypedRuleContext(tsqlParser.Create_indexContext,0)


        def create_or_alter_function(self):
            return self.getTypedRuleContext(tsqlParser.Create_or_alter_functionContext,0)


        def create_or_alter_procedure(self):
            return self.getTypedRuleContext(tsqlParser.Create_or_alter_procedureContext,0)


        def create_statistics(self):
            return self.getTypedRuleContext(tsqlParser.Create_statisticsContext,0)


        def create_schema(self):
            return self.getTypedRuleContext(tsqlParser.Create_schemaContext,0)


        def create_synonym(self):
            return self.getTypedRuleContext(tsqlParser.Create_synonymContext,0)


        def create_table(self):
            return self.getTypedRuleContext(tsqlParser.Create_tableContext,0)


        def create_type(self):
            return self.getTypedRuleContext(tsqlParser.Create_typeContext,0)


        def create_view(self):
            return self.getTypedRuleContext(tsqlParser.Create_viewContext,0)


        def alter_table(self):
            return self.getTypedRuleContext(tsqlParser.Alter_tableContext,0)


        def alter_database(self):
            return self.getTypedRuleContext(tsqlParser.Alter_databaseContext,0)


        def drop_index(self):
            return self.getTypedRuleContext(tsqlParser.Drop_indexContext,0)


        def drop_procedure(self):
            return self.getTypedRuleContext(tsqlParser.Drop_procedureContext,0)


        def drop_statistics(self):
            return self.getTypedRuleContext(tsqlParser.Drop_statisticsContext,0)


        def drop_synonym(self):
            return self.getTypedRuleContext(tsqlParser.Drop_synonymContext,0)


        def drop_table(self):
            return self.getTypedRuleContext(tsqlParser.Drop_tableContext,0)


        def drop_type(self):
            return self.getTypedRuleContext(tsqlParser.Drop_typeContext,0)


        def drop_view(self):
            return self.getTypedRuleContext(tsqlParser.Drop_viewContext,0)


        def drop_database(self):
            return self.getTypedRuleContext(tsqlParser.Drop_databaseContext,0)


        def drop_schema(self):
            return self.getTypedRuleContext(tsqlParser.Drop_schemaContext,0)


        def drop_function(self):
            return self.getTypedRuleContext(tsqlParser.Drop_functionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_ddl_clause




    def ddl_clause(self):

        localctx = tsqlParser.Ddl_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_ddl_clause)
        try:
            self.state = 474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 452
                self.create_database()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 453
                self.create_index()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 454
                self.create_or_alter_function()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 455
                self.create_or_alter_procedure()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 456
                self.create_statistics()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 457
                self.create_schema()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 458
                self.create_synonym()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 459
                self.create_table()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 460
                self.create_type()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 461
                self.create_view()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 462
                self.alter_table()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 463
                self.alter_database()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 464
                self.drop_index()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 465
                self.drop_procedure()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 466
                self.drop_statistics()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 467
                self.drop_synonym()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 468
                self.drop_table()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 469
                self.drop_type()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 470
                self.drop_view()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 471
                self.drop_database()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 472
                self.drop_schema()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 473
                self.drop_function()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cfl_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_statement(self):
            return self.getTypedRuleContext(tsqlParser.If_statementContext,0)


        def try_catch_statement(self):
            return self.getTypedRuleContext(tsqlParser.Try_catch_statementContext,0)


        def waitfor_statement(self):
            return self.getTypedRuleContext(tsqlParser.Waitfor_statementContext,0)


        def while_statement(self):
            return self.getTypedRuleContext(tsqlParser.While_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_cfl_statement




    def cfl_statement(self):

        localctx = tsqlParser.Cfl_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_cfl_statement)
        try:
            self.state = 480
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 476
                self.if_statement()
                pass
            elif token in [tsqlParser.BEGIN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 477
                self.try_catch_statement()
                pass
            elif token in [tsqlParser.WAITFOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 478
                self.waitfor_statement()
                pass
            elif token in [tsqlParser.WHILE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 479
                self.while_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cfl_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block_statement(self):
            return self.getTypedRuleContext(tsqlParser.Block_statementContext,0)


        def break_statement(self):
            return self.getTypedRuleContext(tsqlParser.Break_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(tsqlParser.Continue_statementContext,0)


        def goto_statement(self):
            return self.getTypedRuleContext(tsqlParser.Goto_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(tsqlParser.Return_statementContext,0)


        def throw_statement(self):
            return self.getTypedRuleContext(tsqlParser.Throw_statementContext,0)


        def raiseerror_statement(self):
            return self.getTypedRuleContext(tsqlParser.Raiseerror_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_cfl_clause




    def cfl_clause(self):

        localctx = tsqlParser.Cfl_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_cfl_clause)
        try:
            self.state = 489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 482
                self.block_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 483
                self.break_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 484
                self.continue_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 485
                self.goto_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 486
                self.return_statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 487
                self.throw_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 488
                self.raiseerror_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(tsqlParser.BEGIN, 0)

        def END(self):
            return self.getToken(tsqlParser.END, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.SEMI)
            else:
                return self.getToken(tsqlParser.SEMI, i)

        def sql_clauses(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_block_statement




    def block_statement(self):

        localctx = tsqlParser.Block_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_block_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self.match(tsqlParser.BEGIN)
            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.SEMI:
                self.state = 492
                self.match(tsqlParser.SEMI)


            self.state = 496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.ALTER) | (1 << tsqlParser.BEGIN) | (1 << tsqlParser.BREAK) | (1 << tsqlParser.CLOSE) | (1 << tsqlParser.COMMIT) | (1 << tsqlParser.CONTINUE) | (1 << tsqlParser.CREATE) | (1 << tsqlParser.DEALLOCATE) | (1 << tsqlParser.DECLARE) | (1 << tsqlParser.DELETE) | (1 << tsqlParser.DROP) | (1 << tsqlParser.EXECUTE))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (tsqlParser.FETCH - 68)) | (1 << (tsqlParser.FILLFACTOR - 68)) | (1 << (tsqlParser.FORCESEEK - 68)) | (1 << (tsqlParser.GOTO - 68)) | (1 << (tsqlParser.GRANT - 68)) | (1 << (tsqlParser.IF - 68)) | (1 << (tsqlParser.INSERT - 68)) | (1 << (tsqlParser.NEXT - 68)) | (1 << (tsqlParser.NUMERIC - 68)) | (1 << (tsqlParser.OPEN - 68)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (tsqlParser.PRINT - 136)) | (1 << (tsqlParser.RAISERROR - 136)) | (1 << (tsqlParser.RETURN - 136)) | (1 << (tsqlParser.REVERT - 136)) | (1 << (tsqlParser.ROLLBACK - 136)) | (1 << (tsqlParser.SAVE - 136)) | (1 << (tsqlParser.SELECT - 136)) | (1 << (tsqlParser.SET - 136)) | (1 << (tsqlParser.UPDATE - 136)) | (1 << (tsqlParser.USE - 136)) | (1 << (tsqlParser.VALUE - 136)) | (1 << (tsqlParser.WAITFOR - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (tsqlParser.WHILE - 202)) | (1 << (tsqlParser.WITH - 202)) | (1 << (tsqlParser.ABSOLUTE - 202)) | (1 << (tsqlParser.APPLY - 202)) | (1 << (tsqlParser.AUTO - 202)) | (1 << (tsqlParser.AVG - 202)) | (1 << (tsqlParser.BASE64 - 202)) | (1 << (tsqlParser.CALLER - 202)) | (1 << (tsqlParser.CAST - 202)) | (1 << (tsqlParser.CATCH - 202)) | (1 << (tsqlParser.CHECKSUM_AGG - 202)) | (1 << (tsqlParser.COMMITTED - 202)) | (1 << (tsqlParser.CONCAT - 202)) | (1 << (tsqlParser.CONTROL - 202)) | (1 << (tsqlParser.COOKIE - 202)) | (1 << (tsqlParser.COUNT - 202)) | (1 << (tsqlParser.COUNT_BIG - 202)) | (1 << (tsqlParser.DATE - 202)) | (1 << (tsqlParser.DELAY - 202)) | (1 << (tsqlParser.DELETED - 202)) | (1 << (tsqlParser.DENSE_RANK - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (tsqlParser.DISABLE - 266)) | (1 << (tsqlParser.DYNAMIC - 266)) | (1 << (tsqlParser.ENCRYPTION - 266)) | (1 << (tsqlParser.EXIST - 266)) | (1 << (tsqlParser.EXPAND - 266)) | (1 << (tsqlParser.FAST - 266)) | (1 << (tsqlParser.FAST_FORWARD - 266)) | (1 << (tsqlParser.FIRST - 266)) | (1 << (tsqlParser.FIRST_VALUE - 266)) | (1 << (tsqlParser.FOLLOWING - 266)) | (1 << (tsqlParser.FORCE - 266)) | (1 << (tsqlParser.FORCED - 266)) | (1 << (tsqlParser.FORWARD_ONLY - 266)) | (1 << (tsqlParser.FULLSCAN - 266)) | (1 << (tsqlParser.GLOBAL - 266)) | (1 << (tsqlParser.GROUPING - 266)) | (1 << (tsqlParser.GROUPING_ID - 266)) | (1 << (tsqlParser.HASH - 266)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 266)) | (1 << (tsqlParser.IMPERSONATE - 266)) | (1 << (tsqlParser.INSENSITIVE - 266)) | (1 << (tsqlParser.INSERTED - 266)) | (1 << (tsqlParser.ISOLATION - 266)) | (1 << (tsqlParser.IO - 266)) | (1 << (tsqlParser.KEEP - 266)) | (1 << (tsqlParser.KEEPFIXED - 266)) | (1 << (tsqlParser.KEYSET - 266)) | (1 << (tsqlParser.LAG - 266)) | (1 << (tsqlParser.LAST - 266)) | (1 << (tsqlParser.LAST_VALUE - 266)) | (1 << (tsqlParser.LEAD - 266)) | (1 << (tsqlParser.LEVEL - 266)) | (1 << (tsqlParser.LOCAL - 266)) | (1 << (tsqlParser.LOCK_ESCALATION - 266)) | (1 << (tsqlParser.LOGIN - 266)) | (1 << (tsqlParser.LOOP - 266)) | (1 << (tsqlParser.MARK - 266)) | (1 << (tsqlParser.MAX - 266)) | (1 << (tsqlParser.MAXDOP - 266)) | (1 << (tsqlParser.MAXRECURSION - 266)) | (1 << (tsqlParser.MIN - 266)))) != 0) or ((((_la - 332)) & ~0x3f) == 0 and ((1 << (_la - 332)) & ((1 << (tsqlParser.MODIFY - 332)) | (1 << (tsqlParser.NAME - 332)) | (1 << (tsqlParser.NOCOUNT - 332)) | (1 << (tsqlParser.NODES - 332)) | (1 << (tsqlParser.NOEXPAND - 332)) | (1 << (tsqlParser.NORECOMPUTE - 332)) | (1 << (tsqlParser.NTILE - 332)) | (1 << (tsqlParser.NUMBER - 332)) | (1 << (tsqlParser.OFFSET - 332)) | (1 << (tsqlParser.ONLINE - 332)) | (1 << (tsqlParser.ONLY - 332)) | (1 << (tsqlParser.OPTIMISTIC - 332)) | (1 << (tsqlParser.OPTIMIZE - 332)) | (1 << (tsqlParser.OUT - 332)) | (1 << (tsqlParser.OUTPUT - 332)) | (1 << (tsqlParser.OWNER - 332)) | (1 << (tsqlParser.PARAMETERIZATION - 332)) | (1 << (tsqlParser.PARTITION - 332)) | (1 << (tsqlParser.PATH - 332)) | (1 << (tsqlParser.PRECEDING - 332)) | (1 << (tsqlParser.PRIOR - 332)) | (1 << (tsqlParser.PRIVILEGES - 332)) | (1 << (tsqlParser.QUERY - 332)) | (1 << (tsqlParser.RANGE - 332)) | (1 << (tsqlParser.RANK - 332)) | (1 << (tsqlParser.READONLY - 332)) | (1 << (tsqlParser.READ_ONLY - 332)) | (1 << (tsqlParser.RECOMPILE - 332)) | (1 << (tsqlParser.RELATIVE - 332)) | (1 << (tsqlParser.REMOTE - 332)) | (1 << (tsqlParser.REPEATABLE - 332)) | (1 << (tsqlParser.ROBUST - 332)) | (1 << (tsqlParser.ROOT - 332)) | (1 << (tsqlParser.ROW - 332)) | (1 << (tsqlParser.ROWGUID - 332)) | (1 << (tsqlParser.ROWS - 332)) | (1 << (tsqlParser.ROW_NUMBER - 332)) | (1 << (tsqlParser.SAMPLE - 332)) | (1 << (tsqlParser.SCHEMABINDING - 332)) | (1 << (tsqlParser.SCROLL - 332)) | (1 << (tsqlParser.SCROLL_LOCKS - 332)) | (1 << (tsqlParser.SELF - 332)) | (1 << (tsqlParser.SERIALIZABLE - 332)))) != 0) or ((((_la - 397)) & ~0x3f) == 0 and ((1 << (_la - 397)) & ((1 << (tsqlParser.SIMPLE - 397)) | (1 << (tsqlParser.SIZE - 397)) | (1 << (tsqlParser.SNAPSHOT - 397)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 397)) | (1 << (tsqlParser.STATIC - 397)) | (1 << (tsqlParser.STATS_STREAM - 397)) | (1 << (tsqlParser.STDEV - 397)) | (1 << (tsqlParser.STDEVP - 397)) | (1 << (tsqlParser.SUM - 397)) | (1 << (tsqlParser.TEXTIMAGE_ON - 397)) | (1 << (tsqlParser.THROW - 397)) | (1 << (tsqlParser.TIES - 397)) | (1 << (tsqlParser.TIME - 397)) | (1 << (tsqlParser.TRY - 397)) | (1 << (tsqlParser.TYPE - 397)) | (1 << (tsqlParser.TYPE_WARNING - 397)) | (1 << (tsqlParser.UNBOUNDED - 397)) | (1 << (tsqlParser.UNCOMMITTED - 397)) | (1 << (tsqlParser.UNKNOWN - 397)) | (1 << (tsqlParser.USING - 397)) | (1 << (tsqlParser.VAR - 397)) | (1 << (tsqlParser.VARP - 397)) | (1 << (tsqlParser.VIEWS - 397)) | (1 << (tsqlParser.VIEW_METADATA - 397)) | (1 << (tsqlParser.WORK - 397)) | (1 << (tsqlParser.XML - 397)) | (1 << (tsqlParser.XMLNAMESPACES - 397)) | (1 << (tsqlParser.ZONE - 397)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 397)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 397)) | (1 << (tsqlParser.ID - 397)))) != 0) or _la==tsqlParser.LR_BRACKET:
                self.state = 495
                self.sql_clauses()


            self.state = 498
            self.match(tsqlParser.END)
            self.state = 500
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 499
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(tsqlParser.BREAK, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_break_statement




    def break_statement(self):

        localctx = tsqlParser.Break_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_break_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.match(tsqlParser.BREAK)
            self.state = 504
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 503
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(tsqlParser.CONTINUE, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_continue_statement




    def continue_statement(self):

        localctx = tsqlParser.Continue_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_continue_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self.match(tsqlParser.CONTINUE)
            self.state = 508
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 507
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Goto_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(tsqlParser.GOTO, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def COLON(self):
            return self.getToken(tsqlParser.COLON, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_goto_statement




    def goto_statement(self):

        localctx = tsqlParser.Goto_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_goto_statement)
        try:
            self.state = 520
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.GOTO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 510
                self.match(tsqlParser.GOTO)
                self.state = 511
                self.r_id()
                self.state = 513
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 512
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 515
                self.r_id()
                self.state = 516
                self.match(tsqlParser.COLON)
                self.state = 518
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 517
                    self.match(tsqlParser.SEMI)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def if_block(self):
            return self.getTypedRuleContext(tsqlParser.If_blockContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_if_statement




    def if_statement(self):

        localctx = tsqlParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_if_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            self.match(tsqlParser.IF)
            self.state = 523
            self.search_condition(0)
            self.state = 524
            self.if_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.if_expr = None # Sql_clauseContext
            self.else_expr = None # Sql_clauseContext
            self.if_block_expr = None # Block_statementContext
            self.else_block_expr = None # Block_statementContext

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,i)


        def ELSE(self):
            return self.getToken(tsqlParser.ELSE, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def block_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Block_statementContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Block_statementContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_if_block




    def if_block(self):

        localctx = tsqlParser.If_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_if_block)
        try:
            self.state = 542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 526
                localctx.if_expr = self.sql_clause()
                self.state = 529
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 527
                    self.match(tsqlParser.ELSE)
                    self.state = 528
                    localctx.else_expr = self.sql_clause()


                self.state = 532
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 531
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 534
                localctx.if_block_expr = self.block_statement()
                self.state = 537
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
                if la_ == 1:
                    self.state = 535
                    self.match(tsqlParser.ELSE)
                    self.state = 536
                    localctx.else_block_expr = self.block_statement()


                self.state = 540
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                if la_ == 1:
                    self.state = 539
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(tsqlParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_return_statement




    def return_statement(self):

        localctx = tsqlParser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_return_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.match(tsqlParser.RETURN)
            self.state = 546
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 545
                self.expression(0)


            self.state = 549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 548
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throw_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.error_number = None # Token
            self.message = None # Token
            self.state = None # Token

        def THROW(self):
            return self.getToken(tsqlParser.THROW, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LOCAL_ID)
            else:
                return self.getToken(tsqlParser.LOCAL_ID, i)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_throw_statement




    def throw_statement(self):

        localctx = tsqlParser.Throw_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_throw_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(tsqlParser.THROW)
            self.state = 557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.LOCAL_ID or _la==tsqlParser.DECIMAL:
                self.state = 552
                localctx.error_number = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.LOCAL_ID or _la==tsqlParser.DECIMAL):
                    localctx.error_number = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 553
                self.match(tsqlParser.COMMA)
                self.state = 554
                localctx.message = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.LOCAL_ID or _la==tsqlParser.STRING):
                    localctx.message = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 555
                self.match(tsqlParser.COMMA)
                self.state = 556
                localctx.state = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.LOCAL_ID or _la==tsqlParser.DECIMAL):
                    localctx.state = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 560
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 559
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_catch_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.try_clauses = None # Sql_clausesContext
            self.catch_clauses = None # Sql_clausesContext

        def BEGIN(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.BEGIN)
            else:
                return self.getToken(tsqlParser.BEGIN, i)

        def TRY(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.TRY)
            else:
                return self.getToken(tsqlParser.TRY, i)

        def END(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.END)
            else:
                return self.getToken(tsqlParser.END, i)

        def CATCH(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.CATCH)
            else:
                return self.getToken(tsqlParser.CATCH, i)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.SEMI)
            else:
                return self.getToken(tsqlParser.SEMI, i)

        def sql_clauses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clausesContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_try_catch_statement




    def try_catch_statement(self):

        localctx = tsqlParser.Try_catch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_try_catch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.match(tsqlParser.BEGIN)
            self.state = 563
            self.match(tsqlParser.TRY)
            self.state = 565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.SEMI:
                self.state = 564
                self.match(tsqlParser.SEMI)


            self.state = 568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.ALTER) | (1 << tsqlParser.BEGIN) | (1 << tsqlParser.BREAK) | (1 << tsqlParser.CLOSE) | (1 << tsqlParser.COMMIT) | (1 << tsqlParser.CONTINUE) | (1 << tsqlParser.CREATE) | (1 << tsqlParser.DEALLOCATE) | (1 << tsqlParser.DECLARE) | (1 << tsqlParser.DELETE) | (1 << tsqlParser.DROP) | (1 << tsqlParser.EXECUTE))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (tsqlParser.FETCH - 68)) | (1 << (tsqlParser.FILLFACTOR - 68)) | (1 << (tsqlParser.FORCESEEK - 68)) | (1 << (tsqlParser.GOTO - 68)) | (1 << (tsqlParser.GRANT - 68)) | (1 << (tsqlParser.IF - 68)) | (1 << (tsqlParser.INSERT - 68)) | (1 << (tsqlParser.NEXT - 68)) | (1 << (tsqlParser.NUMERIC - 68)) | (1 << (tsqlParser.OPEN - 68)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (tsqlParser.PRINT - 136)) | (1 << (tsqlParser.RAISERROR - 136)) | (1 << (tsqlParser.RETURN - 136)) | (1 << (tsqlParser.REVERT - 136)) | (1 << (tsqlParser.ROLLBACK - 136)) | (1 << (tsqlParser.SAVE - 136)) | (1 << (tsqlParser.SELECT - 136)) | (1 << (tsqlParser.SET - 136)) | (1 << (tsqlParser.UPDATE - 136)) | (1 << (tsqlParser.USE - 136)) | (1 << (tsqlParser.VALUE - 136)) | (1 << (tsqlParser.WAITFOR - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (tsqlParser.WHILE - 202)) | (1 << (tsqlParser.WITH - 202)) | (1 << (tsqlParser.ABSOLUTE - 202)) | (1 << (tsqlParser.APPLY - 202)) | (1 << (tsqlParser.AUTO - 202)) | (1 << (tsqlParser.AVG - 202)) | (1 << (tsqlParser.BASE64 - 202)) | (1 << (tsqlParser.CALLER - 202)) | (1 << (tsqlParser.CAST - 202)) | (1 << (tsqlParser.CATCH - 202)) | (1 << (tsqlParser.CHECKSUM_AGG - 202)) | (1 << (tsqlParser.COMMITTED - 202)) | (1 << (tsqlParser.CONCAT - 202)) | (1 << (tsqlParser.CONTROL - 202)) | (1 << (tsqlParser.COOKIE - 202)) | (1 << (tsqlParser.COUNT - 202)) | (1 << (tsqlParser.COUNT_BIG - 202)) | (1 << (tsqlParser.DATE - 202)) | (1 << (tsqlParser.DELAY - 202)) | (1 << (tsqlParser.DELETED - 202)) | (1 << (tsqlParser.DENSE_RANK - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (tsqlParser.DISABLE - 266)) | (1 << (tsqlParser.DYNAMIC - 266)) | (1 << (tsqlParser.ENCRYPTION - 266)) | (1 << (tsqlParser.EXIST - 266)) | (1 << (tsqlParser.EXPAND - 266)) | (1 << (tsqlParser.FAST - 266)) | (1 << (tsqlParser.FAST_FORWARD - 266)) | (1 << (tsqlParser.FIRST - 266)) | (1 << (tsqlParser.FIRST_VALUE - 266)) | (1 << (tsqlParser.FOLLOWING - 266)) | (1 << (tsqlParser.FORCE - 266)) | (1 << (tsqlParser.FORCED - 266)) | (1 << (tsqlParser.FORWARD_ONLY - 266)) | (1 << (tsqlParser.FULLSCAN - 266)) | (1 << (tsqlParser.GLOBAL - 266)) | (1 << (tsqlParser.GROUPING - 266)) | (1 << (tsqlParser.GROUPING_ID - 266)) | (1 << (tsqlParser.HASH - 266)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 266)) | (1 << (tsqlParser.IMPERSONATE - 266)) | (1 << (tsqlParser.INSENSITIVE - 266)) | (1 << (tsqlParser.INSERTED - 266)) | (1 << (tsqlParser.ISOLATION - 266)) | (1 << (tsqlParser.IO - 266)) | (1 << (tsqlParser.KEEP - 266)) | (1 << (tsqlParser.KEEPFIXED - 266)) | (1 << (tsqlParser.KEYSET - 266)) | (1 << (tsqlParser.LAG - 266)) | (1 << (tsqlParser.LAST - 266)) | (1 << (tsqlParser.LAST_VALUE - 266)) | (1 << (tsqlParser.LEAD - 266)) | (1 << (tsqlParser.LEVEL - 266)) | (1 << (tsqlParser.LOCAL - 266)) | (1 << (tsqlParser.LOCK_ESCALATION - 266)) | (1 << (tsqlParser.LOGIN - 266)) | (1 << (tsqlParser.LOOP - 266)) | (1 << (tsqlParser.MARK - 266)) | (1 << (tsqlParser.MAX - 266)) | (1 << (tsqlParser.MAXDOP - 266)) | (1 << (tsqlParser.MAXRECURSION - 266)) | (1 << (tsqlParser.MIN - 266)))) != 0) or ((((_la - 332)) & ~0x3f) == 0 and ((1 << (_la - 332)) & ((1 << (tsqlParser.MODIFY - 332)) | (1 << (tsqlParser.NAME - 332)) | (1 << (tsqlParser.NOCOUNT - 332)) | (1 << (tsqlParser.NODES - 332)) | (1 << (tsqlParser.NOEXPAND - 332)) | (1 << (tsqlParser.NORECOMPUTE - 332)) | (1 << (tsqlParser.NTILE - 332)) | (1 << (tsqlParser.NUMBER - 332)) | (1 << (tsqlParser.OFFSET - 332)) | (1 << (tsqlParser.ONLINE - 332)) | (1 << (tsqlParser.ONLY - 332)) | (1 << (tsqlParser.OPTIMISTIC - 332)) | (1 << (tsqlParser.OPTIMIZE - 332)) | (1 << (tsqlParser.OUT - 332)) | (1 << (tsqlParser.OUTPUT - 332)) | (1 << (tsqlParser.OWNER - 332)) | (1 << (tsqlParser.PARAMETERIZATION - 332)) | (1 << (tsqlParser.PARTITION - 332)) | (1 << (tsqlParser.PATH - 332)) | (1 << (tsqlParser.PRECEDING - 332)) | (1 << (tsqlParser.PRIOR - 332)) | (1 << (tsqlParser.PRIVILEGES - 332)) | (1 << (tsqlParser.QUERY - 332)) | (1 << (tsqlParser.RANGE - 332)) | (1 << (tsqlParser.RANK - 332)) | (1 << (tsqlParser.READONLY - 332)) | (1 << (tsqlParser.READ_ONLY - 332)) | (1 << (tsqlParser.RECOMPILE - 332)) | (1 << (tsqlParser.RELATIVE - 332)) | (1 << (tsqlParser.REMOTE - 332)) | (1 << (tsqlParser.REPEATABLE - 332)) | (1 << (tsqlParser.ROBUST - 332)) | (1 << (tsqlParser.ROOT - 332)) | (1 << (tsqlParser.ROW - 332)) | (1 << (tsqlParser.ROWGUID - 332)) | (1 << (tsqlParser.ROWS - 332)) | (1 << (tsqlParser.ROW_NUMBER - 332)) | (1 << (tsqlParser.SAMPLE - 332)) | (1 << (tsqlParser.SCHEMABINDING - 332)) | (1 << (tsqlParser.SCROLL - 332)) | (1 << (tsqlParser.SCROLL_LOCKS - 332)) | (1 << (tsqlParser.SELF - 332)) | (1 << (tsqlParser.SERIALIZABLE - 332)))) != 0) or ((((_la - 397)) & ~0x3f) == 0 and ((1 << (_la - 397)) & ((1 << (tsqlParser.SIMPLE - 397)) | (1 << (tsqlParser.SIZE - 397)) | (1 << (tsqlParser.SNAPSHOT - 397)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 397)) | (1 << (tsqlParser.STATIC - 397)) | (1 << (tsqlParser.STATS_STREAM - 397)) | (1 << (tsqlParser.STDEV - 397)) | (1 << (tsqlParser.STDEVP - 397)) | (1 << (tsqlParser.SUM - 397)) | (1 << (tsqlParser.TEXTIMAGE_ON - 397)) | (1 << (tsqlParser.THROW - 397)) | (1 << (tsqlParser.TIES - 397)) | (1 << (tsqlParser.TIME - 397)) | (1 << (tsqlParser.TRY - 397)) | (1 << (tsqlParser.TYPE - 397)) | (1 << (tsqlParser.TYPE_WARNING - 397)) | (1 << (tsqlParser.UNBOUNDED - 397)) | (1 << (tsqlParser.UNCOMMITTED - 397)) | (1 << (tsqlParser.UNKNOWN - 397)) | (1 << (tsqlParser.USING - 397)) | (1 << (tsqlParser.VAR - 397)) | (1 << (tsqlParser.VARP - 397)) | (1 << (tsqlParser.VIEWS - 397)) | (1 << (tsqlParser.VIEW_METADATA - 397)) | (1 << (tsqlParser.WORK - 397)) | (1 << (tsqlParser.XML - 397)) | (1 << (tsqlParser.XMLNAMESPACES - 397)) | (1 << (tsqlParser.ZONE - 397)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 397)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 397)) | (1 << (tsqlParser.ID - 397)))) != 0) or _la==tsqlParser.LR_BRACKET:
                self.state = 567
                localctx.try_clauses = self.sql_clauses()


            self.state = 570
            self.match(tsqlParser.END)
            self.state = 571
            self.match(tsqlParser.TRY)
            self.state = 573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.SEMI:
                self.state = 572
                self.match(tsqlParser.SEMI)


            self.state = 575
            self.match(tsqlParser.BEGIN)
            self.state = 576
            self.match(tsqlParser.CATCH)
            self.state = 578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.SEMI:
                self.state = 577
                self.match(tsqlParser.SEMI)


            self.state = 581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.ALTER) | (1 << tsqlParser.BEGIN) | (1 << tsqlParser.BREAK) | (1 << tsqlParser.CLOSE) | (1 << tsqlParser.COMMIT) | (1 << tsqlParser.CONTINUE) | (1 << tsqlParser.CREATE) | (1 << tsqlParser.DEALLOCATE) | (1 << tsqlParser.DECLARE) | (1 << tsqlParser.DELETE) | (1 << tsqlParser.DROP) | (1 << tsqlParser.EXECUTE))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (tsqlParser.FETCH - 68)) | (1 << (tsqlParser.FILLFACTOR - 68)) | (1 << (tsqlParser.FORCESEEK - 68)) | (1 << (tsqlParser.GOTO - 68)) | (1 << (tsqlParser.GRANT - 68)) | (1 << (tsqlParser.IF - 68)) | (1 << (tsqlParser.INSERT - 68)) | (1 << (tsqlParser.NEXT - 68)) | (1 << (tsqlParser.NUMERIC - 68)) | (1 << (tsqlParser.OPEN - 68)))) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (tsqlParser.PRINT - 136)) | (1 << (tsqlParser.RAISERROR - 136)) | (1 << (tsqlParser.RETURN - 136)) | (1 << (tsqlParser.REVERT - 136)) | (1 << (tsqlParser.ROLLBACK - 136)) | (1 << (tsqlParser.SAVE - 136)) | (1 << (tsqlParser.SELECT - 136)) | (1 << (tsqlParser.SET - 136)) | (1 << (tsqlParser.UPDATE - 136)) | (1 << (tsqlParser.USE - 136)) | (1 << (tsqlParser.VALUE - 136)) | (1 << (tsqlParser.WAITFOR - 136)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (tsqlParser.WHILE - 202)) | (1 << (tsqlParser.WITH - 202)) | (1 << (tsqlParser.ABSOLUTE - 202)) | (1 << (tsqlParser.APPLY - 202)) | (1 << (tsqlParser.AUTO - 202)) | (1 << (tsqlParser.AVG - 202)) | (1 << (tsqlParser.BASE64 - 202)) | (1 << (tsqlParser.CALLER - 202)) | (1 << (tsqlParser.CAST - 202)) | (1 << (tsqlParser.CATCH - 202)) | (1 << (tsqlParser.CHECKSUM_AGG - 202)) | (1 << (tsqlParser.COMMITTED - 202)) | (1 << (tsqlParser.CONCAT - 202)) | (1 << (tsqlParser.CONTROL - 202)) | (1 << (tsqlParser.COOKIE - 202)) | (1 << (tsqlParser.COUNT - 202)) | (1 << (tsqlParser.COUNT_BIG - 202)) | (1 << (tsqlParser.DATE - 202)) | (1 << (tsqlParser.DELAY - 202)) | (1 << (tsqlParser.DELETED - 202)) | (1 << (tsqlParser.DENSE_RANK - 202)))) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (tsqlParser.DISABLE - 266)) | (1 << (tsqlParser.DYNAMIC - 266)) | (1 << (tsqlParser.ENCRYPTION - 266)) | (1 << (tsqlParser.EXIST - 266)) | (1 << (tsqlParser.EXPAND - 266)) | (1 << (tsqlParser.FAST - 266)) | (1 << (tsqlParser.FAST_FORWARD - 266)) | (1 << (tsqlParser.FIRST - 266)) | (1 << (tsqlParser.FIRST_VALUE - 266)) | (1 << (tsqlParser.FOLLOWING - 266)) | (1 << (tsqlParser.FORCE - 266)) | (1 << (tsqlParser.FORCED - 266)) | (1 << (tsqlParser.FORWARD_ONLY - 266)) | (1 << (tsqlParser.FULLSCAN - 266)) | (1 << (tsqlParser.GLOBAL - 266)) | (1 << (tsqlParser.GROUPING - 266)) | (1 << (tsqlParser.GROUPING_ID - 266)) | (1 << (tsqlParser.HASH - 266)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 266)) | (1 << (tsqlParser.IMPERSONATE - 266)) | (1 << (tsqlParser.INSENSITIVE - 266)) | (1 << (tsqlParser.INSERTED - 266)) | (1 << (tsqlParser.ISOLATION - 266)) | (1 << (tsqlParser.IO - 266)) | (1 << (tsqlParser.KEEP - 266)) | (1 << (tsqlParser.KEEPFIXED - 266)) | (1 << (tsqlParser.KEYSET - 266)) | (1 << (tsqlParser.LAG - 266)) | (1 << (tsqlParser.LAST - 266)) | (1 << (tsqlParser.LAST_VALUE - 266)) | (1 << (tsqlParser.LEAD - 266)) | (1 << (tsqlParser.LEVEL - 266)) | (1 << (tsqlParser.LOCAL - 266)) | (1 << (tsqlParser.LOCK_ESCALATION - 266)) | (1 << (tsqlParser.LOGIN - 266)) | (1 << (tsqlParser.LOOP - 266)) | (1 << (tsqlParser.MARK - 266)) | (1 << (tsqlParser.MAX - 266)) | (1 << (tsqlParser.MAXDOP - 266)) | (1 << (tsqlParser.MAXRECURSION - 266)) | (1 << (tsqlParser.MIN - 266)))) != 0) or ((((_la - 332)) & ~0x3f) == 0 and ((1 << (_la - 332)) & ((1 << (tsqlParser.MODIFY - 332)) | (1 << (tsqlParser.NAME - 332)) | (1 << (tsqlParser.NOCOUNT - 332)) | (1 << (tsqlParser.NODES - 332)) | (1 << (tsqlParser.NOEXPAND - 332)) | (1 << (tsqlParser.NORECOMPUTE - 332)) | (1 << (tsqlParser.NTILE - 332)) | (1 << (tsqlParser.NUMBER - 332)) | (1 << (tsqlParser.OFFSET - 332)) | (1 << (tsqlParser.ONLINE - 332)) | (1 << (tsqlParser.ONLY - 332)) | (1 << (tsqlParser.OPTIMISTIC - 332)) | (1 << (tsqlParser.OPTIMIZE - 332)) | (1 << (tsqlParser.OUT - 332)) | (1 << (tsqlParser.OUTPUT - 332)) | (1 << (tsqlParser.OWNER - 332)) | (1 << (tsqlParser.PARAMETERIZATION - 332)) | (1 << (tsqlParser.PARTITION - 332)) | (1 << (tsqlParser.PATH - 332)) | (1 << (tsqlParser.PRECEDING - 332)) | (1 << (tsqlParser.PRIOR - 332)) | (1 << (tsqlParser.PRIVILEGES - 332)) | (1 << (tsqlParser.QUERY - 332)) | (1 << (tsqlParser.RANGE - 332)) | (1 << (tsqlParser.RANK - 332)) | (1 << (tsqlParser.READONLY - 332)) | (1 << (tsqlParser.READ_ONLY - 332)) | (1 << (tsqlParser.RECOMPILE - 332)) | (1 << (tsqlParser.RELATIVE - 332)) | (1 << (tsqlParser.REMOTE - 332)) | (1 << (tsqlParser.REPEATABLE - 332)) | (1 << (tsqlParser.ROBUST - 332)) | (1 << (tsqlParser.ROOT - 332)) | (1 << (tsqlParser.ROW - 332)) | (1 << (tsqlParser.ROWGUID - 332)) | (1 << (tsqlParser.ROWS - 332)) | (1 << (tsqlParser.ROW_NUMBER - 332)) | (1 << (tsqlParser.SAMPLE - 332)) | (1 << (tsqlParser.SCHEMABINDING - 332)) | (1 << (tsqlParser.SCROLL - 332)) | (1 << (tsqlParser.SCROLL_LOCKS - 332)) | (1 << (tsqlParser.SELF - 332)) | (1 << (tsqlParser.SERIALIZABLE - 332)))) != 0) or ((((_la - 397)) & ~0x3f) == 0 and ((1 << (_la - 397)) & ((1 << (tsqlParser.SIMPLE - 397)) | (1 << (tsqlParser.SIZE - 397)) | (1 << (tsqlParser.SNAPSHOT - 397)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 397)) | (1 << (tsqlParser.STATIC - 397)) | (1 << (tsqlParser.STATS_STREAM - 397)) | (1 << (tsqlParser.STDEV - 397)) | (1 << (tsqlParser.STDEVP - 397)) | (1 << (tsqlParser.SUM - 397)) | (1 << (tsqlParser.TEXTIMAGE_ON - 397)) | (1 << (tsqlParser.THROW - 397)) | (1 << (tsqlParser.TIES - 397)) | (1 << (tsqlParser.TIME - 397)) | (1 << (tsqlParser.TRY - 397)) | (1 << (tsqlParser.TYPE - 397)) | (1 << (tsqlParser.TYPE_WARNING - 397)) | (1 << (tsqlParser.UNBOUNDED - 397)) | (1 << (tsqlParser.UNCOMMITTED - 397)) | (1 << (tsqlParser.UNKNOWN - 397)) | (1 << (tsqlParser.USING - 397)) | (1 << (tsqlParser.VAR - 397)) | (1 << (tsqlParser.VARP - 397)) | (1 << (tsqlParser.VIEWS - 397)) | (1 << (tsqlParser.VIEW_METADATA - 397)) | (1 << (tsqlParser.WORK - 397)) | (1 << (tsqlParser.XML - 397)) | (1 << (tsqlParser.XMLNAMESPACES - 397)) | (1 << (tsqlParser.ZONE - 397)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 397)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 397)) | (1 << (tsqlParser.ID - 397)))) != 0) or _la==tsqlParser.LR_BRACKET:
                self.state = 580
                localctx.catch_clauses = self.sql_clauses()


            self.state = 583
            self.match(tsqlParser.END)
            self.state = 584
            self.match(tsqlParser.CATCH)
            self.state = 586
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 585
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Waitfor_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAITFOR(self):
            return self.getToken(tsqlParser.WAITFOR, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def DELAY(self):
            return self.getToken(tsqlParser.DELAY, 0)

        def TIME(self):
            return self.getToken(tsqlParser.TIME, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_waitfor_statement




    def waitfor_statement(self):

        localctx = tsqlParser.Waitfor_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_waitfor_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self.match(tsqlParser.WAITFOR)
            self.state = 589
            _la = self._input.LA(1)
            if not(_la==tsqlParser.DELAY or _la==tsqlParser.TIME):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 590
            self.expression(0)
            self.state = 592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 591
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(tsqlParser.WHILE, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def sql_clause(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,0)


        def BREAK(self):
            return self.getToken(tsqlParser.BREAK, 0)

        def CONTINUE(self):
            return self.getToken(tsqlParser.CONTINUE, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_while_statement




    def while_statement(self):

        localctx = tsqlParser.While_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_while_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.match(tsqlParser.WHILE)
            self.state = 595
            self.search_condition(0)
            self.state = 605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 596
                self.sql_clause()
                pass

            elif la_ == 2:
                self.state = 597
                self.match(tsqlParser.BREAK)
                self.state = 599
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                if la_ == 1:
                    self.state = 598
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                self.state = 601
                self.match(tsqlParser.CONTINUE)
                self.state = 603
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 602
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Print_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(tsqlParser.PRINT, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_print_statement




    def print_statement(self):

        localctx = tsqlParser.Print_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_print_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607
            self.match(tsqlParser.PRINT)
            self.state = 608
            self.expression(0)
            self.state = 610
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 609
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raiseerror_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.msg = None # Token
            self.severity = None # Constant_LOCAL_IDContext
            self.state = None # Constant_LOCAL_IDContext

        def RAISERROR(self):
            return self.getToken(tsqlParser.RAISERROR, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def constant_LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Constant_LOCAL_IDContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Constant_LOCAL_IDContext,i)


        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_raiseerror_statement




    def raiseerror_statement(self):

        localctx = tsqlParser.Raiseerror_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_raiseerror_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self.match(tsqlParser.RAISERROR)
            self.state = 613
            self.match(tsqlParser.LR_BRACKET)
            self.state = 614
            localctx.msg = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (tsqlParser.LOCAL_ID - 448)) | (1 << (tsqlParser.DECIMAL - 448)) | (1 << (tsqlParser.STRING - 448)))) != 0)):
                localctx.msg = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 615
            self.match(tsqlParser.COMMA)
            self.state = 616
            localctx.severity = self.constant_LOCAL_ID()
            self.state = 617
            self.match(tsqlParser.COMMA)
            self.state = 618
            localctx.state = self.constant_LOCAL_ID()
            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 619
                self.match(tsqlParser.COMMA)
                self.state = 620
                self.constant_LOCAL_ID()
                self.state = 625
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 626
            self.match(tsqlParser.RR_BRACKET)
            self.state = 628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 627
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Another_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cursor_statement(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_statementContext,0)


        def execute_statement(self):
            return self.getTypedRuleContext(tsqlParser.Execute_statementContext,0)


        def security_statement(self):
            return self.getTypedRuleContext(tsqlParser.Security_statementContext,0)


        def set_statement(self):
            return self.getTypedRuleContext(tsqlParser.Set_statementContext,0)


        def transaction_statement(self):
            return self.getTypedRuleContext(tsqlParser.Transaction_statementContext,0)


        def use_statement(self):
            return self.getTypedRuleContext(tsqlParser.Use_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_another_statement




    def another_statement(self):

        localctx = tsqlParser.Another_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_another_statement)
        try:
            self.state = 636
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 630
                self.cursor_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 631
                self.execute_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 632
                self.security_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 633
                self.set_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 634
                self.transaction_statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 635
                self.use_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(tsqlParser.DELETE, 0)

        def delete_statement_from(self):
            return self.getTypedRuleContext(tsqlParser.Delete_statement_fromContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def top_clause_dm(self):
            return self.getTypedRuleContext(tsqlParser.Top_clause_dmContext,0)


        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.FROM)
            else:
                return self.getToken(tsqlParser.FROM, i)

        def insert_with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.Insert_with_table_hintsContext,0)


        def output_clause(self):
            return self.getTypedRuleContext(tsqlParser.Output_clauseContext,0)


        def table_sources(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourcesContext,0)


        def where_clause_dml(self):
            return self.getTypedRuleContext(tsqlParser.Where_clause_dmlContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_delete_statement




    def delete_statement(self):

        localctx = tsqlParser.Delete_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_delete_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 638
                self.with_expression()


            self.state = 641
            self.match(tsqlParser.DELETE)
            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TOP:
                self.state = 642
                self.top_clause_dm()


            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FROM:
                self.state = 645
                self.match(tsqlParser.FROM)


            self.state = 648
            self.delete_statement_from()
            self.state = 650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 649
                self.insert_with_table_hints()


            self.state = 653
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 652
                self.output_clause()


            self.state = 657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FROM:
                self.state = 655
                self.match(tsqlParser.FROM)
                self.state = 656
                self.table_sources()


            self.state = 660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WHERE:
                self.state = 659
                self.where_clause_dml()


            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FOR:
                self.state = 662
                self.for_clause()


            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.OPTION:
                self.state = 665
                self.option_clause()


            self.state = 669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 668
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_statement_fromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table_var = None # Token

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)


        def ddl_object(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_function_limitedContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_delete_statement_from




    def delete_statement_from(self):

        localctx = tsqlParser.Delete_statement_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_delete_statement_from)
        try:
            self.state = 678
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 671
                self.r_id()
                self.state = 673
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 672
                    self.with_table_hints()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 675
                self.ddl_object()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 676
                self.rowset_function_limited()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 677
                localctx.table_var = self.match(tsqlParser.LOCAL_ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(tsqlParser.INSERT, 0)

        def insert_statement_value(self):
            return self.getTypedRuleContext(tsqlParser.Insert_statement_valueContext,0)


        def ddl_object(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_function_limitedContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def top_clause_dm(self):
            return self.getTypedRuleContext(tsqlParser.Top_clause_dmContext,0)


        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def insert_with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.Insert_with_table_hintsContext,0)


        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def derived_table(self):
            return self.getTypedRuleContext(tsqlParser.Derived_tableContext,0)


        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def output_clause(self):
            return self.getTypedRuleContext(tsqlParser.Output_clauseContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_insert_statement




    def insert_statement(self):

        localctx = tsqlParser.Insert_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_insert_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 680
                self.with_expression()


            self.state = 683
            self.match(tsqlParser.INSERT)
            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TOP:
                self.state = 684
                self.top_clause_dm()


            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.INTO:
                self.state = 687
                self.match(tsqlParser.INTO)


            self.state = 692
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.ID]:
                self.state = 690
                self.ddl_object()
                pass
            elif token in [tsqlParser.OPENDATASOURCE, tsqlParser.OPENQUERY]:
                self.state = 691
                self.rowset_function_limited()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 695
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 694
                self.insert_with_table_hints()


            self.state = 699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FROM:
                self.state = 697
                self.match(tsqlParser.FROM)
                self.state = 698
                self.derived_table()


            self.state = 705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 701
                self.match(tsqlParser.LR_BRACKET)
                self.state = 702
                self.column_name_list()
                self.state = 703
                self.match(tsqlParser.RR_BRACKET)


            self.state = 708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.OUTPUT:
                self.state = 707
                self.output_clause()


            self.state = 710
            self.insert_statement_value()
            self.state = 712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FOR:
                self.state = 711
                self.for_clause()


            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.OPTION:
                self.state = 714
                self.option_clause()


            self.state = 718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 717
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_statement_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_value_constructor(self):
            return self.getTypedRuleContext(tsqlParser.Table_value_constructorContext,0)


        def derived_table(self):
            return self.getTypedRuleContext(tsqlParser.Derived_tableContext,0)


        def execute_statement(self):
            return self.getTypedRuleContext(tsqlParser.Execute_statementContext,0)


        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def VALUES(self):
            return self.getToken(tsqlParser.VALUES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_insert_statement_value




    def insert_statement_value(self):

        localctx = tsqlParser.Insert_statement_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_insert_statement_value)
        try:
            self.state = 725
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.VALUES]:
                self.enterOuterAlt(localctx, 1)
                self.state = 720
                self.table_value_constructor()
                pass
            elif token in [tsqlParser.SELECT, tsqlParser.WITH, tsqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 721
                self.derived_table()
                pass
            elif token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 722
                self.execute_statement()
                pass
            elif token in [tsqlParser.DEFAULT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 723
                self.match(tsqlParser.DEFAULT)
                self.state = 724
                self.match(tsqlParser.VALUES)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_expression(self):
            return self.getTypedRuleContext(tsqlParser.Query_expressionContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(tsqlParser.Order_by_clauseContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_select_statement




    def select_statement(self):

        localctx = tsqlParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 727
                self.with_expression()


            self.state = 730
            self.query_expression(0)
            self.state = 732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 731
                self.order_by_clause()


            self.state = 735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 734
                self.for_clause()


            self.state = 738
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 737
                self.option_clause()


            self.state = 741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 740
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(tsqlParser.UPDATE, 0)

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def update_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Update_elemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Update_elemContext,i)


        def ddl_object(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_function_limitedContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def top_clause_dm(self):
            return self.getTypedRuleContext(tsqlParser.Top_clause_dmContext,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def output_clause(self):
            return self.getTypedRuleContext(tsqlParser.Output_clauseContext,0)


        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def table_sources(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourcesContext,0)


        def where_clause_dml(self):
            return self.getTypedRuleContext(tsqlParser.Where_clause_dmlContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_update_statement




    def update_statement(self):

        localctx = tsqlParser.Update_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_update_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 743
                self.with_expression()


            self.state = 746
            self.match(tsqlParser.UPDATE)
            self.state = 748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TOP:
                self.state = 747
                self.top_clause_dm()


            self.state = 752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.ID]:
                self.state = 750
                self.ddl_object()
                pass
            elif token in [tsqlParser.OPENDATASOURCE, tsqlParser.OPENQUERY]:
                self.state = 751
                self.rowset_function_limited()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH or _la==tsqlParser.LR_BRACKET:
                self.state = 754
                self.with_table_hints()


            self.state = 757
            self.match(tsqlParser.SET)
            self.state = 758
            self.update_elem()
            self.state = 763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 759
                self.match(tsqlParser.COMMA)
                self.state = 760
                self.update_elem()
                self.state = 765
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 767
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 766
                self.output_clause()


            self.state = 771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FROM:
                self.state = 769
                self.match(tsqlParser.FROM)
                self.state = 770
                self.table_sources()


            self.state = 774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WHERE:
                self.state = 773
                self.where_clause_dml()


            self.state = 777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FOR:
                self.state = 776
                self.for_clause()


            self.state = 780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.OPTION:
                self.state = 779
                self.option_clause()


            self.state = 783
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 782
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clause_dmlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cursor_var = None # Token

        def WHERE(self):
            return self.getToken(tsqlParser.WHERE, 0)

        def search_condition_list(self):
            return self.getTypedRuleContext(tsqlParser.Search_condition_listContext,0)


        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_where_clause_dml




    def where_clause_dml(self):

        localctx = tsqlParser.Where_clause_dmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_where_clause_dml)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.match(tsqlParser.WHERE)
            self.state = 796
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CASE, tsqlParser.COALESCE, tsqlParser.CONVERT, tsqlParser.CURRENT_TIMESTAMP, tsqlParser.CURRENT_USER, tsqlParser.DEFAULT, tsqlParser.EXISTS, tsqlParser.EXP, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.IDENTITY, tsqlParser.IIF, tsqlParser.LEFT, tsqlParser.LOG, tsqlParser.LOG10, tsqlParser.NEXT, tsqlParser.NOT, tsqlParser.NULL_, tsqlParser.NULLIF, tsqlParser.NUMERIC, tsqlParser.OVER, tsqlParser.RIGHT, tsqlParser.SESSION_USER, tsqlParser.SIGN, tsqlParser.SYSTEM_USER, tsqlParser.TRY_CAST, tsqlParser.TRY_CONVERT, tsqlParser.TRY_PARSE, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.BINARY_CHECKSUM, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CEILING, tsqlParser.CHECKSUM, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COS, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DATEADD, tsqlParser.DATEDIFF, tsqlParser.DATENAME, tsqlParser.DATEPART, tsqlParser.DATETIMEOFFSETFROMPARTS, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FLOOR, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MIN_ACTIVE_ROWVERSION, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARSE, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PERCENTILE_CONT, tsqlParser.POWER, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROUND, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIN, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.STRING_AGG, tsqlParser.STRING_SPLIT, tsqlParser.SUM, tsqlParser.SQRT, tsqlParser.SQUARE, tsqlParser.TAN, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.ID, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.LR_BRACKET, tsqlParser.PLUS, tsqlParser.MINUS, tsqlParser.BIT_NOT]:
                self.state = 786
                self.search_condition_list()
                pass
            elif token in [tsqlParser.CURRENT]:
                self.state = 787
                self.match(tsqlParser.CURRENT)
                self.state = 788
                self.match(tsqlParser.OF)
                self.state = 794
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 790
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                    if la_ == 1:
                        self.state = 789
                        self.match(tsqlParser.GLOBAL)


                    self.state = 792
                    self.cursor_name()
                    pass

                elif la_ == 2:
                    self.state = 793
                    localctx.cursor_var = self.match(tsqlParser.LOCAL_ID)
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def output_dml_list_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Output_dml_list_elemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Output_dml_list_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_output_clause




    def output_clause(self):

        localctx = tsqlParser.Output_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_output_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(tsqlParser.OUTPUT)
            self.state = 799
            self.output_dml_list_elem()
            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 800
                self.match(tsqlParser.COMMA)
                self.state = 801
                self.output_dml_list_elem()
                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.INTO:
                self.state = 807
                self.match(tsqlParser.INTO)
                self.state = 810
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.LOCAL_ID]:
                    self.state = 808
                    self.match(tsqlParser.LOCAL_ID)
                    pass
                elif token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 809
                    self.table_name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 816
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 812
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 813
                    self.column_name_list()
                    self.state = 814
                    self.match(tsqlParser.RR_BRACKET)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_dml_list_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def output_column_name(self):
            return self.getTypedRuleContext(tsqlParser.Output_column_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(tsqlParser.Column_aliasContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_output_dml_list_elem




    def output_dml_list_elem(self):

        localctx = tsqlParser.Output_dml_list_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_output_dml_list_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 820
                self.output_column_name()
                pass

            elif la_ == 2:
                self.state = 821
                self.expression(0)
                pass


            self.state = 828
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.AS:
                    self.state = 824
                    self.match(tsqlParser.AS)


                self.state = 827
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(tsqlParser.DOT, 0)

        def DELETED(self):
            return self.getToken(tsqlParser.DELETED, 0)

        def INSERTED(self):
            return self.getToken(tsqlParser.INSERTED, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def STAR(self):
            return self.getToken(tsqlParser.STAR, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def DOLLAR_ACTION(self):
            return self.getToken(tsqlParser.DOLLAR_ACTION, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_output_column_name




    def output_column_name(self):

        localctx = tsqlParser.Output_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_output_column_name)
        try:
            self.state = 841
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 833
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 830
                    self.match(tsqlParser.DELETED)
                    pass

                elif la_ == 2:
                    self.state = 831
                    self.match(tsqlParser.INSERTED)
                    pass

                elif la_ == 3:
                    self.state = 832
                    self.table_name()
                    pass


                self.state = 835
                self.match(tsqlParser.DOT)
                self.state = 838
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.STAR]:
                    self.state = 836
                    self.match(tsqlParser.STAR)
                    pass
                elif token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 837
                    self.r_id()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.DOLLAR_ACTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 840
                self.match(tsqlParser.DOLLAR_ACTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_databaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext
            self.collation_name = None # R_idContext

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def CONTAINMENT(self):
            return self.getToken(tsqlParser.CONTAINMENT, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ON)
            else:
                return self.getToken(tsqlParser.ON, i)

        def database_file_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Database_file_specContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Database_file_specContext,i)


        def LOG(self):
            return self.getToken(tsqlParser.LOG, 0)

        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def create_database_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Create_database_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Create_database_optionContext,i)


        def NONE(self):
            return self.getToken(tsqlParser.NONE, 0)

        def PARTIAL(self):
            return self.getToken(tsqlParser.PARTIAL, 0)

        def PRIMARY(self):
            return self.getToken(tsqlParser.PRIMARY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_database




    def create_database(self):

        localctx = tsqlParser.Create_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_create_database)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self.match(tsqlParser.CREATE)
            self.state = 844
            self.match(tsqlParser.DATABASE)

            self.state = 845
            localctx.database = self.r_id()
            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.CONTAINMENT:
                self.state = 846
                self.match(tsqlParser.CONTAINMENT)
                self.state = 847
                self.match(tsqlParser.EQUAL)
                self.state = 848
                _la = self._input.LA(1)
                if not(_la==tsqlParser.NONE or _la==tsqlParser.PARTIAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ON:
                self.state = 851
                self.match(tsqlParser.ON)
                self.state = 853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PRIMARY:
                    self.state = 852
                    self.match(tsqlParser.PRIMARY)


                self.state = 855
                self.database_file_spec()
                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 856
                    self.match(tsqlParser.COMMA)
                    self.state = 857
                    self.database_file_spec()
                    self.state = 862
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.LOG:
                self.state = 865
                self.match(tsqlParser.LOG)
                self.state = 866
                self.match(tsqlParser.ON)
                self.state = 867
                self.database_file_spec()
                self.state = 872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 868
                    self.match(tsqlParser.COMMA)
                    self.state = 869
                    self.database_file_spec()
                    self.state = 874
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COLLATE:
                self.state = 877
                self.match(tsqlParser.COLLATE)
                self.state = 878
                localctx.collation_name = self.r_id()


            self.state = 890
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 881
                self.match(tsqlParser.WITH)
                self.state = 882
                self.create_database_option()
                self.state = 887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 883
                    self.match(tsqlParser.COMMA)
                    self.state = 884
                    self.create_database_option()
                    self.state = 889
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.where = None # Search_conditionContext

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(tsqlParser.INDEX, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ON)
            else:
                return self.getToken(tsqlParser.ON, i)

        def table_name_with_hint(self):
            return self.getTypedRuleContext(tsqlParser.Table_name_with_hintContext,0)


        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LR_BRACKET)
            else:
                return self.getToken(tsqlParser.LR_BRACKET, i)

        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_name_listContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.RR_BRACKET)
            else:
                return self.getToken(tsqlParser.RR_BRACKET, i)

        def UNIQUE(self):
            return self.getToken(tsqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(tsqlParser.ClusteredContext,0)


        def INCLUDE(self):
            return self.getToken(tsqlParser.INCLUDE, 0)

        def WHERE(self):
            return self.getToken(tsqlParser.WHERE, 0)

        def index_options(self):
            return self.getTypedRuleContext(tsqlParser.Index_optionsContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def ASC(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ASC)
            else:
                return self.getToken(tsqlParser.ASC, i)

        def DESC(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DESC)
            else:
                return self.getToken(tsqlParser.DESC, i)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_create_index




    def create_index(self):

        localctx = tsqlParser.Create_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_create_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.match(tsqlParser.CREATE)
            self.state = 894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.UNIQUE:
                self.state = 893
                self.match(tsqlParser.UNIQUE)


            self.state = 897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.CLUSTERED or _la==tsqlParser.NONCLUSTERED:
                self.state = 896
                self.clustered()


            self.state = 899
            self.match(tsqlParser.INDEX)
            self.state = 900
            self.r_id()
            self.state = 901
            self.match(tsqlParser.ON)
            self.state = 902
            self.table_name_with_hint()
            self.state = 903
            self.match(tsqlParser.LR_BRACKET)
            self.state = 904
            self.column_name_list()
            self.state = 906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ASC or _la==tsqlParser.DESC:
                self.state = 905
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ASC or _la==tsqlParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 908
            self.match(tsqlParser.RR_BRACKET)
            self.state = 917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.INCLUDE:
                self.state = 909
                self.match(tsqlParser.INCLUDE)
                self.state = 910
                self.match(tsqlParser.LR_BRACKET)
                self.state = 911
                self.column_name_list()
                self.state = 913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ASC or _la==tsqlParser.DESC:
                    self.state = 912
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.ASC or _la==tsqlParser.DESC):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 915
                self.match(tsqlParser.RR_BRACKET)


            self.state = 921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WHERE:
                self.state = 919
                self.match(tsqlParser.WHERE)
                self.state = 920
                localctx.where = self.search_condition(0)


            self.state = 924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 923
                self.index_options()


            self.state = 928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ON:
                self.state = 926
                self.match(tsqlParser.ON)
                self.state = 927
                self.r_id()


            self.state = 931
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 930
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_statisticsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def STATISTICS(self):
            return self.getToken(tsqlParser.STATISTICS, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def table_name_with_hint(self):
            return self.getTypedRuleContext(tsqlParser.Table_name_with_hintContext,0)


        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def FULLSCAN(self):
            return self.getToken(tsqlParser.FULLSCAN, 0)

        def SAMPLE(self):
            return self.getToken(tsqlParser.SAMPLE, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def STATS_STREAM(self):
            return self.getToken(tsqlParser.STATS_STREAM, 0)

        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def NORECOMPUTE(self):
            return self.getToken(tsqlParser.NORECOMPUTE, 0)

        def INCREMENTAL(self):
            return self.getToken(tsqlParser.INCREMENTAL, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_create_statistics




    def create_statistics(self):

        localctx = tsqlParser.Create_statisticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_create_statistics)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.match(tsqlParser.CREATE)
            self.state = 934
            self.match(tsqlParser.STATISTICS)
            self.state = 935
            self.r_id()
            self.state = 936
            self.match(tsqlParser.ON)
            self.state = 937
            self.table_name_with_hint()
            self.state = 938
            self.match(tsqlParser.LR_BRACKET)
            self.state = 939
            self.column_name_list()
            self.state = 940
            self.match(tsqlParser.RR_BRACKET)
            self.state = 959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 941
                self.match(tsqlParser.WITH)
                self.state = 947
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FULLSCAN]:
                    self.state = 942
                    self.match(tsqlParser.FULLSCAN)
                    pass
                elif token in [tsqlParser.SAMPLE]:
                    self.state = 943
                    self.match(tsqlParser.SAMPLE)
                    self.state = 944
                    self.match(tsqlParser.DECIMAL)
                    self.state = 945
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.PERCENT or _la==tsqlParser.ROWS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [tsqlParser.STATS_STREAM]:
                    self.state = 946
                    self.match(tsqlParser.STATS_STREAM)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 951
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 949
                    self.match(tsqlParser.COMMA)
                    self.state = 950
                    self.match(tsqlParser.NORECOMPUTE)


                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 953
                    self.match(tsqlParser.COMMA)
                    self.state = 954
                    self.match(tsqlParser.INCREMENTAL)
                    self.state = 955
                    self.match(tsqlParser.EQUAL)
                    self.state = 956
                    self.on_off()




            self.state = 962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 961
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def column_def_table_constraints(self):
            return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintsContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(tsqlParser.COMMA, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DEFAULT)
            else:
                return self.getToken(tsqlParser.DEFAULT, i)

        def TEXTIMAGE_ON(self):
            return self.getToken(tsqlParser.TEXTIMAGE_ON, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_table




    def create_table(self):

        localctx = tsqlParser.Create_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_create_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self.match(tsqlParser.CREATE)
            self.state = 965
            self.match(tsqlParser.TABLE)
            self.state = 966
            self.table_name()
            self.state = 967
            self.match(tsqlParser.LR_BRACKET)
            self.state = 968
            self.column_def_table_constraints()
            self.state = 970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COMMA:
                self.state = 969
                self.match(tsqlParser.COMMA)


            self.state = 972
            self.match(tsqlParser.RR_BRACKET)
            self.state = 976
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 973
                self.match(tsqlParser.ON)
                self.state = 974
                self.r_id()

            elif la_ == 2:
                self.state = 975
                self.match(tsqlParser.DEFAULT)


            self.state = 981
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 978
                self.match(tsqlParser.TEXTIMAGE_ON)
                self.state = 979
                self.r_id()

            elif la_ == 2:
                self.state = 980
                self.match(tsqlParser.DEFAULT)


            self.state = 984
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 983
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def SCHEMA(self):
            return self.getToken(tsqlParser.SCHEMA, 0)

        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_schema




    def create_schema(self):

        localctx = tsqlParser.Create_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_create_schema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self.match(tsqlParser.CREATE)
            self.state = 987
            self.match(tsqlParser.SCHEMA)
            self.state = 988
            self.simple_name()
            self.state = 990
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 989
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_synonymContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def SYNONYM(self):
            return self.getToken(tsqlParser.SYNONYM, 0)

        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_synonym




    def create_synonym(self):

        localctx = tsqlParser.Create_synonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_create_synonym)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 992
            self.match(tsqlParser.CREATE)
            self.state = 993
            self.match(tsqlParser.SYNONYM)
            self.state = 994
            self.simple_name()
            self.state = 995
            self.match(tsqlParser.FOR)
            self.state = 996
            self.table_name()
            self.state = 998
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 997
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_viewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(tsqlParser.VIEW, 0)

        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.WITH)
            else:
                return self.getToken(tsqlParser.WITH, i)

        def view_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.View_attributeContext)
            else:
                return self.getTypedRuleContext(tsqlParser.View_attributeContext,i)


        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(tsqlParser.OPTION, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_view




    def create_view(self):

        localctx = tsqlParser.Create_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_create_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self.match(tsqlParser.CREATE)
            self.state = 1001
            self.match(tsqlParser.VIEW)
            self.state = 1002
            self.simple_name()
            self.state = 1007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.LR_BRACKET:
                self.state = 1003
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1004
                self.column_name_list()
                self.state = 1005
                self.match(tsqlParser.RR_BRACKET)


            self.state = 1018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 1009
                self.match(tsqlParser.WITH)
                self.state = 1010
                self.view_attribute()
                self.state = 1015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 1011
                    self.match(tsqlParser.COMMA)
                    self.state = 1012
                    self.view_attribute()
                    self.state = 1017
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1020
            self.match(tsqlParser.AS)
            self.state = 1021
            self.select_statement()
            self.state = 1025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1022
                self.match(tsqlParser.WITH)
                self.state = 1023
                self.match(tsqlParser.CHECK)
                self.state = 1024
                self.match(tsqlParser.OPTION)


            self.state = 1028
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 1027
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class View_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def SCHEMABINDING(self):
            return self.getToken(tsqlParser.SCHEMABINDING, 0)

        def VIEW_METADATA(self):
            return self.getToken(tsqlParser.VIEW_METADATA, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_view_attribute




    def view_attribute(self):

        localctx = tsqlParser.View_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_view_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1030
            _la = self._input.LA(1)
            if not(_la==tsqlParser.ENCRYPTION or _la==tsqlParser.SCHEMABINDING or _la==tsqlParser.VIEW_METADATA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint = None # R_idContext
            self.fk = None # Column_name_listContext
            self.pk = None # Column_name_listContext

        def ALTER(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ALTER)
            else:
                return self.getToken(tsqlParser.ALTER, i)

        def TABLE(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.TABLE)
            else:
                return self.getToken(tsqlParser.TABLE, i)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_nameContext,i)


        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LR_BRACKET)
            else:
                return self.getToken(tsqlParser.LR_BRACKET, i)

        def LOCK_ESCALATION(self):
            return self.getToken(tsqlParser.LOCK_ESCALATION, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.RR_BRACKET)
            else:
                return self.getToken(tsqlParser.RR_BRACKET, i)

        def ADD(self):
            return self.getToken(tsqlParser.ADD, 0)

        def column_def_table_constraint(self):
            return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintContext,0)


        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def FOREIGN(self):
            return self.getToken(tsqlParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(tsqlParser.KEY, 0)

        def REFERENCES(self):
            return self.getToken(tsqlParser.REFERENCES, 0)

        def COLUMN(self):
            return self.getToken(tsqlParser.COLUMN, 0)

        def column_def_table_constraints(self):
            return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintsContext,0)


        def AUTO(self):
            return self.getToken(tsqlParser.AUTO, 0)

        def DISABLE(self):
            return self.getToken(tsqlParser.DISABLE, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_name_listContext,i)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_alter_table




    def alter_table(self):

        localctx = tsqlParser.Alter_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_alter_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.match(tsqlParser.ALTER)
            self.state = 1033
            self.match(tsqlParser.TABLE)
            self.state = 1034
            self.table_name()
            self.state = 1068
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.SET]:
                self.state = 1035
                self.match(tsqlParser.SET)
                self.state = 1036
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1037
                self.match(tsqlParser.LOCK_ESCALATION)
                self.state = 1038
                self.match(tsqlParser.EQUAL)
                self.state = 1039
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TABLE or _la==tsqlParser.AUTO or _la==tsqlParser.DISABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1040
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.ADD]:
                self.state = 1041
                self.match(tsqlParser.ADD)
                self.state = 1042
                self.column_def_table_constraint()
                pass
            elif token in [tsqlParser.DROP]:
                self.state = 1043
                self.match(tsqlParser.DROP)
                self.state = 1044
                self.match(tsqlParser.CONSTRAINT)
                self.state = 1045
                localctx.constraint = self.r_id()
                pass
            elif token in [tsqlParser.WITH]:
                self.state = 1046
                self.match(tsqlParser.WITH)
                self.state = 1047
                self.match(tsqlParser.CHECK)
                self.state = 1048
                self.match(tsqlParser.ADD)
                self.state = 1049
                self.match(tsqlParser.CONSTRAINT)
                self.state = 1050
                localctx.constraint = self.r_id()
                self.state = 1051
                self.match(tsqlParser.FOREIGN)
                self.state = 1052
                self.match(tsqlParser.KEY)
                self.state = 1053
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1054
                localctx.fk = self.column_name_list()
                self.state = 1055
                self.match(tsqlParser.RR_BRACKET)
                self.state = 1056
                self.match(tsqlParser.REFERENCES)
                self.state = 1057
                self.table_name()
                self.state = 1058
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1059
                localctx.pk = self.column_name_list()
                self.state = 1060
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.CHECK]:
                self.state = 1062
                self.match(tsqlParser.CHECK)
                self.state = 1063
                self.match(tsqlParser.CONSTRAINT)
                self.state = 1064
                localctx.constraint = self.r_id()
                pass
            elif token in [tsqlParser.ALTER]:
                self.state = 1065
                self.match(tsqlParser.ALTER)
                self.state = 1066
                self.match(tsqlParser.COLUMN)
                self.state = 1067
                self.column_def_table_constraints()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1071
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 1070
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_databaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext
            self.new_name = None # R_idContext
            self.collation = None # R_idContext

        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def MODIFY(self):
            return self.getToken(tsqlParser.MODIFY, 0)

        def NAME(self):
            return self.getToken(tsqlParser.NAME, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def database_optionspec(self):
            return self.getTypedRuleContext(tsqlParser.Database_optionspecContext,0)


        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def termination(self):
            return self.getTypedRuleContext(tsqlParser.TerminationContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_alter_database




    def alter_database(self):

        localctx = tsqlParser.Alter_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_alter_database)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073
            self.match(tsqlParser.ALTER)
            self.state = 1074
            self.match(tsqlParser.DATABASE)
            self.state = 1077
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.state = 1075
                localctx.database = self.r_id()
                pass
            elif token in [tsqlParser.CURRENT]:
                self.state = 1076
                self.match(tsqlParser.CURRENT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1091
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.MODIFY]:
                self.state = 1079
                self.match(tsqlParser.MODIFY)
                self.state = 1080
                self.match(tsqlParser.NAME)
                self.state = 1081
                self.match(tsqlParser.EQUAL)
                self.state = 1082
                localctx.new_name = self.r_id()
                pass
            elif token in [tsqlParser.COLLATE]:
                self.state = 1083
                self.match(tsqlParser.COLLATE)
                self.state = 1084
                localctx.collation = self.r_id()
                pass
            elif token in [tsqlParser.SET]:
                self.state = 1085
                self.match(tsqlParser.SET)
                self.state = 1086
                self.database_optionspec()
                self.state = 1089
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                if la_ == 1:
                    self.state = 1087
                    self.match(tsqlParser.WITH)
                    self.state = 1088
                    self.termination()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1094
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.state = 1093
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_optionspecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def auto_option(self):
            return self.getTypedRuleContext(tsqlParser.Auto_optionContext,0)


        def change_tracking_option(self):
            return self.getTypedRuleContext(tsqlParser.Change_tracking_optionContext,0)


        def containment_option(self):
            return self.getTypedRuleContext(tsqlParser.Containment_optionContext,0)


        def cursor_option(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_optionContext,0)


        def date_correlation_optimization_option(self):
            return self.getTypedRuleContext(tsqlParser.Date_correlation_optimization_optionContext,0)


        def db_encryption_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_encryption_optionContext,0)


        def db_state_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_state_optionContext,0)


        def db_update_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_update_optionContext,0)


        def db_user_access_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_user_access_optionContext,0)


        def delayed_durability_option(self):
            return self.getTypedRuleContext(tsqlParser.Delayed_durability_optionContext,0)


        def external_access_option(self):
            return self.getTypedRuleContext(tsqlParser.External_access_optionContext,0)


        def FILESTREAM(self):
            return self.getToken(tsqlParser.FILESTREAM, 0)

        def database_filestream_option(self):
            return self.getTypedRuleContext(tsqlParser.Database_filestream_optionContext,0)


        def hadr_options(self):
            return self.getTypedRuleContext(tsqlParser.Hadr_optionsContext,0)


        def mixed_page_allocation_option(self):
            return self.getTypedRuleContext(tsqlParser.Mixed_page_allocation_optionContext,0)


        def parameterization_option(self):
            return self.getTypedRuleContext(tsqlParser.Parameterization_optionContext,0)


        def recovery_option(self):
            return self.getTypedRuleContext(tsqlParser.Recovery_optionContext,0)


        def service_broker_option(self):
            return self.getTypedRuleContext(tsqlParser.Service_broker_optionContext,0)


        def snapshot_option(self):
            return self.getTypedRuleContext(tsqlParser.Snapshot_optionContext,0)


        def sql_option(self):
            return self.getTypedRuleContext(tsqlParser.Sql_optionContext,0)


        def target_recovery_time_option(self):
            return self.getTypedRuleContext(tsqlParser.Target_recovery_time_optionContext,0)


        def termination(self):
            return self.getTypedRuleContext(tsqlParser.TerminationContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_database_optionspec




    def database_optionspec(self):

        localctx = tsqlParser.Database_optionspecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_database_optionspec)
        try:
            self.state = 1118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1096
                self.auto_option()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1097
                self.change_tracking_option()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1098
                self.containment_option()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1099
                self.cursor_option()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1100
                self.date_correlation_optimization_option()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1101
                self.db_encryption_option()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1102
                self.db_state_option()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1103
                self.db_update_option()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1104
                self.db_user_access_option()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1105
                self.delayed_durability_option()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1106
                self.external_access_option()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1107
                self.match(tsqlParser.FILESTREAM)
                self.state = 1108
                self.database_filestream_option()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1109
                self.hadr_options()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1110
                self.mixed_page_allocation_option()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1111
                self.parameterization_option()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1112
                self.recovery_option()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1113
                self.service_broker_option()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1114
                self.snapshot_option()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1115
                self.sql_option()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1116
                self.target_recovery_time_option()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1117
                self.termination()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Auto_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO_CLOSE(self):
            return self.getToken(tsqlParser.AUTO_CLOSE, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def AUTO_CREATE_STATISTICS(self):
            return self.getToken(tsqlParser.AUTO_CREATE_STATISTICS, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ON)
            else:
                return self.getToken(tsqlParser.ON, i)

        def INCREMENTAL(self):
            return self.getToken(tsqlParser.INCREMENTAL, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def AUTO_SHRINK(self):
            return self.getToken(tsqlParser.AUTO_SHRINK, 0)

        def AUTO_UPDATE_STATISTICS(self):
            return self.getToken(tsqlParser.AUTO_UPDATE_STATISTICS, 0)

        def AUTO_UPDATE_STATISTICS_ASYNC(self):
            return self.getToken(tsqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_auto_option




    def auto_option(self):

        localctx = tsqlParser.Auto_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_auto_option)
        self._la = 0 # Token type
        try:
            self.state = 1137
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.AUTO_CLOSE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1120
                self.match(tsqlParser.AUTO_CLOSE)
                self.state = 1121
                self.on_off()
                pass
            elif token in [tsqlParser.AUTO_CREATE_STATISTICS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1122
                self.match(tsqlParser.AUTO_CREATE_STATISTICS)
                self.state = 1123
                self.match(tsqlParser.OFF)
                pass
            elif token in [tsqlParser.ON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1124
                self.match(tsqlParser.ON)
                self.state = 1129
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.INCREMENTAL]:
                    self.state = 1125
                    self.match(tsqlParser.INCREMENTAL)
                    self.state = 1126
                    self.match(tsqlParser.EQUAL)
                    self.state = 1127
                    self.match(tsqlParser.ON)
                    pass
                elif token in [tsqlParser.OFF]:
                    self.state = 1128
                    self.match(tsqlParser.OFF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.AUTO_SHRINK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1131
                self.match(tsqlParser.AUTO_SHRINK)
                self.state = 1132
                self.on_off()
                pass
            elif token in [tsqlParser.AUTO_UPDATE_STATISTICS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1133
                self.match(tsqlParser.AUTO_UPDATE_STATISTICS)
                self.state = 1134
                self.on_off()
                pass
            elif token in [tsqlParser.AUTO_UPDATE_STATISTICS_ASYNC]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1135
                self.match(tsqlParser.AUTO_UPDATE_STATISTICS_ASYNC)
                self.state = 1136
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Change_tracking_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE_TRACKING(self):
            return self.getToken(tsqlParser.CHANGE_TRACKING, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def change_tracking_option_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Change_tracking_option_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Change_tracking_option_listContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_change_tracking_option




    def change_tracking_option(self):

        localctx = tsqlParser.Change_tracking_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_change_tracking_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1139
            self.match(tsqlParser.CHANGE_TRACKING)
            self.state = 1140
            self.match(tsqlParser.EQUAL)
            self.state = 1156
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.OFF]:
                self.state = 1141
                self.match(tsqlParser.OFF)
                pass
            elif token in [tsqlParser.ON]:
                self.state = 1142
                self.match(tsqlParser.ON)
                self.state = 1153
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.AUTO_CLEANUP or _la==tsqlParser.CHANGE_RETENTION:
                    self.state = 1143
                    self.change_tracking_option_list()
                    self.state = 1148
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==tsqlParser.COMMA:
                        self.state = 1144
                        self.match(tsqlParser.COMMA)
                        self.state = 1145
                        self.change_tracking_option_list()
                        self.state = 1150
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1155
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Change_tracking_option_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO_CLEANUP(self):
            return self.getToken(tsqlParser.AUTO_CLEANUP, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def CHANGE_RETENTION(self):
            return self.getToken(tsqlParser.CHANGE_RETENTION, 0)

        def DAYS(self):
            return self.getToken(tsqlParser.DAYS, 0)

        def HOURS(self):
            return self.getToken(tsqlParser.HOURS, 0)

        def MINUTES(self):
            return self.getToken(tsqlParser.MINUTES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_change_tracking_option_list




    def change_tracking_option_list(self):

        localctx = tsqlParser.Change_tracking_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_change_tracking_option_list)
        self._la = 0 # Token type
        try:
            self.state = 1164
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.AUTO_CLEANUP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1158
                self.match(tsqlParser.AUTO_CLEANUP)
                self.state = 1159
                self.match(tsqlParser.EQUAL)
                self.state = 1160
                self.on_off()
                pass
            elif token in [tsqlParser.CHANGE_RETENTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1161
                self.match(tsqlParser.CHANGE_RETENTION)
                self.state = 1162
                self.match(tsqlParser.EQUAL)
                self.state = 1163
                _la = self._input.LA(1)
                if not(_la==tsqlParser.DAYS or _la==tsqlParser.HOURS or _la==tsqlParser.MINUTES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Containment_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINMENT(self):
            return self.getToken(tsqlParser.CONTAINMENT, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def NONE(self):
            return self.getToken(tsqlParser.NONE, 0)

        def PARTIAL(self):
            return self.getToken(tsqlParser.PARTIAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_containment_option




    def containment_option(self):

        localctx = tsqlParser.Containment_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_containment_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1166
            self.match(tsqlParser.CONTAINMENT)
            self.state = 1167
            self.match(tsqlParser.EQUAL)
            self.state = 1168
            _la = self._input.LA(1)
            if not(_la==tsqlParser.NONE or _la==tsqlParser.PARTIAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURSOR_CLOSE_ON_COMMIT(self):
            return self.getToken(tsqlParser.CURSOR_CLOSE_ON_COMMIT, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def CURSOR_DEFAULT(self):
            return self.getToken(tsqlParser.CURSOR_DEFAULT, 0)

        def LOCAL(self):
            return self.getToken(tsqlParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_cursor_option




    def cursor_option(self):

        localctx = tsqlParser.Cursor_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_cursor_option)
        self._la = 0 # Token type
        try:
            self.state = 1174
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CURSOR_CLOSE_ON_COMMIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1170
                self.match(tsqlParser.CURSOR_CLOSE_ON_COMMIT)
                self.state = 1171
                self.on_off()
                pass
            elif token in [tsqlParser.CURSOR_DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1172
                self.match(tsqlParser.CURSOR_DEFAULT)
                self.state = 1173
                _la = self._input.LA(1)
                if not(_la==tsqlParser.GLOBAL or _la==tsqlParser.LOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_correlation_optimization_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_CORRELATION_OPTIMIZATION(self):
            return self.getToken(tsqlParser.DATE_CORRELATION_OPTIMIZATION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_date_correlation_optimization_option




    def date_correlation_optimization_option(self):

        localctx = tsqlParser.Date_correlation_optimization_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_date_correlation_optimization_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1176
            self.match(tsqlParser.DATE_CORRELATION_OPTIMIZATION)
            self.state = 1177
            self.on_off()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Db_encryption_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_db_encryption_option




    def db_encryption_option(self):

        localctx = tsqlParser.Db_encryption_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_db_encryption_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1179
            self.match(tsqlParser.ENCRYPTION)
            self.state = 1180
            self.on_off()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Db_state_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONLINE(self):
            return self.getToken(tsqlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(tsqlParser.OFFLINE, 0)

        def EMERGENCY(self):
            return self.getToken(tsqlParser.EMERGENCY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_db_state_option




    def db_state_option(self):

        localctx = tsqlParser.Db_state_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_db_state_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            _la = self._input.LA(1)
            if not(_la==tsqlParser.EMERGENCY or _la==tsqlParser.OFFLINE or _la==tsqlParser.ONLINE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Db_update_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def READ_WRITE(self):
            return self.getToken(tsqlParser.READ_WRITE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_db_update_option




    def db_update_option(self):

        localctx = tsqlParser.Db_update_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_db_update_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            _la = self._input.LA(1)
            if not(_la==tsqlParser.READ_ONLY or _la==tsqlParser.READ_WRITE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Db_user_access_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SINGLE_USER(self):
            return self.getToken(tsqlParser.SINGLE_USER, 0)

        def RESTRICTED_USER(self):
            return self.getToken(tsqlParser.RESTRICTED_USER, 0)

        def MULTI_USER(self):
            return self.getToken(tsqlParser.MULTI_USER, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_db_user_access_option




    def db_user_access_option(self):

        localctx = tsqlParser.Db_user_access_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_db_user_access_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1186
            _la = self._input.LA(1)
            if not(_la==tsqlParser.MULTI_USER or _la==tsqlParser.RESTRICTED_USER or _la==tsqlParser.SINGLE_USER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delayed_durability_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELAYED_DURABILITY(self):
            return self.getToken(tsqlParser.DELAYED_DURABILITY, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DISABLED(self):
            return self.getToken(tsqlParser.DISABLED, 0)

        def ALLOWED(self):
            return self.getToken(tsqlParser.ALLOWED, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_delayed_durability_option




    def delayed_durability_option(self):

        localctx = tsqlParser.Delayed_durability_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_delayed_durability_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1188
            self.match(tsqlParser.DELAYED_DURABILITY)
            self.state = 1189
            self.match(tsqlParser.EQUAL)
            self.state = 1190
            _la = self._input.LA(1)
            if not(_la==tsqlParser.ALLOWED or _la==tsqlParser.DISABLED or _la==tsqlParser.FORCED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_access_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DB_CHAINING(self):
            return self.getToken(tsqlParser.DB_CHAINING, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def TRUSTWORTHY(self):
            return self.getToken(tsqlParser.TRUSTWORTHY, 0)

        def DEFAULT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_LANGUAGE, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def DEFAULT_FULLTEXT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0)

        def NESTED_TRIGGERS(self):
            return self.getToken(tsqlParser.NESTED_TRIGGERS, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def TRANSFORM_NOISE_WORDS(self):
            return self.getToken(tsqlParser.TRANSFORM_NOISE_WORDS, 0)

        def TWO_DIGIT_YEAR_CUTOFF(self):
            return self.getToken(tsqlParser.TWO_DIGIT_YEAR_CUTOFF, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_external_access_option




    def external_access_option(self):

        localctx = tsqlParser.External_access_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_external_access_option)
        self._la = 0 # Token type
        try:
            self.state = 1217
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.DB_CHAINING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1192
                self.match(tsqlParser.DB_CHAINING)
                self.state = 1193
                self.on_off()
                pass
            elif token in [tsqlParser.TRUSTWORTHY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1194
                self.match(tsqlParser.TRUSTWORTHY)
                self.state = 1195
                self.on_off()
                pass
            elif token in [tsqlParser.DEFAULT_LANGUAGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1196
                self.match(tsqlParser.DEFAULT_LANGUAGE)
                self.state = 1197
                self.match(tsqlParser.EQUAL)
                self.state = 1200
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 1198
                    self.r_id()
                    pass
                elif token in [tsqlParser.STRING]:
                    self.state = 1199
                    self.match(tsqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.DEFAULT_FULLTEXT_LANGUAGE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1202
                self.match(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE)
                self.state = 1203
                self.match(tsqlParser.EQUAL)
                self.state = 1206
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 1204
                    self.r_id()
                    pass
                elif token in [tsqlParser.STRING]:
                    self.state = 1205
                    self.match(tsqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.NESTED_TRIGGERS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1208
                self.match(tsqlParser.NESTED_TRIGGERS)
                self.state = 1209
                self.match(tsqlParser.EQUAL)
                self.state = 1210
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TRANSFORM_NOISE_WORDS]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1211
                self.match(tsqlParser.TRANSFORM_NOISE_WORDS)
                self.state = 1212
                self.match(tsqlParser.EQUAL)
                self.state = 1213
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TWO_DIGIT_YEAR_CUTOFF]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1214
                self.match(tsqlParser.TWO_DIGIT_YEAR_CUTOFF)
                self.state = 1215
                self.match(tsqlParser.EQUAL)
                self.state = 1216
                self.match(tsqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hadr_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def HADR(self):
            return self.getToken(tsqlParser.HADR, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_hadr_options




    def hadr_options(self):

        localctx = tsqlParser.Hadr_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_hadr_options)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            self.match(tsqlParser.ALTER)
            self.state = 1220
            self.match(tsqlParser.DATABASE)
            self.state = 1221
            self.match(tsqlParser.SET)
            self.state = 1222
            self.match(tsqlParser.HADR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mixed_page_allocation_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MIXED_PAGE_ALLOCATION(self):
            return self.getToken(tsqlParser.MIXED_PAGE_ALLOCATION, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_mixed_page_allocation_option




    def mixed_page_allocation_option(self):

        localctx = tsqlParser.Mixed_page_allocation_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_mixed_page_allocation_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1224
            self.match(tsqlParser.MIXED_PAGE_ALLOCATION)
            self.state = 1225
            _la = self._input.LA(1)
            if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameterization_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMETERIZATION(self):
            return self.getToken(tsqlParser.PARAMETERIZATION, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_parameterization_option




    def parameterization_option(self):

        localctx = tsqlParser.Parameterization_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_parameterization_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1227
            self.match(tsqlParser.PARAMETERIZATION)
            self.state = 1228
            _la = self._input.LA(1)
            if not(_la==tsqlParser.FORCED or _la==tsqlParser.SIMPLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recovery_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECOVERY(self):
            return self.getToken(tsqlParser.RECOVERY, 0)

        def FULL(self):
            return self.getToken(tsqlParser.FULL, 0)

        def BULK_LOGGED(self):
            return self.getToken(tsqlParser.BULK_LOGGED, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def TORN_PAGE_DETECTION(self):
            return self.getToken(tsqlParser.TORN_PAGE_DETECTION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def PAGE_VERIFY(self):
            return self.getToken(tsqlParser.PAGE_VERIFY, 0)

        def CHECKSUM(self):
            return self.getToken(tsqlParser.CHECKSUM, 0)

        def NONE(self):
            return self.getToken(tsqlParser.NONE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_recovery_option




    def recovery_option(self):

        localctx = tsqlParser.Recovery_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_recovery_option)
        self._la = 0 # Token type
        try:
            self.state = 1236
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.RECOVERY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1230
                self.match(tsqlParser.RECOVERY)
                self.state = 1231
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FULL or _la==tsqlParser.BULK_LOGGED or _la==tsqlParser.SIMPLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TORN_PAGE_DETECTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1232
                self.match(tsqlParser.TORN_PAGE_DETECTION)
                self.state = 1233
                self.on_off()
                pass
            elif token in [tsqlParser.PAGE_VERIFY]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1234
                self.match(tsqlParser.PAGE_VERIFY)
                self.state = 1235
                _la = self._input.LA(1)
                if not(_la==tsqlParser.NONE or _la==tsqlParser.CHECKSUM or _la==tsqlParser.TORN_PAGE_DETECTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Service_broker_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE_BROKER(self):
            return self.getToken(tsqlParser.ENABLE_BROKER, 0)

        def DISABLE_BROKER(self):
            return self.getToken(tsqlParser.DISABLE_BROKER, 0)

        def NEW_BROKER(self):
            return self.getToken(tsqlParser.NEW_BROKER, 0)

        def ERROR_BROKER_CONVERSATIONS(self):
            return self.getToken(tsqlParser.ERROR_BROKER_CONVERSATIONS, 0)

        def HONOR_BROKER_PRIORITY(self):
            return self.getToken(tsqlParser.HONOR_BROKER_PRIORITY, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_service_broker_option




    def service_broker_option(self):

        localctx = tsqlParser.Service_broker_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_service_broker_option)
        try:
            self.state = 1244
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.ENABLE_BROKER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1238
                self.match(tsqlParser.ENABLE_BROKER)
                pass
            elif token in [tsqlParser.DISABLE_BROKER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1239
                self.match(tsqlParser.DISABLE_BROKER)
                pass
            elif token in [tsqlParser.NEW_BROKER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1240
                self.match(tsqlParser.NEW_BROKER)
                pass
            elif token in [tsqlParser.ERROR_BROKER_CONVERSATIONS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1241
                self.match(tsqlParser.ERROR_BROKER_CONVERSATIONS)
                pass
            elif token in [tsqlParser.HONOR_BROKER_PRIORITY]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1242
                self.match(tsqlParser.HONOR_BROKER_PRIORITY)
                self.state = 1243
                self.on_off()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Snapshot_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = None # Token

        def ALLOW_SNAPSHOT_ISOLATION(self):
            return self.getToken(tsqlParser.ALLOW_SNAPSHOT_ISOLATION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def READ_COMMITTED_SNAPSHOT(self):
            return self.getToken(tsqlParser.READ_COMMITTED_SNAPSHOT, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_snapshot_option




    def snapshot_option(self):

        localctx = tsqlParser.Snapshot_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_snapshot_option)
        self._la = 0 # Token type
        try:
            self.state = 1251
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.ALLOW_SNAPSHOT_ISOLATION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1246
                self.match(tsqlParser.ALLOW_SNAPSHOT_ISOLATION)
                self.state = 1247
                self.on_off()
                pass
            elif token in [tsqlParser.READ_COMMITTED_SNAPSHOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1248
                self.match(tsqlParser.READ_COMMITTED_SNAPSHOT)
                self.state = 1249
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.OFF, tsqlParser.ON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1250
                localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANSI_NULL_DEFAULT(self):
            return self.getToken(tsqlParser.ANSI_NULL_DEFAULT, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def ANSI_NULLS(self):
            return self.getToken(tsqlParser.ANSI_NULLS, 0)

        def ANSI_PADDING(self):
            return self.getToken(tsqlParser.ANSI_PADDING, 0)

        def ANSI_WARNINGS(self):
            return self.getToken(tsqlParser.ANSI_WARNINGS, 0)

        def ARITHABORT(self):
            return self.getToken(tsqlParser.ARITHABORT, 0)

        def COMPATIBILITY_LEVEL(self):
            return self.getToken(tsqlParser.COMPATIBILITY_LEVEL, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def CONCAT_NULL_YIELDS_NULL(self):
            return self.getToken(tsqlParser.CONCAT_NULL_YIELDS_NULL, 0)

        def NUMERIC_ROUNDABORT(self):
            return self.getToken(tsqlParser.NUMERIC_ROUNDABORT, 0)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(tsqlParser.QUOTED_IDENTIFIER, 0)

        def RECURSIVE_TRIGGERS(self):
            return self.getToken(tsqlParser.RECURSIVE_TRIGGERS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_sql_option




    def sql_option(self):

        localctx = tsqlParser.Sql_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_sql_option)
        try:
            self.state = 1274
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.ANSI_NULL_DEFAULT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1253
                self.match(tsqlParser.ANSI_NULL_DEFAULT)
                self.state = 1254
                self.on_off()
                pass
            elif token in [tsqlParser.ANSI_NULLS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1255
                self.match(tsqlParser.ANSI_NULLS)
                self.state = 1256
                self.on_off()
                pass
            elif token in [tsqlParser.ANSI_PADDING]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1257
                self.match(tsqlParser.ANSI_PADDING)
                self.state = 1258
                self.on_off()
                pass
            elif token in [tsqlParser.ANSI_WARNINGS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1259
                self.match(tsqlParser.ANSI_WARNINGS)
                self.state = 1260
                self.on_off()
                pass
            elif token in [tsqlParser.ARITHABORT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1261
                self.match(tsqlParser.ARITHABORT)
                self.state = 1262
                self.on_off()
                pass
            elif token in [tsqlParser.COMPATIBILITY_LEVEL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1263
                self.match(tsqlParser.COMPATIBILITY_LEVEL)
                self.state = 1264
                self.match(tsqlParser.EQUAL)
                self.state = 1265
                self.match(tsqlParser.DECIMAL)
                pass
            elif token in [tsqlParser.CONCAT_NULL_YIELDS_NULL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1266
                self.match(tsqlParser.CONCAT_NULL_YIELDS_NULL)
                self.state = 1267
                self.on_off()
                pass
            elif token in [tsqlParser.NUMERIC_ROUNDABORT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1268
                self.match(tsqlParser.NUMERIC_ROUNDABORT)
                self.state = 1269
                self.on_off()
                pass
            elif token in [tsqlParser.QUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1270
                self.match(tsqlParser.QUOTED_IDENTIFIER)
                self.state = 1271
                self.on_off()
                pass
            elif token in [tsqlParser.RECURSIVE_TRIGGERS]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1272
                self.match(tsqlParser.RECURSIVE_TRIGGERS)
                self.state = 1273
                self.on_off()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_recovery_time_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TARGET_RECOVERY_TIME(self):
            return self.getToken(tsqlParser.TARGET_RECOVERY_TIME, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def SECONDS(self):
            return self.getToken(tsqlParser.SECONDS, 0)

        def MINUTES(self):
            return self.getToken(tsqlParser.MINUTES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_target_recovery_time_option




    def target_recovery_time_option(self):

        localctx = tsqlParser.Target_recovery_time_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_target_recovery_time_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1276
            self.match(tsqlParser.TARGET_RECOVERY_TIME)
            self.state = 1277
            self.match(tsqlParser.EQUAL)
            self.state = 1278
            self.match(tsqlParser.DECIMAL)
            self.state = 1279
            _la = self._input.LA(1)
            if not(_la==tsqlParser.MINUTES or _la==tsqlParser.SECONDS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TerminationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.seconds = None # Token

        def ROLLBACK(self):
            return self.getToken(tsqlParser.ROLLBACK, 0)

        def AFTER(self):
            return self.getToken(tsqlParser.AFTER, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def IMMEDIATE(self):
            return self.getToken(tsqlParser.IMMEDIATE, 0)

        def NO_WAIT(self):
            return self.getToken(tsqlParser.NO_WAIT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_termination




    def termination(self):

        localctx = tsqlParser.TerminationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_termination)
        try:
            self.state = 1287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1281
                self.match(tsqlParser.ROLLBACK)
                self.state = 1282
                self.match(tsqlParser.AFTER)
                self.state = 1283
                localctx.seconds = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1284
                self.match(tsqlParser.ROLLBACK)
                self.state = 1285
                self.match(tsqlParser.IMMEDIATE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1286
                self.match(tsqlParser.NO_WAIT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # R_idContext

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def INDEX(self):
            return self.getToken(tsqlParser.INDEX, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_index




    def drop_index(self):

        localctx = tsqlParser.Drop_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_drop_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            self.match(tsqlParser.DROP)
            self.state = 1290
            self.match(tsqlParser.INDEX)
            self.state = 1293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1291
                self.match(tsqlParser.IF)
                self.state = 1292
                self.match(tsqlParser.EXISTS)


            self.state = 1295
            localctx.name = self.r_id()
            self.state = 1298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ON:
                self.state = 1296
                self.match(tsqlParser.ON)
                self.state = 1297
                self.table_name()


            self.state = 1301
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.state = 1300
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_procedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def PROCEDURE(self):
            return self.getToken(tsqlParser.PROCEDURE, 0)

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_procedure




    def drop_procedure(self):

        localctx = tsqlParser.Drop_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_drop_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1303
            self.match(tsqlParser.DROP)
            self.state = 1304
            self.match(tsqlParser.PROCEDURE)
            self.state = 1307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1305
                self.match(tsqlParser.IF)
                self.state = 1306
                self.match(tsqlParser.EXISTS)


            self.state = 1309
            self.func_proc_name()
            self.state = 1311
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 1310
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_statisticsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # R_idContext

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def STATISTICS(self):
            return self.getToken(tsqlParser.STATISTICS, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(tsqlParser.DOT, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_statistics




    def drop_statistics(self):

        localctx = tsqlParser.Drop_statisticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_drop_statistics)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1313
            self.match(tsqlParser.DROP)
            self.state = 1314
            self.match(tsqlParser.STATISTICS)
            self.state = 1318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.state = 1315
                self.table_name()
                self.state = 1316
                self.match(tsqlParser.DOT)


            self.state = 1320
            localctx.name = self.r_id()
            self.state = 1322
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 1321
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_table




    def drop_table(self):

        localctx = tsqlParser.Drop_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_drop_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1324
            self.match(tsqlParser.DROP)
            self.state = 1325
            self.match(tsqlParser.TABLE)
            self.state = 1328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1326
                self.match(tsqlParser.IF)
                self.state = 1327
                self.match(tsqlParser.EXISTS)


            self.state = 1330
            self.table_name()
            self.state = 1332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 1331
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_databaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_database




    def drop_database(self):

        localctx = tsqlParser.Drop_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_drop_database)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1334
            self.match(tsqlParser.DROP)
            self.state = 1335
            self.match(tsqlParser.DATABASE)
            self.state = 1338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1336
                self.match(tsqlParser.IF)
                self.state = 1337
                self.match(tsqlParser.EXISTS)


            self.state = 1342
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.state = 1340
                localctx.database = self.r_id()
                pass
            elif token in [tsqlParser.CURRENT]:
                self.state = 1341
                self.match(tsqlParser.CURRENT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1345
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 1344
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_synonymContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def SYNONYM(self):
            return self.getToken(tsqlParser.SYNONYM, 0)

        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_synonym




    def drop_synonym(self):

        localctx = tsqlParser.Drop_synonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_drop_synonym)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1347
            self.match(tsqlParser.DROP)
            self.state = 1348
            self.match(tsqlParser.SYNONYM)
            self.state = 1351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1349
                self.match(tsqlParser.IF)
                self.state = 1350
                self.match(tsqlParser.EXISTS)


            self.state = 1353
            self.simple_name()
            self.state = 1355
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.state = 1354
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_viewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def VIEW(self):
            return self.getToken(tsqlParser.VIEW, 0)

        def simple_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Simple_nameContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Simple_nameContext,i)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_view




    def drop_view(self):

        localctx = tsqlParser.Drop_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_drop_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1357
            self.match(tsqlParser.DROP)
            self.state = 1358
            self.match(tsqlParser.VIEW)
            self.state = 1361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1359
                self.match(tsqlParser.IF)
                self.state = 1360
                self.match(tsqlParser.EXISTS)


            self.state = 1363
            self.simple_name()
            self.state = 1368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 1364
                self.match(tsqlParser.COMMA)
                self.state = 1365
                self.simple_name()
                self.state = 1370
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.state = 1371
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def SCHEMA(self):
            return self.getToken(tsqlParser.SCHEMA, 0)

        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_schema




    def drop_schema(self):

        localctx = tsqlParser.Drop_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_drop_schema)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1374
            self.match(tsqlParser.DROP)
            self.state = 1375
            self.match(tsqlParser.SCHEMA)
            self.state = 1378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1376
                self.match(tsqlParser.IF)
                self.state = 1377
                self.match(tsqlParser.EXISTS)


            self.state = 1380
            self.simple_name()
            self.state = 1382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 1381
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(tsqlParser.FUNCTION, 0)

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_function




    def drop_function(self):

        localctx = tsqlParser.Drop_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_drop_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1384
            self.match(tsqlParser.DROP)
            self.state = 1385
            self.match(tsqlParser.FUNCTION)
            self.state = 1388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1386
                self.match(tsqlParser.IF)
                self.state = 1387
                self.match(tsqlParser.EXISTS)


            self.state = 1390
            self.func_proc_name()
            self.state = 1392
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 1391
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Simple_nameContext

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def default_value(self):
            return self.getTypedRuleContext(tsqlParser.Default_valueContext,0)


        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_create_type




    def create_type(self):

        localctx = tsqlParser.Create_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_create_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1394
            self.match(tsqlParser.CREATE)
            self.state = 1395
            self.match(tsqlParser.TYPE)
            self.state = 1396
            localctx.name = self.simple_name()
            self.state = 1397
            self.match(tsqlParser.FROM)
            self.state = 1398
            self.data_type()
            self.state = 1399
            self.default_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Simple_nameContext

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_type




    def drop_type(self):

        localctx = tsqlParser.Drop_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_drop_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401
            self.match(tsqlParser.DROP)
            self.state = 1402
            self.match(tsqlParser.TYPE)
            self.state = 1405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1403
                self.match(tsqlParser.IF)
                self.state = 1404
                self.match(tsqlParser.EXISTS)


            self.state = 1407
            localctx.name = self.simple_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rowset_function_limitedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openquery(self):
            return self.getTypedRuleContext(tsqlParser.OpenqueryContext,0)


        def opendatasource(self):
            return self.getTypedRuleContext(tsqlParser.OpendatasourceContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_rowset_function_limited




    def rowset_function_limited(self):

        localctx = tsqlParser.Rowset_function_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_rowset_function_limited)
        try:
            self.state = 1411
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.OPENQUERY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1409
                self.openquery()
                pass
            elif token in [tsqlParser.OPENDATASOURCE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1410
                self.opendatasource()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.linked_server = None # R_idContext
            self.query = None # Token

        def OPENQUERY(self):
            return self.getToken(tsqlParser.OPENQUERY, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(tsqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_openquery




    def openquery(self):

        localctx = tsqlParser.OpenqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_openquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1413
            self.match(tsqlParser.OPENQUERY)
            self.state = 1414
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1415
            localctx.linked_server = self.r_id()
            self.state = 1416
            self.match(tsqlParser.COMMA)
            self.state = 1417
            localctx.query = self.match(tsqlParser.STRING)
            self.state = 1418
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpendatasourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider = None # Token
            self.init = None # Token
            self.database = None # R_idContext
            self.scheme = None # R_idContext
            self.table = None # R_idContext

        def OPENDATASOURCE(self):
            return self.getToken(tsqlParser.OPENDATASOURCE, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(tsqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DOT)
            else:
                return self.getToken(tsqlParser.DOT, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.STRING)
            else:
                return self.getToken(tsqlParser.STRING, i)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_opendatasource




    def opendatasource(self):

        localctx = tsqlParser.OpendatasourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_opendatasource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1420
            self.match(tsqlParser.OPENDATASOURCE)
            self.state = 1421
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1422
            localctx.provider = self.match(tsqlParser.STRING)
            self.state = 1423
            self.match(tsqlParser.COMMA)
            self.state = 1424
            localctx.init = self.match(tsqlParser.STRING)
            self.state = 1425
            self.match(tsqlParser.RR_BRACKET)
            self.state = 1426
            self.match(tsqlParser.DOT)
            self.state = 1428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (tsqlParser.FILLFACTOR - 71)) | (1 << (tsqlParser.FORCESEEK - 71)) | (1 << (tsqlParser.NEXT - 71)) | (1 << (tsqlParser.NUMERIC - 71)))) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (tsqlParser.VALUE - 196)) | (1 << (tsqlParser.ABSOLUTE - 196)) | (1 << (tsqlParser.APPLY - 196)) | (1 << (tsqlParser.AUTO - 196)) | (1 << (tsqlParser.AVG - 196)) | (1 << (tsqlParser.BASE64 - 196)) | (1 << (tsqlParser.CALLER - 196)) | (1 << (tsqlParser.CAST - 196)) | (1 << (tsqlParser.CATCH - 196)) | (1 << (tsqlParser.CHECKSUM_AGG - 196)) | (1 << (tsqlParser.COMMITTED - 196)) | (1 << (tsqlParser.CONCAT - 196)) | (1 << (tsqlParser.CONTROL - 196)) | (1 << (tsqlParser.COOKIE - 196)) | (1 << (tsqlParser.COUNT - 196)) | (1 << (tsqlParser.COUNT_BIG - 196)) | (1 << (tsqlParser.DATE - 196)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (tsqlParser.DELAY - 261)) | (1 << (tsqlParser.DELETED - 261)) | (1 << (tsqlParser.DENSE_RANK - 261)) | (1 << (tsqlParser.DISABLE - 261)) | (1 << (tsqlParser.DYNAMIC - 261)) | (1 << (tsqlParser.ENCRYPTION - 261)) | (1 << (tsqlParser.EXIST - 261)) | (1 << (tsqlParser.EXPAND - 261)) | (1 << (tsqlParser.FAST - 261)) | (1 << (tsqlParser.FAST_FORWARD - 261)) | (1 << (tsqlParser.FIRST - 261)) | (1 << (tsqlParser.FIRST_VALUE - 261)) | (1 << (tsqlParser.FOLLOWING - 261)) | (1 << (tsqlParser.FORCE - 261)) | (1 << (tsqlParser.FORCED - 261)) | (1 << (tsqlParser.FORWARD_ONLY - 261)) | (1 << (tsqlParser.FULLSCAN - 261)) | (1 << (tsqlParser.GLOBAL - 261)) | (1 << (tsqlParser.GROUPING - 261)) | (1 << (tsqlParser.GROUPING_ID - 261)) | (1 << (tsqlParser.HASH - 261)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 261)) | (1 << (tsqlParser.IMPERSONATE - 261)) | (1 << (tsqlParser.INSENSITIVE - 261)) | (1 << (tsqlParser.INSERTED - 261)) | (1 << (tsqlParser.ISOLATION - 261)) | (1 << (tsqlParser.IO - 261)) | (1 << (tsqlParser.KEEP - 261)) | (1 << (tsqlParser.KEEPFIXED - 261)) | (1 << (tsqlParser.KEYSET - 261)) | (1 << (tsqlParser.LAG - 261)) | (1 << (tsqlParser.LAST - 261)) | (1 << (tsqlParser.LAST_VALUE - 261)) | (1 << (tsqlParser.LEAD - 261)) | (1 << (tsqlParser.LEVEL - 261)) | (1 << (tsqlParser.LOCAL - 261)) | (1 << (tsqlParser.LOCK_ESCALATION - 261)) | (1 << (tsqlParser.LOGIN - 261)) | (1 << (tsqlParser.LOOP - 261)) | (1 << (tsqlParser.MARK - 261)) | (1 << (tsqlParser.MAX - 261)) | (1 << (tsqlParser.MAXDOP - 261)) | (1 << (tsqlParser.MAXRECURSION - 261)))) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & ((1 << (tsqlParser.MIN - 328)) | (1 << (tsqlParser.MODIFY - 328)) | (1 << (tsqlParser.NAME - 328)) | (1 << (tsqlParser.NOCOUNT - 328)) | (1 << (tsqlParser.NODES - 328)) | (1 << (tsqlParser.NOEXPAND - 328)) | (1 << (tsqlParser.NORECOMPUTE - 328)) | (1 << (tsqlParser.NTILE - 328)) | (1 << (tsqlParser.NUMBER - 328)) | (1 << (tsqlParser.OFFSET - 328)) | (1 << (tsqlParser.ONLINE - 328)) | (1 << (tsqlParser.ONLY - 328)) | (1 << (tsqlParser.OPTIMISTIC - 328)) | (1 << (tsqlParser.OPTIMIZE - 328)) | (1 << (tsqlParser.OUT - 328)) | (1 << (tsqlParser.OUTPUT - 328)) | (1 << (tsqlParser.OWNER - 328)) | (1 << (tsqlParser.PARAMETERIZATION - 328)) | (1 << (tsqlParser.PARTITION - 328)) | (1 << (tsqlParser.PATH - 328)) | (1 << (tsqlParser.PRECEDING - 328)) | (1 << (tsqlParser.PRIOR - 328)) | (1 << (tsqlParser.PRIVILEGES - 328)) | (1 << (tsqlParser.QUERY - 328)) | (1 << (tsqlParser.RANGE - 328)) | (1 << (tsqlParser.RANK - 328)) | (1 << (tsqlParser.READONLY - 328)) | (1 << (tsqlParser.READ_ONLY - 328)) | (1 << (tsqlParser.RECOMPILE - 328)) | (1 << (tsqlParser.RELATIVE - 328)) | (1 << (tsqlParser.REMOTE - 328)) | (1 << (tsqlParser.REPEATABLE - 328)) | (1 << (tsqlParser.ROBUST - 328)) | (1 << (tsqlParser.ROOT - 328)) | (1 << (tsqlParser.ROW - 328)) | (1 << (tsqlParser.ROWGUID - 328)) | (1 << (tsqlParser.ROWS - 328)) | (1 << (tsqlParser.ROW_NUMBER - 328)) | (1 << (tsqlParser.SAMPLE - 328)) | (1 << (tsqlParser.SCHEMABINDING - 328)) | (1 << (tsqlParser.SCROLL - 328)) | (1 << (tsqlParser.SCROLL_LOCKS - 328)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (tsqlParser.SELF - 393)) | (1 << (tsqlParser.SERIALIZABLE - 393)) | (1 << (tsqlParser.SIMPLE - 393)) | (1 << (tsqlParser.SIZE - 393)) | (1 << (tsqlParser.SNAPSHOT - 393)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 393)) | (1 << (tsqlParser.STATIC - 393)) | (1 << (tsqlParser.STATS_STREAM - 393)) | (1 << (tsqlParser.STDEV - 393)) | (1 << (tsqlParser.STDEVP - 393)) | (1 << (tsqlParser.SUM - 393)) | (1 << (tsqlParser.TEXTIMAGE_ON - 393)) | (1 << (tsqlParser.THROW - 393)) | (1 << (tsqlParser.TIES - 393)) | (1 << (tsqlParser.TIME - 393)) | (1 << (tsqlParser.TRY - 393)) | (1 << (tsqlParser.TYPE - 393)) | (1 << (tsqlParser.TYPE_WARNING - 393)) | (1 << (tsqlParser.UNBOUNDED - 393)) | (1 << (tsqlParser.UNCOMMITTED - 393)) | (1 << (tsqlParser.UNKNOWN - 393)) | (1 << (tsqlParser.USING - 393)) | (1 << (tsqlParser.VAR - 393)) | (1 << (tsqlParser.VARP - 393)) | (1 << (tsqlParser.VIEWS - 393)) | (1 << (tsqlParser.VIEW_METADATA - 393)) | (1 << (tsqlParser.WORK - 393)) | (1 << (tsqlParser.XML - 393)) | (1 << (tsqlParser.XMLNAMESPACES - 393)) | (1 << (tsqlParser.ZONE - 393)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 393)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 393)) | (1 << (tsqlParser.ID - 393)))) != 0):
                self.state = 1427
                localctx.database = self.r_id()


            self.state = 1430
            self.match(tsqlParser.DOT)
            self.state = 1432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (tsqlParser.FILLFACTOR - 71)) | (1 << (tsqlParser.FORCESEEK - 71)) | (1 << (tsqlParser.NEXT - 71)) | (1 << (tsqlParser.NUMERIC - 71)))) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (tsqlParser.VALUE - 196)) | (1 << (tsqlParser.ABSOLUTE - 196)) | (1 << (tsqlParser.APPLY - 196)) | (1 << (tsqlParser.AUTO - 196)) | (1 << (tsqlParser.AVG - 196)) | (1 << (tsqlParser.BASE64 - 196)) | (1 << (tsqlParser.CALLER - 196)) | (1 << (tsqlParser.CAST - 196)) | (1 << (tsqlParser.CATCH - 196)) | (1 << (tsqlParser.CHECKSUM_AGG - 196)) | (1 << (tsqlParser.COMMITTED - 196)) | (1 << (tsqlParser.CONCAT - 196)) | (1 << (tsqlParser.CONTROL - 196)) | (1 << (tsqlParser.COOKIE - 196)) | (1 << (tsqlParser.COUNT - 196)) | (1 << (tsqlParser.COUNT_BIG - 196)) | (1 << (tsqlParser.DATE - 196)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (tsqlParser.DELAY - 261)) | (1 << (tsqlParser.DELETED - 261)) | (1 << (tsqlParser.DENSE_RANK - 261)) | (1 << (tsqlParser.DISABLE - 261)) | (1 << (tsqlParser.DYNAMIC - 261)) | (1 << (tsqlParser.ENCRYPTION - 261)) | (1 << (tsqlParser.EXIST - 261)) | (1 << (tsqlParser.EXPAND - 261)) | (1 << (tsqlParser.FAST - 261)) | (1 << (tsqlParser.FAST_FORWARD - 261)) | (1 << (tsqlParser.FIRST - 261)) | (1 << (tsqlParser.FIRST_VALUE - 261)) | (1 << (tsqlParser.FOLLOWING - 261)) | (1 << (tsqlParser.FORCE - 261)) | (1 << (tsqlParser.FORCED - 261)) | (1 << (tsqlParser.FORWARD_ONLY - 261)) | (1 << (tsqlParser.FULLSCAN - 261)) | (1 << (tsqlParser.GLOBAL - 261)) | (1 << (tsqlParser.GROUPING - 261)) | (1 << (tsqlParser.GROUPING_ID - 261)) | (1 << (tsqlParser.HASH - 261)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 261)) | (1 << (tsqlParser.IMPERSONATE - 261)) | (1 << (tsqlParser.INSENSITIVE - 261)) | (1 << (tsqlParser.INSERTED - 261)) | (1 << (tsqlParser.ISOLATION - 261)) | (1 << (tsqlParser.IO - 261)) | (1 << (tsqlParser.KEEP - 261)) | (1 << (tsqlParser.KEEPFIXED - 261)) | (1 << (tsqlParser.KEYSET - 261)) | (1 << (tsqlParser.LAG - 261)) | (1 << (tsqlParser.LAST - 261)) | (1 << (tsqlParser.LAST_VALUE - 261)) | (1 << (tsqlParser.LEAD - 261)) | (1 << (tsqlParser.LEVEL - 261)) | (1 << (tsqlParser.LOCAL - 261)) | (1 << (tsqlParser.LOCK_ESCALATION - 261)) | (1 << (tsqlParser.LOGIN - 261)) | (1 << (tsqlParser.LOOP - 261)) | (1 << (tsqlParser.MARK - 261)) | (1 << (tsqlParser.MAX - 261)) | (1 << (tsqlParser.MAXDOP - 261)) | (1 << (tsqlParser.MAXRECURSION - 261)))) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & ((1 << (tsqlParser.MIN - 328)) | (1 << (tsqlParser.MODIFY - 328)) | (1 << (tsqlParser.NAME - 328)) | (1 << (tsqlParser.NOCOUNT - 328)) | (1 << (tsqlParser.NODES - 328)) | (1 << (tsqlParser.NOEXPAND - 328)) | (1 << (tsqlParser.NORECOMPUTE - 328)) | (1 << (tsqlParser.NTILE - 328)) | (1 << (tsqlParser.NUMBER - 328)) | (1 << (tsqlParser.OFFSET - 328)) | (1 << (tsqlParser.ONLINE - 328)) | (1 << (tsqlParser.ONLY - 328)) | (1 << (tsqlParser.OPTIMISTIC - 328)) | (1 << (tsqlParser.OPTIMIZE - 328)) | (1 << (tsqlParser.OUT - 328)) | (1 << (tsqlParser.OUTPUT - 328)) | (1 << (tsqlParser.OWNER - 328)) | (1 << (tsqlParser.PARAMETERIZATION - 328)) | (1 << (tsqlParser.PARTITION - 328)) | (1 << (tsqlParser.PATH - 328)) | (1 << (tsqlParser.PRECEDING - 328)) | (1 << (tsqlParser.PRIOR - 328)) | (1 << (tsqlParser.PRIVILEGES - 328)) | (1 << (tsqlParser.QUERY - 328)) | (1 << (tsqlParser.RANGE - 328)) | (1 << (tsqlParser.RANK - 328)) | (1 << (tsqlParser.READONLY - 328)) | (1 << (tsqlParser.READ_ONLY - 328)) | (1 << (tsqlParser.RECOMPILE - 328)) | (1 << (tsqlParser.RELATIVE - 328)) | (1 << (tsqlParser.REMOTE - 328)) | (1 << (tsqlParser.REPEATABLE - 328)) | (1 << (tsqlParser.ROBUST - 328)) | (1 << (tsqlParser.ROOT - 328)) | (1 << (tsqlParser.ROW - 328)) | (1 << (tsqlParser.ROWGUID - 328)) | (1 << (tsqlParser.ROWS - 328)) | (1 << (tsqlParser.ROW_NUMBER - 328)) | (1 << (tsqlParser.SAMPLE - 328)) | (1 << (tsqlParser.SCHEMABINDING - 328)) | (1 << (tsqlParser.SCROLL - 328)) | (1 << (tsqlParser.SCROLL_LOCKS - 328)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (tsqlParser.SELF - 393)) | (1 << (tsqlParser.SERIALIZABLE - 393)) | (1 << (tsqlParser.SIMPLE - 393)) | (1 << (tsqlParser.SIZE - 393)) | (1 << (tsqlParser.SNAPSHOT - 393)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 393)) | (1 << (tsqlParser.STATIC - 393)) | (1 << (tsqlParser.STATS_STREAM - 393)) | (1 << (tsqlParser.STDEV - 393)) | (1 << (tsqlParser.STDEVP - 393)) | (1 << (tsqlParser.SUM - 393)) | (1 << (tsqlParser.TEXTIMAGE_ON - 393)) | (1 << (tsqlParser.THROW - 393)) | (1 << (tsqlParser.TIES - 393)) | (1 << (tsqlParser.TIME - 393)) | (1 << (tsqlParser.TRY - 393)) | (1 << (tsqlParser.TYPE - 393)) | (1 << (tsqlParser.TYPE_WARNING - 393)) | (1 << (tsqlParser.UNBOUNDED - 393)) | (1 << (tsqlParser.UNCOMMITTED - 393)) | (1 << (tsqlParser.UNKNOWN - 393)) | (1 << (tsqlParser.USING - 393)) | (1 << (tsqlParser.VAR - 393)) | (1 << (tsqlParser.VARP - 393)) | (1 << (tsqlParser.VIEWS - 393)) | (1 << (tsqlParser.VIEW_METADATA - 393)) | (1 << (tsqlParser.WORK - 393)) | (1 << (tsqlParser.XML - 393)) | (1 << (tsqlParser.XMLNAMESPACES - 393)) | (1 << (tsqlParser.ZONE - 393)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 393)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 393)) | (1 << (tsqlParser.ID - 393)))) != 0):
                self.state = 1431
                localctx.scheme = self.r_id()


            self.state = 1434
            self.match(tsqlParser.DOT)

            self.state = 1435
            localctx.table = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(tsqlParser.DECLARE, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def table_type_definition(self):
            return self.getTypedRuleContext(tsqlParser.Table_type_definitionContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def declare_local(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Declare_localContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Declare_localContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_declare_statement




    def declare_statement(self):

        localctx = tsqlParser.Declare_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_declare_statement)
        self._la = 0 # Token type
        try:
            self.state = 1458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1437
                self.match(tsqlParser.DECLARE)
                self.state = 1438
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.AS:
                    self.state = 1439
                    self.match(tsqlParser.AS)


                self.state = 1442
                self.table_type_definition()
                self.state = 1444
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                if la_ == 1:
                    self.state = 1443
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1446
                self.match(tsqlParser.DECLARE)
                self.state = 1447
                self.declare_local()
                self.state = 1452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 1448
                    self.match(tsqlParser.COMMA)
                    self.state = 1449
                    self.declare_local()
                    self.state = 1454
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1456
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                if la_ == 1:
                    self.state = 1455
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(tsqlParser.CLOSE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def DEALLOCATE(self):
            return self.getToken(tsqlParser.DEALLOCATE, 0)

        def declare_cursor(self):
            return self.getTypedRuleContext(tsqlParser.Declare_cursorContext,0)


        def fetch_cursor(self):
            return self.getTypedRuleContext(tsqlParser.Fetch_cursorContext,0)


        def OPEN(self):
            return self.getToken(tsqlParser.OPEN, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_cursor_statement




    def cursor_statement(self):

        localctx = tsqlParser.Cursor_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_cursor_statement)
        try:
            self.state = 1486
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CLOSE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1460
                self.match(tsqlParser.CLOSE)
                self.state = 1462
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
                if la_ == 1:
                    self.state = 1461
                    self.match(tsqlParser.GLOBAL)


                self.state = 1464
                self.cursor_name()
                self.state = 1466
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                if la_ == 1:
                    self.state = 1465
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [tsqlParser.DEALLOCATE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1468
                self.match(tsqlParser.DEALLOCATE)
                self.state = 1470
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 1469
                    self.match(tsqlParser.GLOBAL)


                self.state = 1472
                self.cursor_name()
                self.state = 1474
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                if la_ == 1:
                    self.state = 1473
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [tsqlParser.DECLARE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1476
                self.declare_cursor()
                pass
            elif token in [tsqlParser.FETCH]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1477
                self.fetch_cursor()
                pass
            elif token in [tsqlParser.OPEN]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1478
                self.match(tsqlParser.OPEN)
                self.state = 1480
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                if la_ == 1:
                    self.state = 1479
                    self.match(tsqlParser.GLOBAL)


                self.state = 1482
                self.cursor_name()
                self.state = 1484
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1483
                    self.match(tsqlParser.SEMI)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.return_status = None # Token

        def EXECUTE(self):
            return self.getToken(tsqlParser.EXECUTE, 0)

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def execute_statement_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Execute_statement_argContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Execute_statement_argContext,i)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def execute_var_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Execute_var_stringContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Execute_var_stringContext,i)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.PLUS)
            else:
                return self.getToken(tsqlParser.PLUS, i)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def LOGIN(self):
            return self.getToken(tsqlParser.LOGIN, 0)

        def USER(self):
            return self.getToken(tsqlParser.USER, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_statement




    def execute_statement(self):

        localctx = tsqlParser.Execute_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_execute_statement)
        self._la = 0 # Token type
        try:
            self.state = 1529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1488
                self.match(tsqlParser.EXECUTE)
                self.state = 1491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.LOCAL_ID:
                    self.state = 1489
                    localctx.return_status = self.match(tsqlParser.LOCAL_ID)
                    self.state = 1490
                    self.match(tsqlParser.EQUAL)


                self.state = 1493
                self.func_proc_name()
                self.state = 1502
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
                if la_ == 1:
                    self.state = 1494
                    self.execute_statement_arg()
                    self.state = 1499
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==tsqlParser.COMMA:
                        self.state = 1495
                        self.match(tsqlParser.COMMA)
                        self.state = 1496
                        self.execute_statement_arg()
                        self.state = 1501
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1505
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
                if la_ == 1:
                    self.state = 1504
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1507
                self.match(tsqlParser.EXECUTE)
                self.state = 1508
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1509
                self.execute_var_string()
                self.state = 1514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.PLUS:
                    self.state = 1510
                    self.match(tsqlParser.PLUS)
                    self.state = 1511
                    self.execute_var_string()
                    self.state = 1516
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1517
                self.match(tsqlParser.RR_BRACKET)
                self.state = 1524
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                if la_ == 1:
                    self.state = 1519
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.AS:
                        self.state = 1518
                        self.match(tsqlParser.AS)


                    self.state = 1521
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.USER or _la==tsqlParser.LOGIN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1522
                    self.match(tsqlParser.EQUAL)
                    self.state = 1523
                    self.match(tsqlParser.STRING)


                self.state = 1527
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                if la_ == 1:
                    self.state = 1526
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_statement_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.parameter = None # Token

        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def NULL_(self):
            return self.getToken(tsqlParser.NULL_, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def constant_LOCAL_ID(self):
            return self.getTypedRuleContext(tsqlParser.Constant_LOCAL_IDContext,0)


        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def OUT(self):
            return self.getToken(tsqlParser.OUT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_statement_arg




    def execute_statement_arg(self):

        localctx = tsqlParser.Execute_statement_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_execute_statement_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
            if la_ == 1:
                self.state = 1531
                localctx.parameter = self.match(tsqlParser.LOCAL_ID)
                self.state = 1532
                self.match(tsqlParser.EQUAL)


            self.state = 1544
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.ID, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                self.state = 1537
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                    self.state = 1535
                    self.constant_LOCAL_ID()
                    pass
                elif token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 1536
                    self.r_id()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1540
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                if la_ == 1:
                    self.state = 1539
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.OUT or _la==tsqlParser.OUTPUT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [tsqlParser.DEFAULT]:
                self.state = 1542
                self.match(tsqlParser.DEFAULT)
                pass
            elif token in [tsqlParser.NULL_]:
                self.state = 1543
                self.match(tsqlParser.NULL_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_var_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_var_string




    def execute_var_string(self):

        localctx = tsqlParser.Execute_var_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_execute_var_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1546
            _la = self._input.LA(1)
            if not(_la==tsqlParser.LOCAL_ID or _la==tsqlParser.STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Security_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.on_id = None # Table_nameContext
            self.to_principal = None # R_idContext
            self.as_principal = None # R_idContext

        def execute_clause(self):
            return self.getTypedRuleContext(tsqlParser.Execute_clauseContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.GRANT)
            else:
                return self.getToken(tsqlParser.GRANT, i)

        def TO(self):
            return self.getToken(tsqlParser.TO, 0)

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def grant_permission(self):
            return self.getTypedRuleContext(tsqlParser.Grant_permissionContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def OPTION(self):
            return self.getToken(tsqlParser.OPTION, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def PRIVILEGES(self):
            return self.getToken(tsqlParser.PRIVILEGES, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def REVERT(self):
            return self.getToken(tsqlParser.REVERT, 0)

        def COOKIE(self):
            return self.getToken(tsqlParser.COOKIE, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_security_statement




    def security_statement(self):

        localctx = tsqlParser.Security_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_security_statement)
        self._la = 0 # Token type
        try:
            self.state = 1596
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1548
                self.execute_clause()
                self.state = 1550
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                if la_ == 1:
                    self.state = 1549
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [tsqlParser.GRANT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1552
                self.match(tsqlParser.GRANT)
                self.state = 1564
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.ALL]:
                    self.state = 1553
                    self.match(tsqlParser.ALL)
                    self.state = 1555
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.PRIVILEGES:
                        self.state = 1554
                        self.match(tsqlParser.PRIVILEGES)


                    pass
                elif token in [tsqlParser.ALTER, tsqlParser.CREATE, tsqlParser.EXECUTE, tsqlParser.INSERT, tsqlParser.REFERENCES, tsqlParser.SELECT, tsqlParser.VIEW, tsqlParser.CONTROL, tsqlParser.IMPERSONATE, tsqlParser.SHOWPLAN, tsqlParser.TAKE]:
                    self.state = 1557
                    self.grant_permission()
                    self.state = 1562
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.LR_BRACKET:
                        self.state = 1558
                        self.match(tsqlParser.LR_BRACKET)
                        self.state = 1559
                        self.column_name_list()
                        self.state = 1560
                        self.match(tsqlParser.RR_BRACKET)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1568
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ON:
                    self.state = 1566
                    self.match(tsqlParser.ON)
                    self.state = 1567
                    localctx.on_id = self.table_name()


                self.state = 1570
                self.match(tsqlParser.TO)

                self.state = 1571
                localctx.to_principal = self.r_id()
                self.state = 1575
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                if la_ == 1:
                    self.state = 1572
                    self.match(tsqlParser.WITH)
                    self.state = 1573
                    self.match(tsqlParser.GRANT)
                    self.state = 1574
                    self.match(tsqlParser.OPTION)


                self.state = 1579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.AS:
                    self.state = 1577
                    self.match(tsqlParser.AS)
                    self.state = 1578
                    localctx.as_principal = self.r_id()


                self.state = 1582
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
                if la_ == 1:
                    self.state = 1581
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [tsqlParser.REVERT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1584
                self.match(tsqlParser.REVERT)
                self.state = 1591
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
                if la_ == 1:
                    self.state = 1585
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 1586
                    self.match(tsqlParser.WITH)
                    self.state = 1587
                    self.match(tsqlParser.COOKIE)
                    self.state = 1588
                    self.match(tsqlParser.EQUAL)
                    self.state = 1589
                    self.match(tsqlParser.LOCAL_ID)
                    self.state = 1590
                    self.match(tsqlParser.RR_BRACKET)


                self.state = 1594
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
                if la_ == 1:
                    self.state = 1593
                    self.match(tsqlParser.SEMI)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_permissionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(tsqlParser.EXECUTE, 0)

        def VIEW(self):
            return self.getToken(tsqlParser.VIEW, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def TAKE(self):
            return self.getToken(tsqlParser.TAKE, 0)

        def CONTROL(self):
            return self.getToken(tsqlParser.CONTROL, 0)

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def SHOWPLAN(self):
            return self.getToken(tsqlParser.SHOWPLAN, 0)

        def IMPERSONATE(self):
            return self.getToken(tsqlParser.IMPERSONATE, 0)

        def SELECT(self):
            return self.getToken(tsqlParser.SELECT, 0)

        def REFERENCES(self):
            return self.getToken(tsqlParser.REFERENCES, 0)

        def INSERT(self):
            return self.getToken(tsqlParser.INSERT, 0)

        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def ANY(self):
            return self.getToken(tsqlParser.ANY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_grant_permission




    def grant_permission(self):

        localctx = tsqlParser.Grant_permissionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_grant_permission)
        self._la = 0 # Token type
        try:
            self.state = 1624
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1598
                self.match(tsqlParser.EXECUTE)
                pass
            elif token in [tsqlParser.VIEW]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1599
                self.match(tsqlParser.VIEW)
                self.state = 1600
                self.r_id()
                pass
            elif token in [tsqlParser.TAKE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1601
                self.match(tsqlParser.TAKE)
                self.state = 1602
                self.r_id()
                pass
            elif token in [tsqlParser.CONTROL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1603
                self.match(tsqlParser.CONTROL)
                self.state = 1605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (tsqlParser.FILLFACTOR - 71)) | (1 << (tsqlParser.FORCESEEK - 71)) | (1 << (tsqlParser.NEXT - 71)) | (1 << (tsqlParser.NUMERIC - 71)))) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (tsqlParser.VALUE - 196)) | (1 << (tsqlParser.ABSOLUTE - 196)) | (1 << (tsqlParser.APPLY - 196)) | (1 << (tsqlParser.AUTO - 196)) | (1 << (tsqlParser.AVG - 196)) | (1 << (tsqlParser.BASE64 - 196)) | (1 << (tsqlParser.CALLER - 196)) | (1 << (tsqlParser.CAST - 196)) | (1 << (tsqlParser.CATCH - 196)) | (1 << (tsqlParser.CHECKSUM_AGG - 196)) | (1 << (tsqlParser.COMMITTED - 196)) | (1 << (tsqlParser.CONCAT - 196)) | (1 << (tsqlParser.CONTROL - 196)) | (1 << (tsqlParser.COOKIE - 196)) | (1 << (tsqlParser.COUNT - 196)) | (1 << (tsqlParser.COUNT_BIG - 196)) | (1 << (tsqlParser.DATE - 196)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (tsqlParser.DELAY - 261)) | (1 << (tsqlParser.DELETED - 261)) | (1 << (tsqlParser.DENSE_RANK - 261)) | (1 << (tsqlParser.DISABLE - 261)) | (1 << (tsqlParser.DYNAMIC - 261)) | (1 << (tsqlParser.ENCRYPTION - 261)) | (1 << (tsqlParser.EXIST - 261)) | (1 << (tsqlParser.EXPAND - 261)) | (1 << (tsqlParser.FAST - 261)) | (1 << (tsqlParser.FAST_FORWARD - 261)) | (1 << (tsqlParser.FIRST - 261)) | (1 << (tsqlParser.FIRST_VALUE - 261)) | (1 << (tsqlParser.FOLLOWING - 261)) | (1 << (tsqlParser.FORCE - 261)) | (1 << (tsqlParser.FORCED - 261)) | (1 << (tsqlParser.FORWARD_ONLY - 261)) | (1 << (tsqlParser.FULLSCAN - 261)) | (1 << (tsqlParser.GLOBAL - 261)) | (1 << (tsqlParser.GROUPING - 261)) | (1 << (tsqlParser.GROUPING_ID - 261)) | (1 << (tsqlParser.HASH - 261)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 261)) | (1 << (tsqlParser.IMPERSONATE - 261)) | (1 << (tsqlParser.INSENSITIVE - 261)) | (1 << (tsqlParser.INSERTED - 261)) | (1 << (tsqlParser.ISOLATION - 261)) | (1 << (tsqlParser.IO - 261)) | (1 << (tsqlParser.KEEP - 261)) | (1 << (tsqlParser.KEEPFIXED - 261)) | (1 << (tsqlParser.KEYSET - 261)) | (1 << (tsqlParser.LAG - 261)) | (1 << (tsqlParser.LAST - 261)) | (1 << (tsqlParser.LAST_VALUE - 261)) | (1 << (tsqlParser.LEAD - 261)) | (1 << (tsqlParser.LEVEL - 261)) | (1 << (tsqlParser.LOCAL - 261)) | (1 << (tsqlParser.LOCK_ESCALATION - 261)) | (1 << (tsqlParser.LOGIN - 261)) | (1 << (tsqlParser.LOOP - 261)) | (1 << (tsqlParser.MARK - 261)) | (1 << (tsqlParser.MAX - 261)) | (1 << (tsqlParser.MAXDOP - 261)) | (1 << (tsqlParser.MAXRECURSION - 261)))) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & ((1 << (tsqlParser.MIN - 328)) | (1 << (tsqlParser.MODIFY - 328)) | (1 << (tsqlParser.NAME - 328)) | (1 << (tsqlParser.NOCOUNT - 328)) | (1 << (tsqlParser.NODES - 328)) | (1 << (tsqlParser.NOEXPAND - 328)) | (1 << (tsqlParser.NORECOMPUTE - 328)) | (1 << (tsqlParser.NTILE - 328)) | (1 << (tsqlParser.NUMBER - 328)) | (1 << (tsqlParser.OFFSET - 328)) | (1 << (tsqlParser.ONLINE - 328)) | (1 << (tsqlParser.ONLY - 328)) | (1 << (tsqlParser.OPTIMISTIC - 328)) | (1 << (tsqlParser.OPTIMIZE - 328)) | (1 << (tsqlParser.OUT - 328)) | (1 << (tsqlParser.OUTPUT - 328)) | (1 << (tsqlParser.OWNER - 328)) | (1 << (tsqlParser.PARAMETERIZATION - 328)) | (1 << (tsqlParser.PARTITION - 328)) | (1 << (tsqlParser.PATH - 328)) | (1 << (tsqlParser.PRECEDING - 328)) | (1 << (tsqlParser.PRIOR - 328)) | (1 << (tsqlParser.PRIVILEGES - 328)) | (1 << (tsqlParser.QUERY - 328)) | (1 << (tsqlParser.RANGE - 328)) | (1 << (tsqlParser.RANK - 328)) | (1 << (tsqlParser.READONLY - 328)) | (1 << (tsqlParser.READ_ONLY - 328)) | (1 << (tsqlParser.RECOMPILE - 328)) | (1 << (tsqlParser.RELATIVE - 328)) | (1 << (tsqlParser.REMOTE - 328)) | (1 << (tsqlParser.REPEATABLE - 328)) | (1 << (tsqlParser.ROBUST - 328)) | (1 << (tsqlParser.ROOT - 328)) | (1 << (tsqlParser.ROW - 328)) | (1 << (tsqlParser.ROWGUID - 328)) | (1 << (tsqlParser.ROWS - 328)) | (1 << (tsqlParser.ROW_NUMBER - 328)) | (1 << (tsqlParser.SAMPLE - 328)) | (1 << (tsqlParser.SCHEMABINDING - 328)) | (1 << (tsqlParser.SCROLL - 328)) | (1 << (tsqlParser.SCROLL_LOCKS - 328)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (tsqlParser.SELF - 393)) | (1 << (tsqlParser.SERIALIZABLE - 393)) | (1 << (tsqlParser.SIMPLE - 393)) | (1 << (tsqlParser.SIZE - 393)) | (1 << (tsqlParser.SNAPSHOT - 393)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 393)) | (1 << (tsqlParser.STATIC - 393)) | (1 << (tsqlParser.STATS_STREAM - 393)) | (1 << (tsqlParser.STDEV - 393)) | (1 << (tsqlParser.STDEVP - 393)) | (1 << (tsqlParser.SUM - 393)) | (1 << (tsqlParser.TEXTIMAGE_ON - 393)) | (1 << (tsqlParser.THROW - 393)) | (1 << (tsqlParser.TIES - 393)) | (1 << (tsqlParser.TIME - 393)) | (1 << (tsqlParser.TRY - 393)) | (1 << (tsqlParser.TYPE - 393)) | (1 << (tsqlParser.TYPE_WARNING - 393)) | (1 << (tsqlParser.UNBOUNDED - 393)) | (1 << (tsqlParser.UNCOMMITTED - 393)) | (1 << (tsqlParser.UNKNOWN - 393)) | (1 << (tsqlParser.USING - 393)) | (1 << (tsqlParser.VAR - 393)) | (1 << (tsqlParser.VARP - 393)) | (1 << (tsqlParser.VIEWS - 393)) | (1 << (tsqlParser.VIEW_METADATA - 393)) | (1 << (tsqlParser.WORK - 393)) | (1 << (tsqlParser.XML - 393)) | (1 << (tsqlParser.XMLNAMESPACES - 393)) | (1 << (tsqlParser.ZONE - 393)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 393)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 393)) | (1 << (tsqlParser.ID - 393)))) != 0):
                    self.state = 1604
                    self.r_id()


                pass
            elif token in [tsqlParser.CREATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1607
                self.match(tsqlParser.CREATE)
                self.state = 1608
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TABLE or _la==tsqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.SHOWPLAN]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1609
                self.match(tsqlParser.SHOWPLAN)
                pass
            elif token in [tsqlParser.IMPERSONATE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1610
                self.match(tsqlParser.IMPERSONATE)
                pass
            elif token in [tsqlParser.SELECT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1611
                self.match(tsqlParser.SELECT)
                pass
            elif token in [tsqlParser.REFERENCES]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1612
                self.match(tsqlParser.REFERENCES)
                pass
            elif token in [tsqlParser.INSERT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1613
                self.match(tsqlParser.INSERT)
                pass
            elif token in [tsqlParser.ALTER]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1614
                self.match(tsqlParser.ALTER)
                self.state = 1622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ANY or _la==tsqlParser.DATABASE or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (tsqlParser.FILLFACTOR - 71)) | (1 << (tsqlParser.FORCESEEK - 71)) | (1 << (tsqlParser.NEXT - 71)) | (1 << (tsqlParser.NUMERIC - 71)))) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (tsqlParser.VALUE - 196)) | (1 << (tsqlParser.ABSOLUTE - 196)) | (1 << (tsqlParser.APPLY - 196)) | (1 << (tsqlParser.AUTO - 196)) | (1 << (tsqlParser.AVG - 196)) | (1 << (tsqlParser.BASE64 - 196)) | (1 << (tsqlParser.CALLER - 196)) | (1 << (tsqlParser.CAST - 196)) | (1 << (tsqlParser.CATCH - 196)) | (1 << (tsqlParser.CHECKSUM_AGG - 196)) | (1 << (tsqlParser.COMMITTED - 196)) | (1 << (tsqlParser.CONCAT - 196)) | (1 << (tsqlParser.CONTROL - 196)) | (1 << (tsqlParser.COOKIE - 196)) | (1 << (tsqlParser.COUNT - 196)) | (1 << (tsqlParser.COUNT_BIG - 196)) | (1 << (tsqlParser.DATE - 196)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (tsqlParser.DELAY - 261)) | (1 << (tsqlParser.DELETED - 261)) | (1 << (tsqlParser.DENSE_RANK - 261)) | (1 << (tsqlParser.DISABLE - 261)) | (1 << (tsqlParser.DYNAMIC - 261)) | (1 << (tsqlParser.ENCRYPTION - 261)) | (1 << (tsqlParser.EXIST - 261)) | (1 << (tsqlParser.EXPAND - 261)) | (1 << (tsqlParser.FAST - 261)) | (1 << (tsqlParser.FAST_FORWARD - 261)) | (1 << (tsqlParser.FIRST - 261)) | (1 << (tsqlParser.FIRST_VALUE - 261)) | (1 << (tsqlParser.FOLLOWING - 261)) | (1 << (tsqlParser.FORCE - 261)) | (1 << (tsqlParser.FORCED - 261)) | (1 << (tsqlParser.FORWARD_ONLY - 261)) | (1 << (tsqlParser.FULLSCAN - 261)) | (1 << (tsqlParser.GLOBAL - 261)) | (1 << (tsqlParser.GROUPING - 261)) | (1 << (tsqlParser.GROUPING_ID - 261)) | (1 << (tsqlParser.HASH - 261)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 261)) | (1 << (tsqlParser.IMPERSONATE - 261)) | (1 << (tsqlParser.INSENSITIVE - 261)) | (1 << (tsqlParser.INSERTED - 261)) | (1 << (tsqlParser.ISOLATION - 261)) | (1 << (tsqlParser.IO - 261)) | (1 << (tsqlParser.KEEP - 261)) | (1 << (tsqlParser.KEEPFIXED - 261)) | (1 << (tsqlParser.KEYSET - 261)) | (1 << (tsqlParser.LAG - 261)) | (1 << (tsqlParser.LAST - 261)) | (1 << (tsqlParser.LAST_VALUE - 261)) | (1 << (tsqlParser.LEAD - 261)) | (1 << (tsqlParser.LEVEL - 261)) | (1 << (tsqlParser.LOCAL - 261)) | (1 << (tsqlParser.LOCK_ESCALATION - 261)) | (1 << (tsqlParser.LOGIN - 261)) | (1 << (tsqlParser.LOOP - 261)) | (1 << (tsqlParser.MARK - 261)) | (1 << (tsqlParser.MAX - 261)) | (1 << (tsqlParser.MAXDOP - 261)) | (1 << (tsqlParser.MAXRECURSION - 261)))) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & ((1 << (tsqlParser.MIN - 328)) | (1 << (tsqlParser.MODIFY - 328)) | (1 << (tsqlParser.NAME - 328)) | (1 << (tsqlParser.NOCOUNT - 328)) | (1 << (tsqlParser.NODES - 328)) | (1 << (tsqlParser.NOEXPAND - 328)) | (1 << (tsqlParser.NORECOMPUTE - 328)) | (1 << (tsqlParser.NTILE - 328)) | (1 << (tsqlParser.NUMBER - 328)) | (1 << (tsqlParser.OFFSET - 328)) | (1 << (tsqlParser.ONLINE - 328)) | (1 << (tsqlParser.ONLY - 328)) | (1 << (tsqlParser.OPTIMISTIC - 328)) | (1 << (tsqlParser.OPTIMIZE - 328)) | (1 << (tsqlParser.OUT - 328)) | (1 << (tsqlParser.OUTPUT - 328)) | (1 << (tsqlParser.OWNER - 328)) | (1 << (tsqlParser.PARAMETERIZATION - 328)) | (1 << (tsqlParser.PARTITION - 328)) | (1 << (tsqlParser.PATH - 328)) | (1 << (tsqlParser.PRECEDING - 328)) | (1 << (tsqlParser.PRIOR - 328)) | (1 << (tsqlParser.PRIVILEGES - 328)) | (1 << (tsqlParser.QUERY - 328)) | (1 << (tsqlParser.RANGE - 328)) | (1 << (tsqlParser.RANK - 328)) | (1 << (tsqlParser.READONLY - 328)) | (1 << (tsqlParser.READ_ONLY - 328)) | (1 << (tsqlParser.RECOMPILE - 328)) | (1 << (tsqlParser.RELATIVE - 328)) | (1 << (tsqlParser.REMOTE - 328)) | (1 << (tsqlParser.REPEATABLE - 328)) | (1 << (tsqlParser.ROBUST - 328)) | (1 << (tsqlParser.ROOT - 328)) | (1 << (tsqlParser.ROW - 328)) | (1 << (tsqlParser.ROWGUID - 328)) | (1 << (tsqlParser.ROWS - 328)) | (1 << (tsqlParser.ROW_NUMBER - 328)) | (1 << (tsqlParser.SAMPLE - 328)) | (1 << (tsqlParser.SCHEMABINDING - 328)) | (1 << (tsqlParser.SCROLL - 328)) | (1 << (tsqlParser.SCROLL_LOCKS - 328)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (tsqlParser.SELF - 393)) | (1 << (tsqlParser.SERIALIZABLE - 393)) | (1 << (tsqlParser.SIMPLE - 393)) | (1 << (tsqlParser.SIZE - 393)) | (1 << (tsqlParser.SNAPSHOT - 393)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 393)) | (1 << (tsqlParser.STATIC - 393)) | (1 << (tsqlParser.STATS_STREAM - 393)) | (1 << (tsqlParser.STDEV - 393)) | (1 << (tsqlParser.STDEVP - 393)) | (1 << (tsqlParser.SUM - 393)) | (1 << (tsqlParser.TEXTIMAGE_ON - 393)) | (1 << (tsqlParser.THROW - 393)) | (1 << (tsqlParser.TIES - 393)) | (1 << (tsqlParser.TIME - 393)) | (1 << (tsqlParser.TRY - 393)) | (1 << (tsqlParser.TYPE - 393)) | (1 << (tsqlParser.TYPE_WARNING - 393)) | (1 << (tsqlParser.UNBOUNDED - 393)) | (1 << (tsqlParser.UNCOMMITTED - 393)) | (1 << (tsqlParser.UNKNOWN - 393)) | (1 << (tsqlParser.USING - 393)) | (1 << (tsqlParser.VAR - 393)) | (1 << (tsqlParser.VARP - 393)) | (1 << (tsqlParser.VIEWS - 393)) | (1 << (tsqlParser.VIEW_METADATA - 393)) | (1 << (tsqlParser.WORK - 393)) | (1 << (tsqlParser.XML - 393)) | (1 << (tsqlParser.XMLNAMESPACES - 393)) | (1 << (tsqlParser.ZONE - 393)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 393)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 393)) | (1 << (tsqlParser.ID - 393)))) != 0):
                    self.state = 1616
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.ANY:
                        self.state = 1615
                        self.match(tsqlParser.ANY)


                    self.state = 1620
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                        self.state = 1618
                        self.r_id()
                        pass
                    elif token in [tsqlParser.DATABASE]:
                        self.state = 1619
                        self.match(tsqlParser.DATABASE)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.member_name = None # R_idContext

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def DOT(self):
            return self.getToken(tsqlParser.DOT, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(tsqlParser.Assignment_operatorContext,0)


        def CURSOR(self):
            return self.getToken(tsqlParser.CURSOR, 0)

        def declare_set_cursor_common(self):
            return self.getTypedRuleContext(tsqlParser.Declare_set_cursor_commonContext,0)


        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def READ(self):
            return self.getToken(tsqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def UPDATE(self):
            return self.getToken(tsqlParser.UPDATE, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def set_special(self):
            return self.getTypedRuleContext(tsqlParser.Set_specialContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_set_statement




    def set_statement(self):

        localctx = tsqlParser.Set_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_set_statement)
        self._la = 0 # Token type
        try:
            self.state = 1665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1626
                self.match(tsqlParser.SET)
                self.state = 1627
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.DOT:
                    self.state = 1628
                    self.match(tsqlParser.DOT)
                    self.state = 1629
                    localctx.member_name = self.r_id()


                self.state = 1632
                self.match(tsqlParser.EQUAL)
                self.state = 1633
                self.expression(0)
                self.state = 1635
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
                if la_ == 1:
                    self.state = 1634
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1637
                self.match(tsqlParser.SET)
                self.state = 1638
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1639
                self.assignment_operator()
                self.state = 1640
                self.expression(0)
                self.state = 1642
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
                if la_ == 1:
                    self.state = 1641
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1644
                self.match(tsqlParser.SET)
                self.state = 1645
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1646
                self.match(tsqlParser.EQUAL)
                self.state = 1647
                self.match(tsqlParser.CURSOR)
                self.state = 1648
                self.declare_set_cursor_common()
                self.state = 1659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.FOR:
                    self.state = 1649
                    self.match(tsqlParser.FOR)
                    self.state = 1657
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [tsqlParser.READ]:
                        self.state = 1650
                        self.match(tsqlParser.READ)
                        self.state = 1651
                        self.match(tsqlParser.ONLY)
                        pass
                    elif token in [tsqlParser.UPDATE]:
                        self.state = 1652
                        self.match(tsqlParser.UPDATE)
                        self.state = 1655
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==tsqlParser.OF:
                            self.state = 1653
                            self.match(tsqlParser.OF)
                            self.state = 1654
                            self.column_name_list()


                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 1662
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
                if la_ == 1:
                    self.state = 1661
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1664
                self.set_special()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(tsqlParser.BEGIN, 0)

        def DISTRIBUTED(self):
            return self.getToken(tsqlParser.DISTRIBUTED, 0)

        def TRAN(self):
            return self.getToken(tsqlParser.TRAN, 0)

        def TRANSACTION(self):
            return self.getToken(tsqlParser.TRANSACTION, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def MARK(self):
            return self.getToken(tsqlParser.MARK, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def COMMIT(self):
            return self.getToken(tsqlParser.COMMIT, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def DELAYED_DURABILITY(self):
            return self.getToken(tsqlParser.DELAYED_DURABILITY, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def WORK(self):
            return self.getToken(tsqlParser.WORK, 0)

        def ROLLBACK(self):
            return self.getToken(tsqlParser.ROLLBACK, 0)

        def SAVE(self):
            return self.getToken(tsqlParser.SAVE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_transaction_statement




    def transaction_statement(self):

        localctx = tsqlParser.Transaction_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_transaction_statement)
        self._la = 0 # Token type
        try:
            self.state = 1744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1667
                self.match(tsqlParser.BEGIN)
                self.state = 1668
                self.match(tsqlParser.DISTRIBUTED)
                self.state = 1669
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1672
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
                if la_ == 1:
                    self.state = 1670
                    self.r_id()

                elif la_ == 2:
                    self.state = 1671
                    self.match(tsqlParser.LOCAL_ID)


                self.state = 1675
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                if la_ == 1:
                    self.state = 1674
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1677
                self.match(tsqlParser.BEGIN)
                self.state = 1678
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1688
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
                if la_ == 1:
                    self.state = 1681
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                        self.state = 1679
                        self.r_id()
                        pass
                    elif token in [tsqlParser.LOCAL_ID]:
                        self.state = 1680
                        self.match(tsqlParser.LOCAL_ID)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1686
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
                    if la_ == 1:
                        self.state = 1683
                        self.match(tsqlParser.WITH)
                        self.state = 1684
                        self.match(tsqlParser.MARK)
                        self.state = 1685
                        self.match(tsqlParser.STRING)




                self.state = 1691
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
                if la_ == 1:
                    self.state = 1690
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1693
                self.match(tsqlParser.COMMIT)
                self.state = 1694
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1707
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 1697
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                        self.state = 1695
                        self.r_id()
                        pass
                    elif token in [tsqlParser.LOCAL_ID]:
                        self.state = 1696
                        self.match(tsqlParser.LOCAL_ID)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1705
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
                    if la_ == 1:
                        self.state = 1699
                        self.match(tsqlParser.WITH)
                        self.state = 1700
                        self.match(tsqlParser.LR_BRACKET)
                        self.state = 1701
                        self.match(tsqlParser.DELAYED_DURABILITY)
                        self.state = 1702
                        self.match(tsqlParser.EQUAL)
                        self.state = 1703
                        _la = self._input.LA(1)
                        if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1704
                        self.match(tsqlParser.RR_BRACKET)




                self.state = 1710
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                if la_ == 1:
                    self.state = 1709
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1712
                self.match(tsqlParser.COMMIT)
                self.state = 1714
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
                if la_ == 1:
                    self.state = 1713
                    self.match(tsqlParser.WORK)


                self.state = 1717
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
                if la_ == 1:
                    self.state = 1716
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1719
                self.match(tsqlParser.ROLLBACK)
                self.state = 1720
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1723
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
                if la_ == 1:
                    self.state = 1721
                    self.r_id()

                elif la_ == 2:
                    self.state = 1722
                    self.match(tsqlParser.LOCAL_ID)


                self.state = 1726
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
                if la_ == 1:
                    self.state = 1725
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1728
                self.match(tsqlParser.ROLLBACK)
                self.state = 1730
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
                if la_ == 1:
                    self.state = 1729
                    self.match(tsqlParser.WORK)


                self.state = 1733
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
                if la_ == 1:
                    self.state = 1732
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1735
                self.match(tsqlParser.SAVE)
                self.state = 1736
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1739
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
                if la_ == 1:
                    self.state = 1737
                    self.r_id()

                elif la_ == 2:
                    self.state = 1738
                    self.match(tsqlParser.LOCAL_ID)


                self.state = 1742
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
                if la_ == 1:
                    self.state = 1741
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Go_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.count = None # Token

        def GO(self):
            return self.getToken(tsqlParser.GO, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_go_statement




    def go_statement(self):

        localctx = tsqlParser.Go_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_go_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1746
            self.match(tsqlParser.GO)
            self.state = 1748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.DECIMAL:
                self.state = 1747
                localctx.count = self.match(tsqlParser.DECIMAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Use_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext

        def USE(self):
            return self.getToken(tsqlParser.USE, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_use_statement




    def use_statement(self):

        localctx = tsqlParser.Use_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_use_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1750
            self.match(tsqlParser.USE)
            self.state = 1751
            localctx.database = self.r_id()
            self.state = 1753
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.state = 1752
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.clause = None # Token

        def EXECUTE(self):
            return self.getToken(tsqlParser.EXECUTE, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def CALLER(self):
            return self.getToken(tsqlParser.CALLER, 0)

        def SELF(self):
            return self.getToken(tsqlParser.SELF, 0)

        def OWNER(self):
            return self.getToken(tsqlParser.OWNER, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_clause




    def execute_clause(self):

        localctx = tsqlParser.Execute_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_execute_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1755
            self.match(tsqlParser.EXECUTE)
            self.state = 1756
            self.match(tsqlParser.AS)
            self.state = 1757
            localctx.clause = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==tsqlParser.CALLER or _la==tsqlParser.OWNER or _la==tsqlParser.SELF or _la==tsqlParser.STRING):
                localctx.clause = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_localContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_declare_local




    def declare_local(self):

        localctx = tsqlParser.Declare_localContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_declare_local)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1759
            self.match(tsqlParser.LOCAL_ID)
            self.state = 1761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 1760
                self.match(tsqlParser.AS)


            self.state = 1763
            self.data_type()
            self.state = 1766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.EQUAL:
                self.state = 1764
                self.match(tsqlParser.EQUAL)
                self.state = 1765
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_type_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def column_def_table_constraints(self):
            return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintsContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_type_definition




    def table_type_definition(self):

        localctx = tsqlParser.Table_type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_table_type_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1768
            self.match(tsqlParser.TABLE)
            self.state = 1769
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1770
            self.column_def_table_constraints()
            self.state = 1771
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_def_table_constraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_def_table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_def_table_constraintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_def_table_constraints




    def column_def_table_constraints(self):

        localctx = tsqlParser.Column_def_table_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_column_def_table_constraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1773
            self.column_def_table_constraint()
            self.state = 1780
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,248,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1775
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.COMMA:
                        self.state = 1774
                        self.match(tsqlParser.COMMA)


                    self.state = 1777
                    self.column_def_table_constraint() 
                self.state = 1782
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,248,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_def_table_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_definition(self):
            return self.getTypedRuleContext(tsqlParser.Column_definitionContext,0)


        def table_constraint(self):
            return self.getTypedRuleContext(tsqlParser.Table_constraintContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_column_def_table_constraint




    def column_def_table_constraint(self):

        localctx = tsqlParser.Column_def_table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_column_def_table_constraint)
        try:
            self.state = 1785
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1783
                self.column_definition()
                pass
            elif token in [tsqlParser.CHECK, tsqlParser.CONSTRAINT, tsqlParser.FOREIGN, tsqlParser.PRIMARY, tsqlParser.UNIQUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1784
                self.table_constraint()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint = None # R_idContext
            self.seed = None # Token
            self.increment = None # Token

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)

        def null_notnull(self):
            return self.getTypedRuleContext(tsqlParser.Null_notnullContext,0)


        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(tsqlParser.Constant_expressionContext,0)


        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)

        def ROWGUIDCOL(self):
            return self.getToken(tsqlParser.ROWGUIDCOL, 0)

        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_constraintContext,i)


        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def VALUES(self):
            return self.getToken(tsqlParser.VALUES, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(tsqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_definition




    def column_definition(self):

        localctx = tsqlParser.Column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_column_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1787
            self.r_id()
            self.state = 1791
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.DOUBLE, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.BIGINT, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DATETIME2, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SMALLINT, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TINYINT, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.state = 1788
                self.data_type()
                pass
            elif token in [tsqlParser.AS]:
                self.state = 1789
                self.match(tsqlParser.AS)
                self.state = 1790
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COLLATE:
                self.state = 1793
                self.match(tsqlParser.COLLATE)
                self.state = 1794
                self.r_id()


            self.state = 1798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.state = 1797
                self.null_notnull()


            self.state = 1823
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
            if la_ == 1:
                self.state = 1802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.CONSTRAINT:
                    self.state = 1800
                    self.match(tsqlParser.CONSTRAINT)
                    self.state = 1801
                    localctx.constraint = self.r_id()


                self.state = 1804
                self.match(tsqlParser.DEFAULT)
                self.state = 1805
                self.constant_expression()
                self.state = 1808
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
                if la_ == 1:
                    self.state = 1806
                    self.match(tsqlParser.WITH)
                    self.state = 1807
                    self.match(tsqlParser.VALUES)



            elif la_ == 2:
                self.state = 1810
                self.match(tsqlParser.IDENTITY)
                self.state = 1816
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
                if la_ == 1:
                    self.state = 1811
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 1812
                    localctx.seed = self.match(tsqlParser.DECIMAL)
                    self.state = 1813
                    self.match(tsqlParser.COMMA)
                    self.state = 1814
                    localctx.increment = self.match(tsqlParser.DECIMAL)
                    self.state = 1815
                    self.match(tsqlParser.RR_BRACKET)


                self.state = 1821
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                if la_ == 1:
                    self.state = 1818
                    self.match(tsqlParser.NOT)
                    self.state = 1819
                    self.match(tsqlParser.FOR)
                    self.state = 1820
                    self.match(tsqlParser.REPLICATION)




            self.state = 1826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ROWGUIDCOL:
                self.state = 1825
                self.match(tsqlParser.ROWGUIDCOL)


            self.state = 1831
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,259,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1828
                    self.column_constraint() 
                self.state = 1833
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,259,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def null_notnull(self):
            return self.getTypedRuleContext(tsqlParser.Null_notnullContext,0)


        def PRIMARY(self):
            return self.getToken(tsqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(tsqlParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(tsqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(tsqlParser.ClusteredContext,0)


        def index_options(self):
            return self.getTypedRuleContext(tsqlParser.Index_optionsContext,0)


        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_constraint




    def column_constraint(self):

        localctx = tsqlParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.CONSTRAINT:
                self.state = 1834
                self.match(tsqlParser.CONSTRAINT)
                self.state = 1835
                self.r_id()


            self.state = 1839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.NOT or _la==tsqlParser.NULL_:
                self.state = 1838
                self.null_notnull()


            self.state = 1862
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.PRIMARY, tsqlParser.UNIQUE]:
                self.state = 1844
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.PRIMARY]:
                    self.state = 1841
                    self.match(tsqlParser.PRIMARY)
                    self.state = 1842
                    self.match(tsqlParser.KEY)
                    pass
                elif token in [tsqlParser.UNIQUE]:
                    self.state = 1843
                    self.match(tsqlParser.UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.CLUSTERED or _la==tsqlParser.NONCLUSTERED:
                    self.state = 1846
                    self.clustered()


                self.state = 1850
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                if la_ == 1:
                    self.state = 1849
                    self.index_options()


                pass
            elif token in [tsqlParser.CHECK]:
                self.state = 1852
                self.match(tsqlParser.CHECK)
                self.state = 1856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 1853
                    self.match(tsqlParser.NOT)
                    self.state = 1854
                    self.match(tsqlParser.FOR)
                    self.state = 1855
                    self.match(tsqlParser.REPLICATION)


                self.state = 1858
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1859
                self.search_condition(0)
                self.state = 1860
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fk = None # Column_name_listContext
            self.pk = None # Column_name_listContext

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LR_BRACKET)
            else:
                return self.getToken(tsqlParser.LR_BRACKET, i)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.RR_BRACKET)
            else:
                return self.getToken(tsqlParser.RR_BRACKET, i)

        def FOREIGN(self):
            return self.getToken(tsqlParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(tsqlParser.KEY, 0)

        def REFERENCES(self):
            return self.getToken(tsqlParser.REFERENCES, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_name_listContext,i)


        def PRIMARY(self):
            return self.getToken(tsqlParser.PRIMARY, 0)

        def UNIQUE(self):
            return self.getToken(tsqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(tsqlParser.ClusteredContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def index_options(self):
            return self.getTypedRuleContext(tsqlParser.Index_optionsContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def ASC(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ASC)
            else:
                return self.getToken(tsqlParser.ASC, i)

        def DESC(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DESC)
            else:
                return self.getToken(tsqlParser.DESC, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_constraint




    def table_constraint(self):

        localctx = tsqlParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.CONSTRAINT:
                self.state = 1864
                self.match(tsqlParser.CONSTRAINT)
                self.state = 1865
                self.r_id()


            self.state = 1920
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.PRIMARY, tsqlParser.UNIQUE]:
                self.state = 1871
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.PRIMARY]:
                    self.state = 1868
                    self.match(tsqlParser.PRIMARY)
                    self.state = 1869
                    self.match(tsqlParser.KEY)
                    pass
                elif token in [tsqlParser.UNIQUE]:
                    self.state = 1870
                    self.match(tsqlParser.UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.CLUSTERED or _la==tsqlParser.NONCLUSTERED:
                    self.state = 1873
                    self.clustered()


                self.state = 1876
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1877
                self.r_id()
                self.state = 1879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ASC or _la==tsqlParser.DESC:
                    self.state = 1878
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.ASC or _la==tsqlParser.DESC):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 1881
                    self.match(tsqlParser.COMMA)
                    self.state = 1882
                    self.r_id()
                    self.state = 1884
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.ASC or _la==tsqlParser.DESC:
                        self.state = 1883
                        _la = self._input.LA(1)
                        if not(_la==tsqlParser.ASC or _la==tsqlParser.DESC):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1890
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1891
                self.match(tsqlParser.RR_BRACKET)
                self.state = 1893
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
                if la_ == 1:
                    self.state = 1892
                    self.index_options()


                self.state = 1897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ON:
                    self.state = 1895
                    self.match(tsqlParser.ON)
                    self.state = 1896
                    self.r_id()


                pass
            elif token in [tsqlParser.FOREIGN]:
                self.state = 1899
                self.match(tsqlParser.FOREIGN)
                self.state = 1900
                self.match(tsqlParser.KEY)
                self.state = 1901
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1902
                localctx.fk = self.column_name_list()
                self.state = 1903
                self.match(tsqlParser.RR_BRACKET)
                self.state = 1904
                self.match(tsqlParser.REFERENCES)
                self.state = 1905
                self.table_name()
                self.state = 1906
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1907
                localctx.pk = self.column_name_list()
                self.state = 1908
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.CHECK]:
                self.state = 1910
                self.match(tsqlParser.CHECK)
                self.state = 1914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 1911
                    self.match(tsqlParser.NOT)
                    self.state = 1912
                    self.match(tsqlParser.FOR)
                    self.state = 1913
                    self.match(tsqlParser.REPLICATION)


                self.state = 1916
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1917
                self.search_condition(0)
                self.state = 1918
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def index_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Index_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Index_optionContext,i)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_index_options




    def index_options(self):

        localctx = tsqlParser.Index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1922
            self.match(tsqlParser.WITH)
            self.state = 1923
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1924
            self.index_option()
            self.state = 1929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 1925
                self.match(tsqlParser.COMMA)
                self.state = 1926
                self.index_option()
                self.state = 1931
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1932
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Simple_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Simple_idContext,i)


        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_index_option




    def index_option(self):

        localctx = tsqlParser.Index_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_index_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1934
            self.simple_id()
            self.state = 1935
            self.match(tsqlParser.EQUAL)
            self.state = 1939
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.ID]:
                self.state = 1936
                self.simple_id()
                pass
            elif token in [tsqlParser.OFF, tsqlParser.ON]:
                self.state = 1937
                self.on_off()
                pass
            elif token in [tsqlParser.DECIMAL]:
                self.state = 1938
                self.match(tsqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_cursorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(tsqlParser.DECLARE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def CURSOR(self):
            return self.getToken(tsqlParser.CURSOR, 0)

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.FOR)
            else:
                return self.getToken(tsqlParser.FOR, i)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def declare_set_cursor_common(self):
            return self.getTypedRuleContext(tsqlParser.Declare_set_cursor_commonContext,0)


        def INSENSITIVE(self):
            return self.getToken(tsqlParser.INSENSITIVE, 0)

        def SCROLL(self):
            return self.getToken(tsqlParser.SCROLL, 0)

        def READ(self):
            return self.getToken(tsqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def UPDATE(self):
            return self.getToken(tsqlParser.UPDATE, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_declare_cursor




    def declare_cursor(self):

        localctx = tsqlParser.Declare_cursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_declare_cursor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1941
            self.match(tsqlParser.DECLARE)
            self.state = 1942
            self.cursor_name()
            self.state = 1974
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.state = 1943
                self.match(tsqlParser.CURSOR)
                self.state = 1953
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
                if la_ == 1:
                    self.state = 1944
                    self.declare_set_cursor_common()
                    self.state = 1951
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.FOR:
                        self.state = 1945
                        self.match(tsqlParser.FOR)
                        self.state = 1946
                        self.match(tsqlParser.UPDATE)
                        self.state = 1949
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==tsqlParser.OF:
                            self.state = 1947
                            self.match(tsqlParser.OF)
                            self.state = 1948
                            self.column_name_list()






                pass

            elif la_ == 2:
                self.state = 1956
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.INSENSITIVE:
                    self.state = 1955
                    self.match(tsqlParser.INSENSITIVE)


                self.state = 1959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.SCROLL:
                    self.state = 1958
                    self.match(tsqlParser.SCROLL)


                self.state = 1961
                self.match(tsqlParser.CURSOR)
                self.state = 1962
                self.match(tsqlParser.FOR)
                self.state = 1963
                self.select_statement()
                self.state = 1972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.FOR:
                    self.state = 1964
                    self.match(tsqlParser.FOR)
                    self.state = 1970
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [tsqlParser.READ]:
                        self.state = 1965
                        self.match(tsqlParser.READ)
                        self.state = 1966
                        self.match(tsqlParser.ONLY)
                        pass
                    elif token in [tsqlParser.UPDATE]:
                        self.state = 1967
                        self.match(tsqlParser.UPDATE)
                        pass
                    elif token in [tsqlParser.OF]:
                        self.state = 1968
                        self.match(tsqlParser.OF)
                        self.state = 1969
                        self.column_name_list()
                        pass
                    else:
                        raise NoViableAltException(self)



                pass


            self.state = 1977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.state = 1976
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_set_cursor_commonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def TYPE_WARNING(self):
            return self.getToken(tsqlParser.TYPE_WARNING, 0)

        def LOCAL(self):
            return self.getToken(tsqlParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def FORWARD_ONLY(self):
            return self.getToken(tsqlParser.FORWARD_ONLY, 0)

        def SCROLL(self):
            return self.getToken(tsqlParser.SCROLL, 0)

        def STATIC(self):
            return self.getToken(tsqlParser.STATIC, 0)

        def KEYSET(self):
            return self.getToken(tsqlParser.KEYSET, 0)

        def DYNAMIC(self):
            return self.getToken(tsqlParser.DYNAMIC, 0)

        def FAST_FORWARD(self):
            return self.getToken(tsqlParser.FAST_FORWARD, 0)

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def SCROLL_LOCKS(self):
            return self.getToken(tsqlParser.SCROLL_LOCKS, 0)

        def OPTIMISTIC(self):
            return self.getToken(tsqlParser.OPTIMISTIC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_declare_set_cursor_common




    def declare_set_cursor_common(self):

        localctx = tsqlParser.Declare_set_cursor_commonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_declare_set_cursor_common)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.GLOBAL or _la==tsqlParser.LOCAL:
                self.state = 1979
                _la = self._input.LA(1)
                if not(_la==tsqlParser.GLOBAL or _la==tsqlParser.LOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FORWARD_ONLY or _la==tsqlParser.SCROLL:
                self.state = 1982
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FORWARD_ONLY or _la==tsqlParser.SCROLL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 269)) & ~0x3f) == 0 and ((1 << (_la - 269)) & ((1 << (tsqlParser.DYNAMIC - 269)) | (1 << (tsqlParser.FAST_FORWARD - 269)) | (1 << (tsqlParser.KEYSET - 269)))) != 0) or _la==tsqlParser.STATIC:
                self.state = 1985
                _la = self._input.LA(1)
                if not(((((_la - 269)) & ~0x3f) == 0 and ((1 << (_la - 269)) & ((1 << (tsqlParser.DYNAMIC - 269)) | (1 << (tsqlParser.FAST_FORWARD - 269)) | (1 << (tsqlParser.KEYSET - 269)))) != 0) or _la==tsqlParser.STATIC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 350)) & ~0x3f) == 0 and ((1 << (_la - 350)) & ((1 << (tsqlParser.OPTIMISTIC - 350)) | (1 << (tsqlParser.READ_ONLY - 350)) | (1 << (tsqlParser.SCROLL_LOCKS - 350)))) != 0):
                self.state = 1988
                _la = self._input.LA(1)
                if not(((((_la - 350)) & ~0x3f) == 0 and ((1 << (_la - 350)) & ((1 << (tsqlParser.OPTIMISTIC - 350)) | (1 << (tsqlParser.READ_ONLY - 350)) | (1 << (tsqlParser.SCROLL_LOCKS - 350)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TYPE_WARNING:
                self.state = 1991
                self.match(tsqlParser.TYPE_WARNING)


            self.state = 1994
            self.match(tsqlParser.FOR)
            self.state = 1995
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fetch_cursorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FETCH(self):
            return self.getToken(tsqlParser.FETCH, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LOCAL_ID)
            else:
                return self.getToken(tsqlParser.LOCAL_ID, i)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def NEXT(self):
            return self.getToken(tsqlParser.NEXT, 0)

        def PRIOR(self):
            return self.getToken(tsqlParser.PRIOR, 0)

        def FIRST(self):
            return self.getToken(tsqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(tsqlParser.LAST, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def ABSOLUTE(self):
            return self.getToken(tsqlParser.ABSOLUTE, 0)

        def RELATIVE(self):
            return self.getToken(tsqlParser.RELATIVE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_fetch_cursor




    def fetch_cursor(self):

        localctx = tsqlParser.Fetch_cursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_fetch_cursor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1997
            self.match(tsqlParser.FETCH)
            self.state = 2007
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
            if la_ == 1:
                self.state = 2004
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.NEXT]:
                    self.state = 1998
                    self.match(tsqlParser.NEXT)
                    pass
                elif token in [tsqlParser.PRIOR]:
                    self.state = 1999
                    self.match(tsqlParser.PRIOR)
                    pass
                elif token in [tsqlParser.FIRST]:
                    self.state = 2000
                    self.match(tsqlParser.FIRST)
                    pass
                elif token in [tsqlParser.LAST]:
                    self.state = 2001
                    self.match(tsqlParser.LAST)
                    pass
                elif token in [tsqlParser.ABSOLUTE, tsqlParser.RELATIVE]:
                    self.state = 2002
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.ABSOLUTE or _la==tsqlParser.RELATIVE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2003
                    self.expression(0)
                    pass
                elif token in [tsqlParser.FROM]:
                    pass
                else:
                    pass
                self.state = 2006
                self.match(tsqlParser.FROM)


            self.state = 2010
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.state = 2009
                self.match(tsqlParser.GLOBAL)


            self.state = 2012
            self.cursor_name()
            self.state = 2022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.INTO:
                self.state = 2013
                self.match(tsqlParser.INTO)
                self.state = 2014
                self.match(tsqlParser.LOCAL_ID)
                self.state = 2019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 2015
                    self.match(tsqlParser.COMMA)
                    self.state = 2016
                    self.match(tsqlParser.LOCAL_ID)
                    self.state = 2021
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
            if la_ == 1:
                self.state = 2024
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_specialContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # R_idContext
            self.value = None # R_idContext
            self.set_type = None # Token

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def constant_LOCAL_ID(self):
            return self.getTypedRuleContext(tsqlParser.Constant_LOCAL_IDContext,0)


        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def ISOLATION(self):
            return self.getToken(tsqlParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(tsqlParser.LEVEL, 0)

        def TRANSACTION(self):
            return self.getToken(tsqlParser.TRANSACTION, 0)

        def READ(self):
            return self.getToken(tsqlParser.READ, 0)

        def UNCOMMITTED(self):
            return self.getToken(tsqlParser.UNCOMMITTED, 0)

        def COMMITTED(self):
            return self.getToken(tsqlParser.COMMITTED, 0)

        def REPEATABLE(self):
            return self.getToken(tsqlParser.REPEATABLE, 0)

        def SNAPSHOT(self):
            return self.getToken(tsqlParser.SNAPSHOT, 0)

        def SERIALIZABLE(self):
            return self.getToken(tsqlParser.SERIALIZABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def IDENTITY_INSERT(self):
            return self.getToken(tsqlParser.IDENTITY_INSERT, 0)

        def ANSI_NULLS(self):
            return self.getToken(tsqlParser.ANSI_NULLS, 0)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(tsqlParser.QUOTED_IDENTIFIER, 0)

        def ANSI_PADDING(self):
            return self.getToken(tsqlParser.ANSI_PADDING, 0)

        def STATISTICS(self):
            return self.getToken(tsqlParser.STATISTICS, 0)

        def TIME(self):
            return self.getToken(tsqlParser.TIME, 0)

        def IO(self):
            return self.getToken(tsqlParser.IO, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_set_special




    def set_special(self):

        localctx = tsqlParser.Set_specialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_set_special)
        self._la = 0 # Token type
        try:
            self.state = 2074
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2027
                self.match(tsqlParser.SET)
                self.state = 2028
                localctx.key = self.r_id()
                self.state = 2032
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 2029
                    localctx.value = self.r_id()
                    pass
                elif token in [tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                    self.state = 2030
                    self.constant_LOCAL_ID()
                    pass
                elif token in [tsqlParser.OFF, tsqlParser.ON]:
                    self.state = 2031
                    self.on_off()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2035
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
                if la_ == 1:
                    self.state = 2034
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2037
                self.match(tsqlParser.SET)
                self.state = 2038
                localctx.set_type = self.match(tsqlParser.TRANSACTION)
                self.state = 2039
                self.match(tsqlParser.ISOLATION)
                self.state = 2040
                self.match(tsqlParser.LEVEL)
                self.state = 2049
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
                if la_ == 1:
                    self.state = 2041
                    self.match(tsqlParser.READ)
                    self.state = 2042
                    self.match(tsqlParser.UNCOMMITTED)
                    pass

                elif la_ == 2:
                    self.state = 2043
                    self.match(tsqlParser.READ)
                    self.state = 2044
                    self.match(tsqlParser.COMMITTED)
                    pass

                elif la_ == 3:
                    self.state = 2045
                    self.match(tsqlParser.REPEATABLE)
                    self.state = 2046
                    self.match(tsqlParser.READ)
                    pass

                elif la_ == 4:
                    self.state = 2047
                    self.match(tsqlParser.SNAPSHOT)
                    pass

                elif la_ == 5:
                    self.state = 2048
                    self.match(tsqlParser.SERIALIZABLE)
                    pass


                self.state = 2052
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
                if la_ == 1:
                    self.state = 2051
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2054
                self.match(tsqlParser.SET)
                self.state = 2055
                localctx.set_type = self.match(tsqlParser.IDENTITY_INSERT)
                self.state = 2056
                self.table_name()
                self.state = 2057
                self.on_off()
                self.state = 2059
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
                if la_ == 1:
                    self.state = 2058
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2061
                self.match(tsqlParser.SET)
                self.state = 2062
                localctx.set_type = self.match(tsqlParser.ANSI_NULLS)
                self.state = 2063
                self.on_off()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2064
                self.match(tsqlParser.SET)
                self.state = 2065
                localctx.set_type = self.match(tsqlParser.QUOTED_IDENTIFIER)
                self.state = 2066
                self.on_off()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2067
                self.match(tsqlParser.SET)
                self.state = 2068
                localctx.set_type = self.match(tsqlParser.ANSI_PADDING)
                self.state = 2069
                self.on_off()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2070
                self.match(tsqlParser.SET)
                self.state = 2071
                localctx.set_type = self.match(tsqlParser.STATISTICS)
                self.state = 2072
                _la = self._input.LA(1)
                if not(_la==tsqlParser.IO or _la==tsqlParser.TIME):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2073
                self.on_off()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_LOCAL_IDContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_constant_LOCAL_ID




    def constant_LOCAL_ID(self):

        localctx = tsqlParser.Constant_LOCAL_IDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_constant_LOCAL_ID)
        try:
            self.state = 2078
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2076
                self.constant()
                pass
            elif token in [tsqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2077
                self.match(tsqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Binary_operator_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def STAR(self):
            return self.getToken(tsqlParser.STAR, 0)
        def DIVIDE(self):
            return self.getToken(tsqlParser.DIVIDE, 0)
        def MODULE(self):
            return self.getToken(tsqlParser.MODULE, 0)
        def PLUS(self):
            return self.getToken(tsqlParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(tsqlParser.MINUS, 0)
        def BIT_AND(self):
            return self.getToken(tsqlParser.BIT_AND, 0)
        def BIT_XOR(self):
            return self.getToken(tsqlParser.BIT_XOR, 0)
        def BIT_OR(self):
            return self.getToken(tsqlParser.BIT_OR, 0)
        def comparison_operator(self):
            return self.getTypedRuleContext(tsqlParser.Comparison_operatorContext,0)



    class Unary_operator_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def BIT_NOT(self):
            return self.getToken(tsqlParser.BIT_NOT, 0)
        def PLUS(self):
            return self.getToken(tsqlParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(tsqlParser.MINUS, 0)


    class Function_call_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)
        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)



    class Conversion_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def AT(self):
            return self.getToken(tsqlParser.AT, 0)
        def TIME(self):
            return self.getToken(tsqlParser.TIME, 0)
        def ZONE(self):
            return self.getToken(tsqlParser.ZONE, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)



    class Case_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.caseExpr = None # ExpressionContext
            self.elseExpr = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(tsqlParser.CASE, 0)
        def END(self):
            return self.getToken(tsqlParser.END, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def switch_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Switch_sectionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Switch_sectionContext,i)

        def ELSE(self):
            return self.getToken(tsqlParser.ELSE, 0)
        def switch_search_condition_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Switch_search_condition_sectionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Switch_search_condition_sectionContext,i)



    class Column_ref_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def full_column_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_column_nameContext,0)



    class String_agg_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def string_agg(self):
            return self.getTypedRuleContext(tsqlParser.String_aggContext,0)



    class Percentile_cont_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def percentile_cont(self):
            return self.getTypedRuleContext(tsqlParser.Percentile_contContext,0)



    class Primitive_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)
        def NULL_(self):
            return self.getToken(tsqlParser.NULL_, 0)
        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)
        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)



    class Bracket_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)


    class Subquery_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)
        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)


    class Over_clause_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)



    class Xml_method_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def DOT(self):
            return self.getToken(tsqlParser.DOT, 0)
        def xml_method_call(self):
            return self.getTypedRuleContext(tsqlParser.Xml_method_callContext,0)




    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = tsqlParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 208
        self.enterRecursionRule(localctx, 208, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2127
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2081
                self.match(tsqlParser.DEFAULT)
                pass

            elif la_ == 2:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2082
                self.match(tsqlParser.NULL_)
                pass

            elif la_ == 3:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2083
                self.match(tsqlParser.LOCAL_ID)
                pass

            elif la_ == 4:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2084
                self.constant()
                pass

            elif la_ == 5:
                localctx = tsqlParser.Function_call_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2085
                self.function_call()
                pass

            elif la_ == 6:
                localctx = tsqlParser.Case_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2086
                self.match(tsqlParser.CASE)
                self.state = 2087
                localctx.caseExpr = self.expression(0)
                self.state = 2089 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2088
                    self.switch_section()
                    self.state = 2091 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==tsqlParser.WHEN):
                        break

                self.state = 2095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ELSE:
                    self.state = 2093
                    self.match(tsqlParser.ELSE)
                    self.state = 2094
                    localctx.elseExpr = self.expression(0)


                self.state = 2097
                self.match(tsqlParser.END)
                pass

            elif la_ == 7:
                localctx = tsqlParser.Case_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2099
                self.match(tsqlParser.CASE)
                self.state = 2101 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2100
                    self.switch_search_condition_section()
                    self.state = 2103 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==tsqlParser.WHEN):
                        break

                self.state = 2107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ELSE:
                    self.state = 2105
                    self.match(tsqlParser.ELSE)
                    self.state = 2106
                    localctx.elseExpr = self.expression(0)


                self.state = 2109
                self.match(tsqlParser.END)
                pass

            elif la_ == 8:
                localctx = tsqlParser.Column_ref_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2111
                self.full_column_name()
                pass

            elif la_ == 9:
                localctx = tsqlParser.Bracket_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2112
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2113
                self.expression(0)
                self.state = 2114
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = tsqlParser.Subquery_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2116
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2117
                self.subquery()
                self.state = 2118
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 11:
                localctx = tsqlParser.Unary_operator_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2120
                localctx.op = self.match(tsqlParser.BIT_NOT)
                self.state = 2121
                self.expression(9)
                pass

            elif la_ == 12:
                localctx = tsqlParser.Unary_operator_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2122
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.PLUS or _la==tsqlParser.MINUS):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2123
                self.expression(7)
                pass

            elif la_ == 13:
                localctx = tsqlParser.Over_clause_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2124
                self.over_clause()
                pass

            elif la_ == 14:
                localctx = tsqlParser.Percentile_cont_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2125
                self.percentile_cont()
                pass

            elif la_ == 15:
                localctx = tsqlParser.String_agg_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2126
                self.string_agg()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2152
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,312,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2150
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
                    if la_ == 1:
                        localctx = tsqlParser.Conversion_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2129
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 2130
                        self.match(tsqlParser.AT)
                        self.state = 2131
                        self.match(tsqlParser.TIME)
                        self.state = 2132
                        self.match(tsqlParser.ZONE)
                        self.state = 2133
                        localctx.right = self.expression(16)
                        pass

                    elif la_ == 2:
                        localctx = tsqlParser.Binary_operator_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2134
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 2135
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 477)) & ~0x3f) == 0 and ((1 << (_la - 477)) & ((1 << (tsqlParser.STAR - 477)) | (1 << (tsqlParser.DIVIDE - 477)) | (1 << (tsqlParser.MODULE - 477)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2136
                        localctx.right = self.expression(9)
                        pass

                    elif la_ == 3:
                        localctx = tsqlParser.Binary_operator_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2137
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 2138
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 480)) & ~0x3f) == 0 and ((1 << (_la - 480)) & ((1 << (tsqlParser.PLUS - 480)) | (1 << (tsqlParser.MINUS - 480)) | (1 << (tsqlParser.BIT_OR - 480)) | (1 << (tsqlParser.BIT_AND - 480)) | (1 << (tsqlParser.BIT_XOR - 480)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2139
                        localctx.right = self.expression(7)
                        pass

                    elif la_ == 4:
                        localctx = tsqlParser.Binary_operator_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2140
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 2141
                        self.comparison_operator()
                        self.state = 2142
                        localctx.right = self.expression(6)
                        pass

                    elif la_ == 5:
                        localctx = tsqlParser.Function_call_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2144
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 2145
                        self.match(tsqlParser.COLLATE)
                        self.state = 2146
                        self.r_id()
                        pass

                    elif la_ == 6:
                        localctx = tsqlParser.Xml_method_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2147
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2148
                        self.match(tsqlParser.DOT)
                        self.state = 2149
                        self.xml_method_call()
                        pass

             
                self.state = 2154
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,312,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Xml_method_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table = None # R_idContext
            self.column = None # R_idContext

        def simple_xml_method_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_xml_method_nameContext,0)


        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LR_BRACKET)
            else:
                return self.getToken(tsqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.RR_BRACKET)
            else:
                return self.getToken(tsqlParser.RR_BRACKET, i)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def NODES(self):
            return self.getToken(tsqlParser.NODES, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_xml_method_call




    def xml_method_call(self):

        localctx = tsqlParser.Xml_method_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_xml_method_call)
        self._la = 0 # Token type
        try:
            self.state = 2174
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.VALUE, tsqlParser.EXIST, tsqlParser.QUERY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2155
                self.simple_xml_method_name()
                self.state = 2156
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.CASE) | (1 << tsqlParser.COALESCE) | (1 << tsqlParser.CONVERT) | (1 << tsqlParser.CURRENT_TIMESTAMP) | (1 << tsqlParser.CURRENT_USER) | (1 << tsqlParser.DEFAULT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (tsqlParser.EXP - 66)) | (1 << (tsqlParser.FILLFACTOR - 66)) | (1 << (tsqlParser.FORCESEEK - 66)) | (1 << (tsqlParser.IDENTITY - 66)) | (1 << (tsqlParser.IIF - 66)) | (1 << (tsqlParser.LEFT - 66)) | (1 << (tsqlParser.LOG - 66)) | (1 << (tsqlParser.LOG10 - 66)) | (1 << (tsqlParser.NEXT - 66)) | (1 << (tsqlParser.NULL_ - 66)) | (1 << (tsqlParser.NULLIF - 66)) | (1 << (tsqlParser.NUMERIC - 66)) | (1 << (tsqlParser.OVER - 66)))) != 0) or ((((_la - 152)) & ~0x3f) == 0 and ((1 << (_la - 152)) & ((1 << (tsqlParser.RIGHT - 152)) | (1 << (tsqlParser.SESSION_USER - 152)) | (1 << (tsqlParser.SIGN - 152)) | (1 << (tsqlParser.SYSTEM_USER - 152)) | (1 << (tsqlParser.TRY_CAST - 152)) | (1 << (tsqlParser.TRY_CONVERT - 152)) | (1 << (tsqlParser.TRY_PARSE - 152)) | (1 << (tsqlParser.VALUE - 152)) | (1 << (tsqlParser.ABSOLUTE - 152)) | (1 << (tsqlParser.APPLY - 152)))) != 0) or ((((_la - 217)) & ~0x3f) == 0 and ((1 << (_la - 217)) & ((1 << (tsqlParser.AUTO - 217)) | (1 << (tsqlParser.AVG - 217)) | (1 << (tsqlParser.BASE64 - 217)) | (1 << (tsqlParser.BINARY_CHECKSUM - 217)) | (1 << (tsqlParser.CALLER - 217)) | (1 << (tsqlParser.CAST - 217)) | (1 << (tsqlParser.CATCH - 217)) | (1 << (tsqlParser.CEILING - 217)) | (1 << (tsqlParser.CHECKSUM - 217)) | (1 << (tsqlParser.CHECKSUM_AGG - 217)) | (1 << (tsqlParser.COMMITTED - 217)) | (1 << (tsqlParser.CONCAT - 217)) | (1 << (tsqlParser.CONTROL - 217)) | (1 << (tsqlParser.COOKIE - 217)) | (1 << (tsqlParser.COS - 217)) | (1 << (tsqlParser.COUNT - 217)) | (1 << (tsqlParser.COUNT_BIG - 217)) | (1 << (tsqlParser.DATE - 217)) | (1 << (tsqlParser.DATEADD - 217)) | (1 << (tsqlParser.DATEDIFF - 217)) | (1 << (tsqlParser.DATENAME - 217)) | (1 << (tsqlParser.DATEPART - 217)) | (1 << (tsqlParser.DATETIMEOFFSETFROMPARTS - 217)) | (1 << (tsqlParser.DELAY - 217)) | (1 << (tsqlParser.DELETED - 217)) | (1 << (tsqlParser.DENSE_RANK - 217)) | (1 << (tsqlParser.DISABLE - 217)) | (1 << (tsqlParser.DYNAMIC - 217)) | (1 << (tsqlParser.ENCRYPTION - 217)) | (1 << (tsqlParser.EXIST - 217)) | (1 << (tsqlParser.EXPAND - 217)) | (1 << (tsqlParser.FAST - 217)) | (1 << (tsqlParser.FAST_FORWARD - 217)))) != 0) or ((((_la - 281)) & ~0x3f) == 0 and ((1 << (_la - 281)) & ((1 << (tsqlParser.FIRST - 281)) | (1 << (tsqlParser.FIRST_VALUE - 281)) | (1 << (tsqlParser.FLOOR - 281)) | (1 << (tsqlParser.FOLLOWING - 281)) | (1 << (tsqlParser.FORCE - 281)) | (1 << (tsqlParser.FORCED - 281)) | (1 << (tsqlParser.FORWARD_ONLY - 281)) | (1 << (tsqlParser.FULLSCAN - 281)) | (1 << (tsqlParser.GLOBAL - 281)) | (1 << (tsqlParser.GROUPING - 281)) | (1 << (tsqlParser.GROUPING_ID - 281)) | (1 << (tsqlParser.HASH - 281)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 281)) | (1 << (tsqlParser.IMPERSONATE - 281)) | (1 << (tsqlParser.INSENSITIVE - 281)) | (1 << (tsqlParser.INSERTED - 281)) | (1 << (tsqlParser.ISOLATION - 281)) | (1 << (tsqlParser.IO - 281)) | (1 << (tsqlParser.KEEP - 281)) | (1 << (tsqlParser.KEEPFIXED - 281)) | (1 << (tsqlParser.KEYSET - 281)) | (1 << (tsqlParser.LAG - 281)) | (1 << (tsqlParser.LAST - 281)) | (1 << (tsqlParser.LAST_VALUE - 281)) | (1 << (tsqlParser.LEAD - 281)) | (1 << (tsqlParser.LEVEL - 281)) | (1 << (tsqlParser.LOCAL - 281)) | (1 << (tsqlParser.LOCK_ESCALATION - 281)) | (1 << (tsqlParser.LOGIN - 281)) | (1 << (tsqlParser.LOOP - 281)) | (1 << (tsqlParser.MARK - 281)) | (1 << (tsqlParser.MAX - 281)) | (1 << (tsqlParser.MAXDOP - 281)) | (1 << (tsqlParser.MAXRECURSION - 281)) | (1 << (tsqlParser.MIN - 281)) | (1 << (tsqlParser.MIN_ACTIVE_ROWVERSION - 281)) | (1 << (tsqlParser.MODIFY - 281)) | (1 << (tsqlParser.NAME - 281)) | (1 << (tsqlParser.NOCOUNT - 281)) | (1 << (tsqlParser.NODES - 281)) | (1 << (tsqlParser.NOEXPAND - 281)) | (1 << (tsqlParser.NORECOMPUTE - 281)) | (1 << (tsqlParser.NTILE - 281)) | (1 << (tsqlParser.NUMBER - 281)))) != 0) or ((((_la - 347)) & ~0x3f) == 0 and ((1 << (_la - 347)) & ((1 << (tsqlParser.OFFSET - 347)) | (1 << (tsqlParser.ONLINE - 347)) | (1 << (tsqlParser.ONLY - 347)) | (1 << (tsqlParser.OPTIMISTIC - 347)) | (1 << (tsqlParser.OPTIMIZE - 347)) | (1 << (tsqlParser.OUT - 347)) | (1 << (tsqlParser.OUTPUT - 347)) | (1 << (tsqlParser.OWNER - 347)) | (1 << (tsqlParser.PARAMETERIZATION - 347)) | (1 << (tsqlParser.PARSE - 347)) | (1 << (tsqlParser.PARTITION - 347)) | (1 << (tsqlParser.PATH - 347)) | (1 << (tsqlParser.PERCENTILE_CONT - 347)) | (1 << (tsqlParser.POWER - 347)) | (1 << (tsqlParser.PRECEDING - 347)) | (1 << (tsqlParser.PRIOR - 347)) | (1 << (tsqlParser.PRIVILEGES - 347)) | (1 << (tsqlParser.QUERY - 347)) | (1 << (tsqlParser.RANGE - 347)) | (1 << (tsqlParser.RANK - 347)) | (1 << (tsqlParser.READONLY - 347)) | (1 << (tsqlParser.READ_ONLY - 347)) | (1 << (tsqlParser.RECOMPILE - 347)) | (1 << (tsqlParser.RELATIVE - 347)) | (1 << (tsqlParser.REMOTE - 347)) | (1 << (tsqlParser.REPEATABLE - 347)) | (1 << (tsqlParser.ROBUST - 347)) | (1 << (tsqlParser.ROOT - 347)) | (1 << (tsqlParser.ROUND - 347)) | (1 << (tsqlParser.ROW - 347)) | (1 << (tsqlParser.ROWGUID - 347)) | (1 << (tsqlParser.ROWS - 347)) | (1 << (tsqlParser.ROW_NUMBER - 347)) | (1 << (tsqlParser.SAMPLE - 347)) | (1 << (tsqlParser.SCHEMABINDING - 347)) | (1 << (tsqlParser.SCROLL - 347)) | (1 << (tsqlParser.SCROLL_LOCKS - 347)) | (1 << (tsqlParser.SELF - 347)) | (1 << (tsqlParser.SERIALIZABLE - 347)) | (1 << (tsqlParser.SIMPLE - 347)) | (1 << (tsqlParser.SIN - 347)) | (1 << (tsqlParser.SIZE - 347)) | (1 << (tsqlParser.SNAPSHOT - 347)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 347)) | (1 << (tsqlParser.STATIC - 347)) | (1 << (tsqlParser.STATS_STREAM - 347)) | (1 << (tsqlParser.STDEV - 347)) | (1 << (tsqlParser.STDEVP - 347)) | (1 << (tsqlParser.STRING_AGG - 347)) | (1 << (tsqlParser.STRING_SPLIT - 347)) | (1 << (tsqlParser.SUM - 347)))) != 0) or ((((_la - 411)) & ~0x3f) == 0 and ((1 << (_la - 411)) & ((1 << (tsqlParser.SQRT - 411)) | (1 << (tsqlParser.SQUARE - 411)) | (1 << (tsqlParser.TAN - 411)) | (1 << (tsqlParser.TEXTIMAGE_ON - 411)) | (1 << (tsqlParser.THROW - 411)) | (1 << (tsqlParser.TIES - 411)) | (1 << (tsqlParser.TIME - 411)) | (1 << (tsqlParser.TRY - 411)) | (1 << (tsqlParser.TYPE - 411)) | (1 << (tsqlParser.TYPE_WARNING - 411)) | (1 << (tsqlParser.UNBOUNDED - 411)) | (1 << (tsqlParser.UNCOMMITTED - 411)) | (1 << (tsqlParser.UNKNOWN - 411)) | (1 << (tsqlParser.USING - 411)) | (1 << (tsqlParser.VAR - 411)) | (1 << (tsqlParser.VARP - 411)) | (1 << (tsqlParser.VIEWS - 411)) | (1 << (tsqlParser.VIEW_METADATA - 411)) | (1 << (tsqlParser.WORK - 411)) | (1 << (tsqlParser.XML - 411)) | (1 << (tsqlParser.XMLNAMESPACES - 411)) | (1 << (tsqlParser.ZONE - 411)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 411)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 411)) | (1 << (tsqlParser.LOCAL_ID - 411)) | (1 << (tsqlParser.DECIMAL - 411)) | (1 << (tsqlParser.ID - 411)) | (1 << (tsqlParser.STRING - 411)) | (1 << (tsqlParser.BINARY - 411)) | (1 << (tsqlParser.FLOAT - 411)) | (1 << (tsqlParser.REAL - 411)) | (1 << (tsqlParser.DOLLAR - 411)) | (1 << (tsqlParser.LR_BRACKET - 411)))) != 0) or ((((_la - 480)) & ~0x3f) == 0 and ((1 << (_la - 480)) & ((1 << (tsqlParser.PLUS - 480)) | (1 << (tsqlParser.MINUS - 480)) | (1 << (tsqlParser.BIT_NOT - 480)))) != 0):
                    self.state = 2157
                    self.expression_list()


                self.state = 2160
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.NODES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2162
                self.match(tsqlParser.NODES)
                self.state = 2163
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2165
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.CASE) | (1 << tsqlParser.COALESCE) | (1 << tsqlParser.CONVERT) | (1 << tsqlParser.CURRENT_TIMESTAMP) | (1 << tsqlParser.CURRENT_USER) | (1 << tsqlParser.DEFAULT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (tsqlParser.EXP - 66)) | (1 << (tsqlParser.FILLFACTOR - 66)) | (1 << (tsqlParser.FORCESEEK - 66)) | (1 << (tsqlParser.IDENTITY - 66)) | (1 << (tsqlParser.IIF - 66)) | (1 << (tsqlParser.LEFT - 66)) | (1 << (tsqlParser.LOG - 66)) | (1 << (tsqlParser.LOG10 - 66)) | (1 << (tsqlParser.NEXT - 66)) | (1 << (tsqlParser.NULL_ - 66)) | (1 << (tsqlParser.NULLIF - 66)) | (1 << (tsqlParser.NUMERIC - 66)) | (1 << (tsqlParser.OVER - 66)))) != 0) or ((((_la - 152)) & ~0x3f) == 0 and ((1 << (_la - 152)) & ((1 << (tsqlParser.RIGHT - 152)) | (1 << (tsqlParser.SESSION_USER - 152)) | (1 << (tsqlParser.SIGN - 152)) | (1 << (tsqlParser.SYSTEM_USER - 152)) | (1 << (tsqlParser.TRY_CAST - 152)) | (1 << (tsqlParser.TRY_CONVERT - 152)) | (1 << (tsqlParser.TRY_PARSE - 152)) | (1 << (tsqlParser.VALUE - 152)) | (1 << (tsqlParser.ABSOLUTE - 152)) | (1 << (tsqlParser.APPLY - 152)))) != 0) or ((((_la - 217)) & ~0x3f) == 0 and ((1 << (_la - 217)) & ((1 << (tsqlParser.AUTO - 217)) | (1 << (tsqlParser.AVG - 217)) | (1 << (tsqlParser.BASE64 - 217)) | (1 << (tsqlParser.BINARY_CHECKSUM - 217)) | (1 << (tsqlParser.CALLER - 217)) | (1 << (tsqlParser.CAST - 217)) | (1 << (tsqlParser.CATCH - 217)) | (1 << (tsqlParser.CEILING - 217)) | (1 << (tsqlParser.CHECKSUM - 217)) | (1 << (tsqlParser.CHECKSUM_AGG - 217)) | (1 << (tsqlParser.COMMITTED - 217)) | (1 << (tsqlParser.CONCAT - 217)) | (1 << (tsqlParser.CONTROL - 217)) | (1 << (tsqlParser.COOKIE - 217)) | (1 << (tsqlParser.COS - 217)) | (1 << (tsqlParser.COUNT - 217)) | (1 << (tsqlParser.COUNT_BIG - 217)) | (1 << (tsqlParser.DATE - 217)) | (1 << (tsqlParser.DATEADD - 217)) | (1 << (tsqlParser.DATEDIFF - 217)) | (1 << (tsqlParser.DATENAME - 217)) | (1 << (tsqlParser.DATEPART - 217)) | (1 << (tsqlParser.DATETIMEOFFSETFROMPARTS - 217)) | (1 << (tsqlParser.DELAY - 217)) | (1 << (tsqlParser.DELETED - 217)) | (1 << (tsqlParser.DENSE_RANK - 217)) | (1 << (tsqlParser.DISABLE - 217)) | (1 << (tsqlParser.DYNAMIC - 217)) | (1 << (tsqlParser.ENCRYPTION - 217)) | (1 << (tsqlParser.EXIST - 217)) | (1 << (tsqlParser.EXPAND - 217)) | (1 << (tsqlParser.FAST - 217)) | (1 << (tsqlParser.FAST_FORWARD - 217)))) != 0) or ((((_la - 281)) & ~0x3f) == 0 and ((1 << (_la - 281)) & ((1 << (tsqlParser.FIRST - 281)) | (1 << (tsqlParser.FIRST_VALUE - 281)) | (1 << (tsqlParser.FLOOR - 281)) | (1 << (tsqlParser.FOLLOWING - 281)) | (1 << (tsqlParser.FORCE - 281)) | (1 << (tsqlParser.FORCED - 281)) | (1 << (tsqlParser.FORWARD_ONLY - 281)) | (1 << (tsqlParser.FULLSCAN - 281)) | (1 << (tsqlParser.GLOBAL - 281)) | (1 << (tsqlParser.GROUPING - 281)) | (1 << (tsqlParser.GROUPING_ID - 281)) | (1 << (tsqlParser.HASH - 281)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 281)) | (1 << (tsqlParser.IMPERSONATE - 281)) | (1 << (tsqlParser.INSENSITIVE - 281)) | (1 << (tsqlParser.INSERTED - 281)) | (1 << (tsqlParser.ISOLATION - 281)) | (1 << (tsqlParser.IO - 281)) | (1 << (tsqlParser.KEEP - 281)) | (1 << (tsqlParser.KEEPFIXED - 281)) | (1 << (tsqlParser.KEYSET - 281)) | (1 << (tsqlParser.LAG - 281)) | (1 << (tsqlParser.LAST - 281)) | (1 << (tsqlParser.LAST_VALUE - 281)) | (1 << (tsqlParser.LEAD - 281)) | (1 << (tsqlParser.LEVEL - 281)) | (1 << (tsqlParser.LOCAL - 281)) | (1 << (tsqlParser.LOCK_ESCALATION - 281)) | (1 << (tsqlParser.LOGIN - 281)) | (1 << (tsqlParser.LOOP - 281)) | (1 << (tsqlParser.MARK - 281)) | (1 << (tsqlParser.MAX - 281)) | (1 << (tsqlParser.MAXDOP - 281)) | (1 << (tsqlParser.MAXRECURSION - 281)) | (1 << (tsqlParser.MIN - 281)) | (1 << (tsqlParser.MIN_ACTIVE_ROWVERSION - 281)) | (1 << (tsqlParser.MODIFY - 281)) | (1 << (tsqlParser.NAME - 281)) | (1 << (tsqlParser.NOCOUNT - 281)) | (1 << (tsqlParser.NODES - 281)) | (1 << (tsqlParser.NOEXPAND - 281)) | (1 << (tsqlParser.NORECOMPUTE - 281)) | (1 << (tsqlParser.NTILE - 281)) | (1 << (tsqlParser.NUMBER - 281)))) != 0) or ((((_la - 347)) & ~0x3f) == 0 and ((1 << (_la - 347)) & ((1 << (tsqlParser.OFFSET - 347)) | (1 << (tsqlParser.ONLINE - 347)) | (1 << (tsqlParser.ONLY - 347)) | (1 << (tsqlParser.OPTIMISTIC - 347)) | (1 << (tsqlParser.OPTIMIZE - 347)) | (1 << (tsqlParser.OUT - 347)) | (1 << (tsqlParser.OUTPUT - 347)) | (1 << (tsqlParser.OWNER - 347)) | (1 << (tsqlParser.PARAMETERIZATION - 347)) | (1 << (tsqlParser.PARSE - 347)) | (1 << (tsqlParser.PARTITION - 347)) | (1 << (tsqlParser.PATH - 347)) | (1 << (tsqlParser.PERCENTILE_CONT - 347)) | (1 << (tsqlParser.POWER - 347)) | (1 << (tsqlParser.PRECEDING - 347)) | (1 << (tsqlParser.PRIOR - 347)) | (1 << (tsqlParser.PRIVILEGES - 347)) | (1 << (tsqlParser.QUERY - 347)) | (1 << (tsqlParser.RANGE - 347)) | (1 << (tsqlParser.RANK - 347)) | (1 << (tsqlParser.READONLY - 347)) | (1 << (tsqlParser.READ_ONLY - 347)) | (1 << (tsqlParser.RECOMPILE - 347)) | (1 << (tsqlParser.RELATIVE - 347)) | (1 << (tsqlParser.REMOTE - 347)) | (1 << (tsqlParser.REPEATABLE - 347)) | (1 << (tsqlParser.ROBUST - 347)) | (1 << (tsqlParser.ROOT - 347)) | (1 << (tsqlParser.ROUND - 347)) | (1 << (tsqlParser.ROW - 347)) | (1 << (tsqlParser.ROWGUID - 347)) | (1 << (tsqlParser.ROWS - 347)) | (1 << (tsqlParser.ROW_NUMBER - 347)) | (1 << (tsqlParser.SAMPLE - 347)) | (1 << (tsqlParser.SCHEMABINDING - 347)) | (1 << (tsqlParser.SCROLL - 347)) | (1 << (tsqlParser.SCROLL_LOCKS - 347)) | (1 << (tsqlParser.SELF - 347)) | (1 << (tsqlParser.SERIALIZABLE - 347)) | (1 << (tsqlParser.SIMPLE - 347)) | (1 << (tsqlParser.SIN - 347)) | (1 << (tsqlParser.SIZE - 347)) | (1 << (tsqlParser.SNAPSHOT - 347)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 347)) | (1 << (tsqlParser.STATIC - 347)) | (1 << (tsqlParser.STATS_STREAM - 347)) | (1 << (tsqlParser.STDEV - 347)) | (1 << (tsqlParser.STDEVP - 347)) | (1 << (tsqlParser.STRING_AGG - 347)) | (1 << (tsqlParser.STRING_SPLIT - 347)) | (1 << (tsqlParser.SUM - 347)))) != 0) or ((((_la - 411)) & ~0x3f) == 0 and ((1 << (_la - 411)) & ((1 << (tsqlParser.SQRT - 411)) | (1 << (tsqlParser.SQUARE - 411)) | (1 << (tsqlParser.TAN - 411)) | (1 << (tsqlParser.TEXTIMAGE_ON - 411)) | (1 << (tsqlParser.THROW - 411)) | (1 << (tsqlParser.TIES - 411)) | (1 << (tsqlParser.TIME - 411)) | (1 << (tsqlParser.TRY - 411)) | (1 << (tsqlParser.TYPE - 411)) | (1 << (tsqlParser.TYPE_WARNING - 411)) | (1 << (tsqlParser.UNBOUNDED - 411)) | (1 << (tsqlParser.UNCOMMITTED - 411)) | (1 << (tsqlParser.UNKNOWN - 411)) | (1 << (tsqlParser.USING - 411)) | (1 << (tsqlParser.VAR - 411)) | (1 << (tsqlParser.VARP - 411)) | (1 << (tsqlParser.VIEWS - 411)) | (1 << (tsqlParser.VIEW_METADATA - 411)) | (1 << (tsqlParser.WORK - 411)) | (1 << (tsqlParser.XML - 411)) | (1 << (tsqlParser.XMLNAMESPACES - 411)) | (1 << (tsqlParser.ZONE - 411)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 411)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 411)) | (1 << (tsqlParser.LOCAL_ID - 411)) | (1 << (tsqlParser.DECIMAL - 411)) | (1 << (tsqlParser.ID - 411)) | (1 << (tsqlParser.STRING - 411)) | (1 << (tsqlParser.BINARY - 411)) | (1 << (tsqlParser.FLOAT - 411)) | (1 << (tsqlParser.REAL - 411)) | (1 << (tsqlParser.DOLLAR - 411)) | (1 << (tsqlParser.LR_BRACKET - 411)))) != 0) or ((((_la - 480)) & ~0x3f) == 0 and ((1 << (_la - 480)) & ((1 << (tsqlParser.PLUS - 480)) | (1 << (tsqlParser.MINUS - 480)) | (1 << (tsqlParser.BIT_NOT - 480)))) != 0):
                    self.state = 2164
                    self.expression_list()


                self.state = 2167
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2168
                self.match(tsqlParser.AS)
                self.state = 2169
                localctx.table = self.r_id()
                self.state = 2170
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2171
                localctx.column = self.r_id()
                self.state = 2172
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_xml_method_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUERY(self):
            return self.getToken(tsqlParser.QUERY, 0)

        def VALUE(self):
            return self.getToken(tsqlParser.VALUE, 0)

        def EXIST(self):
            return self.getToken(tsqlParser.EXIST, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_simple_xml_method_name




    def simple_xml_method_name(self):

        localctx = tsqlParser.Simple_xml_method_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_simple_xml_method_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2176
            _la = self._input.LA(1)
            if not(_la==tsqlParser.VALUE or _la==tsqlParser.EXIST or _la==tsqlParser.QUERY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_(self):
            return self.getToken(tsqlParser.NULL_, 0)

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(tsqlParser.Constant_expressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_constant_expression




    def constant_expression(self):

        localctx = tsqlParser.Constant_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_constant_expression)
        try:
            self.state = 2186
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.NULL_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2178
                self.match(tsqlParser.NULL_)
                pass
            elif token in [tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2179
                self.constant()
                pass
            elif token in [tsqlParser.COALESCE, tsqlParser.CONVERT, tsqlParser.CURRENT_TIMESTAMP, tsqlParser.CURRENT_USER, tsqlParser.EXP, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.IDENTITY, tsqlParser.IIF, tsqlParser.LEFT, tsqlParser.LOG, tsqlParser.LOG10, tsqlParser.NEXT, tsqlParser.NULLIF, tsqlParser.NUMERIC, tsqlParser.RIGHT, tsqlParser.SESSION_USER, tsqlParser.SIGN, tsqlParser.SYSTEM_USER, tsqlParser.TRY_CAST, tsqlParser.TRY_CONVERT, tsqlParser.TRY_PARSE, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.BINARY_CHECKSUM, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CEILING, tsqlParser.CHECKSUM, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COS, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DATEADD, tsqlParser.DATEDIFF, tsqlParser.DATENAME, tsqlParser.DATEPART, tsqlParser.DATETIMEOFFSETFROMPARTS, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FLOOR, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MIN_ACTIVE_ROWVERSION, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARSE, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.POWER, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROUND, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIN, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.STRING_SPLIT, tsqlParser.SUM, tsqlParser.SQRT, tsqlParser.SQUARE, tsqlParser.TAN, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2180
                self.function_call()
                pass
            elif token in [tsqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2181
                self.match(tsqlParser.LOCAL_ID)
                pass
            elif token in [tsqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2182
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2183
                self.constant_expression()
                self.state = 2184
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_subquery




    def subquery(self):

        localctx = tsqlParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2188
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Common_table_expressionContext,i)


        def XMLNAMESPACES(self):
            return self.getToken(tsqlParser.XMLNAMESPACES, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_with_expression




    def with_expression(self):

        localctx = tsqlParser.With_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_with_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2190
            self.match(tsqlParser.WITH)
            self.state = 2193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
            if la_ == 1:
                self.state = 2191
                self.match(tsqlParser.XMLNAMESPACES)
                self.state = 2192
                self.match(tsqlParser.COMMA)


            self.state = 2195
            self.common_table_expression()
            self.state = 2200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2196
                self.match(tsqlParser.COMMA)
                self.state = 2197
                self.common_table_expression()
                self.state = 2202
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expression_name = None # R_idContext

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LR_BRACKET)
            else:
                return self.getToken(tsqlParser.LR_BRACKET, i)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.RR_BRACKET)
            else:
                return self.getToken(tsqlParser.RR_BRACKET, i)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_common_table_expression




    def common_table_expression(self):

        localctx = tsqlParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2203
            localctx.expression_name = self.r_id()
            self.state = 2208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.LR_BRACKET:
                self.state = 2204
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2205
                self.column_name_list()
                self.state = 2206
                self.match(tsqlParser.RR_BRACKET)


            self.state = 2210
            self.match(tsqlParser.AS)
            self.state = 2211
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2212
            self.select_statement()
            self.state = 2213
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.udt_column_name = None # R_idContext
            self.method_name = None # R_idContext

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def full_column_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_column_nameContext,0)


        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def assignment_operator(self):
            return self.getTypedRuleContext(tsqlParser.Assignment_operatorContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def DOT(self):
            return self.getToken(tsqlParser.DOT, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_update_elem




    def update_elem(self):

        localctx = tsqlParser.Update_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_update_elem)
        try:
            self.state = 2231
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2217
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 2215
                    self.full_column_name()
                    pass
                elif token in [tsqlParser.LOCAL_ID]:
                    self.state = 2216
                    localctx.name = self.match(tsqlParser.LOCAL_ID)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2221
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.EQUAL]:
                    self.state = 2219
                    self.match(tsqlParser.EQUAL)
                    pass
                elif token in [tsqlParser.PLUS_ASSIGN, tsqlParser.MINUS_ASSIGN, tsqlParser.MULT_ASSIGN, tsqlParser.DIV_ASSIGN, tsqlParser.MOD_ASSIGN, tsqlParser.AND_ASSIGN, tsqlParser.XOR_ASSIGN, tsqlParser.OR_ASSIGN]:
                    self.state = 2220
                    self.assignment_operator()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2223
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2224
                localctx.udt_column_name = self.r_id()
                self.state = 2225
                self.match(tsqlParser.DOT)
                self.state = 2226
                localctx.method_name = self.r_id()
                self.state = 2227
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2228
                self.expression_list()
                self.state = 2229
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Search_condition_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_conditionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_search_condition_list




    def search_condition_list(self):

        localctx = tsqlParser.Search_condition_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_search_condition_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2233
            self.search_condition(0)
            self.state = 2238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2234
                self.match(tsqlParser.COMMA)
                self.state = 2235
                self.search_condition(0)
                self.state = 2240
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Search_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_search_condition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Search_cond_orContext(Search_conditionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Search_conditionContext
            super().__init__(parser)
            self.left = None # Search_conditionContext
            self.op = None # Token
            self.right = None # Search_conditionContext
            self.copyFrom(ctx)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_conditionContext,i)

        def OR(self):
            return self.getToken(tsqlParser.OR, 0)


    class Search_cond_predContext(Search_conditionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Search_conditionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(tsqlParser.PredicateContext,0)



    class Search_cond_andContext(Search_conditionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Search_conditionContext
            super().__init__(parser)
            self.left = None # Search_conditionContext
            self.op = None # Token
            self.right = None # Search_conditionContext
            self.copyFrom(ctx)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_conditionContext,i)

        def AND(self):
            return self.getToken(tsqlParser.AND, 0)



    def search_condition(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = tsqlParser.Search_conditionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 226
        self.enterRecursionRule(localctx, 226, self.RULE_search_condition, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = tsqlParser.Search_cond_predContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2242
            self.predicate()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2252
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,325,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2250
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
                    if la_ == 1:
                        localctx = tsqlParser.Search_cond_andContext(self, tsqlParser.Search_conditionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_search_condition)
                        self.state = 2244
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2245
                        localctx.op = self.match(tsqlParser.AND)
                        self.state = 2246
                        localctx.right = self.search_condition(4)
                        pass

                    elif la_ == 2:
                        localctx = tsqlParser.Search_cond_orContext(self, tsqlParser.Search_conditionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_search_condition)
                        self.state = 2247
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2248
                        localctx.op = self.match(tsqlParser.OR)
                        self.state = 2249
                        localctx.right = self.search_condition(3)
                        pass

             
                self.state = 2254
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,325,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_predicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Binary_in_expressionContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def IN(self):
            return self.getToken(tsqlParser.IN, 0)
        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)


    class Unary_operator_expression2Context(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.op = None # Token
            self.expr = None # SubqueryContext
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)
        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)
        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)



    class Binary_mod_expressionContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right_1 = None # ExpressionContext
            self.right_2 = None # ExpressionContext
            self.copyFrom(ctx)

        def AND(self):
            return self.getToken(tsqlParser.AND, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def BETWEEN(self):
            return self.getToken(tsqlParser.BETWEEN, 0)
        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)
        def LIKE(self):
            return self.getToken(tsqlParser.LIKE, 0)
        def ESCAPE(self):
            return self.getToken(tsqlParser.ESCAPE, 0)


    class Unary_operator_expression3Context(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.op = None # Token
            self.expr = None # PredicateContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)
        def predicate(self):
            return self.getTypedRuleContext(tsqlParser.PredicateContext,0)



    class Bracket_search_expressionContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)
        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)


    class Sublink_expressionContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.test_expr = None # ExpressionContext
            self.op = None # Comparison_operatorContext
            self.pref = None # Token
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)
        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def comparison_operator(self):
            return self.getTypedRuleContext(tsqlParser.Comparison_operatorContext,0)

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)
        def SOME(self):
            return self.getToken(tsqlParser.SOME, 0)
        def ANY(self):
            return self.getToken(tsqlParser.ANY, 0)


    class Binary_operator_expression3Context(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # Null_notnullContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def IS(self):
            return self.getToken(tsqlParser.IS, 0)
        def null_notnull(self):
            return self.getTypedRuleContext(tsqlParser.Null_notnullContext,0)



    class Binary_operator_expression2Context(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Comparison_operatorContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def comparison_operator(self):
            return self.getTypedRuleContext(tsqlParser.Comparison_operatorContext,0)



    class Decimal_expressionContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)



    def predicate(self):

        localctx = tsqlParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 2313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Unary_operator_expression3Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2255
                localctx.op = self.match(tsqlParser.NOT)
                self.state = 2256
                localctx.expr = self.predicate()
                pass

            elif la_ == 2:
                localctx = tsqlParser.Unary_operator_expression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2257
                localctx.op = self.match(tsqlParser.EXISTS)
                self.state = 2258
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2259
                localctx.expr = self.subquery()
                self.state = 2260
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                localctx = tsqlParser.Binary_operator_expression2Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2262
                localctx.left = self.expression(0)
                self.state = 2263
                localctx.op = self.comparison_operator()
                self.state = 2264
                localctx.right = self.expression(0)
                pass

            elif la_ == 4:
                localctx = tsqlParser.Sublink_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2266
                localctx.test_expr = self.expression(0)
                self.state = 2267
                localctx.op = self.comparison_operator()
                self.state = 2268
                localctx.pref = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ALL or _la==tsqlParser.ANY or _la==tsqlParser.SOME):
                    localctx.pref = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2269
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2270
                self.subquery()
                self.state = 2271
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                localctx = tsqlParser.Binary_mod_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2273
                localctx.left = self.expression(0)
                self.state = 2275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 2274
                    self.match(tsqlParser.NOT)


                self.state = 2277
                localctx.op = self.match(tsqlParser.BETWEEN)
                self.state = 2278
                localctx.right_1 = self.expression(0)
                self.state = 2279
                self.match(tsqlParser.AND)
                self.state = 2280
                localctx.right_2 = self.expression(0)
                pass

            elif la_ == 6:
                localctx = tsqlParser.Binary_in_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2282
                localctx.left = self.expression(0)
                self.state = 2284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 2283
                    self.match(tsqlParser.NOT)


                self.state = 2286
                localctx.op = self.match(tsqlParser.IN)
                self.state = 2287
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2290
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
                if la_ == 1:
                    self.state = 2288
                    self.subquery()
                    pass

                elif la_ == 2:
                    self.state = 2289
                    self.expression_list()
                    pass


                self.state = 2292
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 7:
                localctx = tsqlParser.Binary_mod_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2294
                localctx.left = self.expression(0)
                self.state = 2296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 2295
                    self.match(tsqlParser.NOT)


                self.state = 2298
                localctx.op = self.match(tsqlParser.LIKE)
                self.state = 2299
                localctx.right_1 = self.expression(0)
                self.state = 2302
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
                if la_ == 1:
                    self.state = 2300
                    self.match(tsqlParser.ESCAPE)
                    self.state = 2301
                    localctx.right_2 = self.expression(0)


                pass

            elif la_ == 8:
                localctx = tsqlParser.Binary_operator_expression3Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2304
                localctx.left = self.expression(0)
                self.state = 2305
                localctx.op = self.match(tsqlParser.IS)
                self.state = 2306
                localctx.right = self.null_notnull()
                pass

            elif la_ == 9:
                localctx = tsqlParser.Bracket_search_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2308
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2309
                self.search_condition(0)
                self.state = 2310
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = tsqlParser.Decimal_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 2312
                self.match(tsqlParser.DECIMAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_query_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Bracket_query_expressionContext(Query_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Query_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)
        def query_expression(self):
            return self.getTypedRuleContext(tsqlParser.Query_expressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)


    class Query_specification_expressionContext(Query_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Query_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query_specification(self):
            return self.getTypedRuleContext(tsqlParser.Query_specificationContext,0)



    class Union_query_expressionContext(Query_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Query_expressionContext
            super().__init__(parser)
            self.left = None # Query_expressionContext
            self.op = None # Union_opContext
            self.right = None # Query_expressionContext
            self.copyFrom(ctx)

        def query_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Query_expressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Query_expressionContext,i)

        def union_op(self):
            return self.getTypedRuleContext(tsqlParser.Union_opContext,0)




    def query_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = tsqlParser.Query_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 230
        self.enterRecursionRule(localctx, 230, self.RULE_query_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2321
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.LR_BRACKET]:
                localctx = tsqlParser.Bracket_query_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2316
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2317
                self.query_expression(0)
                self.state = 2318
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.SELECT]:
                localctx = tsqlParser.Query_specification_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2320
                self.query_specification()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2329
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,333,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = tsqlParser.Union_query_expressionContext(self, tsqlParser.Query_expressionContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_query_expression)
                    self.state = 2323
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 2324
                    localctx.op = self.union_op()
                    self.state = 2325
                    localctx.right = self.query_expression(3) 
                self.state = 2331
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,333,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Union_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(tsqlParser.UNION, 0)

        def EXCEPT(self):
            return self.getToken(tsqlParser.EXCEPT, 0)

        def INTERSECT(self):
            return self.getToken(tsqlParser.INTERSECT, 0)

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_union_op




    def union_op(self):

        localctx = tsqlParser.Union_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_union_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2338
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.UNION]:
                self.state = 2332
                self.match(tsqlParser.UNION)
                self.state = 2334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ALL:
                    self.state = 2333
                    self.match(tsqlParser.ALL)


                pass
            elif token in [tsqlParser.EXCEPT]:
                self.state = 2336
                self.match(tsqlParser.EXCEPT)
                pass
            elif token in [tsqlParser.INTERSECT]:
                self.state = 2337
                self.match(tsqlParser.INTERSECT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cross_apply_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def cross_apply_expression(self):
            return self.getTypedRuleContext(tsqlParser.Cross_apply_expressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def query_expression(self):
            return self.getTypedRuleContext(tsqlParser.Query_expressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def table_value_constructor(self):
            return self.getTypedRuleContext(tsqlParser.Table_value_constructorContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_cross_apply_expression




    def cross_apply_expression(self):

        localctx = tsqlParser.Cross_apply_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_cross_apply_expression)
        try:
            self.state = 2347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2340
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2341
                self.cross_apply_expression()
                self.state = 2342
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2344
                self.query_expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2345
                self.expression(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2346
                self.table_value_constructor()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pref = None # Token
            self.where = None # Search_conditionContext
            self.having = None # Search_conditionContext

        def SELECT(self):
            return self.getToken(tsqlParser.SELECT, 0)

        def select_list(self):
            return self.getTypedRuleContext(tsqlParser.Select_listContext,0)


        def top_clause(self):
            return self.getTypedRuleContext(tsqlParser.Top_clauseContext,0)


        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def table_sources(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourcesContext,0)


        def CROSS(self):
            return self.getToken(tsqlParser.CROSS, 0)

        def APPLY(self):
            return self.getToken(tsqlParser.APPLY, 0)

        def cross_apply_expression(self):
            return self.getTypedRuleContext(tsqlParser.Cross_apply_expressionContext,0)


        def WHERE(self):
            return self.getToken(tsqlParser.WHERE, 0)

        def GROUP(self):
            return self.getToken(tsqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(tsqlParser.BY, 0)

        def group_by_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Group_by_itemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Group_by_itemContext,i)


        def group_by_grouping_sets(self):
            return self.getTypedRuleContext(tsqlParser.Group_by_grouping_setsContext,0)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def HAVING(self):
            return self.getToken(tsqlParser.HAVING, 0)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_conditionContext,i)


        def CUBE(self):
            return self.getToken(tsqlParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(tsqlParser.ROLLUP, 0)

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(tsqlParser.DISTINCT, 0)

        def output_dml_list_elem(self):
            return self.getTypedRuleContext(tsqlParser.Output_dml_list_elemContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_query_specification




    def query_specification(self):

        localctx = tsqlParser.Query_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_query_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2349
            self.match(tsqlParser.SELECT)
            self.state = 2351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ALL or _la==tsqlParser.DISTINCT:
                self.state = 2350
                localctx.pref = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ALL or _la==tsqlParser.DISTINCT):
                    localctx.pref = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TOP:
                self.state = 2353
                self.top_clause()


            self.state = 2356
            self.select_list()
            self.state = 2359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
            if la_ == 1:
                self.state = 2357
                self.match(tsqlParser.INTO)
                self.state = 2358
                self.table_name()


            self.state = 2363
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                self.state = 2361
                self.match(tsqlParser.FROM)
                self.state = 2362
                self.table_sources()


            self.state = 2371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
            if la_ == 1:
                self.state = 2365
                self.match(tsqlParser.CROSS)
                self.state = 2366
                self.match(tsqlParser.APPLY)
                self.state = 2367
                self.cross_apply_expression()
                self.state = 2369
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
                if la_ == 1:
                    self.state = 2368
                    self.output_dml_list_elem()




            self.state = 2375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
            if la_ == 1:
                self.state = 2373
                self.match(tsqlParser.WHERE)
                self.state = 2374
                localctx.where = self.search_condition(0)


            self.state = 2387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
            if la_ == 1:
                self.state = 2377
                self.match(tsqlParser.GROUP)
                self.state = 2378
                self.match(tsqlParser.BY)
                self.state = 2379
                self.group_by_item()
                self.state = 2384
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,344,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2380
                        self.match(tsqlParser.COMMA)
                        self.state = 2381
                        self.group_by_item() 
                    self.state = 2386
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,344,self._ctx)



            self.state = 2390
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
            if la_ == 1:
                self.state = 2389
                self.group_by_grouping_sets()


            self.state = 2394
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,347,self._ctx)
            if la_ == 1:
                self.state = 2392
                self.match(tsqlParser.WITH)
                self.state = 2393
                _la = self._input.LA(1)
                if not(_la==tsqlParser.CUBE or _la==tsqlParser.ROLLUP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
            if la_ == 1:
                self.state = 2396
                self.match(tsqlParser.HAVING)
                self.state = 2397
                localctx.having = self.search_condition(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_grouping_setsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(tsqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(tsqlParser.BY, 0)

        def GROUPING(self):
            return self.getToken(tsqlParser.GROUPING, 0)

        def SETS(self):
            return self.getToken(tsqlParser.SETS, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def grouping_set(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Grouping_setContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Grouping_setContext,i)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_group_by_grouping_sets




    def group_by_grouping_sets(self):

        localctx = tsqlParser.Group_by_grouping_setsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_group_by_grouping_sets)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2400
            self.match(tsqlParser.GROUP)
            self.state = 2401
            self.match(tsqlParser.BY)
            self.state = 2402
            self.match(tsqlParser.GROUPING)
            self.state = 2403
            self.match(tsqlParser.SETS)
            self.state = 2404
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2405
            self.grouping_set()
            self.state = 2410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2406
                self.match(tsqlParser.COMMA)
                self.state = 2407
                self.grouping_set()
                self.state = 2412
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2413
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def group_by_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Group_by_itemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Group_by_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_grouping_set




    def grouping_set(self):

        localctx = tsqlParser.Grouping_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_grouping_set)
        self._la = 0 # Token type
        try:
            self.state = 2429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,351,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2415
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2416
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2417
                self.group_by_item()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2418
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2419
                self.group_by_item()
                self.state = 2424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 2420
                    self.match(tsqlParser.COMMA)
                    self.state = 2421
                    self.group_by_item()
                    self.state = 2426
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2427
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(tsqlParser.TOP, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def TIES(self):
            return self.getToken(tsqlParser.TIES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_top_clause




    def top_clause(self):

        localctx = tsqlParser.Top_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_top_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2431
            self.match(tsqlParser.TOP)
            self.state = 2432
            self.expression(0)
            self.state = 2434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.PERCENT:
                self.state = 2433
                self.match(tsqlParser.PERCENT)


            self.state = 2438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 2436
                self.match(tsqlParser.WITH)
                self.state = 2437
                self.match(tsqlParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_clause_dmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(tsqlParser.TOP, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_top_clause_dm




    def top_clause_dm(self):

        localctx = tsqlParser.Top_clause_dmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_top_clause_dm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2440
            self.match(tsqlParser.TOP)
            self.state = 2441
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2442
            self.expression(0)
            self.state = 2443
            self.match(tsqlParser.RR_BRACKET)
            self.state = 2445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.PERCENT:
                self.state = 2444
                self.match(tsqlParser.PERCENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.offset = None # ExpressionContext

        def ORDER(self):
            return self.getToken(tsqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(tsqlParser.BY, 0)

        def order_by_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Order_by_expressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Order_by_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def OFFSET(self):
            return self.getToken(tsqlParser.OFFSET, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def ROW(self):
            return self.getToken(tsqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def fetch_expression(self):
            return self.getTypedRuleContext(tsqlParser.Fetch_expressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_order_by_clause




    def order_by_clause(self):

        localctx = tsqlParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2447
            self.match(tsqlParser.ORDER)
            self.state = 2448
            self.match(tsqlParser.BY)
            self.state = 2449
            self.order_by_expression()
            self.state = 2454
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,355,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2450
                    self.match(tsqlParser.COMMA)
                    self.state = 2451
                    self.order_by_expression() 
                self.state = 2456
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,355,self._ctx)

            self.state = 2463
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
            if la_ == 1:
                self.state = 2457
                self.match(tsqlParser.OFFSET)
                self.state = 2458
                localctx.offset = self.expression(0)
                self.state = 2459
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ROW or _la==tsqlParser.ROWS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2461
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,356,self._ctx)
                if la_ == 1:
                    self.state = 2460
                    self.fetch_expression()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fetch_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FETCH(self):
            return self.getToken(tsqlParser.FETCH, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def FIRST(self):
            return self.getToken(tsqlParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(tsqlParser.NEXT, 0)

        def ROW(self):
            return self.getToken(tsqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_fetch_expression




    def fetch_expression(self):

        localctx = tsqlParser.Fetch_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_fetch_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2465
            self.match(tsqlParser.FETCH)
            self.state = 2466
            _la = self._input.LA(1)
            if not(_la==tsqlParser.NEXT or _la==tsqlParser.FIRST):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2467
            self.expression(0)
            self.state = 2468
            _la = self._input.LA(1)
            if not(_la==tsqlParser.ROW or _la==tsqlParser.ROWS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2469
            self.match(tsqlParser.ONLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def BROWSE(self):
            return self.getToken(tsqlParser.BROWSE, 0)

        def XML(self):
            return self.getToken(tsqlParser.XML, 0)

        def AUTO(self):
            return self.getToken(tsqlParser.AUTO, 0)

        def xml_common_directives(self):
            return self.getTypedRuleContext(tsqlParser.Xml_common_directivesContext,0)


        def PATH(self):
            return self.getToken(tsqlParser.PATH, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_for_clause




    def for_clause(self):

        localctx = tsqlParser.For_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_for_clause)
        try:
            self.state = 2490
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2471
                self.match(tsqlParser.FOR)
                self.state = 2472
                self.match(tsqlParser.BROWSE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2473
                self.match(tsqlParser.FOR)
                self.state = 2474
                self.match(tsqlParser.XML)
                self.state = 2475
                self.match(tsqlParser.AUTO)
                self.state = 2477
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,358,self._ctx)
                if la_ == 1:
                    self.state = 2476
                    self.xml_common_directives()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2479
                self.match(tsqlParser.FOR)
                self.state = 2480
                self.match(tsqlParser.XML)
                self.state = 2481
                self.match(tsqlParser.PATH)
                self.state = 2485
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
                if la_ == 1:
                    self.state = 2482
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 2483
                    self.match(tsqlParser.STRING)
                    self.state = 2484
                    self.match(tsqlParser.RR_BRACKET)


                self.state = 2488
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
                if la_ == 1:
                    self.state = 2487
                    self.xml_common_directives()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_common_directivesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(tsqlParser.COMMA, 0)

        def BINARY(self):
            return self.getToken(tsqlParser.BINARY, 0)

        def BASE64(self):
            return self.getToken(tsqlParser.BASE64, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def ROOT(self):
            return self.getToken(tsqlParser.ROOT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_xml_common_directives




    def xml_common_directives(self):

        localctx = tsqlParser.Xml_common_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_xml_common_directives)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2492
            self.match(tsqlParser.COMMA)
            self.state = 2497
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.BINARY]:
                self.state = 2493
                self.match(tsqlParser.BINARY)
                self.state = 2494
                self.match(tsqlParser.BASE64)
                pass
            elif token in [tsqlParser.TYPE]:
                self.state = 2495
                self.match(tsqlParser.TYPE)
                pass
            elif token in [tsqlParser.ROOT]:
                self.state = 2496
                self.match(tsqlParser.ROOT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.direction = None # Token

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(tsqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(tsqlParser.DESC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_order_by_expression




    def order_by_expression(self):

        localctx = tsqlParser.Order_by_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_order_by_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2499
            self.expression(0)
            self.state = 2501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
            if la_ == 1:
                self.state = 2500
                localctx.direction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ASC or _la==tsqlParser.DESC):
                    localctx.direction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_group_by_item




    def group_by_item(self):

        localctx = tsqlParser.Group_by_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_group_by_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2503
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Option_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(tsqlParser.OPTION, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.OptionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.OptionContext,i)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_option_clause




    def option_clause(self):

        localctx = tsqlParser.Option_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_option_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2505
            self.match(tsqlParser.OPTION)
            self.state = 2506
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2507
            self.option()
            self.state = 2512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2508
                self.match(tsqlParser.COMMA)
                self.state = 2509
                self.option()
                self.state = 2514
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2515
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.number_rows = None # Token
            self.number_of_processors = None # Token
            self.number_recursion = None # Token

        def FAST(self):
            return self.getToken(tsqlParser.FAST, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def GROUP(self):
            return self.getToken(tsqlParser.GROUP, 0)

        def HASH(self):
            return self.getToken(tsqlParser.HASH, 0)

        def ORDER(self):
            return self.getToken(tsqlParser.ORDER, 0)

        def UNION(self):
            return self.getToken(tsqlParser.UNION, 0)

        def MERGE(self):
            return self.getToken(tsqlParser.MERGE, 0)

        def CONCAT(self):
            return self.getToken(tsqlParser.CONCAT, 0)

        def JOIN(self):
            return self.getToken(tsqlParser.JOIN, 0)

        def LOOP(self):
            return self.getToken(tsqlParser.LOOP, 0)

        def EXPAND(self):
            return self.getToken(tsqlParser.EXPAND, 0)

        def VIEWS(self):
            return self.getToken(tsqlParser.VIEWS, 0)

        def FORCE(self):
            return self.getToken(tsqlParser.FORCE, 0)

        def IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX(self):
            return self.getToken(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)

        def KEEP(self):
            return self.getToken(tsqlParser.KEEP, 0)

        def PLAN(self):
            return self.getToken(tsqlParser.PLAN, 0)

        def KEEPFIXED(self):
            return self.getToken(tsqlParser.KEEPFIXED, 0)

        def MAXDOP(self):
            return self.getToken(tsqlParser.MAXDOP, 0)

        def MAXRECURSION(self):
            return self.getToken(tsqlParser.MAXRECURSION, 0)

        def OPTIMIZE(self):
            return self.getToken(tsqlParser.OPTIMIZE, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def optimize_for_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Optimize_for_argContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Optimize_for_argContext,i)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def UNKNOWN(self):
            return self.getToken(tsqlParser.UNKNOWN, 0)

        def PARAMETERIZATION(self):
            return self.getToken(tsqlParser.PARAMETERIZATION, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def RECOMPILE(self):
            return self.getToken(tsqlParser.RECOMPILE, 0)

        def ROBUST(self):
            return self.getToken(tsqlParser.ROBUST, 0)

        def USE(self):
            return self.getToken(tsqlParser.USE, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_option




    def option(self):

        localctx = tsqlParser.OptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_option)
        self._la = 0 # Token type
        try:
            self.state = 2562
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2517
                self.match(tsqlParser.FAST)
                self.state = 2518
                localctx.number_rows = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2519
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ORDER or _la==tsqlParser.HASH):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2520
                self.match(tsqlParser.GROUP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2521
                _la = self._input.LA(1)
                if not(_la==tsqlParser.MERGE or _la==tsqlParser.CONCAT or _la==tsqlParser.HASH):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2522
                self.match(tsqlParser.UNION)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2523
                _la = self._input.LA(1)
                if not(_la==tsqlParser.MERGE or _la==tsqlParser.HASH or _la==tsqlParser.LOOP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2524
                self.match(tsqlParser.JOIN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2525
                self.match(tsqlParser.EXPAND)
                self.state = 2526
                self.match(tsqlParser.VIEWS)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2527
                self.match(tsqlParser.FORCE)
                self.state = 2528
                self.match(tsqlParser.ORDER)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2529
                self.match(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2530
                self.match(tsqlParser.KEEP)
                self.state = 2531
                self.match(tsqlParser.PLAN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2532
                self.match(tsqlParser.KEEPFIXED)
                self.state = 2533
                self.match(tsqlParser.PLAN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2534
                self.match(tsqlParser.MAXDOP)
                self.state = 2535
                localctx.number_of_processors = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2536
                self.match(tsqlParser.MAXRECURSION)
                self.state = 2537
                localctx.number_recursion = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2538
                self.match(tsqlParser.OPTIMIZE)
                self.state = 2539
                self.match(tsqlParser.FOR)
                self.state = 2540
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2541
                self.optimize_for_arg()
                self.state = 2546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 2542
                    self.match(tsqlParser.COMMA)
                    self.state = 2543
                    self.optimize_for_arg()
                    self.state = 2548
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2549
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2551
                self.match(tsqlParser.OPTIMIZE)
                self.state = 2552
                self.match(tsqlParser.FOR)
                self.state = 2553
                self.match(tsqlParser.UNKNOWN)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2554
                self.match(tsqlParser.PARAMETERIZATION)
                self.state = 2555
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FORCED or _la==tsqlParser.SIMPLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2556
                self.match(tsqlParser.RECOMPILE)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2557
                self.match(tsqlParser.ROBUST)
                self.state = 2558
                self.match(tsqlParser.PLAN)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2559
                self.match(tsqlParser.USE)
                self.state = 2560
                self.match(tsqlParser.PLAN)
                self.state = 2561
                self.match(tsqlParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Optimize_for_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def UNKNOWN(self):
            return self.getToken(tsqlParser.UNKNOWN, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_optimize_for_arg




    def optimize_for_arg(self):

        localctx = tsqlParser.Optimize_for_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_optimize_for_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2564
            self.match(tsqlParser.LOCAL_ID)
            self.state = 2568
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.UNKNOWN]:
                self.state = 2565
                self.match(tsqlParser.UNKNOWN)
                pass
            elif token in [tsqlParser.EQUAL]:
                self.state = 2566
                self.match(tsqlParser.EQUAL)
                self.state = 2567
                self.constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_list_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Select_list_elemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Select_list_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_select_list




    def select_list(self):

        localctx = tsqlParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_select_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2570
            self.select_list_elem()
            self.state = 2575
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,368,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2571
                    self.match(tsqlParser.COMMA)
                    self.state = 2572
                    self.select_list_elem() 
                self.state = 2577
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,368,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_list_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.alias = None # Column_aliasContext

        def a_star(self):
            return self.getTypedRuleContext(tsqlParser.A_starContext,0)


        def DOLLAR(self):
            return self.getToken(tsqlParser.DOLLAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(tsqlParser.DOT, 0)

        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)

        def ROWGUID(self):
            return self.getToken(tsqlParser.ROWGUID, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(tsqlParser.Column_aliasContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_select_list_elem




    def select_list_elem(self):

        localctx = tsqlParser.Select_list_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_select_list_elem)
        self._la = 0 # Token type
        try:
            self.state = 2599
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (tsqlParser.FILLFACTOR - 71)) | (1 << (tsqlParser.FORCESEEK - 71)) | (1 << (tsqlParser.NEXT - 71)) | (1 << (tsqlParser.NUMERIC - 71)))) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (tsqlParser.VALUE - 196)) | (1 << (tsqlParser.ABSOLUTE - 196)) | (1 << (tsqlParser.APPLY - 196)) | (1 << (tsqlParser.AUTO - 196)) | (1 << (tsqlParser.AVG - 196)) | (1 << (tsqlParser.BASE64 - 196)) | (1 << (tsqlParser.CALLER - 196)) | (1 << (tsqlParser.CAST - 196)) | (1 << (tsqlParser.CATCH - 196)) | (1 << (tsqlParser.CHECKSUM_AGG - 196)) | (1 << (tsqlParser.COMMITTED - 196)) | (1 << (tsqlParser.CONCAT - 196)) | (1 << (tsqlParser.CONTROL - 196)) | (1 << (tsqlParser.COOKIE - 196)) | (1 << (tsqlParser.COUNT - 196)) | (1 << (tsqlParser.COUNT_BIG - 196)) | (1 << (tsqlParser.DATE - 196)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (tsqlParser.DELAY - 261)) | (1 << (tsqlParser.DELETED - 261)) | (1 << (tsqlParser.DENSE_RANK - 261)) | (1 << (tsqlParser.DISABLE - 261)) | (1 << (tsqlParser.DYNAMIC - 261)) | (1 << (tsqlParser.ENCRYPTION - 261)) | (1 << (tsqlParser.EXIST - 261)) | (1 << (tsqlParser.EXPAND - 261)) | (1 << (tsqlParser.FAST - 261)) | (1 << (tsqlParser.FAST_FORWARD - 261)) | (1 << (tsqlParser.FIRST - 261)) | (1 << (tsqlParser.FIRST_VALUE - 261)) | (1 << (tsqlParser.FOLLOWING - 261)) | (1 << (tsqlParser.FORCE - 261)) | (1 << (tsqlParser.FORCED - 261)) | (1 << (tsqlParser.FORWARD_ONLY - 261)) | (1 << (tsqlParser.FULLSCAN - 261)) | (1 << (tsqlParser.GLOBAL - 261)) | (1 << (tsqlParser.GROUPING - 261)) | (1 << (tsqlParser.GROUPING_ID - 261)) | (1 << (tsqlParser.HASH - 261)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 261)) | (1 << (tsqlParser.IMPERSONATE - 261)) | (1 << (tsqlParser.INSENSITIVE - 261)) | (1 << (tsqlParser.INSERTED - 261)) | (1 << (tsqlParser.ISOLATION - 261)) | (1 << (tsqlParser.IO - 261)) | (1 << (tsqlParser.KEEP - 261)) | (1 << (tsqlParser.KEEPFIXED - 261)) | (1 << (tsqlParser.KEYSET - 261)) | (1 << (tsqlParser.LAG - 261)) | (1 << (tsqlParser.LAST - 261)) | (1 << (tsqlParser.LAST_VALUE - 261)) | (1 << (tsqlParser.LEAD - 261)) | (1 << (tsqlParser.LEVEL - 261)) | (1 << (tsqlParser.LOCAL - 261)) | (1 << (tsqlParser.LOCK_ESCALATION - 261)) | (1 << (tsqlParser.LOGIN - 261)) | (1 << (tsqlParser.LOOP - 261)) | (1 << (tsqlParser.MARK - 261)) | (1 << (tsqlParser.MAX - 261)) | (1 << (tsqlParser.MAXDOP - 261)) | (1 << (tsqlParser.MAXRECURSION - 261)))) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & ((1 << (tsqlParser.MIN - 328)) | (1 << (tsqlParser.MODIFY - 328)) | (1 << (tsqlParser.NAME - 328)) | (1 << (tsqlParser.NOCOUNT - 328)) | (1 << (tsqlParser.NODES - 328)) | (1 << (tsqlParser.NOEXPAND - 328)) | (1 << (tsqlParser.NORECOMPUTE - 328)) | (1 << (tsqlParser.NTILE - 328)) | (1 << (tsqlParser.NUMBER - 328)) | (1 << (tsqlParser.OFFSET - 328)) | (1 << (tsqlParser.ONLINE - 328)) | (1 << (tsqlParser.ONLY - 328)) | (1 << (tsqlParser.OPTIMISTIC - 328)) | (1 << (tsqlParser.OPTIMIZE - 328)) | (1 << (tsqlParser.OUT - 328)) | (1 << (tsqlParser.OUTPUT - 328)) | (1 << (tsqlParser.OWNER - 328)) | (1 << (tsqlParser.PARAMETERIZATION - 328)) | (1 << (tsqlParser.PARTITION - 328)) | (1 << (tsqlParser.PATH - 328)) | (1 << (tsqlParser.PRECEDING - 328)) | (1 << (tsqlParser.PRIOR - 328)) | (1 << (tsqlParser.PRIVILEGES - 328)) | (1 << (tsqlParser.QUERY - 328)) | (1 << (tsqlParser.RANGE - 328)) | (1 << (tsqlParser.RANK - 328)) | (1 << (tsqlParser.READONLY - 328)) | (1 << (tsqlParser.READ_ONLY - 328)) | (1 << (tsqlParser.RECOMPILE - 328)) | (1 << (tsqlParser.RELATIVE - 328)) | (1 << (tsqlParser.REMOTE - 328)) | (1 << (tsqlParser.REPEATABLE - 328)) | (1 << (tsqlParser.ROBUST - 328)) | (1 << (tsqlParser.ROOT - 328)) | (1 << (tsqlParser.ROW - 328)) | (1 << (tsqlParser.ROWGUID - 328)) | (1 << (tsqlParser.ROWS - 328)) | (1 << (tsqlParser.ROW_NUMBER - 328)) | (1 << (tsqlParser.SAMPLE - 328)) | (1 << (tsqlParser.SCHEMABINDING - 328)) | (1 << (tsqlParser.SCROLL - 328)) | (1 << (tsqlParser.SCROLL_LOCKS - 328)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (tsqlParser.SELF - 393)) | (1 << (tsqlParser.SERIALIZABLE - 393)) | (1 << (tsqlParser.SIMPLE - 393)) | (1 << (tsqlParser.SIZE - 393)) | (1 << (tsqlParser.SNAPSHOT - 393)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 393)) | (1 << (tsqlParser.STATIC - 393)) | (1 << (tsqlParser.STATS_STREAM - 393)) | (1 << (tsqlParser.STDEV - 393)) | (1 << (tsqlParser.STDEVP - 393)) | (1 << (tsqlParser.SUM - 393)) | (1 << (tsqlParser.TEXTIMAGE_ON - 393)) | (1 << (tsqlParser.THROW - 393)) | (1 << (tsqlParser.TIES - 393)) | (1 << (tsqlParser.TIME - 393)) | (1 << (tsqlParser.TRY - 393)) | (1 << (tsqlParser.TYPE - 393)) | (1 << (tsqlParser.TYPE_WARNING - 393)) | (1 << (tsqlParser.UNBOUNDED - 393)) | (1 << (tsqlParser.UNCOMMITTED - 393)) | (1 << (tsqlParser.UNKNOWN - 393)) | (1 << (tsqlParser.USING - 393)) | (1 << (tsqlParser.VAR - 393)) | (1 << (tsqlParser.VARP - 393)) | (1 << (tsqlParser.VIEWS - 393)) | (1 << (tsqlParser.VIEW_METADATA - 393)) | (1 << (tsqlParser.WORK - 393)) | (1 << (tsqlParser.XML - 393)) | (1 << (tsqlParser.XMLNAMESPACES - 393)) | (1 << (tsqlParser.ZONE - 393)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 393)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 393)) | (1 << (tsqlParser.ID - 393)))) != 0):
                    self.state = 2578
                    self.table_name()
                    self.state = 2579
                    self.match(tsqlParser.DOT)


                self.state = 2586
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.STAR]:
                    self.state = 2583
                    self.a_star()
                    pass
                elif token in [tsqlParser.DOLLAR]:
                    self.state = 2584
                    self.match(tsqlParser.DOLLAR)
                    self.state = 2585
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.IDENTITY or _la==tsqlParser.ROWGUID):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2588
                localctx.alias = self.column_alias()
                self.state = 2589
                self.match(tsqlParser.EQUAL)
                self.state = 2590
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2592
                self.expression(0)
                self.state = 2597
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
                if la_ == 1:
                    self.state = 2594
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.AS:
                        self.state = 2593
                        self.match(tsqlParser.AS)


                    self.state = 2596
                    localctx.alias = self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_sourcesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_sourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_sources




    def table_sources(self):

        localctx = tsqlParser.Table_sourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_table_sources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2601
            self.table_source(0)
            self.state = 2606
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,374,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2602
                    self.match(tsqlParser.COMMA)
                    self.state = 2603
                    self.table_source(0) 
                self.state = 2608
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,374,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_table_source

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Cross_joinContext(Table_sourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_sourceContext
            super().__init__(parser)
            self.left = None # Table_sourceContext
            self.op = None # Token
            self.right = None # Table_sourceContext
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(tsqlParser.JOIN, 0)
        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_sourceContext,i)

        def CROSS(self):
            return self.getToken(tsqlParser.CROSS, 0)


    class Table_source_item_joinContext(Table_sourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_sourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_source_item(self):
            return self.getTypedRuleContext(tsqlParser.Table_source_itemContext,0)



    class Standard_joinContext(Table_sourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_sourceContext
            super().__init__(parser)
            self.left = None # Table_sourceContext
            self.right = None # Table_sourceContext
            self.copyFrom(ctx)

        def join_type(self):
            return self.getTypedRuleContext(tsqlParser.Join_typeContext,0)

        def JOIN(self):
            return self.getToken(tsqlParser.JOIN, 0)
        def ON(self):
            return self.getToken(tsqlParser.ON, 0)
        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)

        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_sourceContext,i)



    class Apply_joinContext(Table_sourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_sourceContext
            super().__init__(parser)
            self.left = None # Table_sourceContext
            self.op = None # Token
            self.right = None # Table_sourceContext
            self.copyFrom(ctx)

        def APPLY(self):
            return self.getToken(tsqlParser.APPLY, 0)
        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_sourceContext,i)

        def CROSS(self):
            return self.getToken(tsqlParser.CROSS, 0)
        def OUTER(self):
            return self.getToken(tsqlParser.OUTER, 0)


    class Bracket_table_sourceContext(Table_sourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_sourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)
        def table_source(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourceContext,0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)



    def table_source(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = tsqlParser.Table_sourceContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 270
        self.enterRecursionRule(localctx, 270, self.RULE_table_source, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,375,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Bracket_table_sourceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2610
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2611
                self.table_source(0)
                self.state = 2612
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                localctx = tsqlParser.Table_source_item_joinContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2614
                self.table_source_item()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2634
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,377,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2632
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,376,self._ctx)
                    if la_ == 1:
                        localctx = tsqlParser.Cross_joinContext(self, tsqlParser.Table_sourceContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_table_source)
                        self.state = 2617
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2618
                        localctx.op = self.match(tsqlParser.CROSS)
                        self.state = 2619
                        self.match(tsqlParser.JOIN)
                        self.state = 2620
                        localctx.right = self.table_source(4)
                        pass

                    elif la_ == 2:
                        localctx = tsqlParser.Apply_joinContext(self, tsqlParser.Table_sourceContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_table_source)
                        self.state = 2621
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2622
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==tsqlParser.CROSS or _la==tsqlParser.OUTER):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2623
                        self.match(tsqlParser.APPLY)
                        self.state = 2624
                        localctx.right = self.table_source(3)
                        pass

                    elif la_ == 3:
                        localctx = tsqlParser.Standard_joinContext(self, tsqlParser.Table_sourceContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_table_source)
                        self.state = 2625
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 2626
                        self.join_type()
                        self.state = 2627
                        self.match(tsqlParser.JOIN)
                        self.state = 2628
                        localctx.right = self.table_source(0)
                        self.state = 2629
                        self.match(tsqlParser.ON)
                        self.state = 2630
                        self.search_condition(0)
                        pass

             
                self.state = 2636
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,377,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Table_source_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_table_source_item

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Table_source_item_simpleContext(Table_source_itemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_source_itemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rowset_function(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_functionContext,0)

        def table_alias(self):
            return self.getTypedRuleContext(tsqlParser.Table_aliasContext,0)

        def change_table(self):
            return self.getTypedRuleContext(tsqlParser.Change_tableContext,0)

        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)


    class Table_source_item_complexContext(Table_source_itemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_source_itemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def derived_table(self):
            return self.getTypedRuleContext(tsqlParser.Derived_tableContext,0)

        def table_alias(self):
            return self.getTypedRuleContext(tsqlParser.Table_aliasContext,0)

        def column_alias_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_alias_listContext,0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)
        def DOT(self):
            return self.getToken(tsqlParser.DOT, 0)
        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)



    class Table_source_item_nameContext(Table_source_itemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_source_itemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)

        def tablesample_clause(self):
            return self.getTypedRuleContext(tsqlParser.Tablesample_clauseContext,0)

        def table_alias(self):
            return self.getTypedRuleContext(tsqlParser.Table_aliasContext,0)

        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)




    def table_source_item(self):

        localctx = tsqlParser.Table_source_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_table_source_item)
        try:
            self.state = 2679
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,389,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Table_source_item_nameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2637
                self.table_name()
                self.state = 2639
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
                if la_ == 1:
                    self.state = 2638
                    self.tablesample_clause()


                self.state = 2642
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,379,self._ctx)
                if la_ == 1:
                    self.state = 2641
                    self.table_alias()


                self.state = 2645
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
                if la_ == 1:
                    self.state = 2644
                    self.with_table_hints()


                pass

            elif la_ == 2:
                localctx = tsqlParser.Table_source_item_simpleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2647
                self.rowset_function()
                self.state = 2649
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,381,self._ctx)
                if la_ == 1:
                    self.state = 2648
                    self.table_alias()


                pass

            elif la_ == 3:
                localctx = tsqlParser.Table_source_item_complexContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2651
                self.derived_table()
                self.state = 2656
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,383,self._ctx)
                if la_ == 1:
                    self.state = 2652
                    self.table_alias()
                    self.state = 2654
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
                    if la_ == 1:
                        self.state = 2653
                        self.column_alias_list()




                pass

            elif la_ == 4:
                localctx = tsqlParser.Table_source_item_simpleContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2658
                self.change_table()
                self.state = 2660
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,384,self._ctx)
                if la_ == 1:
                    self.state = 2659
                    self.table_alias()


                pass

            elif la_ == 5:
                localctx = tsqlParser.Table_source_item_simpleContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2662
                self.function_call()
                self.state = 2664
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,385,self._ctx)
                if la_ == 1:
                    self.state = 2663
                    self.table_alias()


                pass

            elif la_ == 6:
                localctx = tsqlParser.Table_source_item_simpleContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2666
                self.match(tsqlParser.LOCAL_ID)
                self.state = 2668
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,386,self._ctx)
                if la_ == 1:
                    self.state = 2667
                    self.table_alias()


                pass

            elif la_ == 7:
                localctx = tsqlParser.Table_source_item_complexContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2670
                self.match(tsqlParser.LOCAL_ID)
                self.state = 2671
                self.match(tsqlParser.DOT)
                self.state = 2672
                self.function_call()
                self.state = 2677
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,388,self._ctx)
                if la_ == 1:
                    self.state = 2673
                    self.table_alias()
                    self.state = 2675
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
                    if la_ == 1:
                        self.state = 2674
                        self.column_alias_list()




                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tablesample_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESAMPLE(self):
            return self.getToken(tsqlParser.TABLESAMPLE, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def sample_number(self):
            return self.getTypedRuleContext(tsqlParser.Sample_numberContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def SYSTEM(self):
            return self.getToken(tsqlParser.SYSTEM, 0)

        def REPEATABLE(self):
            return self.getToken(tsqlParser.REPEATABLE, 0)

        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def repeat_seed(self):
            return self.getTypedRuleContext(tsqlParser.Repeat_seedContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_tablesample_clause




    def tablesample_clause(self):

        localctx = tsqlParser.Tablesample_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_tablesample_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2681
            self.match(tsqlParser.TABLESAMPLE)
            self.state = 2683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.SYSTEM:
                self.state = 2682
                self.match(tsqlParser.SYSTEM)


            self.state = 2685
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2686
            self.sample_number()
            self.state = 2688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.PERCENT or _la==tsqlParser.ROWS:
                self.state = 2687
                _la = self._input.LA(1)
                if not(_la==tsqlParser.PERCENT or _la==tsqlParser.ROWS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2690
            self.match(tsqlParser.RR_BRACKET)
            self.state = 2693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,392,self._ctx)
            if la_ == 1:
                self.state = 2691
                self.match(tsqlParser.REPEATABLE)

                self.state = 2692
                self.repeat_seed()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_sample_number




    def sample_number(self):

        localctx = tsqlParser.Sample_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_sample_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2695
            self.match(tsqlParser.DECIMAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Repeat_seedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_repeat_seed




    def repeat_seed(self):

        localctx = tsqlParser.Repeat_seedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_repeat_seed)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2697
            self.match(tsqlParser.DECIMAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_alias




    def table_alias(self):

        localctx = tsqlParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_table_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 2699
                self.match(tsqlParser.AS)


            self.state = 2702
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Change_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGETABLE(self):
            return self.getToken(tsqlParser.CHANGETABLE, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def CHANGES(self):
            return self.getToken(tsqlParser.CHANGES, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def COMMA(self):
            return self.getToken(tsqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def NULL_(self):
            return self.getToken(tsqlParser.NULL_, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_change_table




    def change_table(self):

        localctx = tsqlParser.Change_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_change_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2704
            self.match(tsqlParser.CHANGETABLE)
            self.state = 2705
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2706
            self.match(tsqlParser.CHANGES)
            self.state = 2707
            self.table_name()
            self.state = 2708
            self.match(tsqlParser.COMMA)
            self.state = 2709
            _la = self._input.LA(1)
            if not(_la==tsqlParser.NULL_ or _la==tsqlParser.LOCAL_ID or _la==tsqlParser.DECIMAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2710
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.join_hint = None # Token

        def LEFT(self):
            return self.getToken(tsqlParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(tsqlParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(tsqlParser.FULL, 0)

        def INNER(self):
            return self.getToken(tsqlParser.INNER, 0)

        def OUTER(self):
            return self.getToken(tsqlParser.OUTER, 0)

        def LOOP(self):
            return self.getToken(tsqlParser.LOOP, 0)

        def HASH(self):
            return self.getToken(tsqlParser.HASH, 0)

        def MERGE(self):
            return self.getToken(tsqlParser.MERGE, 0)

        def REMOTE(self):
            return self.getToken(tsqlParser.REMOTE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_join_type




    def join_type(self):

        localctx = tsqlParser.Join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_join_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2719
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.INNER, tsqlParser.JOIN, tsqlParser.MERGE, tsqlParser.HASH, tsqlParser.LOOP, tsqlParser.REMOTE]:
                self.state = 2713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.INNER:
                    self.state = 2712
                    self.match(tsqlParser.INNER)


                pass
            elif token in [tsqlParser.FULL, tsqlParser.LEFT, tsqlParser.RIGHT]:
                self.state = 2715
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FULL or _la==tsqlParser.LEFT or _la==tsqlParser.RIGHT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.OUTER:
                    self.state = 2716
                    self.match(tsqlParser.OUTER)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 2722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.MERGE or _la==tsqlParser.HASH or _la==tsqlParser.LOOP or _la==tsqlParser.REMOTE:
                self.state = 2721
                localctx.join_hint = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.MERGE or _la==tsqlParser.HASH or _la==tsqlParser.LOOP or _la==tsqlParser.REMOTE):
                    localctx.join_hint = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_name_with_hintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_name_with_hint




    def table_name_with_hint(self):

        localctx = tsqlParser.Table_name_with_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_table_name_with_hint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2724
            self.table_name()
            self.state = 2726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,398,self._ctx)
            if la_ == 1:
                self.state = 2725
                self.with_table_hints()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rowset_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider_name = None # Token
            self.connectionString = None # Token
            self.sql = None # Token
            self.data_file = None # Token

        def OPENROWSET(self):
            return self.getToken(tsqlParser.OPENROWSET, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.STRING)
            else:
                return self.getToken(tsqlParser.STRING, i)

        def BULK(self):
            return self.getToken(tsqlParser.BULK, 0)

        def bulk_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Bulk_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Bulk_optionContext,i)


        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_rowset_function




    def rowset_function(self):

        localctx = tsqlParser.Rowset_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_rowset_function)
        self._la = 0 # Token type
        try:
            self.state = 2754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,401,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2728
                self.match(tsqlParser.OPENROWSET)
                self.state = 2729
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2730
                localctx.provider_name = self.match(tsqlParser.STRING)
                self.state = 2731
                self.match(tsqlParser.COMMA)
                self.state = 2732
                localctx.connectionString = self.match(tsqlParser.STRING)
                self.state = 2733
                self.match(tsqlParser.COMMA)
                self.state = 2734
                localctx.sql = self.match(tsqlParser.STRING)
                self.state = 2735
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2736
                self.match(tsqlParser.OPENROWSET)
                self.state = 2737
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2738
                self.match(tsqlParser.BULK)
                self.state = 2739
                localctx.data_file = self.match(tsqlParser.STRING)
                self.state = 2740
                self.match(tsqlParser.COMMA)
                self.state = 2750
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,400,self._ctx)
                if la_ == 1:
                    self.state = 2741
                    self.bulk_option()
                    self.state = 2746
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==tsqlParser.COMMA:
                        self.state = 2742
                        self.match(tsqlParser.COMMA)
                        self.state = 2743
                        self.bulk_option()
                        self.state = 2748
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 2749
                    self.r_id()
                    pass


                self.state = 2752
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bulk_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.bulk_option_value = None # Token

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_bulk_option




    def bulk_option(self):

        localctx = tsqlParser.Bulk_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_bulk_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2756
            self.r_id()
            self.state = 2757
            self.match(tsqlParser.EQUAL)
            self.state = 2758
            localctx.bulk_option_value = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==tsqlParser.DECIMAL or _la==tsqlParser.STRING):
                localctx.bulk_option_value = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Derived_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)


        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def table_value_constructor(self):
            return self.getTypedRuleContext(tsqlParser.Table_value_constructorContext,0)


        def table_alias(self):
            return self.getTypedRuleContext(tsqlParser.Table_aliasContext,0)


        def column_alias_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_alias_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_derived_table




    def derived_table(self):

        localctx = tsqlParser.Derived_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_derived_table)
        try:
            self.state = 2771
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,402,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2760
                self.subquery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2761
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2762
                self.subquery()
                self.state = 2763
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2765
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2766
                self.table_value_constructor()
                self.state = 2767
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2768
                self.table_alias()
                self.state = 2769
                self.column_alias_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_function_call

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Standard_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.style = None # ExpressionContext
            self.seed = None # Token
            self.increment = None # Token
            self.copyFrom(ctx)

        def scalar_function_name(self):
            return self.getTypedRuleContext(tsqlParser.Scalar_function_nameContext,0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)
        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)

        def BINARY_CHECKSUM(self):
            return self.getToken(tsqlParser.BINARY_CHECKSUM, 0)
        def STAR(self):
            return self.getToken(tsqlParser.STAR, 0)
        def CONVERT(self):
            return self.getToken(tsqlParser.CONVERT, 0)
        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def COALESCE(self):
            return self.getToken(tsqlParser.COALESCE, 0)
        def DATEADD(self):
            return self.getToken(tsqlParser.DATEADD, 0)
        def ID(self):
            return self.getToken(tsqlParser.ID, 0)
        def DATEDIFF(self):
            return self.getToken(tsqlParser.DATEDIFF, 0)
        def DATENAME(self):
            return self.getToken(tsqlParser.DATENAME, 0)
        def DATEPART(self):
            return self.getToken(tsqlParser.DATEPART, 0)
        def DATETIMEOFFSETFROMPARTS(self):
            return self.getToken(tsqlParser.DATETIMEOFFSETFROMPARTS, 0)
        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)
        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)
        def IIF(self):
            return self.getToken(tsqlParser.IIF, 0)
        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)

        def NULLIF(self):
            return self.getToken(tsqlParser.NULLIF, 0)
        def STRING_SPLIT(self):
            return self.getToken(tsqlParser.STRING_SPLIT, 0)
        def TRY_CONVERT(self):
            return self.getToken(tsqlParser.TRY_CONVERT, 0)


    class Aggregate_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggregate_windowed_function(self):
            return self.getTypedRuleContext(tsqlParser.Aggregate_windowed_functionContext,0)



    class Nvf_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def next_value_for_function(self):
            return self.getTypedRuleContext(tsqlParser.Next_value_for_functionContext,0)



    class Rank_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ranking_windowed_function(self):
            return self.getTypedRuleContext(tsqlParser.Ranking_windowed_functionContext,0)



    class Expression_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.alias = None # Data_typeContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def PARSE(self):
            return self.getToken(tsqlParser.PARSE, 0)
        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)
        def AS(self):
            return self.getToken(tsqlParser.AS, 0)
        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)

        def USING(self):
            return self.getToken(tsqlParser.USING, 0)
        def TRY_PARSE(self):
            return self.getToken(tsqlParser.TRY_PARSE, 0)


    class Simple_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHECKSUM(self):
            return self.getToken(tsqlParser.CHECKSUM, 0)
        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)
        def STAR(self):
            return self.getToken(tsqlParser.STAR, 0)
        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(tsqlParser.CURRENT_TIMESTAMP, 0)
        def CURRENT_USER(self):
            return self.getToken(tsqlParser.CURRENT_USER, 0)
        def MIN_ACTIVE_ROWVERSION(self):
            return self.getToken(tsqlParser.MIN_ACTIVE_ROWVERSION, 0)
        def SESSION_USER(self):
            return self.getToken(tsqlParser.SESSION_USER, 0)
        def SYSTEM_USER(self):
            return self.getToken(tsqlParser.SYSTEM_USER, 0)


    class Cast_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.alias = None # Data_typeContext
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(tsqlParser.CAST, 0)
        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)
        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)
        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)

        def TRY_CAST(self):
            return self.getToken(tsqlParser.TRY_CAST, 0)



    def function_call(self):

        localctx = tsqlParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.state = 2946
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,409,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Rank_callContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2773
                self.ranking_windowed_function()
                pass

            elif la_ == 2:
                localctx = tsqlParser.Aggregate_callContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2774
                self.aggregate_windowed_function()
                pass

            elif la_ == 3:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2775
                self.scalar_function_name()
                self.state = 2776
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2778
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.CASE) | (1 << tsqlParser.COALESCE) | (1 << tsqlParser.CONVERT) | (1 << tsqlParser.CURRENT_TIMESTAMP) | (1 << tsqlParser.CURRENT_USER) | (1 << tsqlParser.DEFAULT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (tsqlParser.EXP - 66)) | (1 << (tsqlParser.FILLFACTOR - 66)) | (1 << (tsqlParser.FORCESEEK - 66)) | (1 << (tsqlParser.IDENTITY - 66)) | (1 << (tsqlParser.IIF - 66)) | (1 << (tsqlParser.LEFT - 66)) | (1 << (tsqlParser.LOG - 66)) | (1 << (tsqlParser.LOG10 - 66)) | (1 << (tsqlParser.NEXT - 66)) | (1 << (tsqlParser.NULL_ - 66)) | (1 << (tsqlParser.NULLIF - 66)) | (1 << (tsqlParser.NUMERIC - 66)) | (1 << (tsqlParser.OVER - 66)))) != 0) or ((((_la - 152)) & ~0x3f) == 0 and ((1 << (_la - 152)) & ((1 << (tsqlParser.RIGHT - 152)) | (1 << (tsqlParser.SESSION_USER - 152)) | (1 << (tsqlParser.SIGN - 152)) | (1 << (tsqlParser.SYSTEM_USER - 152)) | (1 << (tsqlParser.TRY_CAST - 152)) | (1 << (tsqlParser.TRY_CONVERT - 152)) | (1 << (tsqlParser.TRY_PARSE - 152)) | (1 << (tsqlParser.VALUE - 152)) | (1 << (tsqlParser.ABSOLUTE - 152)) | (1 << (tsqlParser.APPLY - 152)))) != 0) or ((((_la - 217)) & ~0x3f) == 0 and ((1 << (_la - 217)) & ((1 << (tsqlParser.AUTO - 217)) | (1 << (tsqlParser.AVG - 217)) | (1 << (tsqlParser.BASE64 - 217)) | (1 << (tsqlParser.BINARY_CHECKSUM - 217)) | (1 << (tsqlParser.CALLER - 217)) | (1 << (tsqlParser.CAST - 217)) | (1 << (tsqlParser.CATCH - 217)) | (1 << (tsqlParser.CEILING - 217)) | (1 << (tsqlParser.CHECKSUM - 217)) | (1 << (tsqlParser.CHECKSUM_AGG - 217)) | (1 << (tsqlParser.COMMITTED - 217)) | (1 << (tsqlParser.CONCAT - 217)) | (1 << (tsqlParser.CONTROL - 217)) | (1 << (tsqlParser.COOKIE - 217)) | (1 << (tsqlParser.COS - 217)) | (1 << (tsqlParser.COUNT - 217)) | (1 << (tsqlParser.COUNT_BIG - 217)) | (1 << (tsqlParser.DATE - 217)) | (1 << (tsqlParser.DATEADD - 217)) | (1 << (tsqlParser.DATEDIFF - 217)) | (1 << (tsqlParser.DATENAME - 217)) | (1 << (tsqlParser.DATEPART - 217)) | (1 << (tsqlParser.DATETIMEOFFSETFROMPARTS - 217)) | (1 << (tsqlParser.DELAY - 217)) | (1 << (tsqlParser.DELETED - 217)) | (1 << (tsqlParser.DENSE_RANK - 217)) | (1 << (tsqlParser.DISABLE - 217)) | (1 << (tsqlParser.DYNAMIC - 217)) | (1 << (tsqlParser.ENCRYPTION - 217)) | (1 << (tsqlParser.EXIST - 217)) | (1 << (tsqlParser.EXPAND - 217)) | (1 << (tsqlParser.FAST - 217)) | (1 << (tsqlParser.FAST_FORWARD - 217)))) != 0) or ((((_la - 281)) & ~0x3f) == 0 and ((1 << (_la - 281)) & ((1 << (tsqlParser.FIRST - 281)) | (1 << (tsqlParser.FIRST_VALUE - 281)) | (1 << (tsqlParser.FLOOR - 281)) | (1 << (tsqlParser.FOLLOWING - 281)) | (1 << (tsqlParser.FORCE - 281)) | (1 << (tsqlParser.FORCED - 281)) | (1 << (tsqlParser.FORWARD_ONLY - 281)) | (1 << (tsqlParser.FULLSCAN - 281)) | (1 << (tsqlParser.GLOBAL - 281)) | (1 << (tsqlParser.GROUPING - 281)) | (1 << (tsqlParser.GROUPING_ID - 281)) | (1 << (tsqlParser.HASH - 281)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 281)) | (1 << (tsqlParser.IMPERSONATE - 281)) | (1 << (tsqlParser.INSENSITIVE - 281)) | (1 << (tsqlParser.INSERTED - 281)) | (1 << (tsqlParser.ISOLATION - 281)) | (1 << (tsqlParser.IO - 281)) | (1 << (tsqlParser.KEEP - 281)) | (1 << (tsqlParser.KEEPFIXED - 281)) | (1 << (tsqlParser.KEYSET - 281)) | (1 << (tsqlParser.LAG - 281)) | (1 << (tsqlParser.LAST - 281)) | (1 << (tsqlParser.LAST_VALUE - 281)) | (1 << (tsqlParser.LEAD - 281)) | (1 << (tsqlParser.LEVEL - 281)) | (1 << (tsqlParser.LOCAL - 281)) | (1 << (tsqlParser.LOCK_ESCALATION - 281)) | (1 << (tsqlParser.LOGIN - 281)) | (1 << (tsqlParser.LOOP - 281)) | (1 << (tsqlParser.MARK - 281)) | (1 << (tsqlParser.MAX - 281)) | (1 << (tsqlParser.MAXDOP - 281)) | (1 << (tsqlParser.MAXRECURSION - 281)) | (1 << (tsqlParser.MIN - 281)) | (1 << (tsqlParser.MIN_ACTIVE_ROWVERSION - 281)) | (1 << (tsqlParser.MODIFY - 281)) | (1 << (tsqlParser.NAME - 281)) | (1 << (tsqlParser.NOCOUNT - 281)) | (1 << (tsqlParser.NODES - 281)) | (1 << (tsqlParser.NOEXPAND - 281)) | (1 << (tsqlParser.NORECOMPUTE - 281)) | (1 << (tsqlParser.NTILE - 281)) | (1 << (tsqlParser.NUMBER - 281)))) != 0) or ((((_la - 347)) & ~0x3f) == 0 and ((1 << (_la - 347)) & ((1 << (tsqlParser.OFFSET - 347)) | (1 << (tsqlParser.ONLINE - 347)) | (1 << (tsqlParser.ONLY - 347)) | (1 << (tsqlParser.OPTIMISTIC - 347)) | (1 << (tsqlParser.OPTIMIZE - 347)) | (1 << (tsqlParser.OUT - 347)) | (1 << (tsqlParser.OUTPUT - 347)) | (1 << (tsqlParser.OWNER - 347)) | (1 << (tsqlParser.PARAMETERIZATION - 347)) | (1 << (tsqlParser.PARSE - 347)) | (1 << (tsqlParser.PARTITION - 347)) | (1 << (tsqlParser.PATH - 347)) | (1 << (tsqlParser.PERCENTILE_CONT - 347)) | (1 << (tsqlParser.POWER - 347)) | (1 << (tsqlParser.PRECEDING - 347)) | (1 << (tsqlParser.PRIOR - 347)) | (1 << (tsqlParser.PRIVILEGES - 347)) | (1 << (tsqlParser.QUERY - 347)) | (1 << (tsqlParser.RANGE - 347)) | (1 << (tsqlParser.RANK - 347)) | (1 << (tsqlParser.READONLY - 347)) | (1 << (tsqlParser.READ_ONLY - 347)) | (1 << (tsqlParser.RECOMPILE - 347)) | (1 << (tsqlParser.RELATIVE - 347)) | (1 << (tsqlParser.REMOTE - 347)) | (1 << (tsqlParser.REPEATABLE - 347)) | (1 << (tsqlParser.ROBUST - 347)) | (1 << (tsqlParser.ROOT - 347)) | (1 << (tsqlParser.ROUND - 347)) | (1 << (tsqlParser.ROW - 347)) | (1 << (tsqlParser.ROWGUID - 347)) | (1 << (tsqlParser.ROWS - 347)) | (1 << (tsqlParser.ROW_NUMBER - 347)) | (1 << (tsqlParser.SAMPLE - 347)) | (1 << (tsqlParser.SCHEMABINDING - 347)) | (1 << (tsqlParser.SCROLL - 347)) | (1 << (tsqlParser.SCROLL_LOCKS - 347)) | (1 << (tsqlParser.SELF - 347)) | (1 << (tsqlParser.SERIALIZABLE - 347)) | (1 << (tsqlParser.SIMPLE - 347)) | (1 << (tsqlParser.SIN - 347)) | (1 << (tsqlParser.SIZE - 347)) | (1 << (tsqlParser.SNAPSHOT - 347)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 347)) | (1 << (tsqlParser.STATIC - 347)) | (1 << (tsqlParser.STATS_STREAM - 347)) | (1 << (tsqlParser.STDEV - 347)) | (1 << (tsqlParser.STDEVP - 347)) | (1 << (tsqlParser.STRING_AGG - 347)) | (1 << (tsqlParser.STRING_SPLIT - 347)) | (1 << (tsqlParser.SUM - 347)))) != 0) or ((((_la - 411)) & ~0x3f) == 0 and ((1 << (_la - 411)) & ((1 << (tsqlParser.SQRT - 411)) | (1 << (tsqlParser.SQUARE - 411)) | (1 << (tsqlParser.TAN - 411)) | (1 << (tsqlParser.TEXTIMAGE_ON - 411)) | (1 << (tsqlParser.THROW - 411)) | (1 << (tsqlParser.TIES - 411)) | (1 << (tsqlParser.TIME - 411)) | (1 << (tsqlParser.TRY - 411)) | (1 << (tsqlParser.TYPE - 411)) | (1 << (tsqlParser.TYPE_WARNING - 411)) | (1 << (tsqlParser.UNBOUNDED - 411)) | (1 << (tsqlParser.UNCOMMITTED - 411)) | (1 << (tsqlParser.UNKNOWN - 411)) | (1 << (tsqlParser.USING - 411)) | (1 << (tsqlParser.VAR - 411)) | (1 << (tsqlParser.VARP - 411)) | (1 << (tsqlParser.VIEWS - 411)) | (1 << (tsqlParser.VIEW_METADATA - 411)) | (1 << (tsqlParser.WORK - 411)) | (1 << (tsqlParser.XML - 411)) | (1 << (tsqlParser.XMLNAMESPACES - 411)) | (1 << (tsqlParser.ZONE - 411)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 411)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 411)) | (1 << (tsqlParser.LOCAL_ID - 411)) | (1 << (tsqlParser.DECIMAL - 411)) | (1 << (tsqlParser.ID - 411)) | (1 << (tsqlParser.STRING - 411)) | (1 << (tsqlParser.BINARY - 411)) | (1 << (tsqlParser.FLOAT - 411)) | (1 << (tsqlParser.REAL - 411)) | (1 << (tsqlParser.DOLLAR - 411)) | (1 << (tsqlParser.LR_BRACKET - 411)))) != 0) or ((((_la - 480)) & ~0x3f) == 0 and ((1 << (_la - 480)) & ((1 << (tsqlParser.PLUS - 480)) | (1 << (tsqlParser.MINUS - 480)) | (1 << (tsqlParser.BIT_NOT - 480)))) != 0):
                    self.state = 2777
                    self.expression_list()


                self.state = 2780
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                localctx = tsqlParser.Nvf_callContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2782
                self.next_value_for_function()
                pass

            elif la_ == 5:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2783
                self.match(tsqlParser.BINARY_CHECKSUM)
                self.state = 2784
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2785
                self.match(tsqlParser.STAR)
                self.state = 2786
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                localctx = tsqlParser.Cast_callContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2787
                self.match(tsqlParser.CAST)
                self.state = 2788
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2789
                self.expression(0)
                self.state = 2790
                self.match(tsqlParser.AS)
                self.state = 2791
                localctx.alias = self.data_type()
                self.state = 2792
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 7:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2794
                self.match(tsqlParser.CONVERT)
                self.state = 2795
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2796
                self.data_type()
                self.state = 2797
                self.match(tsqlParser.COMMA)
                self.state = 2798
                self.expression(0)
                self.state = 2801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 2799
                    self.match(tsqlParser.COMMA)
                    self.state = 2800
                    localctx.style = self.expression(0)


                self.state = 2803
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 8:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2805
                self.match(tsqlParser.CHECKSUM)
                self.state = 2806
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2807
                self.match(tsqlParser.STAR)
                self.state = 2808
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 9:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2809
                self.match(tsqlParser.COALESCE)
                self.state = 2810
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2811
                self.expression_list()
                self.state = 2812
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 2814
                self.match(tsqlParser.CURRENT_TIMESTAMP)
                pass

            elif la_ == 11:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 2815
                self.match(tsqlParser.CURRENT_USER)
                pass

            elif la_ == 12:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 2816
                self.match(tsqlParser.DATEADD)
                self.state = 2817
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2818
                self.match(tsqlParser.ID)
                self.state = 2819
                self.match(tsqlParser.COMMA)
                self.state = 2820
                self.expression(0)
                self.state = 2821
                self.match(tsqlParser.COMMA)
                self.state = 2822
                self.expression(0)
                self.state = 2823
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 2825
                self.match(tsqlParser.DATEDIFF)
                self.state = 2826
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2827
                self.match(tsqlParser.ID)
                self.state = 2828
                self.match(tsqlParser.COMMA)
                self.state = 2829
                self.expression(0)
                self.state = 2830
                self.match(tsqlParser.COMMA)
                self.state = 2831
                self.expression(0)
                self.state = 2832
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 14:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 2834
                self.match(tsqlParser.DATENAME)
                self.state = 2835
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2836
                self.match(tsqlParser.ID)
                self.state = 2837
                self.match(tsqlParser.COMMA)
                self.state = 2838
                self.expression(0)
                self.state = 2839
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 15:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 2841
                self.match(tsqlParser.DATEPART)
                self.state = 2842
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2843
                self.match(tsqlParser.ID)
                self.state = 2844
                self.match(tsqlParser.COMMA)
                self.state = 2845
                self.expression(0)
                self.state = 2846
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 16:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 2848
                self.match(tsqlParser.DATETIMEOFFSETFROMPARTS)
                self.state = 2849
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2850
                self.expression(0)
                self.state = 2851
                self.match(tsqlParser.COMMA)
                self.state = 2852
                self.expression(0)
                self.state = 2853
                self.match(tsqlParser.COMMA)
                self.state = 2854
                self.expression(0)
                self.state = 2855
                self.match(tsqlParser.COMMA)
                self.state = 2856
                self.expression(0)
                self.state = 2857
                self.match(tsqlParser.COMMA)
                self.state = 2858
                self.expression(0)
                self.state = 2859
                self.match(tsqlParser.COMMA)
                self.state = 2860
                self.expression(0)
                self.state = 2861
                self.match(tsqlParser.COMMA)
                self.state = 2862
                self.expression(0)
                self.state = 2863
                self.match(tsqlParser.COMMA)
                self.state = 2864
                self.expression(0)
                self.state = 2865
                self.match(tsqlParser.COMMA)
                self.state = 2866
                self.expression(0)
                self.state = 2867
                self.match(tsqlParser.COMMA)
                self.state = 2868
                self.expression(0)
                self.state = 2869
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 17:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 2871
                self.match(tsqlParser.IDENTITY)
                self.state = 2872
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2873
                self.data_type()
                self.state = 2876
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,405,self._ctx)
                if la_ == 1:
                    self.state = 2874
                    self.match(tsqlParser.COMMA)
                    self.state = 2875
                    localctx.seed = self.match(tsqlParser.DECIMAL)


                self.state = 2880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 2878
                    self.match(tsqlParser.COMMA)
                    self.state = 2879
                    localctx.increment = self.match(tsqlParser.DECIMAL)


                self.state = 2882
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 18:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 2884
                self.match(tsqlParser.IIF)
                self.state = 2885
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2886
                self.search_condition(0)
                self.state = 2887
                self.match(tsqlParser.COMMA)
                self.state = 2888
                self.expression(0)
                self.state = 2889
                self.match(tsqlParser.COMMA)
                self.state = 2890
                self.expression(0)
                self.state = 2891
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 19:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 2893
                self.match(tsqlParser.MIN_ACTIVE_ROWVERSION)
                pass

            elif la_ == 20:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 2894
                self.match(tsqlParser.NULLIF)
                self.state = 2895
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2896
                self.expression(0)
                self.state = 2897
                self.match(tsqlParser.COMMA)
                self.state = 2898
                self.expression(0)
                self.state = 2899
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 21:
                localctx = tsqlParser.Expression_callContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 2901
                self.match(tsqlParser.PARSE)
                self.state = 2902
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2903
                localctx.left = self.expression(0)
                self.state = 2904
                self.match(tsqlParser.AS)
                self.state = 2905
                localctx.alias = self.data_type()
                self.state = 2908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.USING:
                    self.state = 2906
                    self.match(tsqlParser.USING)
                    self.state = 2907
                    localctx.right = self.expression(0)


                self.state = 2910
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 22:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 2912
                self.match(tsqlParser.SESSION_USER)
                pass

            elif la_ == 23:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 2913
                self.match(tsqlParser.STRING_SPLIT)
                self.state = 2914
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2915
                self.expression(0)
                self.state = 2916
                self.match(tsqlParser.COMMA)
                self.state = 2917
                self.expression(0)
                self.state = 2918
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 24:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 2920
                self.match(tsqlParser.SYSTEM_USER)
                pass

            elif la_ == 25:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 2921
                self.match(tsqlParser.TRY_CONVERT)
                self.state = 2922
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2923
                self.data_type()
                self.state = 2924
                self.match(tsqlParser.COMMA)
                self.state = 2925
                self.expression(0)
                self.state = 2926
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 26:
                localctx = tsqlParser.Cast_callContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 2928
                self.match(tsqlParser.TRY_CAST)
                self.state = 2929
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2930
                self.expression(0)
                self.state = 2931
                self.match(tsqlParser.AS)
                self.state = 2932
                localctx.alias = self.data_type()
                self.state = 2933
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 27:
                localctx = tsqlParser.Expression_callContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 2935
                self.match(tsqlParser.TRY_PARSE)
                self.state = 2936
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2937
                localctx.left = self.expression(0)
                self.state = 2938
                self.match(tsqlParser.AS)
                self.state = 2939
                localctx.alias = self.data_type()
                self.state = 2942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.USING:
                    self.state = 2940
                    self.match(tsqlParser.USING)
                    self.state = 2941
                    localctx.right = self.expression(0)


                self.state = 2944
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whenExpr = None # ExpressionContext
            self.thenExpr = None # ExpressionContext

        def WHEN(self):
            return self.getToken(tsqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(tsqlParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_switch_section




    def switch_section(self):

        localctx = tsqlParser.Switch_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_switch_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2948
            self.match(tsqlParser.WHEN)
            self.state = 2949
            localctx.whenExpr = self.expression(0)
            self.state = 2950
            self.match(tsqlParser.THEN)
            self.state = 2951
            localctx.thenExpr = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_search_condition_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whenExpr = None # Search_conditionContext
            self.thenExpr = None # ExpressionContext

        def WHEN(self):
            return self.getToken(tsqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(tsqlParser.THEN, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_switch_search_condition_section




    def switch_search_condition_section(self):

        localctx = tsqlParser.Switch_search_condition_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_switch_search_condition_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2953
            self.match(tsqlParser.WHEN)
            self.state = 2954
            localctx.whenExpr = self.search_condition(0)
            self.state = 2955
            self.match(tsqlParser.THEN)
            self.state = 2956
            localctx.thenExpr = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_table_hintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def table_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_hintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_hintContext,i)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_with_table_hints




    def with_table_hints(self):

        localctx = tsqlParser.With_table_hintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_with_table_hints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 2958
                self.match(tsqlParser.WITH)


            self.state = 2961
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2962
            self.table_hint()
            self.state = 2967
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2963
                self.match(tsqlParser.COMMA)
                self.state = 2964
                self.table_hint()
                self.state = 2969
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2970
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_with_table_hintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def table_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_hintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_hintContext,i)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_insert_with_table_hints




    def insert_with_table_hints(self):

        localctx = tsqlParser.Insert_with_table_hintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_insert_with_table_hints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2972
            self.match(tsqlParser.WITH)
            self.state = 2973
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2974
            self.table_hint()
            self.state = 2979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2975
                self.match(tsqlParser.COMMA)
                self.state = 2976
                self.table_hint()
                self.state = 2981
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2982
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_hintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOEXPAND(self):
            return self.getToken(tsqlParser.NOEXPAND, 0)

        def INDEX(self):
            return self.getToken(tsqlParser.INDEX, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LR_BRACKET)
            else:
                return self.getToken(tsqlParser.LR_BRACKET, i)

        def index_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Index_valueContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Index_valueContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.RR_BRACKET)
            else:
                return self.getToken(tsqlParser.RR_BRACKET, i)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def FORCESEEK(self):
            return self.getToken(tsqlParser.FORCESEEK, 0)

        def SERIALIZABLE(self):
            return self.getToken(tsqlParser.SERIALIZABLE, 0)

        def SNAPSHOT(self):
            return self.getToken(tsqlParser.SNAPSHOT, 0)

        def SPATIAL_WINDOW_MAX_CELLS(self):
            return self.getToken(tsqlParser.SPATIAL_WINDOW_MAX_CELLS, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ID)
            else:
                return self.getToken(tsqlParser.ID, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_hint




    def table_hint(self):

        localctx = tsqlParser.Table_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_table_hint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2985
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.NOEXPAND:
                self.state = 2984
                self.match(tsqlParser.NOEXPAND)


            self.state = 3025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,417,self._ctx)
            if la_ == 1:
                self.state = 2987
                self.match(tsqlParser.INDEX)
                self.state = 2988
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2989
                self.index_value()
                self.state = 2994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 2990
                    self.match(tsqlParser.COMMA)
                    self.state = 2991
                    self.index_value()
                    self.state = 2996
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2997
                self.match(tsqlParser.RR_BRACKET)

            elif la_ == 2:
                self.state = 2999
                self.match(tsqlParser.INDEX)
                self.state = 3000
                self.match(tsqlParser.EQUAL)
                self.state = 3001
                self.index_value()

            elif la_ == 3:
                self.state = 3002
                self.match(tsqlParser.FORCESEEK)
                self.state = 3017
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.LR_BRACKET:
                    self.state = 3003
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 3004
                    self.index_value()
                    self.state = 3005
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 3006
                    self.match(tsqlParser.ID)
                    self.state = 3011
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==tsqlParser.COMMA:
                        self.state = 3007
                        self.match(tsqlParser.COMMA)
                        self.state = 3008
                        self.match(tsqlParser.ID)
                        self.state = 3013
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3014
                    self.match(tsqlParser.RR_BRACKET)
                    self.state = 3015
                    self.match(tsqlParser.RR_BRACKET)



            elif la_ == 4:
                self.state = 3019
                self.match(tsqlParser.SERIALIZABLE)

            elif la_ == 5:
                self.state = 3020
                self.match(tsqlParser.SNAPSHOT)

            elif la_ == 6:
                self.state = 3021
                self.match(tsqlParser.SPATIAL_WINDOW_MAX_CELLS)
                self.state = 3022
                self.match(tsqlParser.EQUAL)
                self.state = 3023
                self.match(tsqlParser.DECIMAL)

            elif la_ == 7:
                self.state = 3024
                self.match(tsqlParser.ID)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_index_value




    def index_value(self):

        localctx = tsqlParser.Index_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_index_value)
        try:
            self.state = 3029
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3027
                self.r_id()
                pass
            elif token in [tsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3028
                self.match(tsqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_alias_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_aliasContext,i)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_alias_list




    def column_alias_list(self):

        localctx = tsqlParser.Column_alias_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_column_alias_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3031
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3032
            self.column_alias()
            self.state = 3037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 3033
                self.match(tsqlParser.COMMA)
                self.state = 3034
                self.column_alias()
                self.state = 3039
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3040
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_alias




    def column_alias(self):

        localctx = tsqlParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_column_alias)
        try:
            self.state = 3044
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3042
                self.r_id()
                pass
            elif token in [tsqlParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3043
                self.match(tsqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_starContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(tsqlParser.STAR, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_a_star




    def a_star(self):

        localctx = tsqlParser.A_starContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_a_star)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3046
            self.match(tsqlParser.STAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_value_constructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(tsqlParser.VALUES, 0)

        def value_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Value_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Value_listContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_value_constructor




    def table_value_constructor(self):

        localctx = tsqlParser.Table_value_constructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_table_value_constructor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3048
            self.match(tsqlParser.VALUES)
            self.state = 3049
            self.value_list()
            self.state = 3054
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,421,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3050
                    self.match(tsqlParser.COMMA)
                    self.state = 3051
                    self.value_list() 
                self.state = 3056
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,421,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_expression_list




    def expression_list(self):

        localctx = tsqlParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3057
            self.expression(0)
            self.state = 3062
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 3058
                self.match(tsqlParser.COMMA)
                self.state = 3059
                self.expression(0)
                self.state = 3064
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_value_list




    def value_list(self):

        localctx = tsqlParser.Value_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_value_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3065
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3066
            self.expression_list()
            self.state = 3067
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Next_value_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEXT(self):
            return self.getToken(tsqlParser.NEXT, 0)

        def VALUE(self):
            return self.getToken(tsqlParser.VALUE, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_next_value_for




    def next_value_for(self):

        localctx = tsqlParser.Next_value_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_next_value_for)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3069
            self.match(tsqlParser.NEXT)
            self.state = 3070
            self.match(tsqlParser.VALUE)
            self.state = 3071
            self.match(tsqlParser.FOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Next_value_for_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.args = None # Func_proc_nameContext

        def next_value_for(self):
            return self.getTypedRuleContext(tsqlParser.Next_value_forContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_next_value_for_function




    def next_value_for_function(self):

        localctx = tsqlParser.Next_value_for_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_next_value_for_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3073
            self.next_value_for()
            self.state = 3074
            localctx.args = self.func_proc_name()
            self.state = 3075
            self.over_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ranking_windowed_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def RANK(self):
            return self.getToken(tsqlParser.RANK, 0)

        def DENSE_RANK(self):
            return self.getToken(tsqlParser.DENSE_RANK, 0)

        def ROW_NUMBER(self):
            return self.getToken(tsqlParser.ROW_NUMBER, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def NTILE(self):
            return self.getToken(tsqlParser.NTILE, 0)

        def FIRST_VALUE(self):
            return self.getToken(tsqlParser.FIRST_VALUE, 0)

        def LAST_VALUE(self):
            return self.getToken(tsqlParser.LAST_VALUE, 0)

        def LEAD(self):
            return self.getToken(tsqlParser.LEAD, 0)

        def LAG(self):
            return self.getToken(tsqlParser.LAG, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_ranking_windowed_function




    def ranking_windowed_function(self):

        localctx = tsqlParser.Ranking_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_ranking_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 3100
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.DENSE_RANK, tsqlParser.RANK, tsqlParser.ROW_NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3077
                _la = self._input.LA(1)
                if not(_la==tsqlParser.DENSE_RANK or _la==tsqlParser.RANK or _la==tsqlParser.ROW_NUMBER):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3078
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3079
                self.match(tsqlParser.RR_BRACKET)
                self.state = 3080
                self.over_clause()
                pass
            elif token in [tsqlParser.FIRST_VALUE, tsqlParser.LAST_VALUE, tsqlParser.NTILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3081
                _la = self._input.LA(1)
                if not(((((_la - 282)) & ~0x3f) == 0 and ((1 << (_la - 282)) & ((1 << (tsqlParser.FIRST_VALUE - 282)) | (1 << (tsqlParser.LAST_VALUE - 282)) | (1 << (tsqlParser.NTILE - 282)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3082
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3083
                self.expression(0)
                self.state = 3084
                self.match(tsqlParser.RR_BRACKET)
                self.state = 3085
                self.over_clause()
                pass
            elif token in [tsqlParser.LAG, tsqlParser.LEAD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3087
                _la = self._input.LA(1)
                if not(_la==tsqlParser.LAG or _la==tsqlParser.LEAD):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3088
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3089
                self.expression(0)
                self.state = 3094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 3090
                    self.match(tsqlParser.COMMA)
                    self.state = 3091
                    self.expression(0)
                    self.state = 3096
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3097
                self.match(tsqlParser.RR_BRACKET)
                self.state = 3098
                self.over_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_windowed_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.args = None # Token

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def AVG(self):
            return self.getToken(tsqlParser.AVG, 0)

        def MAX(self):
            return self.getToken(tsqlParser.MAX, 0)

        def MIN(self):
            return self.getToken(tsqlParser.MIN, 0)

        def SUM(self):
            return self.getToken(tsqlParser.SUM, 0)

        def STDEV(self):
            return self.getToken(tsqlParser.STDEV, 0)

        def STDEVP(self):
            return self.getToken(tsqlParser.STDEVP, 0)

        def VAR(self):
            return self.getToken(tsqlParser.VAR, 0)

        def VARP(self):
            return self.getToken(tsqlParser.VARP, 0)

        def all_distinct(self):
            return self.getTypedRuleContext(tsqlParser.All_distinctContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def COUNT(self):
            return self.getToken(tsqlParser.COUNT, 0)

        def COUNT_BIG(self):
            return self.getToken(tsqlParser.COUNT_BIG, 0)

        def STAR(self):
            return self.getToken(tsqlParser.STAR, 0)

        def CHECKSUM_AGG(self):
            return self.getToken(tsqlParser.CHECKSUM_AGG, 0)

        def GROUPING(self):
            return self.getToken(tsqlParser.GROUPING, 0)

        def GROUPING_ID(self):
            return self.getToken(tsqlParser.GROUPING_ID, 0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_aggregate_windowed_function




    def aggregate_windowed_function(self):

        localctx = tsqlParser.Aggregate_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_aggregate_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 3143
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.AVG, tsqlParser.MAX, tsqlParser.MIN, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.VAR, tsqlParser.VARP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3102
                _la = self._input.LA(1)
                if not(_la==tsqlParser.AVG or _la==tsqlParser.MAX or _la==tsqlParser.MIN or ((((_la - 406)) & ~0x3f) == 0 and ((1 << (_la - 406)) & ((1 << (tsqlParser.STDEV - 406)) | (1 << (tsqlParser.STDEVP - 406)) | (1 << (tsqlParser.SUM - 406)) | (1 << (tsqlParser.VAR - 406)) | (1 << (tsqlParser.VARP - 406)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3103
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3105
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ALL or _la==tsqlParser.DISTINCT:
                    self.state = 3104
                    self.all_distinct()


                self.state = 3107
                self.expression(0)
                self.state = 3108
                self.match(tsqlParser.RR_BRACKET)
                self.state = 3110
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,426,self._ctx)
                if la_ == 1:
                    self.state = 3109
                    self.over_clause()


                pass
            elif token in [tsqlParser.COUNT, tsqlParser.COUNT_BIG]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3112
                _la = self._input.LA(1)
                if not(_la==tsqlParser.COUNT or _la==tsqlParser.COUNT_BIG):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3113
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3119
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.STAR]:
                    self.state = 3114
                    localctx.args = self.match(tsqlParser.STAR)
                    pass
                elif token in [tsqlParser.ALL, tsqlParser.CASE, tsqlParser.COALESCE, tsqlParser.CONVERT, tsqlParser.CURRENT_TIMESTAMP, tsqlParser.CURRENT_USER, tsqlParser.DEFAULT, tsqlParser.DISTINCT, tsqlParser.EXP, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.IDENTITY, tsqlParser.IIF, tsqlParser.LEFT, tsqlParser.LOG, tsqlParser.LOG10, tsqlParser.NEXT, tsqlParser.NULL_, tsqlParser.NULLIF, tsqlParser.NUMERIC, tsqlParser.OVER, tsqlParser.RIGHT, tsqlParser.SESSION_USER, tsqlParser.SIGN, tsqlParser.SYSTEM_USER, tsqlParser.TRY_CAST, tsqlParser.TRY_CONVERT, tsqlParser.TRY_PARSE, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.BINARY_CHECKSUM, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CEILING, tsqlParser.CHECKSUM, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COS, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DATEADD, tsqlParser.DATEDIFF, tsqlParser.DATENAME, tsqlParser.DATEPART, tsqlParser.DATETIMEOFFSETFROMPARTS, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FLOOR, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MIN_ACTIVE_ROWVERSION, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARSE, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PERCENTILE_CONT, tsqlParser.POWER, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROUND, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIN, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.STRING_AGG, tsqlParser.STRING_SPLIT, tsqlParser.SUM, tsqlParser.SQRT, tsqlParser.SQUARE, tsqlParser.TAN, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.ID, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.LR_BRACKET, tsqlParser.PLUS, tsqlParser.MINUS, tsqlParser.BIT_NOT]:
                    self.state = 3116
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.ALL or _la==tsqlParser.DISTINCT:
                        self.state = 3115
                        self.all_distinct()


                    self.state = 3118
                    self.expression(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3121
                self.match(tsqlParser.RR_BRACKET)
                self.state = 3123
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,429,self._ctx)
                if la_ == 1:
                    self.state = 3122
                    self.over_clause()


                pass
            elif token in [tsqlParser.CHECKSUM_AGG]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3125
                self.match(tsqlParser.CHECKSUM_AGG)
                self.state = 3126
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ALL or _la==tsqlParser.DISTINCT:
                    self.state = 3127
                    self.all_distinct()


                self.state = 3130
                self.expression(0)
                self.state = 3131
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.GROUPING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3133
                self.match(tsqlParser.GROUPING)
                self.state = 3134
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3135
                self.expression(0)
                self.state = 3136
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.GROUPING_ID]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3138
                self.match(tsqlParser.GROUPING_ID)
                self.state = 3139
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3140
                self.expression_list()
                self.state = 3141
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_distinctContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(tsqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_all_distinct




    def all_distinct(self):

        localctx = tsqlParser.All_distinctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_all_distinct)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3145
            _la = self._input.LA(1)
            if not(_la==tsqlParser.ALL or _la==tsqlParser.DISTINCT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Over_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(tsqlParser.OVER, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def PARTITION(self):
            return self.getToken(tsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(tsqlParser.BY, 0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(tsqlParser.Order_by_clauseContext,0)


        def row_or_range_clause(self):
            return self.getTypedRuleContext(tsqlParser.Row_or_range_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_over_clause




    def over_clause(self):

        localctx = tsqlParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3147
            self.match(tsqlParser.OVER)
            self.state = 3148
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.PARTITION:
                self.state = 3149
                self.match(tsqlParser.PARTITION)
                self.state = 3150
                self.match(tsqlParser.BY)
                self.state = 3151
                self.expression_list()


            self.state = 3155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ORDER:
                self.state = 3154
                self.order_by_clause()


            self.state = 3158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.RANGE or _la==tsqlParser.ROWS:
                self.state = 3157
                self.row_or_range_clause()


            self.state = 3160
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_or_range_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_extent(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_extentContext,0)


        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(tsqlParser.RANGE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_row_or_range_clause




    def row_or_range_clause(self):

        localctx = tsqlParser.Row_or_range_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_row_or_range_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3162
            _la = self._input.LA(1)
            if not(_la==tsqlParser.RANGE or _la==tsqlParser.ROWS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3163
            self.window_frame_extent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_extentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_preceding(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_precedingContext,0)


        def BETWEEN(self):
            return self.getToken(tsqlParser.BETWEEN, 0)

        def window_frame_bound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Window_frame_boundContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Window_frame_boundContext,i)


        def AND(self):
            return self.getToken(tsqlParser.AND, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_extent




    def window_frame_extent(self):

        localctx = tsqlParser.Window_frame_extentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_window_frame_extent)
        try:
            self.state = 3171
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CURRENT, tsqlParser.UNBOUNDED, tsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3165
                self.window_frame_preceding()
                pass
            elif token in [tsqlParser.BETWEEN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3166
                self.match(tsqlParser.BETWEEN)
                self.state = 3167
                self.window_frame_bound()
                self.state = 3168
                self.match(tsqlParser.AND)
                self.state = 3169
                self.window_frame_bound()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_boundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_preceding(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_precedingContext,0)


        def window_frame_following(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_followingContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_bound




    def window_frame_bound(self):

        localctx = tsqlParser.Window_frame_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_window_frame_bound)
        try:
            self.state = 3175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,436,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3173
                self.window_frame_preceding()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3174
                self.window_frame_following()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_precedingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(tsqlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(tsqlParser.PRECEDING, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(tsqlParser.ROW, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_preceding




    def window_frame_preceding(self):

        localctx = tsqlParser.Window_frame_precedingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_window_frame_preceding)
        try:
            self.state = 3183
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.UNBOUNDED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3177
                self.match(tsqlParser.UNBOUNDED)
                self.state = 3178
                self.match(tsqlParser.PRECEDING)
                pass
            elif token in [tsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3179
                self.match(tsqlParser.DECIMAL)
                self.state = 3180
                self.match(tsqlParser.PRECEDING)
                pass
            elif token in [tsqlParser.CURRENT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3181
                self.match(tsqlParser.CURRENT)
                self.state = 3182
                self.match(tsqlParser.ROW)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_followingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(tsqlParser.UNBOUNDED, 0)

        def FOLLOWING(self):
            return self.getToken(tsqlParser.FOLLOWING, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_following




    def window_frame_following(self):

        localctx = tsqlParser.Window_frame_followingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_window_frame_following)
        try:
            self.state = 3189
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.UNBOUNDED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3185
                self.match(tsqlParser.UNBOUNDED)
                self.state = 3186
                self.match(tsqlParser.FOLLOWING)
                pass
            elif token in [tsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3187
                self.match(tsqlParser.DECIMAL)
                self.state = 3188
                self.match(tsqlParser.FOLLOWING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_database_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILESTREAM(self):
            return self.getToken(tsqlParser.FILESTREAM, 0)

        def database_filestream_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Database_filestream_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Database_filestream_optionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def DEFAULT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_LANGUAGE, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def DEFAULT_FULLTEXT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0)

        def NESTED_TRIGGERS(self):
            return self.getToken(tsqlParser.NESTED_TRIGGERS, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def TRANSFORM_NOISE_WORDS(self):
            return self.getToken(tsqlParser.TRANSFORM_NOISE_WORDS, 0)

        def TWO_DIGIT_YEAR_CUTOFF(self):
            return self.getToken(tsqlParser.TWO_DIGIT_YEAR_CUTOFF, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def DB_CHAINING(self):
            return self.getToken(tsqlParser.DB_CHAINING, 0)

        def TRUSTWORTHY(self):
            return self.getToken(tsqlParser.TRUSTWORTHY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_database_option




    def create_database_option(self):

        localctx = tsqlParser.Create_database_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_create_database_option)
        self._la = 0 # Token type
        try:
            self.state = 3225
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FILESTREAM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3191
                self.match(tsqlParser.FILESTREAM)

                self.state = 3192
                self.database_filestream_option()
                self.state = 3197
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,439,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3193
                        self.match(tsqlParser.COMMA)
                        self.state = 3194
                        self.database_filestream_option() 
                    self.state = 3199
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,439,self._ctx)

                pass
            elif token in [tsqlParser.DEFAULT_LANGUAGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3200
                self.match(tsqlParser.DEFAULT_LANGUAGE)
                self.state = 3201
                self.match(tsqlParser.EQUAL)
                self.state = 3204
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 3202
                    self.r_id()
                    pass
                elif token in [tsqlParser.STRING]:
                    self.state = 3203
                    self.match(tsqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.DEFAULT_FULLTEXT_LANGUAGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3206
                self.match(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE)
                self.state = 3207
                self.match(tsqlParser.EQUAL)
                self.state = 3210
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 3208
                    self.r_id()
                    pass
                elif token in [tsqlParser.STRING]:
                    self.state = 3209
                    self.match(tsqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.NESTED_TRIGGERS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3212
                self.match(tsqlParser.NESTED_TRIGGERS)
                self.state = 3213
                self.match(tsqlParser.EQUAL)
                self.state = 3214
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TRANSFORM_NOISE_WORDS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3215
                self.match(tsqlParser.TRANSFORM_NOISE_WORDS)
                self.state = 3216
                self.match(tsqlParser.EQUAL)
                self.state = 3217
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TWO_DIGIT_YEAR_CUTOFF]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3218
                self.match(tsqlParser.TWO_DIGIT_YEAR_CUTOFF)
                self.state = 3219
                self.match(tsqlParser.EQUAL)
                self.state = 3220
                self.match(tsqlParser.DECIMAL)
                pass
            elif token in [tsqlParser.DB_CHAINING]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3221
                self.match(tsqlParser.DB_CHAINING)
                self.state = 3222
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TRUSTWORTHY]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3223
                self.match(tsqlParser.TRUSTWORTHY)
                self.state = 3224
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_filestream_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def NON_TRANSACTED_ACCESS(self):
            return self.getToken(tsqlParser.NON_TRANSACTED_ACCESS, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DIRECTORY_NAME(self):
            return self.getToken(tsqlParser.DIRECTORY_NAME, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def FULL(self):
            return self.getToken(tsqlParser.FULL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_database_filestream_option




    def database_filestream_option(self):

        localctx = tsqlParser.Database_filestream_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_database_filestream_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3227
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3234
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.NON_TRANSACTED_ACCESS]:
                self.state = 3228
                self.match(tsqlParser.NON_TRANSACTED_ACCESS)
                self.state = 3229
                self.match(tsqlParser.EQUAL)
                self.state = 3230
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FULL or _la==tsqlParser.OFF or _la==tsqlParser.READ_ONLY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.DIRECTORY_NAME]:
                self.state = 3231
                self.match(tsqlParser.DIRECTORY_NAME)
                self.state = 3232
                self.match(tsqlParser.EQUAL)
                self.state = 3233
                self.match(tsqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3236
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_file_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def file_group(self):
            return self.getTypedRuleContext(tsqlParser.File_groupContext,0)


        def file_spec(self):
            return self.getTypedRuleContext(tsqlParser.File_specContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_database_file_spec




    def database_file_spec(self):

        localctx = tsqlParser.Database_file_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_database_file_spec)
        try:
            self.state = 3240
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FILEGROUP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3238
                self.file_group()
                pass
            elif token in [tsqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3239
                self.file_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILEGROUP(self):
            return self.getToken(tsqlParser.FILEGROUP, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def file_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.File_specContext)
            else:
                return self.getTypedRuleContext(tsqlParser.File_specContext,i)


        def CONTAINS(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.CONTAINS)
            else:
                return self.getToken(tsqlParser.CONTAINS, i)

        def FILESTREAM(self):
            return self.getToken(tsqlParser.FILESTREAM, 0)

        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def MEMORY_OPTIMIZED_DATA(self):
            return self.getToken(tsqlParser.MEMORY_OPTIMIZED_DATA, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_file_group




    def file_group(self):

        localctx = tsqlParser.File_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_file_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3242
            self.match(tsqlParser.FILEGROUP)
            self.state = 3243
            self.r_id()
            self.state = 3246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,445,self._ctx)
            if la_ == 1:
                self.state = 3244
                self.match(tsqlParser.CONTAINS)
                self.state = 3245
                self.match(tsqlParser.FILESTREAM)


            self.state = 3249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.DEFAULT:
                self.state = 3248
                self.match(tsqlParser.DEFAULT)


            self.state = 3253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.CONTAINS:
                self.state = 3251
                self.match(tsqlParser.CONTAINS)
                self.state = 3252
                self.match(tsqlParser.MEMORY_OPTIMIZED_DATA)


            self.state = 3255
            self.file_spec()
            self.state = 3260
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,448,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3256
                    self.match(tsqlParser.COMMA)
                    self.state = 3257
                    self.file_spec() 
                self.state = 3262
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,448,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.r_file = None # Token

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def NAME(self):
            return self.getToken(tsqlParser.NAME, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.EQUAL)
            else:
                return self.getToken(tsqlParser.EQUAL, i)

        def FILENAME(self):
            return self.getToken(tsqlParser.FILENAME, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.STRING)
            else:
                return self.getToken(tsqlParser.STRING, i)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def SIZE(self):
            return self.getToken(tsqlParser.SIZE, 0)

        def file_size(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.File_sizeContext)
            else:
                return self.getTypedRuleContext(tsqlParser.File_sizeContext,i)


        def MAXSIZE(self):
            return self.getToken(tsqlParser.MAXSIZE, 0)

        def FILEGROWTH(self):
            return self.getToken(tsqlParser.FILEGROWTH, 0)

        def UNLIMITED(self):
            return self.getToken(tsqlParser.UNLIMITED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_file_spec




    def file_spec(self):

        localctx = tsqlParser.File_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_file_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3263
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3264
            self.match(tsqlParser.NAME)
            self.state = 3265
            self.match(tsqlParser.EQUAL)
            self.state = 3268
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.state = 3266
                self.r_id()
                pass
            elif token in [tsqlParser.STRING]:
                self.state = 3267
                self.match(tsqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COMMA:
                self.state = 3270
                self.match(tsqlParser.COMMA)


            self.state = 3273
            self.match(tsqlParser.FILENAME)
            self.state = 3274
            self.match(tsqlParser.EQUAL)
            self.state = 3275
            localctx.r_file = self.match(tsqlParser.STRING)
            self.state = 3277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COMMA:
                self.state = 3276
                self.match(tsqlParser.COMMA)


            self.state = 3285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.SIZE:
                self.state = 3279
                self.match(tsqlParser.SIZE)
                self.state = 3280
                self.match(tsqlParser.EQUAL)
                self.state = 3281
                self.file_size()
                self.state = 3283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 3282
                    self.match(tsqlParser.COMMA)




            self.state = 3296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.MAXSIZE:
                self.state = 3287
                self.match(tsqlParser.MAXSIZE)
                self.state = 3288
                self.match(tsqlParser.EQUAL)
                self.state = 3291
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.DECIMAL]:
                    self.state = 3289
                    self.file_size()
                    pass
                elif token in [tsqlParser.UNLIMITED]:
                    self.state = 3290
                    self.match(tsqlParser.UNLIMITED)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3294
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 3293
                    self.match(tsqlParser.COMMA)




            self.state = 3304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FILEGROWTH:
                self.state = 3298
                self.match(tsqlParser.FILEGROWTH)
                self.state = 3299
                self.match(tsqlParser.EQUAL)
                self.state = 3300
                self.file_size()
                self.state = 3302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 3301
                    self.match(tsqlParser.COMMA)




            self.state = 3306
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.server = None # R_idContext
            self.database = None # R_idContext
            self.schema = None # R_idContext
            self.table = None # R_idContext

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DOT)
            else:
                return self.getToken(tsqlParser.DOT, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_full_table_name




    def full_table_name(self):

        localctx = tsqlParser.Full_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_full_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3325
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,460,self._ctx)
            if la_ == 1:
                self.state = 3308
                localctx.server = self.r_id()
                self.state = 3309
                self.match(tsqlParser.DOT)
                self.state = 3310
                localctx.database = self.r_id()
                self.state = 3311
                self.match(tsqlParser.DOT)
                self.state = 3312
                localctx.schema = self.r_id()
                self.state = 3313
                self.match(tsqlParser.DOT)

            elif la_ == 2:
                self.state = 3315
                localctx.database = self.r_id()
                self.state = 3316
                self.match(tsqlParser.DOT)
                self.state = 3318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (tsqlParser.FILLFACTOR - 71)) | (1 << (tsqlParser.FORCESEEK - 71)) | (1 << (tsqlParser.NEXT - 71)) | (1 << (tsqlParser.NUMERIC - 71)))) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (tsqlParser.VALUE - 196)) | (1 << (tsqlParser.ABSOLUTE - 196)) | (1 << (tsqlParser.APPLY - 196)) | (1 << (tsqlParser.AUTO - 196)) | (1 << (tsqlParser.AVG - 196)) | (1 << (tsqlParser.BASE64 - 196)) | (1 << (tsqlParser.CALLER - 196)) | (1 << (tsqlParser.CAST - 196)) | (1 << (tsqlParser.CATCH - 196)) | (1 << (tsqlParser.CHECKSUM_AGG - 196)) | (1 << (tsqlParser.COMMITTED - 196)) | (1 << (tsqlParser.CONCAT - 196)) | (1 << (tsqlParser.CONTROL - 196)) | (1 << (tsqlParser.COOKIE - 196)) | (1 << (tsqlParser.COUNT - 196)) | (1 << (tsqlParser.COUNT_BIG - 196)) | (1 << (tsqlParser.DATE - 196)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (tsqlParser.DELAY - 261)) | (1 << (tsqlParser.DELETED - 261)) | (1 << (tsqlParser.DENSE_RANK - 261)) | (1 << (tsqlParser.DISABLE - 261)) | (1 << (tsqlParser.DYNAMIC - 261)) | (1 << (tsqlParser.ENCRYPTION - 261)) | (1 << (tsqlParser.EXIST - 261)) | (1 << (tsqlParser.EXPAND - 261)) | (1 << (tsqlParser.FAST - 261)) | (1 << (tsqlParser.FAST_FORWARD - 261)) | (1 << (tsqlParser.FIRST - 261)) | (1 << (tsqlParser.FIRST_VALUE - 261)) | (1 << (tsqlParser.FOLLOWING - 261)) | (1 << (tsqlParser.FORCE - 261)) | (1 << (tsqlParser.FORCED - 261)) | (1 << (tsqlParser.FORWARD_ONLY - 261)) | (1 << (tsqlParser.FULLSCAN - 261)) | (1 << (tsqlParser.GLOBAL - 261)) | (1 << (tsqlParser.GROUPING - 261)) | (1 << (tsqlParser.GROUPING_ID - 261)) | (1 << (tsqlParser.HASH - 261)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 261)) | (1 << (tsqlParser.IMPERSONATE - 261)) | (1 << (tsqlParser.INSENSITIVE - 261)) | (1 << (tsqlParser.INSERTED - 261)) | (1 << (tsqlParser.ISOLATION - 261)) | (1 << (tsqlParser.IO - 261)) | (1 << (tsqlParser.KEEP - 261)) | (1 << (tsqlParser.KEEPFIXED - 261)) | (1 << (tsqlParser.KEYSET - 261)) | (1 << (tsqlParser.LAG - 261)) | (1 << (tsqlParser.LAST - 261)) | (1 << (tsqlParser.LAST_VALUE - 261)) | (1 << (tsqlParser.LEAD - 261)) | (1 << (tsqlParser.LEVEL - 261)) | (1 << (tsqlParser.LOCAL - 261)) | (1 << (tsqlParser.LOCK_ESCALATION - 261)) | (1 << (tsqlParser.LOGIN - 261)) | (1 << (tsqlParser.LOOP - 261)) | (1 << (tsqlParser.MARK - 261)) | (1 << (tsqlParser.MAX - 261)) | (1 << (tsqlParser.MAXDOP - 261)) | (1 << (tsqlParser.MAXRECURSION - 261)))) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & ((1 << (tsqlParser.MIN - 328)) | (1 << (tsqlParser.MODIFY - 328)) | (1 << (tsqlParser.NAME - 328)) | (1 << (tsqlParser.NOCOUNT - 328)) | (1 << (tsqlParser.NODES - 328)) | (1 << (tsqlParser.NOEXPAND - 328)) | (1 << (tsqlParser.NORECOMPUTE - 328)) | (1 << (tsqlParser.NTILE - 328)) | (1 << (tsqlParser.NUMBER - 328)) | (1 << (tsqlParser.OFFSET - 328)) | (1 << (tsqlParser.ONLINE - 328)) | (1 << (tsqlParser.ONLY - 328)) | (1 << (tsqlParser.OPTIMISTIC - 328)) | (1 << (tsqlParser.OPTIMIZE - 328)) | (1 << (tsqlParser.OUT - 328)) | (1 << (tsqlParser.OUTPUT - 328)) | (1 << (tsqlParser.OWNER - 328)) | (1 << (tsqlParser.PARAMETERIZATION - 328)) | (1 << (tsqlParser.PARTITION - 328)) | (1 << (tsqlParser.PATH - 328)) | (1 << (tsqlParser.PRECEDING - 328)) | (1 << (tsqlParser.PRIOR - 328)) | (1 << (tsqlParser.PRIVILEGES - 328)) | (1 << (tsqlParser.QUERY - 328)) | (1 << (tsqlParser.RANGE - 328)) | (1 << (tsqlParser.RANK - 328)) | (1 << (tsqlParser.READONLY - 328)) | (1 << (tsqlParser.READ_ONLY - 328)) | (1 << (tsqlParser.RECOMPILE - 328)) | (1 << (tsqlParser.RELATIVE - 328)) | (1 << (tsqlParser.REMOTE - 328)) | (1 << (tsqlParser.REPEATABLE - 328)) | (1 << (tsqlParser.ROBUST - 328)) | (1 << (tsqlParser.ROOT - 328)) | (1 << (tsqlParser.ROW - 328)) | (1 << (tsqlParser.ROWGUID - 328)) | (1 << (tsqlParser.ROWS - 328)) | (1 << (tsqlParser.ROW_NUMBER - 328)) | (1 << (tsqlParser.SAMPLE - 328)) | (1 << (tsqlParser.SCHEMABINDING - 328)) | (1 << (tsqlParser.SCROLL - 328)) | (1 << (tsqlParser.SCROLL_LOCKS - 328)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (tsqlParser.SELF - 393)) | (1 << (tsqlParser.SERIALIZABLE - 393)) | (1 << (tsqlParser.SIMPLE - 393)) | (1 << (tsqlParser.SIZE - 393)) | (1 << (tsqlParser.SNAPSHOT - 393)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 393)) | (1 << (tsqlParser.STATIC - 393)) | (1 << (tsqlParser.STATS_STREAM - 393)) | (1 << (tsqlParser.STDEV - 393)) | (1 << (tsqlParser.STDEVP - 393)) | (1 << (tsqlParser.SUM - 393)) | (1 << (tsqlParser.TEXTIMAGE_ON - 393)) | (1 << (tsqlParser.THROW - 393)) | (1 << (tsqlParser.TIES - 393)) | (1 << (tsqlParser.TIME - 393)) | (1 << (tsqlParser.TRY - 393)) | (1 << (tsqlParser.TYPE - 393)) | (1 << (tsqlParser.TYPE_WARNING - 393)) | (1 << (tsqlParser.UNBOUNDED - 393)) | (1 << (tsqlParser.UNCOMMITTED - 393)) | (1 << (tsqlParser.UNKNOWN - 393)) | (1 << (tsqlParser.USING - 393)) | (1 << (tsqlParser.VAR - 393)) | (1 << (tsqlParser.VARP - 393)) | (1 << (tsqlParser.VIEWS - 393)) | (1 << (tsqlParser.VIEW_METADATA - 393)) | (1 << (tsqlParser.WORK - 393)) | (1 << (tsqlParser.XML - 393)) | (1 << (tsqlParser.XMLNAMESPACES - 393)) | (1 << (tsqlParser.ZONE - 393)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 393)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 393)) | (1 << (tsqlParser.ID - 393)))) != 0):
                    self.state = 3317
                    localctx.schema = self.r_id()


                self.state = 3320
                self.match(tsqlParser.DOT)

            elif la_ == 3:
                self.state = 3322
                localctx.schema = self.r_id()
                self.state = 3323
                self.match(tsqlParser.DOT)


            self.state = 3327
            localctx.table = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext
            self.schema = None # R_idContext
            self.table = None # R_idContext

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DOT)
            else:
                return self.getToken(tsqlParser.DOT, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_name




    def table_name(self):

        localctx = tsqlParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,462,self._ctx)
            if la_ == 1:
                self.state = 3329
                localctx.database = self.r_id()
                self.state = 3330
                self.match(tsqlParser.DOT)
                self.state = 3332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (tsqlParser.FILLFACTOR - 71)) | (1 << (tsqlParser.FORCESEEK - 71)) | (1 << (tsqlParser.NEXT - 71)) | (1 << (tsqlParser.NUMERIC - 71)))) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (tsqlParser.VALUE - 196)) | (1 << (tsqlParser.ABSOLUTE - 196)) | (1 << (tsqlParser.APPLY - 196)) | (1 << (tsqlParser.AUTO - 196)) | (1 << (tsqlParser.AVG - 196)) | (1 << (tsqlParser.BASE64 - 196)) | (1 << (tsqlParser.CALLER - 196)) | (1 << (tsqlParser.CAST - 196)) | (1 << (tsqlParser.CATCH - 196)) | (1 << (tsqlParser.CHECKSUM_AGG - 196)) | (1 << (tsqlParser.COMMITTED - 196)) | (1 << (tsqlParser.CONCAT - 196)) | (1 << (tsqlParser.CONTROL - 196)) | (1 << (tsqlParser.COOKIE - 196)) | (1 << (tsqlParser.COUNT - 196)) | (1 << (tsqlParser.COUNT_BIG - 196)) | (1 << (tsqlParser.DATE - 196)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (tsqlParser.DELAY - 261)) | (1 << (tsqlParser.DELETED - 261)) | (1 << (tsqlParser.DENSE_RANK - 261)) | (1 << (tsqlParser.DISABLE - 261)) | (1 << (tsqlParser.DYNAMIC - 261)) | (1 << (tsqlParser.ENCRYPTION - 261)) | (1 << (tsqlParser.EXIST - 261)) | (1 << (tsqlParser.EXPAND - 261)) | (1 << (tsqlParser.FAST - 261)) | (1 << (tsqlParser.FAST_FORWARD - 261)) | (1 << (tsqlParser.FIRST - 261)) | (1 << (tsqlParser.FIRST_VALUE - 261)) | (1 << (tsqlParser.FOLLOWING - 261)) | (1 << (tsqlParser.FORCE - 261)) | (1 << (tsqlParser.FORCED - 261)) | (1 << (tsqlParser.FORWARD_ONLY - 261)) | (1 << (tsqlParser.FULLSCAN - 261)) | (1 << (tsqlParser.GLOBAL - 261)) | (1 << (tsqlParser.GROUPING - 261)) | (1 << (tsqlParser.GROUPING_ID - 261)) | (1 << (tsqlParser.HASH - 261)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 261)) | (1 << (tsqlParser.IMPERSONATE - 261)) | (1 << (tsqlParser.INSENSITIVE - 261)) | (1 << (tsqlParser.INSERTED - 261)) | (1 << (tsqlParser.ISOLATION - 261)) | (1 << (tsqlParser.IO - 261)) | (1 << (tsqlParser.KEEP - 261)) | (1 << (tsqlParser.KEEPFIXED - 261)) | (1 << (tsqlParser.KEYSET - 261)) | (1 << (tsqlParser.LAG - 261)) | (1 << (tsqlParser.LAST - 261)) | (1 << (tsqlParser.LAST_VALUE - 261)) | (1 << (tsqlParser.LEAD - 261)) | (1 << (tsqlParser.LEVEL - 261)) | (1 << (tsqlParser.LOCAL - 261)) | (1 << (tsqlParser.LOCK_ESCALATION - 261)) | (1 << (tsqlParser.LOGIN - 261)) | (1 << (tsqlParser.LOOP - 261)) | (1 << (tsqlParser.MARK - 261)) | (1 << (tsqlParser.MAX - 261)) | (1 << (tsqlParser.MAXDOP - 261)) | (1 << (tsqlParser.MAXRECURSION - 261)))) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & ((1 << (tsqlParser.MIN - 328)) | (1 << (tsqlParser.MODIFY - 328)) | (1 << (tsqlParser.NAME - 328)) | (1 << (tsqlParser.NOCOUNT - 328)) | (1 << (tsqlParser.NODES - 328)) | (1 << (tsqlParser.NOEXPAND - 328)) | (1 << (tsqlParser.NORECOMPUTE - 328)) | (1 << (tsqlParser.NTILE - 328)) | (1 << (tsqlParser.NUMBER - 328)) | (1 << (tsqlParser.OFFSET - 328)) | (1 << (tsqlParser.ONLINE - 328)) | (1 << (tsqlParser.ONLY - 328)) | (1 << (tsqlParser.OPTIMISTIC - 328)) | (1 << (tsqlParser.OPTIMIZE - 328)) | (1 << (tsqlParser.OUT - 328)) | (1 << (tsqlParser.OUTPUT - 328)) | (1 << (tsqlParser.OWNER - 328)) | (1 << (tsqlParser.PARAMETERIZATION - 328)) | (1 << (tsqlParser.PARTITION - 328)) | (1 << (tsqlParser.PATH - 328)) | (1 << (tsqlParser.PRECEDING - 328)) | (1 << (tsqlParser.PRIOR - 328)) | (1 << (tsqlParser.PRIVILEGES - 328)) | (1 << (tsqlParser.QUERY - 328)) | (1 << (tsqlParser.RANGE - 328)) | (1 << (tsqlParser.RANK - 328)) | (1 << (tsqlParser.READONLY - 328)) | (1 << (tsqlParser.READ_ONLY - 328)) | (1 << (tsqlParser.RECOMPILE - 328)) | (1 << (tsqlParser.RELATIVE - 328)) | (1 << (tsqlParser.REMOTE - 328)) | (1 << (tsqlParser.REPEATABLE - 328)) | (1 << (tsqlParser.ROBUST - 328)) | (1 << (tsqlParser.ROOT - 328)) | (1 << (tsqlParser.ROW - 328)) | (1 << (tsqlParser.ROWGUID - 328)) | (1 << (tsqlParser.ROWS - 328)) | (1 << (tsqlParser.ROW_NUMBER - 328)) | (1 << (tsqlParser.SAMPLE - 328)) | (1 << (tsqlParser.SCHEMABINDING - 328)) | (1 << (tsqlParser.SCROLL - 328)) | (1 << (tsqlParser.SCROLL_LOCKS - 328)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (tsqlParser.SELF - 393)) | (1 << (tsqlParser.SERIALIZABLE - 393)) | (1 << (tsqlParser.SIMPLE - 393)) | (1 << (tsqlParser.SIZE - 393)) | (1 << (tsqlParser.SNAPSHOT - 393)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 393)) | (1 << (tsqlParser.STATIC - 393)) | (1 << (tsqlParser.STATS_STREAM - 393)) | (1 << (tsqlParser.STDEV - 393)) | (1 << (tsqlParser.STDEVP - 393)) | (1 << (tsqlParser.SUM - 393)) | (1 << (tsqlParser.TEXTIMAGE_ON - 393)) | (1 << (tsqlParser.THROW - 393)) | (1 << (tsqlParser.TIES - 393)) | (1 << (tsqlParser.TIME - 393)) | (1 << (tsqlParser.TRY - 393)) | (1 << (tsqlParser.TYPE - 393)) | (1 << (tsqlParser.TYPE_WARNING - 393)) | (1 << (tsqlParser.UNBOUNDED - 393)) | (1 << (tsqlParser.UNCOMMITTED - 393)) | (1 << (tsqlParser.UNKNOWN - 393)) | (1 << (tsqlParser.USING - 393)) | (1 << (tsqlParser.VAR - 393)) | (1 << (tsqlParser.VARP - 393)) | (1 << (tsqlParser.VIEWS - 393)) | (1 << (tsqlParser.VIEW_METADATA - 393)) | (1 << (tsqlParser.WORK - 393)) | (1 << (tsqlParser.XML - 393)) | (1 << (tsqlParser.XMLNAMESPACES - 393)) | (1 << (tsqlParser.ZONE - 393)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 393)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 393)) | (1 << (tsqlParser.ID - 393)))) != 0):
                    self.state = 3331
                    localctx.schema = self.r_id()


                self.state = 3334
                self.match(tsqlParser.DOT)

            elif la_ == 2:
                self.state = 3336
                localctx.schema = self.r_id()
                self.state = 3337
                self.match(tsqlParser.DOT)


            self.state = 3341
            localctx.table = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # R_idContext
            self.name = None # R_idContext

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def DOT(self):
            return self.getToken(tsqlParser.DOT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_simple_name




    def simple_name(self):

        localctx = tsqlParser.Simple_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_simple_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3346
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,463,self._ctx)
            if la_ == 1:
                self.state = 3343
                localctx.schema = self.r_id()
                self.state = 3344
                self.match(tsqlParser.DOT)


            self.state = 3348
            localctx.name = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_proc_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext
            self.schema = None # R_idContext
            self.procedure = None # R_idContext

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DOT)
            else:
                return self.getToken(tsqlParser.DOT, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_func_proc_name




    def func_proc_name(self):

        localctx = tsqlParser.Func_proc_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_func_proc_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3360
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,465,self._ctx)
            if la_ == 1:
                self.state = 3350
                localctx.database = self.r_id()
                self.state = 3351
                self.match(tsqlParser.DOT)
                self.state = 3353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (tsqlParser.FILLFACTOR - 71)) | (1 << (tsqlParser.FORCESEEK - 71)) | (1 << (tsqlParser.NEXT - 71)) | (1 << (tsqlParser.NUMERIC - 71)))) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (tsqlParser.VALUE - 196)) | (1 << (tsqlParser.ABSOLUTE - 196)) | (1 << (tsqlParser.APPLY - 196)) | (1 << (tsqlParser.AUTO - 196)) | (1 << (tsqlParser.AVG - 196)) | (1 << (tsqlParser.BASE64 - 196)) | (1 << (tsqlParser.CALLER - 196)) | (1 << (tsqlParser.CAST - 196)) | (1 << (tsqlParser.CATCH - 196)) | (1 << (tsqlParser.CHECKSUM_AGG - 196)) | (1 << (tsqlParser.COMMITTED - 196)) | (1 << (tsqlParser.CONCAT - 196)) | (1 << (tsqlParser.CONTROL - 196)) | (1 << (tsqlParser.COOKIE - 196)) | (1 << (tsqlParser.COUNT - 196)) | (1 << (tsqlParser.COUNT_BIG - 196)) | (1 << (tsqlParser.DATE - 196)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (tsqlParser.DELAY - 261)) | (1 << (tsqlParser.DELETED - 261)) | (1 << (tsqlParser.DENSE_RANK - 261)) | (1 << (tsqlParser.DISABLE - 261)) | (1 << (tsqlParser.DYNAMIC - 261)) | (1 << (tsqlParser.ENCRYPTION - 261)) | (1 << (tsqlParser.EXIST - 261)) | (1 << (tsqlParser.EXPAND - 261)) | (1 << (tsqlParser.FAST - 261)) | (1 << (tsqlParser.FAST_FORWARD - 261)) | (1 << (tsqlParser.FIRST - 261)) | (1 << (tsqlParser.FIRST_VALUE - 261)) | (1 << (tsqlParser.FOLLOWING - 261)) | (1 << (tsqlParser.FORCE - 261)) | (1 << (tsqlParser.FORCED - 261)) | (1 << (tsqlParser.FORWARD_ONLY - 261)) | (1 << (tsqlParser.FULLSCAN - 261)) | (1 << (tsqlParser.GLOBAL - 261)) | (1 << (tsqlParser.GROUPING - 261)) | (1 << (tsqlParser.GROUPING_ID - 261)) | (1 << (tsqlParser.HASH - 261)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 261)) | (1 << (tsqlParser.IMPERSONATE - 261)) | (1 << (tsqlParser.INSENSITIVE - 261)) | (1 << (tsqlParser.INSERTED - 261)) | (1 << (tsqlParser.ISOLATION - 261)) | (1 << (tsqlParser.IO - 261)) | (1 << (tsqlParser.KEEP - 261)) | (1 << (tsqlParser.KEEPFIXED - 261)) | (1 << (tsqlParser.KEYSET - 261)) | (1 << (tsqlParser.LAG - 261)) | (1 << (tsqlParser.LAST - 261)) | (1 << (tsqlParser.LAST_VALUE - 261)) | (1 << (tsqlParser.LEAD - 261)) | (1 << (tsqlParser.LEVEL - 261)) | (1 << (tsqlParser.LOCAL - 261)) | (1 << (tsqlParser.LOCK_ESCALATION - 261)) | (1 << (tsqlParser.LOGIN - 261)) | (1 << (tsqlParser.LOOP - 261)) | (1 << (tsqlParser.MARK - 261)) | (1 << (tsqlParser.MAX - 261)) | (1 << (tsqlParser.MAXDOP - 261)) | (1 << (tsqlParser.MAXRECURSION - 261)))) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & ((1 << (tsqlParser.MIN - 328)) | (1 << (tsqlParser.MODIFY - 328)) | (1 << (tsqlParser.NAME - 328)) | (1 << (tsqlParser.NOCOUNT - 328)) | (1 << (tsqlParser.NODES - 328)) | (1 << (tsqlParser.NOEXPAND - 328)) | (1 << (tsqlParser.NORECOMPUTE - 328)) | (1 << (tsqlParser.NTILE - 328)) | (1 << (tsqlParser.NUMBER - 328)) | (1 << (tsqlParser.OFFSET - 328)) | (1 << (tsqlParser.ONLINE - 328)) | (1 << (tsqlParser.ONLY - 328)) | (1 << (tsqlParser.OPTIMISTIC - 328)) | (1 << (tsqlParser.OPTIMIZE - 328)) | (1 << (tsqlParser.OUT - 328)) | (1 << (tsqlParser.OUTPUT - 328)) | (1 << (tsqlParser.OWNER - 328)) | (1 << (tsqlParser.PARAMETERIZATION - 328)) | (1 << (tsqlParser.PARTITION - 328)) | (1 << (tsqlParser.PATH - 328)) | (1 << (tsqlParser.PRECEDING - 328)) | (1 << (tsqlParser.PRIOR - 328)) | (1 << (tsqlParser.PRIVILEGES - 328)) | (1 << (tsqlParser.QUERY - 328)) | (1 << (tsqlParser.RANGE - 328)) | (1 << (tsqlParser.RANK - 328)) | (1 << (tsqlParser.READONLY - 328)) | (1 << (tsqlParser.READ_ONLY - 328)) | (1 << (tsqlParser.RECOMPILE - 328)) | (1 << (tsqlParser.RELATIVE - 328)) | (1 << (tsqlParser.REMOTE - 328)) | (1 << (tsqlParser.REPEATABLE - 328)) | (1 << (tsqlParser.ROBUST - 328)) | (1 << (tsqlParser.ROOT - 328)) | (1 << (tsqlParser.ROW - 328)) | (1 << (tsqlParser.ROWGUID - 328)) | (1 << (tsqlParser.ROWS - 328)) | (1 << (tsqlParser.ROW_NUMBER - 328)) | (1 << (tsqlParser.SAMPLE - 328)) | (1 << (tsqlParser.SCHEMABINDING - 328)) | (1 << (tsqlParser.SCROLL - 328)) | (1 << (tsqlParser.SCROLL_LOCKS - 328)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (tsqlParser.SELF - 393)) | (1 << (tsqlParser.SERIALIZABLE - 393)) | (1 << (tsqlParser.SIMPLE - 393)) | (1 << (tsqlParser.SIZE - 393)) | (1 << (tsqlParser.SNAPSHOT - 393)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 393)) | (1 << (tsqlParser.STATIC - 393)) | (1 << (tsqlParser.STATS_STREAM - 393)) | (1 << (tsqlParser.STDEV - 393)) | (1 << (tsqlParser.STDEVP - 393)) | (1 << (tsqlParser.SUM - 393)) | (1 << (tsqlParser.TEXTIMAGE_ON - 393)) | (1 << (tsqlParser.THROW - 393)) | (1 << (tsqlParser.TIES - 393)) | (1 << (tsqlParser.TIME - 393)) | (1 << (tsqlParser.TRY - 393)) | (1 << (tsqlParser.TYPE - 393)) | (1 << (tsqlParser.TYPE_WARNING - 393)) | (1 << (tsqlParser.UNBOUNDED - 393)) | (1 << (tsqlParser.UNCOMMITTED - 393)) | (1 << (tsqlParser.UNKNOWN - 393)) | (1 << (tsqlParser.USING - 393)) | (1 << (tsqlParser.VAR - 393)) | (1 << (tsqlParser.VARP - 393)) | (1 << (tsqlParser.VIEWS - 393)) | (1 << (tsqlParser.VIEW_METADATA - 393)) | (1 << (tsqlParser.WORK - 393)) | (1 << (tsqlParser.XML - 393)) | (1 << (tsqlParser.XMLNAMESPACES - 393)) | (1 << (tsqlParser.ZONE - 393)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 393)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 393)) | (1 << (tsqlParser.ID - 393)))) != 0):
                    self.state = 3352
                    localctx.schema = self.r_id()


                self.state = 3355
                self.match(tsqlParser.DOT)

            elif la_ == 2:
                self.state = 3357
                localctx.schema = self.r_id()
                self.state = 3358
                self.match(tsqlParser.DOT)


            self.state = 3362
            localctx.procedure = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ddl_objectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def full_table_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_table_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_ddl_object




    def ddl_object(self):

        localctx = tsqlParser.Ddl_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_ddl_object)
        try:
            self.state = 3366
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3364
                self.full_table_name()
                pass
            elif token in [tsqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3365
                self.match(tsqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table = None # Table_nameContext
            self.name = None # R_idContext

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def DOT(self):
            return self.getToken(tsqlParser.DOT, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_full_column_name




    def full_column_name(self):

        localctx = tsqlParser.Full_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_full_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,467,self._ctx)
            if la_ == 1:
                self.state = 3368
                localctx.table = self.table_name()
                self.state = 3369
                self.match(tsqlParser.DOT)


            self.state = 3373
            localctx.name = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_name_list




    def column_name_list(self):

        localctx = tsqlParser.Column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3375
            self.r_id()
            self.state = 3380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 3376
                self.match(tsqlParser.COMMA)
                self.state = 3377
                self.r_id()
                self.state = 3382
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_cursor_name




    def cursor_name(self):

        localctx = tsqlParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_cursor_name)
        try:
            self.state = 3385
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3383
                self.r_id()
                pass
            elif token in [tsqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3384
                self.match(tsqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_offContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_on_off




    def on_off(self):

        localctx = tsqlParser.On_offContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_on_off)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3387
            _la = self._input.LA(1)
            if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClusteredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTERED(self):
            return self.getToken(tsqlParser.CLUSTERED, 0)

        def NONCLUSTERED(self):
            return self.getToken(tsqlParser.NONCLUSTERED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_clustered




    def clustered(self):

        localctx = tsqlParser.ClusteredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_clustered)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3389
            _la = self._input.LA(1)
            if not(_la==tsqlParser.CLUSTERED or _la==tsqlParser.NONCLUSTERED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_notnullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_(self):
            return self.getToken(tsqlParser.NULL_, 0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_null_notnull




    def null_notnull(self):

        localctx = tsqlParser.Null_notnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_null_notnull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.NOT:
                self.state = 3391
                self.match(tsqlParser.NOT)


            self.state = 3394
            self.match(tsqlParser.NULL_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scalar_function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def RIGHT(self):
            return self.getToken(tsqlParser.RIGHT, 0)

        def LEFT(self):
            return self.getToken(tsqlParser.LEFT, 0)

        def BINARY_CHECKSUM(self):
            return self.getToken(tsqlParser.BINARY_CHECKSUM, 0)

        def CHECKSUM(self):
            return self.getToken(tsqlParser.CHECKSUM, 0)

        def EXP(self):
            return self.getToken(tsqlParser.EXP, 0)

        def LOG(self):
            return self.getToken(tsqlParser.LOG, 0)

        def LOG10(self):
            return self.getToken(tsqlParser.LOG10, 0)

        def SQUARE(self):
            return self.getToken(tsqlParser.SQUARE, 0)

        def SQRT(self):
            return self.getToken(tsqlParser.SQRT, 0)

        def ROUND(self):
            return self.getToken(tsqlParser.ROUND, 0)

        def CEILING(self):
            return self.getToken(tsqlParser.CEILING, 0)

        def FLOOR(self):
            return self.getToken(tsqlParser.FLOOR, 0)

        def POWER(self):
            return self.getToken(tsqlParser.POWER, 0)

        def COS(self):
            return self.getToken(tsqlParser.COS, 0)

        def SIN(self):
            return self.getToken(tsqlParser.SIN, 0)

        def TAN(self):
            return self.getToken(tsqlParser.TAN, 0)

        def SIGN(self):
            return self.getToken(tsqlParser.SIGN, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_scalar_function_name




    def scalar_function_name(self):

        localctx = tsqlParser.Scalar_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_scalar_function_name)
        try:
            self.state = 3414
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3396
                self.func_proc_name()
                pass
            elif token in [tsqlParser.RIGHT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3397
                self.match(tsqlParser.RIGHT)
                pass
            elif token in [tsqlParser.LEFT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3398
                self.match(tsqlParser.LEFT)
                pass
            elif token in [tsqlParser.BINARY_CHECKSUM]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3399
                self.match(tsqlParser.BINARY_CHECKSUM)
                pass
            elif token in [tsqlParser.CHECKSUM]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3400
                self.match(tsqlParser.CHECKSUM)
                pass
            elif token in [tsqlParser.EXP]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3401
                self.match(tsqlParser.EXP)
                pass
            elif token in [tsqlParser.LOG]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3402
                self.match(tsqlParser.LOG)
                pass
            elif token in [tsqlParser.LOG10]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3403
                self.match(tsqlParser.LOG10)
                pass
            elif token in [tsqlParser.SQUARE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3404
                self.match(tsqlParser.SQUARE)
                pass
            elif token in [tsqlParser.SQRT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3405
                self.match(tsqlParser.SQRT)
                pass
            elif token in [tsqlParser.ROUND]:
                self.enterOuterAlt(localctx, 11)
                self.state = 3406
                self.match(tsqlParser.ROUND)
                pass
            elif token in [tsqlParser.CEILING]:
                self.enterOuterAlt(localctx, 12)
                self.state = 3407
                self.match(tsqlParser.CEILING)
                pass
            elif token in [tsqlParser.FLOOR]:
                self.enterOuterAlt(localctx, 13)
                self.state = 3408
                self.match(tsqlParser.FLOOR)
                pass
            elif token in [tsqlParser.POWER]:
                self.enterOuterAlt(localctx, 14)
                self.state = 3409
                self.match(tsqlParser.POWER)
                pass
            elif token in [tsqlParser.COS]:
                self.enterOuterAlt(localctx, 15)
                self.state = 3410
                self.match(tsqlParser.COS)
                pass
            elif token in [tsqlParser.SIN]:
                self.enterOuterAlt(localctx, 16)
                self.state = 3411
                self.match(tsqlParser.SIN)
                pass
            elif token in [tsqlParser.TAN]:
                self.enterOuterAlt(localctx, 17)
                self.state = 3412
                self.match(tsqlParser.TAN)
                pass
            elif token in [tsqlParser.SIGN]:
                self.enterOuterAlt(localctx, 18)
                self.state = 3413
                self.match(tsqlParser.SIGN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_(self):
            return self.getToken(tsqlParser.NULL_, 0)

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_default_value




    def default_value(self):

        localctx = tsqlParser.Default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_default_value)
        try:
            self.state = 3418
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.NULL_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3416
                self.match(tsqlParser.NULL_)
                pass
            elif token in [tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3417
                self.constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dollar = None # Token

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def BINARY(self):
            return self.getToken(tsqlParser.BINARY, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def sign(self):
            return self.getTypedRuleContext(tsqlParser.SignContext,0)


        def REAL(self):
            return self.getToken(tsqlParser.REAL, 0)

        def FLOAT(self):
            return self.getToken(tsqlParser.FLOAT, 0)

        def DOLLAR(self):
            return self.getToken(tsqlParser.DOLLAR, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_constant




    def constant(self):

        localctx = tsqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 3435
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,476,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3420
                self.match(tsqlParser.STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3421
                self.match(tsqlParser.BINARY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PLUS or _la==tsqlParser.MINUS:
                    self.state = 3422
                    self.sign()


                self.state = 3425
                self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PLUS or _la==tsqlParser.MINUS:
                    self.state = 3426
                    self.sign()


                self.state = 3429
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FLOAT or _la==tsqlParser.REAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PLUS or _la==tsqlParser.MINUS:
                    self.state = 3430
                    self.sign()


                self.state = 3433
                localctx.dollar = self.match(tsqlParser.DOLLAR)
                self.state = 3434
                _la = self._input.LA(1)
                if not(_la==tsqlParser.DECIMAL or _la==tsqlParser.FLOAT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(tsqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(tsqlParser.MINUS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_sign




    def sign(self):

        localctx = tsqlParser.SignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_sign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3437
            _la = self._input.LA(1)
            if not(_la==tsqlParser.PLUS or _la==tsqlParser.MINUS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class R_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_id(self):
            return self.getTypedRuleContext(tsqlParser.Simple_idContext,0)


        def DOUBLE_QUOTE_ID(self):
            return self.getToken(tsqlParser.DOUBLE_QUOTE_ID, 0)

        def SQUARE_BRACKET_ID(self):
            return self.getToken(tsqlParser.SQUARE_BRACKET_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_r_id




    def r_id(self):

        localctx = tsqlParser.R_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_r_id)
        try:
            self.state = 3442
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXIST, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NODES, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.QUERY, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3439
                self.simple_id()
                pass
            elif token in [tsqlParser.DOUBLE_QUOTE_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3440
                self.match(tsqlParser.DOUBLE_QUOTE_ID)
                pass
            elif token in [tsqlParser.SQUARE_BRACKET_ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3441
                self.match(tsqlParser.SQUARE_BRACKET_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(tsqlParser.ID, 0)

        def IO(self):
            return self.getToken(tsqlParser.IO, 0)

        def ABSOLUTE(self):
            return self.getToken(tsqlParser.ABSOLUTE, 0)

        def APPLY(self):
            return self.getToken(tsqlParser.APPLY, 0)

        def AUTO(self):
            return self.getToken(tsqlParser.AUTO, 0)

        def AVG(self):
            return self.getToken(tsqlParser.AVG, 0)

        def BASE64(self):
            return self.getToken(tsqlParser.BASE64, 0)

        def CALLER(self):
            return self.getToken(tsqlParser.CALLER, 0)

        def CAST(self):
            return self.getToken(tsqlParser.CAST, 0)

        def CATCH(self):
            return self.getToken(tsqlParser.CATCH, 0)

        def CHECKSUM_AGG(self):
            return self.getToken(tsqlParser.CHECKSUM_AGG, 0)

        def COMMITTED(self):
            return self.getToken(tsqlParser.COMMITTED, 0)

        def CONCAT(self):
            return self.getToken(tsqlParser.CONCAT, 0)

        def CONTROL(self):
            return self.getToken(tsqlParser.CONTROL, 0)

        def COOKIE(self):
            return self.getToken(tsqlParser.COOKIE, 0)

        def COUNT(self):
            return self.getToken(tsqlParser.COUNT, 0)

        def COUNT_BIG(self):
            return self.getToken(tsqlParser.COUNT_BIG, 0)

        def DATE(self):
            return self.getToken(tsqlParser.DATE, 0)

        def DELAY(self):
            return self.getToken(tsqlParser.DELAY, 0)

        def DELETED(self):
            return self.getToken(tsqlParser.DELETED, 0)

        def DENSE_RANK(self):
            return self.getToken(tsqlParser.DENSE_RANK, 0)

        def DISABLE(self):
            return self.getToken(tsqlParser.DISABLE, 0)

        def DYNAMIC(self):
            return self.getToken(tsqlParser.DYNAMIC, 0)

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def EXIST(self):
            return self.getToken(tsqlParser.EXIST, 0)

        def EXPAND(self):
            return self.getToken(tsqlParser.EXPAND, 0)

        def FAST(self):
            return self.getToken(tsqlParser.FAST, 0)

        def FAST_FORWARD(self):
            return self.getToken(tsqlParser.FAST_FORWARD, 0)

        def FILLFACTOR(self):
            return self.getToken(tsqlParser.FILLFACTOR, 0)

        def FIRST(self):
            return self.getToken(tsqlParser.FIRST, 0)

        def FIRST_VALUE(self):
            return self.getToken(tsqlParser.FIRST_VALUE, 0)

        def FOLLOWING(self):
            return self.getToken(tsqlParser.FOLLOWING, 0)

        def FORCE(self):
            return self.getToken(tsqlParser.FORCE, 0)

        def FORCESEEK(self):
            return self.getToken(tsqlParser.FORCESEEK, 0)

        def FORWARD_ONLY(self):
            return self.getToken(tsqlParser.FORWARD_ONLY, 0)

        def FULLSCAN(self):
            return self.getToken(tsqlParser.FULLSCAN, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def GROUPING(self):
            return self.getToken(tsqlParser.GROUPING, 0)

        def GROUPING_ID(self):
            return self.getToken(tsqlParser.GROUPING_ID, 0)

        def HASH(self):
            return self.getToken(tsqlParser.HASH, 0)

        def IMPERSONATE(self):
            return self.getToken(tsqlParser.IMPERSONATE, 0)

        def INSENSITIVE(self):
            return self.getToken(tsqlParser.INSENSITIVE, 0)

        def INSERTED(self):
            return self.getToken(tsqlParser.INSERTED, 0)

        def ISOLATION(self):
            return self.getToken(tsqlParser.ISOLATION, 0)

        def KEEP(self):
            return self.getToken(tsqlParser.KEEP, 0)

        def KEEPFIXED(self):
            return self.getToken(tsqlParser.KEEPFIXED, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def KEYSET(self):
            return self.getToken(tsqlParser.KEYSET, 0)

        def IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX(self):
            return self.getToken(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)

        def LAG(self):
            return self.getToken(tsqlParser.LAG, 0)

        def LAST(self):
            return self.getToken(tsqlParser.LAST, 0)

        def LAST_VALUE(self):
            return self.getToken(tsqlParser.LAST_VALUE, 0)

        def LEAD(self):
            return self.getToken(tsqlParser.LEAD, 0)

        def LEVEL(self):
            return self.getToken(tsqlParser.LEVEL, 0)

        def LOCAL(self):
            return self.getToken(tsqlParser.LOCAL, 0)

        def LOCK_ESCALATION(self):
            return self.getToken(tsqlParser.LOCK_ESCALATION, 0)

        def LOGIN(self):
            return self.getToken(tsqlParser.LOGIN, 0)

        def LOOP(self):
            return self.getToken(tsqlParser.LOOP, 0)

        def MARK(self):
            return self.getToken(tsqlParser.MARK, 0)

        def MAX(self):
            return self.getToken(tsqlParser.MAX, 0)

        def MAXDOP(self):
            return self.getToken(tsqlParser.MAXDOP, 0)

        def MAXRECURSION(self):
            return self.getToken(tsqlParser.MAXRECURSION, 0)

        def MIN(self):
            return self.getToken(tsqlParser.MIN, 0)

        def MODIFY(self):
            return self.getToken(tsqlParser.MODIFY, 0)

        def NAME(self):
            return self.getToken(tsqlParser.NAME, 0)

        def NEXT(self):
            return self.getToken(tsqlParser.NEXT, 0)

        def NOCOUNT(self):
            return self.getToken(tsqlParser.NOCOUNT, 0)

        def NODES(self):
            return self.getToken(tsqlParser.NODES, 0)

        def NOEXPAND(self):
            return self.getToken(tsqlParser.NOEXPAND, 0)

        def NORECOMPUTE(self):
            return self.getToken(tsqlParser.NORECOMPUTE, 0)

        def NTILE(self):
            return self.getToken(tsqlParser.NTILE, 0)

        def NUMBER(self):
            return self.getToken(tsqlParser.NUMBER, 0)

        def NUMERIC(self):
            return self.getToken(tsqlParser.NUMERIC, 0)

        def OFFSET(self):
            return self.getToken(tsqlParser.OFFSET, 0)

        def ONLINE(self):
            return self.getToken(tsqlParser.ONLINE, 0)

        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def OPTIMISTIC(self):
            return self.getToken(tsqlParser.OPTIMISTIC, 0)

        def OPTIMIZE(self):
            return self.getToken(tsqlParser.OPTIMIZE, 0)

        def OUT(self):
            return self.getToken(tsqlParser.OUT, 0)

        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def OWNER(self):
            return self.getToken(tsqlParser.OWNER, 0)

        def PARAMETERIZATION(self):
            return self.getToken(tsqlParser.PARAMETERIZATION, 0)

        def PARTITION(self):
            return self.getToken(tsqlParser.PARTITION, 0)

        def PATH(self):
            return self.getToken(tsqlParser.PATH, 0)

        def PRECEDING(self):
            return self.getToken(tsqlParser.PRECEDING, 0)

        def PRIOR(self):
            return self.getToken(tsqlParser.PRIOR, 0)

        def PRIVILEGES(self):
            return self.getToken(tsqlParser.PRIVILEGES, 0)

        def QUERY(self):
            return self.getToken(tsqlParser.QUERY, 0)

        def RANGE(self):
            return self.getToken(tsqlParser.RANGE, 0)

        def RANK(self):
            return self.getToken(tsqlParser.RANK, 0)

        def READONLY(self):
            return self.getToken(tsqlParser.READONLY, 0)

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def RECOMPILE(self):
            return self.getToken(tsqlParser.RECOMPILE, 0)

        def RELATIVE(self):
            return self.getToken(tsqlParser.RELATIVE, 0)

        def REMOTE(self):
            return self.getToken(tsqlParser.REMOTE, 0)

        def REPEATABLE(self):
            return self.getToken(tsqlParser.REPEATABLE, 0)

        def ROBUST(self):
            return self.getToken(tsqlParser.ROBUST, 0)

        def ROOT(self):
            return self.getToken(tsqlParser.ROOT, 0)

        def ROW(self):
            return self.getToken(tsqlParser.ROW, 0)

        def ROWGUID(self):
            return self.getToken(tsqlParser.ROWGUID, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def ROW_NUMBER(self):
            return self.getToken(tsqlParser.ROW_NUMBER, 0)

        def SAMPLE(self):
            return self.getToken(tsqlParser.SAMPLE, 0)

        def SCHEMABINDING(self):
            return self.getToken(tsqlParser.SCHEMABINDING, 0)

        def SCROLL(self):
            return self.getToken(tsqlParser.SCROLL, 0)

        def SCROLL_LOCKS(self):
            return self.getToken(tsqlParser.SCROLL_LOCKS, 0)

        def SELF(self):
            return self.getToken(tsqlParser.SELF, 0)

        def SERIALIZABLE(self):
            return self.getToken(tsqlParser.SERIALIZABLE, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def SIZE(self):
            return self.getToken(tsqlParser.SIZE, 0)

        def SNAPSHOT(self):
            return self.getToken(tsqlParser.SNAPSHOT, 0)

        def SPATIAL_WINDOW_MAX_CELLS(self):
            return self.getToken(tsqlParser.SPATIAL_WINDOW_MAX_CELLS, 0)

        def STATIC(self):
            return self.getToken(tsqlParser.STATIC, 0)

        def STATS_STREAM(self):
            return self.getToken(tsqlParser.STATS_STREAM, 0)

        def STDEV(self):
            return self.getToken(tsqlParser.STDEV, 0)

        def STDEVP(self):
            return self.getToken(tsqlParser.STDEVP, 0)

        def SUM(self):
            return self.getToken(tsqlParser.SUM, 0)

        def TEXTIMAGE_ON(self):
            return self.getToken(tsqlParser.TEXTIMAGE_ON, 0)

        def THROW(self):
            return self.getToken(tsqlParser.THROW, 0)

        def TIES(self):
            return self.getToken(tsqlParser.TIES, 0)

        def TIME(self):
            return self.getToken(tsqlParser.TIME, 0)

        def TRY(self):
            return self.getToken(tsqlParser.TRY, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def TYPE_WARNING(self):
            return self.getToken(tsqlParser.TYPE_WARNING, 0)

        def UNBOUNDED(self):
            return self.getToken(tsqlParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(tsqlParser.UNCOMMITTED, 0)

        def UNKNOWN(self):
            return self.getToken(tsqlParser.UNKNOWN, 0)

        def USING(self):
            return self.getToken(tsqlParser.USING, 0)

        def VAR(self):
            return self.getToken(tsqlParser.VAR, 0)

        def VARP(self):
            return self.getToken(tsqlParser.VARP, 0)

        def VALUE(self):
            return self.getToken(tsqlParser.VALUE, 0)

        def VIEW_METADATA(self):
            return self.getToken(tsqlParser.VIEW_METADATA, 0)

        def VIEWS(self):
            return self.getToken(tsqlParser.VIEWS, 0)

        def WORK(self):
            return self.getToken(tsqlParser.WORK, 0)

        def XML(self):
            return self.getToken(tsqlParser.XML, 0)

        def XMLNAMESPACES(self):
            return self.getToken(tsqlParser.XMLNAMESPACES, 0)

        def ZONE(self):
            return self.getToken(tsqlParser.ZONE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_simple_id




    def simple_id(self):

        localctx = tsqlParser.Simple_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_simple_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3444
            _la = self._input.LA(1)
            if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (tsqlParser.FILLFACTOR - 71)) | (1 << (tsqlParser.FORCESEEK - 71)) | (1 << (tsqlParser.NEXT - 71)) | (1 << (tsqlParser.NUMERIC - 71)))) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (tsqlParser.VALUE - 196)) | (1 << (tsqlParser.ABSOLUTE - 196)) | (1 << (tsqlParser.APPLY - 196)) | (1 << (tsqlParser.AUTO - 196)) | (1 << (tsqlParser.AVG - 196)) | (1 << (tsqlParser.BASE64 - 196)) | (1 << (tsqlParser.CALLER - 196)) | (1 << (tsqlParser.CAST - 196)) | (1 << (tsqlParser.CATCH - 196)) | (1 << (tsqlParser.CHECKSUM_AGG - 196)) | (1 << (tsqlParser.COMMITTED - 196)) | (1 << (tsqlParser.CONCAT - 196)) | (1 << (tsqlParser.CONTROL - 196)) | (1 << (tsqlParser.COOKIE - 196)) | (1 << (tsqlParser.COUNT - 196)) | (1 << (tsqlParser.COUNT_BIG - 196)) | (1 << (tsqlParser.DATE - 196)))) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & ((1 << (tsqlParser.DELAY - 261)) | (1 << (tsqlParser.DELETED - 261)) | (1 << (tsqlParser.DENSE_RANK - 261)) | (1 << (tsqlParser.DISABLE - 261)) | (1 << (tsqlParser.DYNAMIC - 261)) | (1 << (tsqlParser.ENCRYPTION - 261)) | (1 << (tsqlParser.EXIST - 261)) | (1 << (tsqlParser.EXPAND - 261)) | (1 << (tsqlParser.FAST - 261)) | (1 << (tsqlParser.FAST_FORWARD - 261)) | (1 << (tsqlParser.FIRST - 261)) | (1 << (tsqlParser.FIRST_VALUE - 261)) | (1 << (tsqlParser.FOLLOWING - 261)) | (1 << (tsqlParser.FORCE - 261)) | (1 << (tsqlParser.FORCED - 261)) | (1 << (tsqlParser.FORWARD_ONLY - 261)) | (1 << (tsqlParser.FULLSCAN - 261)) | (1 << (tsqlParser.GLOBAL - 261)) | (1 << (tsqlParser.GROUPING - 261)) | (1 << (tsqlParser.GROUPING_ID - 261)) | (1 << (tsqlParser.HASH - 261)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 261)) | (1 << (tsqlParser.IMPERSONATE - 261)) | (1 << (tsqlParser.INSENSITIVE - 261)) | (1 << (tsqlParser.INSERTED - 261)) | (1 << (tsqlParser.ISOLATION - 261)) | (1 << (tsqlParser.IO - 261)) | (1 << (tsqlParser.KEEP - 261)) | (1 << (tsqlParser.KEEPFIXED - 261)) | (1 << (tsqlParser.KEYSET - 261)) | (1 << (tsqlParser.LAG - 261)) | (1 << (tsqlParser.LAST - 261)) | (1 << (tsqlParser.LAST_VALUE - 261)) | (1 << (tsqlParser.LEAD - 261)) | (1 << (tsqlParser.LEVEL - 261)) | (1 << (tsqlParser.LOCAL - 261)) | (1 << (tsqlParser.LOCK_ESCALATION - 261)) | (1 << (tsqlParser.LOGIN - 261)) | (1 << (tsqlParser.LOOP - 261)) | (1 << (tsqlParser.MARK - 261)) | (1 << (tsqlParser.MAX - 261)) | (1 << (tsqlParser.MAXDOP - 261)) | (1 << (tsqlParser.MAXRECURSION - 261)))) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & ((1 << (tsqlParser.MIN - 328)) | (1 << (tsqlParser.MODIFY - 328)) | (1 << (tsqlParser.NAME - 328)) | (1 << (tsqlParser.NOCOUNT - 328)) | (1 << (tsqlParser.NODES - 328)) | (1 << (tsqlParser.NOEXPAND - 328)) | (1 << (tsqlParser.NORECOMPUTE - 328)) | (1 << (tsqlParser.NTILE - 328)) | (1 << (tsqlParser.NUMBER - 328)) | (1 << (tsqlParser.OFFSET - 328)) | (1 << (tsqlParser.ONLINE - 328)) | (1 << (tsqlParser.ONLY - 328)) | (1 << (tsqlParser.OPTIMISTIC - 328)) | (1 << (tsqlParser.OPTIMIZE - 328)) | (1 << (tsqlParser.OUT - 328)) | (1 << (tsqlParser.OUTPUT - 328)) | (1 << (tsqlParser.OWNER - 328)) | (1 << (tsqlParser.PARAMETERIZATION - 328)) | (1 << (tsqlParser.PARTITION - 328)) | (1 << (tsqlParser.PATH - 328)) | (1 << (tsqlParser.PRECEDING - 328)) | (1 << (tsqlParser.PRIOR - 328)) | (1 << (tsqlParser.PRIVILEGES - 328)) | (1 << (tsqlParser.QUERY - 328)) | (1 << (tsqlParser.RANGE - 328)) | (1 << (tsqlParser.RANK - 328)) | (1 << (tsqlParser.READONLY - 328)) | (1 << (tsqlParser.READ_ONLY - 328)) | (1 << (tsqlParser.RECOMPILE - 328)) | (1 << (tsqlParser.RELATIVE - 328)) | (1 << (tsqlParser.REMOTE - 328)) | (1 << (tsqlParser.REPEATABLE - 328)) | (1 << (tsqlParser.ROBUST - 328)) | (1 << (tsqlParser.ROOT - 328)) | (1 << (tsqlParser.ROW - 328)) | (1 << (tsqlParser.ROWGUID - 328)) | (1 << (tsqlParser.ROWS - 328)) | (1 << (tsqlParser.ROW_NUMBER - 328)) | (1 << (tsqlParser.SAMPLE - 328)) | (1 << (tsqlParser.SCHEMABINDING - 328)) | (1 << (tsqlParser.SCROLL - 328)) | (1 << (tsqlParser.SCROLL_LOCKS - 328)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (tsqlParser.SELF - 393)) | (1 << (tsqlParser.SERIALIZABLE - 393)) | (1 << (tsqlParser.SIMPLE - 393)) | (1 << (tsqlParser.SIZE - 393)) | (1 << (tsqlParser.SNAPSHOT - 393)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 393)) | (1 << (tsqlParser.STATIC - 393)) | (1 << (tsqlParser.STATS_STREAM - 393)) | (1 << (tsqlParser.STDEV - 393)) | (1 << (tsqlParser.STDEVP - 393)) | (1 << (tsqlParser.SUM - 393)) | (1 << (tsqlParser.TEXTIMAGE_ON - 393)) | (1 << (tsqlParser.THROW - 393)) | (1 << (tsqlParser.TIES - 393)) | (1 << (tsqlParser.TIME - 393)) | (1 << (tsqlParser.TRY - 393)) | (1 << (tsqlParser.TYPE - 393)) | (1 << (tsqlParser.TYPE_WARNING - 393)) | (1 << (tsqlParser.UNBOUNDED - 393)) | (1 << (tsqlParser.UNCOMMITTED - 393)) | (1 << (tsqlParser.UNKNOWN - 393)) | (1 << (tsqlParser.USING - 393)) | (1 << (tsqlParser.VAR - 393)) | (1 << (tsqlParser.VARP - 393)) | (1 << (tsqlParser.VIEWS - 393)) | (1 << (tsqlParser.VIEW_METADATA - 393)) | (1 << (tsqlParser.WORK - 393)) | (1 << (tsqlParser.XML - 393)) | (1 << (tsqlParser.XMLNAMESPACES - 393)) | (1 << (tsqlParser.ZONE - 393)) | (1 << (tsqlParser.ID - 393)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comparison_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def GREATER(self):
            return self.getToken(tsqlParser.GREATER, 0)

        def LESS(self):
            return self.getToken(tsqlParser.LESS, 0)

        def EXCLAMATION(self):
            return self.getToken(tsqlParser.EXCLAMATION, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_comparison_operator




    def comparison_operator(self):

        localctx = tsqlParser.Comparison_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_comparison_operator)
        try:
            self.state = 3461
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,478,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3446
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3447
                self.match(tsqlParser.GREATER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3448
                self.match(tsqlParser.LESS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3449
                self.match(tsqlParser.LESS)
                self.state = 3450
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3451
                self.match(tsqlParser.GREATER)
                self.state = 3452
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3453
                self.match(tsqlParser.LESS)
                self.state = 3454
                self.match(tsqlParser.GREATER)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3455
                self.match(tsqlParser.EXCLAMATION)
                self.state = 3456
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3457
                self.match(tsqlParser.EXCLAMATION)
                self.state = 3458
                self.match(tsqlParser.GREATER)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3459
                self.match(tsqlParser.EXCLAMATION)
                self.state = 3460
                self.match(tsqlParser.LESS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS_ASSIGN(self):
            return self.getToken(tsqlParser.PLUS_ASSIGN, 0)

        def MINUS_ASSIGN(self):
            return self.getToken(tsqlParser.MINUS_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(tsqlParser.MULT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(tsqlParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(tsqlParser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(tsqlParser.AND_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(tsqlParser.XOR_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(tsqlParser.OR_ASSIGN, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_assignment_operator




    def assignment_operator(self):

        localctx = tsqlParser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_assignment_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3463
            _la = self._input.LA(1)
            if not(((((_la - 459)) & ~0x3f) == 0 and ((1 << (_la - 459)) & ((1 << (tsqlParser.PLUS_ASSIGN - 459)) | (1 << (tsqlParser.MINUS_ASSIGN - 459)) | (1 << (tsqlParser.MULT_ASSIGN - 459)) | (1 << (tsqlParser.DIV_ASSIGN - 459)) | (1 << (tsqlParser.MOD_ASSIGN - 459)) | (1 << (tsqlParser.AND_ASSIGN - 459)) | (1 << (tsqlParser.XOR_ASSIGN - 459)) | (1 << (tsqlParser.OR_ASSIGN - 459)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_sizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def KB(self):
            return self.getToken(tsqlParser.KB, 0)

        def MB(self):
            return self.getToken(tsqlParser.MB, 0)

        def GB(self):
            return self.getToken(tsqlParser.GB, 0)

        def TB(self):
            return self.getToken(tsqlParser.TB, 0)

        def MODULE(self):
            return self.getToken(tsqlParser.MODULE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_file_size




    def file_size(self):

        localctx = tsqlParser.File_sizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_file_size)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3465
            self.match(tsqlParser.DECIMAL)
            self.state = 3467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 289)) & ~0x3f) == 0 and ((1 << (_la - 289)) & ((1 << (tsqlParser.GB - 289)) | (1 << (tsqlParser.KB - 289)) | (1 << (tsqlParser.MB - 289)))) != 0) or _la==tsqlParser.TB or _la==tsqlParser.MODULE:
                self.state = 3466
                _la = self._input.LA(1)
                if not(((((_la - 289)) & ~0x3f) == 0 and ((1 << (_la - 289)) & ((1 << (tsqlParser.GB - 289)) | (1 << (tsqlParser.KB - 289)) | (1 << (tsqlParser.MB - 289)))) != 0) or _la==tsqlParser.TB or _la==tsqlParser.MODULE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_or_alter_procedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.proc = None # Token

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def sql_clauses(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,0)


        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def PROC(self):
            return self.getToken(tsqlParser.PROC, 0)

        def PROCEDURE(self):
            return self.getToken(tsqlParser.PROCEDURE, 0)

        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def procedure_param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Procedure_paramContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Procedure_paramContext,i)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def procedure_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Procedure_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Procedure_optionContext,i)


        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def OR(self):
            return self.getToken(tsqlParser.OR, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_or_alter_procedure




    def create_or_alter_procedure(self):

        localctx = tsqlParser.Create_or_alter_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_create_or_alter_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3475
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CREATE]:
                self.state = 3469
                self.match(tsqlParser.CREATE)
                self.state = 3472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.OR:
                    self.state = 3470
                    self.match(tsqlParser.OR)
                    self.state = 3471
                    self.match(tsqlParser.ALTER)


                pass
            elif token in [tsqlParser.ALTER]:
                self.state = 3474
                self.match(tsqlParser.ALTER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3477
            localctx.proc = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==tsqlParser.PROC or _la==tsqlParser.PROCEDURE):
                localctx.proc = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3478
            self.func_proc_name()
            self.state = 3481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.SEMI:
                self.state = 3479
                self.match(tsqlParser.SEMI)
                self.state = 3480
                self.match(tsqlParser.DECIMAL)


            self.state = 3497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.LOCAL_ID or _la==tsqlParser.LR_BRACKET:
                self.state = 3484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.LR_BRACKET:
                    self.state = 3483
                    self.match(tsqlParser.LR_BRACKET)


                self.state = 3486
                self.procedure_param()
                self.state = 3491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 3487
                    self.match(tsqlParser.COMMA)
                    self.state = 3488
                    self.procedure_param()
                    self.state = 3493
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.RR_BRACKET:
                    self.state = 3494
                    self.match(tsqlParser.RR_BRACKET)




            self.state = 3508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 3499
                self.match(tsqlParser.WITH)
                self.state = 3500
                self.procedure_option()
                self.state = 3505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 3501
                    self.match(tsqlParser.COMMA)
                    self.state = 3502
                    self.procedure_option()
                    self.state = 3507
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FOR:
                self.state = 3510
                self.match(tsqlParser.FOR)
                self.state = 3511
                self.match(tsqlParser.REPLICATION)


            self.state = 3514
            self.match(tsqlParser.AS)
            self.state = 3515
            self.sql_clauses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_or_alter_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(tsqlParser.FUNCTION, 0)

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def func_body_returns_select(self):
            return self.getTypedRuleContext(tsqlParser.Func_body_returns_selectContext,0)


        def func_body_returns_table(self):
            return self.getTypedRuleContext(tsqlParser.Func_body_returns_tableContext,0)


        def func_body_returns_scalar(self):
            return self.getTypedRuleContext(tsqlParser.Func_body_returns_scalarContext,0)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def procedure_param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Procedure_paramContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Procedure_paramContext,i)


        def OR(self):
            return self.getToken(tsqlParser.OR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_or_alter_function




    def create_or_alter_function(self):

        localctx = tsqlParser.Create_or_alter_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_create_or_alter_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3523
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CREATE]:
                self.state = 3517
                self.match(tsqlParser.CREATE)
                self.state = 3520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.OR:
                    self.state = 3518
                    self.match(tsqlParser.OR)
                    self.state = 3519
                    self.match(tsqlParser.ALTER)


                pass
            elif token in [tsqlParser.ALTER]:
                self.state = 3522
                self.match(tsqlParser.ALTER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3525
            self.match(tsqlParser.FUNCTION)
            self.state = 3526
            self.func_proc_name()
            self.state = 3540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,493,self._ctx)
            if la_ == 1:
                self.state = 3527
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3528
                self.procedure_param()
                self.state = 3533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 3529
                    self.match(tsqlParser.COMMA)
                    self.state = 3530
                    self.procedure_param()
                    self.state = 3535
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3536
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.state = 3538
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3539
                self.match(tsqlParser.RR_BRACKET)
                pass


            self.state = 3545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,494,self._ctx)
            if la_ == 1:
                self.state = 3542
                self.func_body_returns_select()
                pass

            elif la_ == 2:
                self.state = 3543
                self.func_body_returns_table()
                pass

            elif la_ == 3:
                self.state = 3544
                self.func_body_returns_scalar()
                pass


            self.state = 3548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,495,self._ctx)
            if la_ == 1:
                self.state = 3547
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_body_returns_selectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(tsqlParser.RETURNS, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def RETURN(self):
            return self.getToken(tsqlParser.RETURN, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def function_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Function_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Function_optionContext,i)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_func_body_returns_select




    def func_body_returns_select(self):

        localctx = tsqlParser.Func_body_returns_selectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_func_body_returns_select)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3550
            self.match(tsqlParser.RETURNS)
            self.state = 3551
            self.match(tsqlParser.TABLE)
            self.state = 3561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 3552
                self.match(tsqlParser.WITH)
                self.state = 3553
                self.function_option()
                self.state = 3558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 3554
                    self.match(tsqlParser.COMMA)
                    self.state = 3555
                    self.function_option()
                    self.state = 3560
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 3563
                self.match(tsqlParser.AS)


            self.state = 3566
            self.match(tsqlParser.RETURN)
            self.state = 3572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,499,self._ctx)
            if la_ == 1:
                self.state = 3567
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3568
                self.select_statement()
                self.state = 3569
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.state = 3571
                self.select_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_body_returns_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(tsqlParser.RETURNS, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def table_type_definition(self):
            return self.getTypedRuleContext(tsqlParser.Table_type_definitionContext,0)


        def BEGIN(self):
            return self.getToken(tsqlParser.BEGIN, 0)

        def RETURN(self):
            return self.getToken(tsqlParser.RETURN, 0)

        def END(self):
            return self.getToken(tsqlParser.END, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def function_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Function_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Function_optionContext,i)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.SEMI)
            else:
                return self.getToken(tsqlParser.SEMI, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_func_body_returns_table




    def func_body_returns_table(self):

        localctx = tsqlParser.Func_body_returns_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_func_body_returns_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3574
            self.match(tsqlParser.RETURNS)
            self.state = 3575
            self.match(tsqlParser.LOCAL_ID)
            self.state = 3576
            self.table_type_definition()
            self.state = 3586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 3577
                self.match(tsqlParser.WITH)
                self.state = 3578
                self.function_option()
                self.state = 3583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 3579
                    self.match(tsqlParser.COMMA)
                    self.state = 3580
                    self.function_option()
                    self.state = 3585
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 3588
                self.match(tsqlParser.AS)


            self.state = 3591
            self.match(tsqlParser.BEGIN)
            self.state = 3595
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,503,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3592
                    self.sql_clause() 
                self.state = 3597
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,503,self._ctx)

            self.state = 3598
            self.match(tsqlParser.RETURN)
            self.state = 3600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.SEMI:
                self.state = 3599
                self.match(tsqlParser.SEMI)


            self.state = 3602
            self.match(tsqlParser.END)
            self.state = 3604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,505,self._ctx)
            if la_ == 1:
                self.state = 3603
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_body_returns_scalarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ret = None # ExpressionContext

        def RETURNS(self):
            return self.getToken(tsqlParser.RETURNS, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def BEGIN(self):
            return self.getToken(tsqlParser.BEGIN, 0)

        def RETURN(self):
            return self.getToken(tsqlParser.RETURN, 0)

        def END(self):
            return self.getToken(tsqlParser.END, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def function_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Function_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Function_optionContext,i)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,i)


        def SEMI(self):
            return self.getToken(tsqlParser.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_func_body_returns_scalar




    def func_body_returns_scalar(self):

        localctx = tsqlParser.Func_body_returns_scalarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_func_body_returns_scalar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3606
            self.match(tsqlParser.RETURNS)
            self.state = 3607
            self.data_type()
            self.state = 3617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 3608
                self.match(tsqlParser.WITH)
                self.state = 3609
                self.function_option()
                self.state = 3614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 3610
                    self.match(tsqlParser.COMMA)
                    self.state = 3611
                    self.function_option()
                    self.state = 3616
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 3619
                self.match(tsqlParser.AS)


            self.state = 3622
            self.match(tsqlParser.BEGIN)
            self.state = 3626
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,509,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3623
                    self.sql_clause() 
                self.state = 3628
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,509,self._ctx)

            self.state = 3629
            self.match(tsqlParser.RETURN)
            self.state = 3630
            localctx.ret = self.expression(0)
            self.state = 3632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.SEMI:
                self.state = 3631
                self.match(tsqlParser.SEMI)


            self.state = 3634
            self.match(tsqlParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_paramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.default_val = None # Default_valueContext

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def DOT(self):
            return self.getToken(tsqlParser.DOT, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def VARYING(self):
            return self.getToken(tsqlParser.VARYING, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def default_value(self):
            return self.getTypedRuleContext(tsqlParser.Default_valueContext,0)


        def OUT(self):
            return self.getToken(tsqlParser.OUT, 0)

        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def READONLY(self):
            return self.getToken(tsqlParser.READONLY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_procedure_param




    def procedure_param(self):

        localctx = tsqlParser.Procedure_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_procedure_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3636
            self.match(tsqlParser.LOCAL_ID)
            self.state = 3640
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,511,self._ctx)
            if la_ == 1:
                self.state = 3637
                self.r_id()
                self.state = 3638
                self.match(tsqlParser.DOT)


            self.state = 3643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 3642
                self.match(tsqlParser.AS)


            self.state = 3645
            self.data_type()
            self.state = 3647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.VARYING:
                self.state = 3646
                self.match(tsqlParser.VARYING)


            self.state = 3651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.EQUAL:
                self.state = 3649
                self.match(tsqlParser.EQUAL)
                self.state = 3650
                localctx.default_val = self.default_value()


            self.state = 3654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 352)) & ~0x3f) == 0 and ((1 << (_la - 352)) & ((1 << (tsqlParser.OUT - 352)) | (1 << (tsqlParser.OUTPUT - 352)) | (1 << (tsqlParser.READONLY - 352)))) != 0):
                self.state = 3653
                _la = self._input.LA(1)
                if not(((((_la - 352)) & ~0x3f) == 0 and ((1 << (_la - 352)) & ((1 << (tsqlParser.OUT - 352)) | (1 << (tsqlParser.OUTPUT - 352)) | (1 << (tsqlParser.READONLY - 352)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def RECOMPILE(self):
            return self.getToken(tsqlParser.RECOMPILE, 0)

        def execute_clause(self):
            return self.getTypedRuleContext(tsqlParser.Execute_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_procedure_option




    def procedure_option(self):

        localctx = tsqlParser.Procedure_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_procedure_option)
        try:
            self.state = 3659
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.ENCRYPTION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3656
                self.match(tsqlParser.ENCRYPTION)
                pass
            elif token in [tsqlParser.RECOMPILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3657
                self.match(tsqlParser.RECOMPILE)
                pass
            elif token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3658
                self.execute_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def SCHEMABINDING(self):
            return self.getToken(tsqlParser.SCHEMABINDING, 0)

        def RETURNS(self):
            return self.getToken(tsqlParser.RETURNS, 0)

        def NULL_(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.NULL_)
            else:
                return self.getToken(tsqlParser.NULL_, i)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def INPUT(self):
            return self.getToken(tsqlParser.INPUT, 0)

        def CALLED(self):
            return self.getToken(tsqlParser.CALLED, 0)

        def execute_clause(self):
            return self.getTypedRuleContext(tsqlParser.Execute_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_function_option




    def function_option(self):

        localctx = tsqlParser.Function_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_function_option)
        try:
            self.state = 3673
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.ENCRYPTION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3661
                self.match(tsqlParser.ENCRYPTION)
                pass
            elif token in [tsqlParser.SCHEMABINDING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3662
                self.match(tsqlParser.SCHEMABINDING)
                pass
            elif token in [tsqlParser.RETURNS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3663
                self.match(tsqlParser.RETURNS)
                self.state = 3664
                self.match(tsqlParser.NULL_)
                self.state = 3665
                self.match(tsqlParser.ON)
                self.state = 3666
                self.match(tsqlParser.NULL_)
                self.state = 3667
                self.match(tsqlParser.INPUT)
                pass
            elif token in [tsqlParser.CALLED]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3668
                self.match(tsqlParser.CALLED)
                self.state = 3669
                self.match(tsqlParser.ON)
                self.state = 3670
                self.match(tsqlParser.NULL_)
                self.state = 3671
                self.match(tsqlParser.INPUT)
                pass
            elif token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3672
                self.execute_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Percentile_contContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERCENTILE_CONT(self):
            return self.getToken(tsqlParser.PERCENTILE_CONT, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LR_BRACKET)
            else:
                return self.getToken(tsqlParser.LR_BRACKET, i)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.RR_BRACKET)
            else:
                return self.getToken(tsqlParser.RR_BRACKET, i)

        def WITHIN(self):
            return self.getToken(tsqlParser.WITHIN, 0)

        def GROUP(self):
            return self.getToken(tsqlParser.GROUP, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(tsqlParser.Order_by_clauseContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_percentile_cont




    def percentile_cont(self):

        localctx = tsqlParser.Percentile_contContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_percentile_cont)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3675
            self.match(tsqlParser.PERCENTILE_CONT)
            self.state = 3676
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3677
            self.expression(0)
            self.state = 3678
            self.match(tsqlParser.RR_BRACKET)
            self.state = 3679
            self.match(tsqlParser.WITHIN)
            self.state = 3680
            self.match(tsqlParser.GROUP)
            self.state = 3681
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3682
            self.order_by_clause()
            self.state = 3683
            self.match(tsqlParser.RR_BRACKET)
            self.state = 3684
            self.over_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_aggContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_AGG(self):
            return self.getToken(tsqlParser.STRING_AGG, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LR_BRACKET)
            else:
                return self.getToken(tsqlParser.LR_BRACKET, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(tsqlParser.COMMA, 0)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.RR_BRACKET)
            else:
                return self.getToken(tsqlParser.RR_BRACKET, i)

        def WITHIN(self):
            return self.getToken(tsqlParser.WITHIN, 0)

        def GROUP(self):
            return self.getToken(tsqlParser.GROUP, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(tsqlParser.Order_by_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_string_agg




    def string_agg(self):

        localctx = tsqlParser.String_aggContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_string_agg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3686
            self.match(tsqlParser.STRING_AGG)
            self.state = 3687
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3688
            self.expression(0)
            self.state = 3689
            self.match(tsqlParser.COMMA)
            self.state = 3690
            self.expression(0)
            self.state = 3691
            self.match(tsqlParser.RR_BRACKET)
            self.state = 3692
            self.match(tsqlParser.WITHIN)
            self.state = 3693
            self.match(tsqlParser.GROUP)
            self.state = 3694
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3695
            self.order_by_clause()
            self.state = 3696
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)

        def MAX(self):
            return self.getToken(tsqlParser.MAX, 0)

        def COMMA(self):
            return self.getToken(tsqlParser.COMMA, 0)

        def DATE(self):
            return self.getToken(tsqlParser.DATE, 0)

        def DATETIME2(self):
            return self.getToken(tsqlParser.DATETIME2, 0)

        def DOUBLE(self):
            return self.getToken(tsqlParser.DOUBLE, 0)

        def PRECISION(self):
            return self.getToken(tsqlParser.PRECISION, 0)

        def INT(self):
            return self.getToken(tsqlParser.INT, 0)

        def TINYINT(self):
            return self.getToken(tsqlParser.TINYINT, 0)

        def SMALLINT(self):
            return self.getToken(tsqlParser.SMALLINT, 0)

        def BIGINT(self):
            return self.getToken(tsqlParser.BIGINT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_data_type




    def data_type(self):

        localctx = tsqlParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_data_type)
        self._la = 0 # Token type
        try:
            self.state = 3724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,522,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3698
                self.r_id()
                self.state = 3700
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,518,self._ctx)
                if la_ == 1:
                    self.state = 3699
                    self.match(tsqlParser.IDENTITY)


                self.state = 3709
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,520,self._ctx)
                if la_ == 1:
                    self.state = 3702
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 3703
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.MAX or _la==tsqlParser.DECIMAL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3706
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.COMMA:
                        self.state = 3704
                        self.match(tsqlParser.COMMA)
                        self.state = 3705
                        self.match(tsqlParser.DECIMAL)


                    self.state = 3708
                    self.match(tsqlParser.RR_BRACKET)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3711
                self.match(tsqlParser.DATE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3712
                self.match(tsqlParser.DATETIME2)
                self.state = 3713
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3714
                self.match(tsqlParser.DECIMAL)
                self.state = 3715
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3716
                self.match(tsqlParser.DOUBLE)
                self.state = 3718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PRECISION:
                    self.state = 3717
                    self.match(tsqlParser.PRECISION)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3720
                self.match(tsqlParser.INT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3721
                self.match(tsqlParser.TINYINT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3722
                self.match(tsqlParser.SMALLINT)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3723
                self.match(tsqlParser.BIGINT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[104] = self.expression_sempred
        self._predicates[113] = self.search_condition_sempred
        self._predicates[115] = self.query_expression_sempred
        self._predicates[135] = self.table_source_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         

    def search_condition_sempred(self, localctx:Search_conditionContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

    def query_expression_sempred(self, localctx:Query_expressionContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def table_source_sempred(self, localctx:Table_sourceContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         




