# Generated from TSqlParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,1207,14525,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
        2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,
        7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,
        2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,
        7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,
        2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,
        7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,
        2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,
        7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,
        2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,
        7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
        2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
        7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,
        2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,
        103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,
        2,109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,
        7,114,2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,
        2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,
        7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,
        2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,
        7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
        2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,
        7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
        2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
        7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,
        2,164,7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,
        7,169,2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,
        2,175,7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,
        7,180,2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,
        2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,
        7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,
        2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,
        7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
        2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,
        7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
        2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
        7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,
        2,230,7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,
        7,235,2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,
        2,241,7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,
        7,246,2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,
        2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,
        7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,
        2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,
        7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
        2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,
        7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
        2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,
        7,290,2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,
        2,296,7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,
        7,301,2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,
        2,307,7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,
        7,312,2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,
        2,318,7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,
        7,323,2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,
        2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,
        7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,
        2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,
        7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,
        2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,
        7,356,2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,
        2,362,7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,
        7,367,2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,
        2,373,7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,
        7,378,2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,
        2,384,7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,
        7,389,2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,
        2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,
        7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,
        2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,
        7,411,2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,
        2,417,7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,
        7,422,2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,
        2,428,7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,
        7,433,2,434,7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,
        2,439,7,439,2,440,7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,
        7,444,2,445,7,445,2,446,7,446,2,447,7,447,2,448,7,448,2,449,7,449,
        2,450,7,450,2,451,7,451,2,452,7,452,2,453,7,453,2,454,7,454,2,455,
        7,455,2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,2,460,7,460,
        2,461,7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,2,466,
        7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,
        2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,
        7,477,2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,
        2,483,7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,
        7,488,2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,
        2,494,7,494,2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,
        7,499,2,500,7,500,2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,
        2,505,7,505,2,506,7,506,2,507,7,507,2,508,7,508,2,509,7,509,2,510,
        7,510,2,511,7,511,2,512,7,512,2,513,7,513,2,514,7,514,2,515,7,515,
        2,516,7,516,2,517,7,517,2,518,7,518,2,519,7,519,2,520,7,520,2,521,
        7,521,2,522,7,522,2,523,7,523,2,524,7,524,2,525,7,525,2,526,7,526,
        2,527,7,527,2,528,7,528,2,529,7,529,2,530,7,530,2,531,7,531,2,532,
        7,532,2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,2,537,7,537,
        2,538,7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,2,543,
        7,543,2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,
        2,549,7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,
        7,554,2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,
        2,560,7,560,2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,
        7,565,2,566,7,566,2,567,7,567,2,568,7,568,2,569,7,569,2,570,7,570,
        2,571,7,571,2,572,7,572,2,573,7,573,2,574,7,574,2,575,7,575,2,576,
        7,576,2,577,7,577,2,578,7,578,2,579,7,579,2,580,7,580,2,581,7,581,
        2,582,7,582,2,583,7,583,2,584,7,584,2,585,7,585,2,586,7,586,2,587,
        7,587,2,588,7,588,2,589,7,589,2,590,7,590,2,591,7,591,2,592,7,592,
        2,593,7,593,2,594,7,594,2,595,7,595,2,596,7,596,2,597,7,597,2,598,
        7,598,2,599,7,599,2,600,7,600,2,601,7,601,2,602,7,602,2,603,7,603,
        2,604,7,604,2,605,7,605,2,606,7,606,2,607,7,607,2,608,7,608,2,609,
        7,609,1,0,5,0,1222,8,0,10,0,12,0,1225,9,0,1,0,1,0,1,0,5,0,1230,8,
        0,10,0,12,0,1233,9,0,1,0,1,0,3,0,1237,8,0,1,1,1,1,3,1,1241,8,1,1,
        1,1,1,4,1,1245,8,1,11,1,12,1,1246,3,1,1249,8,1,1,1,5,1,1252,8,1,
        10,1,12,1,1255,9,1,1,1,1,1,5,1,1259,8,1,10,1,12,1,1262,9,1,3,1,1264,
        8,1,1,2,1,2,1,2,1,2,3,2,1270,8,2,1,3,1,3,3,3,1274,8,3,1,3,1,3,3,
        3,1278,8,3,1,3,1,3,3,3,1282,8,3,1,3,1,3,3,3,1286,8,3,1,3,1,3,3,3,
        1290,8,3,1,3,1,3,3,3,1294,8,3,1,3,3,3,1297,8,3,1,4,1,4,1,4,1,4,1,
        4,1,4,3,4,1305,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,1472,8,5,1,6,1,6,1,6,1,
        6,1,6,3,6,1479,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,3,7,1493,8,7,1,8,1,8,3,8,1497,8,8,1,8,5,8,1500,8,8,10,8,12,8,1503,
        9,8,1,8,1,8,3,8,1507,8,8,1,9,1,9,3,9,1511,8,9,1,10,1,10,3,10,1515,
        8,10,1,11,1,11,1,11,3,11,1520,8,11,1,11,1,11,1,11,3,11,1525,8,11,
        3,11,1527,8,11,1,12,1,12,3,12,1531,8,12,1,12,3,12,1534,8,12,1,13,
        1,13,1,13,1,13,1,13,3,13,1541,8,13,1,13,3,13,1544,8,13,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,3,14,1553,8,14,1,14,3,14,1556,8,14,1,15,
        1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,3,18,1567,8,18,1,18,4,18,
        1570,8,18,11,18,12,18,1571,1,18,1,18,1,18,3,18,1577,8,18,1,18,1,
        18,1,18,3,18,1582,8,18,1,18,5,18,1585,8,18,10,18,12,18,1588,9,18,
        1,18,1,18,1,18,3,18,1593,8,18,1,19,1,19,3,19,1597,8,19,1,19,3,19,
        1600,8,19,1,19,1,19,3,19,1604,8,19,1,19,3,19,1607,8,19,1,19,3,19,
        1610,8,19,1,20,1,20,1,20,1,20,1,20,3,20,1617,8,20,1,20,1,20,3,20,
        1621,8,20,3,20,1623,8,20,1,21,1,21,1,21,3,21,1628,8,21,1,21,1,21,
        5,21,1632,8,21,10,21,12,21,1635,9,21,1,21,3,21,1638,8,21,1,22,1,
        22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,1650,8,22,5,22,1652,
        8,22,10,22,12,22,1655,9,22,1,22,1,22,1,22,3,22,1660,8,22,1,22,3,
        22,1663,8,22,1,22,1,22,1,22,1,22,1,22,5,22,1670,8,22,10,22,12,22,
        1673,9,22,3,22,1675,8,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,1696,
        8,24,1,25,1,25,1,25,1,25,1,25,1,25,3,25,1704,8,25,1,25,1,25,1,25,
        3,25,1709,8,25,1,25,3,25,1712,8,25,1,25,1,25,1,25,3,25,1717,8,25,
        1,25,3,25,1720,8,25,1,25,1,25,1,25,3,25,1725,8,25,1,26,1,26,1,26,
        1,26,1,26,1,26,1,26,3,26,1734,8,26,1,26,1,26,1,26,1,26,1,27,1,27,
        1,27,1,27,1,27,1,27,3,27,1746,8,27,1,27,1,27,1,27,3,27,1751,8,27,
        1,27,3,27,1754,8,27,1,27,1,27,1,27,3,27,1759,8,27,1,28,1,28,1,28,
        1,28,3,28,1765,8,28,1,28,1,28,1,28,3,28,1770,8,28,1,28,1,28,1,29,
        1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,32,3,32,
        1787,8,32,1,32,3,32,1790,8,32,1,32,3,32,1793,8,32,1,32,3,32,1796,
        8,32,1,33,1,33,1,33,3,33,1801,8,33,1,34,1,34,1,35,1,35,1,35,1,36,
        1,36,3,36,1810,8,36,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,39,
        1,40,1,40,1,40,1,40,3,40,1825,8,40,1,41,1,41,1,42,1,42,1,42,1,43,
        1,43,1,44,1,44,1,44,1,45,1,45,1,46,1,46,1,46,3,46,1842,8,46,1,47,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1853,8,47,1,47,1,47,
        5,47,1857,8,47,10,47,12,47,1860,9,47,1,48,1,48,1,48,1,48,1,49,1,
        49,1,50,1,50,1,51,1,51,1,51,1,51,3,51,1874,8,51,1,52,1,52,1,53,1,
        53,1,53,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,3,55,1889,8,55,1,
        56,1,56,1,57,1,57,1,57,1,57,1,57,3,57,1898,8,57,1,57,1,57,3,57,1902,
        8,57,1,57,4,57,1905,8,57,11,57,12,57,1906,1,57,1,57,1,57,1,57,3,
        57,1913,8,57,1,58,1,58,1,58,1,58,3,58,1919,8,58,1,58,3,58,1922,8,
        58,1,58,4,58,1925,8,58,11,58,12,58,1926,1,58,1,58,1,58,3,58,1932,
        8,58,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1940,8,59,1,60,1,60,1,60,
        1,60,1,61,1,61,1,61,1,61,3,61,1950,8,61,1,61,1,61,1,62,1,62,1,62,
        1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,
        1969,8,63,1,64,1,64,1,64,1,64,1,64,1,64,3,64,1977,8,64,1,64,1,64,
        1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,1990,8,64,3,64,
        1992,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,
        2004,8,64,3,64,2006,8,64,1,64,1,64,1,64,1,64,1,64,3,64,2013,8,64,
        1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,2022,8,65,1,66,1,66,1,66,
        1,66,3,66,2028,8,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,3,67,2037,
        8,67,1,68,1,68,1,69,1,69,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,
        3,71,2051,8,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,3,72,2061,
        8,72,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,3,73,2071,8,73,1,73,
        1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
        1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
        1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,2111,
        8,74,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,
        1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,2134,8,75,1,76,
        1,76,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
        1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
        1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,2170,8,78,3,78,2172,8,78,
        1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
        1,78,1,78,1,78,3,78,2190,8,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
        1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
        1,78,1,78,3,78,2214,8,78,1,78,3,78,2217,8,78,1,78,1,78,1,78,1,78,
        1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,2231,8,78,1,79,1,79,
        1,79,1,79,1,79,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,3,82,2263,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,2281,8,82,1,82,3,82,
        2284,8,82,1,82,1,82,1,82,3,82,2289,8,82,1,82,3,82,2292,8,82,1,82,
        1,82,1,82,3,82,2297,8,82,1,82,3,82,2300,8,82,1,82,1,82,1,82,3,82,
        2305,8,82,1,82,3,82,2308,8,82,1,82,1,82,1,82,3,82,2313,8,82,1,82,
        3,82,2316,8,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,2324,8,82,1,82,
        3,82,2327,8,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,2335,8,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,2348,8,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,2359,8,82,1,82,
        5,82,2362,8,82,10,82,12,82,2365,9,82,1,82,3,82,2368,8,82,1,82,1,
        82,1,82,1,82,3,82,2374,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
        82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
        82,3,82,2397,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
        82,3,82,2409,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,
        82,2420,8,82,1,82,5,82,2423,8,82,10,82,12,82,2426,9,82,1,82,3,82,
        2429,8,82,1,82,1,82,1,82,1,82,3,82,2435,8,82,3,82,2437,8,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,2450,8,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,4,82,2471,8,82,11,82,12,82,2472,1,
        82,1,82,1,82,1,82,1,82,3,82,2480,8,82,1,82,1,82,1,82,1,82,1,82,1,
        82,1,82,3,82,2489,8,82,1,82,1,82,1,82,3,82,2494,8,82,1,82,3,82,2497,
        8,82,1,82,1,82,1,82,3,82,2502,8,82,1,82,3,82,2505,8,82,1,82,1,82,
        1,82,3,82,2510,8,82,1,82,4,82,2513,8,82,11,82,12,82,2514,1,82,1,
        82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
        82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,2543,
        8,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,2551,8,82,1,82,1,82,4,82,
        2555,8,82,11,82,12,82,2556,1,82,1,82,1,82,1,82,1,82,3,82,2564,8,
        82,3,82,2566,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
        82,1,82,3,82,2579,8,82,1,82,1,82,1,82,1,82,1,82,3,82,2586,8,82,1,
        82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,
        82,2601,8,82,1,83,1,83,1,84,1,84,1,85,1,85,1,85,1,85,1,85,1,85,1,
        85,1,85,1,85,1,85,1,85,1,85,3,85,2619,8,85,1,85,3,85,2622,8,85,3,
        85,2624,8,85,1,85,1,85,1,85,3,85,2629,8,85,1,85,1,85,3,85,2633,8,
        85,1,85,3,85,2636,8,85,3,85,2638,8,85,1,85,1,85,1,85,1,85,3,85,2644,
        8,85,1,85,3,85,2647,8,85,3,85,2649,8,85,1,85,1,85,1,85,1,85,3,85,
        2655,8,85,3,85,2657,8,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,87,
        1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,
        2679,8,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,2687,8,87,1,87,1,87,
        1,87,1,87,1,87,1,87,3,87,2695,8,87,4,87,2697,8,87,11,87,12,87,2698,
        1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,2708,8,87,1,88,1,88,1,88,
        1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
        1,88,1,88,1,88,3,88,2729,8,88,1,88,1,88,1,89,1,89,1,89,1,89,1,89,
        1,89,1,89,1,89,1,89,3,89,2742,8,89,1,89,1,89,1,89,1,89,1,89,1,89,
        1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,2757,8,89,4,89,2759,8,89,
        11,89,12,89,2760,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,
        91,1,92,1,92,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,94,1,94,1,
        94,1,94,1,95,1,95,1,95,1,95,1,95,1,96,1,96,1,96,1,96,3,96,2796,8,
        96,1,96,3,96,2799,8,96,1,96,4,96,2802,8,96,11,96,12,96,2803,1,97,
        1,97,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,1,99,1,99,1,99,
        1,99,1,99,1,99,1,100,1,100,1,100,1,100,3,100,2827,8,100,1,100,3,
        100,2830,8,100,1,100,1,100,1,100,3,100,2835,8,100,1,100,1,100,1,
        101,1,101,1,101,1,101,1,102,1,102,1,102,1,102,1,102,1,102,1,103,
        1,103,1,103,1,103,1,103,1,103,1,104,1,104,1,104,1,104,1,104,1,104,
        3,104,2861,8,104,1,105,1,105,1,105,1,105,1,105,1,105,1,106,1,106,
        1,106,1,106,1,106,1,106,3,106,2875,8,106,1,106,1,106,1,106,3,106,
        2880,8,106,1,106,1,106,1,107,1,107,1,107,1,107,3,107,2888,8,107,
        1,107,4,107,2891,8,107,11,107,12,107,2892,1,107,1,107,1,107,1,107,
        1,107,3,107,2900,8,107,1,108,1,108,1,108,1,108,1,108,1,108,1,108,
        1,109,1,109,1,109,1,109,1,109,1,110,1,110,1,110,1,110,1,110,1,110,
        1,110,3,110,2921,8,110,1,110,1,110,1,111,1,111,1,111,1,111,1,111,
        1,112,1,112,1,112,1,112,1,113,1,113,1,113,1,113,1,114,1,114,1,114,
        1,114,1,114,1,115,1,115,1,115,1,115,1,115,1,116,1,116,1,116,1,116,
        1,116,1,117,1,117,1,117,1,117,1,117,3,117,2958,8,117,1,117,1,117,
        1,117,3,117,2963,8,117,1,117,1,117,1,118,1,118,1,118,1,118,1,118,
        1,118,1,119,1,119,1,119,1,119,1,119,1,120,1,120,1,120,1,120,3,120,
        2982,8,120,1,120,1,120,1,121,1,121,1,121,1,121,1,122,1,122,1,122,
        1,122,3,122,2994,8,122,1,122,3,122,2997,8,122,1,122,1,122,1,122,
        3,122,3002,8,122,1,122,3,122,3005,8,122,1,123,1,123,1,123,1,123,
        3,123,3011,8,123,1,123,1,123,1,124,1,124,1,124,1,124,1,124,1,124,
        1,125,1,125,1,125,1,125,1,125,3,125,3026,8,125,1,125,1,125,1,125,
        3,125,3031,8,125,1,125,1,125,1,126,1,126,1,126,1,126,3,126,3039,
        8,126,1,126,3,126,3042,8,126,1,126,1,126,1,126,3,126,3047,8,126,
        1,126,1,126,1,126,3,126,3052,8,126,1,126,3,126,3055,8,126,1,127,
        1,127,1,127,1,127,1,127,1,128,1,128,1,128,1,128,1,128,1,128,1,129,
        1,129,1,129,1,129,1,129,1,130,1,130,1,130,1,130,1,131,1,131,3,131,
        3079,8,131,1,131,1,131,1,131,1,131,1,131,3,131,3086,8,131,1,131,
        1,131,1,131,3,131,3091,8,131,1,131,1,131,1,131,3,131,3096,8,131,
        1,131,1,131,1,131,4,131,3101,8,131,11,131,12,131,3102,1,132,1,132,
        1,132,1,132,1,132,3,132,3110,8,132,1,132,1,132,1,132,1,132,1,133,
        1,133,1,133,1,133,1,133,1,133,1,133,3,133,3123,8,133,1,134,1,134,
        1,134,1,134,3,134,3129,8,134,1,134,1,134,1,134,3,134,3134,8,134,
        1,134,1,134,1,135,1,135,1,135,1,135,3,135,3142,8,135,1,135,1,135,
        1,136,1,136,1,136,1,136,1,136,1,137,1,137,1,137,1,137,1,137,1,137,
        1,137,3,137,3158,8,137,1,137,1,137,1,138,1,138,1,138,3,138,3165,
        8,138,1,138,1,138,1,138,3,138,3170,8,138,1,138,4,138,3173,8,138,
        11,138,12,138,3174,1,138,3,138,3178,8,138,1,138,1,138,1,138,1,138,
        3,138,3184,8,138,1,138,1,138,1,138,1,138,3,138,3190,8,138,1,139,
        1,139,1,139,3,139,3195,8,139,1,139,1,139,1,139,3,139,3200,8,139,
        1,139,4,139,3203,8,139,11,139,12,139,3204,1,139,3,139,3208,8,139,
        1,139,1,139,1,139,1,139,3,139,3214,8,139,1,139,1,139,1,139,1,139,
        3,139,3220,8,139,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,
        1,140,3,140,3231,8,140,1,140,3,140,3234,8,140,1,141,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,3,141,3244,8,141,1,141,1,141,1,141,
        1,141,3,141,3250,8,141,4,141,3252,8,141,11,141,12,141,3253,1,141,
        1,141,3,141,3258,8,141,1,142,1,142,1,142,1,142,1,142,1,142,1,142,
        1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,143,1,143,
        1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,3,143,3287,
        8,143,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,
        1,144,3,144,3300,8,144,1,144,1,144,1,144,1,144,3,144,3306,8,144,
        1,145,1,145,1,145,1,145,1,145,1,145,1,145,1,145,3,145,3316,8,145,
        1,145,3,145,3319,8,145,1,146,1,146,1,146,1,146,1,146,1,146,1,146,
        1,146,1,146,1,147,1,147,1,147,1,147,1,147,3,147,3335,8,147,1,147,
        1,147,1,147,3,147,3340,8,147,1,147,1,147,1,147,1,147,1,147,1,147,
        1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,3,147,3356,8,147,
        1,147,3,147,3359,8,147,1,147,3,147,3362,8,147,1,147,1,147,1,147,
        3,147,3367,8,147,1,147,3,147,3370,8,147,1,147,1,147,1,147,3,147,
        3375,8,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,3,147,3384,
        8,147,1,147,3,147,3387,8,147,1,147,3,147,3390,8,147,1,147,1,147,
        1,147,1,147,1,147,3,147,3397,8,147,1,148,1,148,1,148,1,148,1,148,
        1,148,3,148,3405,8,148,1,148,1,148,3,148,3409,8,148,3,148,3411,8,
        148,3,148,3413,8,148,1,149,1,149,1,149,1,149,3,149,3419,8,149,1,
        149,1,149,3,149,3423,8,149,1,149,1,149,1,149,3,149,3428,8,149,1,
        149,3,149,3431,8,149,3,149,3433,8,149,1,150,1,150,1,150,1,150,1,
        150,1,150,1,150,1,150,1,150,1,150,3,150,3445,8,150,1,150,3,150,3448,
        8,150,3,150,3450,8,150,1,151,1,151,1,151,1,151,1,151,1,151,1,151,
        1,151,1,151,3,151,3461,8,151,1,151,1,151,3,151,3465,8,151,1,151,
        1,151,3,151,3469,8,151,1,151,4,151,3472,8,151,11,151,12,151,3473,
        1,151,1,151,1,151,1,151,1,151,1,151,1,152,1,152,1,152,1,152,1,152,
        1,152,1,152,3,152,3489,8,152,1,152,1,152,1,152,1,152,1,152,3,152,
        3496,8,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,3,152,3505,
        8,152,1,152,1,152,1,152,1,152,5,152,3511,8,152,10,152,12,152,3514,
        9,152,3,152,3516,8,152,1,152,1,152,1,152,3,152,3521,8,152,1,152,
        1,152,1,152,3,152,3526,8,152,1,152,1,152,1,152,1,152,4,152,3532,
        8,152,11,152,12,152,3533,1,152,1,152,4,152,3538,8,152,11,152,12,
        152,3539,1,152,1,152,3,152,3544,8,152,1,152,1,152,5,152,3548,8,152,
        10,152,12,152,3551,9,152,5,152,3553,8,152,10,152,12,152,3556,9,152,
        1,152,3,152,3559,8,152,1,152,1,152,1,152,1,152,1,152,3,152,3566,
        8,152,1,152,1,152,1,152,1,152,5,152,3572,8,152,10,152,12,152,3575,
        9,152,1,152,1,152,1,152,1,152,1,152,3,152,3582,8,152,1,152,1,152,
        1,152,1,152,1,152,1,152,1,152,3,152,3591,8,152,1,152,1,152,1,152,
        3,152,3596,8,152,1,152,1,152,3,152,3600,8,152,1,152,3,152,3603,8,
        152,4,152,3605,8,152,11,152,12,152,3606,1,152,1,152,5,152,3611,8,
        152,10,152,12,152,3614,9,152,5,152,3616,8,152,10,152,12,152,3619,
        9,152,1,152,1,152,1,152,1,152,1,152,3,152,3626,8,152,1,152,1,152,
        1,152,1,152,5,152,3632,8,152,10,152,12,152,3635,9,152,1,152,1,152,
        1,152,3,152,3640,8,152,1,152,1,152,1,152,1,152,3,152,3646,8,152,
        1,152,3,152,3649,8,152,1,152,1,152,1,152,3,152,3654,8,152,1,152,
        3,152,3657,8,152,1,152,1,152,1,152,1,152,1,152,3,152,3664,8,152,
        3,152,3666,8,152,1,152,3,152,3669,8,152,1,152,1,152,1,152,1,152,
        3,152,3675,8,152,1,152,3,152,3678,8,152,1,152,1,152,1,152,3,152,
        3683,8,152,1,152,3,152,3686,8,152,1,152,1,152,1,152,3,152,3691,8,
        152,1,152,3,152,3694,8,152,1,152,1,152,1,152,3,152,3699,8,152,1,
        152,3,152,3702,8,152,1,152,1,152,1,152,3,152,3707,8,152,1,153,3,
        153,3710,8,153,1,153,3,153,3713,8,153,1,153,3,153,3716,8,153,1,153,
        1,153,1,153,1,153,1,153,3,153,3723,8,153,4,153,3725,8,153,11,153,
        12,153,3726,1,154,1,154,1,154,1,154,1,154,3,154,3734,8,154,1,155,
        1,155,1,155,1,155,1,155,3,155,3741,8,155,1,155,1,155,1,155,1,155,
        3,155,3747,8,155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,
        1,155,1,155,1,155,3,155,3760,8,155,1,155,1,155,3,155,3764,8,155,
        1,155,1,155,1,155,3,155,3769,8,155,1,155,1,155,1,155,1,155,1,155,
        1,155,1,155,1,155,3,155,3779,8,155,1,155,1,155,1,155,1,155,1,155,
        1,155,1,155,3,155,3788,8,155,1,155,1,155,3,155,3792,8,155,1,156,
        1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,3,156,3804,
        8,156,1,156,1,156,1,156,1,156,3,156,3810,8,156,1,156,1,156,1,156,
        4,156,3815,8,156,11,156,12,156,3816,1,156,1,156,1,156,1,156,1,156,
        1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,
        1,156,1,156,3,156,3837,8,156,1,156,1,156,3,156,3841,8,156,1,157,
        1,157,1,157,1,157,1,157,1,157,3,157,3849,8,157,1,157,1,157,1,157,
        1,157,1,157,1,157,1,157,3,157,3858,8,157,1,157,1,157,1,157,1,157,
        3,157,3864,8,157,1,157,1,157,1,157,1,157,3,157,3870,8,157,1,157,
        1,157,1,157,1,157,1,157,1,157,4,157,3878,8,157,11,157,12,157,3879,
        1,157,1,157,1,158,1,158,1,158,1,158,1,158,1,158,3,158,3890,8,158,
        1,158,1,158,3,158,3894,8,158,1,158,3,158,3897,8,158,1,158,1,158,
        3,158,3901,8,158,1,158,1,158,1,158,3,158,3906,8,158,1,158,1,158,
        1,158,1,158,3,158,3912,8,158,1,158,3,158,3915,8,158,1,158,1,158,
        3,158,3919,8,158,1,158,1,158,1,158,1,158,1,158,1,158,4,158,3927,
        8,158,11,158,12,158,3928,1,158,3,158,3932,8,158,1,159,1,159,1,159,
        1,159,1,159,1,159,3,159,3940,8,159,1,159,1,159,1,159,1,159,1,159,
        1,159,3,159,3948,8,159,1,159,1,159,1,159,1,159,1,159,3,159,3955,
        8,159,1,159,1,159,1,159,1,159,1,159,4,159,3962,8,159,11,159,12,159,
        3963,3,159,3966,8,159,1,159,1,159,1,159,3,159,3971,8,159,1,159,1,
        159,1,159,1,159,3,159,3977,8,159,1,159,4,159,3980,8,159,11,159,12,
        159,3981,3,159,3984,8,159,1,159,3,159,3987,8,159,1,159,1,159,1,159,
        3,159,3992,8,159,1,159,3,159,3995,8,159,1,159,1,159,1,159,3,159,
        4000,8,159,1,159,1,159,1,160,1,160,1,160,1,160,1,160,1,160,1,160,
        1,160,1,160,1,160,1,160,3,160,4015,8,160,1,160,1,160,1,160,1,160,
        1,160,3,160,4022,8,160,1,160,1,160,1,160,1,160,1,160,4,160,4029,
        8,160,11,160,12,160,4030,3,160,4033,8,160,1,160,1,160,1,160,3,160,
        4038,8,160,1,160,1,160,1,160,1,160,3,160,4044,8,160,1,160,4,160,
        4047,8,160,11,160,12,160,4048,3,160,4051,8,160,1,160,3,160,4054,
        8,160,1,160,1,160,1,160,3,160,4059,8,160,1,160,3,160,4062,8,160,
        1,160,1,160,1,160,3,160,4067,8,160,1,160,1,160,1,161,1,161,1,161,
        1,161,1,161,1,161,1,161,1,161,1,161,3,161,4080,8,161,1,161,1,161,
        1,161,3,161,4085,8,161,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        3,162,4094,8,162,1,162,1,162,1,162,3,162,4099,8,162,1,162,1,162,
        1,162,1,162,3,162,4105,8,162,1,162,1,162,3,162,4109,8,162,1,162,
        1,162,3,162,4113,8,162,1,163,1,163,1,163,1,163,1,163,1,163,1,163,
        1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,3,163,4130,8,163,
        3,163,4132,8,163,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
        3,164,4142,8,164,1,164,1,164,1,164,3,164,4147,8,164,3,164,4149,8,
        164,1,164,1,164,3,164,4153,8,164,1,165,1,165,1,165,1,165,3,165,4159,
        8,165,1,165,1,165,1,165,1,165,1,165,1,165,3,165,4167,8,165,1,165,
        5,165,4170,8,165,10,165,12,165,4173,9,165,3,165,4175,8,165,1,165,
        1,165,1,165,1,165,5,165,4181,8,165,10,165,12,165,4184,9,165,3,165,
        4186,8,165,1,165,1,165,1,165,3,165,4191,8,165,1,165,1,165,1,165,
        3,165,4196,8,165,1,165,1,165,1,165,3,165,4201,8,165,1,165,1,165,
        1,165,3,165,4206,8,165,1,165,1,165,1,165,3,165,4211,8,165,1,165,
        1,165,1,165,3,165,4216,8,165,1,165,1,165,3,165,4220,8,165,1,165,
        1,165,1,165,3,165,4225,8,165,1,166,1,166,1,166,1,166,1,166,1,166,
        1,166,1,166,1,166,3,166,4236,8,166,1,166,5,166,4239,8,166,10,166,
        12,166,4242,9,166,3,166,4244,8,166,1,166,3,166,4247,8,166,1,166,
        1,166,1,166,3,166,4252,8,166,1,166,3,166,4255,8,166,1,166,1,166,
        1,166,3,166,4260,8,166,1,166,3,166,4263,8,166,1,166,1,166,1,166,
        3,166,4268,8,166,1,166,3,166,4271,8,166,1,166,1,166,1,166,3,166,
        4276,8,166,1,166,3,166,4279,8,166,1,166,1,166,1,166,3,166,4284,8,
        166,1,166,3,166,4287,8,166,1,166,1,166,1,166,3,166,4292,8,166,1,
        166,1,166,1,166,1,166,3,166,4298,8,166,1,166,1,166,1,166,3,166,4303,
        8,166,1,166,3,166,4306,8,166,1,166,1,166,1,166,3,166,4311,8,166,
        1,166,1,166,1,166,1,166,1,166,3,166,4318,8,166,3,166,4320,8,166,
        1,167,1,167,1,167,1,167,3,167,4326,8,167,1,167,1,167,1,167,1,167,
        1,167,1,167,1,167,3,167,4335,8,167,1,167,1,167,1,167,3,167,4340,
        8,167,3,167,4342,8,167,1,168,1,168,1,168,1,168,1,168,1,168,1,168,
        1,168,1,168,1,168,3,168,4354,8,168,1,169,1,169,1,169,1,169,3,169,
        4360,8,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,5,169,
        4370,8,169,10,169,12,169,4373,9,169,3,169,4375,8,169,1,169,1,169,
        1,169,3,169,4380,8,169,3,169,4382,8,169,1,170,1,170,1,170,1,170,
        1,170,1,170,1,170,1,170,3,170,4392,8,170,1,170,1,170,1,170,3,170,
        4397,8,170,3,170,4399,8,170,1,170,1,170,3,170,4403,8,170,1,171,1,
        171,1,171,1,171,3,171,4409,8,171,1,171,1,171,1,171,1,171,1,171,1,
        171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,
        3,171,4427,8,171,3,171,4429,8,171,1,172,1,172,1,172,1,172,1,172,
        1,172,1,172,1,172,1,172,1,173,1,173,1,173,1,173,3,173,4444,8,173,
        1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,1,173,3,173,4462,8,173,1,173,1,173,1,173,
        1,173,1,173,1,173,3,173,4470,8,173,1,174,1,174,1,174,1,174,1,174,
        1,174,1,174,1,174,3,174,4480,8,174,1,175,1,175,1,175,1,175,1,175,
        1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,3,175,4496,
        8,175,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,
        1,176,1,176,1,177,1,177,1,177,1,177,1,177,1,177,1,177,3,177,4517,
        8,177,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,3,178,
        4528,8,178,1,178,1,178,1,178,1,178,3,178,4534,8,178,1,179,1,179,
        1,179,1,179,1,179,1,179,1,179,3,179,4543,8,179,1,179,1,179,1,179,
        1,179,1,179,1,179,1,179,3,179,4552,8,179,1,179,1,179,1,179,1,179,
        3,179,4558,8,179,1,180,1,180,1,180,1,180,1,180,1,180,1,180,3,180,
        4567,8,180,1,180,1,180,1,180,3,180,4572,8,180,1,180,3,180,4575,8,
        180,1,180,1,180,1,180,3,180,4580,8,180,1,180,3,180,4583,8,180,1,
        180,1,180,1,180,3,180,4588,8,180,1,180,3,180,4591,8,180,1,180,1,
        180,1,180,1,180,1,180,1,180,3,180,4599,8,180,1,180,1,180,1,180,1,
        180,3,180,4605,8,180,4,180,4607,8,180,11,180,12,180,4608,1,180,1,
        180,1,180,1,180,1,180,3,180,4616,8,180,1,180,1,180,1,180,1,180,3,
        180,4622,8,180,4,180,4624,8,180,11,180,12,180,4625,1,180,3,180,4629,
        8,180,3,180,4631,8,180,1,180,3,180,4634,8,180,1,180,1,180,1,180,
        3,180,4639,8,180,1,180,3,180,4642,8,180,1,180,1,180,1,180,3,180,
        4647,8,180,1,180,3,180,4650,8,180,1,180,1,180,1,180,3,180,4655,8,
        180,1,180,3,180,4658,8,180,1,180,1,180,1,180,3,180,4663,8,180,1,
        180,3,180,4666,8,180,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,
        181,1,181,1,181,1,181,1,181,1,181,3,181,4681,8,181,1,181,1,181,1,
        181,1,181,1,181,1,181,1,181,1,181,1,181,3,181,4692,8,181,1,182,1,
        182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,3,182,4703,8,182,1,
        182,1,182,1,182,5,182,4708,8,182,10,182,12,182,4711,9,182,3,182,
        4713,8,182,1,182,1,182,1,182,1,182,1,182,1,182,3,182,4721,8,182,
        1,183,1,183,1,183,1,183,3,183,4727,8,183,1,183,1,183,1,184,1,184,
        1,184,5,184,4734,8,184,10,184,12,184,4737,9,184,1,184,1,184,1,184,
        1,184,3,184,4743,8,184,1,184,1,184,1,184,1,184,1,184,5,184,4750,
        8,184,10,184,12,184,4753,9,184,1,185,1,185,1,186,1,186,1,187,1,187,
        1,187,3,187,4762,8,187,1,187,1,187,1,187,3,187,4767,8,187,1,187,
        1,187,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,
        3,188,4781,8,188,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,
        1,189,3,189,4792,8,189,1,189,1,189,1,189,5,189,4797,8,189,10,189,
        12,189,4800,9,189,3,189,4802,8,189,1,189,1,189,1,189,1,189,1,189,
        1,189,3,189,4810,8,189,1,190,1,190,1,190,1,190,1,190,3,190,4817,
        8,190,1,191,1,191,1,191,1,191,1,191,3,191,4824,8,191,1,191,1,191,
        3,191,4828,8,191,1,191,1,191,1,191,3,191,4833,8,191,1,191,3,191,
        4836,8,191,1,191,1,191,1,191,3,191,4841,8,191,1,191,3,191,4844,8,
        191,1,191,1,191,1,191,3,191,4849,8,191,1,191,3,191,4852,8,191,1,
        191,1,191,1,191,1,191,1,191,1,191,1,191,3,191,4861,8,191,1,192,1,
        192,1,192,1,192,1,192,3,192,4868,8,192,1,192,1,192,1,192,1,192,1,
        193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,3,193,4883,8,
        193,1,193,3,193,4886,8,193,1,193,1,193,1,193,3,193,4891,8,193,1,
        194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,3,194,4902,8,
        194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,3,194,4911,8,194,1,
        194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,3,194,4922,8,
        194,1,194,1,194,1,194,1,194,5,194,4928,8,194,10,194,12,194,4931,
        9,194,1,195,1,195,1,195,1,195,1,195,3,195,4938,8,195,1,196,1,196,
        1,196,1,196,1,196,1,196,3,196,4946,8,196,1,196,1,196,1,196,3,196,
        4951,8,196,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,
        3,197,4962,8,197,1,197,3,197,4965,8,197,1,197,1,197,3,197,4969,8,
        197,1,198,1,198,1,198,1,198,1,198,1,198,3,198,4977,8,198,1,198,1,
        198,3,198,4981,8,198,1,198,1,198,3,198,4985,8,198,1,198,1,198,1,
        198,1,198,1,198,1,198,3,198,4993,8,198,1,198,4,198,4996,8,198,11,
        198,12,198,4997,1,198,1,198,1,198,1,198,1,198,1,198,3,198,5006,8,
        198,1,198,1,198,1,198,3,198,5011,8,198,1,198,1,198,5,198,5015,8,
        198,10,198,12,198,5018,9,198,4,198,5020,8,198,11,198,12,198,5021,
        1,198,1,198,1,198,1,198,1,198,1,198,1,198,3,198,5031,8,198,1,198,
        3,198,5034,8,198,1,198,1,198,1,198,3,198,5039,8,198,1,199,1,199,
        1,199,1,199,1,199,3,199,5046,8,199,1,199,1,199,1,199,1,199,3,199,
        5052,8,199,3,199,5054,8,199,1,199,1,199,1,199,3,199,5059,8,199,1,
        199,1,199,1,199,1,199,3,199,5065,8,199,1,199,1,199,1,199,1,199,3,
        199,5071,8,199,1,199,1,199,1,199,3,199,5076,8,199,1,199,1,199,1,
        199,1,199,3,199,5082,8,199,1,200,1,200,1,200,1,200,1,200,3,200,5089,
        8,200,1,200,1,200,1,200,3,200,5094,8,200,1,200,1,200,1,200,3,200,
        5099,8,200,1,200,1,200,1,200,3,200,5104,8,200,1,200,3,200,5107,8,
        200,1,200,1,200,3,200,5111,8,200,1,200,3,200,5114,8,200,1,200,1,
        200,3,200,5118,8,200,1,200,1,200,3,200,5122,8,200,1,200,3,200,5125,
        8,200,1,200,1,200,3,200,5129,8,200,1,200,1,200,1,200,3,200,5134,
        8,200,1,200,1,200,3,200,5138,8,200,1,200,1,200,3,200,5142,8,200,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,3,201,5152,8,201,
        1,201,1,201,1,201,1,201,3,201,5158,8,201,1,201,1,201,1,201,1,201,
        1,201,3,201,5165,8,201,1,201,3,201,5168,8,201,1,201,1,201,1,201,
        1,201,3,201,5174,8,201,1,201,1,201,1,201,1,201,3,201,5180,8,201,
        1,201,1,201,1,201,5,201,5185,8,201,10,201,12,201,5188,9,201,1,201,
        1,201,1,201,3,201,5193,8,201,3,201,5195,8,201,1,201,1,201,1,201,
        3,201,5200,8,201,1,201,1,201,1,201,1,201,3,201,5206,8,201,1,201,
        1,201,1,201,1,201,3,201,5212,8,201,1,201,1,201,1,201,5,201,5217,
        8,201,10,201,12,201,5220,9,201,1,201,3,201,5223,8,201,1,201,1,201,
        3,201,5227,8,201,1,201,3,201,5230,8,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,3,201,5244,8,201,
        1,201,1,201,1,201,3,201,5249,8,201,1,201,1,201,3,201,5253,8,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        3,201,5266,8,201,1,201,3,201,5269,8,201,3,201,5271,8,201,1,201,1,
        201,1,201,1,201,1,201,1,201,3,201,5279,8,201,1,202,1,202,1,202,1,
        202,1,202,1,202,1,202,1,202,3,202,5289,8,202,1,202,1,202,1,202,1,
        202,3,202,5295,8,202,1,202,1,202,1,202,1,202,1,202,3,202,5302,8,
        202,1,202,3,202,5305,8,202,1,202,1,202,1,202,1,202,3,202,5311,8,
        202,1,202,1,202,1,202,1,202,3,202,5317,8,202,1,202,1,202,1,202,5,
        202,5322,8,202,10,202,12,202,5325,9,202,1,202,1,202,1,202,3,202,
        5330,8,202,3,202,5332,8,202,1,202,1,202,1,202,3,202,5337,8,202,1,
        202,1,202,1,202,1,202,3,202,5343,8,202,1,202,1,202,1,202,1,202,3,
        202,5349,8,202,1,202,1,202,1,202,1,202,3,202,5355,8,202,1,202,1,
        202,1,202,5,202,5360,8,202,10,202,12,202,5363,9,202,1,202,3,202,
        5366,8,202,1,202,1,202,3,202,5370,8,202,1,202,3,202,5373,8,202,1,
        202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
        1,202,3,202,5387,8,202,1,202,1,202,1,202,3,202,5392,8,202,1,202,
        1,202,3,202,5396,8,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
        1,202,1,202,1,202,1,202,3,202,5409,8,202,1,202,3,202,5412,8,202,
        3,202,5414,8,202,1,202,1,202,1,202,1,202,1,202,1,202,3,202,5422,
        8,202,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,3,203,
        5433,8,203,1,203,1,203,1,203,1,203,1,203,5,203,5440,8,203,10,203,
        12,203,5443,9,203,1,203,1,203,1,203,1,203,1,203,1,203,3,203,5451,
        8,203,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,3,204,
        5462,8,204,1,204,1,204,1,204,1,204,1,204,5,204,5469,8,204,10,204,
        12,204,5472,9,204,1,204,1,204,1,204,1,204,1,204,1,204,3,204,5480,
        8,204,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,
        3,205,5492,8,205,1,205,1,205,3,205,5496,8,205,1,205,1,205,1,205,
        4,205,5501,8,205,11,205,12,205,5502,3,205,5505,8,205,1,205,1,205,
        1,205,3,205,5510,8,205,1,205,1,205,3,205,5514,8,205,1,205,1,205,
        1,205,4,205,5519,8,205,11,205,12,205,5520,3,205,5523,8,205,1,205,
        1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,
        3,205,5537,8,205,1,205,1,205,1,205,3,205,5542,8,205,1,205,1,205,
        1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,
        1,205,1,205,1,205,1,205,1,205,1,205,1,205,3,205,5564,8,205,1,205,
        1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,
        1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,3,205,5586,8,205,
        1,205,1,205,1,205,3,205,5591,8,205,1,206,1,206,1,206,1,206,1,206,
        1,206,1,206,1,206,1,206,1,206,1,206,3,206,5604,8,206,1,207,1,207,
        1,207,1,207,1,207,1,207,3,207,5612,8,207,1,208,1,208,1,208,1,208,
        1,208,1,208,1,208,1,208,1,209,1,209,1,209,1,209,1,209,1,209,1,209,
        1,209,3,209,5630,8,209,1,209,3,209,5633,8,209,1,209,1,209,1,209,
        1,209,5,209,5639,8,209,10,209,12,209,5642,9,209,1,209,1,209,3,209,
        5646,8,209,1,210,1,210,1,210,1,210,1,211,1,211,1,211,1,211,1,211,
        3,211,5657,8,211,1,211,1,211,1,211,1,211,1,211,3,211,5664,8,211,
        1,211,1,211,1,211,3,211,5669,8,211,1,211,1,211,3,211,5673,8,211,
        4,211,5675,8,211,11,211,12,211,5676,1,211,3,211,5680,8,211,1,212,
        1,212,1,212,1,212,1,212,3,212,5687,8,212,1,212,1,212,1,212,1,212,
        1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,
        1,212,3,212,5705,8,212,3,212,5707,8,212,1,213,1,213,1,213,1,213,
        1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
        1,213,1,213,1,213,3,213,5727,8,213,1,214,1,214,1,214,1,214,1,214,
        3,214,5734,8,214,1,214,1,214,1,214,1,214,1,214,3,214,5741,8,214,
        1,214,1,214,1,214,3,214,5746,8,214,1,214,1,214,1,214,3,214,5751,
        8,214,1,214,1,214,1,214,1,214,3,214,5757,8,214,1,214,1,214,1,214,
        3,214,5762,8,214,3,214,5764,8,214,1,215,1,215,1,215,1,215,1,215,
        3,215,5771,8,215,1,215,1,215,1,215,1,215,3,215,5777,8,215,1,215,
        1,215,1,215,1,215,3,215,5783,8,215,1,215,3,215,5786,8,215,1,215,
        1,215,1,215,1,215,3,215,5792,8,215,1,215,1,215,1,215,1,215,1,215,
        1,215,4,215,5800,8,215,11,215,12,215,5801,1,215,3,215,5805,8,215,
        1,215,1,215,1,215,1,215,1,215,3,215,5812,8,215,1,215,3,215,5815,
        8,215,1,215,1,215,1,215,4,215,5820,8,215,11,215,12,215,5821,1,216,
        1,216,1,216,1,216,1,216,1,216,3,216,5830,8,216,1,216,1,216,3,216,
        5834,8,216,1,216,1,216,1,216,1,216,3,216,5840,8,216,1,216,1,216,
        1,216,5,216,5845,8,216,10,216,12,216,5848,9,216,3,216,5850,8,216,
        1,216,1,216,1,216,1,216,1,216,3,216,5857,8,216,1,216,1,216,1,216,
        1,216,3,216,5863,8,216,1,216,1,216,1,216,1,216,1,216,3,216,5870,
        8,216,1,216,3,216,5873,8,216,1,216,1,216,1,216,1,216,3,216,5879,
        8,216,1,216,1,216,1,216,5,216,5884,8,216,10,216,12,216,5887,9,216,
        3,216,5889,8,216,1,216,1,216,1,216,1,216,1,216,1,216,3,216,5897,
        8,216,1,216,1,216,1,216,1,216,3,216,5903,8,216,1,216,1,216,1,216,
        1,216,1,216,3,216,5910,8,216,1,216,3,216,5913,8,216,1,216,1,216,
        1,216,1,216,3,216,5919,8,216,1,216,1,216,1,216,5,216,5924,8,216,
        10,216,12,216,5927,9,216,1,216,1,216,1,216,1,216,1,216,3,216,5934,
        8,216,1,216,1,216,1,216,1,216,1,216,1,216,3,216,5942,8,216,1,216,
        1,216,1,216,1,216,3,216,5948,8,216,1,216,1,216,1,216,5,216,5953,
        8,216,10,216,12,216,5956,9,216,1,216,1,216,1,216,1,216,1,216,1,216,
        1,216,3,216,5965,8,216,1,216,1,216,1,216,3,216,5970,8,216,1,217,
        1,217,1,217,1,217,1,217,1,217,1,217,1,217,3,217,5980,8,217,1,217,
        1,217,1,217,1,217,3,217,5986,8,217,1,217,1,217,1,217,1,217,1,217,
        1,217,1,217,1,217,1,217,1,217,3,217,5998,8,217,3,217,6000,8,217,
        1,218,1,218,1,218,1,218,1,218,3,218,6007,8,218,1,218,1,218,1,218,
        1,218,3,218,6013,8,218,1,218,1,218,1,218,1,218,3,218,6019,8,218,
        1,218,1,218,1,218,1,218,3,218,6025,8,218,1,218,1,218,1,218,4,218,
        6030,8,218,11,218,12,218,6031,1,219,1,219,1,219,1,219,1,219,3,219,
        6039,8,219,1,219,1,219,1,219,1,219,1,219,1,219,3,219,6047,8,219,
        1,219,1,219,1,219,1,219,3,219,6053,8,219,1,219,1,219,1,219,1,219,
        1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,4,219,6067,8,219,
        11,219,12,219,6068,1,219,3,219,6072,8,219,1,219,1,219,1,219,3,219,
        6077,8,219,3,219,6079,8,219,1,220,1,220,1,220,1,220,1,220,1,220,
        1,220,1,220,1,220,1,220,3,220,6091,8,220,1,220,1,220,1,220,1,220,
        3,220,6097,8,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,
        1,220,1,220,1,220,1,220,4,220,6111,8,220,11,220,12,220,6112,1,220,
        3,220,6116,8,220,1,220,1,220,1,220,3,220,6121,8,220,1,220,3,220,
        6124,8,220,1,220,1,220,1,220,3,220,6129,8,220,3,220,6131,8,220,1,
        221,1,221,1,221,1,221,1,221,1,221,1,221,3,221,6140,8,221,1,221,1,
        221,1,221,1,221,1,221,3,221,6147,8,221,1,222,1,222,1,222,1,222,1,
        222,1,222,1,222,1,222,1,222,1,222,3,222,6159,8,222,1,222,1,222,1,
        222,1,222,1,222,1,222,1,223,1,223,1,223,1,223,1,223,1,223,1,223,
        1,223,3,223,6175,8,223,1,223,1,223,1,223,1,223,1,223,5,223,6182,
        8,223,10,223,12,223,6185,9,223,1,223,1,223,1,224,1,224,1,224,1,224,
        3,224,6193,8,224,1,224,3,224,6196,8,224,1,224,1,224,1,224,3,224,
        6201,8,224,1,225,1,225,1,225,1,225,1,225,3,225,6208,8,225,3,225,
        6210,8,225,1,225,1,225,1,225,1,225,3,225,6216,8,225,3,225,6218,8,
        225,1,225,1,225,1,225,1,225,1,225,1,225,3,225,6226,8,225,3,225,6228,
        8,225,1,225,1,225,1,225,1,225,3,225,6234,8,225,3,225,6236,8,225,
        1,225,1,225,1,225,1,225,3,225,6242,8,225,3,225,6244,8,225,1,225,
        1,225,1,225,1,225,1,225,3,225,6251,8,225,1,225,3,225,6254,8,225,
        3,225,6256,8,225,1,225,3,225,6259,8,225,1,225,1,225,3,225,6263,8,
        225,3,225,6265,8,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,
        225,3,225,6275,8,225,1,226,1,226,1,226,1,226,3,226,6281,8,226,1,
        226,1,226,3,226,6285,8,226,1,227,1,227,1,227,1,227,1,227,1,227,3,
        227,6293,8,227,1,227,1,227,1,227,1,227,1,227,3,227,6300,8,227,1,
        227,1,227,1,227,1,227,3,227,6306,8,227,3,227,6308,8,227,1,228,1,
        228,1,228,1,228,1,229,1,229,1,229,1,229,1,229,3,229,6319,8,229,1,
        229,1,229,1,229,3,229,6324,8,229,1,229,1,229,1,229,1,229,3,229,6330,
        8,229,4,229,6332,8,229,11,229,12,229,6333,1,229,1,229,1,230,1,230,
        1,230,1,230,1,230,1,230,3,230,6344,8,230,1,231,1,231,1,231,1,231,
        1,231,1,231,3,231,6352,8,231,1,231,1,231,1,231,1,231,1,231,1,231,
        1,231,1,231,1,231,1,231,3,231,6364,8,231,1,232,3,232,6367,8,232,
        1,232,1,232,1,232,1,232,1,232,1,232,3,232,6375,8,232,3,232,6377,
        8,232,1,232,3,232,6380,8,232,1,232,1,232,3,232,6384,8,232,1,232,
        3,232,6387,8,232,1,232,1,232,1,232,1,232,1,232,4,232,6394,8,232,
        11,232,12,232,6395,1,232,3,232,6399,8,232,1,232,3,232,6402,8,232,
        1,232,1,232,1,233,1,233,1,233,1,233,3,233,6410,8,233,1,233,1,233,
        4,233,6414,8,233,11,233,12,233,6415,1,233,1,233,1,233,1,233,1,233,
        3,233,6423,8,233,1,233,1,233,3,233,6427,8,233,1,233,1,233,1,233,
        1,233,1,233,1,233,1,233,1,233,1,233,3,233,6438,8,233,1,233,1,233,
        4,233,6442,8,233,11,233,12,233,6443,3,233,6446,8,233,1,234,1,234,
        1,234,1,234,1,234,5,234,6453,8,234,10,234,12,234,6456,9,234,1,234,
        3,234,6459,8,234,1,235,1,235,1,235,1,235,1,235,3,235,6466,8,235,
        1,235,1,235,1,235,3,235,6471,8,235,1,236,3,236,6474,8,236,1,236,
        1,236,1,236,1,236,1,236,1,236,3,236,6482,8,236,1,236,1,236,3,236,
        6486,8,236,1,236,3,236,6489,8,236,1,236,1,236,3,236,6493,8,236,1,
        236,3,236,6496,8,236,1,236,1,236,3,236,6500,8,236,1,236,1,236,1,
        236,1,236,1,236,3,236,6507,8,236,1,236,1,236,3,236,6511,8,236,3,
        236,6513,8,236,3,236,6515,8,236,1,236,3,236,6518,8,236,1,236,3,236,
        6521,8,236,1,236,3,236,6524,8,236,1,237,1,237,1,237,3,237,6529,8,
        237,1,238,3,238,6532,8,238,1,238,1,238,1,238,1,238,1,238,1,238,3,
        238,6540,8,238,3,238,6542,8,238,1,238,3,238,6545,8,238,1,238,1,238,
        3,238,6549,8,238,1,238,3,238,6552,8,238,1,238,1,238,1,238,1,238,
        3,238,6558,8,238,1,238,3,238,6561,8,238,1,238,1,238,3,238,6565,8,
        238,1,238,3,238,6568,8,238,1,238,3,238,6571,8,238,1,239,1,239,1,
        239,1,239,1,239,3,239,6578,8,239,1,240,3,240,6581,8,240,1,240,1,
        240,1,240,1,240,1,240,3,240,6588,8,240,1,240,1,240,1,240,1,240,3,
        240,6594,8,240,5,240,6596,8,240,10,240,12,240,6599,9,240,1,240,1,
        240,1,240,1,240,1,240,1,240,1,240,3,240,6608,8,240,1,240,3,240,6611,
        8,240,1,241,3,241,6614,8,241,1,241,1,241,1,242,1,242,3,242,6620,
        8,242,1,242,3,242,6623,8,242,1,242,3,242,6626,8,242,1,242,3,242,
        6629,8,242,1,243,1,243,3,243,6633,8,243,1,244,3,244,6636,8,244,1,
        244,1,244,1,244,1,244,1,244,1,244,3,244,6644,8,244,3,244,6646,8,
        244,1,244,1,244,3,244,6650,8,244,1,244,3,244,6653,8,244,1,244,1,
        244,1,244,1,244,5,244,6659,8,244,10,244,12,244,6662,9,244,1,244,
        3,244,6665,8,244,1,244,1,244,3,244,6669,8,244,1,244,1,244,1,244,
        1,244,1,244,3,244,6676,8,244,1,244,1,244,3,244,6680,8,244,3,244,
        6682,8,244,3,244,6684,8,244,1,244,3,244,6687,8,244,1,244,3,244,6690,
        8,244,1,244,3,244,6693,8,244,1,245,1,245,1,245,1,245,5,245,6699,
        8,245,10,245,12,245,6702,9,245,1,245,1,245,1,245,3,245,6707,8,245,
        1,245,1,245,1,245,1,245,3,245,6713,8,245,3,245,6715,8,245,1,246,
        1,246,3,246,6719,8,246,1,246,3,246,6722,8,246,1,247,1,247,1,247,
        1,247,1,247,1,247,1,248,1,248,1,248,1,248,1,248,1,248,3,248,6736,
        8,248,1,248,1,248,3,248,6740,8,248,1,248,1,248,1,248,5,248,6745,
        8,248,10,248,12,248,6748,9,248,3,248,6750,8,248,1,248,1,248,1,248,
        1,248,1,248,5,248,6757,8,248,10,248,12,248,6760,9,248,3,248,6762,
        8,248,1,248,1,248,3,248,6766,8,248,1,248,1,248,1,248,1,248,5,248,
        6772,8,248,10,248,12,248,6775,9,248,3,248,6777,8,248,1,249,1,249,
        3,249,6781,8,249,1,249,3,249,6784,8,249,1,249,1,249,1,249,1,249,
        1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,3,249,6798,8,249,
        1,249,1,249,3,249,6802,8,249,1,249,3,249,6805,8,249,1,249,1,249,
        3,249,6809,8,249,1,249,3,249,6812,8,249,1,250,1,250,1,250,1,250,
        1,250,5,250,6819,8,250,10,250,12,250,6822,9,250,1,250,1,250,1,251,
        1,251,1,251,1,251,1,251,1,251,1,251,3,251,6833,8,251,1,252,1,252,
        1,252,1,252,3,252,6839,8,252,1,252,1,252,1,252,1,252,1,252,1,252,
        1,252,3,252,6848,8,252,1,252,1,252,1,252,3,252,6853,8,252,1,253,
        1,253,1,253,1,253,1,253,5,253,6860,8,253,10,253,12,253,6863,9,253,
        1,253,1,253,1,254,1,254,1,254,1,254,1,254,1,254,1,254,3,254,6874,
        8,254,1,254,3,254,6877,8,254,1,255,1,255,1,255,1,255,3,255,6883,
        8,255,1,255,3,255,6886,8,255,1,256,1,256,1,256,1,256,1,256,5,256,
        6893,8,256,10,256,12,256,6896,9,256,1,256,1,256,1,257,1,257,1,257,
        1,257,1,257,1,257,3,257,6906,8,257,1,258,1,258,1,258,1,258,1,258,
        5,258,6913,8,258,10,258,12,258,6916,9,258,1,258,1,258,1,259,1,259,
        1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,
        1,259,1,259,1,259,1,259,1,259,1,259,3,259,6939,8,259,3,259,6941,
        8,259,1,260,1,260,1,260,1,260,3,260,6947,8,260,1,260,3,260,6950,
        8,260,1,260,1,260,1,260,1,260,1,260,3,260,6957,8,260,3,260,6959,
        8,260,1,261,1,261,1,261,1,261,1,261,5,261,6966,8,261,10,261,12,261,
        6969,9,261,1,261,1,261,1,262,1,262,1,262,1,262,1,262,1,262,1,262,
        1,262,1,262,1,262,1,262,1,262,1,262,1,262,1,262,1,262,1,262,1,262,
        1,262,1,262,1,262,1,262,1,262,1,262,1,262,3,262,6998,8,262,1,262,
        3,262,7001,8,262,1,262,1,262,1,262,1,262,1,262,1,262,1,262,3,262,
        7010,8,262,1,262,1,262,1,262,1,262,1,262,1,262,1,262,1,262,1,262,
        1,262,1,262,1,262,1,262,3,262,7025,8,262,1,262,1,262,1,262,1,262,
        3,262,7031,8,262,3,262,7033,8,262,1,263,1,263,1,263,1,263,1,263,
        5,263,7040,8,263,10,263,12,263,7043,9,263,1,263,1,263,1,264,1,264,
        1,264,1,264,1,264,1,264,1,264,1,264,1,264,1,264,1,264,1,264,1,264,
        3,264,7060,8,264,1,264,1,264,1,264,1,264,3,264,7066,8,264,1,264,
        1,264,1,264,1,264,1,264,1,264,1,264,3,264,7075,8,264,1,264,3,264,
        7078,8,264,3,264,7080,8,264,1,265,1,265,1,265,1,265,1,265,1,265,
        3,265,7088,8,265,1,265,1,265,1,265,1,265,3,265,7094,8,265,5,265,
        7096,8,265,10,265,12,265,7099,9,265,1,265,1,265,1,266,1,266,1,266,
        1,266,1,266,1,266,1,266,1,266,3,266,7111,8,266,1,266,1,266,3,266,
        7115,8,266,1,266,3,266,7118,8,266,1,267,1,267,1,267,1,267,1,267,
        5,267,7125,8,267,10,267,12,267,7128,9,267,1,267,1,267,1,268,1,268,
        1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,
        3,268,7145,8,268,1,268,1,268,1,268,1,268,3,268,7151,8,268,3,268,
        7153,8,268,1,269,1,269,3,269,7157,8,269,1,269,1,269,1,269,1,269,
        1,269,1,269,1,269,1,269,1,269,1,269,3,269,7169,8,269,1,269,3,269,
        7172,8,269,1,269,1,269,3,269,7176,8,269,1,269,3,269,7179,8,269,1,
        270,1,270,3,270,7183,8,270,1,270,1,270,1,270,1,270,1,270,1,270,1,
        270,1,270,1,270,1,270,1,270,1,270,1,270,1,270,3,270,7199,8,270,3,
        270,7201,8,270,3,270,7203,8,270,1,270,3,270,7206,8,270,1,270,3,270,
        7209,8,270,1,271,1,271,1,271,1,271,1,271,5,271,7216,8,271,10,271,
        12,271,7219,9,271,1,271,1,271,1,272,1,272,1,272,1,272,1,272,1,272,
        1,272,1,272,1,272,1,272,1,272,1,272,1,272,1,272,1,272,1,272,1,272,
        1,272,1,272,1,272,1,272,1,272,3,272,7245,8,272,1,272,3,272,7248,
        8,272,1,272,1,272,1,272,1,272,1,272,1,272,1,272,1,272,1,272,1,272,
        1,272,1,272,3,272,7262,8,272,1,273,1,273,1,273,3,273,7267,8,273,
        1,273,3,273,7270,8,273,1,273,1,273,1,273,1,273,3,273,7276,8,273,
        1,273,3,273,7279,8,273,1,273,1,273,1,273,5,273,7284,8,273,10,273,
        12,273,7287,9,273,1,273,3,273,7290,8,273,3,273,7292,8,273,1,273,
        1,273,1,273,1,273,5,273,7298,8,273,10,273,12,273,7301,9,273,3,273,
        7303,8,273,1,273,1,273,3,273,7307,8,273,1,273,1,273,1,273,5,273,
        7312,8,273,10,273,12,273,7315,9,273,3,273,7317,8,273,1,274,1,274,
        1,274,1,274,1,274,1,274,1,274,1,274,1,275,1,275,3,275,7329,8,275,
        1,276,1,276,1,276,3,276,7334,8,276,1,276,3,276,7337,8,276,1,276,
        1,276,1,276,1,276,1,276,1,276,1,276,1,276,5,276,7347,8,276,10,276,
        12,276,7350,9,276,3,276,7352,8,276,1,276,1,276,1,276,1,276,3,276,
        7358,8,276,1,276,1,276,1,276,5,276,7363,8,276,10,276,12,276,7366,
        9,276,1,276,1,276,3,276,7370,8,276,1,276,1,276,1,276,3,276,7375,
        8,276,1,276,1,276,4,276,7379,8,276,11,276,12,276,7380,1,277,1,277,
        3,277,7385,8,277,1,278,1,278,1,279,1,279,1,279,3,279,7392,8,279,
        1,279,3,279,7395,8,279,1,279,1,279,1,279,1,279,1,279,1,279,3,279,
        7403,8,279,1,279,1,279,1,279,1,279,5,279,7409,8,279,10,279,12,279,
        7412,9,279,3,279,7414,8,279,1,279,1,279,1,279,1,279,5,279,7420,8,
        279,10,279,12,279,7423,9,279,1,279,1,279,4,279,7427,8,279,11,279,
        12,279,7428,1,280,1,280,1,281,1,281,1,281,3,281,7436,8,281,1,281,
        3,281,7439,8,281,1,281,1,281,1,281,1,281,1,281,1,281,5,281,7447,
        8,281,10,281,12,281,7450,9,281,1,281,1,281,1,281,1,281,3,281,7456,
        8,281,1,281,1,281,1,281,3,281,7461,8,281,1,281,3,281,7464,8,281,
        1,282,1,282,1,282,1,282,1,282,1,282,5,282,7472,8,282,10,282,12,282,
        7475,9,282,3,282,7477,8,282,1,282,3,282,7480,8,282,1,282,1,282,1,
        282,1,282,1,282,1,282,1,282,3,282,7489,8,282,3,282,7491,8,282,1,
        283,1,283,1,283,1,283,1,283,1,283,1,283,5,283,7500,8,283,10,283,
        12,283,7503,9,283,3,283,7505,8,283,1,283,3,283,7508,8,283,1,283,
        1,283,1,283,5,283,7513,8,283,10,283,12,283,7516,9,283,1,283,1,283,
        3,283,7520,8,283,1,283,1,283,3,283,7524,8,283,3,283,7526,8,283,1,
        284,1,284,1,284,1,284,1,284,1,284,5,284,7534,8,284,10,284,12,284,
        7537,9,284,3,284,7539,8,284,1,284,3,284,7542,8,284,1,284,1,284,1,
        284,5,284,7547,8,284,10,284,12,284,7550,9,284,1,284,1,284,1,284,
        3,284,7555,8,284,1,284,1,284,3,284,7559,8,284,1,285,1,285,1,285,
        1,285,3,285,7565,8,285,1,286,1,286,3,286,7569,8,286,1,286,1,286,
        1,286,3,286,7574,8,286,1,286,1,286,3,286,7578,8,286,1,286,1,286,
        3,286,7582,8,286,1,286,3,286,7585,8,286,1,287,1,287,1,287,3,287,
        7590,8,287,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,
        1,288,1,288,1,288,3,288,7604,8,288,1,289,1,289,1,289,1,289,1,289,
        1,289,1,289,1,289,1,289,1,289,1,289,1,289,1,289,1,289,3,289,7620,
        8,289,1,289,1,289,3,289,7624,8,289,1,289,1,289,1,289,1,289,3,289,
        7630,8,289,3,289,7632,8,289,1,289,3,289,7635,8,289,1,290,1,290,1,
        290,1,290,1,290,1,290,1,290,1,290,5,290,7645,8,290,10,290,12,290,
        7648,9,290,1,290,1,290,3,290,7652,8,290,1,290,3,290,7655,8,290,1,
        291,1,291,1,291,1,291,5,291,7661,8,291,10,291,12,291,7664,9,291,
        1,292,1,292,3,292,7668,8,292,1,292,1,292,1,292,3,292,7673,8,292,
        1,292,1,292,1,292,1,292,3,292,7679,8,292,1,292,1,292,1,292,3,292,
        7684,8,292,1,292,1,292,3,292,7688,8,292,1,292,1,292,1,292,1,292,
        1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,
        1,292,1,292,1,292,1,292,1,292,1,292,1,292,3,292,7712,8,292,1,293,
        1,293,1,293,1,293,1,293,1,293,3,293,7720,8,293,1,293,5,293,7723,
        8,293,10,293,12,293,7726,9,293,1,293,3,293,7729,8,293,1,293,1,293,
        1,293,3,293,7734,8,293,1,293,5,293,7737,8,293,10,293,12,293,7740,
        9,293,1,293,1,293,1,293,1,293,3,293,7746,8,293,1,293,1,293,1,293,
        3,293,7751,8,293,1,293,3,293,7754,8,293,1,294,1,294,1,294,3,294,
        7759,8,294,1,294,3,294,7762,8,294,1,294,1,294,1,294,1,294,1,294,
        1,294,1,294,1,294,1,294,1,294,1,294,1,294,3,294,7776,8,294,1,294,
        1,294,1,294,1,294,1,294,3,294,7783,8,294,1,294,1,294,3,294,7787,
        8,294,3,294,7789,8,294,1,295,1,295,1,295,1,295,1,295,5,295,7796,
        8,295,10,295,12,295,7799,9,295,1,295,1,295,1,295,1,295,1,295,5,295,
        7806,8,295,10,295,12,295,7809,9,295,3,295,7811,8,295,1,296,1,296,
        3,296,7815,8,296,1,296,1,296,1,296,1,296,1,296,3,296,7822,8,296,
        1,296,1,296,1,296,1,296,1,296,1,296,1,296,1,296,1,296,1,296,1,296,
        1,296,1,296,1,296,1,296,1,296,1,296,1,296,1,296,3,296,7843,8,296,
        1,296,1,296,1,296,3,296,7848,8,296,5,296,7850,8,296,10,296,12,296,
        7853,9,296,1,296,1,296,1,296,1,296,1,296,1,296,3,296,7861,8,296,
        1,296,1,296,1,296,1,296,3,296,7867,8,296,3,296,7869,8,296,1,297,
        1,297,1,297,1,297,1,297,5,297,7876,8,297,10,297,12,297,7879,9,297,
        1,297,1,297,1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,
        1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,
        1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,3,298,7911,8,298,
        1,298,1,298,1,298,1,298,3,298,7917,8,298,3,298,7919,8,298,1,299,
        1,299,1,299,3,299,7924,8,299,1,299,3,299,7927,8,299,1,299,1,299,
        1,299,1,299,1,299,1,299,3,299,7935,8,299,1,299,1,299,1,299,1,299,
        5,299,7941,8,299,10,299,12,299,7944,9,299,3,299,7946,8,299,1,299,
        1,299,1,299,1,299,1,299,3,299,7953,8,299,1,299,3,299,7956,8,299,
        1,300,1,300,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,
        1,301,1,301,1,301,1,301,1,301,1,301,3,301,7975,8,301,1,301,1,301,
        1,301,1,301,1,301,5,301,7982,8,301,10,301,12,301,7985,9,301,1,301,
        1,301,1,301,1,301,1,301,1,301,1,301,1,301,3,301,7995,8,301,1,301,
        1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,3,301,
        8008,8,301,1,301,1,301,5,301,8012,8,301,10,301,12,301,8015,9,301,
        1,301,1,301,1,301,1,301,1,301,3,301,8022,8,301,1,301,1,301,1,301,
        1,301,1,301,1,301,3,301,8030,8,301,1,301,1,301,1,301,1,301,3,301,
        8036,8,301,1,301,3,301,8039,8,301,1,302,3,302,8042,8,302,1,302,3,
        302,8045,8,302,1,302,1,302,1,302,1,302,3,302,8051,8,302,1,302,1,
        302,3,302,8055,8,302,1,303,1,303,1,303,1,303,1,303,1,303,3,303,8063,
        8,303,1,303,1,303,1,303,1,303,1,303,1,303,1,304,1,304,1,304,1,304,
        3,304,8075,8,304,1,304,1,304,1,304,1,304,1,304,1,304,1,304,1,304,
        1,304,1,304,3,304,8087,8,304,1,304,1,304,3,304,8091,8,304,1,304,
        3,304,8094,8,304,1,305,1,305,1,305,1,305,1,305,5,305,8101,8,305,
        10,305,12,305,8104,9,305,1,305,1,305,1,305,3,305,8109,8,305,1,305,
        1,305,1,305,1,305,1,305,1,305,5,305,8117,8,305,10,305,12,305,8120,
        9,305,1,305,1,305,1,305,1,305,1,305,1,305,3,305,8128,8,305,1,306,
        1,306,1,306,1,306,1,306,1,306,1,306,1,306,3,306,8138,8,306,1,306,
        1,306,1,306,1,306,3,306,8144,8,306,1,306,1,306,1,306,1,306,3,306,
        8150,8,306,1,306,1,306,1,306,1,306,1,306,3,306,8157,8,306,1,306,
        1,306,1,306,1,306,3,306,8163,8,306,1,306,1,306,3,306,8167,8,306,
        1,306,1,306,1,307,1,307,1,307,1,307,1,307,1,307,1,307,3,307,8178,
        8,307,1,307,1,307,1,307,1,307,1,307,1,307,1,307,1,307,1,307,1,307,
        1,307,1,307,1,307,3,307,8193,8,307,3,307,8195,8,307,1,308,1,308,
        1,309,1,309,1,309,1,309,1,309,1,309,1,309,1,309,1,309,1,309,1,309,
        1,309,1,309,1,309,1,309,1,309,1,309,1,309,1,309,1,309,1,309,1,309,
        1,309,3,309,8222,8,309,1,310,1,310,1,310,1,310,1,310,1,310,1,310,
        1,310,1,310,3,310,8233,8,310,1,310,1,310,1,310,1,310,1,310,1,310,
        3,310,8241,8,310,1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,
        5,311,8251,8,311,10,311,12,311,8254,9,311,5,311,8256,8,311,10,311,
        12,311,8259,9,311,1,311,3,311,8262,8,311,1,312,1,312,1,312,1,312,
        1,312,1,312,1,312,3,312,8271,8,312,1,313,1,313,1,313,1,313,1,314,
        1,314,1,314,1,314,3,314,8281,8,314,1,315,1,315,1,315,1,315,1,315,
        3,315,8288,8,315,1,315,1,315,1,315,3,315,8293,8,315,1,315,1,315,
        1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,
        1,315,3,315,8309,8,315,1,315,3,315,8312,8,315,1,315,3,315,8315,8,
        315,1,315,1,315,1,315,3,315,8320,8,315,1,315,3,315,8323,8,315,1,
        315,1,315,1,315,3,315,8328,8,315,1,315,1,315,1,315,1,315,1,315,1,
        315,1,315,3,315,8337,8,315,1,315,3,315,8340,8,315,1,315,3,315,8343,
        8,315,1,315,1,315,1,315,1,315,1,315,3,315,8350,8,315,1,316,1,316,
        1,317,1,317,1,317,1,317,1,317,1,317,3,317,8360,8,317,1,318,1,318,
        1,319,1,319,1,320,1,320,1,321,1,321,1,321,1,321,1,321,1,321,1,321,
        1,321,1,321,1,321,1,321,1,321,3,321,8380,8,321,1,322,1,322,1,322,
        1,322,3,322,8386,8,322,1,323,1,323,1,324,1,324,1,324,1,324,1,324,
        1,325,1,325,1,326,1,326,1,326,1,326,1,327,1,327,1,328,1,328,1,328,
        1,328,1,328,1,328,1,328,1,328,3,328,8411,8,328,3,328,8413,8,328,
        1,329,1,329,1,329,1,330,1,330,1,330,1,331,1,331,1,332,1,332,1,333,
        1,333,1,334,1,334,1,334,1,334,1,335,1,335,1,335,1,335,1,335,1,335,
        1,335,1,335,3,335,8439,8,335,1,335,1,335,1,335,1,335,3,335,8445,
        8,335,1,335,1,335,1,335,1,335,1,335,1,335,1,335,1,335,1,335,3,335,
        8456,8,335,1,336,1,336,1,336,1,336,1,336,1,336,3,336,8464,8,336,
        1,336,3,336,8467,8,336,1,337,1,337,1,337,1,338,1,338,1,338,1,339,
        1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,3,339,8484,8,339,
        1,340,1,340,1,340,1,340,1,340,1,340,3,340,8492,8,340,1,341,1,341,
        1,341,1,341,1,341,3,341,8499,8,341,1,342,1,342,1,342,1,342,1,342,
        1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,
        1,342,1,342,1,342,1,342,1,342,3,342,8522,8,342,1,343,1,343,1,343,
        1,343,1,343,1,344,1,344,1,344,1,344,1,344,1,344,3,344,8535,8,344,
        1,345,1,345,1,345,1,345,3,345,8541,8,345,1,345,1,345,1,345,5,345,
        8546,8,345,10,345,12,345,8549,9,345,1,345,1,345,1,345,5,345,8554,
        8,345,10,345,12,345,8557,9,345,3,345,8559,8,345,1,345,3,345,8562,
        8,345,1,346,1,346,1,346,1,346,1,347,1,347,1,347,3,347,8571,8,347,
        1,347,1,347,1,347,1,347,1,348,1,348,1,348,1,348,3,348,8581,8,348,
        1,348,1,348,1,348,5,348,8586,8,348,10,348,12,348,8589,9,348,1,348,
        3,348,8592,8,348,1,349,1,349,3,349,8596,8,349,1,350,1,350,1,350,
        1,350,3,350,8602,8,350,1,350,1,350,1,350,5,350,8607,8,350,10,350,
        12,350,8610,9,350,1,350,3,350,8613,8,350,1,351,1,351,1,351,1,351,
        3,351,8619,8,351,1,351,1,351,1,351,5,351,8624,8,351,10,351,12,351,
        8627,9,351,1,351,1,351,1,351,1,351,3,351,8633,8,351,1,351,3,351,
        8636,8,351,1,352,1,352,1,352,1,352,3,352,8642,8,352,1,352,1,352,
        1,352,5,352,8647,8,352,10,352,12,352,8650,9,352,1,352,3,352,8653,
        8,352,1,353,1,353,1,353,3,353,8658,8,353,1,353,1,353,1,353,3,353,
        8663,8,353,1,353,4,353,8666,8,353,11,353,12,353,8667,1,353,1,353,
        1,354,1,354,1,354,1,354,3,354,8676,8,354,1,354,1,354,1,354,5,354,
        8681,8,354,10,354,12,354,8684,9,354,1,354,3,354,8687,8,354,1,355,
        1,355,1,355,1,355,3,355,8693,8,355,1,355,1,355,1,355,5,355,8698,
        8,355,10,355,12,355,8701,9,355,1,355,3,355,8704,8,355,1,356,1,356,
        1,356,1,356,1,356,1,356,3,356,8712,8,356,3,356,8714,8,356,1,356,
        1,356,1,356,1,356,1,356,1,356,3,356,8722,8,356,1,357,1,357,1,357,
        1,357,3,357,8728,8,357,1,357,1,357,1,358,1,358,3,358,8734,8,358,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,360,1,360,1,360,1,360,
        1,360,1,360,1,360,1,360,3,360,8751,8,360,1,360,1,360,3,360,8755,
        8,360,1,360,1,360,1,360,1,361,1,361,1,361,3,361,8763,8,361,1,361,
        1,361,1,361,3,361,8768,8,361,1,361,1,361,1,361,1,361,5,361,8774,
        8,361,10,361,12,361,8777,9,361,1,361,1,361,1,361,3,361,8782,8,361,
        1,361,1,361,1,361,1,361,1,361,1,361,1,361,5,361,8791,8,361,10,361,
        12,361,8794,9,361,1,361,1,361,3,361,8798,8,361,1,362,1,362,1,362,
        1,362,1,362,3,362,8805,8,362,1,363,1,363,3,363,8809,8,363,1,363,
        1,363,3,363,8813,8,363,1,363,1,363,3,363,8817,8,363,1,363,3,363,
        8820,8,363,1,363,1,363,3,363,8824,8,363,1,363,1,363,1,363,1,363,
        3,363,8830,8,363,1,363,1,363,3,363,8834,8,363,3,363,8836,8,363,1,
        364,1,364,1,364,1,364,1,364,3,364,8843,8,364,1,364,1,364,1,364,5,
        364,8848,8,364,10,364,12,364,8851,9,364,3,364,8853,8,364,1,364,3,
        364,8856,8,364,1,364,1,364,1,364,5,364,8861,8,364,10,364,12,364,
        8864,9,364,1,364,1,364,3,364,8868,8,364,1,364,4,364,8871,8,364,11,
        364,12,364,8872,1,364,1,364,3,364,8877,8,364,1,364,1,364,1,364,1,
        364,3,364,8883,8,364,4,364,8885,8,364,11,364,12,364,8886,3,364,8889,
        8,364,1,364,1,364,1,364,3,364,8894,8,364,1,364,4,364,8897,8,364,
        11,364,12,364,8898,4,364,8901,8,364,11,364,12,364,8902,1,364,1,364,
        1,364,3,364,8908,8,364,1,364,1,364,1,364,1,364,3,364,8914,8,364,
        4,364,8916,8,364,11,364,12,364,8917,4,364,8920,8,364,11,364,12,364,
        8921,3,364,8924,8,364,1,364,1,364,3,364,8928,8,364,1,364,1,364,3,
        364,8932,8,364,1,364,1,364,3,364,8936,8,364,1,364,1,364,3,364,8940,
        8,364,1,364,1,364,1,364,1,364,3,364,8946,8,364,1,364,3,364,8949,
        8,364,1,364,1,364,1,364,1,364,3,364,8955,8,364,1,364,1,364,3,364,
        8959,8,364,1,364,1,364,3,364,8963,8,364,1,364,1,364,1,364,1,364,
        3,364,8969,8,364,1,364,1,364,1,364,1,364,3,364,8975,8,364,3,364,
        8977,8,364,1,364,3,364,8980,8,364,1,364,1,364,3,364,8984,8,364,1,
        364,1,364,3,364,8988,8,364,1,364,1,364,3,364,8992,8,364,1,364,1,
        364,1,364,1,364,3,364,8998,8,364,1,364,3,364,9001,8,364,1,364,1,
        364,1,364,1,364,3,364,9007,8,364,1,364,1,364,1,364,1,364,3,364,9013,
        8,364,1,364,3,364,9016,8,364,1,364,1,364,1,364,1,364,3,364,9022,
        8,364,1,364,3,364,9025,8,364,1,364,1,364,1,364,1,364,3,364,9031,
        8,364,1,364,3,364,9034,8,364,1,364,1,364,3,364,9038,8,364,1,364,
        1,364,3,364,9042,8,364,1,364,1,364,3,364,9046,8,364,1,364,1,364,
        1,364,3,364,9051,8,364,1,364,3,364,9054,8,364,1,364,1,364,3,364,
        9058,8,364,1,364,1,364,3,364,9062,8,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        3,364,9079,8,364,5,364,9081,8,364,10,364,12,364,9084,9,364,3,364,
        9086,8,364,1,365,1,365,1,365,1,365,1,365,3,365,9093,8,365,1,365,
        4,365,9096,8,365,11,365,12,365,9097,1,365,1,365,3,365,9102,8,365,
        1,365,1,365,1,365,1,365,3,365,9108,8,365,4,365,9110,8,365,11,365,
        12,365,9111,3,365,9114,8,365,1,365,1,365,1,365,3,365,9119,8,365,
        1,365,4,365,9122,8,365,11,365,12,365,9123,4,365,9126,8,365,11,365,
        12,365,9127,1,365,1,365,1,365,3,365,9133,8,365,1,365,1,365,1,365,
        1,365,3,365,9139,8,365,4,365,9141,8,365,11,365,12,365,9142,4,365,
        9145,8,365,11,365,12,365,9146,3,365,9149,8,365,1,365,1,365,3,365,
        9153,8,365,1,365,1,365,3,365,9157,8,365,1,365,1,365,3,365,9161,8,
        365,1,365,1,365,3,365,9165,8,365,1,365,1,365,1,365,1,365,3,365,9171,
        8,365,1,365,3,365,9174,8,365,1,365,1,365,1,365,1,365,3,365,9180,
        8,365,1,365,1,365,3,365,9184,8,365,1,365,1,365,3,365,9188,8,365,
        1,365,1,365,1,365,1,365,3,365,9194,8,365,1,365,1,365,1,365,1,365,
        3,365,9200,8,365,3,365,9202,8,365,1,365,3,365,9205,8,365,1,365,1,
        365,3,365,9209,8,365,1,365,1,365,3,365,9213,8,365,1,365,1,365,3,
        365,9217,8,365,1,365,1,365,1,365,1,365,3,365,9223,8,365,1,365,3,
        365,9226,8,365,1,365,1,365,1,365,1,365,3,365,9232,8,365,1,365,1,
        365,1,365,1,365,3,365,9238,8,365,1,365,3,365,9241,8,365,1,365,1,
        365,1,365,1,365,3,365,9247,8,365,1,365,3,365,9250,8,365,1,365,1,
        365,1,365,1,365,3,365,9256,8,365,1,365,3,365,9259,8,365,1,365,1,
        365,3,365,9263,8,365,1,365,1,365,3,365,9267,8,365,1,365,1,365,3,
        365,9271,8,365,1,365,1,365,1,365,3,365,9276,8,365,1,365,3,365,9279,
        8,365,1,365,1,365,3,365,9283,8,365,1,365,1,365,3,365,9287,8,365,
        1,365,1,365,1,365,1,365,3,365,9293,8,365,1,365,3,365,9296,8,365,
        1,365,1,365,3,365,9300,8,365,1,365,1,365,1,365,1,365,1,365,1,365,
        1,365,1,365,1,365,1,365,1,365,1,365,1,365,1,365,1,365,3,365,9317,
        8,365,5,365,9319,8,365,10,365,12,365,9322,9,365,3,365,9324,8,365,
        1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
        1,366,3,366,9338,8,366,1,366,1,366,1,366,1,366,3,366,9344,8,366,
        1,366,1,366,1,366,1,366,1,366,1,366,3,366,9352,8,366,1,366,1,366,
        1,366,1,366,1,366,4,366,9359,8,366,11,366,12,366,9360,1,366,3,366,
        9364,8,366,1,367,1,367,1,367,1,367,1,367,1,367,1,367,1,367,1,367,
        1,367,1,367,1,367,1,367,1,368,1,368,1,368,1,368,1,368,1,368,1,368,
        1,368,1,368,1,368,1,368,1,368,1,368,1,368,1,369,1,369,1,369,1,369,
        3,369,9397,8,369,1,370,1,370,3,370,9401,8,370,1,370,1,370,3,370,
        9405,8,370,1,371,1,371,1,371,1,371,1,371,3,371,9412,8,371,1,372,
        1,372,1,372,1,372,1,373,1,373,1,373,3,373,9421,8,373,1,374,1,374,
        1,374,1,374,5,374,9427,8,374,10,374,12,374,9430,9,374,3,374,9432,
        8,374,1,374,3,374,9435,8,374,1,375,1,375,3,375,9439,8,375,1,375,
        1,375,3,375,9443,8,375,1,375,3,375,9446,8,375,1,375,1,375,1,375,
        1,375,5,375,9452,8,375,10,375,12,375,9455,9,375,1,375,1,375,1,375,
        1,375,1,375,3,375,9462,8,375,1,375,1,375,3,375,9466,8,375,1,375,
        1,375,1,375,1,375,1,375,3,375,9473,8,375,3,375,9475,8,375,1,376,
        1,376,1,376,5,376,9480,8,376,10,376,12,376,9483,9,376,1,376,1,376,
        1,376,5,376,9488,8,376,10,376,12,376,9491,9,376,3,376,9493,8,376,
        1,377,1,377,1,377,1,377,1,378,1,378,1,379,1,379,1,379,3,379,9504,
        8,379,1,379,1,379,1,379,3,379,9509,8,379,1,380,1,380,3,380,9513,
        8,380,1,380,1,380,1,380,1,380,3,380,9519,8,380,3,380,9521,8,380,
        1,380,1,380,1,380,1,380,1,380,3,380,9528,8,380,3,380,9530,8,380,
        3,380,9532,8,380,1,381,1,381,3,381,9536,8,381,1,381,1,381,1,381,
        3,381,9541,8,381,1,381,1,381,1,381,1,381,1,381,3,381,9548,8,381,
        3,381,9550,8,381,1,381,1,381,1,381,1,381,3,381,9556,8,381,1,381,
        3,381,9559,8,381,1,381,1,381,1,381,1,381,5,381,9565,8,381,10,381,
        12,381,9568,9,381,1,381,1,381,1,381,3,381,9573,8,381,1,381,1,381,
        3,381,9577,8,381,1,381,3,381,9580,8,381,1,381,1,381,1,381,1,381,
        1,381,3,381,9587,8,381,1,381,3,381,9590,8,381,1,381,1,381,1,381,
        1,381,3,381,9596,8,381,1,382,1,382,3,382,9600,8,382,1,383,1,383,
        1,383,1,383,1,383,3,383,9607,8,383,1,383,1,383,1,383,3,383,9612,
        8,383,1,383,1,383,1,383,1,383,1,383,1,383,3,383,9620,8,383,1,384,
        1,384,1,384,3,384,9625,8,384,1,384,1,384,1,384,1,384,1,384,1,384,
        1,384,1,384,1,384,1,384,3,384,9637,8,384,3,384,9639,8,384,1,385,
        1,385,1,385,1,385,1,385,1,385,1,385,1,385,1,385,3,385,9650,8,385,
        1,386,1,386,1,386,1,386,1,386,3,386,9657,8,386,1,386,1,386,1,386,
        1,386,1,386,1,386,5,386,9665,8,386,10,386,12,386,9668,9,386,1,387,
        1,387,1,387,1,387,1,388,1,388,1,388,1,388,1,388,1,388,1,388,1,388,
        1,388,1,388,1,388,1,388,1,388,1,388,1,388,1,388,3,388,9690,8,388,
        1,389,1,389,1,389,1,389,1,389,1,389,1,389,1,389,1,389,1,389,1,389,
        3,389,9703,8,389,1,390,1,390,1,390,1,390,1,390,1,390,1,390,1,390,
        1,390,1,390,1,390,1,390,1,390,1,390,3,390,9719,8,390,1,390,1,390,
        1,390,3,390,9724,8,390,1,390,1,390,1,390,1,390,1,390,3,390,9731,
        8,390,1,390,3,390,9734,8,390,4,390,9736,8,390,11,390,12,390,9737,
        3,390,9740,8,390,1,391,1,391,1,391,1,391,1,391,1,391,1,391,1,391,
        1,391,1,391,1,391,1,391,1,391,1,391,1,391,3,391,9757,8,391,1,392,
        1,392,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,
        1,393,3,393,9772,8,393,1,394,1,394,1,394,1,394,1,394,1,394,3,394,
        9780,8,394,1,394,1,394,1,394,1,394,1,394,1,394,1,394,3,394,9789,
        8,394,1,394,1,394,1,394,1,394,1,394,1,394,3,394,9797,8,394,1,395,
        1,395,1,395,1,395,1,395,1,395,3,395,9805,8,395,1,395,1,395,1,395,
        1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,
        1,395,3,395,9822,8,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,
        1,395,1,395,1,395,1,395,3,395,9835,8,395,1,395,1,395,1,395,1,395,
        1,395,1,395,1,395,1,395,1,395,1,395,3,395,9847,8,395,1,395,1,395,
        1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,
        1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,3,395,9871,
        8,395,1,395,1,395,1,395,1,395,1,395,3,395,9878,8,395,1,395,1,395,
        3,395,9882,8,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,
        3,395,9892,8,395,1,395,1,395,3,395,9896,8,395,1,395,1,395,1,395,
        1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,
        1,395,3,395,9913,8,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,
        1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,
        1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,
        1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,3,395,9952,8,395,
        1,395,1,395,1,395,1,395,1,395,3,395,9959,8,395,1,395,1,395,1,395,
        1,395,1,395,1,395,3,395,9967,8,395,1,395,1,395,1,395,1,395,1,395,
        1,395,1,395,1,395,1,395,1,395,3,395,9979,8,395,1,395,1,395,1,395,
        1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,1,395,
        1,395,1,395,1,395,1,395,1,395,1,395,3,395,10001,8,395,1,395,1,395,
        1,395,1,395,1,395,1,395,1,395,3,395,10010,8,395,3,395,10012,8,395,
        1,396,1,396,1,396,1,396,3,396,10018,8,396,1,396,1,396,1,396,1,396,
        1,396,1,396,1,396,1,396,1,396,1,396,1,396,1,396,1,396,1,396,1,396,
        1,396,1,396,1,396,3,396,10038,8,396,3,396,10040,8,396,3,396,10042,
        8,396,1,396,3,396,10045,8,396,1,397,1,397,1,397,1,397,1,397,3,397,
        10052,8,397,1,397,1,397,1,397,1,397,3,397,10058,8,397,1,397,1,397,
        1,397,3,397,10063,8,397,3,397,10065,8,397,1,397,1,397,1,397,1,397,
        3,397,10071,8,397,1,397,1,397,1,397,1,397,1,397,1,397,3,397,10079,
        8,397,3,397,10081,8,397,1,397,1,397,3,397,10085,8,397,1,397,1,397,
        1,397,1,397,1,397,1,397,1,397,1,397,3,397,10095,8,397,1,397,1,397,
        3,397,10099,8,397,1,397,1,397,1,397,1,397,3,397,10105,8,397,3,397,
        10107,8,397,1,398,1,398,3,398,10111,8,398,1,399,1,399,1,399,1,400,
        1,400,3,400,10118,8,400,1,401,1,401,1,401,3,401,10123,8,401,1,402,
        1,402,1,402,3,402,10128,8,402,1,403,1,403,3,403,10132,8,403,1,404,
        1,404,1,405,1,405,1,405,1,405,1,405,3,405,10141,8,405,1,405,1,405,
        1,405,1,405,3,405,10147,8,405,1,405,1,405,1,405,1,405,1,405,5,405,
        10154,8,405,10,405,12,405,10157,9,405,3,405,10159,8,405,3,405,10161,
        8,405,1,406,1,406,1,406,1,406,1,406,3,406,10168,8,406,1,406,3,406,
        10171,8,406,1,406,1,406,3,406,10175,8,406,1,407,1,407,1,408,1,408,
        1,408,1,408,3,408,10183,8,408,1,408,3,408,10186,8,408,1,408,1,408,
        1,408,1,408,5,408,10192,8,408,10,408,12,408,10195,9,408,3,408,10197,
        8,408,1,409,1,409,1,409,1,409,1,409,1,409,1,409,1,409,1,409,1,409,
        3,409,10209,8,409,1,410,1,410,1,410,1,410,1,410,3,410,10216,8,410,
        1,410,1,410,3,410,10220,8,410,1,410,3,410,10223,8,410,1,410,1,410,
        1,410,1,410,5,410,10229,8,410,10,410,12,410,10232,9,410,3,410,10234,
        8,410,1,411,1,411,1,411,1,411,1,411,1,411,1,411,1,411,3,411,10244,
        8,411,1,412,1,412,1,412,1,412,3,412,10250,8,412,1,412,1,412,3,412,
        10254,8,412,1,412,3,412,10257,8,412,1,412,1,412,1,412,1,412,5,412,
        10263,8,412,10,412,12,412,10266,9,412,3,412,10268,8,412,1,413,1,
        413,1,413,1,413,1,413,1,413,1,413,1,413,1,413,3,413,10279,8,413,
        3,413,10281,8,413,1,413,1,413,1,413,1,413,1,413,5,413,10288,8,413,
        10,413,12,413,10291,9,413,3,413,10293,8,413,1,414,1,414,1,414,1,
        414,1,414,3,414,10300,8,414,1,414,1,414,1,414,3,414,10305,8,414,
        1,414,1,414,3,414,10309,8,414,1,414,1,414,1,414,3,414,10314,8,414,
        1,415,1,415,1,416,1,416,1,416,1,416,1,416,1,416,1,416,1,416,1,416,
        1,416,5,416,10328,8,416,10,416,12,416,10331,9,416,3,416,10333,8,
        416,1,417,1,417,1,417,1,417,1,417,3,417,10340,8,417,1,417,1,417,
        3,417,10344,8,417,1,418,1,418,1,418,3,418,10349,8,418,1,419,1,419,
        1,420,1,420,1,420,1,420,1,420,3,420,10358,8,420,1,420,1,420,3,420,
        10362,8,420,1,420,1,420,1,420,1,420,5,420,10368,8,420,10,420,12,
        420,10371,9,420,3,420,10373,8,420,1,421,1,421,1,421,1,421,1,421,
        1,421,1,421,3,421,10382,8,421,1,421,3,421,10385,8,421,1,421,1,421,
        3,421,10389,8,421,1,422,1,422,1,422,1,422,1,422,1,422,1,422,3,422,
        10398,8,422,3,422,10400,8,422,1,422,1,422,1,422,3,422,10405,8,422,
        1,423,1,423,1,423,1,423,1,423,1,423,3,423,10413,8,423,1,424,1,424,
        1,424,1,424,1,424,3,424,10420,8,424,1,424,1,424,3,424,10424,8,424,
        1,425,1,425,1,425,1,425,1,425,1,425,1,425,1,425,1,425,1,425,1,425,
        1,425,1,425,1,425,1,425,1,425,3,425,10442,8,425,1,426,1,426,1,426,
        1,426,1,427,1,427,3,427,10450,8,427,1,427,1,427,1,427,3,427,10455,
        8,427,1,428,1,428,1,428,1,428,3,428,10461,8,428,1,428,5,428,10464,
        8,428,10,428,12,428,10467,9,428,1,428,1,428,1,429,1,429,1,429,1,
        429,3,429,10475,8,429,1,429,3,429,10478,8,429,1,429,3,429,10481,
        8,429,1,429,1,429,1,429,1,429,1,429,1,429,1,429,1,429,1,429,3,429,
        10492,8,429,1,430,1,430,1,430,3,430,10497,8,430,1,430,1,430,1,430,
        1,431,1,431,1,431,1,431,1,432,1,432,3,432,10508,8,432,1,432,5,432,
        10511,8,432,10,432,12,432,10514,9,432,1,433,1,433,1,433,3,433,10519,
        8,433,1,434,1,434,1,434,1,434,1,434,3,434,10526,8,434,3,434,10528,
        8,434,1,434,5,434,10531,8,434,10,434,12,434,10534,9,434,1,434,3,
        434,10537,8,434,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,
        1,435,1,435,1,435,1,435,1,435,3,435,10552,8,435,1,435,1,435,1,435,
        1,435,1,435,1,435,1,435,1,435,3,435,10562,8,435,1,435,1,435,1,435,
        1,435,1,435,1,435,1,435,1,435,1,435,3,435,10573,8,435,1,435,1,435,
        1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,
        1,435,1,435,1,435,1,435,3,435,10592,8,435,1,436,1,436,1,436,1,436,
        1,436,1,436,1,436,1,436,1,436,1,436,1,436,1,436,1,436,1,436,1,436,
        1,436,1,436,1,436,1,436,3,436,10613,8,436,3,436,10615,8,436,3,436,
        10617,8,436,1,437,1,437,1,437,1,437,1,437,1,437,3,437,10625,8,437,
        1,438,1,438,3,438,10629,8,438,1,438,1,438,1,438,1,438,3,438,10635,
        8,438,1,438,3,438,10638,8,438,1,438,1,438,1,438,3,438,10643,8,438,
        1,438,1,438,3,438,10647,8,438,1,439,1,439,1,439,3,439,10652,8,439,
        1,439,3,439,10655,8,439,1,439,3,439,10658,8,439,1,439,1,439,1,439,
        3,439,10663,8,439,3,439,10665,8,439,1,440,1,440,1,440,1,440,1,440,
        1,440,1,440,1,440,3,440,10675,8,440,1,441,1,441,3,441,10679,8,441,
        1,441,1,441,1,441,3,441,10684,8,441,1,441,3,441,10687,8,441,1,441,
        1,441,1,441,1,441,1,441,1,441,1,441,1,441,1,441,1,441,1,441,1,441,
        1,441,1,441,1,441,1,441,1,441,5,441,10706,8,441,10,441,12,441,10709,
        9,441,1,441,1,441,1,441,1,441,1,441,1,441,1,441,1,441,3,441,10719,
        8,441,1,441,3,441,10722,8,441,1,442,1,442,1,442,1,442,1,443,1,443,
        1,443,1,443,3,443,10732,8,443,1,443,3,443,10735,8,443,1,443,3,443,
        10738,8,443,1,444,1,444,1,444,1,444,1,444,1,444,1,444,5,444,10747,
        8,444,10,444,12,444,10750,9,444,1,444,1,444,1,444,3,444,10755,8,
        444,1,445,1,445,1,445,1,445,3,445,10761,8,445,1,445,1,445,1,445,
        1,445,1,446,1,446,1,446,1,446,1,446,1,446,1,446,1,446,1,446,3,446,
        10776,8,446,1,447,1,447,1,447,1,447,1,447,1,447,1,447,1,447,1,447,
        3,447,10787,8,447,1,448,1,448,1,448,1,448,1,448,5,448,10794,8,448,
        10,448,12,448,10797,9,448,1,448,1,448,1,449,1,449,1,449,1,449,1,
        449,1,449,1,449,1,449,1,449,1,449,1,449,1,449,1,449,1,449,1,449,
        1,449,1,449,1,449,1,449,1,449,1,449,1,449,1,449,1,449,1,449,1,449,
        1,449,1,449,1,449,1,449,1,449,3,449,10832,8,449,1,449,1,449,1,449,
        1,449,3,449,10838,8,449,1,449,1,449,1,449,1,449,1,449,1,449,1,449,
        1,449,1,449,1,449,1,449,1,449,3,449,10852,8,449,1,449,1,449,1,449,
        3,449,10857,8,449,5,449,10859,8,449,10,449,12,449,10862,9,449,1,
        449,1,449,1,449,1,449,1,449,1,449,1,449,1,449,1,449,3,449,10873,
        8,449,1,449,3,449,10876,8,449,1,449,1,449,1,449,1,449,1,449,1,449,
        1,449,3,449,10885,8,449,3,449,10887,8,449,1,450,1,450,1,450,1,450,
        1,450,1,450,1,450,1,450,3,450,10897,8,450,3,450,10899,8,450,3,450,
        10901,8,450,1,450,3,450,10904,8,450,1,450,3,450,10907,8,450,1,450,
        1,450,1,450,1,450,1,450,1,450,1,450,1,450,1,450,3,450,10918,8,450,
        3,450,10920,8,450,3,450,10922,8,450,1,450,3,450,10925,8,450,1,451,
        5,451,10928,8,451,10,451,12,451,10931,9,451,1,451,1,451,1,451,1,
        452,1,452,1,452,1,452,1,452,3,452,10941,8,452,1,453,1,453,1,453,
        1,453,1,453,1,453,1,453,3,453,10950,8,453,1,453,3,453,10953,8,453,
        1,453,3,453,10956,8,453,1,453,1,453,1,453,1,453,1,453,5,453,10963,
        8,453,10,453,12,453,10966,9,453,3,453,10968,8,453,1,453,3,453,10971,
        8,453,1,454,1,454,1,454,1,454,1,454,3,454,10978,8,454,1,454,3,454,
        10981,8,454,1,454,1,454,1,454,1,454,1,454,3,454,10988,8,454,1,454,
        1,454,1,454,1,454,3,454,10994,8,454,1,454,1,454,1,454,1,454,3,454,
        11000,8,454,1,454,1,454,1,454,1,454,1,454,1,454,1,454,1,454,1,454,
        1,454,1,454,1,454,1,454,3,454,11015,8,454,1,454,3,454,11018,8,454,
        1,454,1,454,1,454,1,454,1,454,3,454,11025,8,454,1,454,1,454,1,454,
        1,454,5,454,11031,8,454,10,454,12,454,11034,9,454,1,454,1,454,1,
        454,1,454,3,454,11040,8,454,1,455,1,455,1,456,1,456,3,456,11046,
        8,456,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,3,457,
        11057,8,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,
        1,457,1,457,1,457,3,457,11071,8,457,1,457,1,457,1,457,1,457,1,457,
        1,457,1,457,1,457,5,457,11081,8,457,10,457,12,457,11084,9,457,1,
        458,1,458,1,459,1,459,1,459,1,459,1,459,1,460,1,460,1,460,1,460,
        3,460,11097,8,460,1,461,1,461,1,461,4,461,11102,8,461,11,461,12,
        461,11103,1,461,1,461,3,461,11108,8,461,1,461,1,461,1,461,1,461,
        4,461,11114,8,461,11,461,12,461,11115,1,461,1,461,3,461,11120,8,
        461,1,461,1,461,3,461,11124,8,461,1,462,1,462,1,462,1,462,3,462,
        11130,8,462,1,463,1,463,1,463,1,463,1,463,1,463,1,463,1,463,3,463,
        11140,8,463,1,464,1,464,1,465,1,465,1,465,1,465,5,465,11148,8,465,
        10,465,12,465,11151,9,465,1,466,1,466,1,466,1,466,1,466,3,466,11158,
        8,466,1,466,1,466,1,466,1,466,1,466,1,467,1,467,1,467,1,467,1,467,
        3,467,11170,8,467,1,467,1,467,1,467,1,467,3,467,11176,8,467,1,467,
        1,467,3,467,11180,8,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,
        1,467,3,467,11190,8,467,1,468,1,468,3,468,11194,8,468,1,468,1,468,
        3,468,11198,8,468,1,468,1,468,1,468,1,468,1,468,1,468,1,468,1,468,
        3,468,11208,8,468,1,469,1,469,5,469,11212,8,469,10,469,12,469,11215,
        9,469,1,469,1,469,1,469,1,469,1,469,3,469,11222,8,469,1,469,1,469,
        1,469,1,469,1,469,1,469,5,469,11230,8,469,10,469,12,469,11233,9,
        469,1,470,1,470,1,470,1,470,1,470,1,470,1,470,1,470,1,470,1,470,
        1,470,1,470,1,470,1,470,1,470,1,470,1,470,1,470,1,470,1,470,1,470,
        1,470,1,470,5,470,11258,8,470,10,470,12,470,11261,9,470,1,470,1,
        470,1,470,1,470,1,470,1,470,1,470,5,470,11270,8,470,10,470,12,470,
        11273,9,470,1,470,1,470,1,470,1,470,3,470,11279,8,470,1,470,1,470,
        1,470,1,470,5,470,11285,8,470,10,470,12,470,11288,9,470,1,470,1,
        470,1,470,1,470,3,470,11294,8,470,1,470,1,470,1,470,1,470,3,470,
        11300,8,470,1,471,1,471,3,471,11304,8,471,1,471,5,471,11307,8,471,
        10,471,12,471,11310,9,471,1,471,1,471,1,471,1,471,1,471,3,471,11317,
        8,471,1,471,3,471,11320,8,471,3,471,11322,8,471,1,472,1,472,3,472,
        11326,8,472,1,472,1,472,3,472,11330,8,472,1,472,1,472,1,472,1,472,
        1,472,3,472,11337,8,472,1,473,1,473,3,473,11341,8,473,1,473,3,473,
        11344,8,473,1,473,1,473,1,473,3,473,11349,8,473,1,473,1,473,3,473,
        11353,8,473,1,473,1,473,3,473,11357,8,473,1,473,1,473,1,473,3,473,
        11362,8,473,1,473,1,473,1,473,5,473,11367,8,473,10,473,12,473,11370,
        9,473,1,473,1,473,1,473,1,473,1,473,1,473,5,473,11378,8,473,10,473,
        12,473,11381,9,473,1,473,1,473,3,473,11385,8,473,3,473,11387,8,473,
        1,473,1,473,3,473,11391,8,473,1,474,1,474,1,474,3,474,11396,8,474,
        1,474,1,474,3,474,11400,8,474,1,475,1,475,1,475,1,475,1,475,1,475,
        1,475,3,475,11409,8,475,1,476,1,476,1,476,1,476,1,476,3,476,11416,
        8,476,1,477,1,477,1,477,1,477,1,477,5,477,11423,8,477,10,477,12,
        477,11426,9,477,1,478,1,478,1,478,1,478,1,478,1,478,1,478,1,478,
        1,478,1,478,3,478,11438,8,478,3,478,11440,8,478,1,479,1,479,1,479,
        1,479,1,479,1,479,1,479,1,479,3,479,11450,8,479,1,479,3,479,11453,
        8,479,1,479,5,479,11456,8,479,10,479,12,479,11459,9,479,1,479,1,
        479,1,479,1,479,1,479,1,479,3,479,11467,8,479,3,479,11469,8,479,
        3,479,11471,8,479,1,479,1,479,1,479,3,479,11476,8,479,3,479,11478,
        8,479,1,479,1,479,1,479,1,479,5,479,11484,8,479,10,479,12,479,11487,
        9,479,1,479,1,479,3,479,11491,8,479,1,479,1,479,1,479,1,479,1,479,
        1,479,3,479,11499,8,479,1,479,5,479,11502,8,479,10,479,12,479,11505,
        9,479,1,479,1,479,1,479,3,479,11510,8,479,3,479,11512,8,479,1,479,
        1,479,1,479,1,479,1,479,1,479,1,479,1,479,1,479,1,479,3,479,11524,
        8,479,5,479,11526,8,479,10,479,12,479,11529,9,479,3,479,11531,8,
        479,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,3,480,11541,
        8,480,3,480,11543,8,480,1,481,1,481,1,481,3,481,11548,8,481,1,482,
        3,482,11551,8,482,1,482,1,482,1,482,5,482,11556,8,482,10,482,12,
        482,11559,9,482,1,482,3,482,11562,8,482,1,482,1,482,3,482,11566,
        8,482,1,483,1,483,1,484,1,484,1,484,1,484,1,484,5,484,11575,8,484,
        10,484,12,484,11578,9,484,1,484,1,484,1,485,1,485,1,485,1,485,1,
        485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,
        1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,
        1,485,5,485,11609,8,485,10,485,12,485,11612,9,485,1,485,1,485,1,
        485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,
        3,485,11627,8,485,1,486,1,486,1,486,1,486,1,486,3,486,11634,8,486,
        3,486,11636,8,486,1,487,1,487,1,487,5,487,11641,8,487,10,487,12,
        487,11644,9,487,1,488,1,488,1,488,1,488,5,488,11650,8,488,10,488,
        12,488,11653,9,488,1,488,1,488,1,489,1,489,1,489,3,489,11660,8,489,
        1,489,1,489,1,489,1,489,3,489,11666,8,489,1,490,1,490,1,490,1,490,
        1,490,3,490,11673,8,490,1,490,1,490,1,490,1,490,3,490,11679,8,490,
        1,490,3,490,11682,8,490,3,490,11684,8,490,1,491,1,491,1,491,1,491,
        1,491,1,491,3,491,11692,8,491,3,491,11694,8,491,1,492,1,492,1,492,
        1,492,1,492,3,492,11701,8,492,1,492,1,492,3,492,11705,8,492,1,493,
        1,493,1,493,1,493,5,493,11711,8,493,10,493,12,493,11714,9,493,3,
        493,11716,8,493,1,494,1,494,1,494,4,494,11721,8,494,11,494,12,494,
        11722,1,495,1,495,5,495,11727,8,495,10,495,12,495,11730,9,495,1,
        496,1,496,1,496,1,496,1,496,1,496,3,496,11738,8,496,1,496,1,496,
        1,496,3,496,11743,8,496,1,496,1,496,3,496,11747,8,496,1,496,1,496,
        1,496,1,496,1,496,3,496,11754,8,496,3,496,11756,8,496,1,496,1,496,
        3,496,11760,8,496,1,496,1,496,1,496,3,496,11765,8,496,3,496,11767,
        8,496,1,496,1,496,1,496,3,496,11772,8,496,3,496,11774,8,496,1,496,
        1,496,3,496,11778,8,496,1,496,1,496,1,496,1,496,1,496,3,496,11785,
        8,496,3,496,11787,8,496,1,496,1,496,1,496,1,496,1,496,3,496,11794,
        8,496,1,496,1,496,1,496,1,496,3,496,11800,8,496,1,497,1,497,1,497,
        1,497,1,497,1,497,1,497,3,497,11809,8,497,1,497,1,497,1,497,1,497,
        1,497,1,497,3,497,11817,8,497,1,497,3,497,11820,8,497,1,498,1,498,
        1,498,1,498,1,498,3,498,11827,8,498,1,498,1,498,1,498,1,498,1,498,
        1,498,3,498,11835,8,498,1,498,3,498,11838,8,498,1,499,1,499,1,499,
        5,499,11843,8,499,10,499,12,499,11846,9,499,1,500,1,500,1,500,3,
        500,11851,8,500,1,501,1,501,1,501,5,501,11856,8,501,10,501,12,501,
        11859,9,501,1,502,1,502,1,502,3,502,11864,8,502,1,503,1,503,3,503,
        11868,8,503,1,504,1,504,1,504,1,504,1,504,1,504,1,504,1,504,1,505,
        1,505,1,505,1,505,1,505,1,505,1,505,1,505,1,505,1,505,1,506,1,506,
        1,506,1,506,1,506,3,506,11893,8,506,1,507,3,507,11896,8,507,1,507,
        1,507,3,507,11900,8,507,3,507,11902,8,507,1,507,3,507,11905,8,507,
        1,507,1,507,1,507,1,507,1,507,1,508,1,508,1,508,1,508,1,509,1,509,
        1,509,1,509,1,510,1,510,1,510,1,510,1,511,1,511,1,511,1,511,1,512,
        1,512,1,512,1,512,1,512,1,512,1,512,1,512,1,513,1,513,1,513,1,513,
        1,513,1,513,1,513,1,513,1,513,1,513,1,514,1,514,1,514,5,514,11949,
        8,514,10,514,12,514,11952,9,514,1,515,1,515,1,515,1,515,1,515,1,
        515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,
        5,515,11970,8,515,10,515,12,515,11973,9,515,1,515,3,515,11976,8,
        515,1,515,1,515,3,515,11980,8,515,1,516,1,516,1,516,1,516,1,517,
        1,517,1,517,1,517,1,517,1,517,5,517,11992,8,517,10,517,12,517,11995,
        9,517,1,517,1,517,1,517,1,517,1,517,1,517,1,517,3,517,12004,8,517,
        1,518,1,518,1,518,1,518,1,518,1,518,1,518,3,518,12013,8,518,1,518,
        1,518,1,518,1,518,1,518,3,518,12020,8,518,1,519,1,519,1,519,3,519,
        12025,8,519,1,519,1,519,1,519,1,519,1,519,1,519,1,519,1,520,1,520,
        1,520,1,520,1,520,1,520,1,520,1,520,1,520,5,520,12043,8,520,10,520,
        12,520,12046,9,520,1,520,1,520,1,520,3,520,12051,8,520,1,520,1,520,
        1,520,1,520,1,520,3,520,12058,8,520,1,520,1,520,3,520,12062,8,520,
        1,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,
        5,520,12075,8,520,10,520,12,520,12078,9,520,1,520,1,520,1,520,3,
        520,12083,8,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,
        1,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,3,520,12102,
        8,520,1,521,1,521,1,521,1,521,1,521,1,521,1,521,5,521,12111,8,521,
        10,521,12,521,12114,9,521,1,521,1,521,1,521,1,521,1,521,1,521,1,
        521,1,521,1,521,1,521,3,521,12126,8,521,1,521,1,521,1,521,1,521,
        1,521,1,521,1,521,1,521,1,521,1,521,1,521,1,521,1,521,5,521,12141,
        8,521,10,521,12,521,12144,9,521,1,521,1,521,1,521,3,521,12149,8,
        521,1,521,1,521,1,521,1,521,1,521,3,521,12156,8,521,1,521,1,521,
        3,521,12160,8,521,1,522,1,522,1,522,1,522,1,523,1,523,1,523,1,523,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,3,524,12233,8,524,
        1,524,1,524,1,524,1,524,3,524,12239,8,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,3,524,12338,8,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,3,524,12350,8,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,3,524,12359,8,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,3,524,12368,8,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,3,524,12399,8,524,1,524,1,524,1,524,1,524,
        3,524,12405,8,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,3,524,12457,
        8,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,5,524,
        12468,8,524,10,524,12,524,12471,9,524,1,524,1,524,1,524,1,524,1,
        524,1,524,1,524,1,524,1,524,1,524,1,524,5,524,12484,8,524,10,524,
        12,524,12487,9,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,3,524,12505,8,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,3,524,12548,8,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,3,524,12602,8,524,
        3,524,12604,8,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,3,524,12620,8,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,3,524,12663,8,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,5,524,12684,8,524,10,524,12,
        524,12687,9,524,3,524,12689,8,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,5,524,12698,8,524,10,524,12,524,12701,9,524,3,524,12703,
        8,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,3,524,12752,8,524,1,524,1,524,1,524,1,524,
        5,524,12758,8,524,10,524,12,524,12761,9,524,1,524,1,524,1,524,1,
        524,1,524,1,524,1,524,1,524,3,524,12771,8,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,3,524,12832,8,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,3,524,12882,8,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,3,524,12912,8,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,3,524,13042,8,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,3,524,13121,8,524,
        1,524,1,524,3,524,13125,8,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,3,524,13146,8,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        3,524,13165,8,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,5,524,
        13174,8,524,10,524,12,524,13177,9,524,3,524,13179,8,524,1,524,3,
        524,13182,8,524,1,524,1,524,1,524,1,524,3,524,13188,8,524,1,524,
        3,524,13191,8,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,3,524,13206,8,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        3,524,13288,8,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,3,524,13315,8,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,3,524,13325,8,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,3,524,13376,8,524,1,524,1,524,1,524,1,524,1,524,
        1,524,3,524,13384,8,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,3,524,
        13403,8,524,3,524,13405,8,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,3,524,13419,8,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,3,524,13428,8,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,3,524,13447,8,524,3,524,13449,8,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        3,524,13464,8,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,3,524,13477,8,524,1,524,1,524,1,524,1,524,3,524,
        13483,8,524,1,524,1,524,1,524,1,524,1,524,1,524,3,524,13491,8,524,
        3,524,13493,8,524,1,524,1,524,1,524,1,524,3,524,13499,8,524,1,524,
        1,524,1,524,1,524,1,524,1,524,3,524,13507,8,524,1,524,1,524,1,524,
        1,524,3,524,13513,8,524,1,524,3,524,13516,8,524,1,525,1,525,1,525,
        1,525,3,525,13522,8,525,1,526,1,526,1,527,1,527,1,527,1,527,1,527,
        1,527,1,527,3,527,13533,8,527,1,528,1,528,1,528,1,528,1,528,1,528,
        1,528,3,528,13542,8,528,1,529,1,529,1,529,1,529,1,529,1,529,1,529,
        3,529,13551,8,529,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,
        1,530,1,530,3,530,13563,8,530,1,530,1,530,1,530,1,531,1,531,1,531,
        1,531,1,531,1,531,1,531,1,532,1,532,1,532,1,532,1,532,1,532,3,532,
        13581,8,532,1,532,1,532,1,532,1,533,1,533,1,533,1,533,1,533,1,534,
        1,534,1,534,1,534,1,534,1,534,3,534,13597,8,534,1,534,1,534,1,534,
        1,535,1,535,1,535,1,535,1,535,1,536,1,536,1,536,1,536,1,536,1,536,
        3,536,13613,8,536,1,536,1,536,1,536,1,537,1,537,1,537,1,537,1,537,
        1,538,1,538,1,538,1,538,1,538,1,538,1,538,1,538,1,538,1,538,1,538,
        1,538,1,538,1,538,1,538,1,538,1,538,1,538,1,538,1,538,1,538,1,538,
        1,538,1,538,1,538,1,538,1,538,1,538,1,538,1,538,3,538,13653,8,538,
        1,539,1,539,1,539,1,539,1,539,1,539,1,539,1,539,1,539,1,539,3,539,
        13665,8,539,1,540,1,540,1,540,1,540,1,540,1,540,3,540,13673,8,540,
        1,540,1,540,1,540,1,540,1,540,1,540,1,541,1,541,1,541,1,541,1,541,
        1,542,1,542,1,542,1,542,1,542,1,543,3,543,13692,8,543,1,543,1,543,
        1,544,3,544,13697,8,544,1,544,1,544,1,545,1,545,1,546,1,546,1,546,
        1,546,3,546,13707,8,546,1,546,5,546,13710,8,546,10,546,12,546,13713,
        9,546,1,546,1,546,1,547,1,547,1,547,1,547,1,548,4,548,13722,8,548,
        11,548,12,548,13723,1,549,1,549,1,550,1,550,1,550,1,550,1,550,1,
        550,5,550,13734,8,550,10,550,12,550,13737,9,550,1,550,1,550,1,550,
        1,550,1,550,1,550,1,550,1,550,1,550,3,550,13748,8,550,1,550,1,550,
        1,550,1,550,1,550,1,550,1,550,1,550,3,550,13758,8,550,1,550,1,550,
        1,550,1,550,1,550,1,550,1,550,1,550,1,550,1,550,1,550,1,550,1,550,
        1,550,1,550,1,550,1,550,1,550,1,550,1,550,1,550,1,550,1,550,1,550,
        3,550,13784,8,550,1,551,1,551,3,551,13788,8,551,1,552,1,552,1,552,
        1,552,5,552,13794,8,552,10,552,12,552,13797,9,552,1,552,1,552,1,
        553,1,553,3,553,13803,8,553,1,554,1,554,1,554,1,554,1,554,1,554,
        1,554,1,554,1,554,5,554,13814,8,554,10,554,12,554,13817,9,554,1,
        555,1,555,1,555,5,555,13822,8,555,10,555,12,555,13825,9,555,1,556,
        1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,1,556,3,556,13837,
        8,556,1,557,1,557,1,557,1,557,1,557,3,557,13844,8,557,1,557,1,557,
        1,557,1,557,3,557,13850,8,557,1,557,1,557,3,557,13854,8,557,1,557,
        1,557,1,557,1,557,1,557,1,557,1,557,1,557,1,557,1,557,1,557,1,557,
        1,557,1,557,1,557,3,557,13871,8,557,1,558,1,558,1,558,1,558,1,558,
        1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,3,558,13886,8,558,
        3,558,13888,8,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,
        1,558,1,558,1,558,3,558,13901,8,558,1,558,1,558,1,558,1,558,1,558,
        1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,
        1,558,3,558,13920,8,558,1,558,1,558,3,558,13924,8,558,1,559,3,559,
        13927,8,559,1,559,1,559,1,560,1,560,1,560,1,560,1,560,3,560,13936,
        8,560,1,560,3,560,13939,8,560,1,560,3,560,13942,8,560,1,560,1,560,
        1,561,1,561,1,561,1,562,1,562,1,562,1,562,1,562,1,562,3,562,13955,
        8,562,1,563,1,563,3,563,13959,8,563,1,564,1,564,1,564,1,564,1,564,
        1,564,3,564,13967,8,564,1,565,1,565,1,565,1,565,3,565,13973,8,565,
        1,566,1,566,1,566,1,566,5,566,13979,8,566,10,566,12,566,13982,9,
        566,1,566,1,566,1,566,1,566,3,566,13988,8,566,1,566,1,566,1,566,
        1,566,3,566,13994,8,566,1,566,1,566,1,566,1,566,1,566,1,566,1,566,
        1,566,1,566,1,566,1,566,1,566,1,566,3,566,14009,8,566,1,567,1,567,
        1,567,1,567,1,567,1,567,1,567,3,567,14018,8,567,1,567,1,567,1,568,
        1,568,3,568,14024,8,568,1,569,1,569,1,569,1,569,3,569,14030,8,569,
        1,569,3,569,14033,8,569,1,569,1,569,3,569,14037,8,569,1,569,1,569,
        1,569,5,569,14042,8,569,10,569,12,569,14045,9,569,1,570,1,570,1,
        570,1,570,1,570,3,570,14052,8,570,1,570,3,570,14055,8,570,1,570,
        1,570,1,570,1,570,3,570,14061,8,570,1,570,1,570,1,570,1,570,3,570,
        14067,8,570,3,570,14069,8,570,1,570,1,570,1,570,1,570,3,570,14075,
        8,570,1,570,3,570,14078,8,570,3,570,14080,8,570,1,570,1,570,1,570,
        1,570,3,570,14086,8,570,3,570,14088,8,570,1,570,1,570,1,571,1,571,
        1,571,1,571,1,571,1,571,1,571,1,571,1,571,1,571,3,571,14102,8,571,
        1,571,1,571,1,571,1,571,1,571,3,571,14109,8,571,1,571,1,571,1,572,
        1,572,1,572,1,572,1,572,3,572,14118,8,572,1,573,1,573,1,573,1,573,
        1,573,3,573,14125,8,573,1,574,1,574,1,574,1,574,1,574,1,574,1,574,
        1,574,1,574,1,574,1,574,1,574,1,574,1,574,1,574,1,574,3,574,14143,
        8,574,1,574,1,574,1,574,1,574,1,574,3,574,14150,8,574,1,574,1,574,
        1,575,1,575,1,575,3,575,14157,8,575,1,575,1,575,1,575,1,575,1,575,
        3,575,14164,8,575,1,575,1,575,3,575,14168,8,575,1,576,1,576,1,576,
        3,576,14173,8,576,1,576,1,576,1,577,1,577,1,577,3,577,14180,8,577,
        1,577,1,577,1,578,3,578,14185,8,578,1,578,1,578,3,578,14189,8,578,
        1,578,1,578,1,578,3,578,14194,8,578,1,579,3,579,14197,8,579,1,579,
        1,579,3,579,14201,8,579,1,579,1,579,3,579,14205,8,579,1,579,1,579,
        1,579,3,579,14210,8,579,1,580,1,580,3,580,14214,8,580,1,581,1,581,
        1,581,3,581,14219,8,581,1,581,3,581,14222,8,581,1,581,1,581,1,581,
        3,581,14227,8,581,1,582,1,582,3,582,14231,8,582,1,582,1,582,1,582,
        3,582,14236,8,582,5,582,14238,8,582,10,582,12,582,14241,9,582,1,
        583,1,583,1,583,5,583,14246,8,583,10,583,12,583,14249,9,583,1,584,
        3,584,14252,8,584,1,584,5,584,14255,8,584,10,584,12,584,14258,9,
        584,1,584,1,584,1,585,1,585,1,585,5,585,14265,8,585,10,585,12,585,
        14268,9,585,1,586,1,586,3,586,14272,8,586,1,587,1,587,1,588,1,588,
        1,589,3,589,14279,8,589,1,589,1,589,1,590,1,590,1,590,1,590,1,590,
        3,590,14288,8,590,1,591,1,591,1,591,1,591,1,591,1,591,1,591,1,591,
        1,591,1,591,3,591,14300,8,591,1,592,1,592,1,592,3,592,14305,8,592,
        1,592,1,592,1,592,1,592,1,592,1,592,1,592,1,592,1,592,3,592,14316,
        8,592,1,592,1,592,1,592,1,592,1,592,1,592,1,592,1,592,3,592,14326,
        8,592,3,592,14328,8,592,1,592,1,592,1,592,1,592,3,592,14334,8,592,
        3,592,14336,8,592,1,592,1,592,1,592,3,592,14341,8,592,3,592,14343,
        8,592,1,592,3,592,14346,8,592,1,593,1,593,3,593,14350,8,593,1,594,
        1,594,3,594,14354,8,594,1,595,1,595,1,595,1,595,3,595,14360,8,595,
        1,595,1,595,1,595,1,595,1,595,1,595,1,595,3,595,14369,8,595,1,595,
        3,595,14372,8,595,3,595,14374,8,595,1,596,3,596,14377,8,596,1,596,
        1,596,1,596,1,596,3,596,14383,8,596,1,596,1,596,3,596,14387,8,596,
        1,596,3,596,14390,8,596,1,597,1,597,1,597,1,597,1,597,1,597,1,597,
        3,597,14399,8,597,1,598,1,598,1,598,1,598,1,598,1,598,1,598,3,598,
        14408,8,598,1,599,1,599,1,599,1,599,1,599,1,599,1,599,1,599,1,599,
        1,599,3,599,14420,8,599,1,599,3,599,14423,8,599,1,600,1,600,1,600,
        1,600,1,600,1,600,1,600,1,600,1,600,1,600,1,600,1,600,1,600,1,600,
        1,600,1,600,1,600,1,600,1,600,1,600,1,600,1,600,1,600,3,600,14448,
        8,600,1,600,1,600,3,600,14452,8,600,1,600,3,600,14455,8,600,1,601,
        1,601,1,601,3,601,14460,8,601,1,601,1,601,3,601,14464,8,601,1,601,
        1,601,3,601,14468,8,601,1,601,1,601,3,601,14472,8,601,1,602,1,602,
        1,602,1,602,1,602,3,602,14479,8,602,1,602,1,602,3,602,14483,8,602,
        1,603,1,603,1,604,1,604,1,604,1,604,1,604,1,604,1,604,3,604,14494,
        8,604,1,605,1,605,1,606,1,606,3,606,14500,8,606,1,607,1,607,1,607,
        1,607,1,607,1,607,1,607,1,607,1,607,1,607,1,607,1,607,1,607,1,607,
        1,607,3,607,14517,8,607,1,608,1,608,1,609,1,609,3,609,14523,8,609,
        1,609,0,3,94,914,938,610,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
        30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
        74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
        114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
        146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
        178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
        210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,
        242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,
        274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,
        306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,
        338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,
        370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,
        402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,
        434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,
        466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,496,
        498,500,502,504,506,508,510,512,514,516,518,520,522,524,526,528,
        530,532,534,536,538,540,542,544,546,548,550,552,554,556,558,560,
        562,564,566,568,570,572,574,576,578,580,582,584,586,588,590,592,
        594,596,598,600,602,604,606,608,610,612,614,616,618,620,622,624,
        626,628,630,632,634,636,638,640,642,644,646,648,650,652,654,656,
        658,660,662,664,666,668,670,672,674,676,678,680,682,684,686,688,
        690,692,694,696,698,700,702,704,706,708,710,712,714,716,718,720,
        722,724,726,728,730,732,734,736,738,740,742,744,746,748,750,752,
        754,756,758,760,762,764,766,768,770,772,774,776,778,780,782,784,
        786,788,790,792,794,796,798,800,802,804,806,808,810,812,814,816,
        818,820,822,824,826,828,830,832,834,836,838,840,842,844,846,848,
        850,852,854,856,858,860,862,864,866,868,870,872,874,876,878,880,
        882,884,886,888,890,892,894,896,898,900,902,904,906,908,910,912,
        914,916,918,920,922,924,926,928,930,932,934,936,938,940,942,944,
        946,948,950,952,954,956,958,960,962,964,966,968,970,972,974,976,
        978,980,982,984,986,988,990,992,994,996,998,1000,1002,1004,1006,
        1008,1010,1012,1014,1016,1018,1020,1022,1024,1026,1028,1030,1032,
        1034,1036,1038,1040,1042,1044,1046,1048,1050,1052,1054,1056,1058,
        1060,1062,1064,1066,1068,1070,1072,1074,1076,1078,1080,1082,1084,
        1086,1088,1090,1092,1094,1096,1098,1100,1102,1104,1106,1108,1110,
        1112,1114,1116,1118,1120,1122,1124,1126,1128,1130,1132,1134,1136,
        1138,1140,1142,1144,1146,1148,1150,1152,1154,1156,1158,1160,1162,
        1164,1166,1168,1170,1172,1174,1176,1178,1180,1182,1184,1186,1188,
        1190,1192,1194,1196,1198,1200,1202,1204,1206,1208,1210,1212,1214,
        1216,1218,0,175,2,0,1166,1166,1168,1168,2,0,1166,1166,1170,1170,
        2,0,250,250,982,983,3,0,1166,1166,1168,1168,1170,1170,3,0,523,523,
        618,618,888,888,3,0,1162,1162,1166,1166,1170,1170,3,0,330,330,839,
        839,1026,1026,1,0,1170,1171,1,0,832,836,2,0,198,198,659,659,2,0,
        635,635,844,844,3,0,217,217,635,635,844,844,2,0,295,295,534,534,
        3,0,217,217,635,635,876,876,2,0,384,384,848,848,2,0,217,217,876,
        876,3,0,608,608,717,717,855,856,2,0,643,643,649,649,2,0,62,62,962,
        962,2,0,73,73,530,530,2,0,22,22,765,765,3,0,22,22,596,596,763,763,
        2,0,35,35,197,197,2,0,11,11,280,280,2,0,315,315,892,892,2,0,268,
        268,290,290,3,0,269,269,926,926,943,943,2,0,269,269,291,291,3,0,
        22,22,689,689,1067,1067,3,0,269,269,795,795,954,954,3,0,488,488,
        587,587,628,628,2,0,1168,1168,1170,1170,2,0,483,483,557,557,3,0,
        26,26,29,29,621,621,3,0,608,608,703,703,705,705,2,0,925,925,941,
        941,2,0,37,37,665,665,2,0,11,11,887,887,2,0,510,510,1062,1062,2,
        0,738,738,745,745,2,0,1168,1168,1170,1171,2,0,583,583,1023,1023,
        2,0,564,564,918,918,2,0,268,268,770,770,7,0,252,252,318,318,457,
        457,768,768,773,773,865,865,1028,1028,3,0,635,635,844,844,966,966,
        2,0,255,255,401,401,4,0,252,252,457,457,865,865,1028,1028,2,0,98,
        98,358,358,2,0,457,457,1028,1028,2,0,252,252,1028,1028,3,0,385,385,
        557,557,975,975,2,0,1022,1022,1168,1168,3,0,184,184,336,336,900,
        900,2,0,243,243,1170,1170,2,0,243,243,1168,1168,2,0,518,518,1170,
        1170,3,0,385,385,483,483,557,557,2,0,363,363,378,378,3,0,418,418,
        527,527,560,560,2,0,502,502,817,817,3,0,46,46,453,453,973,973,2,
        0,608,608,686,686,4,0,156,157,608,608,677,677,824,824,1,0,156,157,
        3,0,691,691,732,732,1041,1041,2,0,35,35,788,788,2,0,726,726,728,
        728,3,0,252,252,457,457,1028,1028,2,0,19,19,363,363,3,0,669,669,
        671,671,757,757,2,0,695,695,830,830,2,0,57,57,258,258,3,0,608,608,
        677,677,824,824,3,0,295,295,845,845,1053,1053,3,0,69,69,268,268,
        966,966,2,0,131,131,597,597,3,0,99,99,608,608,866,866,4,0,757,757,
        761,761,763,763,765,765,3,0,231,231,423,423,569,569,2,0,397,397,
        518,518,2,0,379,379,643,643,3,0,288,288,644,644,650,650,2,0,763,
        763,765,765,3,0,582,582,806,806,904,904,3,0,23,23,269,269,365,365,
        2,0,808,808,959,959,2,0,365,365,903,903,3,0,109,109,379,379,903,
        903,3,0,138,138,608,608,988,988,2,0,569,569,858,858,1,0,341,342,
        3,0,271,271,972,972,1032,1032,2,0,166,166,620,620,2,0,452,452,605,
        605,2,0,613,613,906,906,2,0,372,372,602,602,2,0,138,138,619,619,
        2,0,185,185,944,944,2,0,612,612,816,816,2,0,516,516,617,617,2,0,
        15,17,1002,1002,2,0,524,524,1035,1035,2,0,669,669,671,671,2,0,341,
        341,1171,1171,2,0,242,242,295,295,2,0,325,325,928,928,5,0,15,17,
        257,257,260,260,751,753,1001,1002,2,0,615,615,882,882,2,0,64,64,
        819,819,2,0,217,217,523,523,1,0,993,994,4,0,32,32,310,310,622,622,
        969,969,1,0,783,785,2,0,31,32,622,622,2,0,604,604,783,785,4,0,86,
        86,623,624,879,879,1049,1049,4,0,33,34,338,338,622,622,967,967,4,
        0,113,113,674,674,866,866,1170,1170,2,0,149,149,607,607,2,0,181,
        181,275,275,3,0,824,824,874,874,995,995,2,0,297,297,925,925,2,0,
        261,261,747,747,2,0,56,56,169,169,2,0,456,456,870,870,2,0,374,374,
        852,852,4,0,285,285,339,339,491,491,930,930,3,0,661,661,763,763,
        853,853,2,0,4,4,777,777,4,0,463,463,731,731,982,982,1074,1074,16,
        0,39,40,42,45,54,55,171,171,212,212,361,361,366,366,440,440,598,
        598,600,600,634,634,685,685,743,743,779,779,896,898,1071,1071,1,
        0,1198,1200,3,0,1186,1186,1201,1202,1204,1206,1,0,1201,1202,3,0,
        22,22,46,46,910,910,2,0,22,22,272,272,2,0,1168,1168,1172,1173,2,
        0,824,824,830,830,2,0,359,359,595,595,2,0,3,3,1079,1079,2,0,69,69,
        691,691,2,0,408,408,666,666,3,0,170,170,408,408,564,564,3,0,408,
        408,526,526,564,564,2,0,253,253,458,458,3,0,630,630,1166,1166,1168,
        1168,3,0,379,379,502,502,817,817,4,0,408,408,526,526,564,564,778,
        778,2,0,201,201,670,670,2,0,180,180,377,377,2,0,867,867,869,869,
        2,0,3,3,630,630,6,0,1112,1112,1115,1115,1123,1124,1126,1130,1136,
        1138,1140,1145,2,0,1041,1041,1043,1043,1,0,739,740,2,0,319,319,321,
        321,1,0,579,580,4,0,419,419,603,603,758,758,893,893,3,0,254,254,
        749,749,831,831,7,0,83,83,537,537,568,568,939,940,953,953,1044,1044,
        1046,1046,2,0,193,193,195,195,2,0,360,360,499,499,2,0,496,496,500,
        500,2,0,203,203,698,698,1,0,696,697,2,0,748,748,830,830,3,0,379,
        379,643,643,763,763,2,0,424,424,827,827,1,0,775,776,4,0,95,95,1045,
        1045,1152,1153,1165,1165,2,0,1168,1168,1172,1172,145,0,1,4,6,21,
        23,34,36,36,38,45,47,55,58,67,69,83,86,89,91,91,93,101,103,104,106,
        107,109,109,111,114,117,130,132,136,138,146,148,148,152,152,154,
        161,163,168,170,176,178,178,181,183,185,189,191,196,198,200,202,
        203,206,206,209,209,212,216,218,238,241,242,244,251,253,254,256,
        257,259,270,274,275,281,283,285,286,288,296,298,299,301,308,310,
        313,315,317,319,319,321,321,323,328,330,339,342,356,358,362,364,
        370,372,375,380,383,385,398,400,400,402,402,404,411,413,418,420,
        423,427,430,432,441,443,446,448,453,455,456,458,460,463,464,466,
        474,476,488,490,494,496,501,503,506,509,515,517,563,565,584,586,
        586,588,596,598,602,604,606,608,613,615,628,631,641,644,645,647,
        648,650,652,655,655,659,663,667,669,671,671,673,682,684,694,696,
        706,709,716,718,718,720,725,727,727,729,734,736,745,747,749,751,
        753,755,758,760,769,771,772,774,790,792,803,806,810,812,813,816,
        816,818,819,821,824,826,827,829,837,839,841,843,843,845,861,863,
        864,866,866,870,885,888,888,890,890,892,899,901,909,911,930,932,
        964,967,967,969,977,980,985,988,992,995,998,1000,1002,1004,1006,
        1008,1018,1021,1024,1026,1027,1030,1032,1034,1034,1036,1041,1043,
        1046,1048,1050,1052,1055,1057,1058,1062,1062,1065,1069,1071,1153,
        1,0,1178,1185,5,0,385,385,483,483,557,557,975,975,1200,1200,16983,
        0,1236,1,0,0,0,2,1263,1,0,0,0,4,1269,1,0,0,0,6,1296,1,0,0,0,8,1304,
        1,0,0,0,10,1471,1,0,0,0,12,1478,1,0,0,0,14,1492,1,0,0,0,16,1494,
        1,0,0,0,18,1508,1,0,0,0,20,1512,1,0,0,0,22,1526,1,0,0,0,24,1528,
        1,0,0,0,26,1535,1,0,0,0,28,1545,1,0,0,0,30,1557,1,0,0,0,32,1559,
        1,0,0,0,34,1561,1,0,0,0,36,1563,1,0,0,0,38,1594,1,0,0,0,40,1611,
        1,0,0,0,42,1624,1,0,0,0,44,1674,1,0,0,0,46,1676,1,0,0,0,48,1695,
        1,0,0,0,50,1697,1,0,0,0,52,1726,1,0,0,0,54,1739,1,0,0,0,56,1760,
        1,0,0,0,58,1773,1,0,0,0,60,1778,1,0,0,0,62,1782,1,0,0,0,64,1786,
        1,0,0,0,66,1797,1,0,0,0,68,1802,1,0,0,0,70,1804,1,0,0,0,72,1809,
        1,0,0,0,74,1811,1,0,0,0,76,1813,1,0,0,0,78,1816,1,0,0,0,80,1820,
        1,0,0,0,82,1826,1,0,0,0,84,1828,1,0,0,0,86,1831,1,0,0,0,88,1833,
        1,0,0,0,90,1836,1,0,0,0,92,1841,1,0,0,0,94,1852,1,0,0,0,96,1861,
        1,0,0,0,98,1865,1,0,0,0,100,1867,1,0,0,0,102,1873,1,0,0,0,104,1875,
        1,0,0,0,106,1877,1,0,0,0,108,1880,1,0,0,0,110,1888,1,0,0,0,112,1890,
        1,0,0,0,114,1892,1,0,0,0,116,1914,1,0,0,0,118,1933,1,0,0,0,120,1941,
        1,0,0,0,122,1945,1,0,0,0,124,1953,1,0,0,0,126,1968,1,0,0,0,128,1970,
        1,0,0,0,130,2014,1,0,0,0,132,2023,1,0,0,0,134,2036,1,0,0,0,136,2038,
        1,0,0,0,138,2040,1,0,0,0,140,2042,1,0,0,0,142,2046,1,0,0,0,144,2056,
        1,0,0,0,146,2066,1,0,0,0,148,2110,1,0,0,0,150,2133,1,0,0,0,152,2135,
        1,0,0,0,154,2137,1,0,0,0,156,2230,1,0,0,0,158,2232,1,0,0,0,160,2237,
        1,0,0,0,162,2240,1,0,0,0,164,2600,1,0,0,0,166,2602,1,0,0,0,168,2604,
        1,0,0,0,170,2606,1,0,0,0,172,2660,1,0,0,0,174,2665,1,0,0,0,176,2709,
        1,0,0,0,178,2732,1,0,0,0,180,2762,1,0,0,0,182,2766,1,0,0,0,184,2772,
        1,0,0,0,186,2778,1,0,0,0,188,2782,1,0,0,0,190,2786,1,0,0,0,192,2791,
        1,0,0,0,194,2805,1,0,0,0,196,2811,1,0,0,0,198,2816,1,0,0,0,200,2822,
        1,0,0,0,202,2838,1,0,0,0,204,2842,1,0,0,0,206,2848,1,0,0,0,208,2854,
        1,0,0,0,210,2862,1,0,0,0,212,2868,1,0,0,0,214,2883,1,0,0,0,216,2901,
        1,0,0,0,218,2908,1,0,0,0,220,2913,1,0,0,0,222,2924,1,0,0,0,224,2929,
        1,0,0,0,226,2933,1,0,0,0,228,2937,1,0,0,0,230,2942,1,0,0,0,232,2947,
        1,0,0,0,234,2952,1,0,0,0,236,2966,1,0,0,0,238,2972,1,0,0,0,240,2977,
        1,0,0,0,242,2985,1,0,0,0,244,2989,1,0,0,0,246,3006,1,0,0,0,248,3014,
        1,0,0,0,250,3020,1,0,0,0,252,3034,1,0,0,0,254,3056,1,0,0,0,256,3061,
        1,0,0,0,258,3067,1,0,0,0,260,3072,1,0,0,0,262,3076,1,0,0,0,264,3104,
        1,0,0,0,266,3115,1,0,0,0,268,3124,1,0,0,0,270,3137,1,0,0,0,272,3145,
        1,0,0,0,274,3150,1,0,0,0,276,3161,1,0,0,0,278,3191,1,0,0,0,280,3221,
        1,0,0,0,282,3235,1,0,0,0,284,3259,1,0,0,0,286,3275,1,0,0,0,288,3288,
        1,0,0,0,290,3307,1,0,0,0,292,3320,1,0,0,0,294,3329,1,0,0,0,296,3398,
        1,0,0,0,298,3414,1,0,0,0,300,3434,1,0,0,0,302,3451,1,0,0,0,304,3481,
        1,0,0,0,306,3724,1,0,0,0,308,3733,1,0,0,0,310,3791,1,0,0,0,312,3840,
        1,0,0,0,314,3842,1,0,0,0,316,3883,1,0,0,0,318,3933,1,0,0,0,320,4003,
        1,0,0,0,322,4070,1,0,0,0,324,4086,1,0,0,0,326,4114,1,0,0,0,328,4133,
        1,0,0,0,330,4154,1,0,0,0,332,4226,1,0,0,0,334,4321,1,0,0,0,336,4343,
        1,0,0,0,338,4355,1,0,0,0,340,4383,1,0,0,0,342,4404,1,0,0,0,344,4430,
        1,0,0,0,346,4439,1,0,0,0,348,4471,1,0,0,0,350,4481,1,0,0,0,352,4497,
        1,0,0,0,354,4509,1,0,0,0,356,4518,1,0,0,0,358,4535,1,0,0,0,360,4559,
        1,0,0,0,362,4667,1,0,0,0,364,4693,1,0,0,0,366,4722,1,0,0,0,368,4730,
        1,0,0,0,370,4754,1,0,0,0,372,4756,1,0,0,0,374,4766,1,0,0,0,376,4770,
        1,0,0,0,378,4782,1,0,0,0,380,4811,1,0,0,0,382,4818,1,0,0,0,384,4862,
        1,0,0,0,386,4873,1,0,0,0,388,4892,1,0,0,0,390,4932,1,0,0,0,392,4939,
        1,0,0,0,394,4952,1,0,0,0,396,4970,1,0,0,0,398,5040,1,0,0,0,400,5083,
        1,0,0,0,402,5143,1,0,0,0,404,5280,1,0,0,0,406,5423,1,0,0,0,408,5452,
        1,0,0,0,410,5481,1,0,0,0,412,5592,1,0,0,0,414,5605,1,0,0,0,416,5613,
        1,0,0,0,418,5621,1,0,0,0,420,5647,1,0,0,0,422,5651,1,0,0,0,424,5681,
        1,0,0,0,426,5708,1,0,0,0,428,5728,1,0,0,0,430,5765,1,0,0,0,432,5969,
        1,0,0,0,434,5999,1,0,0,0,436,6001,1,0,0,0,438,6033,1,0,0,0,440,6080,
        1,0,0,0,442,6132,1,0,0,0,444,6148,1,0,0,0,446,6166,1,0,0,0,448,6188,
        1,0,0,0,450,6202,1,0,0,0,452,6276,1,0,0,0,454,6307,1,0,0,0,456,6309,
        1,0,0,0,458,6313,1,0,0,0,460,6343,1,0,0,0,462,6345,1,0,0,0,464,6366,
        1,0,0,0,466,6445,1,0,0,0,468,6458,1,0,0,0,470,6460,1,0,0,0,472,6473,
        1,0,0,0,474,6528,1,0,0,0,476,6531,1,0,0,0,478,6577,1,0,0,0,480,6580,
        1,0,0,0,482,6613,1,0,0,0,484,6617,1,0,0,0,486,6632,1,0,0,0,488,6635,
        1,0,0,0,490,6694,1,0,0,0,492,6718,1,0,0,0,494,6723,1,0,0,0,496,6729,
        1,0,0,0,498,6778,1,0,0,0,500,6813,1,0,0,0,502,6832,1,0,0,0,504,6834,
        1,0,0,0,506,6854,1,0,0,0,508,6876,1,0,0,0,510,6878,1,0,0,0,512,6887,
        1,0,0,0,514,6905,1,0,0,0,516,6907,1,0,0,0,518,6940,1,0,0,0,520,6958,
        1,0,0,0,522,6960,1,0,0,0,524,7032,1,0,0,0,526,7034,1,0,0,0,528,7079,
        1,0,0,0,530,7081,1,0,0,0,532,7102,1,0,0,0,534,7119,1,0,0,0,536,7152,
        1,0,0,0,538,7154,1,0,0,0,540,7180,1,0,0,0,542,7210,1,0,0,0,544,7261,
        1,0,0,0,546,7269,1,0,0,0,548,7318,1,0,0,0,550,7328,1,0,0,0,552,7336,
        1,0,0,0,554,7384,1,0,0,0,556,7386,1,0,0,0,558,7394,1,0,0,0,560,7430,
        1,0,0,0,562,7438,1,0,0,0,564,7465,1,0,0,0,566,7492,1,0,0,0,568,7527,
        1,0,0,0,570,7564,1,0,0,0,572,7566,1,0,0,0,574,7589,1,0,0,0,576,7603,
        1,0,0,0,578,7605,1,0,0,0,580,7636,1,0,0,0,582,7656,1,0,0,0,584,7711,
        1,0,0,0,586,7713,1,0,0,0,588,7788,1,0,0,0,590,7790,1,0,0,0,592,7868,
        1,0,0,0,594,7870,1,0,0,0,596,7918,1,0,0,0,598,7926,1,0,0,0,600,7957,
        1,0,0,0,602,7959,1,0,0,0,604,8044,1,0,0,0,606,8056,1,0,0,0,608,8070,
        1,0,0,0,610,8127,1,0,0,0,612,8129,1,0,0,0,614,8194,1,0,0,0,616,8196,
        1,0,0,0,618,8221,1,0,0,0,620,8240,1,0,0,0,622,8242,1,0,0,0,624,8270,
        1,0,0,0,626,8272,1,0,0,0,628,8280,1,0,0,0,630,8282,1,0,0,0,632,8351,
        1,0,0,0,634,8359,1,0,0,0,636,8361,1,0,0,0,638,8363,1,0,0,0,640,8365,
        1,0,0,0,642,8379,1,0,0,0,644,8385,1,0,0,0,646,8387,1,0,0,0,648,8389,
        1,0,0,0,650,8394,1,0,0,0,652,8396,1,0,0,0,654,8400,1,0,0,0,656,8412,
        1,0,0,0,658,8414,1,0,0,0,660,8417,1,0,0,0,662,8420,1,0,0,0,664,8422,
        1,0,0,0,666,8424,1,0,0,0,668,8426,1,0,0,0,670,8455,1,0,0,0,672,8457,
        1,0,0,0,674,8468,1,0,0,0,676,8471,1,0,0,0,678,8483,1,0,0,0,680,8491,
        1,0,0,0,682,8498,1,0,0,0,684,8521,1,0,0,0,686,8523,1,0,0,0,688,8534,
        1,0,0,0,690,8536,1,0,0,0,692,8563,1,0,0,0,694,8570,1,0,0,0,696,8576,
        1,0,0,0,698,8595,1,0,0,0,700,8597,1,0,0,0,702,8614,1,0,0,0,704,8637,
        1,0,0,0,706,8654,1,0,0,0,708,8671,1,0,0,0,710,8688,1,0,0,0,712,8705,
        1,0,0,0,714,8723,1,0,0,0,716,8733,1,0,0,0,718,8735,1,0,0,0,720,8742,
        1,0,0,0,722,8797,1,0,0,0,724,8804,1,0,0,0,726,8835,1,0,0,0,728,8837,
        1,0,0,0,730,9087,1,0,0,0,732,9325,1,0,0,0,734,9365,1,0,0,0,736,9378,
        1,0,0,0,738,9392,1,0,0,0,740,9400,1,0,0,0,742,9406,1,0,0,0,744,9413,
        1,0,0,0,746,9417,1,0,0,0,748,9422,1,0,0,0,750,9474,1,0,0,0,752,9492,
        1,0,0,0,754,9494,1,0,0,0,756,9498,1,0,0,0,758,9508,1,0,0,0,760,9531,
        1,0,0,0,762,9595,1,0,0,0,764,9599,1,0,0,0,766,9601,1,0,0,0,768,9638,
        1,0,0,0,770,9640,1,0,0,0,772,9656,1,0,0,0,774,9669,1,0,0,0,776,9689,
        1,0,0,0,778,9702,1,0,0,0,780,9739,1,0,0,0,782,9756,1,0,0,0,784,9758,
        1,0,0,0,786,9771,1,0,0,0,788,9796,1,0,0,0,790,10011,1,0,0,0,792,
        10044,1,0,0,0,794,10106,1,0,0,0,796,10108,1,0,0,0,798,10112,1,0,
        0,0,800,10115,1,0,0,0,802,10119,1,0,0,0,804,10124,1,0,0,0,806,10129,
        1,0,0,0,808,10133,1,0,0,0,810,10135,1,0,0,0,812,10162,1,0,0,0,814,
        10176,1,0,0,0,816,10178,1,0,0,0,818,10208,1,0,0,0,820,10210,1,0,
        0,0,822,10243,1,0,0,0,824,10245,1,0,0,0,826,10269,1,0,0,0,828,10294,
        1,0,0,0,830,10315,1,0,0,0,832,10317,1,0,0,0,834,10334,1,0,0,0,836,
        10345,1,0,0,0,838,10350,1,0,0,0,840,10352,1,0,0,0,842,10374,1,0,
        0,0,844,10390,1,0,0,0,846,10406,1,0,0,0,848,10414,1,0,0,0,850,10425,
        1,0,0,0,852,10443,1,0,0,0,854,10447,1,0,0,0,856,10456,1,0,0,0,858,
        10491,1,0,0,0,860,10493,1,0,0,0,862,10501,1,0,0,0,864,10505,1,0,
        0,0,866,10518,1,0,0,0,868,10520,1,0,0,0,870,10591,1,0,0,0,872,10593,
        1,0,0,0,874,10618,1,0,0,0,876,10628,1,0,0,0,878,10648,1,0,0,0,880,
        10666,1,0,0,0,882,10678,1,0,0,0,884,10723,1,0,0,0,886,10731,1,0,
        0,0,888,10739,1,0,0,0,890,10756,1,0,0,0,892,10766,1,0,0,0,894,10777,
        1,0,0,0,896,10788,1,0,0,0,898,10886,1,0,0,0,900,10888,1,0,0,0,902,
        10929,1,0,0,0,904,10940,1,0,0,0,906,10942,1,0,0,0,908,11039,1,0,
        0,0,910,11041,1,0,0,0,912,11045,1,0,0,0,914,11056,1,0,0,0,916,11085,
        1,0,0,0,918,11087,1,0,0,0,920,11096,1,0,0,0,922,11123,1,0,0,0,924,
        11129,1,0,0,0,926,11139,1,0,0,0,928,11141,1,0,0,0,930,11143,1,0,
        0,0,932,11152,1,0,0,0,934,11189,1,0,0,0,936,11207,1,0,0,0,938,11209,
        1,0,0,0,940,11299,1,0,0,0,942,11321,1,0,0,0,944,11329,1,0,0,0,946,
        11338,1,0,0,0,948,11392,1,0,0,0,950,11408,1,0,0,0,952,11415,1,0,
        0,0,954,11417,1,0,0,0,956,11427,1,0,0,0,958,11530,1,0,0,0,960,11532,
        1,0,0,0,962,11544,1,0,0,0,964,11565,1,0,0,0,966,11567,1,0,0,0,968,
        11569,1,0,0,0,970,11626,1,0,0,0,972,11628,1,0,0,0,974,11637,1,0,
        0,0,976,11645,1,0,0,0,978,11665,1,0,0,0,980,11683,1,0,0,0,982,11693,
        1,0,0,0,984,11704,1,0,0,0,986,11715,1,0,0,0,988,11717,1,0,0,0,990,
        11724,1,0,0,0,992,11799,1,0,0,0,994,11801,1,0,0,0,996,11821,1,0,
        0,0,998,11839,1,0,0,0,1000,11847,1,0,0,0,1002,11852,1,0,0,0,1004,
        11860,1,0,0,0,1006,11867,1,0,0,0,1008,11869,1,0,0,0,1010,11877,1,
        0,0,0,1012,11892,1,0,0,0,1014,11901,1,0,0,0,1016,11911,1,0,0,0,1018,
        11915,1,0,0,0,1020,11919,1,0,0,0,1022,11923,1,0,0,0,1024,11927,1,
        0,0,0,1026,11935,1,0,0,0,1028,11945,1,0,0,0,1030,11979,1,0,0,0,1032,
        11981,1,0,0,0,1034,12003,1,0,0,0,1036,12019,1,0,0,0,1038,12024,1,
        0,0,0,1040,12101,1,0,0,0,1042,12159,1,0,0,0,1044,12161,1,0,0,0,1046,
        12165,1,0,0,0,1048,13515,1,0,0,0,1050,13521,1,0,0,0,1052,13523,1,
        0,0,0,1054,13532,1,0,0,0,1056,13541,1,0,0,0,1058,13550,1,0,0,0,1060,
        13562,1,0,0,0,1062,13567,1,0,0,0,1064,13580,1,0,0,0,1066,13585,1,
        0,0,0,1068,13596,1,0,0,0,1070,13601,1,0,0,0,1072,13612,1,0,0,0,1074,
        13617,1,0,0,0,1076,13652,1,0,0,0,1078,13654,1,0,0,0,1080,13672,1,
        0,0,0,1082,13680,1,0,0,0,1084,13685,1,0,0,0,1086,13691,1,0,0,0,1088,
        13696,1,0,0,0,1090,13700,1,0,0,0,1092,13702,1,0,0,0,1094,13716,1,
        0,0,0,1096,13721,1,0,0,0,1098,13725,1,0,0,0,1100,13783,1,0,0,0,1102,
        13787,1,0,0,0,1104,13789,1,0,0,0,1106,13802,1,0,0,0,1108,13804,1,
        0,0,0,1110,13818,1,0,0,0,1112,13836,1,0,0,0,1114,13870,1,0,0,0,1116,
        13923,1,0,0,0,1118,13926,1,0,0,0,1120,13930,1,0,0,0,1122,13945,1,
        0,0,0,1124,13954,1,0,0,0,1126,13958,1,0,0,0,1128,13966,1,0,0,0,1130,
        13972,1,0,0,0,1132,14008,1,0,0,0,1134,14010,1,0,0,0,1136,14023,1,
        0,0,0,1138,14025,1,0,0,0,1140,14046,1,0,0,0,1142,14108,1,0,0,0,1144,
        14117,1,0,0,0,1146,14124,1,0,0,0,1148,14149,1,0,0,0,1150,14163,1,
        0,0,0,1152,14172,1,0,0,0,1154,14179,1,0,0,0,1156,14193,1,0,0,0,1158,
        14209,1,0,0,0,1160,14213,1,0,0,0,1162,14221,1,0,0,0,1164,14228,1,
        0,0,0,1166,14242,1,0,0,0,1168,14256,1,0,0,0,1170,14261,1,0,0,0,1172,
        14271,1,0,0,0,1174,14273,1,0,0,0,1176,14275,1,0,0,0,1178,14278,1,
        0,0,0,1180,14287,1,0,0,0,1182,14289,1,0,0,0,1184,14301,1,0,0,0,1186,
        14349,1,0,0,0,1188,14353,1,0,0,0,1190,14355,1,0,0,0,1192,14376,1,
        0,0,0,1194,14391,1,0,0,0,1196,14407,1,0,0,0,1198,14409,1,0,0,0,1200,
        14454,1,0,0,0,1202,14471,1,0,0,0,1204,14482,1,0,0,0,1206,14484,1,
        0,0,0,1208,14493,1,0,0,0,1210,14495,1,0,0,0,1212,14499,1,0,0,0,1214,
        14516,1,0,0,0,1216,14518,1,0,0,0,1218,14520,1,0,0,0,1220,1222,3,
        2,1,0,1221,1220,1,0,0,0,1222,1225,1,0,0,0,1223,1221,1,0,0,0,1223,
        1224,1,0,0,0,1224,1226,1,0,0,0,1225,1223,1,0,0,0,1226,1237,5,0,0,
        1,1227,1231,3,748,374,0,1228,1230,3,796,398,0,1229,1228,1,0,0,0,
        1230,1233,1,0,0,0,1231,1229,1,0,0,0,1231,1232,1,0,0,0,1232,1234,
        1,0,0,0,1233,1231,1,0,0,0,1234,1235,5,0,0,1,1235,1237,1,0,0,0,1236,
        1223,1,0,0,0,1236,1227,1,0,0,0,1237,1,1,0,0,0,1238,1264,3,796,398,
        0,1239,1241,3,748,374,0,1240,1239,1,0,0,0,1240,1241,1,0,0,0,1241,
        1248,1,0,0,0,1242,1249,3,796,398,0,1243,1245,3,6,3,0,1244,1243,1,
        0,0,0,1245,1246,1,0,0,0,1246,1244,1,0,0,0,1246,1247,1,0,0,0,1247,
        1249,1,0,0,0,1248,1242,1,0,0,0,1248,1244,1,0,0,0,1249,1253,1,0,0,
        0,1250,1252,3,796,398,0,1251,1250,1,0,0,0,1252,1255,1,0,0,0,1253,
        1251,1,0,0,0,1253,1254,1,0,0,0,1254,1264,1,0,0,0,1255,1253,1,0,0,
        0,1256,1260,3,4,2,0,1257,1259,3,796,398,0,1258,1257,1,0,0,0,1259,
        1262,1,0,0,0,1260,1258,1,0,0,0,1260,1261,1,0,0,0,1261,1264,1,0,0,
        0,1262,1260,1,0,0,0,1263,1238,1,0,0,0,1263,1240,1,0,0,0,1263,1256,
        1,0,0,0,1264,3,1,0,0,0,1265,1270,3,562,281,0,1266,1270,3,546,273,
        0,1267,1270,3,550,275,0,1268,1270,3,598,299,0,1269,1265,1,0,0,0,
        1269,1266,1,0,0,0,1269,1267,1,0,0,0,1269,1268,1,0,0,0,1270,5,1,0,
        0,0,1271,1273,3,8,4,0,1272,1274,5,1195,0,0,1273,1272,1,0,0,0,1273,
        1274,1,0,0,0,1274,1297,1,0,0,0,1275,1277,3,14,7,0,1276,1278,5,1195,
        0,0,1277,1276,1,0,0,0,1277,1278,1,0,0,0,1278,1297,1,0,0,0,1279,1281,
        3,48,24,0,1280,1282,5,1195,0,0,1281,1280,1,0,0,0,1281,1282,1,0,0,
        0,1282,1297,1,0,0,0,1283,1285,3,10,5,0,1284,1286,5,1195,0,0,1285,
        1284,1,0,0,0,1285,1286,1,0,0,0,1286,1297,1,0,0,0,1287,1289,3,850,
        425,0,1288,1290,5,1195,0,0,1289,1288,1,0,0,0,1289,1290,1,0,0,0,1290,
        1297,1,0,0,0,1291,1293,3,12,6,0,1292,1294,5,1195,0,0,1293,1292,1,
        0,0,0,1293,1294,1,0,0,0,1294,1297,1,0,0,0,1295,1297,5,1195,0,0,1296,
        1271,1,0,0,0,1296,1275,1,0,0,0,1296,1279,1,0,0,0,1296,1283,1,0,0,
        0,1296,1287,1,0,0,0,1296,1291,1,0,0,0,1296,1295,1,0,0,0,1297,7,1,
        0,0,0,1298,1305,3,464,232,0,1299,1305,3,472,236,0,1300,1305,3,476,
        238,0,1301,1305,3,482,241,0,1302,1305,3,488,244,0,1303,1305,3,494,
        247,0,1304,1298,1,0,0,0,1304,1299,1,0,0,0,1304,1300,1,0,0,0,1304,
        1301,1,0,0,0,1304,1302,1,0,0,0,1304,1303,1,0,0,0,1305,9,1,0,0,0,
        1306,1472,3,50,25,0,1307,1472,3,60,30,0,1308,1472,3,118,59,0,1309,
        1472,3,132,66,0,1310,1472,3,144,72,0,1311,1472,3,146,73,0,1312,1472,
        3,142,71,0,1313,1472,3,160,80,0,1314,1472,3,174,87,0,1315,1472,3,
        176,88,0,1316,1472,3,286,143,0,1317,1472,3,290,145,0,1318,1472,3,
        608,304,0,1319,1472,3,364,182,0,1320,1472,3,376,188,0,1321,1472,
        3,630,315,0,1322,1472,3,312,156,0,1323,1472,3,314,157,0,1324,1472,
        3,318,159,0,1325,1472,3,322,161,0,1326,1472,3,326,163,0,1327,1472,
        3,504,252,0,1328,1472,3,334,167,0,1329,1472,3,338,169,0,1330,1472,
        3,330,165,0,1331,1472,3,346,173,0,1332,1472,3,342,171,0,1333,1472,
        3,350,175,0,1334,1472,3,352,176,0,1335,1472,3,354,177,0,1336,1472,
        3,356,178,0,1337,1472,3,362,181,0,1338,1472,3,392,196,0,1339,1472,
        3,386,193,0,1340,1472,3,398,199,0,1341,1472,3,402,201,0,1342,1472,
        3,406,203,0,1343,1472,3,410,205,0,1344,1472,3,412,206,0,1345,1472,
        3,416,208,0,1346,1472,3,418,209,0,1347,1472,3,424,212,0,1348,1472,
        3,426,213,0,1349,1472,3,602,301,0,1350,1472,3,430,215,0,1351,1472,
        3,436,218,0,1352,1472,3,438,219,0,1353,1472,3,52,26,0,1354,1472,
        3,54,27,0,1355,1472,3,114,57,0,1356,1472,3,128,64,0,1357,1472,3,
        178,89,0,1358,1472,3,284,142,0,1359,1472,3,532,266,0,1360,1472,3,
        288,144,0,1361,1472,3,292,146,0,1362,1472,3,496,248,0,1363,1472,
        3,378,189,0,1364,1472,3,380,190,0,1365,1472,3,294,147,0,1366,1472,
        3,302,151,0,1367,1472,3,316,158,0,1368,1472,3,320,160,0,1369,1472,
        3,324,162,0,1370,1472,3,328,164,0,1371,1472,3,498,249,0,1372,1472,
        3,336,168,0,1373,1472,3,340,170,0,1374,1472,3,332,166,0,1375,1472,
        3,348,174,0,1376,1472,3,344,172,0,1377,1472,3,538,269,0,1378,1472,
        3,170,85,0,1379,1472,3,304,152,0,1380,1472,3,444,222,0,1381,1472,
        3,446,223,0,1382,1472,3,358,179,0,1383,1472,3,360,180,0,1384,1472,
        3,382,191,0,1385,1472,3,384,192,0,1386,1472,3,388,194,0,1387,1472,
        3,390,195,0,1388,1472,3,394,197,0,1389,1472,3,396,198,0,1390,1472,
        3,400,200,0,1391,1472,3,404,202,0,1392,1472,3,408,204,0,1393,1472,
        3,414,207,0,1394,1472,3,422,211,0,1395,1472,3,578,289,0,1396,1472,
        3,428,214,0,1397,1472,3,586,293,0,1398,1472,3,712,356,0,1399,1472,
        3,432,216,0,1400,1472,3,434,217,0,1401,1472,3,440,220,0,1402,1472,
        3,540,270,0,1403,1472,3,442,221,0,1404,1472,3,276,138,0,1405,1472,
        3,56,28,0,1406,1472,3,58,29,0,1407,1472,3,116,58,0,1408,1472,3,130,
        65,0,1409,1472,3,158,79,0,1410,1472,3,172,86,0,1411,1472,3,180,90,
        0,1412,1472,3,182,91,0,1413,1472,3,184,92,0,1414,1472,3,186,93,0,
        1415,1472,3,188,94,0,1416,1472,3,190,95,0,1417,1472,3,192,96,0,1418,
        1472,3,194,97,0,1419,1472,3,196,98,0,1420,1472,3,198,99,0,1421,1472,
        3,240,120,0,1422,1472,3,200,100,0,1423,1472,3,202,101,0,1424,1472,
        3,214,107,0,1425,1472,3,216,108,0,1426,1472,3,204,102,0,1427,1472,
        3,206,103,0,1428,1472,3,208,104,0,1429,1472,3,210,105,0,1430,1472,
        3,212,106,0,1431,1472,3,218,109,0,1432,1472,3,220,110,0,1433,1472,
        3,222,111,0,1434,1472,3,704,352,0,1435,1472,3,690,345,0,1436,1472,
        3,224,112,0,1437,1472,3,226,113,0,1438,1472,3,228,114,0,1439,1472,
        3,230,115,0,1440,1472,3,232,116,0,1441,1472,3,696,348,0,1442,1472,
        3,234,117,0,1443,1472,3,236,118,0,1444,1472,3,238,119,0,1445,1472,
        3,242,121,0,1446,1472,3,244,122,0,1447,1472,3,246,123,0,1448,1472,
        3,248,124,0,1449,1472,3,250,125,0,1450,1472,3,252,126,0,1451,1472,
        3,254,127,0,1452,1472,3,256,128,0,1453,1472,3,258,129,0,1454,1472,
        3,260,130,0,1455,1472,3,262,131,0,1456,1472,3,706,353,0,1457,1472,
        3,264,132,0,1458,1472,3,266,133,0,1459,1472,3,268,134,0,1460,1472,
        3,708,354,0,1461,1472,3,698,349,0,1462,1472,3,714,357,0,1463,1472,
        3,270,135,0,1464,1472,3,710,355,0,1465,1472,3,272,136,0,1466,1472,
        3,274,137,0,1467,1472,3,278,139,0,1468,1472,3,280,140,0,1469,1472,
        3,282,141,0,1470,1472,3,580,290,0,1471,1306,1,0,0,0,1471,1307,1,
        0,0,0,1471,1308,1,0,0,0,1471,1309,1,0,0,0,1471,1310,1,0,0,0,1471,
        1311,1,0,0,0,1471,1312,1,0,0,0,1471,1313,1,0,0,0,1471,1314,1,0,0,
        0,1471,1315,1,0,0,0,1471,1316,1,0,0,0,1471,1317,1,0,0,0,1471,1318,
        1,0,0,0,1471,1319,1,0,0,0,1471,1320,1,0,0,0,1471,1321,1,0,0,0,1471,
        1322,1,0,0,0,1471,1323,1,0,0,0,1471,1324,1,0,0,0,1471,1325,1,0,0,
        0,1471,1326,1,0,0,0,1471,1327,1,0,0,0,1471,1328,1,0,0,0,1471,1329,
        1,0,0,0,1471,1330,1,0,0,0,1471,1331,1,0,0,0,1471,1332,1,0,0,0,1471,
        1333,1,0,0,0,1471,1334,1,0,0,0,1471,1335,1,0,0,0,1471,1336,1,0,0,
        0,1471,1337,1,0,0,0,1471,1338,1,0,0,0,1471,1339,1,0,0,0,1471,1340,
        1,0,0,0,1471,1341,1,0,0,0,1471,1342,1,0,0,0,1471,1343,1,0,0,0,1471,
        1344,1,0,0,0,1471,1345,1,0,0,0,1471,1346,1,0,0,0,1471,1347,1,0,0,
        0,1471,1348,1,0,0,0,1471,1349,1,0,0,0,1471,1350,1,0,0,0,1471,1351,
        1,0,0,0,1471,1352,1,0,0,0,1471,1353,1,0,0,0,1471,1354,1,0,0,0,1471,
        1355,1,0,0,0,1471,1356,1,0,0,0,1471,1357,1,0,0,0,1471,1358,1,0,0,
        0,1471,1359,1,0,0,0,1471,1360,1,0,0,0,1471,1361,1,0,0,0,1471,1362,
        1,0,0,0,1471,1363,1,0,0,0,1471,1364,1,0,0,0,1471,1365,1,0,0,0,1471,
        1366,1,0,0,0,1471,1367,1,0,0,0,1471,1368,1,0,0,0,1471,1369,1,0,0,
        0,1471,1370,1,0,0,0,1471,1371,1,0,0,0,1471,1372,1,0,0,0,1471,1373,
        1,0,0,0,1471,1374,1,0,0,0,1471,1375,1,0,0,0,1471,1376,1,0,0,0,1471,
        1377,1,0,0,0,1471,1378,1,0,0,0,1471,1379,1,0,0,0,1471,1380,1,0,0,
        0,1471,1381,1,0,0,0,1471,1382,1,0,0,0,1471,1383,1,0,0,0,1471,1384,
        1,0,0,0,1471,1385,1,0,0,0,1471,1386,1,0,0,0,1471,1387,1,0,0,0,1471,
        1388,1,0,0,0,1471,1389,1,0,0,0,1471,1390,1,0,0,0,1471,1391,1,0,0,
        0,1471,1392,1,0,0,0,1471,1393,1,0,0,0,1471,1394,1,0,0,0,1471,1395,
        1,0,0,0,1471,1396,1,0,0,0,1471,1397,1,0,0,0,1471,1398,1,0,0,0,1471,
        1399,1,0,0,0,1471,1400,1,0,0,0,1471,1401,1,0,0,0,1471,1402,1,0,0,
        0,1471,1403,1,0,0,0,1471,1404,1,0,0,0,1471,1405,1,0,0,0,1471,1406,
        1,0,0,0,1471,1407,1,0,0,0,1471,1408,1,0,0,0,1471,1409,1,0,0,0,1471,
        1410,1,0,0,0,1471,1411,1,0,0,0,1471,1412,1,0,0,0,1471,1413,1,0,0,
        0,1471,1414,1,0,0,0,1471,1415,1,0,0,0,1471,1416,1,0,0,0,1471,1417,
        1,0,0,0,1471,1418,1,0,0,0,1471,1419,1,0,0,0,1471,1420,1,0,0,0,1471,
        1421,1,0,0,0,1471,1422,1,0,0,0,1471,1423,1,0,0,0,1471,1424,1,0,0,
        0,1471,1425,1,0,0,0,1471,1426,1,0,0,0,1471,1427,1,0,0,0,1471,1428,
        1,0,0,0,1471,1429,1,0,0,0,1471,1430,1,0,0,0,1471,1431,1,0,0,0,1471,
        1432,1,0,0,0,1471,1433,1,0,0,0,1471,1434,1,0,0,0,1471,1435,1,0,0,
        0,1471,1436,1,0,0,0,1471,1437,1,0,0,0,1471,1438,1,0,0,0,1471,1439,
        1,0,0,0,1471,1440,1,0,0,0,1471,1441,1,0,0,0,1471,1442,1,0,0,0,1471,
        1443,1,0,0,0,1471,1444,1,0,0,0,1471,1445,1,0,0,0,1471,1446,1,0,0,
        0,1471,1447,1,0,0,0,1471,1448,1,0,0,0,1471,1449,1,0,0,0,1471,1450,
        1,0,0,0,1471,1451,1,0,0,0,1471,1452,1,0,0,0,1471,1453,1,0,0,0,1471,
        1454,1,0,0,0,1471,1455,1,0,0,0,1471,1456,1,0,0,0,1471,1457,1,0,0,
        0,1471,1458,1,0,0,0,1471,1459,1,0,0,0,1471,1460,1,0,0,0,1471,1461,
        1,0,0,0,1471,1462,1,0,0,0,1471,1463,1,0,0,0,1471,1464,1,0,0,0,1471,
        1465,1,0,0,0,1471,1466,1,0,0,0,1471,1467,1,0,0,0,1471,1468,1,0,0,
        0,1471,1469,1,0,0,0,1471,1470,1,0,0,0,1472,11,1,0,0,0,1473,1479,
        3,728,364,0,1474,1479,3,730,365,0,1475,1479,3,732,366,0,1476,1479,
        3,734,367,0,1477,1479,3,736,368,0,1478,1473,1,0,0,0,1478,1474,1,
        0,0,0,1478,1475,1,0,0,0,1478,1476,1,0,0,0,1478,1477,1,0,0,0,1479,
        13,1,0,0,0,1480,1493,3,16,8,0,1481,1493,3,18,9,0,1482,1493,3,20,
        10,0,1483,1493,3,22,11,0,1484,1493,3,26,13,0,1485,1493,3,42,21,0,
        1486,1493,3,44,22,0,1487,1493,3,24,12,0,1488,1493,3,28,14,0,1489,
        1493,3,36,18,0,1490,1493,3,38,19,0,1491,1493,3,40,20,0,1492,1480,
        1,0,0,0,1492,1481,1,0,0,0,1492,1482,1,0,0,0,1492,1483,1,0,0,0,1492,
        1484,1,0,0,0,1492,1485,1,0,0,0,1492,1486,1,0,0,0,1492,1487,1,0,0,
        0,1492,1488,1,0,0,0,1492,1489,1,0,0,0,1492,1490,1,0,0,0,1492,1491,
        1,0,0,0,1493,15,1,0,0,0,1494,1496,5,90,0,0,1495,1497,5,1195,0,0,
        1496,1495,1,0,0,0,1496,1497,1,0,0,0,1497,1501,1,0,0,0,1498,1500,
        3,6,3,0,1499,1498,1,0,0,0,1500,1503,1,0,0,0,1501,1499,1,0,0,0,1501,
        1502,1,0,0,0,1502,1504,1,0,0,0,1503,1501,1,0,0,0,1504,1506,5,297,
        0,0,1505,1507,5,1195,0,0,1506,1505,1,0,0,0,1506,1507,1,0,0,0,1507,
        17,1,0,0,0,1508,1510,5,102,0,0,1509,1511,5,1195,0,0,1510,1509,1,
        0,0,0,1510,1511,1,0,0,0,1511,19,1,0,0,0,1512,1514,5,184,0,0,1513,
        1515,5,1195,0,0,1514,1513,1,0,0,0,1514,1515,1,0,0,0,1515,21,1,0,
        0,0,1516,1517,5,399,0,0,1517,1519,3,1208,604,0,1518,1520,5,1195,
        0,0,1519,1518,1,0,0,0,1519,1520,1,0,0,0,1520,1527,1,0,0,0,1521,1522,
        3,1208,604,0,1522,1524,5,1196,0,0,1523,1525,5,1195,0,0,1524,1523,
        1,0,0,0,1524,1525,1,0,0,0,1525,1527,1,0,0,0,1526,1516,1,0,0,0,1526,
        1521,1,0,0,0,1527,23,1,0,0,0,1528,1530,5,811,0,0,1529,1531,3,914,
        457,0,1530,1529,1,0,0,0,1530,1531,1,0,0,0,1531,1533,1,0,0,0,1532,
        1534,5,1195,0,0,1533,1532,1,0,0,0,1533,1534,1,0,0,0,1534,25,1,0,
        0,0,1535,1536,5,431,0,0,1536,1537,3,938,469,0,1537,1540,3,6,3,0,
        1538,1539,5,287,0,0,1539,1541,3,6,3,0,1540,1538,1,0,0,0,1540,1541,
        1,0,0,0,1541,1543,1,0,0,0,1542,1544,5,1195,0,0,1543,1542,1,0,0,0,
        1543,1544,1,0,0,0,1544,27,1,0,0,0,1545,1552,5,980,0,0,1546,1547,
        3,30,15,0,1547,1548,5,1194,0,0,1548,1549,3,32,16,0,1549,1550,5,1194,
        0,0,1550,1551,3,34,17,0,1551,1553,1,0,0,0,1552,1546,1,0,0,0,1552,
        1553,1,0,0,0,1553,1555,1,0,0,0,1554,1556,5,1195,0,0,1555,1554,1,
        0,0,0,1555,1556,1,0,0,0,1556,29,1,0,0,0,1557,1558,7,0,0,0,1558,31,
        1,0,0,0,1559,1560,7,1,0,0,1560,33,1,0,0,0,1561,1562,7,0,0,0,1562,
        35,1,0,0,0,1563,1564,5,90,0,0,1564,1566,5,1005,0,0,1565,1567,5,1195,
        0,0,1566,1565,1,0,0,0,1566,1567,1,0,0,0,1567,1569,1,0,0,0,1568,1570,
        3,6,3,0,1569,1568,1,0,0,0,1570,1571,1,0,0,0,1571,1569,1,0,0,0,1571,
        1572,1,0,0,0,1572,1573,1,0,0,0,1573,1574,5,297,0,0,1574,1576,5,1005,
        0,0,1575,1577,5,1195,0,0,1576,1575,1,0,0,0,1576,1577,1,0,0,0,1577,
        1578,1,0,0,0,1578,1579,5,90,0,0,1579,1581,5,119,0,0,1580,1582,5,
        1195,0,0,1581,1580,1,0,0,0,1581,1582,1,0,0,0,1582,1586,1,0,0,0,1583,
        1585,3,6,3,0,1584,1583,1,0,0,0,1585,1588,1,0,0,0,1586,1584,1,0,0,
        0,1586,1587,1,0,0,0,1587,1589,1,0,0,0,1588,1586,1,0,0,0,1589,1590,
        5,297,0,0,1590,1592,5,119,0,0,1591,1593,5,1195,0,0,1592,1591,1,0,
        0,0,1592,1593,1,0,0,0,1593,37,1,0,0,0,1594,1596,5,1056,0,0,1595,
        1597,3,480,240,0,1596,1595,1,0,0,0,1596,1597,1,0,0,0,1597,1599,1,
        0,0,0,1598,1600,5,1194,0,0,1599,1598,1,0,0,0,1599,1600,1,0,0,0,1600,
        1603,1,0,0,0,1601,1602,7,2,0,0,1602,1604,3,486,243,0,1603,1601,1,
        0,0,0,1603,1604,1,0,0,0,1604,1606,1,0,0,0,1605,1607,3,914,457,0,
        1606,1605,1,0,0,0,1606,1607,1,0,0,0,1607,1609,1,0,0,0,1608,1610,
        5,1195,0,0,1609,1608,1,0,0,0,1609,1610,1,0,0,0,1610,39,1,0,0,0,1611,
        1612,5,1061,0,0,1612,1622,3,938,469,0,1613,1623,3,6,3,0,1614,1616,
        5,102,0,0,1615,1617,5,1195,0,0,1616,1615,1,0,0,0,1616,1617,1,0,0,
        0,1617,1623,1,0,0,0,1618,1620,5,184,0,0,1619,1621,5,1195,0,0,1620,
        1619,1,0,0,0,1620,1621,1,0,0,0,1621,1623,1,0,0,0,1622,1613,1,0,0,
        0,1622,1614,1,0,0,0,1622,1618,1,0,0,0,1623,41,1,0,0,0,1624,1627,
        5,719,0,0,1625,1628,3,914,457,0,1626,1628,5,1162,0,0,1627,1625,1,
        0,0,0,1627,1626,1,0,0,0,1628,1633,1,0,0,0,1629,1630,5,1194,0,0,1630,
        1632,5,1166,0,0,1631,1629,1,0,0,0,1632,1635,1,0,0,0,1633,1631,1,
        0,0,0,1633,1634,1,0,0,0,1634,1637,1,0,0,0,1635,1633,1,0,0,0,1636,
        1638,5,1195,0,0,1637,1636,1,0,0,0,1637,1638,1,0,0,0,1638,43,1,0,
        0,0,1639,1640,5,746,0,0,1640,1641,5,1192,0,0,1641,1642,7,3,0,0,1642,
        1643,5,1194,0,0,1643,1644,3,912,456,0,1644,1645,5,1194,0,0,1645,
        1653,3,912,456,0,1646,1649,5,1194,0,0,1647,1650,3,912,456,0,1648,
        1650,5,630,0,0,1649,1647,1,0,0,0,1649,1648,1,0,0,0,1650,1652,1,0,
        0,0,1651,1646,1,0,0,0,1652,1655,1,0,0,0,1653,1651,1,0,0,0,1653,1654,
        1,0,0,0,1654,1656,1,0,0,0,1655,1653,1,0,0,0,1656,1659,5,1193,0,0,
        1657,1658,5,1063,0,0,1658,1660,7,4,0,0,1659,1657,1,0,0,0,1659,1660,
        1,0,0,0,1660,1662,1,0,0,0,1661,1663,5,1195,0,0,1662,1661,1,0,0,0,
        1662,1663,1,0,0,0,1663,1675,1,0,0,0,1664,1665,5,746,0,0,1665,1666,
        5,1168,0,0,1666,1671,7,5,0,0,1667,1668,5,1194,0,0,1668,1670,7,3,
        0,0,1669,1667,1,0,0,0,1670,1673,1,0,0,0,1671,1669,1,0,0,0,1671,1672,
        1,0,0,0,1672,1675,1,0,0,0,1673,1671,1,0,0,0,1674,1639,1,0,0,0,1674,
        1664,1,0,0,0,1675,45,1,0,0,0,1676,1677,5,1195,0,0,1677,47,1,0,0,
        0,1678,1696,3,452,226,0,1679,1696,3,806,403,0,1680,1696,3,460,230,
        0,1681,1696,3,458,229,0,1682,1696,3,448,224,0,1683,1696,3,726,363,
        0,1684,1696,3,722,361,0,1685,1696,3,746,373,0,1686,1696,3,738,369,
        0,1687,1696,3,462,231,0,1688,1696,3,802,401,0,1689,1696,3,762,381,
        0,1690,1696,3,792,396,0,1691,1696,3,800,400,0,1692,1696,3,804,402,
        0,1693,1696,3,794,397,0,1694,1696,3,798,399,0,1695,1678,1,0,0,0,
        1695,1679,1,0,0,0,1695,1680,1,0,0,0,1695,1681,1,0,0,0,1695,1682,
        1,0,0,0,1695,1683,1,0,0,0,1695,1684,1,0,0,0,1695,1685,1,0,0,0,1695,
        1686,1,0,0,0,1695,1687,1,0,0,0,1695,1688,1,0,0,0,1695,1689,1,0,0,
        0,1695,1690,1,0,0,0,1695,1691,1,0,0,0,1695,1692,1,0,0,0,1695,1693,
        1,0,0,0,1695,1694,1,0,0,0,1696,49,1,0,0,0,1697,1698,5,35,0,0,1698,
        1699,5,48,0,0,1699,1700,5,819,0,0,1700,1701,3,1208,604,0,1701,1708,
        5,1063,0,0,1702,1704,5,1194,0,0,1703,1702,1,0,0,0,1703,1704,1,0,
        0,0,1704,1705,1,0,0,0,1705,1706,5,584,0,0,1706,1707,5,1174,0,0,1707,
        1709,3,1208,604,0,1708,1703,1,0,0,0,1708,1709,1,0,0,0,1709,1716,
        1,0,0,0,1710,1712,5,1194,0,0,1711,1710,1,0,0,0,1711,1712,1,0,0,0,
        1712,1713,1,0,0,0,1713,1714,5,690,0,0,1714,1715,5,1174,0,0,1715,
        1717,5,1170,0,0,1716,1711,1,0,0,0,1716,1717,1,0,0,0,1717,1724,1,
        0,0,0,1718,1720,5,1194,0,0,1719,1718,1,0,0,0,1719,1720,1,0,0,0,1720,
        1721,1,0,0,0,1721,1722,5,248,0,0,1722,1723,5,1174,0,0,1723,1725,
        3,1208,604,0,1724,1719,1,0,0,0,1724,1725,1,0,0,0,1725,51,1,0,0,0,
        1726,1727,5,35,0,0,1727,1728,5,1074,0,0,1728,1729,5,844,0,0,1729,
        1733,5,152,0,0,1730,1731,3,1208,604,0,1731,1732,5,1187,0,0,1732,
        1734,1,0,0,0,1733,1730,1,0,0,0,1733,1734,1,0,0,0,1734,1735,1,0,0,
        0,1735,1736,3,1208,604,0,1736,1737,5,11,0,0,1737,1738,5,1170,0,0,
        1738,53,1,0,0,0,1739,1740,5,197,0,0,1740,1741,5,48,0,0,1741,1742,
        5,819,0,0,1742,1743,3,1208,604,0,1743,1750,5,1063,0,0,1744,1746,
        5,1194,0,0,1745,1744,1,0,0,0,1745,1746,1,0,0,0,1746,1747,1,0,0,0,
        1747,1748,5,690,0,0,1748,1749,5,1174,0,0,1749,1751,5,1170,0,0,1750,
        1745,1,0,0,0,1750,1751,1,0,0,0,1751,1758,1,0,0,0,1752,1754,5,1194,
        0,0,1753,1752,1,0,0,0,1753,1754,1,0,0,0,1754,1755,1,0,0,0,1755,1756,
        5,248,0,0,1756,1757,5,1174,0,0,1757,1759,3,1208,604,0,1758,1753,
        1,0,0,0,1758,1759,1,0,0,0,1759,55,1,0,0,0,1760,1761,5,280,0,0,1761,
        1764,5,20,0,0,1762,1763,5,431,0,0,1763,1765,5,320,0,0,1764,1762,
        1,0,0,0,1764,1765,1,0,0,0,1765,1769,1,0,0,0,1766,1767,3,1208,604,
        0,1767,1768,5,1187,0,0,1768,1770,1,0,0,0,1769,1766,1,0,0,0,1769,
        1770,1,0,0,0,1770,1771,1,0,0,0,1771,1772,3,1208,604,0,1772,57,1,
        0,0,0,1773,1774,5,280,0,0,1774,1775,5,48,0,0,1775,1776,5,819,0,0,
        1776,1777,3,1208,604,0,1777,59,1,0,0,0,1778,1779,3,62,31,0,1779,
        1780,3,1208,604,0,1780,1781,3,64,32,0,1781,61,1,0,0,0,1782,1783,
        5,35,0,0,1783,1784,5,59,0,0,1784,63,1,0,0,0,1785,1787,3,66,33,0,
        1786,1785,1,0,0,0,1786,1787,1,0,0,0,1787,1789,1,0,0,0,1788,1790,
        3,88,44,0,1789,1788,1,0,0,0,1789,1790,1,0,0,0,1790,1792,1,0,0,0,
        1791,1793,3,70,35,0,1792,1791,1,0,0,0,1792,1793,1,0,0,0,1793,1795,
        1,0,0,0,1794,1796,3,76,38,0,1795,1794,1,0,0,0,1795,1796,1,0,0,0,
        1796,65,1,0,0,0,1797,1800,3,68,34,0,1798,1801,3,92,46,0,1799,1801,
        3,84,42,0,1800,1798,1,0,0,0,1800,1799,1,0,0,0,1801,67,1,0,0,0,1802,
        1803,5,378,0,0,1803,69,1,0,0,0,1804,1805,3,74,37,0,1805,1806,3,72,
        36,0,1806,71,1,0,0,0,1807,1810,5,22,0,0,1808,1810,3,110,55,0,1809,
        1807,1,0,0,0,1809,1808,1,0,0,0,1810,73,1,0,0,0,1811,1812,5,280,0,
        0,1812,75,1,0,0,0,1813,1814,3,78,39,0,1814,1815,3,80,40,0,1815,77,
        1,0,0,0,1816,1817,5,11,0,0,1817,1818,5,341,0,0,1818,1819,5,378,0,
        0,1819,79,1,0,0,0,1820,1824,3,82,41,0,1821,1822,3,86,43,0,1822,1823,
        3,1208,604,0,1823,1825,1,0,0,0,1824,1821,1,0,0,0,1824,1825,1,0,0,
        0,1825,81,1,0,0,0,1826,1827,5,1170,0,0,1827,83,1,0,0,0,1828,1829,
        3,86,43,0,1829,1830,3,1208,604,0,1830,85,1,0,0,0,1831,1832,5,56,
        0,0,1832,87,1,0,0,0,1833,1834,3,90,45,0,1834,1835,3,94,47,0,1835,
        89,1,0,0,0,1836,1837,5,1063,0,0,1837,91,1,0,0,0,1838,1842,3,96,48,
        0,1839,1842,3,106,53,0,1840,1842,5,1170,0,0,1841,1838,1,0,0,0,1841,
        1839,1,0,0,0,1841,1840,1,0,0,0,1842,93,1,0,0,0,1843,1844,6,47,-1,
        0,1844,1845,5,700,0,0,1845,1846,5,1174,0,0,1846,1853,7,6,0,0,1847,
        1848,5,1054,0,0,1848,1849,5,1174,0,0,1849,1853,3,1174,587,0,1850,
        1851,5,1016,0,0,1851,1853,5,216,0,0,1852,1843,1,0,0,0,1852,1847,
        1,0,0,0,1852,1850,1,0,0,0,1853,1858,1,0,0,0,1854,1855,10,1,0,0,1855,
        1857,5,1194,0,0,1856,1854,1,0,0,0,1857,1860,1,0,0,0,1858,1856,1,
        0,0,0,1858,1859,1,0,0,0,1859,95,1,0,0,0,1860,1858,1,0,0,0,1861,1862,
        3,100,50,0,1862,1863,3,98,49,0,1863,1864,3,102,51,0,1864,97,1,0,
        0,0,1865,1866,3,1208,604,0,1866,99,1,0,0,0,1867,1868,5,278,0,0,1868,
        101,1,0,0,0,1869,1870,3,104,52,0,1870,1871,3,102,51,0,1871,1874,
        1,0,0,0,1872,1874,3,1208,604,0,1873,1869,1,0,0,0,1873,1872,1,0,0,
        0,1874,103,1,0,0,0,1875,1876,5,84,0,0,1876,105,1,0,0,0,1877,1878,
        3,108,54,0,1878,1879,3,102,51,0,1879,107,1,0,0,0,1880,1881,5,1154,
        0,0,1881,109,1,0,0,0,1882,1883,3,112,56,0,1883,1884,3,106,53,0,1884,
        1885,5,1164,0,0,1885,1886,5,1194,0,0,1886,1889,1,0,0,0,1887,1889,
        3,106,53,0,1888,1882,1,0,0,0,1888,1887,1,0,0,0,1889,111,1,0,0,0,
        1890,1891,5,1164,0,0,1891,113,1,0,0,0,1892,1893,5,197,0,0,1893,1894,
        5,59,0,0,1894,1897,3,1208,604,0,1895,1896,5,68,0,0,1896,1898,3,1208,
        604,0,1897,1895,1,0,0,0,1897,1898,1,0,0,0,1898,1899,1,0,0,0,1899,
        1904,5,378,0,0,1900,1902,5,1194,0,0,1901,1900,1,0,0,0,1901,1902,
        1,0,0,0,1902,1903,1,0,0,0,1903,1905,7,7,0,0,1904,1901,1,0,0,0,1905,
        1906,1,0,0,0,1906,1904,1,0,0,0,1906,1907,1,0,0,0,1907,1912,1,0,0,
        0,1908,1909,5,1063,0,0,1909,1910,5,700,0,0,1910,1911,5,1174,0,0,
        1911,1913,7,6,0,0,1912,1908,1,0,0,0,1912,1913,1,0,0,0,1913,115,1,
        0,0,0,1914,1915,5,280,0,0,1915,1918,5,59,0,0,1916,1917,5,431,0,0,
        1917,1919,5,320,0,0,1918,1916,1,0,0,0,1918,1919,1,0,0,0,1919,1924,
        1,0,0,0,1920,1922,5,1194,0,0,1921,1920,1,0,0,0,1921,1922,1,0,0,0,
        1922,1923,1,0,0,0,1923,1925,3,1208,604,0,1924,1921,1,0,0,0,1925,
        1926,1,0,0,0,1926,1924,1,0,0,0,1926,1927,1,0,0,0,1927,1931,1,0,0,
        0,1928,1929,5,1063,0,0,1929,1930,5,596,0,0,1930,1932,5,256,0,0,1931,
        1928,1,0,0,0,1931,1932,1,0,0,0,1932,117,1,0,0,0,1933,1934,3,120,
        60,0,1934,1939,3,1208,604,0,1935,1940,3,122,61,0,1936,1937,5,781,
        0,0,1937,1938,5,723,0,0,1938,1940,5,489,0,0,1939,1935,1,0,0,0,1939,
        1936,1,0,0,0,1940,119,1,0,0,0,1941,1942,5,35,0,0,1942,1943,5,61,
        0,0,1943,1944,5,489,0,0,1944,121,1,0,0,0,1945,1946,3,124,62,0,1946,
        1949,3,126,63,0,1947,1948,5,1194,0,0,1948,1950,3,126,63,0,1949,1947,
        1,0,0,0,1949,1950,1,0,0,0,1950,1951,1,0,0,0,1951,1952,5,1193,0,0,
        1952,123,1,0,0,0,1953,1954,5,1063,0,0,1954,1955,5,723,0,0,1955,1956,
        5,489,0,0,1956,1957,5,1192,0,0,1957,125,1,0,0,0,1958,1959,5,242,
        0,0,1959,1960,5,110,0,0,1960,1961,5,690,0,0,1961,1962,5,1174,0,0,
        1962,1969,5,1170,0,0,1963,1964,5,295,0,0,1964,1965,5,110,0,0,1965,
        1966,5,690,0,0,1966,1967,5,1174,0,0,1967,1969,5,1170,0,0,1968,1958,
        1,0,0,0,1968,1963,1,0,0,0,1969,127,1,0,0,0,1970,1971,5,197,0,0,1971,
        1972,5,61,0,0,1972,1973,5,489,0,0,1973,1976,3,1208,604,0,1974,1975,
        5,68,0,0,1975,1977,3,1208,604,0,1976,1974,1,0,0,0,1976,1977,1,0,
        0,0,1977,1991,1,0,0,0,1978,1989,5,378,0,0,1979,1980,5,341,0,0,1980,
        1981,5,1174,0,0,1981,1990,5,1170,0,0,1982,1983,5,317,0,0,1983,1984,
        5,1174,0,0,1984,1990,5,1170,0,0,1985,1986,5,59,0,0,1986,1990,3,1208,
        604,0,1987,1988,5,733,0,0,1988,1990,3,1208,604,0,1989,1979,1,0,0,
        0,1989,1982,1,0,0,0,1989,1985,1,0,0,0,1989,1987,1,0,0,0,1990,1992,
        1,0,0,0,1991,1978,1,0,0,0,1991,1992,1,0,0,0,1992,2005,1,0,0,0,1993,
        2003,5,1063,0,0,1994,1995,5,21,0,0,1995,1996,5,1174,0,0,1996,2004,
        7,8,0,0,1997,1998,5,734,0,0,1998,1999,5,1174,0,0,1999,2004,5,1170,
        0,0,2000,2001,5,199,0,0,2001,2002,5,1174,0,0,2002,2004,7,9,0,0,2003,
        1994,1,0,0,0,2003,1997,1,0,0,0,2003,2000,1,0,0,0,2004,2006,1,0,0,
        0,2005,1993,1,0,0,0,2005,2006,1,0,0,0,2006,2012,1,0,0,0,2007,2008,
        5,295,0,0,2008,2009,5,110,0,0,2009,2010,5,690,0,0,2010,2011,5,1174,
        0,0,2011,2013,5,1170,0,0,2012,2007,1,0,0,0,2012,2013,1,0,0,0,2013,
        129,1,0,0,0,2014,2015,5,280,0,0,2015,2016,5,61,0,0,2016,2017,5,489,
        0,0,2017,2021,3,1208,604,0,2018,2019,5,781,0,0,2019,2020,5,733,0,
        0,2020,2022,5,489,0,0,2021,2018,1,0,0,0,2021,2022,1,0,0,0,2022,131,
        1,0,0,0,2023,2027,3,140,70,0,2024,2025,3,148,74,0,2025,2026,3,138,
        69,0,2026,2028,1,0,0,0,2027,2024,1,0,0,0,2027,2028,1,0,0,0,2028,
        2029,1,0,0,0,2029,2030,3,1142,571,0,2030,2031,3,136,68,0,2031,2032,
        3,134,67,0,2032,133,1,0,0,0,2033,2037,3,1208,604,0,2034,2035,5,844,
        0,0,2035,2037,5,674,0,0,2036,2033,1,0,0,0,2036,2034,1,0,0,0,2037,
        135,1,0,0,0,2038,2039,5,986,0,0,2039,137,1,0,0,0,2040,2041,5,1197,
        0,0,2041,139,1,0,0,0,2042,2043,5,35,0,0,2043,2044,5,68,0,0,2044,
        2045,5,649,0,0,2045,141,1,0,0,0,2046,2050,3,140,70,0,2047,2048,3,
        150,75,0,2048,2049,3,138,69,0,2049,2051,1,0,0,0,2050,2047,1,0,0,
        0,2050,2051,1,0,0,0,2051,2052,1,0,0,0,2052,2053,3,1142,571,0,2053,
        2054,3,136,68,0,2054,2055,3,134,67,0,2055,143,1,0,0,0,2056,2060,
        3,140,70,0,2057,2058,3,152,76,0,2058,2059,3,138,69,0,2059,2061,1,
        0,0,0,2060,2057,1,0,0,0,2060,2061,1,0,0,0,2061,2062,1,0,0,0,2062,
        2063,3,1144,572,0,2063,2064,3,136,68,0,2064,2065,3,134,67,0,2065,
        145,1,0,0,0,2066,2070,3,140,70,0,2067,2068,3,154,77,0,2068,2069,
        3,138,69,0,2069,2071,1,0,0,0,2070,2067,1,0,0,0,2070,2071,1,0,0,0,
        2071,2072,1,0,0,0,2072,2073,3,1146,573,0,2073,2074,3,136,68,0,2074,
        2075,3,134,67,0,2075,147,1,0,0,0,2076,2111,5,635,0,0,2077,2111,5,
        59,0,0,2078,2079,5,61,0,0,2079,2111,5,489,0,0,2080,2081,5,81,0,0,
        2081,2111,5,403,0,0,2082,2111,5,121,0,0,2083,2111,5,186,0,0,2084,
        2111,5,1010,0,0,2085,2111,5,217,0,0,2086,2111,5,298,0,0,2087,2088,
        5,381,0,0,2088,2111,5,118,0,0,2089,2090,5,381,0,0,2090,2111,5,942,
        0,0,2091,2092,5,565,0,0,2092,2111,5,1010,0,0,2093,2094,5,778,0,0,
        2094,2095,5,878,0,0,2095,2111,5,96,0,0,2096,2111,5,819,0,0,2097,
        2111,5,823,0,0,2098,2111,5,844,0,0,2099,2100,5,854,0,0,2100,2101,
        5,732,0,0,2101,2111,5,511,0,0,2102,2103,5,876,0,0,2103,2111,5,819,
        0,0,2104,2111,5,878,0,0,2105,2106,5,961,0,0,2106,2111,5,489,0,0,
        2107,2108,5,1074,0,0,2108,2109,5,844,0,0,2109,2111,5,152,0,0,2110,
        2076,1,0,0,0,2110,2077,1,0,0,0,2110,2078,1,0,0,0,2110,2080,1,0,0,
        0,2110,2082,1,0,0,0,2110,2083,1,0,0,0,2110,2084,1,0,0,0,2110,2085,
        1,0,0,0,2110,2086,1,0,0,0,2110,2087,1,0,0,0,2110,2089,1,0,0,0,2110,
        2091,1,0,0,0,2110,2093,1,0,0,0,2110,2096,1,0,0,0,2110,2097,1,0,0,
        0,2110,2098,1,0,0,0,2110,2099,1,0,0,0,2110,2102,1,0,0,0,2110,2104,
        1,0,0,0,2110,2105,1,0,0,0,2110,2107,1,0,0,0,2111,149,1,0,0,0,2112,
        2134,5,635,0,0,2113,2134,5,59,0,0,2114,2115,5,61,0,0,2115,2134,5,
        489,0,0,2116,2134,5,121,0,0,2117,2134,5,1010,0,0,2118,2134,5,217,
        0,0,2119,2120,5,381,0,0,2120,2134,5,118,0,0,2121,2122,5,381,0,0,
        2122,2134,5,942,0,0,2123,2134,5,819,0,0,2124,2134,5,844,0,0,2125,
        2126,5,854,0,0,2126,2127,5,732,0,0,2127,2134,5,511,0,0,2128,2129,
        5,961,0,0,2129,2134,5,489,0,0,2130,2131,5,1074,0,0,2131,2132,5,844,
        0,0,2132,2134,5,152,0,0,2133,2112,1,0,0,0,2133,2113,1,0,0,0,2133,
        2114,1,0,0,0,2133,2116,1,0,0,0,2133,2117,1,0,0,0,2133,2118,1,0,0,
        0,2133,2119,1,0,0,0,2133,2121,1,0,0,0,2133,2123,1,0,0,0,2133,2124,
        1,0,0,0,2133,2125,1,0,0,0,2133,2128,1,0,0,0,2133,2130,1,0,0,0,2134,
        151,1,0,0,0,2135,2136,7,10,0,0,2136,153,1,0,0,0,2137,2138,7,11,0,
        0,2138,155,1,0,0,0,2139,2140,5,48,0,0,2140,2231,5,819,0,0,2141,2231,
        5,59,0,0,2142,2143,5,61,0,0,2143,2231,5,489,0,0,2144,2231,5,64,0,
        0,2145,2146,5,81,0,0,2146,2231,5,403,0,0,2147,2148,5,103,0,0,2148,
        2231,5,721,0,0,2149,2231,5,121,0,0,2150,2151,5,153,0,0,2151,2152,
        7,12,0,0,2152,2231,5,489,0,0,2153,2231,5,186,0,0,2154,2231,5,200,
        0,0,2155,2156,5,202,0,0,2156,2231,5,733,0,0,2157,2171,5,217,0,0,
        2158,2159,5,64,0,0,2159,2172,5,917,0,0,2160,2161,5,295,0,0,2161,
        2172,5,489,0,0,2162,2163,5,311,0,0,2163,2172,5,882,0,0,2164,2169,
        5,849,0,0,2165,2170,5,173,0,0,2166,2170,5,200,0,0,2167,2168,5,800,
        0,0,2168,2170,5,400,0,0,2169,2165,1,0,0,0,2169,2166,1,0,0,0,2169,
        2167,1,0,0,0,2170,2172,1,0,0,0,2171,2158,1,0,0,0,2171,2160,1,0,0,
        0,2171,2162,1,0,0,0,2171,2164,1,0,0,0,2171,2172,1,0,0,0,2172,2231,
        1,0,0,0,2173,2231,5,298,0,0,2174,2175,5,311,0,0,2175,2231,5,882,
        0,0,2176,2177,5,615,0,0,2177,2231,7,13,0,0,2178,2189,5,329,0,0,2179,
        2180,5,216,0,0,2180,2190,5,913,0,0,2181,2182,5,341,0,0,2182,2190,
        5,372,0,0,2183,2190,5,505,0,0,2184,2185,5,800,0,0,2185,2190,5,712,
        0,0,2186,2190,5,966,0,0,2187,2190,5,118,0,0,2188,2190,5,942,0,0,
        2189,2179,1,0,0,0,2189,2181,1,0,0,0,2189,2183,1,0,0,0,2189,2184,
        1,0,0,0,2189,2186,1,0,0,0,2189,2187,1,0,0,0,2189,2188,1,0,0,0,2190,
        2231,1,0,0,0,2191,2231,5,524,0,0,2192,2193,5,534,0,0,2193,2231,5,
        489,0,0,2194,2195,5,565,0,0,2195,2231,5,1010,0,0,2196,2231,5,635,
        0,0,2197,2198,5,687,0,0,2198,2231,7,14,0,0,2199,2200,5,778,0,0,2200,
        2201,5,878,0,0,2201,2231,5,96,0,0,2202,2203,5,800,0,0,2203,2231,
        5,400,0,0,2204,2231,5,819,0,0,2205,2231,5,823,0,0,2206,2231,5,844,
        0,0,2207,2208,5,854,0,0,2208,2209,5,732,0,0,2209,2231,5,511,0,0,
        2210,2216,5,876,0,0,2211,2213,5,64,0,0,2212,2214,5,917,0,0,2213,
        2212,1,0,0,0,2213,2214,1,0,0,0,2214,2217,1,0,0,0,2215,2217,5,819,
        0,0,2216,2211,1,0,0,0,2216,2215,1,0,0,0,2216,2217,1,0,0,0,2217,2231,
        1,0,0,0,2218,2231,5,878,0,0,2219,2220,5,919,0,0,2220,2231,5,524,
        0,0,2221,2222,5,961,0,0,2222,2231,5,489,0,0,2223,2224,5,999,0,0,
        2224,2231,7,15,0,0,2225,2231,5,1010,0,0,2226,2231,5,1035,0,0,2227,
        2228,5,1074,0,0,2228,2229,5,844,0,0,2229,2231,5,152,0,0,2230,2139,
        1,0,0,0,2230,2141,1,0,0,0,2230,2142,1,0,0,0,2230,2144,1,0,0,0,2230,
        2145,1,0,0,0,2230,2147,1,0,0,0,2230,2149,1,0,0,0,2230,2150,1,0,0,
        0,2230,2153,1,0,0,0,2230,2154,1,0,0,0,2230,2155,1,0,0,0,2230,2157,
        1,0,0,0,2230,2173,1,0,0,0,2230,2174,1,0,0,0,2230,2176,1,0,0,0,2230,
        2178,1,0,0,0,2230,2191,1,0,0,0,2230,2192,1,0,0,0,2230,2194,1,0,0,
        0,2230,2196,1,0,0,0,2230,2197,1,0,0,0,2230,2199,1,0,0,0,2230,2202,
        1,0,0,0,2230,2204,1,0,0,0,2230,2205,1,0,0,0,2230,2206,1,0,0,0,2230,
        2207,1,0,0,0,2230,2210,1,0,0,0,2230,2218,1,0,0,0,2230,2219,1,0,0,
        0,2230,2221,1,0,0,0,2230,2223,1,0,0,0,2230,2225,1,0,0,0,2230,2226,
        1,0,0,0,2230,2227,1,0,0,0,2231,157,1,0,0,0,2232,2233,5,280,0,0,2233,
        2234,5,81,0,0,2234,2235,5,403,0,0,2235,2236,3,1208,604,0,2236,159,
        1,0,0,0,2237,2238,3,162,81,0,2238,2239,3,164,82,0,2239,161,1,0,0,
        0,2240,2241,5,35,0,0,2241,2242,5,81,0,0,2242,2243,5,403,0,0,2243,
        2244,3,1208,604,0,2244,163,1,0,0,0,2245,2246,5,887,0,0,2246,2262,
        5,1192,0,0,2247,2248,5,72,0,0,2248,2249,5,1174,0,0,2249,2263,7,16,
        0,0,2250,2251,5,335,0,0,2251,2252,5,1174,0,0,2252,2263,5,1168,0,
        0,2253,2254,5,414,0,0,2254,2255,5,1174,0,0,2255,2263,5,1168,0,0,
        2256,2257,5,235,0,0,2257,2258,5,1174,0,0,2258,2263,7,17,0,0,2259,
        2260,5,796,0,0,2260,2261,5,1174,0,0,2261,2263,5,1168,0,0,2262,2247,
        1,0,0,0,2262,2250,1,0,0,0,2262,2253,1,0,0,0,2262,2256,1,0,0,0,2262,
        2259,1,0,0,0,2263,2264,1,0,0,0,2264,2601,5,1193,0,0,2265,2266,5,
        11,0,0,2266,2267,5,217,0,0,2267,2601,3,1208,604,0,2268,2269,5,781,
        0,0,2269,2270,5,217,0,0,2270,2601,3,1208,604,0,2271,2272,5,11,0,
        0,2272,2273,5,789,0,0,2273,2274,5,649,0,0,2274,2275,5,1170,0,0,2275,
        2276,5,1063,0,0,2276,2280,5,1192,0,0,2277,2278,5,299,0,0,2278,2279,
        5,1174,0,0,2279,2281,5,1170,0,0,2280,2277,1,0,0,0,2280,2281,1,0,
        0,0,2281,2288,1,0,0,0,2282,2284,5,1194,0,0,2283,2282,1,0,0,0,2283,
        2284,1,0,0,0,2284,2285,1,0,0,0,2285,2286,5,82,0,0,2286,2287,5,1174,
        0,0,2287,2289,7,18,0,0,2288,2283,1,0,0,0,2288,2289,1,0,0,0,2289,
        2296,1,0,0,0,2290,2292,5,1194,0,0,2291,2290,1,0,0,0,2291,2292,1,
        0,0,0,2292,2293,1,0,0,0,2293,2294,5,332,0,0,2294,2295,5,1174,0,0,
        2295,2297,7,19,0,0,2296,2291,1,0,0,0,2296,2297,1,0,0,0,2297,2304,
        1,0,0,0,2298,2300,5,1194,0,0,2299,2298,1,0,0,0,2299,2300,1,0,0,0,
        2300,2301,1,0,0,0,2301,2302,5,864,0,0,2302,2303,5,1174,0,0,2303,
        2305,7,19,0,0,2304,2299,1,0,0,0,2304,2305,1,0,0,0,2305,2312,1,0,
        0,0,2306,2308,5,1194,0,0,2307,2306,1,0,0,0,2307,2308,1,0,0,0,2308,
        2309,1,0,0,0,2309,2310,5,87,0,0,2310,2311,5,1174,0,0,2311,2313,5,
        1168,0,0,2312,2307,1,0,0,0,2312,2313,1,0,0,0,2313,2323,1,0,0,0,2314,
        2316,5,1194,0,0,2315,2314,1,0,0,0,2315,2316,1,0,0,0,2316,2317,1,
        0,0,0,2317,2318,5,718,0,0,2318,2319,5,1192,0,0,2319,2320,5,24,0,
        0,2320,2321,5,1174,0,0,2321,2322,7,20,0,0,2322,2324,5,1193,0,0,2323,
        2315,1,0,0,0,2323,2324,1,0,0,0,2324,2334,1,0,0,0,2325,2327,5,1194,
        0,0,2326,2325,1,0,0,0,2326,2327,1,0,0,0,2327,2328,1,0,0,0,2328,2329,
        5,857,0,0,2329,2330,5,1192,0,0,2330,2331,5,24,0,0,2331,2332,5,1174,
        0,0,2332,2333,5,763,0,0,2333,2335,5,1193,0,0,2334,2326,1,0,0,0,2334,
        2335,1,0,0,0,2335,2336,1,0,0,0,2336,2601,5,1193,0,0,2337,2338,5,
        857,0,0,2338,2347,5,1192,0,0,2339,2340,5,24,0,0,2340,2341,5,1174,
        0,0,2341,2348,7,21,0,0,2342,2343,5,764,0,0,2343,2344,5,1174,0,0,
        2344,2345,5,1192,0,0,2345,2346,5,1170,0,0,2346,2348,5,1193,0,0,2347,
        2339,1,0,0,0,2347,2342,1,0,0,0,2348,2601,1,0,0,0,2349,2350,5,718,
        0,0,2350,2373,5,1192,0,0,2351,2352,5,24,0,0,2352,2353,5,1174,0,0,
        2353,2374,7,21,0,0,2354,2355,5,764,0,0,2355,2356,5,1174,0,0,2356,
        2367,5,1192,0,0,2357,2359,5,1194,0,0,2358,2357,1,0,0,0,2358,2359,
        1,0,0,0,2359,2360,1,0,0,0,2360,2362,5,1170,0,0,2361,2358,1,0,0,0,
        2362,2365,1,0,0,0,2363,2361,1,0,0,0,2363,2364,1,0,0,0,2364,2368,
        1,0,0,0,2365,2363,1,0,0,0,2366,2368,5,608,0,0,2367,2363,1,0,0,0,
        2367,2366,1,0,0,0,2368,2369,1,0,0,0,2369,2374,5,1193,0,0,2370,2371,
        5,885,0,0,2371,2372,5,1174,0,0,2372,2374,5,1168,0,0,2373,2351,1,
        0,0,0,2373,2354,1,0,0,0,2373,2370,1,0,0,0,2374,2601,1,0,0,0,2375,
        2376,5,579,0,0,2376,2377,5,789,0,0,2377,2378,5,649,0,0,2378,2436,
        5,1170,0,0,2379,2380,5,1063,0,0,2380,2396,5,1192,0,0,2381,2382,5,
        299,0,0,2382,2383,5,1174,0,0,2383,2397,5,1170,0,0,2384,2385,5,82,
        0,0,2385,2386,5,1174,0,0,2386,2397,7,18,0,0,2387,2388,5,332,0,0,
        2388,2389,5,1174,0,0,2389,2397,7,19,0,0,2390,2391,5,864,0,0,2391,
        2392,5,1174,0,0,2392,2397,7,19,0,0,2393,2394,5,87,0,0,2394,2395,
        5,1174,0,0,2395,2397,5,1168,0,0,2396,2381,1,0,0,0,2396,2384,1,0,
        0,0,2396,2387,1,0,0,0,2396,2390,1,0,0,0,2396,2393,1,0,0,0,2397,2437,
        1,0,0,0,2398,2399,5,857,0,0,2399,2408,5,1192,0,0,2400,2401,5,24,
        0,0,2401,2402,5,1174,0,0,2402,2409,7,21,0,0,2403,2404,5,764,0,0,
        2404,2405,5,1174,0,0,2405,2406,5,1192,0,0,2406,2407,5,1170,0,0,2407,
        2409,5,1193,0,0,2408,2400,1,0,0,0,2408,2403,1,0,0,0,2409,2437,1,
        0,0,0,2410,2411,5,718,0,0,2411,2434,5,1192,0,0,2412,2413,5,24,0,
        0,2413,2414,5,1174,0,0,2414,2435,7,21,0,0,2415,2416,5,764,0,0,2416,
        2417,5,1174,0,0,2417,2428,5,1192,0,0,2418,2420,5,1194,0,0,2419,2418,
        1,0,0,0,2419,2420,1,0,0,0,2420,2421,1,0,0,0,2421,2423,5,1170,0,0,
        2422,2419,1,0,0,0,2423,2426,1,0,0,0,2424,2422,1,0,0,0,2424,2425,
        1,0,0,0,2425,2429,1,0,0,0,2426,2424,1,0,0,0,2427,2429,5,608,0,0,
        2428,2424,1,0,0,0,2428,2427,1,0,0,0,2429,2430,1,0,0,0,2430,2435,
        5,1193,0,0,2431,2432,5,885,0,0,2432,2433,5,1174,0,0,2433,2435,5,
        1168,0,0,2434,2412,1,0,0,0,2434,2415,1,0,0,0,2434,2431,1,0,0,0,2435,
        2437,1,0,0,0,2436,2379,1,0,0,0,2436,2398,1,0,0,0,2436,2410,1,0,0,
        0,2437,2438,1,0,0,0,2438,2601,5,1193,0,0,2439,2440,5,781,0,0,2440,
        2441,5,789,0,0,2441,2442,5,649,0,0,2442,2601,5,1170,0,0,2443,2601,
        5,475,0,0,2444,2445,5,475,0,0,2445,2446,5,81,0,0,2446,2447,5,403,
        0,0,2447,2470,5,649,0,0,2448,2450,5,1194,0,0,2449,2448,1,0,0,0,2449,
        2450,1,0,0,0,2450,2451,1,0,0,0,2451,2452,5,1170,0,0,2452,2453,5,
        1063,0,0,2453,2454,5,1192,0,0,2454,2455,5,515,0,0,2455,2456,5,1174,
        0,0,2456,2457,5,1170,0,0,2457,2458,5,1194,0,0,2458,2459,5,82,0,0,
        2459,2460,5,1174,0,0,2460,2461,7,18,0,0,2461,2462,5,1194,0,0,2462,
        2463,5,332,0,0,2463,2464,5,1174,0,0,2464,2465,5,530,0,0,2465,2466,
        5,1194,0,0,2466,2467,5,864,0,0,2467,2468,5,1174,0,0,2468,2469,7,
        19,0,0,2469,2471,5,1193,0,0,2470,2449,1,0,0,0,2471,2472,1,0,0,0,
        2472,2470,1,0,0,0,2472,2473,1,0,0,0,2473,2601,1,0,0,0,2474,2475,
        5,579,0,0,2475,2476,5,81,0,0,2476,2477,5,403,0,0,2477,2512,5,649,
        0,0,2478,2480,5,1194,0,0,2479,2478,1,0,0,0,2479,2480,1,0,0,0,2480,
        2481,1,0,0,0,2481,2482,5,1170,0,0,2482,2483,5,1063,0,0,2483,2484,
        5,1192,0,0,2484,2485,5,515,0,0,2485,2486,5,1174,0,0,2486,2493,5,
        1170,0,0,2487,2489,5,1194,0,0,2488,2487,1,0,0,0,2488,2489,1,0,0,
        0,2489,2490,1,0,0,0,2490,2491,5,82,0,0,2491,2492,5,1174,0,0,2492,
        2494,7,18,0,0,2493,2488,1,0,0,0,2493,2494,1,0,0,0,2494,2501,1,0,
        0,0,2495,2497,5,1194,0,0,2496,2495,1,0,0,0,2496,2497,1,0,0,0,2497,
        2498,1,0,0,0,2498,2499,5,332,0,0,2499,2500,5,1174,0,0,2500,2502,
        5,530,0,0,2501,2496,1,0,0,0,2501,2502,1,0,0,0,2502,2509,1,0,0,0,
        2503,2505,5,1194,0,0,2504,2503,1,0,0,0,2504,2505,1,0,0,0,2505,2506,
        1,0,0,0,2506,2507,5,864,0,0,2507,2508,5,1174,0,0,2508,2510,7,19,
        0,0,2509,2504,1,0,0,0,2509,2510,1,0,0,0,2510,2511,1,0,0,0,2511,2513,
        5,1193,0,0,2512,2479,1,0,0,0,2513,2514,1,0,0,0,2514,2512,1,0,0,0,
        2514,2515,1,0,0,0,2515,2601,1,0,0,0,2516,2517,5,401,0,0,2517,2518,
        5,197,0,0,2518,2519,5,46,0,0,2519,2601,5,217,0,0,2520,2521,5,255,
        0,0,2521,2522,5,197,0,0,2522,2523,5,46,0,0,2523,2601,5,217,0,0,2524,
        2601,5,331,0,0,2525,2601,5,369,0,0,2526,2527,5,11,0,0,2527,2528,
        5,512,0,0,2528,2529,5,1170,0,0,2529,2565,5,1192,0,0,2530,2531,5,
        1063,0,0,2531,2532,5,262,0,0,2532,2533,5,649,0,0,2533,2534,5,1192,
        0,0,2534,2535,3,166,83,0,2535,2536,3,166,83,0,2536,2537,5,1193,0,
        0,2537,2566,1,0,0,0,2538,2539,5,1063,0,0,2539,2540,5,464,0,0,2540,
        2554,5,1192,0,0,2541,2543,5,1194,0,0,2542,2541,1,0,0,0,2542,2543,
        1,0,0,0,2543,2544,1,0,0,0,2544,2550,5,1192,0,0,2545,2546,3,166,83,
        0,2546,2547,5,1194,0,0,2547,2548,3,166,83,0,2548,2551,1,0,0,0,2549,
        2551,3,168,84,0,2550,2545,1,0,0,0,2550,2549,1,0,0,0,2551,2552,1,
        0,0,0,2552,2553,5,1193,0,0,2553,2555,1,0,0,0,2554,2542,1,0,0,0,2555,
        2556,1,0,0,0,2556,2554,1,0,0,0,2556,2557,1,0,0,0,2557,2558,1,0,0,
        0,2558,2563,5,1193,0,0,2559,2560,5,1194,0,0,2560,2561,5,713,0,0,
        2561,2562,5,1174,0,0,2562,2564,5,1168,0,0,2563,2559,1,0,0,0,2563,
        2564,1,0,0,0,2564,2566,1,0,0,0,2565,2530,1,0,0,0,2565,2538,1,0,0,
        0,2566,2567,1,0,0,0,2567,2568,5,1193,0,0,2568,2601,1,0,0,0,2569,
        2570,5,579,0,0,2570,2585,5,512,0,0,2571,2572,5,11,0,0,2572,2573,
        5,464,0,0,2573,2578,5,1192,0,0,2574,2575,3,166,83,0,2575,2576,3,
        166,83,0,2576,2579,1,0,0,0,2577,2579,3,168,84,0,2578,2574,1,0,0,
        0,2578,2577,1,0,0,0,2579,2580,1,0,0,0,2580,2581,5,1193,0,0,2581,
        2586,1,0,0,0,2582,2583,5,713,0,0,2583,2584,5,1174,0,0,2584,2586,
        5,1168,0,0,2585,2571,1,0,0,0,2585,2582,1,0,0,0,2586,2601,1,0,0,0,
        2587,2588,5,803,0,0,2588,2589,5,512,0,0,2589,2601,5,1170,0,0,2590,
        2591,5,781,0,0,2591,2592,5,512,0,0,2592,2601,5,1170,0,0,2593,2601,
        5,644,0,0,2594,2595,5,1063,0,0,2595,2596,5,1192,0,0,2596,2597,5,
        283,0,0,2597,2598,5,1174,0,0,2598,2599,5,704,0,0,2599,2601,5,1193,
        0,0,2600,2245,1,0,0,0,2600,2265,1,0,0,0,2600,2268,1,0,0,0,2600,2271,
        1,0,0,0,2600,2337,1,0,0,0,2600,2349,1,0,0,0,2600,2375,1,0,0,0,2600,
        2439,1,0,0,0,2600,2443,1,0,0,0,2600,2444,1,0,0,0,2600,2474,1,0,0,
        0,2600,2516,1,0,0,0,2600,2520,1,0,0,0,2600,2524,1,0,0,0,2600,2525,
        1,0,0,0,2600,2526,1,0,0,0,2600,2569,1,0,0,0,2600,2587,1,0,0,0,2600,
        2590,1,0,0,0,2600,2593,1,0,0,0,2600,2594,1,0,0,0,2601,165,1,0,0,
        0,2602,2603,5,1170,0,0,2603,167,1,0,0,0,2604,2605,5,1170,0,0,2605,
        169,1,0,0,0,2606,2607,7,22,0,0,2607,2608,5,103,0,0,2608,2609,5,721,
        0,0,2609,2610,3,1208,604,0,2610,2611,5,363,0,0,2611,2612,5,189,0,
        0,2612,2613,5,887,0,0,2613,2623,5,1192,0,0,2614,2615,5,187,0,0,2615,
        2618,5,1174,0,0,2616,2619,3,1208,604,0,2617,2619,5,46,0,0,2618,2616,
        1,0,0,0,2618,2617,1,0,0,0,2619,2621,1,0,0,0,2620,2622,5,1194,0,0,
        2621,2620,1,0,0,0,2621,2622,1,0,0,0,2622,2624,1,0,0,0,2623,2614,
        1,0,0,0,2623,2624,1,0,0,0,2624,2637,1,0,0,0,2625,2626,5,519,0,0,
        2626,2632,5,1174,0,0,2627,2629,5,279,0,0,2628,2627,1,0,0,0,2628,
        2629,1,0,0,0,2629,2630,1,0,0,0,2630,2633,3,1208,604,0,2631,2633,
        5,46,0,0,2632,2628,1,0,0,0,2632,2631,1,0,0,0,2633,2635,1,0,0,0,2634,
        2636,5,1194,0,0,2635,2634,1,0,0,0,2635,2636,1,0,0,0,2636,2638,1,
        0,0,0,2637,2625,1,0,0,0,2637,2638,1,0,0,0,2638,2648,1,0,0,0,2639,
        2640,5,780,0,0,2640,2643,5,1174,0,0,2641,2644,5,1170,0,0,2642,2644,
        5,46,0,0,2643,2641,1,0,0,0,2643,2642,1,0,0,0,2644,2646,1,0,0,0,2645,
        2647,5,1194,0,0,2646,2645,1,0,0,0,2646,2647,1,0,0,0,2647,2649,1,
        0,0,0,2648,2639,1,0,0,0,2648,2649,1,0,0,0,2649,2656,1,0,0,0,2650,
        2651,5,722,0,0,2651,2654,5,1174,0,0,2652,2655,5,1168,0,0,2653,2655,
        5,243,0,0,2654,2652,1,0,0,0,2654,2653,1,0,0,0,2655,2657,1,0,0,0,
        2656,2650,1,0,0,0,2656,2657,1,0,0,0,2657,2658,1,0,0,0,2658,2659,
        5,1193,0,0,2659,171,1,0,0,0,2660,2661,5,280,0,0,2661,2662,5,103,
        0,0,2662,2663,5,721,0,0,2663,2664,3,1208,604,0,2664,173,1,0,0,0,
        2665,2666,5,35,0,0,2666,2667,5,121,0,0,2667,2707,3,1208,604,0,2668,
        2669,5,781,0,0,2669,2708,5,724,0,0,2670,2671,5,1063,0,0,2671,2672,
        5,723,0,0,2672,2673,5,489,0,0,2673,2696,5,1192,0,0,2674,2675,5,341,
        0,0,2675,2676,5,1174,0,0,2676,2678,5,1170,0,0,2677,2679,5,1194,0,
        0,2678,2677,1,0,0,0,2678,2679,1,0,0,0,2679,2697,1,0,0,0,2680,2681,
        5,242,0,0,2681,2682,5,110,0,0,2682,2683,5,690,0,0,2683,2684,5,1174,
        0,0,2684,2686,5,1170,0,0,2685,2687,5,1194,0,0,2686,2685,1,0,0,0,
        2686,2687,1,0,0,0,2687,2697,1,0,0,0,2688,2689,5,295,0,0,2689,2690,
        5,110,0,0,2690,2691,5,690,0,0,2691,2692,5,1174,0,0,2692,2694,5,1170,
        0,0,2693,2695,5,1194,0,0,2694,2693,1,0,0,0,2694,2695,1,0,0,0,2695,
        2697,1,0,0,0,2696,2674,1,0,0,0,2696,2680,1,0,0,0,2696,2688,1,0,0,
        0,2697,2698,1,0,0,0,2698,2696,1,0,0,0,2698,2699,1,0,0,0,2699,2700,
        1,0,0,0,2700,2708,5,1193,0,0,2701,2702,5,1063,0,0,2702,2703,5,10,
        0,0,2703,2704,5,363,0,0,2704,2705,5,91,0,0,2705,2706,5,1174,0,0,
        2706,2708,7,17,0,0,2707,2668,1,0,0,0,2707,2670,1,0,0,0,2707,2701,
        1,0,0,0,2708,175,1,0,0,0,2709,2710,5,35,0,0,2710,2711,5,153,0,0,
        2711,2712,5,295,0,0,2712,2713,5,489,0,0,2713,2714,3,1208,604,0,2714,
        2715,7,23,0,0,2715,2716,5,1041,0,0,2716,2717,5,1192,0,0,2717,2718,
        5,159,0,0,2718,2719,5,1174,0,0,2719,2728,3,1208,604,0,2720,2721,
        5,1194,0,0,2721,2722,5,21,0,0,2722,2723,5,1174,0,0,2723,2724,5,1170,
        0,0,2724,2725,5,1194,0,0,2725,2726,5,294,0,0,2726,2727,5,1174,0,
        0,2727,2729,5,1171,0,0,2728,2720,1,0,0,0,2728,2729,1,0,0,0,2729,
        2730,1,0,0,0,2730,2731,5,1193,0,0,2731,177,1,0,0,0,2732,2733,5,197,
        0,0,2733,2734,5,153,0,0,2734,2735,5,295,0,0,2735,2736,5,489,0,0,
        2736,2737,3,1208,604,0,2737,2738,5,1063,0,0,2738,2758,5,1042,0,0,
        2739,2741,5,1192,0,0,2740,2742,5,1194,0,0,2741,2740,1,0,0,0,2741,
        2742,1,0,0,0,2742,2743,1,0,0,0,2743,2744,5,159,0,0,2744,2745,5,1174,
        0,0,2745,2746,3,1208,604,0,2746,2747,5,1194,0,0,2747,2748,5,21,0,
        0,2748,2749,5,1174,0,0,2749,2750,5,1170,0,0,2750,2751,5,1194,0,0,
        2751,2752,5,294,0,0,2752,2753,5,1174,0,0,2753,2754,5,1171,0,0,2754,
        2756,5,1193,0,0,2755,2757,5,1194,0,0,2756,2755,1,0,0,0,2756,2757,
        1,0,0,0,2757,2759,1,0,0,0,2758,2739,1,0,0,0,2759,2760,1,0,0,0,2760,
        2758,1,0,0,0,2760,2761,1,0,0,0,2761,179,1,0,0,0,2762,2763,5,280,
        0,0,2763,2764,5,121,0,0,2764,2765,3,1208,604,0,2765,181,1,0,0,0,
        2766,2767,5,280,0,0,2767,2768,5,153,0,0,2768,2769,5,295,0,0,2769,
        2770,5,489,0,0,2770,2771,3,1208,604,0,2771,183,1,0,0,0,2772,2773,
        5,280,0,0,2773,2774,5,153,0,0,2774,2775,5,534,0,0,2775,2776,5,489,
        0,0,2776,2777,3,1208,604,0,2777,185,1,0,0,0,2778,2779,5,280,0,0,
        2779,2780,5,186,0,0,2780,2781,3,1208,604,0,2781,187,1,0,0,0,2782,
        2783,5,280,0,0,2783,2784,5,200,0,0,2784,2785,3,1208,604,0,2785,189,
        1,0,0,0,2786,2787,5,280,0,0,2787,2788,5,202,0,0,2788,2789,5,733,
        0,0,2789,2790,3,1208,604,0,2790,191,1,0,0,0,2791,2792,5,280,0,0,
        2792,2795,5,217,0,0,2793,2794,5,431,0,0,2794,2796,5,320,0,0,2795,
        2793,1,0,0,0,2795,2796,1,0,0,0,2796,2801,1,0,0,0,2797,2799,5,1194,
        0,0,2798,2797,1,0,0,0,2798,2799,1,0,0,0,2799,2800,1,0,0,0,2800,2802,
        3,1208,604,0,2801,2798,1,0,0,0,2802,2803,1,0,0,0,2803,2801,1,0,0,
        0,2803,2804,1,0,0,0,2804,193,1,0,0,0,2805,2806,5,280,0,0,2806,2807,
        5,217,0,0,2807,2808,5,64,0,0,2808,2809,5,917,0,0,2809,2810,3,1208,
        604,0,2810,195,1,0,0,0,2811,2812,5,280,0,0,2812,2813,5,217,0,0,2813,
        2814,5,295,0,0,2814,2815,5,489,0,0,2815,197,1,0,0,0,2816,2817,5,
        280,0,0,2817,2818,5,217,0,0,2818,2819,5,849,0,0,2819,2820,5,200,
        0,0,2820,2821,3,1208,604,0,2821,199,1,0,0,0,2822,2823,5,280,0,0,
        2823,2826,5,243,0,0,2824,2825,5,431,0,0,2825,2827,5,320,0,0,2826,
        2824,1,0,0,0,2826,2827,1,0,0,0,2827,2829,1,0,0,0,2828,2830,5,1194,
        0,0,2829,2828,1,0,0,0,2829,2830,1,0,0,0,2830,2834,1,0,0,0,2831,2832,
        3,1208,604,0,2832,2833,5,1187,0,0,2833,2835,1,0,0,0,2834,2831,1,
        0,0,0,2834,2835,1,0,0,0,2835,2836,1,0,0,0,2836,2837,3,1208,604,0,
        2837,201,1,0,0,0,2838,2839,5,280,0,0,2839,2840,5,298,0,0,2840,2841,
        3,1208,604,0,2841,203,1,0,0,0,2842,2843,5,280,0,0,2843,2844,5,329,
        0,0,2844,2845,5,216,0,0,2845,2846,5,913,0,0,2846,2847,3,1208,604,
        0,2847,205,1,0,0,0,2848,2849,5,280,0,0,2849,2850,5,329,0,0,2850,
        2851,5,341,0,0,2851,2852,5,372,0,0,2852,2853,3,1208,604,0,2853,207,
        1,0,0,0,2854,2855,5,280,0,0,2855,2856,5,329,0,0,2856,2857,5,505,
        0,0,2857,2860,3,1208,604,0,2858,2859,5,68,0,0,2859,2861,3,1208,604,
        0,2860,2858,1,0,0,0,2860,2861,1,0,0,0,2861,209,1,0,0,0,2862,2863,
        5,280,0,0,2863,2864,5,329,0,0,2864,2865,5,800,0,0,2865,2866,5,712,
        0,0,2866,2867,3,1208,604,0,2867,211,1,0,0,0,2868,2869,5,280,0,0,
        2869,2870,5,329,0,0,2870,2874,5,966,0,0,2871,2872,3,1208,604,0,2872,
        2873,5,1187,0,0,2873,2875,1,0,0,0,2874,2871,1,0,0,0,2874,2875,1,
        0,0,0,2875,2879,1,0,0,0,2876,2877,3,1208,604,0,2877,2878,5,1187,
        0,0,2878,2880,1,0,0,0,2879,2876,1,0,0,0,2879,2880,1,0,0,0,2880,2881,
        1,0,0,0,2881,2882,3,1208,604,0,2882,213,1,0,0,0,2883,2884,5,280,
        0,0,2884,2885,5,311,0,0,2885,2890,5,615,0,0,2886,2888,5,1194,0,0,
        2887,2886,1,0,0,0,2887,2888,1,0,0,0,2888,2889,1,0,0,0,2889,2891,
        3,1208,604,0,2890,2887,1,0,0,0,2891,2892,1,0,0,0,2892,2890,1,0,0,
        0,2892,2893,1,0,0,0,2893,2894,1,0,0,0,2894,2899,5,649,0,0,2895,2900,
        5,876,0,0,2896,2900,5,217,0,0,2897,2898,5,741,0,0,2898,2900,3,1208,
        604,0,2899,2895,1,0,0,0,2899,2896,1,0,0,0,2899,2897,1,0,0,0,2900,
        215,1,0,0,0,2901,2902,5,280,0,0,2902,2903,5,311,0,0,2903,2904,5,
        882,0,0,2904,2905,3,1208,604,0,2905,2906,5,649,0,0,2906,2907,5,876,
        0,0,2907,217,1,0,0,0,2908,2909,5,280,0,0,2909,2910,5,381,0,0,2910,
        2911,5,118,0,0,2911,2912,3,1208,604,0,2912,219,1,0,0,0,2913,2914,
        5,280,0,0,2914,2915,5,381,0,0,2915,2916,5,447,0,0,2916,2920,5,649,
        0,0,2917,2918,3,1208,604,0,2918,2919,5,1187,0,0,2919,2921,1,0,0,
        0,2920,2917,1,0,0,0,2920,2921,1,0,0,0,2921,2922,1,0,0,0,2922,2923,
        3,1208,604,0,2923,221,1,0,0,0,2924,2925,5,280,0,0,2925,2926,5,381,
        0,0,2926,2927,5,942,0,0,2927,2928,3,1208,604,0,2928,223,1,0,0,0,
        2929,2930,5,280,0,0,2930,2931,5,524,0,0,2931,2932,3,1208,604,0,2932,
        225,1,0,0,0,2933,2934,5,280,0,0,2934,2935,5,534,0,0,2935,2936,5,
        489,0,0,2936,227,1,0,0,0,2937,2938,5,280,0,0,2938,2939,5,565,0,0,
        2939,2940,5,1010,0,0,2940,2941,3,1208,604,0,2941,229,1,0,0,0,2942,
        2943,5,280,0,0,2943,2944,5,687,0,0,2944,2945,5,384,0,0,2945,2946,
        3,1208,604,0,2946,231,1,0,0,0,2947,2948,5,280,0,0,2948,2949,5,687,
        0,0,2949,2950,5,848,0,0,2950,2951,3,1208,604,0,2951,233,1,0,0,0,
        2952,2953,5,280,0,0,2953,2957,5,741,0,0,2954,2955,3,1208,604,0,2955,
        2956,5,1187,0,0,2956,2958,1,0,0,0,2957,2954,1,0,0,0,2957,2958,1,
        0,0,0,2958,2962,1,0,0,0,2959,2960,3,1208,604,0,2960,2961,5,1187,
        0,0,2961,2963,1,0,0,0,2962,2959,1,0,0,0,2962,2963,1,0,0,0,2963,2964,
        1,0,0,0,2964,2965,3,1208,604,0,2965,235,1,0,0,0,2966,2967,5,280,
        0,0,2967,2968,5,778,0,0,2968,2969,5,878,0,0,2969,2970,5,96,0,0,2970,
        2971,3,1208,604,0,2971,237,1,0,0,0,2972,2973,5,280,0,0,2973,2974,
        5,800,0,0,2974,2975,5,712,0,0,2975,2976,3,1208,604,0,2976,239,1,
        0,0,0,2977,2978,5,280,0,0,2978,2981,5,819,0,0,2979,2980,5,431,0,
        0,2980,2982,5,320,0,0,2981,2979,1,0,0,0,2981,2982,1,0,0,0,2982,2983,
        1,0,0,0,2983,2984,3,1208,604,0,2984,241,1,0,0,0,2985,2986,5,280,
        0,0,2986,2987,5,823,0,0,2987,2988,3,1208,604,0,2988,243,1,0,0,0,
        2989,2990,5,280,0,0,2990,2993,5,838,0,0,2991,2992,5,431,0,0,2992,
        2994,5,320,0,0,2993,2991,1,0,0,0,2993,2994,1,0,0,0,2994,3004,1,0,
        0,0,2995,2997,5,1194,0,0,2996,2995,1,0,0,0,2996,2997,1,0,0,0,2997,
        3001,1,0,0,0,2998,2999,3,1208,604,0,2999,3000,5,1187,0,0,3000,3002,
        1,0,0,0,3001,2998,1,0,0,0,3001,3002,1,0,0,0,3002,3003,1,0,0,0,3003,
        3005,3,1208,604,0,3004,2996,1,0,0,0,3004,3005,1,0,0,0,3005,245,1,
        0,0,0,3006,3007,5,280,0,0,3007,3010,5,844,0,0,3008,3009,5,431,0,
        0,3009,3011,5,320,0,0,3010,3008,1,0,0,0,3010,3011,1,0,0,0,3011,3012,
        1,0,0,0,3012,3013,3,1208,604,0,3013,247,1,0,0,0,3014,3015,5,280,
        0,0,3015,3016,5,854,0,0,3016,3017,5,732,0,0,3017,3018,5,511,0,0,
        3018,3019,3,1208,604,0,3019,249,1,0,0,0,3020,3021,5,280,0,0,3021,
        3022,5,861,0,0,3022,3025,5,711,0,0,3023,3024,5,431,0,0,3024,3026,
        5,320,0,0,3025,3023,1,0,0,0,3025,3026,1,0,0,0,3026,3030,1,0,0,0,
        3027,3028,3,1208,604,0,3028,3029,5,1187,0,0,3029,3031,1,0,0,0,3030,
        3027,1,0,0,0,3030,3031,1,0,0,0,3031,3032,1,0,0,0,3032,3033,3,1208,
        604,0,3033,251,1,0,0,0,3034,3035,5,280,0,0,3035,3038,5,873,0,0,3036,
        3037,5,431,0,0,3037,3039,5,320,0,0,3038,3036,1,0,0,0,3038,3039,1,
        0,0,0,3039,3054,1,0,0,0,3040,3042,5,1194,0,0,3041,3040,1,0,0,0,3041,
        3042,1,0,0,0,3042,3046,1,0,0,0,3043,3044,3,1208,604,0,3044,3045,
        5,1187,0,0,3045,3047,1,0,0,0,3046,3043,1,0,0,0,3046,3047,1,0,0,0,
        3047,3051,1,0,0,0,3048,3049,3,1208,604,0,3049,3050,5,1187,0,0,3050,
        3052,1,0,0,0,3051,3048,1,0,0,0,3051,3052,1,0,0,0,3052,3053,1,0,0,
        0,3053,3055,3,1208,604,0,3054,3041,1,0,0,0,3054,3055,1,0,0,0,3055,
        253,1,0,0,0,3056,3057,5,280,0,0,3057,3058,5,876,0,0,3058,3059,5,
        64,0,0,3059,3060,3,1208,604,0,3060,255,1,0,0,0,3061,3062,5,280,0,
        0,3062,3063,5,876,0,0,3063,3064,5,64,0,0,3064,3065,5,917,0,0,3065,
        3066,3,1208,604,0,3066,257,1,0,0,0,3067,3068,5,280,0,0,3068,3069,
        5,876,0,0,3069,3070,5,819,0,0,3070,3071,3,1208,604,0,3071,259,1,
        0,0,0,3072,3073,5,280,0,0,3073,3074,5,878,0,0,3074,3075,3,1208,604,
        0,3075,261,1,0,0,0,3076,3078,5,280,0,0,3077,3079,5,194,0,0,3078,
        3077,1,0,0,0,3078,3079,1,0,0,0,3079,3080,1,0,0,0,3080,3081,5,902,
        0,0,3081,3085,5,378,0,0,3082,3083,3,1208,604,0,3083,3084,5,1187,
        0,0,3084,3086,1,0,0,0,3085,3082,1,0,0,0,3085,3086,1,0,0,0,3086,3087,
        1,0,0,0,3087,3088,3,1208,604,0,3088,3100,5,110,0,0,3089,3091,5,1194,
        0,0,3090,3089,1,0,0,0,3090,3091,1,0,0,0,3091,3092,1,0,0,0,3092,3093,
        5,121,0,0,3093,3101,3,1208,604,0,3094,3096,5,1194,0,0,3095,3094,
        1,0,0,0,3095,3096,1,0,0,0,3096,3097,1,0,0,0,3097,3098,5,61,0,0,3098,
        3099,5,489,0,0,3099,3101,3,1208,604,0,3100,3090,1,0,0,0,3100,3095,
        1,0,0,0,3101,3102,1,0,0,0,3102,3100,1,0,0,0,3102,3103,1,0,0,0,3103,
        263,1,0,0,0,3104,3105,5,280,0,0,3105,3109,5,931,0,0,3106,3107,3,
        1208,604,0,3107,3108,5,1187,0,0,3108,3110,1,0,0,0,3109,3106,1,0,
        0,0,3109,3110,1,0,0,0,3110,3111,1,0,0,0,3111,3112,3,1208,604,0,3112,
        3113,5,1187,0,0,3113,3114,3,1208,604,0,3114,265,1,0,0,0,3115,3116,
        5,280,0,0,3116,3117,5,961,0,0,3117,3118,5,489,0,0,3118,3122,3,1208,
        604,0,3119,3120,5,781,0,0,3120,3121,5,733,0,0,3121,3123,5,489,0,
        0,3122,3119,1,0,0,0,3122,3123,1,0,0,0,3123,267,1,0,0,0,3124,3125,
        5,280,0,0,3125,3128,5,963,0,0,3126,3127,5,431,0,0,3127,3129,5,320,
        0,0,3128,3126,1,0,0,0,3128,3129,1,0,0,0,3129,3133,1,0,0,0,3130,3131,
        3,1208,604,0,3131,3132,5,1187,0,0,3132,3134,1,0,0,0,3133,3130,1,
        0,0,0,3133,3134,1,0,0,0,3134,3135,1,0,0,0,3135,3136,3,1208,604,0,
        3136,269,1,0,0,0,3137,3138,5,280,0,0,3138,3141,5,1035,0,0,3139,3140,
        5,431,0,0,3140,3142,5,320,0,0,3141,3139,1,0,0,0,3141,3142,1,0,0,
        0,3142,3143,1,0,0,0,3143,3144,3,1208,604,0,3144,271,1,0,0,0,3145,
        3146,5,280,0,0,3146,3147,5,1069,0,0,3147,3148,5,403,0,0,3148,3149,
        3,1208,604,0,3149,273,1,0,0,0,3150,3151,5,280,0,0,3151,3152,5,1074,
        0,0,3152,3153,5,844,0,0,3153,3157,5,152,0,0,3154,3155,3,1208,604,
        0,3155,3156,5,1187,0,0,3156,3158,1,0,0,0,3157,3154,1,0,0,0,3157,
        3158,1,0,0,0,3158,3159,1,0,0,0,3159,3160,3,1208,604,0,3160,275,1,
        0,0,0,3161,3162,5,268,0,0,3162,3177,5,999,0,0,3163,3165,5,1194,0,
        0,3164,3163,1,0,0,0,3164,3165,1,0,0,0,3165,3169,1,0,0,0,3166,3167,
        3,1208,604,0,3167,3168,5,1187,0,0,3168,3170,1,0,0,0,3169,3166,1,
        0,0,0,3169,3170,1,0,0,0,3170,3171,1,0,0,0,3171,3173,3,1208,604,0,
        3172,3164,1,0,0,0,3173,3174,1,0,0,0,3174,3172,1,0,0,0,3174,3175,
        1,0,0,0,3175,3178,1,0,0,0,3176,3178,5,22,0,0,3177,3172,1,0,0,0,3177,
        3176,1,0,0,0,3178,3179,1,0,0,0,3179,3189,5,649,0,0,3180,3181,3,1208,
        604,0,3181,3182,5,1187,0,0,3182,3184,1,0,0,0,3183,3180,1,0,0,0,3183,
        3184,1,0,0,0,3184,3185,1,0,0,0,3185,3190,3,1208,604,0,3186,3190,
        5,217,0,0,3187,3188,5,22,0,0,3188,3190,5,876,0,0,3189,3183,1,0,0,
        0,3189,3186,1,0,0,0,3189,3187,1,0,0,0,3190,277,1,0,0,0,3191,3192,
        5,290,0,0,3192,3207,5,999,0,0,3193,3195,5,1194,0,0,3194,3193,1,0,
        0,0,3194,3195,1,0,0,0,3195,3199,1,0,0,0,3196,3197,3,1208,604,0,3197,
        3198,5,1187,0,0,3198,3200,1,0,0,0,3199,3196,1,0,0,0,3199,3200,1,
        0,0,0,3200,3201,1,0,0,0,3201,3203,3,1208,604,0,3202,3194,1,0,0,0,
        3203,3204,1,0,0,0,3204,3202,1,0,0,0,3204,3205,1,0,0,0,3205,3208,
        1,0,0,0,3206,3208,5,22,0,0,3207,3202,1,0,0,0,3207,3206,1,0,0,0,3208,
        3209,1,0,0,0,3209,3219,5,649,0,0,3210,3211,3,1208,604,0,3211,3212,
        5,1187,0,0,3212,3214,1,0,0,0,3213,3210,1,0,0,0,3213,3214,1,0,0,0,
        3214,3215,1,0,0,0,3215,3220,3,1208,604,0,3216,3220,5,217,0,0,3217,
        3218,5,22,0,0,3218,3220,5,876,0,0,3219,3213,1,0,0,0,3219,3216,1,
        0,0,0,3219,3217,1,0,0,0,3220,279,1,0,0,0,3221,3222,5,521,0,0,3222,
        3223,5,966,0,0,3223,3224,3,1150,575,0,3224,3225,5,442,0,0,3225,3226,
        7,24,0,0,3226,3230,5,578,0,0,3227,3228,5,1055,0,0,3228,3231,5,1168,
        0,0,3229,3231,5,618,0,0,3230,3227,1,0,0,0,3230,3229,1,0,0,0,3230,
        3231,1,0,0,0,3231,3233,1,0,0,0,3232,3234,5,1195,0,0,3233,3232,1,
        0,0,0,3233,3234,1,0,0,0,3234,281,1,0,0,0,3235,3236,5,1003,0,0,3236,
        3237,5,966,0,0,3237,3257,3,1150,575,0,3238,3239,5,1063,0,0,3239,
        3240,5,1192,0,0,3240,3241,5,688,0,0,3241,3251,5,1192,0,0,3242,3244,
        5,1194,0,0,3243,3242,1,0,0,0,3243,3244,1,0,0,0,3244,3249,1,0,0,0,
        3245,3250,5,1168,0,0,3246,3247,5,1168,0,0,3247,3248,5,986,0,0,3248,
        3250,5,1168,0,0,3249,3245,1,0,0,0,3249,3246,1,0,0,0,3250,3252,1,
        0,0,0,3251,3243,1,0,0,0,3252,3253,1,0,0,0,3253,3251,1,0,0,0,3253,
        3254,1,0,0,0,3254,3255,1,0,0,0,3255,3256,5,1193,0,0,3256,3258,5,
        1193,0,0,3257,3238,1,0,0,0,3257,3258,1,0,0,0,3258,283,1,0,0,0,3259,
        3260,5,197,0,0,3260,3261,5,153,0,0,3261,3262,5,534,0,0,3262,3263,
        5,489,0,0,3263,3264,3,1208,604,0,3264,3265,5,1063,0,0,3265,3266,
        5,1192,0,0,3266,3267,5,494,0,0,3267,3268,5,1174,0,0,3268,3269,5,
        1170,0,0,3269,3270,5,1194,0,0,3270,3271,5,492,0,0,3271,3272,5,1174,
        0,0,3272,3273,5,1170,0,0,3273,3274,5,1193,0,0,3274,285,1,0,0,0,3275,
        3276,5,35,0,0,3276,3277,5,200,0,0,3277,3278,3,1208,604,0,3278,3279,
        5,1063,0,0,3279,3280,5,424,0,0,3280,3281,5,1174,0,0,3281,3286,5,
        1170,0,0,3282,3283,5,1194,0,0,3283,3284,5,859,0,0,3284,3285,5,1174,
        0,0,3285,3287,5,1170,0,0,3286,3282,1,0,0,0,3286,3287,1,0,0,0,3287,
        287,1,0,0,0,3288,3289,5,197,0,0,3289,3290,5,200,0,0,3290,3291,3,
        1208,604,0,3291,3292,5,1063,0,0,3292,3293,5,424,0,0,3293,3294,5,
        1174,0,0,3294,3299,5,1170,0,0,3295,3296,5,1194,0,0,3296,3297,5,859,
        0,0,3297,3298,5,1174,0,0,3298,3300,5,1170,0,0,3299,3295,1,0,0,0,
        3299,3300,1,0,0,0,3300,3305,1,0,0,0,3301,3302,5,363,0,0,3302,3303,
        5,202,0,0,3303,3304,5,733,0,0,3304,3306,3,1208,604,0,3305,3301,1,
        0,0,0,3305,3306,1,0,0,0,3306,289,1,0,0,0,3307,3308,5,35,0,0,3308,
        3309,5,202,0,0,3309,3310,5,733,0,0,3310,3315,3,1208,604,0,3311,3312,
        5,378,0,0,3312,3313,5,341,0,0,3313,3314,5,1174,0,0,3314,3316,5,1170,
        0,0,3315,3311,1,0,0,0,3315,3316,1,0,0,0,3316,3318,1,0,0,0,3317,3319,
        7,25,0,0,3318,3317,1,0,0,0,3318,3319,1,0,0,0,3319,291,1,0,0,0,3320,
        3321,5,197,0,0,3321,3322,5,202,0,0,3322,3323,5,733,0,0,3323,3324,
        3,1208,604,0,3324,3325,5,378,0,0,3325,3326,5,341,0,0,3326,3327,5,
        1174,0,0,3327,3328,5,1170,0,0,3328,293,1,0,0,0,3329,3330,5,197,0,
        0,3330,3331,5,298,0,0,3331,3334,3,1208,604,0,3332,3333,5,68,0,0,
        3333,3335,3,1208,604,0,3334,3332,1,0,0,0,3334,3335,1,0,0,0,3335,
        3339,1,0,0,0,3336,3337,5,929,0,0,3337,3338,5,1174,0,0,3338,3340,
        7,26,0,0,3339,3336,1,0,0,0,3339,3340,1,0,0,0,3340,3341,1,0,0,0,3341,
        3342,5,56,0,0,3342,3343,5,976,0,0,3343,3344,5,1192,0,0,3344,3345,
        3,300,150,0,3345,3396,5,1193,0,0,3346,3347,5,363,0,0,3347,3348,5,
        1008,0,0,3348,3349,5,1192,0,0,3349,3397,5,1193,0,0,3350,3351,5,363,
        0,0,3351,3352,5,880,0,0,3352,3353,5,1192,0,0,3353,3358,3,298,149,
        0,3354,3356,5,1194,0,0,3355,3354,1,0,0,0,3355,3356,1,0,0,0,3356,
        3357,1,0,0,0,3357,3359,3,296,148,0,3358,3355,1,0,0,0,3358,3359,1,
        0,0,0,3359,3366,1,0,0,0,3360,3362,5,1194,0,0,3361,3360,1,0,0,0,3361,
        3362,1,0,0,0,3362,3363,1,0,0,0,3363,3364,5,566,0,0,3364,3365,5,1174,
        0,0,3365,3367,7,27,0,0,3366,3361,1,0,0,0,3366,3367,1,0,0,0,3367,
        3374,1,0,0,0,3368,3370,5,1194,0,0,3369,3368,1,0,0,0,3369,3370,1,
        0,0,0,3370,3371,1,0,0,0,3371,3372,5,567,0,0,3372,3373,5,1174,0,0,
        3373,3375,5,1168,0,0,3374,3369,1,0,0,0,3374,3375,1,0,0,0,3375,3376,
        1,0,0,0,3376,3377,5,1193,0,0,3377,3397,1,0,0,0,3378,3379,5,363,0,
        0,3379,3380,5,219,0,0,3380,3381,5,1192,0,0,3381,3386,3,298,149,0,
        3382,3384,5,1194,0,0,3383,3382,1,0,0,0,3383,3384,1,0,0,0,3384,3385,
        1,0,0,0,3385,3387,3,296,148,0,3386,3383,1,0,0,0,3386,3387,1,0,0,
        0,3387,3389,1,0,0,0,3388,3390,5,1194,0,0,3389,3388,1,0,0,0,3389,
        3390,1,0,0,0,3390,3391,1,0,0,0,3391,3392,5,819,0,0,3392,3393,5,1174,
        0,0,3393,3394,7,28,0,0,3394,3395,5,1193,0,0,3395,3397,1,0,0,0,3396,
        3346,1,0,0,0,3396,3350,1,0,0,0,3396,3378,1,0,0,0,3397,295,1,0,0,
        0,3398,3399,5,295,0,0,3399,3400,5,1174,0,0,3400,3412,7,29,0,0,3401,
        3410,5,21,0,0,3402,3404,5,14,0,0,3403,3405,5,752,0,0,3404,3403,1,
        0,0,0,3404,3405,1,0,0,0,3405,3411,1,0,0,0,3406,3408,5,752,0,0,3407,
        3409,5,14,0,0,3408,3407,1,0,0,0,3408,3409,1,0,0,0,3409,3411,1,0,
        0,0,3410,3402,1,0,0,0,3410,3406,1,0,0,0,3411,3413,1,0,0,0,3412,3401,
        1,0,0,0,3412,3413,1,0,0,0,3413,297,1,0,0,0,3414,3415,5,67,0,0,3415,
        3432,5,1174,0,0,3416,3418,5,1062,0,0,3417,3419,7,30,0,0,3418,3417,
        1,0,0,0,3418,3419,1,0,0,0,3419,3422,1,0,0,0,3420,3421,5,121,0,0,
        3421,3423,3,1208,604,0,3422,3420,1,0,0,0,3422,3423,1,0,0,0,3423,
        3433,1,0,0,0,3424,3425,5,121,0,0,3425,3427,3,1208,604,0,3426,3428,
        5,1062,0,0,3427,3426,1,0,0,0,3427,3428,1,0,0,0,3428,3430,1,0,0,0,
        3429,3431,7,30,0,0,3430,3429,1,0,0,0,3430,3431,1,0,0,0,3431,3433,
        1,0,0,0,3432,3416,1,0,0,0,3432,3424,1,0,0,0,3433,299,1,0,0,0,3434,
        3435,5,514,0,0,3435,3436,5,1174,0,0,3436,3449,5,1168,0,0,3437,3438,
        5,1194,0,0,3438,3439,5,513,0,0,3439,3447,5,1174,0,0,3440,3448,5,
        22,0,0,3441,3444,5,1192,0,0,3442,3445,5,1158,0,0,3443,3445,5,1170,
        0,0,3444,3442,1,0,0,0,3444,3443,1,0,0,0,3445,3446,1,0,0,0,3446,3448,
        5,1193,0,0,3447,3440,1,0,0,0,3447,3441,1,0,0,0,3448,3450,1,0,0,0,
        3449,3437,1,0,0,0,3449,3450,1,0,0,0,3450,301,1,0,0,0,3451,3452,5,
        197,0,0,3452,3453,5,311,0,0,3453,3454,5,615,0,0,3454,3455,3,1208,
        604,0,3455,3460,5,649,0,0,3456,3461,5,876,0,0,3457,3461,5,217,0,
        0,3458,3459,5,741,0,0,3459,3461,3,1208,604,0,3460,3456,1,0,0,0,3460,
        3457,1,0,0,0,3460,3458,1,0,0,0,3461,3464,1,0,0,0,3462,3463,5,1063,
        0,0,3463,3465,5,337,0,0,3464,3462,1,0,0,0,3464,3465,1,0,0,0,3465,
        3466,1,0,0,0,3466,3471,5,363,0,0,3467,3469,5,1194,0,0,3468,3467,
        1,0,0,0,3468,3469,1,0,0,0,3469,3470,1,0,0,0,3470,3472,3,1208,604,
        0,3471,3468,1,0,0,0,3472,3473,1,0,0,0,3473,3471,1,0,0,0,3473,3474,
        1,0,0,0,3474,3475,1,0,0,0,3475,3476,5,986,0,0,3476,3477,5,878,0,
        0,3477,3478,5,1170,0,0,3478,3479,5,1194,0,0,3479,3480,5,1170,0,0,
        3480,303,1,0,0,0,3481,3482,7,22,0,0,3482,3483,5,311,0,0,3483,3484,
        5,882,0,0,3484,3485,3,1208,604,0,3485,3486,5,649,0,0,3486,3554,5,
        876,0,0,3487,3489,5,1194,0,0,3488,3487,1,0,0,0,3488,3489,1,0,0,0,
        3489,3490,1,0,0,0,3490,3491,5,11,0,0,3491,3495,5,311,0,0,3492,3493,
        3,1208,604,0,3493,3494,5,1187,0,0,3494,3496,1,0,0,0,3495,3492,1,
        0,0,0,3495,3496,1,0,0,0,3496,3497,1,0,0,0,3497,3498,3,1208,604,0,
        3498,3499,5,1187,0,0,3499,3500,3,1208,604,0,3500,3549,1,0,0,0,3501,
        3515,5,1192,0,0,3502,3512,5,887,0,0,3503,3505,5,1194,0,0,3504,3503,
        1,0,0,0,3504,3505,1,0,0,0,3505,3506,1,0,0,0,3506,3507,3,1208,604,
        0,3507,3508,5,1174,0,0,3508,3509,7,31,0,0,3509,3511,1,0,0,0,3510,
        3504,1,0,0,0,3511,3514,1,0,0,0,3512,3510,1,0,0,0,3512,3513,1,0,0,
        0,3513,3516,1,0,0,0,3514,3512,1,0,0,0,3515,3502,1,0,0,0,3515,3516,
        1,0,0,0,3516,3537,1,0,0,0,3517,3518,5,8,0,0,3518,3531,5,1192,0,0,
        3519,3521,5,1194,0,0,3520,3519,1,0,0,0,3520,3521,1,0,0,0,3521,3525,
        1,0,0,0,3522,3523,3,1208,604,0,3523,3524,5,1187,0,0,3524,3526,1,
        0,0,0,3525,3522,1,0,0,0,3525,3526,1,0,0,0,3526,3527,1,0,0,0,3527,
        3528,3,1208,604,0,3528,3529,5,1187,0,0,3529,3530,3,1208,604,0,3530,
        3532,1,0,0,0,3531,3520,1,0,0,0,3532,3533,1,0,0,0,3533,3531,1,0,0,
        0,3533,3534,1,0,0,0,3534,3535,1,0,0,0,3535,3536,5,1193,0,0,3536,
        3538,1,0,0,0,3537,3517,1,0,0,0,3538,3539,1,0,0,0,3539,3537,1,0,0,
        0,3539,3540,1,0,0,0,3540,3543,1,0,0,0,3541,3542,5,1060,0,0,3542,
        3544,3,306,153,0,3543,3541,1,0,0,0,3543,3544,1,0,0,0,3544,3545,1,
        0,0,0,3545,3546,5,1193,0,0,3546,3548,1,0,0,0,3547,3501,1,0,0,0,3548,
        3551,1,0,0,0,3549,3547,1,0,0,0,3549,3550,1,0,0,0,3550,3553,1,0,0,
        0,3551,3549,1,0,0,0,3552,3488,1,0,0,0,3553,3556,1,0,0,0,3554,3552,
        1,0,0,0,3554,3555,1,0,0,0,3555,3573,1,0,0,0,3556,3554,1,0,0,0,3557,
        3559,5,1194,0,0,3558,3557,1,0,0,0,3558,3559,1,0,0,0,3559,3560,1,
        0,0,0,3560,3561,5,280,0,0,3561,3565,5,311,0,0,3562,3563,3,1208,604,
        0,3563,3564,5,1187,0,0,3564,3566,1,0,0,0,3565,3562,1,0,0,0,3565,
        3566,1,0,0,0,3566,3567,1,0,0,0,3567,3568,3,1208,604,0,3568,3569,
        5,1187,0,0,3569,3570,3,1208,604,0,3570,3572,1,0,0,0,3571,3558,1,
        0,0,0,3572,3575,1,0,0,0,3573,3571,1,0,0,0,3573,3574,1,0,0,0,3574,
        3617,1,0,0,0,3575,3573,1,0,0,0,3576,3577,5,11,0,0,3577,3581,5,973,
        0,0,3578,3579,3,1208,604,0,3579,3580,5,1187,0,0,3580,3582,1,0,0,
        0,3581,3578,1,0,0,0,3581,3582,1,0,0,0,3582,3583,1,0,0,0,3583,3584,
        3,1208,604,0,3584,3585,5,1187,0,0,3585,3586,3,1208,604,0,3586,3612,
        1,0,0,0,3587,3588,5,1192,0,0,3588,3604,5,887,0,0,3589,3591,5,1194,
        0,0,3590,3589,1,0,0,0,3590,3591,1,0,0,0,3591,3592,1,0,0,0,3592,3593,
        3,1208,604,0,3593,3602,5,1174,0,0,3594,3596,5,1192,0,0,3595,3594,
        1,0,0,0,3595,3596,1,0,0,0,3596,3597,1,0,0,0,3597,3599,5,1168,0,0,
        3598,3600,5,1193,0,0,3599,3598,1,0,0,0,3599,3600,1,0,0,0,3600,3603,
        1,0,0,0,3601,3603,5,1170,0,0,3602,3595,1,0,0,0,3602,3601,1,0,0,0,
        3603,3605,1,0,0,0,3604,3590,1,0,0,0,3605,3606,1,0,0,0,3606,3604,
        1,0,0,0,3606,3607,1,0,0,0,3607,3608,1,0,0,0,3608,3609,5,1193,0,0,
        3609,3611,1,0,0,0,3610,3587,1,0,0,0,3611,3614,1,0,0,0,3612,3610,
        1,0,0,0,3612,3613,1,0,0,0,3613,3616,1,0,0,0,3614,3612,1,0,0,0,3615,
        3576,1,0,0,0,3616,3619,1,0,0,0,3617,3615,1,0,0,0,3617,3618,1,0,0,
        0,3618,3633,1,0,0,0,3619,3617,1,0,0,0,3620,3621,5,280,0,0,3621,3625,
        5,973,0,0,3622,3623,3,1208,604,0,3623,3624,5,1187,0,0,3624,3626,
        1,0,0,0,3625,3622,1,0,0,0,3625,3626,1,0,0,0,3626,3627,1,0,0,0,3627,
        3628,3,1208,604,0,3628,3629,5,1187,0,0,3629,3630,3,1208,604,0,3630,
        3632,1,0,0,0,3631,3620,1,0,0,0,3632,3635,1,0,0,0,3633,3631,1,0,0,
        0,3633,3634,1,0,0,0,3634,3701,1,0,0,0,3635,3633,1,0,0,0,3636,3637,
        5,1063,0,0,3637,3645,5,1192,0,0,3638,3640,5,1194,0,0,3639,3638,1,
        0,0,0,3639,3640,1,0,0,0,3640,3641,1,0,0,0,3641,3642,5,550,0,0,3642,
        3643,5,1174,0,0,3643,3644,5,1168,0,0,3644,3646,7,32,0,0,3645,3639,
        1,0,0,0,3645,3646,1,0,0,0,3646,3653,1,0,0,0,3647,3649,5,1194,0,0,
        3648,3647,1,0,0,0,3648,3649,1,0,0,0,3649,3650,1,0,0,0,3650,3651,
        5,313,0,0,3651,3652,5,1174,0,0,3652,3654,7,33,0,0,3653,3648,1,0,
        0,0,3653,3654,1,0,0,0,3654,3665,1,0,0,0,3655,3657,5,1194,0,0,3656,
        3655,1,0,0,0,3656,3657,1,0,0,0,3657,3658,1,0,0,0,3658,3659,5,544,
        0,0,3659,3663,5,1174,0,0,3660,3661,5,1168,0,0,3661,3664,5,858,0,
        0,3662,3664,5,451,0,0,3663,3660,1,0,0,0,3663,3662,1,0,0,0,3664,3666,
        1,0,0,0,3665,3656,1,0,0,0,3665,3666,1,0,0,0,3666,3674,1,0,0,0,3667,
        3669,5,1194,0,0,3668,3667,1,0,0,0,3668,3669,1,0,0,0,3669,3670,1,
        0,0,0,3670,3671,5,547,0,0,3671,3672,5,1174,0,0,3672,3673,5,1168,
        0,0,3673,3675,7,32,0,0,3674,3668,1,0,0,0,3674,3675,1,0,0,0,3675,
        3682,1,0,0,0,3676,3678,5,1194,0,0,3677,3676,1,0,0,0,3677,3678,1,
        0,0,0,3678,3679,1,0,0,0,3679,3680,5,563,0,0,3680,3681,5,1174,0,0,
        3681,3683,7,34,0,0,3682,3677,1,0,0,0,3682,3683,1,0,0,0,3683,3690,
        1,0,0,0,3684,3686,5,1194,0,0,3685,3684,1,0,0,0,3685,3686,1,0,0,0,
        3686,3687,1,0,0,0,3687,3688,5,992,0,0,3688,3689,5,1174,0,0,3689,
        3691,7,17,0,0,3690,3685,1,0,0,0,3690,3691,1,0,0,0,3691,3698,1,0,
        0,0,3692,3694,5,1194,0,0,3693,3692,1,0,0,0,3693,3694,1,0,0,0,3694,
        3695,1,0,0,0,3695,3696,5,927,0,0,3696,3697,5,1174,0,0,3697,3699,
        7,17,0,0,3698,3693,1,0,0,0,3698,3699,1,0,0,0,3699,3700,1,0,0,0,3700,
        3702,5,1193,0,0,3701,3636,1,0,0,0,3701,3702,1,0,0,0,3702,3706,1,
        0,0,0,3703,3704,5,929,0,0,3704,3705,5,1174,0,0,3705,3707,7,35,0,
        0,3706,3703,1,0,0,0,3706,3707,1,0,0,0,3707,305,1,0,0,0,3708,3710,
        5,1194,0,0,3709,3708,1,0,0,0,3709,3710,1,0,0,0,3710,3712,1,0,0,0,
        3711,3713,7,36,0,0,3712,3711,1,0,0,0,3712,3713,1,0,0,0,3713,3715,
        1,0,0,0,3714,3716,5,614,0,0,3715,3714,1,0,0,0,3715,3716,1,0,0,0,
        3716,3722,1,0,0,0,3717,3723,3,308,154,0,3718,3719,5,1192,0,0,3719,
        3720,3,306,153,0,3720,3721,5,1193,0,0,3721,3723,1,0,0,0,3722,3717,
        1,0,0,0,3722,3718,1,0,0,0,3723,3725,1,0,0,0,3724,3709,1,0,0,0,3725,
        3726,1,0,0,0,3726,3724,1,0,0,0,3726,3727,1,0,0,0,3727,307,1,0,0,
        0,3728,3734,3,310,155,0,3729,3730,5,1192,0,0,3730,3731,3,306,153,
        0,3731,3732,5,1193,0,0,3732,3734,1,0,0,0,3733,3728,1,0,0,0,3733,
        3729,1,0,0,0,3734,309,1,0,0,0,3735,3764,3,1208,604,0,3736,3747,3,
        1208,604,0,3737,3738,3,1208,604,0,3738,3739,5,1187,0,0,3739,3741,
        1,0,0,0,3740,3737,1,0,0,0,3740,3741,1,0,0,0,3741,3742,1,0,0,0,3742,
        3743,3,1208,604,0,3743,3744,5,1187,0,0,3744,3745,3,1208,604,0,3745,
        3747,1,0,0,0,3746,3736,1,0,0,0,3746,3740,1,0,0,0,3747,3759,1,0,0,
        0,3748,3760,5,1174,0,0,3749,3750,5,1176,0,0,3750,3760,5,1175,0,0,
        3751,3752,5,1177,0,0,3752,3760,5,1174,0,0,3753,3760,5,1175,0,0,3754,
        3755,5,1175,0,0,3755,3760,5,1174,0,0,3756,3760,5,1176,0,0,3757,3758,
        5,1176,0,0,3758,3760,5,1174,0,0,3759,3748,1,0,0,0,3759,3749,1,0,
        0,0,3759,3751,1,0,0,0,3759,3753,1,0,0,0,3759,3754,1,0,0,0,3759,3756,
        1,0,0,0,3759,3757,1,0,0,0,3760,3761,1,0,0,0,3761,3762,7,31,0,0,3762,
        3764,1,0,0,0,3763,3735,1,0,0,0,3763,3746,1,0,0,0,3764,3792,1,0,0,
        0,3765,3766,3,1208,604,0,3766,3767,5,1187,0,0,3767,3769,1,0,0,0,
        3768,3765,1,0,0,0,3768,3769,1,0,0,0,3769,3770,1,0,0,0,3770,3771,
        3,1208,604,0,3771,3772,5,1187,0,0,3772,3773,3,1208,604,0,3773,3787,
        5,1192,0,0,3774,3788,3,1208,604,0,3775,3776,3,1208,604,0,3776,3777,
        5,1187,0,0,3777,3779,1,0,0,0,3778,3775,1,0,0,0,3778,3779,1,0,0,0,
        3779,3780,1,0,0,0,3780,3781,3,1208,604,0,3781,3782,5,1187,0,0,3782,
        3783,3,1208,604,0,3783,3784,1,0,0,0,3784,3785,5,1194,0,0,3785,3786,
        7,31,0,0,3786,3788,1,0,0,0,3787,3774,1,0,0,0,3787,3778,1,0,0,0,3788,
        3789,1,0,0,0,3789,3790,5,1193,0,0,3790,3792,1,0,0,0,3791,3763,1,
        0,0,0,3791,3768,1,0,0,0,3792,311,1,0,0,0,3793,3794,5,35,0,0,3794,
        3795,5,329,0,0,3795,3796,5,216,0,0,3796,3797,5,913,0,0,3797,3798,
        3,1208,604,0,3798,3814,5,887,0,0,3799,3800,5,520,0,0,3800,3801,5,
        1174,0,0,3801,3803,5,1170,0,0,3802,3804,5,1194,0,0,3803,3802,1,0,
        0,0,3803,3804,1,0,0,0,3804,3815,1,0,0,0,3805,3806,5,802,0,0,3806,
        3807,5,1174,0,0,3807,3809,5,1170,0,0,3808,3810,5,1194,0,0,3809,3808,
        1,0,0,0,3809,3810,1,0,0,0,3810,3815,1,0,0,0,3811,3812,5,200,0,0,
        3812,3813,5,1174,0,0,3813,3815,3,1208,604,0,3814,3799,1,0,0,0,3814,
        3805,1,0,0,0,3814,3811,1,0,0,0,3815,3816,1,0,0,0,3816,3814,1,0,0,
        0,3816,3817,1,0,0,0,3817,3841,1,0,0,0,3818,3819,5,35,0,0,3819,3820,
        5,329,0,0,3820,3821,5,216,0,0,3821,3822,5,913,0,0,3822,3823,3,1208,
        604,0,3823,3824,5,1063,0,0,3824,3825,5,1192,0,0,3825,3826,5,1010,
        0,0,3826,3827,5,1174,0,0,3827,3828,5,97,0,0,3828,3829,5,1194,0,0,
        3829,3830,5,520,0,0,3830,3831,5,1174,0,0,3831,3836,5,1170,0,0,3832,
        3833,5,1194,0,0,3833,3834,5,200,0,0,3834,3835,5,1174,0,0,3835,3837,
        3,1208,604,0,3836,3832,1,0,0,0,3836,3837,1,0,0,0,3837,3838,1,0,0,
        0,3838,3839,5,1193,0,0,3839,3841,1,0,0,0,3840,3793,1,0,0,0,3840,
        3818,1,0,0,0,3841,313,1,0,0,0,3842,3843,5,35,0,0,3843,3844,5,329,
        0,0,3844,3845,5,505,0,0,3845,3848,3,1208,604,0,3846,3847,5,68,0,
        0,3847,3849,3,1208,604,0,3848,3846,1,0,0,0,3848,3849,1,0,0,0,3849,
        3850,1,0,0,0,3850,3851,7,37,0,0,3851,3852,5,1192,0,0,3852,3853,5,
        181,0,0,3853,3857,5,1174,0,0,3854,3858,5,1170,0,0,3855,3858,5,1171,
        0,0,3856,3858,5,608,0,0,3857,3854,1,0,0,0,3857,3855,1,0,0,0,3857,
        3856,1,0,0,0,3858,3859,1,0,0,0,3859,3860,5,1194,0,0,3860,3861,5,
        709,0,0,3861,3863,5,1174,0,0,3862,3864,7,38,0,0,3863,3862,1,0,0,
        0,3863,3864,1,0,0,0,3864,3865,1,0,0,0,3865,3866,5,1193,0,0,3866,
        3867,1,0,0,0,3867,3877,5,1063,0,0,3868,3870,5,1194,0,0,3869,3868,
        1,0,0,0,3869,3870,1,0,0,0,3870,3871,1,0,0,0,3871,3872,5,497,0,0,
        3872,3873,5,1174,0,0,3873,3878,7,39,0,0,3874,3875,5,225,0,0,3875,
        3876,5,1174,0,0,3876,3878,3,1208,604,0,3877,3869,1,0,0,0,3877,3874,
        1,0,0,0,3878,3879,1,0,0,0,3879,3877,1,0,0,0,3879,3880,1,0,0,0,3880,
        3881,1,0,0,0,3881,3882,5,1193,0,0,3882,315,1,0,0,0,3883,3884,5,197,
        0,0,3884,3885,5,329,0,0,3885,3886,5,505,0,0,3886,3889,3,1208,604,
        0,3887,3888,5,68,0,0,3888,3890,3,1208,604,0,3889,3887,1,0,0,0,3889,
        3890,1,0,0,0,3890,3891,1,0,0,0,3891,3893,5,378,0,0,3892,3894,5,1194,
        0,0,3893,3892,1,0,0,0,3893,3894,1,0,0,0,3894,3896,1,0,0,0,3895,3897,
        5,1192,0,0,3896,3895,1,0,0,0,3896,3897,1,0,0,0,3897,3900,1,0,0,0,
        3898,3899,5,181,0,0,3899,3901,5,1174,0,0,3900,3898,1,0,0,0,3900,
        3901,1,0,0,0,3901,3905,1,0,0,0,3902,3906,5,1170,0,0,3903,3906,5,
        1171,0,0,3904,3906,5,608,0,0,3905,3902,1,0,0,0,3905,3903,1,0,0,0,
        3905,3904,1,0,0,0,3906,3914,1,0,0,0,3907,3908,5,1194,0,0,3908,3909,
        5,709,0,0,3909,3911,5,1174,0,0,3910,3912,7,38,0,0,3911,3910,1,0,
        0,0,3911,3912,1,0,0,0,3912,3913,1,0,0,0,3913,3915,5,1193,0,0,3914,
        3907,1,0,0,0,3914,3915,1,0,0,0,3915,3931,1,0,0,0,3916,3926,5,1063,
        0,0,3917,3919,5,1194,0,0,3918,3917,1,0,0,0,3918,3919,1,0,0,0,3919,
        3920,1,0,0,0,3920,3921,5,497,0,0,3921,3922,5,1174,0,0,3922,3927,
        7,39,0,0,3923,3924,5,225,0,0,3924,3925,5,1174,0,0,3925,3927,3,1208,
        604,0,3926,3918,1,0,0,0,3926,3923,1,0,0,0,3927,3928,1,0,0,0,3928,
        3926,1,0,0,0,3928,3929,1,0,0,0,3929,3930,1,0,0,0,3930,3932,5,1193,
        0,0,3931,3916,1,0,0,0,3931,3932,1,0,0,0,3932,317,1,0,0,0,3933,3934,
        5,35,0,0,3934,3935,5,329,0,0,3935,3936,5,800,0,0,3936,3939,5,712,
        0,0,3937,3940,3,1208,604,0,3938,3940,5,245,0,0,3939,3937,1,0,0,0,
        3939,3938,1,0,0,0,3940,3941,1,0,0,0,3941,3942,5,1063,0,0,3942,3943,
        5,1192,0,0,3943,3944,5,543,0,0,3944,3945,5,1174,0,0,3945,3983,5,
        1168,0,0,3946,3948,5,1194,0,0,3947,3946,1,0,0,0,3947,3948,1,0,0,
        0,3948,3949,1,0,0,0,3949,3950,5,18,0,0,3950,3951,5,196,0,0,3951,
        3965,5,1174,0,0,3952,3966,5,69,0,0,3953,3955,5,1194,0,0,3954,3953,
        1,0,0,0,3954,3955,1,0,0,0,3955,3956,1,0,0,0,3956,3957,5,1168,0,0,
        3957,3958,5,986,0,0,3958,3962,5,1168,0,0,3959,3960,5,1194,0,0,3960,
        3962,5,1168,0,0,3961,3954,1,0,0,0,3961,3959,1,0,0,0,3962,3963,1,
        0,0,0,3963,3961,1,0,0,0,3963,3964,1,0,0,0,3964,3966,1,0,0,0,3965,
        3952,1,0,0,0,3965,3961,1,0,0,0,3966,3984,1,0,0,0,3967,3968,5,632,
        0,0,3968,3979,5,1174,0,0,3969,3971,5,1194,0,0,3970,3969,1,0,0,0,
        3970,3971,1,0,0,0,3971,3972,1,0,0,0,3972,3973,5,1168,0,0,3973,3974,
        5,986,0,0,3974,3980,5,1168,0,0,3975,3977,5,1194,0,0,3976,3975,1,
        0,0,0,3976,3977,1,0,0,0,3977,3978,1,0,0,0,3978,3980,5,1168,0,0,3979,
        3970,1,0,0,0,3979,3976,1,0,0,0,3980,3981,1,0,0,0,3981,3979,1,0,0,
        0,3981,3982,1,0,0,0,3982,3984,1,0,0,0,3983,3947,1,0,0,0,3983,3967,
        1,0,0,0,3984,3991,1,0,0,0,3985,3987,5,1194,0,0,3986,3985,1,0,0,0,
        3986,3987,1,0,0,0,3987,3988,1,0,0,0,3988,3989,5,551,0,0,3989,3990,
        5,1174,0,0,3990,3992,5,1168,0,0,3991,3986,1,0,0,0,3991,3992,1,0,
        0,0,3992,3999,1,0,0,0,3993,3995,5,1194,0,0,3994,3993,1,0,0,0,3994,
        3995,1,0,0,0,3995,3996,1,0,0,0,3996,3997,5,553,0,0,3997,3998,5,1174,
        0,0,3998,4000,5,1168,0,0,3999,3994,1,0,0,0,3999,4000,1,0,0,0,4000,
        4001,1,0,0,0,4001,4002,5,1193,0,0,4002,319,1,0,0,0,4003,4004,5,197,
        0,0,4004,4005,5,329,0,0,4005,4006,5,800,0,0,4006,4007,5,712,0,0,
        4007,4008,3,1208,604,0,4008,4009,5,1063,0,0,4009,4010,5,1192,0,0,
        4010,4011,5,543,0,0,4011,4012,5,1174,0,0,4012,4050,5,1168,0,0,4013,
        4015,5,1194,0,0,4014,4013,1,0,0,0,4014,4015,1,0,0,0,4015,4016,1,
        0,0,0,4016,4017,5,18,0,0,4017,4018,5,196,0,0,4018,4032,5,1174,0,
        0,4019,4033,5,69,0,0,4020,4022,5,1194,0,0,4021,4020,1,0,0,0,4021,
        4022,1,0,0,0,4022,4023,1,0,0,0,4023,4024,5,1168,0,0,4024,4025,5,
        986,0,0,4025,4029,5,1168,0,0,4026,4027,5,1194,0,0,4027,4029,5,1168,
        0,0,4028,4021,1,0,0,0,4028,4026,1,0,0,0,4029,4030,1,0,0,0,4030,4028,
        1,0,0,0,4030,4031,1,0,0,0,4031,4033,1,0,0,0,4032,4019,1,0,0,0,4032,
        4028,1,0,0,0,4033,4051,1,0,0,0,4034,4035,5,632,0,0,4035,4046,5,1174,
        0,0,4036,4038,5,1194,0,0,4037,4036,1,0,0,0,4037,4038,1,0,0,0,4038,
        4039,1,0,0,0,4039,4040,5,1168,0,0,4040,4041,5,986,0,0,4041,4047,
        5,1168,0,0,4042,4044,5,1194,0,0,4043,4042,1,0,0,0,4043,4044,1,0,
        0,0,4044,4045,1,0,0,0,4045,4047,5,1168,0,0,4046,4037,1,0,0,0,4046,
        4043,1,0,0,0,4047,4048,1,0,0,0,4048,4046,1,0,0,0,4048,4049,1,0,0,
        0,4049,4051,1,0,0,0,4050,4014,1,0,0,0,4050,4034,1,0,0,0,4051,4058,
        1,0,0,0,4052,4054,5,1194,0,0,4053,4052,1,0,0,0,4053,4054,1,0,0,0,
        4054,4055,1,0,0,0,4055,4056,5,551,0,0,4056,4057,5,1174,0,0,4057,
        4059,5,1168,0,0,4058,4053,1,0,0,0,4058,4059,1,0,0,0,4059,4066,1,
        0,0,0,4060,4062,5,1194,0,0,4061,4060,1,0,0,0,4061,4062,1,0,0,0,4062,
        4063,1,0,0,0,4063,4064,5,553,0,0,4064,4065,5,1174,0,0,4065,4067,
        5,1168,0,0,4066,4061,1,0,0,0,4066,4067,1,0,0,0,4067,4068,1,0,0,0,
        4068,4069,5,1193,0,0,4069,321,1,0,0,0,4070,4071,5,35,0,0,4071,4072,
        5,381,0,0,4072,4073,5,118,0,0,4073,4084,3,1208,604,0,4074,4079,5,
        767,0,0,4075,4076,5,1063,0,0,4076,4077,5,6,0,0,4077,4078,5,1174,
        0,0,4078,4080,7,17,0,0,4079,4075,1,0,0,0,4079,4080,1,0,0,0,4080,
        4085,1,0,0,0,4081,4085,5,782,0,0,4082,4083,5,56,0,0,4083,4085,5,
        243,0,0,4084,4074,1,0,0,0,4084,4081,1,0,0,0,4084,4082,1,0,0,0,4085,
        323,1,0,0,0,4086,4087,5,197,0,0,4087,4088,5,381,0,0,4088,4089,5,
        118,0,0,4089,4093,3,1208,604,0,4090,4091,5,649,0,0,4091,4092,5,342,
        0,0,4092,4094,3,1208,604,0,4093,4090,1,0,0,0,4093,4094,1,0,0,0,4094,
        4098,1,0,0,0,4095,4096,5,442,0,0,4096,4097,5,691,0,0,4097,4099,5,
        1170,0,0,4098,4095,1,0,0,0,4098,4099,1,0,0,0,4099,4104,1,0,0,0,4100,
        4101,5,1063,0,0,4101,4102,5,6,0,0,4102,4103,5,1174,0,0,4103,4105,
        7,17,0,0,4104,4100,1,0,0,0,4104,4105,1,0,0,0,4105,4108,1,0,0,0,4106,
        4107,5,56,0,0,4107,4109,5,243,0,0,4108,4106,1,0,0,0,4108,4109,1,
        0,0,0,4109,4112,1,0,0,0,4110,4111,5,68,0,0,4111,4113,3,1208,604,
        0,4112,4110,1,0,0,0,4112,4113,1,0,0,0,4113,325,1,0,0,0,4114,4115,
        5,35,0,0,4115,4116,5,381,0,0,4116,4117,5,942,0,0,4117,4131,3,1208,
        604,0,4118,4119,5,11,0,0,4119,4120,5,1170,0,0,4120,4121,5,497,0,
        0,4121,4132,7,40,0,0,4122,4129,5,280,0,0,4123,4124,5,1170,0,0,4124,
        4125,5,497,0,0,4125,4130,7,40,0,0,4126,4127,5,22,0,0,4127,4130,7,
        40,0,0,4128,4130,5,22,0,0,4129,4123,1,0,0,0,4129,4126,1,0,0,0,4129,
        4128,1,0,0,0,4130,4132,1,0,0,0,4131,4118,1,0,0,0,4131,4122,1,0,0,
        0,4132,327,1,0,0,0,4133,4134,5,197,0,0,4134,4135,5,381,0,0,4135,
        4136,5,942,0,0,4136,4148,3,1208,604,0,4137,4146,5,378,0,0,4138,4139,
        3,1208,604,0,4139,4140,5,1187,0,0,4140,4142,1,0,0,0,4141,4138,1,
        0,0,0,4141,4142,1,0,0,0,4142,4143,1,0,0,0,4143,4147,3,1208,604,0,
        4144,4145,5,964,0,0,4145,4147,5,942,0,0,4146,4141,1,0,0,0,4146,4144,
        1,0,0,0,4147,4149,1,0,0,0,4148,4137,1,0,0,0,4148,4149,1,0,0,0,4149,
        4152,1,0,0,0,4150,4151,5,68,0,0,4151,4153,3,1208,604,0,4152,4150,
        1,0,0,0,4152,4153,1,0,0,0,4153,329,1,0,0,0,4154,4155,5,35,0,0,4155,
        4156,5,524,0,0,4156,4224,3,1208,604,0,4157,4159,7,25,0,0,4158,4157,
        1,0,0,0,4158,4159,1,0,0,0,4159,4225,1,0,0,0,4160,4174,5,1063,0,0,
        4161,4162,5,690,0,0,4162,4166,5,1174,0,0,4163,4167,5,1170,0,0,4164,
        4165,5,1171,0,0,4165,4167,5,409,0,0,4166,4163,1,0,0,0,4166,4164,
        1,0,0,0,4167,4171,1,0,0,0,4168,4170,7,41,0,0,4169,4168,1,0,0,0,4170,
        4173,1,0,0,0,4171,4169,1,0,0,0,4171,4172,1,0,0,0,4172,4175,1,0,0,
        0,4173,4171,1,0,0,0,4174,4161,1,0,0,0,4174,4175,1,0,0,0,4175,4185,
        1,0,0,0,4176,4177,5,648,0,0,4177,4178,5,1174,0,0,4178,4182,5,1170,
        0,0,4179,4181,7,41,0,0,4180,4179,1,0,0,0,4181,4184,1,0,0,0,4182,
        4180,1,0,0,0,4182,4183,1,0,0,0,4183,4186,1,0,0,0,4184,4182,1,0,0,
        0,4185,4176,1,0,0,0,4185,4186,1,0,0,0,4186,4190,1,0,0,0,4187,4188,
        5,244,0,0,4188,4189,5,1174,0,0,4189,4191,3,1208,604,0,4190,4187,
        1,0,0,0,4190,4191,1,0,0,0,4191,4195,1,0,0,0,4192,4193,5,247,0,0,
        4193,4194,5,1174,0,0,4194,4196,3,1208,604,0,4195,4192,1,0,0,0,4195,
        4196,1,0,0,0,4196,4200,1,0,0,0,4197,4198,5,584,0,0,4198,4199,5,1174,
        0,0,4199,4201,3,1208,604,0,4200,4197,1,0,0,0,4200,4201,1,0,0,0,4201,
        4205,1,0,0,0,4202,4203,5,142,0,0,4203,4204,5,1174,0,0,4204,4206,
        7,17,0,0,4205,4202,1,0,0,0,4205,4206,1,0,0,0,4206,4210,1,0,0,0,4207,
        4208,5,141,0,0,4208,4209,5,1174,0,0,4209,4211,7,17,0,0,4210,4207,
        1,0,0,0,4210,4211,1,0,0,0,4211,4215,1,0,0,0,4212,4213,5,200,0,0,
        4213,4214,5,1174,0,0,4214,4216,3,1208,604,0,4215,4212,1,0,0,0,4215,
        4216,1,0,0,0,4216,4219,1,0,0,0,4217,4218,5,596,0,0,4218,4220,5,200,
        0,0,4219,4217,1,0,0,0,4219,4220,1,0,0,0,4220,4225,1,0,0,0,4221,4222,
        7,23,0,0,4222,4223,5,200,0,0,4223,4225,3,1208,604,0,4224,4158,1,
        0,0,0,4224,4160,1,0,0,0,4224,4221,1,0,0,0,4225,331,1,0,0,0,4226,
        4227,5,197,0,0,4227,4228,5,524,0,0,4228,4319,3,1208,604,0,4229,4243,
        5,1063,0,0,4230,4231,5,690,0,0,4231,4235,5,1174,0,0,4232,4236,5,
        1170,0,0,4233,4234,5,1171,0,0,4234,4236,5,409,0,0,4235,4232,1,0,
        0,0,4235,4233,1,0,0,0,4236,4240,1,0,0,0,4237,4239,7,41,0,0,4238,
        4237,1,0,0,0,4239,4242,1,0,0,0,4240,4238,1,0,0,0,4240,4241,1,0,0,
        0,4241,4244,1,0,0,0,4242,4240,1,0,0,0,4243,4230,1,0,0,0,4243,4244,
        1,0,0,0,4244,4251,1,0,0,0,4245,4247,5,1194,0,0,4246,4245,1,0,0,0,
        4246,4247,1,0,0,0,4247,4248,1,0,0,0,4248,4249,5,901,0,0,4249,4250,
        5,1174,0,0,4250,4252,5,1171,0,0,4251,4246,1,0,0,0,4251,4252,1,0,
        0,0,4252,4259,1,0,0,0,4253,4255,5,1194,0,0,4254,4253,1,0,0,0,4254,
        4255,1,0,0,0,4255,4256,1,0,0,0,4256,4257,5,244,0,0,4257,4258,5,1174,
        0,0,4258,4260,3,1208,604,0,4259,4254,1,0,0,0,4259,4260,1,0,0,0,4260,
        4267,1,0,0,0,4261,4263,5,1194,0,0,4262,4261,1,0,0,0,4262,4263,1,
        0,0,0,4263,4264,1,0,0,0,4264,4265,5,247,0,0,4265,4266,5,1174,0,0,
        4266,4268,3,1208,604,0,4267,4262,1,0,0,0,4267,4268,1,0,0,0,4268,
        4275,1,0,0,0,4269,4271,5,1194,0,0,4270,4269,1,0,0,0,4270,4271,1,
        0,0,0,4271,4272,1,0,0,0,4272,4273,5,141,0,0,4273,4274,5,1174,0,0,
        4274,4276,7,17,0,0,4275,4270,1,0,0,0,4275,4276,1,0,0,0,4276,4283,
        1,0,0,0,4277,4279,5,1194,0,0,4278,4277,1,0,0,0,4278,4279,1,0,0,0,
        4279,4280,1,0,0,0,4280,4281,5,142,0,0,4281,4282,5,1174,0,0,4282,
        4284,7,17,0,0,4283,4278,1,0,0,0,4283,4284,1,0,0,0,4284,4291,1,0,
        0,0,4285,4287,5,1194,0,0,4286,4285,1,0,0,0,4286,4287,1,0,0,0,4287,
        4288,1,0,0,0,4288,4289,5,200,0,0,4289,4290,5,1174,0,0,4290,4292,
        3,1208,604,0,4291,4286,1,0,0,0,4291,4292,1,0,0,0,4292,4320,1,0,0,
        0,4293,4317,5,378,0,0,4294,4295,5,1062,0,0,4295,4302,5,1063,0,0,
        4296,4298,5,1194,0,0,4297,4296,1,0,0,0,4297,4298,1,0,0,0,4298,4299,
        1,0,0,0,4299,4300,5,244,0,0,4300,4301,5,1174,0,0,4301,4303,3,1208,
        604,0,4302,4297,1,0,0,0,4302,4303,1,0,0,0,4303,4310,1,0,0,0,4304,
        4306,5,1194,0,0,4305,4304,1,0,0,0,4305,4306,1,0,0,0,4306,4307,1,
        0,0,0,4307,4308,5,247,0,0,4308,4309,5,1174,0,0,4309,4311,5,1170,
        0,0,4310,4305,1,0,0,0,4310,4311,1,0,0,0,4311,4318,1,0,0,0,4312,4313,
        5,121,0,0,4313,4318,3,1208,604,0,4314,4315,5,61,0,0,4315,4316,5,
        489,0,0,4316,4318,3,1208,604,0,4317,4294,1,0,0,0,4317,4312,1,0,0,
        0,4317,4314,1,0,0,0,4318,4320,1,0,0,0,4319,4229,1,0,0,0,4319,4293,
        1,0,0,0,4320,333,1,0,0,0,4321,4322,5,35,0,0,4322,4323,5,524,0,0,
        4323,4341,3,1208,604,0,4324,4326,7,25,0,0,4325,4324,1,0,0,0,4325,
        4326,1,0,0,0,4326,4342,1,0,0,0,4327,4339,5,1063,0,0,4328,4329,5,
        690,0,0,4329,4330,5,1174,0,0,4330,4334,5,1170,0,0,4331,4332,5,648,
        0,0,4332,4333,5,1174,0,0,4333,4335,5,1170,0,0,4334,4331,1,0,0,0,
        4334,4335,1,0,0,0,4335,4340,1,0,0,0,4336,4337,5,584,0,0,4337,4338,
        5,1174,0,0,4338,4340,3,1208,604,0,4339,4328,1,0,0,0,4339,4336,1,
        0,0,0,4340,4342,1,0,0,0,4341,4325,1,0,0,0,4341,4327,1,0,0,0,4342,
        335,1,0,0,0,4343,4344,5,197,0,0,4344,4345,5,524,0,0,4345,4346,3,
        1208,604,0,4346,4347,5,1063,0,0,4347,4348,5,690,0,0,4348,4349,5,
        1174,0,0,4349,4353,5,1170,0,0,4350,4351,5,901,0,0,4351,4352,5,1174,
        0,0,4352,4354,5,1171,0,0,4353,4350,1,0,0,0,4353,4354,1,0,0,0,4354,
        337,1,0,0,0,4355,4356,5,35,0,0,4356,4357,5,524,0,0,4357,4381,3,1208,
        604,0,4358,4360,7,25,0,0,4359,4358,1,0,0,0,4359,4360,1,0,0,0,4360,
        4382,1,0,0,0,4361,4379,5,1063,0,0,4362,4363,5,690,0,0,4363,4364,
        5,1174,0,0,4364,4374,5,1170,0,0,4365,4366,5,648,0,0,4366,4367,5,
        1174,0,0,4367,4371,5,1170,0,0,4368,4370,7,41,0,0,4369,4368,1,0,0,
        0,4370,4373,1,0,0,0,4371,4369,1,0,0,0,4371,4372,1,0,0,0,4372,4375,
        1,0,0,0,4373,4371,1,0,0,0,4374,4365,1,0,0,0,4374,4375,1,0,0,0,4375,
        4380,1,0,0,0,4376,4377,5,584,0,0,4377,4378,5,1174,0,0,4378,4380,
        3,1208,604,0,4379,4362,1,0,0,0,4379,4376,1,0,0,0,4380,4382,1,0,0,
        0,4381,4359,1,0,0,0,4381,4361,1,0,0,0,4382,339,1,0,0,0,4383,4384,
        5,197,0,0,4384,4385,5,524,0,0,4385,4402,3,1208,604,0,4386,4387,5,
        1063,0,0,4387,4388,5,690,0,0,4388,4389,5,1174,0,0,4389,4391,5,1170,
        0,0,4390,4392,5,583,0,0,4391,4390,1,0,0,0,4391,4392,1,0,0,0,4392,
        4398,1,0,0,0,4393,4394,5,142,0,0,4394,4396,5,1174,0,0,4395,4397,
        7,17,0,0,4396,4395,1,0,0,0,4396,4397,1,0,0,0,4397,4399,1,0,0,0,4398,
        4393,1,0,0,0,4398,4399,1,0,0,0,4399,4403,1,0,0,0,4400,4401,5,378,
        0,0,4401,4403,5,1062,0,0,4402,4386,1,0,0,0,4402,4400,1,0,0,0,4403,
        341,1,0,0,0,4404,4405,5,35,0,0,4405,4406,5,534,0,0,4406,4428,5,489,
        0,0,4407,4409,5,364,0,0,4408,4407,1,0,0,0,4408,4409,1,0,0,0,4409,
        4410,1,0,0,0,4410,4411,5,774,0,0,4411,4412,5,1063,0,0,4412,4413,
        5,295,0,0,4413,4414,5,110,0,0,4414,4415,5,690,0,0,4415,4416,5,1174,
        0,0,4416,4429,5,1170,0,0,4417,4418,7,23,0,0,4418,4419,5,295,0,0,
        4419,4426,5,110,0,0,4420,4421,5,878,0,0,4421,4422,5,534,0,0,4422,
        4427,5,489,0,0,4423,4424,5,690,0,0,4424,4425,5,1174,0,0,4425,4427,
        5,1170,0,0,4426,4420,1,0,0,0,4426,4423,1,0,0,0,4427,4429,1,0,0,0,
        4428,4408,1,0,0,0,4428,4417,1,0,0,0,4429,343,1,0,0,0,4430,4431,5,
        197,0,0,4431,4432,5,534,0,0,4432,4433,5,489,0,0,4433,4434,5,295,
        0,0,4434,4435,5,110,0,0,4435,4436,5,690,0,0,4436,4437,5,1174,0,0,
        4437,4438,5,1170,0,0,4438,345,1,0,0,0,4439,4440,5,35,0,0,4440,4441,
        5,534,0,0,4441,4469,5,489,0,0,4442,4444,5,364,0,0,4443,4442,1,0,
        0,0,4443,4444,1,0,0,0,4444,4445,1,0,0,0,4445,4446,5,774,0,0,4446,
        4447,5,1063,0,0,4447,4448,5,295,0,0,4448,4449,5,110,0,0,4449,4450,
        5,690,0,0,4450,4451,5,1174,0,0,4451,4470,5,1170,0,0,4452,4453,5,
        11,0,0,4453,4454,5,295,0,0,4454,4461,5,110,0,0,4455,4456,5,878,0,
        0,4456,4457,5,534,0,0,4457,4462,5,489,0,0,4458,4459,5,690,0,0,4459,
        4460,5,1174,0,0,4460,4462,5,1170,0,0,4461,4455,1,0,0,0,4461,4458,
        1,0,0,0,4462,4470,1,0,0,0,4463,4464,5,280,0,0,4464,4465,5,295,0,
        0,4465,4466,5,110,0,0,4466,4467,5,690,0,0,4467,4468,5,1174,0,0,4468,
        4470,5,1170,0,0,4469,4443,1,0,0,0,4469,4452,1,0,0,0,4469,4463,1,
        0,0,0,4470,347,1,0,0,0,4471,4472,5,197,0,0,4472,4473,5,534,0,0,4473,
        4479,5,489,0,0,4474,4475,5,295,0,0,4475,4476,5,110,0,0,4476,4477,
        5,690,0,0,4477,4478,5,1174,0,0,4478,4480,5,1170,0,0,4479,4474,1,
        0,0,0,4479,4480,1,0,0,0,4480,349,1,0,0,0,4481,4482,5,35,0,0,4482,
        4483,5,565,0,0,4483,4484,5,1010,0,0,4484,4485,3,1208,604,0,4485,
        4486,5,1039,0,0,4486,4495,5,1174,0,0,4487,4496,5,608,0,0,4488,4496,
        5,289,0,0,4489,4496,5,1058,0,0,4490,4491,5,1040,0,0,4491,4492,5,
        1063,0,0,4492,4493,5,844,0,0,4493,4494,5,152,0,0,4494,4496,3,1208,
        604,0,4495,4487,1,0,0,0,4495,4488,1,0,0,0,4495,4489,1,0,0,0,4495,
        4490,1,0,0,0,4496,351,1,0,0,0,4497,4498,5,35,0,0,4498,4499,5,687,
        0,0,4499,4500,5,384,0,0,4500,4501,3,1208,604,0,4501,4502,5,1192,
        0,0,4502,4503,5,1193,0,0,4503,4504,7,42,0,0,4504,4505,5,748,0,0,
        4505,4506,5,1192,0,0,4506,4507,5,1168,0,0,4507,4508,5,1193,0,0,4508,
        353,1,0,0,0,4509,4510,5,35,0,0,4510,4511,5,687,0,0,4511,4512,5,848,
        0,0,4512,4513,3,1208,604,0,4513,4514,5,595,0,0,4514,4516,5,1034,
        0,0,4515,4517,3,1208,604,0,4516,4515,1,0,0,0,4516,4517,1,0,0,0,4517,
        355,1,0,0,0,4518,4519,5,35,0,0,4519,4520,5,778,0,0,4520,4521,5,878,
        0,0,4521,4522,5,96,0,0,4522,4523,3,1208,604,0,4523,4527,5,1063,0,
        0,4524,4525,5,1035,0,0,4525,4526,5,1174,0,0,4526,4528,3,1208,604,
        0,4527,4524,1,0,0,0,4527,4528,1,0,0,0,4528,4533,1,0,0,0,4529,4530,
        5,1194,0,0,4530,4531,5,38,0,0,4531,4532,5,1174,0,0,4532,4534,7,17,
        0,0,4533,4529,1,0,0,0,4533,4534,1,0,0,0,4534,357,1,0,0,0,4535,4536,
        5,197,0,0,4536,4537,5,778,0,0,4537,4538,5,878,0,0,4538,4539,5,96,
        0,0,4539,4542,3,1208,604,0,4540,4541,5,68,0,0,4541,4543,3,1208,604,
        0,4542,4540,1,0,0,0,4542,4543,1,0,0,0,4543,4544,1,0,0,0,4544,4545,
        5,986,0,0,4545,4546,5,878,0,0,4546,4547,5,1170,0,0,4547,4551,5,1063,
        0,0,4548,4549,5,1035,0,0,4549,4550,5,1174,0,0,4550,4552,3,1208,604,
        0,4551,4548,1,0,0,0,4551,4552,1,0,0,0,4552,4557,1,0,0,0,4553,4554,
        5,1194,0,0,4554,4555,5,38,0,0,4555,4556,5,1174,0,0,4556,4558,7,17,
        0,0,4557,4553,1,0,0,0,4557,4558,1,0,0,0,4558,359,1,0,0,0,4559,4560,
        5,197,0,0,4560,4561,5,800,0,0,4561,4562,5,712,0,0,4562,4665,3,1208,
        604,0,4563,4564,5,1063,0,0,4564,4571,5,1192,0,0,4565,4567,5,1194,
        0,0,4566,4565,1,0,0,0,4566,4567,1,0,0,0,4567,4568,1,0,0,0,4568,4569,
        5,572,0,0,4569,4570,5,1174,0,0,4570,4572,5,1168,0,0,4571,4566,1,
        0,0,0,4571,4572,1,0,0,0,4572,4579,1,0,0,0,4573,4575,5,1194,0,0,4574,
        4573,1,0,0,0,4574,4575,1,0,0,0,4575,4576,1,0,0,0,4576,4577,5,543,
        0,0,4577,4578,5,1174,0,0,4578,4580,5,1168,0,0,4579,4574,1,0,0,0,
        4579,4580,1,0,0,0,4580,4587,1,0,0,0,4581,4583,5,1194,0,0,4582,4581,
        1,0,0,0,4582,4583,1,0,0,0,4583,4584,1,0,0,0,4584,4585,5,114,0,0,
        4585,4586,5,1174,0,0,4586,4588,5,1168,0,0,4587,4582,1,0,0,0,4587,
        4588,1,0,0,0,4588,4630,1,0,0,0,4589,4591,5,1194,0,0,4590,4589,1,
        0,0,0,4590,4591,1,0,0,0,4591,4592,1,0,0,0,4592,4593,5,18,0,0,4593,
        4594,5,843,0,0,4594,4628,5,1174,0,0,4595,4629,5,69,0,0,4596,4606,
        5,1192,0,0,4597,4599,5,1194,0,0,4598,4597,1,0,0,0,4598,4599,1,0,
        0,0,4599,4604,1,0,0,0,4600,4605,5,1168,0,0,4601,4602,5,1168,0,0,
        4602,4603,5,986,0,0,4603,4605,5,1168,0,0,4604,4600,1,0,0,0,4604,
        4601,1,0,0,0,4605,4607,1,0,0,0,4606,4598,1,0,0,0,4607,4608,1,0,0,
        0,4608,4606,1,0,0,0,4608,4609,1,0,0,0,4609,4610,1,0,0,0,4610,4629,
        5,1193,0,0,4611,4612,5,632,0,0,4612,4613,5,1174,0,0,4613,4623,5,
        1192,0,0,4614,4616,5,1194,0,0,4615,4614,1,0,0,0,4615,4616,1,0,0,
        0,4616,4621,1,0,0,0,4617,4622,5,1168,0,0,4618,4619,5,1168,0,0,4619,
        4620,5,986,0,0,4620,4622,5,1168,0,0,4621,4617,1,0,0,0,4621,4618,
        1,0,0,0,4622,4624,1,0,0,0,4623,4615,1,0,0,0,4624,4625,1,0,0,0,4625,
        4623,1,0,0,0,4625,4626,1,0,0,0,4626,4627,1,0,0,0,4627,4629,5,1193,
        0,0,4628,4595,1,0,0,0,4628,4596,1,0,0,0,4628,4611,1,0,0,0,4629,4631,
        1,0,0,0,4630,4590,1,0,0,0,4630,4631,1,0,0,0,4631,4638,1,0,0,0,4632,
        4634,5,1194,0,0,4633,4632,1,0,0,0,4633,4634,1,0,0,0,4634,4635,1,
        0,0,0,4635,4636,5,574,0,0,4636,4637,5,1174,0,0,4637,4639,5,1168,
        0,0,4638,4633,1,0,0,0,4638,4639,1,0,0,0,4639,4646,1,0,0,0,4640,4642,
        5,1194,0,0,4641,4640,1,0,0,0,4641,4642,1,0,0,0,4642,4643,1,0,0,0,
        4643,4644,5,551,0,0,4644,4645,5,1174,0,0,4645,4647,5,1168,0,0,4646,
        4641,1,0,0,0,4646,4647,1,0,0,0,4647,4654,1,0,0,0,4648,4650,5,1194,
        0,0,4649,4648,1,0,0,0,4649,4650,1,0,0,0,4650,4651,1,0,0,0,4651,4652,
        5,573,0,0,4652,4653,5,1174,0,0,4653,4655,5,1168,0,0,4654,4649,1,
        0,0,0,4654,4655,1,0,0,0,4655,4662,1,0,0,0,4656,4658,5,1194,0,0,4657,
        4656,1,0,0,0,4657,4658,1,0,0,0,4658,4659,1,0,0,0,4659,4660,5,549,
        0,0,4660,4661,5,1174,0,0,4661,4663,5,1168,0,0,4662,4657,1,0,0,0,
        4662,4663,1,0,0,0,4663,4664,1,0,0,0,4664,4666,5,1193,0,0,4665,4563,
        1,0,0,0,4665,4666,1,0,0,0,4666,361,1,0,0,0,4667,4668,5,35,0,0,4668,
        4669,5,800,0,0,4669,4691,5,400,0,0,4670,4692,7,43,0,0,4671,4672,
        5,1063,0,0,4672,4673,5,1192,0,0,4673,4674,5,143,0,0,4674,4680,5,
        1174,0,0,4675,4676,3,1208,604,0,4676,4677,5,1187,0,0,4677,4678,3,
        1208,604,0,4678,4681,1,0,0,0,4679,4681,5,630,0,0,4680,4675,1,0,0,
        0,4680,4679,1,0,0,0,4681,4682,1,0,0,0,4682,4692,5,1193,0,0,4683,
        4684,5,799,0,0,4684,4692,5,931,0,0,4685,4686,5,1063,0,0,4686,4687,
        5,1192,0,0,4687,4688,5,552,0,0,4688,4689,5,1174,0,0,4689,4690,5,
        1168,0,0,4690,4692,5,1193,0,0,4691,4670,1,0,0,0,4691,4671,1,0,0,
        0,4691,4683,1,0,0,0,4691,4685,1,0,0,0,4692,363,1,0,0,0,4693,4694,
        5,35,0,0,4694,4695,5,217,0,0,4695,4696,5,64,0,0,4696,4697,5,917,
        0,0,4697,4702,3,1208,604,0,4698,4699,5,363,0,0,4699,4700,5,876,0,
        0,4700,4701,5,64,0,0,4701,4703,3,1208,604,0,4702,4698,1,0,0,0,4702,
        4703,1,0,0,0,4703,4712,1,0,0,0,4704,4709,3,366,183,0,4705,4706,5,
        1194,0,0,4706,4708,3,366,183,0,4707,4705,1,0,0,0,4708,4711,1,0,0,
        0,4709,4707,1,0,0,0,4709,4710,1,0,0,0,4710,4713,1,0,0,0,4711,4709,
        1,0,0,0,4712,4704,1,0,0,0,4712,4713,1,0,0,0,4713,4720,1,0,0,0,4714,
        4715,5,1063,0,0,4715,4716,5,1192,0,0,4716,4717,5,929,0,0,4717,4718,
        5,1174,0,0,4718,4719,7,17,0,0,4719,4721,5,1193,0,0,4720,4714,1,0,
        0,0,4720,4721,1,0,0,0,4721,365,1,0,0,0,4722,4723,7,23,0,0,4723,4726,
        5,1192,0,0,4724,4727,3,368,184,0,4725,4727,3,1208,604,0,4726,4724,
        1,0,0,0,4726,4725,1,0,0,0,4727,4728,1,0,0,0,4728,4729,5,1193,0,0,
        4729,367,1,0,0,0,4730,4735,3,370,185,0,4731,4732,5,1194,0,0,4732,
        4734,3,370,185,0,4733,4731,1,0,0,0,4734,4737,1,0,0,0,4735,4733,1,
        0,0,0,4735,4736,1,0,0,0,4736,4738,1,0,0,0,4737,4735,1,0,0,0,4738,
        4742,5,649,0,0,4739,4740,3,372,186,0,4740,4741,5,1197,0,0,4741,4743,
        1,0,0,0,4742,4739,1,0,0,0,4742,4743,1,0,0,0,4743,4744,1,0,0,0,4744,
        4745,3,374,187,0,4745,4746,5,110,0,0,4746,4751,3,764,382,0,4747,
        4748,5,1194,0,0,4748,4750,3,764,382,0,4749,4747,1,0,0,0,4750,4753,
        1,0,0,0,4751,4749,1,0,0,0,4751,4752,1,0,0,0,4752,369,1,0,0,0,4753,
        4751,1,0,0,0,4754,4755,7,44,0,0,4755,371,1,0,0,0,4756,4757,7,45,
        0,0,4757,373,1,0,0,0,4758,4759,3,1208,604,0,4759,4760,5,1187,0,0,
        4760,4762,1,0,0,0,4761,4758,1,0,0,0,4761,4762,1,0,0,0,4762,4763,
        1,0,0,0,4763,4764,3,1208,604,0,4764,4765,5,1187,0,0,4765,4767,1,
        0,0,0,4766,4761,1,0,0,0,4766,4767,1,0,0,0,4767,4768,1,0,0,0,4768,
        4769,3,1208,604,0,4769,375,1,0,0,0,4770,4771,5,35,0,0,4771,4772,
        5,819,0,0,4772,4780,3,1208,604,0,4773,4774,7,23,0,0,4774,4775,5,
        561,0,0,4775,4781,3,1208,604,0,4776,4777,5,1063,0,0,4777,4778,5,
        584,0,0,4778,4779,5,1174,0,0,4779,4781,3,1208,604,0,4780,4773,1,
        0,0,0,4780,4776,1,0,0,0,4781,377,1,0,0,0,4782,4783,5,197,0,0,4783,
        4784,5,217,0,0,4784,4785,5,64,0,0,4785,4786,5,917,0,0,4786,4791,
        3,1208,604,0,4787,4788,5,363,0,0,4788,4789,5,876,0,0,4789,4790,5,
        64,0,0,4790,4792,3,1208,604,0,4791,4787,1,0,0,0,4791,4792,1,0,0,
        0,4792,4801,1,0,0,0,4793,4798,3,366,183,0,4794,4795,5,1194,0,0,4795,
        4797,3,366,183,0,4796,4794,1,0,0,0,4797,4800,1,0,0,0,4798,4796,1,
        0,0,0,4798,4799,1,0,0,0,4799,4802,1,0,0,0,4800,4798,1,0,0,0,4801,
        4793,1,0,0,0,4801,4802,1,0,0,0,4802,4809,1,0,0,0,4803,4804,5,1063,
        0,0,4804,4805,5,1192,0,0,4805,4806,5,929,0,0,4806,4807,5,1174,0,
        0,4807,4808,7,17,0,0,4808,4810,5,1193,0,0,4809,4803,1,0,0,0,4809,
        4810,1,0,0,0,4810,379,1,0,0,0,4811,4812,5,197,0,0,4812,4813,5,819,
        0,0,4813,4816,3,1208,604,0,4814,4815,5,68,0,0,4815,4817,3,1208,604,
        0,4816,4814,1,0,0,0,4816,4817,1,0,0,0,4817,381,1,0,0,0,4818,4819,
        5,197,0,0,4819,4820,5,823,0,0,4820,4823,3,1208,604,0,4821,4822,5,
        68,0,0,4822,4824,3,1208,604,0,4823,4821,1,0,0,0,4823,4824,1,0,0,
        0,4824,4825,1,0,0,0,4825,4832,5,1063,0,0,4826,4828,5,1194,0,0,4827,
        4826,1,0,0,0,4827,4828,1,0,0,0,4828,4829,1,0,0,0,4829,4830,5,881,
        0,0,4830,4831,5,1174,0,0,4831,4833,5,1170,0,0,4832,4827,1,0,0,0,
        4832,4833,1,0,0,0,4833,4840,1,0,0,0,4834,4836,5,1194,0,0,4835,4834,
        1,0,0,0,4835,4836,1,0,0,0,4836,4837,1,0,0,0,4837,4838,5,104,0,0,
        4838,4839,5,1174,0,0,4839,4841,5,1170,0,0,4840,4835,1,0,0,0,4840,
        4841,1,0,0,0,4841,4848,1,0,0,0,4842,4844,5,1194,0,0,4843,4842,1,
        0,0,0,4843,4844,1,0,0,0,4844,4845,1,0,0,0,4845,4846,5,506,0,0,4846,
        4847,5,1174,0,0,4847,4849,5,1168,0,0,4848,4843,1,0,0,0,4848,4849,
        1,0,0,0,4849,4851,1,0,0,0,4850,4852,5,1194,0,0,4851,4850,1,0,0,0,
        4851,4852,1,0,0,0,4852,4853,1,0,0,0,4853,4854,5,12,0,0,4854,4855,
        5,1174,0,0,4855,4860,5,1170,0,0,4856,4857,5,1194,0,0,4857,4858,5,
        576,0,0,4858,4859,5,1174,0,0,4859,4861,5,1170,0,0,4860,4856,1,0,
        0,0,4860,4861,1,0,0,0,4861,383,1,0,0,0,4862,4863,5,197,0,0,4863,
        4867,5,838,0,0,4864,4865,3,1208,604,0,4865,4866,5,1187,0,0,4866,
        4868,1,0,0,0,4867,4864,1,0,0,0,4867,4868,1,0,0,0,4868,4869,1,0,0,
        0,4869,4870,3,1208,604,0,4870,4871,5,56,0,0,4871,4872,3,938,469,
        0,4872,385,1,0,0,0,4873,4874,5,35,0,0,4874,4875,5,844,0,0,4875,4876,
        3,1208,604,0,4876,4885,5,996,0,0,4877,4883,5,635,0,0,4878,4883,5,
        1010,0,0,4879,4880,5,1074,0,0,4880,4881,5,844,0,0,4881,4883,5,152,
        0,0,4882,4877,1,0,0,0,4882,4878,1,0,0,0,4882,4879,1,0,0,0,4883,4884,
        1,0,0,0,4884,4886,5,1197,0,0,4885,4882,1,0,0,0,4885,4886,1,0,0,0,
        4886,4887,1,0,0,0,4887,4890,3,1208,604,0,4888,4889,5,1187,0,0,4889,
        4891,3,1208,604,0,4890,4888,1,0,0,0,4890,4891,1,0,0,0,4891,387,1,
        0,0,0,4892,4893,5,197,0,0,4893,4901,5,844,0,0,4894,4902,3,1208,604,
        0,4895,4896,5,68,0,0,4896,4902,3,1208,604,0,4897,4898,3,1208,604,
        0,4898,4899,5,68,0,0,4899,4900,3,1208,604,0,4900,4902,1,0,0,0,4901,
        4894,1,0,0,0,4901,4895,1,0,0,0,4901,4897,1,0,0,0,4902,4929,1,0,0,
        0,4903,4928,3,586,293,0,4904,4928,3,598,299,0,4905,4906,7,46,0,0,
        4906,4907,7,47,0,0,4907,4910,5,649,0,0,4908,4909,5,844,0,0,4909,
        4911,5,1197,0,0,4910,4908,1,0,0,0,4910,4911,1,0,0,0,4911,4912,1,
        0,0,0,4912,4913,3,1208,604,0,4913,4914,5,986,0,0,4914,4915,3,1208,
        604,0,4915,4928,1,0,0,0,4916,4917,5,815,0,0,4917,4918,7,47,0,0,4918,
        4921,5,649,0,0,4919,4920,5,844,0,0,4920,4922,5,1197,0,0,4921,4919,
        1,0,0,0,4921,4922,1,0,0,0,4922,4923,1,0,0,0,4923,4924,3,1208,604,
        0,4924,4925,5,378,0,0,4925,4926,3,1208,604,0,4926,4928,1,0,0,0,4927,
        4903,1,0,0,0,4927,4904,1,0,0,0,4927,4905,1,0,0,0,4927,4916,1,0,0,
        0,4928,4931,1,0,0,0,4929,4927,1,0,0,0,4929,4930,1,0,0,0,4930,389,
        1,0,0,0,4931,4929,1,0,0,0,4932,4933,5,197,0,0,4933,4934,5,844,0,
        0,4934,4937,3,1208,604,0,4935,4936,5,68,0,0,4936,4938,3,1208,604,
        0,4937,4935,1,0,0,0,4937,4938,1,0,0,0,4938,391,1,0,0,0,4939,4940,
        5,35,0,0,4940,4941,5,844,0,0,4941,4942,3,1208,604,0,4942,4945,5,
        996,0,0,4943,4944,5,635,0,0,4944,4946,5,1197,0,0,4945,4943,1,0,0,
        0,4945,4946,1,0,0,0,4946,4947,1,0,0,0,4947,4950,3,1208,604,0,4948,
        4949,5,1187,0,0,4949,4951,5,1169,0,0,4950,4948,1,0,0,0,4950,4951,
        1,0,0,0,4951,393,1,0,0,0,4952,4953,5,197,0,0,4953,4954,5,854,0,0,
        4954,4955,5,732,0,0,4955,4956,5,511,0,0,4956,4964,3,1208,604,0,4957,
        4961,5,378,0,0,4958,4959,3,1208,604,0,4959,4960,5,1187,0,0,4960,
        4962,1,0,0,0,4961,4958,1,0,0,0,4961,4962,1,0,0,0,4962,4963,1,0,0,
        0,4963,4965,3,1208,604,0,4964,4957,1,0,0,0,4964,4965,1,0,0,0,4965,
        4968,1,0,0,0,4966,4967,5,68,0,0,4967,4969,3,1208,604,0,4968,4966,
        1,0,0,0,4968,4969,1,0,0,0,4969,395,1,0,0,0,4970,4971,5,197,0,0,4971,
        4972,5,861,0,0,4972,4976,5,711,0,0,4973,4974,3,1208,604,0,4974,4975,
        5,1187,0,0,4975,4977,1,0,0,0,4976,4973,1,0,0,0,4976,4977,1,0,0,0,
        4977,4978,1,0,0,0,4978,5019,3,1208,604,0,4979,4981,5,1194,0,0,4980,
        4979,1,0,0,0,4980,4981,1,0,0,0,4981,4982,1,0,0,0,4982,4984,5,11,
        0,0,4983,4985,7,48,0,0,4984,4983,1,0,0,0,4984,4985,1,0,0,0,4985,
        4986,1,0,0,0,4986,4987,5,716,0,0,4987,4988,3,1208,604,0,4988,4989,
        5,1187,0,0,4989,4990,3,1208,604,0,4990,4995,5,1192,0,0,4991,4993,
        5,1194,0,0,4992,4991,1,0,0,0,4992,4993,1,0,0,0,4993,4994,1,0,0,0,
        4994,4996,3,1208,604,0,4995,4992,1,0,0,0,4996,4997,1,0,0,0,4997,
        4995,1,0,0,0,4997,4998,1,0,0,0,4998,4999,1,0,0,0,4999,5000,5,1193,
        0,0,5000,5001,5,649,0,0,5001,5002,3,1208,604,0,5002,5003,5,1187,
        0,0,5003,5016,3,1208,604,0,5004,5006,5,1194,0,0,5005,5004,1,0,0,
        0,5005,5006,1,0,0,0,5006,5007,1,0,0,0,5007,5008,5,19,0,0,5008,5015,
        7,49,0,0,5009,5011,5,1194,0,0,5010,5009,1,0,0,0,5010,5011,1,0,0,
        0,5011,5012,1,0,0,0,5012,5013,5,89,0,0,5013,5015,7,50,0,0,5014,5005,
        1,0,0,0,5014,5010,1,0,0,0,5015,5018,1,0,0,0,5016,5014,1,0,0,0,5016,
        5017,1,0,0,0,5017,5020,1,0,0,0,5018,5016,1,0,0,0,5019,4980,1,0,0,
        0,5020,5021,1,0,0,0,5021,5019,1,0,0,0,5021,5022,1,0,0,0,5022,5033,
        1,0,0,0,5023,5024,5,1063,0,0,5024,5025,5,1192,0,0,5025,5026,5,929,
        0,0,5026,5027,5,1174,0,0,5027,5030,7,17,0,0,5028,5029,5,845,0,0,
        5029,5031,7,17,0,0,5030,5028,1,0,0,0,5030,5031,1,0,0,0,5031,5032,
        1,0,0,0,5032,5034,5,1193,0,0,5033,5023,1,0,0,0,5033,5034,1,0,0,0,
        5034,5038,1,0,0,0,5035,5036,5,614,0,0,5036,5037,5,363,0,0,5037,5039,
        5,791,0,0,5038,5035,1,0,0,0,5038,5039,1,0,0,0,5039,397,1,0,0,0,5040,
        5041,5,35,0,0,5041,5045,5,873,0,0,5042,5043,3,1208,604,0,5043,5044,
        5,1187,0,0,5044,5046,1,0,0,0,5045,5042,1,0,0,0,5045,5046,1,0,0,0,
        5046,5047,1,0,0,0,5047,5053,3,1208,604,0,5048,5051,5,803,0,0,5049,
        5050,5,1063,0,0,5050,5052,5,1168,0,0,5051,5049,1,0,0,0,5051,5052,
        1,0,0,0,5052,5054,1,0,0,0,5053,5048,1,0,0,0,5053,5054,1,0,0,0,5054,
        5058,1,0,0,0,5055,5056,5,445,0,0,5056,5057,5,110,0,0,5057,5059,5,
        1168,0,0,5058,5055,1,0,0,0,5058,5059,1,0,0,0,5059,5064,1,0,0,0,5060,
        5061,5,570,0,0,5061,5065,5,1168,0,0,5062,5063,5,596,0,0,5063,5065,
        5,570,0,0,5064,5060,1,0,0,0,5064,5062,1,0,0,0,5064,5065,1,0,0,0,
        5065,5070,1,0,0,0,5066,5067,5,542,0,0,5067,5071,5,1168,0,0,5068,
        5069,5,596,0,0,5069,5071,5,542,0,0,5070,5066,1,0,0,0,5070,5068,1,
        0,0,0,5070,5071,1,0,0,0,5071,5075,1,0,0,0,5072,5076,5,215,0,0,5073,
        5074,5,596,0,0,5074,5076,5,215,0,0,5075,5072,1,0,0,0,5075,5073,1,
        0,0,0,5075,5076,1,0,0,0,5076,5081,1,0,0,0,5077,5078,5,111,0,0,5078,
        5082,5,1168,0,0,5079,5080,5,596,0,0,5080,5082,5,111,0,0,5081,5077,
        1,0,0,0,5081,5079,1,0,0,0,5081,5082,1,0,0,0,5082,399,1,0,0,0,5083,
        5084,5,197,0,0,5084,5088,5,873,0,0,5085,5086,3,1208,604,0,5086,5087,
        5,1187,0,0,5087,5089,1,0,0,0,5088,5085,1,0,0,0,5088,5089,1,0,0,0,
        5089,5090,1,0,0,0,5090,5093,3,1208,604,0,5091,5092,5,56,0,0,5092,
        5094,3,1200,600,0,5093,5091,1,0,0,0,5093,5094,1,0,0,0,5094,5098,
        1,0,0,0,5095,5096,5,925,0,0,5096,5097,5,1063,0,0,5097,5099,5,1168,
        0,0,5098,5095,1,0,0,0,5098,5099,1,0,0,0,5099,5106,1,0,0,0,5100,5101,
        5,445,0,0,5101,5103,5,110,0,0,5102,5104,5,1202,0,0,5103,5102,1,0,
        0,0,5103,5104,1,0,0,0,5104,5105,1,0,0,0,5105,5107,5,1168,0,0,5106,
        5100,1,0,0,0,5106,5107,1,0,0,0,5107,5117,1,0,0,0,5108,5113,5,570,
        0,0,5109,5111,5,1202,0,0,5110,5109,1,0,0,0,5110,5111,1,0,0,0,5111,
        5112,1,0,0,0,5112,5114,5,1168,0,0,5113,5110,1,0,0,0,5113,5114,1,
        0,0,0,5114,5118,1,0,0,0,5115,5116,5,596,0,0,5116,5118,5,570,0,0,
        5117,5108,1,0,0,0,5117,5115,1,0,0,0,5117,5118,1,0,0,0,5118,5128,
        1,0,0,0,5119,5124,5,542,0,0,5120,5122,5,1202,0,0,5121,5120,1,0,0,
        0,5121,5122,1,0,0,0,5122,5123,1,0,0,0,5123,5125,5,1168,0,0,5124,
        5121,1,0,0,0,5124,5125,1,0,0,0,5125,5129,1,0,0,0,5126,5127,5,596,
        0,0,5127,5129,5,542,0,0,5128,5119,1,0,0,0,5128,5126,1,0,0,0,5128,
        5129,1,0,0,0,5129,5133,1,0,0,0,5130,5134,5,215,0,0,5131,5132,5,596,
        0,0,5132,5134,5,215,0,0,5133,5130,1,0,0,0,5133,5131,1,0,0,0,5133,
        5134,1,0,0,0,5134,5141,1,0,0,0,5135,5137,5,111,0,0,5136,5138,5,1168,
        0,0,5137,5136,1,0,0,0,5137,5138,1,0,0,0,5138,5142,1,0,0,0,5139,5140,
        5,596,0,0,5140,5142,5,111,0,0,5141,5135,1,0,0,0,5141,5139,1,0,0,
        0,5141,5142,1,0,0,0,5142,401,1,0,0,0,5143,5144,5,35,0,0,5144,5145,
        5,876,0,0,5145,5146,5,64,0,0,5146,5278,3,1208,604,0,5147,5192,5,
        986,0,0,5148,5149,5,341,0,0,5149,5186,5,1192,0,0,5150,5152,5,1194,
        0,0,5151,5150,1,0,0,0,5151,5152,1,0,0,0,5152,5153,1,0,0,0,5153,5154,
        5,348,0,0,5154,5155,5,1174,0,0,5155,5185,5,1170,0,0,5156,5158,5,
        1194,0,0,5157,5156,1,0,0,0,5157,5158,1,0,0,0,5158,5159,1,0,0,0,5159,
        5160,5,540,0,0,5160,5164,5,1174,0,0,5161,5162,5,1168,0,0,5162,5165,
        7,51,0,0,5163,5165,5,1022,0,0,5164,5161,1,0,0,0,5164,5163,1,0,0,
        0,5165,5185,1,0,0,0,5166,5168,5,1194,0,0,5167,5166,1,0,0,0,5167,
        5168,1,0,0,0,5168,5169,1,0,0,0,5169,5170,5,555,0,0,5170,5171,5,1174,
        0,0,5171,5185,7,52,0,0,5172,5174,5,1194,0,0,5173,5172,1,0,0,0,5173,
        5174,1,0,0,0,5174,5175,1,0,0,0,5175,5176,5,548,0,0,5176,5177,5,1174,
        0,0,5177,5185,5,1168,0,0,5178,5180,5,1194,0,0,5179,5178,1,0,0,0,
        5179,5180,1,0,0,0,5180,5181,1,0,0,0,5181,5182,5,798,0,0,5182,5183,
        5,1174,0,0,5183,5185,7,17,0,0,5184,5151,1,0,0,0,5184,5157,1,0,0,
        0,5184,5167,1,0,0,0,5184,5173,1,0,0,0,5184,5179,1,0,0,0,5185,5188,
        1,0,0,0,5186,5184,1,0,0,0,5186,5187,1,0,0,0,5187,5189,1,0,0,0,5188,
        5186,1,0,0,0,5189,5193,5,1193,0,0,5190,5193,5,49,0,0,5191,5193,5,
        863,0,0,5192,5148,1,0,0,0,5192,5190,1,0,0,0,5192,5191,1,0,0,0,5193,
        5195,1,0,0,0,5194,5147,1,0,0,0,5194,5195,1,0,0,0,5195,5222,1,0,0,
        0,5196,5197,5,1063,0,0,5197,5218,5,1192,0,0,5198,5200,5,1194,0,0,
        5199,5198,1,0,0,0,5199,5200,1,0,0,0,5200,5201,1,0,0,0,5201,5202,
        5,742,0,0,5202,5203,5,1174,0,0,5203,5217,5,1168,0,0,5204,5206,5,
        1194,0,0,5205,5204,1,0,0,0,5205,5206,1,0,0,0,5206,5207,1,0,0,0,5207,
        5208,5,652,0,0,5208,5209,5,1174,0,0,5209,5217,7,53,0,0,5210,5212,
        5,1194,0,0,5211,5210,1,0,0,0,5211,5212,1,0,0,0,5212,5213,1,0,0,0,
        5213,5214,5,929,0,0,5214,5215,5,1174,0,0,5215,5217,7,17,0,0,5216,
        5199,1,0,0,0,5216,5205,1,0,0,0,5216,5211,1,0,0,0,5217,5220,1,0,0,
        0,5218,5216,1,0,0,0,5218,5219,1,0,0,0,5219,5221,1,0,0,0,5220,5218,
        1,0,0,0,5221,5223,5,1193,0,0,5222,5196,1,0,0,0,5222,5223,1,0,0,0,
        5223,5270,1,0,0,0,5224,5268,5,1060,0,0,5225,5227,5,1194,0,0,5226,
        5225,1,0,0,0,5226,5227,1,0,0,0,5227,5229,1,0,0,0,5228,5230,5,614,
        0,0,5229,5228,1,0,0,0,5229,5230,1,0,0,0,5230,5231,1,0,0,0,5231,5243,
        3,1208,604,0,5232,5244,5,1174,0,0,5233,5234,5,1176,0,0,5234,5244,
        5,1175,0,0,5235,5236,5,1177,0,0,5236,5244,5,1174,0,0,5237,5244,5,
        1175,0,0,5238,5239,5,1175,0,0,5239,5244,5,1174,0,0,5240,5244,5,1176,
        0,0,5241,5242,5,1176,0,0,5242,5244,5,1174,0,0,5243,5232,1,0,0,0,
        5243,5233,1,0,0,0,5243,5235,1,0,0,0,5243,5237,1,0,0,0,5243,5238,
        1,0,0,0,5243,5240,1,0,0,0,5243,5241,1,0,0,0,5244,5245,1,0,0,0,5245,
        5246,7,31,0,0,5246,5269,1,0,0,0,5247,5249,5,1194,0,0,5248,5247,1,
        0,0,0,5248,5249,1,0,0,0,5249,5250,1,0,0,0,5250,5252,7,36,0,0,5251,
        5253,5,614,0,0,5252,5251,1,0,0,0,5252,5253,1,0,0,0,5253,5265,1,0,
        0,0,5254,5266,5,1174,0,0,5255,5256,5,1176,0,0,5256,5266,5,1175,0,
        0,5257,5258,5,1177,0,0,5258,5266,5,1174,0,0,5259,5266,5,1175,0,0,
        5260,5261,5,1175,0,0,5261,5266,5,1174,0,0,5262,5266,5,1176,0,0,5263,
        5264,5,1176,0,0,5264,5266,5,1174,0,0,5265,5254,1,0,0,0,5265,5255,
        1,0,0,0,5265,5257,1,0,0,0,5265,5259,1,0,0,0,5265,5260,1,0,0,0,5265,
        5262,1,0,0,0,5265,5263,1,0,0,0,5266,5267,1,0,0,0,5267,5269,7,31,
        0,0,5268,5226,1,0,0,0,5268,5248,1,0,0,0,5269,5271,1,0,0,0,5270,5224,
        1,0,0,0,5270,5271,1,0,0,0,5271,5279,1,0,0,0,5272,5273,5,781,0,0,
        5273,5279,5,1060,0,0,5274,5275,5,579,0,0,5275,5276,5,584,0,0,5276,
        5277,5,1174,0,0,5277,5279,3,1208,604,0,5278,5194,1,0,0,0,5278,5272,
        1,0,0,0,5278,5274,1,0,0,0,5279,403,1,0,0,0,5280,5281,5,197,0,0,5281,
        5282,5,876,0,0,5282,5283,5,64,0,0,5283,5421,3,1208,604,0,5284,5329,
        5,986,0,0,5285,5286,5,341,0,0,5286,5323,5,1192,0,0,5287,5289,5,1194,
        0,0,5288,5287,1,0,0,0,5288,5289,1,0,0,0,5289,5290,1,0,0,0,5290,5291,
        5,348,0,0,5291,5292,5,1174,0,0,5292,5322,5,1170,0,0,5293,5295,5,
        1194,0,0,5294,5293,1,0,0,0,5294,5295,1,0,0,0,5295,5296,1,0,0,0,5296,
        5297,5,540,0,0,5297,5301,5,1174,0,0,5298,5299,5,1168,0,0,5299,5302,
        7,51,0,0,5300,5302,5,1022,0,0,5301,5298,1,0,0,0,5301,5300,1,0,0,
        0,5302,5322,1,0,0,0,5303,5305,5,1194,0,0,5304,5303,1,0,0,0,5304,
        5305,1,0,0,0,5305,5306,1,0,0,0,5306,5307,5,555,0,0,5307,5308,5,1174,
        0,0,5308,5322,7,52,0,0,5309,5311,5,1194,0,0,5310,5309,1,0,0,0,5310,
        5311,1,0,0,0,5311,5312,1,0,0,0,5312,5313,5,548,0,0,5313,5314,5,1174,
        0,0,5314,5322,5,1168,0,0,5315,5317,5,1194,0,0,5316,5315,1,0,0,0,
        5316,5317,1,0,0,0,5317,5318,1,0,0,0,5318,5319,5,798,0,0,5319,5320,
        5,1174,0,0,5320,5322,7,17,0,0,5321,5288,1,0,0,0,5321,5294,1,0,0,
        0,5321,5304,1,0,0,0,5321,5310,1,0,0,0,5321,5316,1,0,0,0,5322,5325,
        1,0,0,0,5323,5321,1,0,0,0,5323,5324,1,0,0,0,5324,5326,1,0,0,0,5325,
        5323,1,0,0,0,5326,5330,5,1193,0,0,5327,5330,5,49,0,0,5328,5330,5,
        863,0,0,5329,5285,1,0,0,0,5329,5327,1,0,0,0,5329,5328,1,0,0,0,5330,
        5332,1,0,0,0,5331,5284,1,0,0,0,5331,5332,1,0,0,0,5332,5365,1,0,0,
        0,5333,5334,5,1063,0,0,5334,5361,5,1192,0,0,5335,5337,5,1194,0,0,
        5336,5335,1,0,0,0,5336,5337,1,0,0,0,5337,5338,1,0,0,0,5338,5339,
        5,742,0,0,5339,5340,5,1174,0,0,5340,5360,5,1168,0,0,5341,5343,5,
        1194,0,0,5342,5341,1,0,0,0,5342,5343,1,0,0,0,5343,5344,1,0,0,0,5344,
        5345,5,652,0,0,5345,5346,5,1174,0,0,5346,5360,7,53,0,0,5347,5349,
        5,1194,0,0,5348,5347,1,0,0,0,5348,5349,1,0,0,0,5349,5350,1,0,0,0,
        5350,5351,5,929,0,0,5351,5352,5,1174,0,0,5352,5360,7,17,0,0,5353,
        5355,5,1194,0,0,5354,5353,1,0,0,0,5354,5355,1,0,0,0,5355,5356,1,
        0,0,0,5356,5357,5,65,0,0,5357,5358,5,1174,0,0,5358,5360,3,1208,604,
        0,5359,5336,1,0,0,0,5359,5342,1,0,0,0,5359,5348,1,0,0,0,5359,5354,
        1,0,0,0,5360,5363,1,0,0,0,5361,5359,1,0,0,0,5361,5362,1,0,0,0,5362,
        5364,1,0,0,0,5363,5361,1,0,0,0,5364,5366,5,1193,0,0,5365,5333,1,
        0,0,0,5365,5366,1,0,0,0,5366,5413,1,0,0,0,5367,5411,5,1060,0,0,5368,
        5370,5,1194,0,0,5369,5368,1,0,0,0,5369,5370,1,0,0,0,5370,5372,1,
        0,0,0,5371,5373,5,614,0,0,5372,5371,1,0,0,0,5372,5373,1,0,0,0,5373,
        5374,1,0,0,0,5374,5386,3,1208,604,0,5375,5387,5,1174,0,0,5376,5377,
        5,1176,0,0,5377,5387,5,1175,0,0,5378,5379,5,1177,0,0,5379,5387,5,
        1174,0,0,5380,5387,5,1175,0,0,5381,5382,5,1175,0,0,5382,5387,5,1174,
        0,0,5383,5387,5,1176,0,0,5384,5385,5,1176,0,0,5385,5387,5,1174,0,
        0,5386,5375,1,0,0,0,5386,5376,1,0,0,0,5386,5378,1,0,0,0,5386,5380,
        1,0,0,0,5386,5381,1,0,0,0,5386,5383,1,0,0,0,5386,5384,1,0,0,0,5387,
        5388,1,0,0,0,5388,5389,7,31,0,0,5389,5412,1,0,0,0,5390,5392,5,1194,
        0,0,5391,5390,1,0,0,0,5391,5392,1,0,0,0,5392,5393,1,0,0,0,5393,5395,
        7,36,0,0,5394,5396,5,614,0,0,5395,5394,1,0,0,0,5395,5396,1,0,0,0,
        5396,5408,1,0,0,0,5397,5409,5,1174,0,0,5398,5399,5,1176,0,0,5399,
        5409,5,1175,0,0,5400,5401,5,1177,0,0,5401,5409,5,1174,0,0,5402,5409,
        5,1175,0,0,5403,5404,5,1175,0,0,5404,5409,5,1174,0,0,5405,5409,5,
        1176,0,0,5406,5407,5,1176,0,0,5407,5409,5,1174,0,0,5408,5397,1,0,
        0,0,5408,5398,1,0,0,0,5408,5400,1,0,0,0,5408,5402,1,0,0,0,5408,5403,
        1,0,0,0,5408,5405,1,0,0,0,5408,5406,1,0,0,0,5409,5410,1,0,0,0,5410,
        5412,7,31,0,0,5411,5369,1,0,0,0,5411,5391,1,0,0,0,5412,5414,1,0,
        0,0,5413,5367,1,0,0,0,5413,5414,1,0,0,0,5414,5422,1,0,0,0,5415,5416,
        5,781,0,0,5416,5422,5,1060,0,0,5417,5418,5,579,0,0,5418,5419,5,584,
        0,0,5419,5420,5,1174,0,0,5420,5422,3,1208,604,0,5421,5331,1,0,0,
        0,5421,5415,1,0,0,0,5421,5417,1,0,0,0,5422,405,1,0,0,0,5423,5424,
        5,35,0,0,5424,5425,5,876,0,0,5425,5426,5,64,0,0,5426,5427,5,917,
        0,0,5427,5432,3,1208,604,0,5428,5429,5,363,0,0,5429,5430,5,876,0,
        0,5430,5431,5,64,0,0,5431,5433,3,1208,604,0,5432,5428,1,0,0,0,5432,
        5433,1,0,0,0,5433,5441,1,0,0,0,5434,5435,7,23,0,0,5435,5436,5,1192,
        0,0,5436,5437,3,1208,604,0,5437,5438,5,1193,0,0,5438,5440,1,0,0,
        0,5439,5434,1,0,0,0,5440,5443,1,0,0,0,5441,5439,1,0,0,0,5441,5442,
        1,0,0,0,5442,5450,1,0,0,0,5443,5441,1,0,0,0,5444,5445,5,1063,0,0,
        5445,5446,5,1192,0,0,5446,5447,5,929,0,0,5447,5448,5,1174,0,0,5448,
        5449,7,17,0,0,5449,5451,5,1193,0,0,5450,5444,1,0,0,0,5450,5451,1,
        0,0,0,5451,407,1,0,0,0,5452,5453,5,197,0,0,5453,5454,5,876,0,0,5454,
        5455,5,64,0,0,5455,5456,5,917,0,0,5456,5461,3,1208,604,0,5457,5458,
        5,363,0,0,5458,5459,5,876,0,0,5459,5460,5,64,0,0,5460,5462,3,1208,
        604,0,5461,5457,1,0,0,0,5461,5462,1,0,0,0,5462,5470,1,0,0,0,5463,
        5464,5,11,0,0,5464,5465,5,1192,0,0,5465,5466,3,1208,604,0,5466,5467,
        5,1193,0,0,5467,5469,1,0,0,0,5468,5463,1,0,0,0,5469,5472,1,0,0,0,
        5470,5468,1,0,0,0,5470,5471,1,0,0,0,5471,5479,1,0,0,0,5472,5470,
        1,0,0,0,5473,5474,5,1063,0,0,5474,5475,5,1192,0,0,5475,5476,5,929,
        0,0,5476,5477,5,1174,0,0,5477,5478,7,17,0,0,5478,5480,5,1193,0,0,
        5479,5473,1,0,0,0,5479,5480,1,0,0,0,5480,409,1,0,0,0,5481,5482,5,
        35,0,0,5482,5483,5,876,0,0,5483,5484,5,173,0,0,5484,5590,5,887,0,
        0,5485,5486,5,730,0,0,5486,5522,5,18,0,0,5487,5488,5,196,0,0,5488,
        5504,5,1174,0,0,5489,5505,5,69,0,0,5490,5492,5,1194,0,0,5491,5490,
        1,0,0,0,5491,5492,1,0,0,0,5492,5493,1,0,0,0,5493,5501,5,1168,0,0,
        5494,5496,5,1194,0,0,5495,5494,1,0,0,0,5495,5496,1,0,0,0,5496,5497,
        1,0,0,0,5497,5498,5,1168,0,0,5498,5499,5,986,0,0,5499,5501,5,1168,
        0,0,5500,5491,1,0,0,0,5500,5495,1,0,0,0,5501,5502,1,0,0,0,5502,5500,
        1,0,0,0,5502,5503,1,0,0,0,5503,5505,1,0,0,0,5504,5489,1,0,0,0,5504,
        5500,1,0,0,0,5505,5523,1,0,0,0,5506,5507,5,632,0,0,5507,5518,5,1174,
        0,0,5508,5510,5,1194,0,0,5509,5508,1,0,0,0,5509,5510,1,0,0,0,5510,
        5511,1,0,0,0,5511,5519,5,1168,0,0,5512,5514,5,1194,0,0,5513,5512,
        1,0,0,0,5513,5514,1,0,0,0,5514,5515,1,0,0,0,5515,5516,5,1168,0,0,
        5516,5517,5,986,0,0,5517,5519,5,1168,0,0,5518,5509,1,0,0,0,5518,
        5513,1,0,0,0,5519,5520,1,0,0,0,5520,5518,1,0,0,0,5520,5521,1,0,0,
        0,5521,5523,1,0,0,0,5522,5487,1,0,0,0,5522,5506,1,0,0,0,5523,5591,
        1,0,0,0,5524,5525,5,263,0,0,5525,5541,5,523,0,0,5526,5542,5,649,
        0,0,5527,5542,5,643,0,0,5528,5529,5,691,0,0,5529,5530,5,1174,0,0,
        5530,5542,7,54,0,0,5531,5532,5,556,0,0,5532,5536,5,1174,0,0,5533,
        5534,5,1168,0,0,5534,5537,5,557,0,0,5535,5537,5,243,0,0,5536,5533,
        1,0,0,0,5536,5535,1,0,0,0,5537,5542,1,0,0,0,5538,5539,5,548,0,0,
        5539,5540,5,1174,0,0,5540,5542,7,55,0,0,5541,5526,1,0,0,0,5541,5527,
        1,0,0,0,5541,5528,1,0,0,0,5541,5531,1,0,0,0,5541,5538,1,0,0,0,5542,
        5591,1,0,0,0,5543,5544,5,331,0,0,5544,5545,5,148,0,0,5545,5563,5,
        732,0,0,5546,5547,5,1048,0,0,5547,5548,5,1174,0,0,5548,5564,7,54,
        0,0,5549,5550,5,920,0,0,5550,5551,5,1174,0,0,5551,5564,7,54,0,0,
        5552,5553,5,921,0,0,5553,5554,5,1174,0,0,5554,5564,7,54,0,0,5555,
        5556,5,922,0,0,5556,5564,7,54,0,0,5557,5558,5,334,0,0,5558,5559,
        5,1174,0,0,5559,5564,7,54,0,0,5560,5561,5,413,0,0,5561,5562,5,1174,
        0,0,5562,5564,7,55,0,0,5563,5546,1,0,0,0,5563,5549,1,0,0,0,5563,
        5552,1,0,0,0,5563,5555,1,0,0,0,5563,5557,1,0,0,0,5563,5560,1,0,0,
        0,5564,5591,1,0,0,0,5565,5566,5,407,0,0,5566,5567,5,148,0,0,5567,
        5568,5,182,0,0,5568,5569,5,1174,0,0,5569,5591,7,56,0,0,5570,5571,
        5,106,0,0,5571,5572,5,712,0,0,5572,5585,5,328,0,0,5573,5574,5,649,
        0,0,5574,5575,5,1192,0,0,5575,5576,5,347,0,0,5576,5577,5,1174,0,
        0,5577,5578,5,1170,0,0,5578,5579,5,1194,0,0,5579,5580,5,905,0,0,
        5580,5581,5,1174,0,0,5581,5582,5,1168,0,0,5582,5583,7,57,0,0,5583,
        5586,5,1193,0,0,5584,5586,5,643,0,0,5585,5573,1,0,0,0,5585,5584,
        1,0,0,0,5586,5591,1,0,0,0,5587,5588,5,887,0,0,5588,5589,5,909,0,
        0,5589,5591,7,17,0,0,5590,5485,1,0,0,0,5590,5524,1,0,0,0,5590,5543,
        1,0,0,0,5590,5565,1,0,0,0,5590,5570,1,0,0,0,5590,5587,1,0,0,0,5591,
        411,1,0,0,0,5592,5593,5,35,0,0,5593,5594,5,876,0,0,5594,5595,5,819,
        0,0,5595,5603,3,1208,604,0,5596,5597,7,23,0,0,5597,5598,5,561,0,
        0,5598,5604,3,1208,604,0,5599,5600,5,1063,0,0,5600,5601,5,584,0,
        0,5601,5602,5,1174,0,0,5602,5604,3,1208,604,0,5603,5596,1,0,0,0,
        5603,5599,1,0,0,0,5604,413,1,0,0,0,5605,5606,5,197,0,0,5606,5607,
        5,876,0,0,5607,5608,5,819,0,0,5608,5611,3,1208,604,0,5609,5610,5,
        68,0,0,5610,5612,3,1208,604,0,5611,5609,1,0,0,0,5611,5612,1,0,0,
        0,5612,415,1,0,0,0,5613,5614,5,35,0,0,5614,5615,5,876,0,0,5615,5616,
        5,819,0,0,5616,5617,3,1208,604,0,5617,5618,7,23,0,0,5618,5619,5,
        561,0,0,5619,5620,3,1208,604,0,5620,417,1,0,0,0,5621,5622,5,35,0,
        0,5622,5623,5,878,0,0,5623,5632,3,1208,604,0,5624,5625,5,649,0,0,
        5625,5629,5,741,0,0,5626,5627,3,1208,604,0,5627,5628,5,1187,0,0,
        5628,5630,1,0,0,0,5629,5626,1,0,0,0,5629,5630,1,0,0,0,5630,5631,
        1,0,0,0,5631,5633,3,1208,604,0,5632,5624,1,0,0,0,5632,5633,1,0,0,
        0,5633,5645,1,0,0,0,5634,5635,5,1192,0,0,5635,5640,3,420,210,0,5636,
        5637,5,1194,0,0,5637,5639,3,420,210,0,5638,5636,1,0,0,0,5639,5642,
        1,0,0,0,5640,5638,1,0,0,0,5640,5641,1,0,0,0,5641,5643,1,0,0,0,5642,
        5640,1,0,0,0,5643,5644,5,1193,0,0,5644,5646,1,0,0,0,5645,5634,1,
        0,0,0,5645,5646,1,0,0,0,5646,419,1,0,0,0,5647,5648,7,23,0,0,5648,
        5649,5,186,0,0,5649,5650,3,1208,604,0,5650,421,1,0,0,0,5651,5652,
        5,197,0,0,5652,5653,5,878,0,0,5653,5656,3,1208,604,0,5654,5655,5,
        68,0,0,5655,5657,3,1208,604,0,5656,5654,1,0,0,0,5656,5657,1,0,0,
        0,5657,5658,1,0,0,0,5658,5659,5,649,0,0,5659,5663,5,741,0,0,5660,
        5661,3,1208,604,0,5661,5662,5,1187,0,0,5662,5664,1,0,0,0,5663,5660,
        1,0,0,0,5663,5664,1,0,0,0,5664,5665,1,0,0,0,5665,5679,3,1208,604,
        0,5666,5674,5,1192,0,0,5667,5669,5,1194,0,0,5668,5667,1,0,0,0,5668,
        5669,1,0,0,0,5669,5672,1,0,0,0,5670,5673,3,1208,604,0,5671,5673,
        5,243,0,0,5672,5670,1,0,0,0,5672,5671,1,0,0,0,5673,5675,1,0,0,0,
        5674,5668,1,0,0,0,5675,5676,1,0,0,0,5676,5674,1,0,0,0,5676,5677,
        1,0,0,0,5677,5678,1,0,0,0,5678,5680,5,1193,0,0,5679,5666,1,0,0,0,
        5679,5680,1,0,0,0,5680,423,1,0,0,0,5681,5682,5,35,0,0,5682,5683,
        5,878,0,0,5683,5684,5,534,0,0,5684,5706,5,489,0,0,5685,5687,5,364,
        0,0,5686,5685,1,0,0,0,5686,5687,1,0,0,0,5687,5688,1,0,0,0,5688,5707,
        5,774,0,0,5689,5704,5,1063,0,0,5690,5691,5,647,0,0,5691,5692,5,1174,
        0,0,5692,5693,5,1170,0,0,5693,5694,5,1194,0,0,5694,5695,5,648,0,
        0,5695,5696,5,1174,0,0,5696,5705,5,1170,0,0,5697,5698,5,592,0,0,
        5698,5699,5,1174,0,0,5699,5700,5,1170,0,0,5700,5701,5,1194,0,0,5701,
        5702,5,594,0,0,5702,5703,5,1174,0,0,5703,5705,5,1170,0,0,5704,5690,
        1,0,0,0,5704,5697,1,0,0,0,5704,5705,1,0,0,0,5705,5707,1,0,0,0,5706,
        5686,1,0,0,0,5706,5689,1,0,0,0,5707,425,1,0,0,0,5708,5709,5,35,0,
        0,5709,5710,5,961,0,0,5710,5711,5,489,0,0,5711,5712,3,1208,604,0,
        5712,5713,7,23,0,0,5713,5714,5,295,0,0,5714,5726,5,110,0,0,5715,
        5716,5,121,0,0,5716,5727,3,1208,604,0,5717,5718,5,690,0,0,5718,5719,
        5,1174,0,0,5719,5727,5,1170,0,0,5720,5721,5,961,0,0,5721,5722,5,
        489,0,0,5722,5727,3,1208,604,0,5723,5724,5,61,0,0,5724,5725,5,489,
        0,0,5725,5727,3,1208,604,0,5726,5715,1,0,0,0,5726,5717,1,0,0,0,5726,
        5720,1,0,0,0,5726,5723,1,0,0,0,5727,427,1,0,0,0,5728,5729,5,197,
        0,0,5729,5733,5,963,0,0,5730,5731,3,1208,604,0,5731,5732,5,1187,
        0,0,5732,5734,1,0,0,0,5733,5730,1,0,0,0,5733,5734,1,0,0,0,5734,5735,
        1,0,0,0,5735,5736,3,1208,604,0,5736,5763,5,363,0,0,5737,5738,3,1208,
        604,0,5738,5739,5,1187,0,0,5739,5741,1,0,0,0,5740,5737,1,0,0,0,5740,
        5741,1,0,0,0,5741,5745,1,0,0,0,5742,5743,3,1208,604,0,5743,5744,
        5,1187,0,0,5744,5746,1,0,0,0,5745,5742,1,0,0,0,5745,5746,1,0,0,0,
        5746,5750,1,0,0,0,5747,5748,3,1208,604,0,5748,5749,5,1187,0,0,5749,
        5751,1,0,0,0,5750,5747,1,0,0,0,5750,5751,1,0,0,0,5751,5752,1,0,0,
        0,5752,5764,3,1208,604,0,5753,5754,3,1208,604,0,5754,5755,5,1187,
        0,0,5755,5757,1,0,0,0,5756,5753,1,0,0,0,5756,5757,1,0,0,0,5757,5761,
        1,0,0,0,5758,5759,3,1208,604,0,5759,5760,5,1187,0,0,5760,5762,1,
        0,0,0,5761,5758,1,0,0,0,5761,5762,1,0,0,0,5762,5764,1,0,0,0,5763,
        5740,1,0,0,0,5763,5756,1,0,0,0,5764,429,1,0,0,0,5765,5766,5,35,0,
        0,5766,5767,5,1035,0,0,5767,5768,3,1208,604,0,5768,5819,5,1063,0,
        0,5769,5771,5,1194,0,0,5770,5769,1,0,0,0,5770,5771,1,0,0,0,5771,
        5772,1,0,0,0,5772,5773,5,584,0,0,5773,5774,5,1174,0,0,5774,5820,
        3,1208,604,0,5775,5777,5,1194,0,0,5776,5775,1,0,0,0,5776,5777,1,
        0,0,0,5777,5778,1,0,0,0,5778,5779,5,248,0,0,5779,5782,5,1174,0,0,
        5780,5783,3,1208,604,0,5781,5783,5,630,0,0,5782,5780,1,0,0,0,5782,
        5781,1,0,0,0,5783,5820,1,0,0,0,5784,5786,5,1194,0,0,5785,5784,1,
        0,0,0,5785,5786,1,0,0,0,5786,5787,1,0,0,0,5787,5788,5,524,0,0,5788,
        5789,5,1174,0,0,5789,5820,3,1208,604,0,5790,5792,5,1194,0,0,5791,
        5790,1,0,0,0,5791,5792,1,0,0,0,5792,5793,1,0,0,0,5793,5794,5,690,
        0,0,5794,5795,5,1174,0,0,5795,5799,5,1170,0,0,5796,5797,5,648,0,
        0,5797,5798,5,1174,0,0,5798,5800,5,1170,0,0,5799,5796,1,0,0,0,5800,
        5801,1,0,0,0,5801,5799,1,0,0,0,5801,5802,1,0,0,0,5802,5820,1,0,0,
        0,5803,5805,5,1194,0,0,5804,5803,1,0,0,0,5804,5805,1,0,0,0,5805,
        5806,1,0,0,0,5806,5807,5,247,0,0,5807,5811,5,1174,0,0,5808,5812,
        5,608,0,0,5809,5812,5,1168,0,0,5810,5812,3,1208,604,0,5811,5808,
        1,0,0,0,5811,5809,1,0,0,0,5811,5810,1,0,0,0,5812,5820,1,0,0,0,5813,
        5815,5,1194,0,0,5814,5813,1,0,0,0,5814,5815,1,0,0,0,5815,5816,1,
        0,0,0,5816,5817,5,25,0,0,5817,5818,5,1174,0,0,5818,5820,7,17,0,0,
        5819,5770,1,0,0,0,5819,5776,1,0,0,0,5819,5785,1,0,0,0,5819,5791,
        1,0,0,0,5819,5804,1,0,0,0,5819,5814,1,0,0,0,5820,5821,1,0,0,0,5821,
        5819,1,0,0,0,5821,5822,1,0,0,0,5822,431,1,0,0,0,5823,5824,5,197,
        0,0,5824,5825,5,1035,0,0,5825,5829,3,1208,604,0,5826,5827,7,58,0,
        0,5827,5828,5,524,0,0,5828,5830,3,1208,604,0,5829,5826,1,0,0,0,5829,
        5830,1,0,0,0,5830,5849,1,0,0,0,5831,5846,5,1063,0,0,5832,5834,5,
        1194,0,0,5833,5832,1,0,0,0,5833,5834,1,0,0,0,5834,5835,1,0,0,0,5835,
        5836,5,248,0,0,5836,5837,5,1174,0,0,5837,5845,3,1208,604,0,5838,
        5840,5,1194,0,0,5839,5838,1,0,0,0,5839,5840,1,0,0,0,5840,5841,1,
        0,0,0,5841,5842,5,25,0,0,5842,5843,5,1174,0,0,5843,5845,7,17,0,0,
        5844,5833,1,0,0,0,5844,5839,1,0,0,0,5845,5848,1,0,0,0,5846,5844,
        1,0,0,0,5846,5847,1,0,0,0,5847,5850,1,0,0,0,5848,5846,1,0,0,0,5849,
        5831,1,0,0,0,5849,5850,1,0,0,0,5850,5970,1,0,0,0,5851,5852,5,197,
        0,0,5852,5933,5,1035,0,0,5853,5888,3,1208,604,0,5854,5885,5,1063,
        0,0,5855,5857,5,1194,0,0,5856,5855,1,0,0,0,5856,5857,1,0,0,0,5857,
        5858,1,0,0,0,5858,5859,5,248,0,0,5859,5860,5,1174,0,0,5860,5884,
        3,1208,604,0,5861,5863,5,1194,0,0,5862,5861,1,0,0,0,5862,5863,1,
        0,0,0,5863,5864,1,0,0,0,5864,5865,5,247,0,0,5865,5869,5,1174,0,0,
        5866,5870,5,608,0,0,5867,5870,5,1168,0,0,5868,5870,3,1208,604,0,
        5869,5866,1,0,0,0,5869,5867,1,0,0,0,5869,5868,1,0,0,0,5870,5884,
        1,0,0,0,5871,5873,5,1194,0,0,5872,5871,1,0,0,0,5872,5873,1,0,0,0,
        5873,5874,1,0,0,0,5874,5875,5,901,0,0,5875,5876,5,1174,0,0,5876,
        5884,5,1171,0,0,5877,5879,5,1194,0,0,5878,5877,1,0,0,0,5878,5879,
        1,0,0,0,5879,5880,1,0,0,0,5880,5881,5,25,0,0,5881,5882,5,1174,0,
        0,5882,5884,7,17,0,0,5883,5856,1,0,0,0,5883,5862,1,0,0,0,5883,5872,
        1,0,0,0,5883,5878,1,0,0,0,5884,5887,1,0,0,0,5885,5883,1,0,0,0,5885,
        5886,1,0,0,0,5886,5889,1,0,0,0,5887,5885,1,0,0,0,5888,5854,1,0,0,
        0,5888,5889,1,0,0,0,5889,5934,1,0,0,0,5890,5891,3,1208,604,0,5891,
        5892,5,1063,0,0,5892,5893,5,690,0,0,5893,5894,5,1174,0,0,5894,5925,
        5,1170,0,0,5895,5897,5,1194,0,0,5896,5895,1,0,0,0,5896,5897,1,0,
        0,0,5897,5898,1,0,0,0,5898,5899,5,248,0,0,5899,5900,5,1174,0,0,5900,
        5924,3,1208,604,0,5901,5903,5,1194,0,0,5902,5901,1,0,0,0,5902,5903,
        1,0,0,0,5903,5904,1,0,0,0,5904,5905,5,247,0,0,5905,5909,5,1174,0,
        0,5906,5910,5,608,0,0,5907,5910,5,1168,0,0,5908,5910,3,1208,604,
        0,5909,5906,1,0,0,0,5909,5907,1,0,0,0,5909,5908,1,0,0,0,5910,5924,
        1,0,0,0,5911,5913,5,1194,0,0,5912,5911,1,0,0,0,5912,5913,1,0,0,0,
        5913,5914,1,0,0,0,5914,5915,5,901,0,0,5915,5916,5,1174,0,0,5916,
        5924,5,1171,0,0,5917,5919,5,1194,0,0,5918,5917,1,0,0,0,5918,5919,
        1,0,0,0,5919,5920,1,0,0,0,5920,5921,5,25,0,0,5921,5922,5,1174,0,
        0,5922,5924,7,17,0,0,5923,5896,1,0,0,0,5923,5902,1,0,0,0,5923,5912,
        1,0,0,0,5923,5918,1,0,0,0,5924,5927,1,0,0,0,5925,5923,1,0,0,0,5925,
        5926,1,0,0,0,5926,5934,1,0,0,0,5927,5925,1,0,0,0,5928,5929,3,1208,
        604,0,5929,5930,5,378,0,0,5930,5931,5,329,0,0,5931,5932,5,733,0,
        0,5932,5934,1,0,0,0,5933,5853,1,0,0,0,5933,5890,1,0,0,0,5933,5928,
        1,0,0,0,5934,5970,1,0,0,0,5935,5936,5,197,0,0,5936,5937,5,1035,0,
        0,5937,5964,3,1208,604,0,5938,5939,5,1065,0,0,5939,5954,5,524,0,
        0,5940,5942,5,1194,0,0,5941,5940,1,0,0,0,5941,5942,1,0,0,0,5942,
        5943,1,0,0,0,5943,5944,5,248,0,0,5944,5945,5,1174,0,0,5945,5953,
        3,1208,604,0,5946,5948,5,1194,0,0,5947,5946,1,0,0,0,5947,5948,1,
        0,0,0,5948,5949,1,0,0,0,5949,5950,5,25,0,0,5950,5951,5,1174,0,0,
        5951,5953,7,17,0,0,5952,5941,1,0,0,0,5952,5947,1,0,0,0,5953,5956,
        1,0,0,0,5954,5952,1,0,0,0,5954,5955,1,0,0,0,5955,5965,1,0,0,0,5956,
        5954,1,0,0,0,5957,5958,7,58,0,0,5958,5959,5,121,0,0,5959,5965,3,
        1208,604,0,5960,5961,7,58,0,0,5961,5962,5,61,0,0,5962,5963,5,489,
        0,0,5963,5965,3,1208,604,0,5964,5938,1,0,0,0,5964,5957,1,0,0,0,5964,
        5960,1,0,0,0,5965,5970,1,0,0,0,5966,5967,5,197,0,0,5967,5968,5,1035,
        0,0,5968,5970,3,1208,604,0,5969,5823,1,0,0,0,5969,5851,1,0,0,0,5969,
        5935,1,0,0,0,5969,5966,1,0,0,0,5970,433,1,0,0,0,5971,5972,5,197,
        0,0,5972,5973,5,1035,0,0,5973,5979,3,1208,604,0,5974,5975,7,58,0,
        0,5975,5976,5,524,0,0,5976,5980,3,1208,604,0,5977,5978,5,1065,0,
        0,5978,5980,5,524,0,0,5979,5974,1,0,0,0,5979,5977,1,0,0,0,5979,5980,
        1,0,0,0,5980,5985,1,0,0,0,5981,5982,5,1063,0,0,5982,5983,5,248,0,
        0,5983,5984,5,1174,0,0,5984,5986,3,1208,604,0,5985,5981,1,0,0,0,
        5985,5986,1,0,0,0,5986,6000,1,0,0,0,5987,5988,5,197,0,0,5988,5989,
        5,1035,0,0,5989,5990,3,1208,604,0,5990,5991,5,378,0,0,5991,5992,
        5,329,0,0,5992,5997,5,733,0,0,5993,5994,5,1063,0,0,5994,5995,5,248,
        0,0,5995,5996,5,1174,0,0,5996,5998,3,1208,604,0,5997,5993,1,0,0,
        0,5997,5998,1,0,0,0,5998,6000,1,0,0,0,5999,5971,1,0,0,0,5999,5987,
        1,0,0,0,6000,435,1,0,0,0,6001,6002,5,35,0,0,6002,6003,5,1035,0,0,
        6003,6004,3,1208,604,0,6004,6029,5,1063,0,0,6005,6007,5,1194,0,0,
        6006,6005,1,0,0,0,6006,6007,1,0,0,0,6007,6008,1,0,0,0,6008,6009,
        5,584,0,0,6009,6010,5,1174,0,0,6010,6030,3,1208,604,0,6011,6013,
        5,1194,0,0,6012,6011,1,0,0,0,6012,6013,1,0,0,0,6013,6014,1,0,0,0,
        6014,6015,5,248,0,0,6015,6016,5,1174,0,0,6016,6030,3,1208,604,0,
        6017,6019,5,1194,0,0,6018,6017,1,0,0,0,6018,6019,1,0,0,0,6019,6020,
        1,0,0,0,6020,6021,5,524,0,0,6021,6022,5,1174,0,0,6022,6030,3,1208,
        604,0,6023,6025,5,1194,0,0,6024,6023,1,0,0,0,6024,6025,1,0,0,0,6025,
        6026,1,0,0,0,6026,6027,5,25,0,0,6027,6028,5,1174,0,0,6028,6030,7,
        17,0,0,6029,6006,1,0,0,0,6029,6012,1,0,0,0,6029,6018,1,0,0,0,6029,
        6024,1,0,0,0,6030,6031,1,0,0,0,6031,6029,1,0,0,0,6031,6032,1,0,0,
        0,6032,437,1,0,0,0,6033,6034,5,35,0,0,6034,6035,5,1069,0,0,6035,
        6038,5,403,0,0,6036,6039,3,1208,604,0,6037,6039,5,245,0,0,6038,6036,
        1,0,0,0,6038,6037,1,0,0,0,6039,6071,1,0,0,0,6040,6041,5,1063,0,0,
        6041,6066,5,1192,0,0,6042,6043,5,441,0,0,6043,6044,5,1174,0,0,6044,
        6067,7,59,0,0,6045,6047,5,1194,0,0,6046,6045,1,0,0,0,6046,6047,1,
        0,0,0,6047,6048,1,0,0,0,6048,6049,5,793,0,0,6049,6050,5,1174,0,0,
        6050,6067,5,1168,0,0,6051,6053,5,1194,0,0,6052,6051,1,0,0,0,6052,
        6053,1,0,0,0,6053,6054,1,0,0,0,6054,6055,5,792,0,0,6055,6056,5,1174,
        0,0,6056,6067,5,1168,0,0,6057,6058,5,794,0,0,6058,6059,5,1174,0,
        0,6059,6067,5,1168,0,0,6060,6061,5,545,0,0,6061,6062,5,1174,0,0,
        6062,6067,5,1168,0,0,6063,6064,5,406,0,0,6064,6065,5,1174,0,0,6065,
        6067,5,1168,0,0,6066,6042,1,0,0,0,6066,6046,1,0,0,0,6066,6052,1,
        0,0,0,6066,6057,1,0,0,0,6066,6060,1,0,0,0,6066,6063,1,0,0,0,6067,
        6068,1,0,0,0,6068,6066,1,0,0,0,6068,6069,1,0,0,0,6069,6070,1,0,0,
        0,6070,6072,5,1193,0,0,6071,6040,1,0,0,0,6071,6072,1,0,0,0,6072,
        6078,1,0,0,0,6073,6076,5,1038,0,0,6074,6077,3,1208,604,0,6075,6077,
        5,245,0,0,6076,6074,1,0,0,0,6076,6075,1,0,0,0,6077,6079,1,0,0,0,
        6078,6073,1,0,0,0,6078,6079,1,0,0,0,6079,439,1,0,0,0,6080,6081,5,
        197,0,0,6081,6082,5,1069,0,0,6082,6083,5,403,0,0,6083,6115,3,1208,
        604,0,6084,6085,5,1063,0,0,6085,6110,5,1192,0,0,6086,6087,5,441,
        0,0,6087,6088,5,1174,0,0,6088,6111,7,59,0,0,6089,6091,5,1194,0,0,
        6090,6089,1,0,0,0,6090,6091,1,0,0,0,6091,6092,1,0,0,0,6092,6093,
        5,793,0,0,6093,6094,5,1174,0,0,6094,6111,5,1168,0,0,6095,6097,5,
        1194,0,0,6096,6095,1,0,0,0,6096,6097,1,0,0,0,6097,6098,1,0,0,0,6098,
        6099,5,792,0,0,6099,6100,5,1174,0,0,6100,6111,5,1168,0,0,6101,6102,
        5,794,0,0,6102,6103,5,1174,0,0,6103,6111,5,1168,0,0,6104,6105,5,
        545,0,0,6105,6106,5,1174,0,0,6106,6111,5,1168,0,0,6107,6108,5,406,
        0,0,6108,6109,5,1174,0,0,6109,6111,5,1168,0,0,6110,6086,1,0,0,0,
        6110,6090,1,0,0,0,6110,6096,1,0,0,0,6110,6101,1,0,0,0,6110,6104,
        1,0,0,0,6110,6107,1,0,0,0,6111,6112,1,0,0,0,6112,6110,1,0,0,0,6112,
        6113,1,0,0,0,6113,6114,1,0,0,0,6114,6116,5,1193,0,0,6115,6084,1,
        0,0,0,6115,6116,1,0,0,0,6116,6130,1,0,0,0,6117,6120,5,1038,0,0,6118,
        6121,3,1208,604,0,6119,6121,5,245,0,0,6120,6118,1,0,0,0,6120,6119,
        1,0,0,0,6120,6121,1,0,0,0,6121,6128,1,0,0,0,6122,6124,5,1194,0,0,
        6123,6122,1,0,0,0,6123,6124,1,0,0,0,6124,6125,1,0,0,0,6125,6126,
        5,329,0,0,6126,6129,3,1208,604,0,6127,6129,5,245,0,0,6128,6123,1,
        0,0,0,6128,6127,1,0,0,0,6128,6129,1,0,0,0,6129,6131,1,0,0,0,6130,
        6117,1,0,0,0,6130,6131,1,0,0,0,6131,441,1,0,0,0,6132,6133,5,197,
        0,0,6133,6134,5,1074,0,0,6134,6135,5,844,0,0,6135,6139,5,152,0,0,
        6136,6137,3,1208,604,0,6137,6138,5,1187,0,0,6138,6140,1,0,0,0,6139,
        6136,1,0,0,0,6139,6140,1,0,0,0,6140,6141,1,0,0,0,6141,6142,3,1208,
        604,0,6142,6146,5,56,0,0,6143,6147,5,1170,0,0,6144,6147,3,1208,604,
        0,6145,6147,5,1166,0,0,6146,6143,1,0,0,0,6146,6144,1,0,0,0,6146,
        6145,1,0,0,0,6147,443,1,0,0,0,6148,6149,5,197,0,0,6149,6150,5,687,
        0,0,6150,6151,5,384,0,0,6151,6152,3,1208,604,0,6152,6153,5,1192,
        0,0,6153,6154,3,1200,600,0,6154,6155,5,1193,0,0,6155,6156,5,56,0,
        0,6156,6158,5,748,0,0,6157,6159,7,60,0,0,6158,6157,1,0,0,0,6158,
        6159,1,0,0,0,6159,6160,1,0,0,0,6160,6161,5,363,0,0,6161,6162,5,1042,
        0,0,6162,6163,5,1192,0,0,6163,6164,3,1110,555,0,6164,6165,5,1193,
        0,0,6165,445,1,0,0,0,6166,6167,5,197,0,0,6167,6168,5,687,0,0,6168,
        6169,5,848,0,0,6169,6170,3,1208,604,0,6170,6171,5,56,0,0,6171,6172,
        5,687,0,0,6172,6174,3,1208,604,0,6173,6175,5,22,0,0,6174,6173,1,
        0,0,0,6174,6175,1,0,0,0,6175,6176,1,0,0,0,6176,6177,5,986,0,0,6177,
        6178,5,1192,0,0,6178,6183,3,1208,604,0,6179,6180,5,1194,0,0,6180,
        6182,3,1208,604,0,6181,6179,1,0,0,0,6182,6185,1,0,0,0,6183,6181,
        1,0,0,0,6183,6184,1,0,0,0,6184,6186,1,0,0,0,6185,6183,1,0,0,0,6186,
        6187,5,1193,0,0,6187,447,1,0,0,0,6188,6189,5,197,0,0,6189,6192,5,
        741,0,0,6190,6193,3,1148,574,0,6191,6193,3,1208,604,0,6192,6190,
        1,0,0,0,6192,6191,1,0,0,0,6193,6195,1,0,0,0,6194,6196,3,450,225,
        0,6195,6194,1,0,0,0,6195,6196,1,0,0,0,6196,6200,1,0,0,0,6197,6198,
        5,649,0,0,6198,6201,3,1208,604,0,6199,6201,5,243,0,0,6200,6197,1,
        0,0,0,6200,6199,1,0,0,0,6200,6201,1,0,0,0,6201,449,1,0,0,0,6202,
        6209,5,1063,0,0,6203,6204,5,937,0,0,6204,6205,5,1174,0,0,6205,6207,
        3,1174,587,0,6206,6208,5,1194,0,0,6207,6206,1,0,0,0,6207,6208,1,
        0,0,0,6208,6210,1,0,0,0,6209,6203,1,0,0,0,6209,6210,1,0,0,0,6210,
        6217,1,0,0,0,6211,6212,5,810,0,0,6212,6213,5,1174,0,0,6213,6215,
        3,1174,587,0,6214,6216,5,1194,0,0,6215,6214,1,0,0,0,6215,6216,1,
        0,0,0,6216,6218,1,0,0,0,6217,6211,1,0,0,0,6217,6218,1,0,0,0,6218,
        6264,1,0,0,0,6219,6220,5,9,0,0,6220,6258,5,1192,0,0,6221,6222,5,
        937,0,0,6222,6223,5,1174,0,0,6223,6225,3,1174,587,0,6224,6226,5,
        1194,0,0,6225,6224,1,0,0,0,6225,6226,1,0,0,0,6226,6228,1,0,0,0,6227,
        6221,1,0,0,0,6227,6228,1,0,0,0,6228,6235,1,0,0,0,6229,6230,5,729,
        0,0,6230,6231,5,1174,0,0,6231,6233,3,1156,578,0,6232,6234,5,1194,
        0,0,6233,6232,1,0,0,0,6233,6234,1,0,0,0,6234,6236,1,0,0,0,6235,6229,
        1,0,0,0,6235,6236,1,0,0,0,6236,6243,1,0,0,0,6237,6238,5,554,0,0,
        6238,6239,5,1174,0,0,6239,6241,5,1168,0,0,6240,6242,5,1194,0,0,6241,
        6240,1,0,0,0,6241,6242,1,0,0,0,6242,6244,1,0,0,0,6243,6237,1,0,0,
        0,6243,6244,1,0,0,0,6244,6255,1,0,0,0,6245,6246,5,318,0,0,6246,6250,
        5,56,0,0,6247,6251,5,866,0,0,6248,6251,5,1170,0,0,6249,6251,5,674,
        0,0,6250,6247,1,0,0,0,6250,6248,1,0,0,0,6250,6249,1,0,0,0,6251,6253,
        1,0,0,0,6252,6254,5,1194,0,0,6253,6252,1,0,0,0,6253,6254,1,0,0,0,
        6254,6256,1,0,0,0,6255,6245,1,0,0,0,6255,6256,1,0,0,0,6256,6259,
        1,0,0,0,6257,6259,5,280,0,0,6258,6227,1,0,0,0,6258,6257,1,0,0,0,
        6259,6260,1,0,0,0,6260,6262,5,1193,0,0,6261,6263,5,1194,0,0,6262,
        6261,1,0,0,0,6262,6263,1,0,0,0,6263,6265,1,0,0,0,6264,6219,1,0,0,
        0,6264,6265,1,0,0,0,6265,6274,1,0,0,0,6266,6267,5,710,0,0,6267,6268,
        5,1192,0,0,6268,6269,5,937,0,0,6269,6270,5,1174,0,0,6270,6271,3,
        1174,587,0,6271,6272,1,0,0,0,6272,6273,5,1193,0,0,6273,6275,1,0,
        0,0,6274,6266,1,0,0,0,6274,6275,1,0,0,0,6275,451,1,0,0,0,6276,6277,
        5,35,0,0,6277,6280,5,741,0,0,6278,6281,3,1148,574,0,6279,6281,3,
        1208,604,0,6280,6278,1,0,0,0,6280,6279,1,0,0,0,6281,6284,1,0,0,0,
        6282,6285,3,450,225,0,6283,6285,3,454,227,0,6284,6282,1,0,0,0,6284,
        6283,1,0,0,0,6285,453,1,0,0,0,6286,6292,5,767,0,0,6287,6288,5,1063,
        0,0,6288,6289,5,1192,0,0,6289,6290,3,456,228,0,6290,6291,5,1193,
        0,0,6291,6293,1,0,0,0,6292,6287,1,0,0,0,6292,6293,1,0,0,0,6293,6308,
        1,0,0,0,6294,6299,5,782,0,0,6295,6296,5,1063,0,0,6296,6297,5,517,
        0,0,6297,6298,5,1174,0,0,6298,6300,3,1174,587,0,6299,6295,1,0,0,
        0,6299,6300,1,0,0,0,6300,6308,1,0,0,0,6301,6302,5,581,0,0,6302,6305,
        5,986,0,0,6303,6306,3,1208,604,0,6304,6306,5,243,0,0,6305,6303,1,
        0,0,0,6305,6304,1,0,0,0,6306,6308,1,0,0,0,6307,6286,1,0,0,0,6307,
        6294,1,0,0,0,6307,6301,1,0,0,0,6308,455,1,0,0,0,6309,6310,5,538,
        0,0,6310,6311,5,1174,0,0,6311,6312,5,1168,0,0,6312,457,1,0,0,0,6313,
        6314,5,197,0,0,6314,6315,5,186,0,0,6315,6318,3,1186,593,0,6316,6317,
        5,68,0,0,6317,6319,3,1208,604,0,6318,6316,1,0,0,0,6318,6319,1,0,
        0,0,6319,6320,1,0,0,0,6320,6331,5,1192,0,0,6321,6324,3,1208,604,
        0,6322,6324,5,243,0,0,6323,6321,1,0,0,0,6323,6322,1,0,0,0,6324,6325,
        1,0,0,0,6325,6326,5,872,0,0,6326,6327,5,110,0,0,6327,6329,7,61,0,
        0,6328,6330,5,1194,0,0,6329,6328,1,0,0,0,6329,6330,1,0,0,0,6330,
        6332,1,0,0,0,6331,6323,1,0,0,0,6332,6333,1,0,0,0,6333,6331,1,0,0,
        0,6333,6334,1,0,0,0,6334,6335,1,0,0,0,6335,6336,5,1193,0,0,6336,
        459,1,0,0,0,6337,6344,3,1182,591,0,6338,6344,3,1184,592,0,6339,6344,
        3,1190,595,0,6340,6344,3,1194,597,0,6341,6344,3,1198,599,0,6342,
        6344,3,1192,596,0,6343,6337,1,0,0,0,6343,6338,1,0,0,0,6343,6339,
        1,0,0,0,6343,6340,1,0,0,0,6343,6341,1,0,0,0,6343,6342,1,0,0,0,6344,
        461,1,0,0,0,6345,6346,5,197,0,0,6346,6347,5,565,0,0,6347,6348,5,
        1010,0,0,6348,6351,3,1208,604,0,6349,6350,5,68,0,0,6350,6352,3,1208,
        604,0,6351,6349,1,0,0,0,6351,6352,1,0,0,0,6352,6353,1,0,0,0,6353,
        6354,5,1039,0,0,6354,6363,5,1174,0,0,6355,6364,5,608,0,0,6356,6364,
        5,289,0,0,6357,6364,5,1058,0,0,6358,6359,5,1040,0,0,6359,6360,5,
        1063,0,0,6360,6361,5,844,0,0,6361,6362,5,152,0,0,6362,6364,3,1208,
        604,0,6363,6355,1,0,0,0,6363,6356,1,0,0,0,6363,6357,1,0,0,0,6363,
        6358,1,0,0,0,6364,463,1,0,0,0,6365,6367,3,930,465,0,6366,6365,1,
        0,0,0,6366,6367,1,0,0,0,6367,6368,1,0,0,0,6368,6376,5,564,0,0,6369,
        6370,5,987,0,0,6370,6371,5,1192,0,0,6371,6372,3,914,457,0,6372,6374,
        5,1193,0,0,6373,6375,5,695,0,0,6374,6373,1,0,0,0,6374,6375,1,0,0,
        0,6375,6377,1,0,0,0,6376,6369,1,0,0,0,6376,6377,1,0,0,0,6377,6379,
        1,0,0,0,6378,6380,5,462,0,0,6379,6378,1,0,0,0,6379,6380,1,0,0,0,
        6380,6381,1,0,0,0,6381,6383,3,1160,580,0,6382,6384,3,1092,546,0,
        6383,6382,1,0,0,0,6383,6384,1,0,0,0,6384,6386,1,0,0,0,6385,6387,
        3,1088,544,0,6386,6385,1,0,0,0,6386,6387,1,0,0,0,6387,6388,1,0,0,
        0,6388,6389,5,1038,0,0,6389,6390,3,986,493,0,6390,6391,5,649,0,0,
        6391,6393,3,938,469,0,6392,6394,3,466,233,0,6393,6392,1,0,0,0,6394,
        6395,1,0,0,0,6395,6393,1,0,0,0,6395,6396,1,0,0,0,6396,6398,1,0,0,
        0,6397,6399,3,490,245,0,6398,6397,1,0,0,0,6398,6399,1,0,0,0,6399,
        6401,1,0,0,0,6400,6402,3,968,484,0,6401,6400,1,0,0,0,6401,6402,1,
        0,0,0,6402,6403,1,0,0,0,6403,6404,5,1195,0,0,6404,465,1,0,0,0,6405,
        6406,5,1059,0,0,6406,6409,5,535,0,0,6407,6408,5,37,0,0,6408,6410,
        3,938,469,0,6409,6407,1,0,0,0,6409,6410,1,0,0,0,6410,6411,1,0,0,
        0,6411,6412,5,979,0,0,6412,6414,3,468,234,0,6413,6405,1,0,0,0,6414,
        6415,1,0,0,0,6415,6413,1,0,0,0,6415,6416,1,0,0,0,6416,6446,1,0,0,
        0,6417,6418,5,1059,0,0,6418,6419,5,614,0,0,6419,6422,5,535,0,0,6420,
        6421,5,110,0,0,6421,6423,5,973,0,0,6422,6420,1,0,0,0,6422,6423,1,
        0,0,0,6423,6426,1,0,0,0,6424,6425,5,37,0,0,6425,6427,3,938,469,0,
        6426,6424,1,0,0,0,6426,6427,1,0,0,0,6427,6428,1,0,0,0,6428,6429,
        5,979,0,0,6429,6446,3,470,235,0,6430,6431,5,1059,0,0,6431,6432,5,
        614,0,0,6432,6433,5,535,0,0,6433,6434,5,110,0,0,6434,6437,5,913,
        0,0,6435,6436,5,37,0,0,6436,6438,3,938,469,0,6437,6435,1,0,0,0,6437,
        6438,1,0,0,0,6438,6439,1,0,0,0,6439,6440,5,979,0,0,6440,6442,3,468,
        234,0,6441,6430,1,0,0,0,6442,6443,1,0,0,0,6443,6441,1,0,0,0,6443,
        6444,1,0,0,0,6444,6446,1,0,0,0,6445,6413,1,0,0,0,6445,6417,1,0,0,
        0,6445,6441,1,0,0,0,6446,467,1,0,0,0,6447,6448,5,1028,0,0,6448,6449,
        5,887,0,0,6449,6454,3,936,468,0,6450,6451,5,1194,0,0,6451,6453,3,
        936,468,0,6452,6450,1,0,0,0,6453,6456,1,0,0,0,6454,6452,1,0,0,0,
        6454,6455,1,0,0,0,6455,6459,1,0,0,0,6456,6454,1,0,0,0,6457,6459,
        5,252,0,0,6458,6447,1,0,0,0,6458,6457,1,0,0,0,6459,469,1,0,0,0,6460,
        6465,5,457,0,0,6461,6462,5,1192,0,0,6462,6463,3,1170,585,0,6463,
        6464,5,1193,0,0,6464,6466,1,0,0,0,6465,6461,1,0,0,0,6465,6466,1,
        0,0,0,6466,6470,1,0,0,0,6467,6471,3,1108,554,0,6468,6469,5,243,0,
        0,6469,6471,5,1042,0,0,6470,6467,1,0,0,0,6470,6468,1,0,0,0,6471,
        471,1,0,0,0,6472,6474,3,930,465,0,6473,6472,1,0,0,0,6473,6474,1,
        0,0,0,6474,6475,1,0,0,0,6475,6485,5,252,0,0,6476,6477,5,987,0,0,
        6477,6478,5,1192,0,0,6478,6479,3,914,457,0,6479,6481,5,1193,0,0,
        6480,6482,5,695,0,0,6481,6480,1,0,0,0,6481,6482,1,0,0,0,6482,6486,
        1,0,0,0,6483,6484,5,987,0,0,6484,6486,5,1168,0,0,6485,6476,1,0,0,
        0,6485,6483,1,0,0,0,6485,6486,1,0,0,0,6486,6488,1,0,0,0,6487,6489,
        5,378,0,0,6488,6487,1,0,0,0,6488,6489,1,0,0,0,6489,6490,1,0,0,0,
        6490,6492,3,474,237,0,6491,6493,3,1092,546,0,6492,6491,1,0,0,0,6492,
        6493,1,0,0,0,6493,6495,1,0,0,0,6494,6496,3,490,245,0,6495,6494,1,
        0,0,0,6495,6496,1,0,0,0,6496,6499,1,0,0,0,6497,6498,5,378,0,0,6498,
        6500,3,986,493,0,6499,6497,1,0,0,0,6499,6500,1,0,0,0,6500,6514,1,
        0,0,0,6501,6512,5,1060,0,0,6502,6513,3,938,469,0,6503,6504,5,204,
        0,0,6504,6510,5,642,0,0,6505,6507,5,397,0,0,6506,6505,1,0,0,0,6506,
        6507,1,0,0,0,6507,6508,1,0,0,0,6508,6511,3,1172,586,0,6509,6511,
        5,1166,0,0,6510,6506,1,0,0,0,6510,6509,1,0,0,0,6511,6513,1,0,0,0,
        6512,6502,1,0,0,0,6512,6503,1,0,0,0,6513,6515,1,0,0,0,6514,6501,
        1,0,0,0,6514,6515,1,0,0,0,6515,6517,1,0,0,0,6516,6518,3,958,479,
        0,6517,6516,1,0,0,0,6517,6518,1,0,0,0,6518,6520,1,0,0,0,6519,6521,
        3,968,484,0,6520,6519,1,0,0,0,6520,6521,1,0,0,0,6521,6523,1,0,0,
        0,6522,6524,5,1195,0,0,6523,6522,1,0,0,0,6523,6524,1,0,0,0,6524,
        473,1,0,0,0,6525,6529,3,1160,580,0,6526,6529,3,716,358,0,6527,6529,
        5,1166,0,0,6528,6525,1,0,0,0,6528,6526,1,0,0,0,6528,6527,1,0,0,0,
        6529,475,1,0,0,0,6530,6532,3,930,465,0,6531,6530,1,0,0,0,6531,6532,
        1,0,0,0,6532,6533,1,0,0,0,6533,6541,5,457,0,0,6534,6535,5,987,0,
        0,6535,6536,5,1192,0,0,6536,6537,3,914,457,0,6537,6539,5,1193,0,
        0,6538,6540,5,695,0,0,6539,6538,1,0,0,0,6539,6540,1,0,0,0,6540,6542,
        1,0,0,0,6541,6534,1,0,0,0,6541,6542,1,0,0,0,6542,6544,1,0,0,0,6543,
        6545,5,462,0,0,6544,6543,1,0,0,0,6544,6545,1,0,0,0,6545,6548,1,0,
        0,0,6546,6549,3,1160,580,0,6547,6549,3,716,358,0,6548,6546,1,0,0,
        0,6548,6547,1,0,0,0,6549,6551,1,0,0,0,6550,6552,3,1092,546,0,6551,
        6550,1,0,0,0,6551,6552,1,0,0,0,6552,6557,1,0,0,0,6553,6554,5,1192,
        0,0,6554,6555,3,1166,583,0,6555,6556,5,1193,0,0,6556,6558,1,0,0,
        0,6557,6553,1,0,0,0,6557,6558,1,0,0,0,6558,6560,1,0,0,0,6559,6561,
        3,490,245,0,6560,6559,1,0,0,0,6560,6561,1,0,0,0,6561,6562,1,0,0,
        0,6562,6564,3,478,239,0,6563,6565,3,958,479,0,6564,6563,1,0,0,0,
        6564,6565,1,0,0,0,6565,6567,1,0,0,0,6566,6568,3,968,484,0,6567,6566,
        1,0,0,0,6567,6568,1,0,0,0,6568,6570,1,0,0,0,6569,6571,5,1195,0,0,
        6570,6569,1,0,0,0,6570,6571,1,0,0,0,6571,477,1,0,0,0,6572,6578,3,
        1108,554,0,6573,6578,3,1034,517,0,6574,6578,3,746,373,0,6575,6576,
        5,243,0,0,6576,6578,5,1042,0,0,6577,6572,1,0,0,0,6577,6573,1,0,0,
        0,6577,6574,1,0,0,0,6577,6575,1,0,0,0,6578,479,1,0,0,0,6579,6581,
        5,1192,0,0,6580,6579,1,0,0,0,6580,6581,1,0,0,0,6581,6582,1,0,0,0,
        6582,6587,5,768,0,0,6583,6588,5,22,0,0,6584,6588,5,272,0,0,6585,
        6588,3,948,474,0,6586,6588,5,1198,0,0,6587,6583,1,0,0,0,6587,6584,
        1,0,0,0,6587,6585,1,0,0,0,6587,6586,1,0,0,0,6588,6597,1,0,0,0,6589,
        6590,5,1166,0,0,6590,6591,5,1174,0,0,6591,6593,3,914,457,0,6592,
        6594,5,1194,0,0,6593,6592,1,0,0,0,6593,6594,1,0,0,0,6594,6596,1,
        0,0,0,6595,6589,1,0,0,0,6596,6599,1,0,0,0,6597,6595,1,0,0,0,6597,
        6598,1,0,0,0,6598,6600,1,0,0,0,6599,6597,1,0,0,0,6600,6601,5,378,
        0,0,6601,6607,3,1148,574,0,6602,6603,5,462,0,0,6603,6604,3,1208,
        604,0,6604,6605,5,1060,0,0,6605,6606,3,938,469,0,6606,6608,1,0,0,
        0,6607,6602,1,0,0,0,6607,6608,1,0,0,0,6608,6610,1,0,0,0,6609,6611,
        5,1193,0,0,6610,6609,1,0,0,0,6610,6611,1,0,0,0,6611,481,1,0,0,0,
        6612,6614,3,930,465,0,6613,6612,1,0,0,0,6613,6614,1,0,0,0,6614,6615,
        1,0,0,0,6615,6616,3,484,242,0,6616,483,1,0,0,0,6617,6619,3,942,471,
        0,6618,6620,3,956,478,0,6619,6618,1,0,0,0,6619,6620,1,0,0,0,6620,
        6622,1,0,0,0,6621,6623,3,958,479,0,6622,6621,1,0,0,0,6622,6623,1,
        0,0,0,6623,6625,1,0,0,0,6624,6626,3,968,484,0,6625,6624,1,0,0,0,
        6625,6626,1,0,0,0,6626,6628,1,0,0,0,6627,6629,5,1195,0,0,6628,6627,
        1,0,0,0,6628,6629,1,0,0,0,6629,485,1,0,0,0,6630,6633,5,1166,0,0,
        6631,6633,3,1202,601,0,6632,6630,1,0,0,0,6632,6631,1,0,0,0,6633,
        487,1,0,0,0,6634,6636,3,930,465,0,6635,6634,1,0,0,0,6635,6636,1,
        0,0,0,6636,6637,1,0,0,0,6637,6645,5,1028,0,0,6638,6639,5,987,0,0,
        6639,6640,5,1192,0,0,6640,6641,3,914,457,0,6641,6643,5,1193,0,0,
        6642,6644,5,695,0,0,6643,6642,1,0,0,0,6643,6644,1,0,0,0,6644,6646,
        1,0,0,0,6645,6638,1,0,0,0,6645,6646,1,0,0,0,6646,6649,1,0,0,0,6647,
        6650,3,1160,580,0,6648,6650,3,716,358,0,6649,6647,1,0,0,0,6649,6648,
        1,0,0,0,6650,6652,1,0,0,0,6651,6653,3,1092,546,0,6652,6651,1,0,0,
        0,6652,6653,1,0,0,0,6653,6654,1,0,0,0,6654,6655,5,887,0,0,6655,6660,
        3,934,467,0,6656,6657,5,1194,0,0,6657,6659,3,934,467,0,6658,6656,
        1,0,0,0,6659,6662,1,0,0,0,6660,6658,1,0,0,0,6660,6661,1,0,0,0,6661,
        6664,1,0,0,0,6662,6660,1,0,0,0,6663,6665,3,490,245,0,6664,6663,1,
        0,0,0,6664,6665,1,0,0,0,6665,6668,1,0,0,0,6666,6667,5,378,0,0,6667,
        6669,3,986,493,0,6668,6666,1,0,0,0,6668,6669,1,0,0,0,6669,6683,1,
        0,0,0,6670,6681,5,1060,0,0,6671,6682,3,938,469,0,6672,6673,5,204,
        0,0,6673,6679,5,642,0,0,6674,6676,5,397,0,0,6675,6674,1,0,0,0,6675,
        6676,1,0,0,0,6676,6677,1,0,0,0,6677,6680,3,1172,586,0,6678,6680,
        5,1166,0,0,6679,6675,1,0,0,0,6679,6678,1,0,0,0,6680,6682,1,0,0,0,
        6681,6671,1,0,0,0,6681,6672,1,0,0,0,6682,6684,1,0,0,0,6683,6670,
        1,0,0,0,6683,6684,1,0,0,0,6684,6686,1,0,0,0,6685,6687,3,958,479,
        0,6686,6685,1,0,0,0,6686,6687,1,0,0,0,6687,6689,1,0,0,0,6688,6690,
        3,968,484,0,6689,6688,1,0,0,0,6689,6690,1,0,0,0,6690,6692,1,0,0,
        0,6691,6693,5,1195,0,0,6692,6691,1,0,0,0,6692,6693,1,0,0,0,6693,
        489,1,0,0,0,6694,6695,5,671,0,0,6695,6700,3,492,246,0,6696,6697,
        5,1194,0,0,6697,6699,3,492,246,0,6698,6696,1,0,0,0,6699,6702,1,0,
        0,0,6700,6698,1,0,0,0,6700,6701,1,0,0,0,6701,6714,1,0,0,0,6702,6700,
        1,0,0,0,6703,6706,5,462,0,0,6704,6707,5,1166,0,0,6705,6707,3,1150,
        575,0,6706,6704,1,0,0,0,6706,6705,1,0,0,0,6707,6712,1,0,0,0,6708,
        6709,5,1192,0,0,6709,6710,3,1170,585,0,6710,6711,5,1193,0,0,6711,
        6713,1,0,0,0,6712,6708,1,0,0,0,6712,6713,1,0,0,0,6713,6715,1,0,0,
        0,6714,6703,1,0,0,0,6714,6715,1,0,0,0,6715,491,1,0,0,0,6716,6719,
        3,914,457,0,6717,6719,3,978,489,0,6718,6716,1,0,0,0,6718,6717,1,
        0,0,0,6719,6721,1,0,0,0,6720,6722,3,1086,543,0,6721,6720,1,0,0,0,
        6721,6722,1,0,0,0,6722,493,1,0,0,0,6723,6724,5,108,0,0,6724,6725,
        5,457,0,0,6725,6726,3,1160,580,0,6726,6727,5,378,0,0,6727,6728,5,
        1170,0,0,6728,495,1,0,0,0,6729,6730,5,197,0,0,6730,6731,5,217,0,
        0,6731,6735,3,1208,604,0,6732,6733,5,178,0,0,6733,6734,5,1174,0,
        0,6734,6736,7,62,0,0,6735,6732,1,0,0,0,6735,6736,1,0,0,0,6736,6749,
        1,0,0,0,6737,6739,5,649,0,0,6738,6740,5,717,0,0,6739,6738,1,0,0,
        0,6739,6740,1,0,0,0,6740,6741,1,0,0,0,6741,6746,3,1136,568,0,6742,
        6743,5,1194,0,0,6743,6745,3,1136,568,0,6744,6742,1,0,0,0,6745,6748,
        1,0,0,0,6746,6744,1,0,0,0,6746,6747,1,0,0,0,6747,6750,1,0,0,0,6748,
        6746,1,0,0,0,6749,6737,1,0,0,0,6749,6750,1,0,0,0,6750,6761,1,0,0,
        0,6751,6752,5,523,0,0,6752,6753,5,649,0,0,6753,6758,3,1136,568,0,
        6754,6755,5,1194,0,0,6755,6757,3,1136,568,0,6756,6754,1,0,0,0,6757,
        6760,1,0,0,0,6758,6756,1,0,0,0,6758,6759,1,0,0,0,6759,6762,1,0,0,
        0,6760,6758,1,0,0,0,6761,6751,1,0,0,0,6761,6762,1,0,0,0,6762,6765,
        1,0,0,0,6763,6764,5,151,0,0,6764,6766,3,1208,604,0,6765,6763,1,0,
        0,0,6765,6766,1,0,0,0,6766,6776,1,0,0,0,6767,6768,5,1063,0,0,6768,
        6773,3,1132,566,0,6769,6770,5,1194,0,0,6770,6772,3,1132,566,0,6771,
        6769,1,0,0,0,6772,6775,1,0,0,0,6773,6771,1,0,0,0,6773,6774,1,0,0,
        0,6774,6777,1,0,0,0,6775,6773,1,0,0,0,6776,6767,1,0,0,0,6776,6777,
        1,0,0,0,6777,497,1,0,0,0,6778,6780,5,197,0,0,6779,6781,5,1020,0,
        0,6780,6779,1,0,0,0,6780,6781,1,0,0,0,6781,6783,1,0,0,0,6782,6784,
        3,1176,588,0,6783,6782,1,0,0,0,6783,6784,1,0,0,0,6784,6785,1,0,0,
        0,6785,6786,5,447,0,0,6786,6787,3,1208,604,0,6787,6788,5,649,0,0,
        6788,6789,3,1150,575,0,6789,6790,5,1192,0,0,6790,6791,3,1164,582,
        0,6791,6797,5,1193,0,0,6792,6793,5,443,0,0,6793,6794,5,1192,0,0,
        6794,6795,3,1170,585,0,6795,6796,5,1193,0,0,6796,6798,1,0,0,0,6797,
        6792,1,0,0,0,6797,6798,1,0,0,0,6798,6801,1,0,0,0,6799,6800,5,1060,
        0,0,6800,6802,3,938,469,0,6801,6799,1,0,0,0,6801,6802,1,0,0,0,6802,
        6804,1,0,0,0,6803,6805,3,500,250,0,6804,6803,1,0,0,0,6804,6805,1,
        0,0,0,6805,6808,1,0,0,0,6806,6807,5,649,0,0,6807,6809,3,1208,604,
        0,6808,6806,1,0,0,0,6808,6809,1,0,0,0,6809,6811,1,0,0,0,6810,6812,
        5,1195,0,0,6811,6810,1,0,0,0,6811,6812,1,0,0,0,6812,499,1,0,0,0,
        6813,6814,5,1063,0,0,6814,6815,5,1192,0,0,6815,6820,3,502,251,0,
        6816,6817,5,1194,0,0,6817,6819,3,502,251,0,6818,6816,1,0,0,0,6819,
        6822,1,0,0,0,6820,6818,1,0,0,0,6820,6821,1,0,0,0,6821,6823,1,0,0,
        0,6822,6820,1,0,0,0,6823,6824,5,1193,0,0,6824,501,1,0,0,0,6825,6833,
        3,524,262,0,6826,6827,5,282,0,0,6827,6828,5,1174,0,0,6828,6833,3,
        1174,587,0,6829,6830,5,663,0,0,6830,6831,5,1174,0,0,6831,6833,3,
        1174,587,0,6832,6825,1,0,0,0,6832,6826,1,0,0,0,6832,6829,1,0,0,0,
        6833,503,1,0,0,0,6834,6835,5,35,0,0,6835,6838,5,447,0,0,6836,6839,
        3,1208,604,0,6837,6839,5,22,0,0,6838,6836,1,0,0,0,6838,6837,1,0,
        0,0,6839,6840,1,0,0,0,6840,6841,5,649,0,0,6841,6852,3,1150,575,0,
        6842,6853,5,268,0,0,6843,6853,5,693,0,0,6844,6853,5,1,0,0,6845,6847,
        5,808,0,0,6846,6848,3,506,253,0,6847,6846,1,0,0,0,6847,6848,1,0,
        0,0,6848,6853,1,0,0,0,6849,6853,3,510,255,0,6850,6853,3,516,258,
        0,6851,6853,3,520,260,0,6852,6842,1,0,0,0,6852,6843,1,0,0,0,6852,
        6844,1,0,0,0,6852,6845,1,0,0,0,6852,6849,1,0,0,0,6852,6850,1,0,0,
        0,6852,6851,1,0,0,0,6853,505,1,0,0,0,6854,6855,5,1063,0,0,6855,6856,
        5,1192,0,0,6856,6861,3,508,254,0,6857,6858,5,1194,0,0,6858,6860,
        3,508,254,0,6859,6857,1,0,0,0,6860,6863,1,0,0,0,6861,6859,1,0,0,
        0,6861,6862,1,0,0,0,6862,6864,1,0,0,0,6863,6861,1,0,0,0,6864,6865,
        5,1193,0,0,6865,507,1,0,0,0,6866,6867,5,538,0,0,6867,6868,5,1174,
        0,0,6868,6877,5,1168,0,0,6869,6870,5,546,0,0,6870,6871,5,1174,0,
        0,6871,6873,5,1168,0,0,6872,6874,5,569,0,0,6873,6872,1,0,0,0,6873,
        6874,1,0,0,0,6874,6877,1,0,0,0,6875,6877,3,606,303,0,6876,6866,1,
        0,0,0,6876,6869,1,0,0,0,6876,6875,1,0,0,0,6877,509,1,0,0,0,6878,
        6882,5,782,0,0,6879,6880,5,687,0,0,6880,6881,5,1174,0,0,6881,6883,
        5,1168,0,0,6882,6879,1,0,0,0,6882,6883,1,0,0,0,6883,6885,1,0,0,0,
        6884,6886,3,512,256,0,6885,6884,1,0,0,0,6885,6886,1,0,0,0,6886,511,
        1,0,0,0,6887,6888,5,1063,0,0,6888,6889,5,1192,0,0,6889,6894,3,514,
        257,0,6890,6891,5,1194,0,0,6891,6893,3,514,257,0,6892,6890,1,0,0,
        0,6893,6896,1,0,0,0,6894,6892,1,0,0,0,6894,6895,1,0,0,0,6895,6897,
        1,0,0,0,6896,6894,1,0,0,0,6897,6898,5,1193,0,0,6898,513,1,0,0,0,
        6899,6900,5,517,0,0,6900,6901,5,1174,0,0,6901,6906,3,1174,587,0,
        6902,6903,5,168,0,0,6903,6904,5,1174,0,0,6904,6906,3,1174,587,0,
        6905,6899,1,0,0,0,6905,6902,1,0,0,0,6906,515,1,0,0,0,6907,6908,5,
        887,0,0,6908,6909,5,1192,0,0,6909,6914,3,518,259,0,6910,6911,5,1194,
        0,0,6911,6913,3,518,259,0,6912,6910,1,0,0,0,6913,6916,1,0,0,0,6914,
        6912,1,0,0,0,6914,6915,1,0,0,0,6915,6917,1,0,0,0,6916,6914,1,0,0,
        0,6917,6918,5,1193,0,0,6918,517,1,0,0,0,6919,6920,5,28,0,0,6920,
        6921,5,1174,0,0,6921,6941,3,1174,587,0,6922,6923,5,27,0,0,6923,6924,
        5,1174,0,0,6924,6941,3,1174,587,0,6925,6926,5,663,0,0,6926,6927,
        5,1174,0,0,6927,6941,3,1174,587,0,6928,6929,5,433,0,0,6929,6930,
        5,1174,0,0,6930,6941,3,1174,587,0,6931,6932,5,933,0,0,6932,6933,
        5,1174,0,0,6933,6941,3,1174,587,0,6934,6935,5,167,0,0,6935,6936,
        5,1174,0,0,6936,6938,5,1168,0,0,6937,6939,5,569,0,0,6938,6937,1,
        0,0,0,6938,6939,1,0,0,0,6939,6941,1,0,0,0,6940,6919,1,0,0,0,6940,
        6922,1,0,0,0,6940,6925,1,0,0,0,6940,6928,1,0,0,0,6940,6931,1,0,0,
        0,6940,6934,1,0,0,0,6941,519,1,0,0,0,6942,6946,5,767,0,0,6943,6944,
        5,687,0,0,6944,6945,5,1174,0,0,6945,6947,5,22,0,0,6946,6943,1,0,
        0,0,6946,6947,1,0,0,0,6947,6949,1,0,0,0,6948,6950,3,522,261,0,6949,
        6948,1,0,0,0,6949,6950,1,0,0,0,6950,6959,1,0,0,0,6951,6952,5,767,
        0,0,6952,6953,5,687,0,0,6953,6954,5,1174,0,0,6954,6956,5,1168,0,
        0,6955,6957,3,526,263,0,6956,6955,1,0,0,0,6956,6957,1,0,0,0,6957,
        6959,1,0,0,0,6958,6942,1,0,0,0,6958,6951,1,0,0,0,6959,521,1,0,0,
        0,6960,6961,5,1063,0,0,6961,6962,5,1192,0,0,6962,6967,3,524,262,
        0,6963,6964,5,1194,0,0,6964,6966,3,524,262,0,6965,6963,1,0,0,0,6966,
        6969,1,0,0,0,6967,6965,1,0,0,0,6967,6968,1,0,0,0,6968,6970,1,0,0,
        0,6969,6967,1,0,0,0,6970,6971,5,1193,0,0,6971,523,1,0,0,0,6972,6973,
        5,676,0,0,6973,6974,5,1174,0,0,6974,7033,3,1174,587,0,6975,6976,
        5,357,0,0,6976,6977,5,1174,0,0,6977,7033,5,1168,0,0,6978,6979,5,
        911,0,0,6979,6980,5,1174,0,0,6980,7033,3,1174,587,0,6981,6982,5,
        433,0,0,6982,6983,5,1174,0,0,6983,7033,3,1174,587,0,6984,6985,5,
        933,0,0,6985,6986,5,1174,0,0,6986,7033,3,1174,587,0,6987,6988,5,
        932,0,0,6988,6989,5,1174,0,0,6989,7033,3,1174,587,0,6990,6991,5,
        650,0,0,6991,7000,5,1174,0,0,6992,6997,5,649,0,0,6993,6994,5,1192,
        0,0,6994,6995,3,606,303,0,6995,6996,5,1193,0,0,6996,6998,1,0,0,0,
        6997,6993,1,0,0,0,6997,6998,1,0,0,0,6998,7001,1,0,0,0,6999,7001,
        5,643,0,0,7000,6992,1,0,0,0,7000,6999,1,0,0,0,7001,7033,1,0,0,0,
        7002,7003,5,807,0,0,7003,7004,5,1174,0,0,7004,7033,3,1174,587,0,
        7005,7006,5,546,0,0,7006,7007,5,1174,0,0,7007,7009,5,1168,0,0,7008,
        7010,5,569,0,0,7009,7008,1,0,0,0,7009,7010,1,0,0,0,7010,7033,1,0,
        0,0,7011,7012,5,28,0,0,7012,7013,5,1174,0,0,7013,7033,3,1174,587,
        0,7014,7015,5,27,0,0,7015,7016,5,1174,0,0,7016,7033,3,1174,587,0,
        7017,7018,5,538,0,0,7018,7019,5,1174,0,0,7019,7033,5,1168,0,0,7020,
        7021,5,223,0,0,7021,7022,5,1174,0,0,7022,7024,7,63,0,0,7023,7025,
        3,530,265,0,7024,7023,1,0,0,0,7024,7025,1,0,0,0,7025,7033,1,0,0,
        0,7026,7027,5,1078,0,0,7027,7028,5,1174,0,0,7028,7030,3,1174,587,
        0,7029,7031,3,530,265,0,7030,7029,1,0,0,0,7030,7031,1,0,0,0,7031,
        7033,1,0,0,0,7032,6972,1,0,0,0,7032,6975,1,0,0,0,7032,6978,1,0,0,
        0,7032,6981,1,0,0,0,7032,6984,1,0,0,0,7032,6987,1,0,0,0,7032,6990,
        1,0,0,0,7032,7002,1,0,0,0,7032,7005,1,0,0,0,7032,7011,1,0,0,0,7032,
        7014,1,0,0,0,7032,7017,1,0,0,0,7032,7020,1,0,0,0,7032,7026,1,0,0,
        0,7033,525,1,0,0,0,7034,7035,5,1063,0,0,7035,7036,5,1192,0,0,7036,
        7041,3,528,264,0,7037,7038,5,1194,0,0,7038,7040,3,528,264,0,7039,
        7037,1,0,0,0,7040,7043,1,0,0,0,7041,7039,1,0,0,0,7041,7042,1,0,0,
        0,7042,7044,1,0,0,0,7043,7041,1,0,0,0,7044,7045,5,1193,0,0,7045,
        527,1,0,0,0,7046,7047,5,911,0,0,7047,7048,5,1174,0,0,7048,7080,3,
        1174,587,0,7049,7050,5,538,0,0,7050,7051,5,1174,0,0,7051,7080,5,
        1168,0,0,7052,7053,5,807,0,0,7053,7054,5,1174,0,0,7054,7080,3,1174,
        587,0,7055,7056,5,223,0,0,7056,7057,5,1174,0,0,7057,7059,7,63,0,
        0,7058,7060,3,530,265,0,7059,7058,1,0,0,0,7059,7060,1,0,0,0,7060,
        7080,1,0,0,0,7061,7062,5,1078,0,0,7062,7063,5,1174,0,0,7063,7065,
        3,1174,587,0,7064,7066,3,530,265,0,7065,7064,1,0,0,0,7065,7066,1,
        0,0,0,7066,7080,1,0,0,0,7067,7068,5,650,0,0,7068,7077,5,1174,0,0,
        7069,7074,5,649,0,0,7070,7071,5,1192,0,0,7071,7072,3,606,303,0,7072,
        7073,5,1193,0,0,7073,7075,1,0,0,0,7074,7070,1,0,0,0,7074,7075,1,
        0,0,0,7075,7078,1,0,0,0,7076,7078,5,643,0,0,7077,7069,1,0,0,0,7077,
        7076,1,0,0,0,7078,7080,1,0,0,0,7079,7046,1,0,0,0,7079,7049,1,0,0,
        0,7079,7052,1,0,0,0,7079,7055,1,0,0,0,7079,7061,1,0,0,0,7079,7067,
        1,0,0,0,7080,529,1,0,0,0,7081,7082,5,649,0,0,7082,7083,5,688,0,0,
        7083,7084,5,1192,0,0,7084,7087,5,1168,0,0,7085,7086,5,986,0,0,7086,
        7088,5,1168,0,0,7087,7085,1,0,0,0,7087,7088,1,0,0,0,7088,7097,1,
        0,0,0,7089,7090,5,1194,0,0,7090,7093,5,1168,0,0,7091,7092,5,986,
        0,0,7092,7094,5,1168,0,0,7093,7091,1,0,0,0,7093,7094,1,0,0,0,7094,
        7096,1,0,0,0,7095,7089,1,0,0,0,7096,7099,1,0,0,0,7097,7095,1,0,0,
        0,7097,7098,1,0,0,0,7098,7100,1,0,0,0,7099,7097,1,0,0,0,7100,7101,
        5,1193,0,0,7101,531,1,0,0,0,7102,7103,5,197,0,0,7103,7104,5,149,
        0,0,7104,7105,5,156,0,0,7105,7106,5,447,0,0,7106,7107,3,1208,604,
        0,7107,7108,5,649,0,0,7108,7110,3,1150,575,0,7109,7111,3,534,267,
        0,7110,7109,1,0,0,0,7110,7111,1,0,0,0,7111,7114,1,0,0,0,7112,7113,
        5,649,0,0,7113,7115,3,1208,604,0,7114,7112,1,0,0,0,7114,7115,1,0,
        0,0,7115,7117,1,0,0,0,7116,7118,5,1195,0,0,7117,7116,1,0,0,0,7117,
        7118,1,0,0,0,7118,533,1,0,0,0,7119,7120,5,1063,0,0,7120,7121,5,1192,
        0,0,7121,7126,3,536,268,0,7122,7123,5,1194,0,0,7123,7125,3,536,268,
        0,7124,7122,1,0,0,0,7125,7128,1,0,0,0,7126,7124,1,0,0,0,7126,7127,
        1,0,0,0,7127,7129,1,0,0,0,7128,7126,1,0,0,0,7129,7130,5,1193,0,0,
        7130,535,1,0,0,0,7131,7132,5,282,0,0,7132,7133,5,1174,0,0,7133,7153,
        3,1174,587,0,7134,7135,5,538,0,0,7135,7136,5,1174,0,0,7136,7153,
        5,1168,0,0,7137,7138,5,650,0,0,7138,7139,5,1174,0,0,7139,7153,3,
        1174,587,0,7140,7141,5,167,0,0,7141,7142,5,1174,0,0,7142,7144,5,
        1168,0,0,7143,7145,5,569,0,0,7144,7143,1,0,0,0,7144,7145,1,0,0,0,
        7145,7153,1,0,0,0,7146,7147,5,223,0,0,7147,7148,5,1174,0,0,7148,
        7150,7,64,0,0,7149,7151,3,530,265,0,7150,7149,1,0,0,0,7150,7151,
        1,0,0,0,7151,7153,1,0,0,0,7152,7131,1,0,0,0,7152,7134,1,0,0,0,7152,
        7137,1,0,0,0,7152,7140,1,0,0,0,7152,7146,1,0,0,0,7153,537,1,0,0,
        0,7154,7156,5,197,0,0,7155,7157,5,607,0,0,7156,7155,1,0,0,0,7156,
        7157,1,0,0,0,7157,7158,1,0,0,0,7158,7159,5,156,0,0,7159,7160,5,447,
        0,0,7160,7161,3,1208,604,0,7161,7162,5,649,0,0,7162,7163,3,1150,
        575,0,7163,7164,5,1192,0,0,7164,7165,3,1164,582,0,7165,7168,5,1193,
        0,0,7166,7167,5,1060,0,0,7167,7169,3,938,469,0,7168,7166,1,0,0,0,
        7168,7169,1,0,0,0,7169,7171,1,0,0,0,7170,7172,3,534,267,0,7171,7170,
        1,0,0,0,7171,7172,1,0,0,0,7172,7175,1,0,0,0,7173,7174,5,649,0,0,
        7174,7176,3,1208,604,0,7175,7173,1,0,0,0,7175,7176,1,0,0,0,7176,
        7178,1,0,0,0,7177,7179,5,1195,0,0,7178,7177,1,0,0,0,7178,7179,1,
        0,0,0,7179,539,1,0,0,0,7180,7182,5,197,0,0,7181,7183,5,717,0,0,7182,
        7181,1,0,0,0,7182,7183,1,0,0,0,7183,7184,1,0,0,0,7184,7185,5,1074,
        0,0,7185,7186,5,447,0,0,7186,7187,3,1208,604,0,7187,7188,5,649,0,
        0,7188,7189,3,1150,575,0,7189,7190,5,1192,0,0,7190,7191,3,1208,604,
        0,7191,7202,5,1193,0,0,7192,7193,5,1038,0,0,7193,7194,5,1074,0,0,
        7194,7195,5,447,0,0,7195,7200,3,1208,604,0,7196,7198,5,363,0,0,7197,
        7199,7,65,0,0,7198,7197,1,0,0,0,7198,7199,1,0,0,0,7199,7201,1,0,
        0,0,7200,7196,1,0,0,0,7200,7201,1,0,0,0,7201,7203,1,0,0,0,7202,7192,
        1,0,0,0,7202,7203,1,0,0,0,7203,7205,1,0,0,0,7204,7206,3,542,271,
        0,7205,7204,1,0,0,0,7205,7206,1,0,0,0,7206,7208,1,0,0,0,7207,7209,
        5,1195,0,0,7208,7207,1,0,0,0,7208,7209,1,0,0,0,7209,541,1,0,0,0,
        7210,7211,5,1063,0,0,7211,7212,5,1192,0,0,7212,7217,3,544,272,0,
        7213,7214,5,1194,0,0,7214,7216,3,544,272,0,7215,7213,1,0,0,0,7216,
        7219,1,0,0,0,7217,7215,1,0,0,0,7217,7218,1,0,0,0,7218,7220,1,0,0,
        0,7219,7217,1,0,0,0,7220,7221,5,1193,0,0,7221,543,1,0,0,0,7222,7223,
        5,676,0,0,7223,7224,5,1174,0,0,7224,7262,3,1174,587,0,7225,7226,
        5,357,0,0,7226,7227,5,1174,0,0,7227,7262,5,1168,0,0,7228,7229,5,
        911,0,0,7229,7230,5,1174,0,0,7230,7262,3,1174,587,0,7231,7232,5,
        433,0,0,7232,7233,5,1174,0,0,7233,7262,3,1174,587,0,7234,7235,5,
        282,0,0,7235,7236,5,1174,0,0,7236,7262,3,1174,587,0,7237,7238,5,
        650,0,0,7238,7247,5,1174,0,0,7239,7244,5,649,0,0,7240,7241,5,1192,
        0,0,7241,7242,3,606,303,0,7242,7243,5,1193,0,0,7243,7245,1,0,0,0,
        7244,7240,1,0,0,0,7244,7245,1,0,0,0,7245,7248,1,0,0,0,7246,7248,
        5,643,0,0,7247,7239,1,0,0,0,7247,7246,1,0,0,0,7248,7262,1,0,0,0,
        7249,7250,5,28,0,0,7250,7251,5,1174,0,0,7251,7262,3,1174,587,0,7252,
        7253,5,27,0,0,7253,7254,5,1174,0,0,7254,7262,3,1174,587,0,7255,7256,
        5,538,0,0,7256,7257,5,1174,0,0,7257,7262,5,1168,0,0,7258,7259,5,
        1078,0,0,7259,7260,5,1174,0,0,7260,7262,3,1174,587,0,7261,7222,1,
        0,0,0,7261,7225,1,0,0,0,7261,7228,1,0,0,0,7261,7231,1,0,0,0,7261,
        7234,1,0,0,0,7261,7237,1,0,0,0,7261,7249,1,0,0,0,7261,7252,1,0,0,
        0,7261,7255,1,0,0,0,7261,7258,1,0,0,0,7262,545,1,0,0,0,7263,7266,
        5,197,0,0,7264,7265,5,665,0,0,7265,7267,7,66,0,0,7266,7264,1,0,0,
        0,7266,7267,1,0,0,0,7267,7270,1,0,0,0,7268,7270,5,35,0,0,7269,7263,
        1,0,0,0,7269,7268,1,0,0,0,7270,7271,1,0,0,0,7271,7272,7,67,0,0,7272,
        7275,3,1154,577,0,7273,7274,5,1195,0,0,7274,7276,5,1168,0,0,7275,
        7273,1,0,0,0,7275,7276,1,0,0,0,7276,7291,1,0,0,0,7277,7279,5,1192,
        0,0,7278,7277,1,0,0,0,7278,7279,1,0,0,0,7279,7280,1,0,0,0,7280,7285,
        3,572,286,0,7281,7282,5,1194,0,0,7282,7284,3,572,286,0,7283,7281,
        1,0,0,0,7284,7287,1,0,0,0,7285,7283,1,0,0,0,7285,7286,1,0,0,0,7286,
        7289,1,0,0,0,7287,7285,1,0,0,0,7288,7290,5,1193,0,0,7289,7288,1,
        0,0,0,7289,7290,1,0,0,0,7290,7292,1,0,0,0,7291,7278,1,0,0,0,7291,
        7292,1,0,0,0,7292,7302,1,0,0,0,7293,7294,5,1063,0,0,7294,7299,3,
        574,287,0,7295,7296,5,1194,0,0,7296,7298,3,574,287,0,7297,7295,1,
        0,0,0,7298,7301,1,0,0,0,7299,7297,1,0,0,0,7299,7300,1,0,0,0,7300,
        7303,1,0,0,0,7301,7299,1,0,0,0,7302,7293,1,0,0,0,7302,7303,1,0,0,
        0,7303,7306,1,0,0,0,7304,7305,5,363,0,0,7305,7307,5,791,0,0,7306,
        7304,1,0,0,0,7306,7307,1,0,0,0,7307,7308,1,0,0,0,7308,7316,5,56,
        0,0,7309,7317,3,548,274,0,7310,7312,3,6,3,0,7311,7310,1,0,0,0,7312,
        7315,1,0,0,0,7313,7311,1,0,0,0,7313,7314,1,0,0,0,7314,7317,1,0,0,
        0,7315,7313,1,0,0,0,7316,7309,1,0,0,0,7316,7313,1,0,0,0,7317,547,
        1,0,0,0,7318,7319,5,329,0,0,7319,7320,5,584,0,0,7320,7321,3,1208,
        604,0,7321,7322,5,1187,0,0,7322,7323,3,1208,604,0,7323,7324,5,1187,
        0,0,7324,7325,3,1208,604,0,7325,549,1,0,0,0,7326,7329,3,552,276,
        0,7327,7329,3,558,279,0,7328,7326,1,0,0,0,7328,7327,1,0,0,0,7329,
        551,1,0,0,0,7330,7333,5,197,0,0,7331,7332,5,665,0,0,7332,7334,7,
        66,0,0,7333,7331,1,0,0,0,7333,7334,1,0,0,0,7334,7337,1,0,0,0,7335,
        7337,5,35,0,0,7336,7330,1,0,0,0,7336,7335,1,0,0,0,7337,7338,1,0,
        0,0,7338,7339,5,999,0,0,7339,7340,3,1152,576,0,7340,7341,5,649,0,
        0,7341,7351,3,1150,575,0,7342,7343,5,1063,0,0,7343,7348,3,554,277,
        0,7344,7345,5,1194,0,0,7345,7347,3,554,277,0,7346,7344,1,0,0,0,7347,
        7350,1,0,0,0,7348,7346,1,0,0,0,7348,7349,1,0,0,0,7349,7352,1,0,0,
        0,7350,7348,1,0,0,0,7351,7342,1,0,0,0,7351,7352,1,0,0,0,7352,7357,
        1,0,0,0,7353,7358,5,363,0,0,7354,7358,5,19,0,0,7355,7356,5,459,0,
        0,7356,7358,5,642,0,0,7357,7353,1,0,0,0,7357,7354,1,0,0,0,7357,7355,
        1,0,0,0,7358,7359,1,0,0,0,7359,7364,3,556,278,0,7360,7361,5,1194,
        0,0,7361,7363,3,556,278,0,7362,7360,1,0,0,0,7363,7366,1,0,0,0,7364,
        7362,1,0,0,0,7364,7365,1,0,0,0,7365,7369,1,0,0,0,7366,7364,1,0,0,
        0,7367,7368,5,1063,0,0,7368,7370,5,47,0,0,7369,7367,1,0,0,0,7369,
        7370,1,0,0,0,7370,7374,1,0,0,0,7371,7372,5,614,0,0,7372,7373,5,363,
        0,0,7373,7375,5,791,0,0,7374,7371,1,0,0,0,7374,7375,1,0,0,0,7375,
        7376,1,0,0,0,7376,7378,5,56,0,0,7377,7379,3,6,3,0,7378,7377,1,0,
        0,0,7379,7380,1,0,0,0,7380,7378,1,0,0,0,7380,7381,1,0,0,0,7381,553,
        1,0,0,0,7382,7385,5,295,0,0,7383,7385,3,852,426,0,7384,7382,1,0,
        0,0,7384,7383,1,0,0,0,7385,555,1,0,0,0,7386,7387,7,68,0,0,7387,557,
        1,0,0,0,7388,7391,5,197,0,0,7389,7390,5,665,0,0,7390,7392,7,66,0,
        0,7391,7389,1,0,0,0,7391,7392,1,0,0,0,7392,7395,1,0,0,0,7393,7395,
        5,35,0,0,7394,7388,1,0,0,0,7394,7393,1,0,0,0,7395,7396,1,0,0,0,7396,
        7397,5,999,0,0,7397,7398,3,1152,576,0,7398,7402,5,649,0,0,7399,7400,
        5,22,0,0,7400,7403,5,876,0,0,7401,7403,5,217,0,0,7402,7399,1,0,0,
        0,7402,7401,1,0,0,0,7403,7413,1,0,0,0,7404,7405,5,1063,0,0,7405,
        7410,3,554,277,0,7406,7407,5,1194,0,0,7407,7409,3,554,277,0,7408,
        7406,1,0,0,0,7409,7412,1,0,0,0,7410,7408,1,0,0,0,7410,7411,1,0,0,
        0,7411,7414,1,0,0,0,7412,7410,1,0,0,0,7413,7404,1,0,0,0,7413,7414,
        1,0,0,0,7414,7415,1,0,0,0,7415,7416,7,69,0,0,7416,7421,3,560,280,
        0,7417,7418,5,1194,0,0,7418,7420,3,560,280,0,7419,7417,1,0,0,0,7420,
        7423,1,0,0,0,7421,7419,1,0,0,0,7421,7422,1,0,0,0,7422,7424,1,0,0,
        0,7423,7421,1,0,0,0,7424,7426,5,56,0,0,7425,7427,3,6,3,0,7426,7425,
        1,0,0,0,7427,7428,1,0,0,0,7428,7426,1,0,0,0,7428,7429,1,0,0,0,7429,
        559,1,0,0,0,7430,7431,3,1210,605,0,7431,561,1,0,0,0,7432,7435,5,
        197,0,0,7433,7434,5,665,0,0,7434,7436,5,35,0,0,7435,7433,1,0,0,0,
        7435,7436,1,0,0,0,7436,7439,1,0,0,0,7437,7439,5,35,0,0,7438,7432,
        1,0,0,0,7438,7437,1,0,0,0,7439,7440,1,0,0,0,7440,7441,5,384,0,0,
        7441,7455,3,1154,577,0,7442,7443,5,1192,0,0,7443,7448,3,572,286,
        0,7444,7445,5,1194,0,0,7445,7447,3,572,286,0,7446,7444,1,0,0,0,7447,
        7450,1,0,0,0,7448,7446,1,0,0,0,7448,7449,1,0,0,0,7449,7451,1,0,0,
        0,7450,7448,1,0,0,0,7451,7452,5,1193,0,0,7452,7456,1,0,0,0,7453,
        7454,5,1192,0,0,7454,7456,5,1193,0,0,7455,7442,1,0,0,0,7455,7453,
        1,0,0,0,7456,7460,1,0,0,0,7457,7461,3,564,282,0,7458,7461,3,566,
        283,0,7459,7461,3,568,284,0,7460,7457,1,0,0,0,7460,7458,1,0,0,0,
        7460,7459,1,0,0,0,7461,7463,1,0,0,0,7462,7464,5,1195,0,0,7463,7462,
        1,0,0,0,7463,7464,1,0,0,0,7464,563,1,0,0,0,7465,7466,5,812,0,0,7466,
        7476,5,966,0,0,7467,7468,5,1063,0,0,7468,7473,3,576,288,0,7469,7470,
        5,1194,0,0,7470,7472,3,576,288,0,7471,7469,1,0,0,0,7472,7475,1,0,
        0,0,7473,7471,1,0,0,0,7473,7474,1,0,0,0,7474,7477,1,0,0,0,7475,7473,
        1,0,0,0,7476,7467,1,0,0,0,7476,7477,1,0,0,0,7477,7479,1,0,0,0,7478,
        7480,5,56,0,0,7479,7478,1,0,0,0,7479,7480,1,0,0,0,7480,7490,1,0,
        0,0,7481,7491,3,548,274,0,7482,7488,5,811,0,0,7483,7484,5,1192,0,
        0,7484,7485,3,482,241,0,7485,7486,5,1193,0,0,7486,7489,1,0,0,0,7487,
        7489,3,482,241,0,7488,7483,1,0,0,0,7488,7487,1,0,0,0,7489,7491,1,
        0,0,0,7490,7481,1,0,0,0,7490,7482,1,0,0,0,7491,565,1,0,0,0,7492,
        7493,5,812,0,0,7493,7494,5,1166,0,0,7494,7504,3,856,428,0,7495,7496,
        5,1063,0,0,7496,7501,3,576,288,0,7497,7498,5,1194,0,0,7498,7500,
        3,576,288,0,7499,7497,1,0,0,0,7500,7503,1,0,0,0,7501,7499,1,0,0,
        0,7501,7502,1,0,0,0,7502,7505,1,0,0,0,7503,7501,1,0,0,0,7504,7495,
        1,0,0,0,7504,7505,1,0,0,0,7505,7507,1,0,0,0,7506,7508,5,56,0,0,7507,
        7506,1,0,0,0,7507,7508,1,0,0,0,7508,7525,1,0,0,0,7509,7526,3,548,
        274,0,7510,7514,5,90,0,0,7511,7513,3,6,3,0,7512,7511,1,0,0,0,7513,
        7516,1,0,0,0,7514,7512,1,0,0,0,7514,7515,1,0,0,0,7515,7517,1,0,0,
        0,7516,7514,1,0,0,0,7517,7519,5,811,0,0,7518,7520,5,1195,0,0,7519,
        7518,1,0,0,0,7519,7520,1,0,0,0,7520,7521,1,0,0,0,7521,7523,5,297,
        0,0,7522,7524,5,1195,0,0,7523,7522,1,0,0,0,7523,7524,1,0,0,0,7524,
        7526,1,0,0,0,7525,7509,1,0,0,0,7525,7510,1,0,0,0,7526,567,1,0,0,
        0,7527,7528,5,812,0,0,7528,7538,3,1200,600,0,7529,7530,5,1063,0,
        0,7530,7535,3,576,288,0,7531,7532,5,1194,0,0,7532,7534,3,576,288,
        0,7533,7531,1,0,0,0,7534,7537,1,0,0,0,7535,7533,1,0,0,0,7535,7536,
        1,0,0,0,7536,7539,1,0,0,0,7537,7535,1,0,0,0,7538,7529,1,0,0,0,7538,
        7539,1,0,0,0,7539,7541,1,0,0,0,7540,7542,5,56,0,0,7541,7540,1,0,
        0,0,7541,7542,1,0,0,0,7542,7558,1,0,0,0,7543,7559,3,548,274,0,7544,
        7548,5,90,0,0,7545,7547,3,6,3,0,7546,7545,1,0,0,0,7547,7550,1,0,
        0,0,7548,7546,1,0,0,0,7548,7549,1,0,0,0,7549,7551,1,0,0,0,7550,7548,
        1,0,0,0,7551,7552,5,811,0,0,7552,7554,3,914,457,0,7553,7555,5,1195,
        0,0,7554,7553,1,0,0,0,7554,7555,1,0,0,0,7555,7556,1,0,0,0,7556,7557,
        5,297,0,0,7557,7559,1,0,0,0,7558,7543,1,0,0,0,7558,7544,1,0,0,0,
        7559,569,1,0,0,0,7560,7565,5,630,0,0,7561,7565,5,243,0,0,7562,7565,
        3,1202,601,0,7563,7565,5,1166,0,0,7564,7560,1,0,0,0,7564,7561,1,
        0,0,0,7564,7562,1,0,0,0,7564,7563,1,0,0,0,7565,571,1,0,0,0,7566,
        7568,5,1166,0,0,7567,7569,5,56,0,0,7568,7567,1,0,0,0,7568,7569,1,
        0,0,0,7569,7573,1,0,0,0,7570,7571,3,1208,604,0,7571,7572,5,1187,
        0,0,7572,7574,1,0,0,0,7573,7570,1,0,0,0,7573,7574,1,0,0,0,7574,7575,
        1,0,0,0,7575,7577,3,1200,600,0,7576,7578,5,1047,0,0,7577,7576,1,
        0,0,0,7577,7578,1,0,0,0,7578,7581,1,0,0,0,7579,7580,5,1174,0,0,7580,
        7582,3,570,285,0,7581,7579,1,0,0,0,7581,7582,1,0,0,0,7582,7584,1,
        0,0,0,7583,7585,7,70,0,0,7584,7583,1,0,0,0,7584,7585,1,0,0,0,7585,
        573,1,0,0,0,7586,7590,5,295,0,0,7587,7590,5,769,0,0,7588,7590,3,
        852,426,0,7589,7586,1,0,0,0,7589,7587,1,0,0,0,7589,7588,1,0,0,0,
        7590,575,1,0,0,0,7591,7604,5,295,0,0,7592,7604,5,845,0,0,7593,7594,
        5,812,0,0,7594,7595,5,630,0,0,7595,7596,5,649,0,0,7596,7597,5,630,
        0,0,7597,7604,5,455,0,0,7598,7599,5,112,0,0,7599,7600,5,649,0,0,
        7600,7601,5,630,0,0,7601,7604,5,455,0,0,7602,7604,3,852,426,0,7603,
        7591,1,0,0,0,7603,7592,1,0,0,0,7603,7593,1,0,0,0,7603,7598,1,0,0,
        0,7603,7602,1,0,0,0,7604,577,1,0,0,0,7605,7606,5,197,0,0,7606,7607,
        5,931,0,0,7607,7608,3,1208,604,0,7608,7609,5,649,0,0,7609,7610,3,
        1150,575,0,7610,7611,5,1192,0,0,7611,7612,3,1170,585,0,7612,7631,
        5,1193,0,0,7613,7619,5,1063,0,0,7614,7620,5,380,0,0,7615,7616,5,
        841,0,0,7616,7617,5,1168,0,0,7617,7620,7,71,0,0,7618,7620,5,936,
        0,0,7619,7614,1,0,0,0,7619,7615,1,0,0,0,7619,7618,1,0,0,0,7620,7623,
        1,0,0,0,7621,7622,5,1194,0,0,7622,7624,5,610,0,0,7623,7621,1,0,0,
        0,7623,7624,1,0,0,0,7624,7629,1,0,0,0,7625,7626,5,1194,0,0,7626,
        7627,5,446,0,0,7627,7628,5,1174,0,0,7628,7630,3,1174,587,0,7629,
        7625,1,0,0,0,7629,7630,1,0,0,0,7630,7632,1,0,0,0,7631,7613,1,0,0,
        0,7631,7632,1,0,0,0,7632,7634,1,0,0,0,7633,7635,5,1195,0,0,7634,
        7633,1,0,0,0,7634,7635,1,0,0,0,7635,579,1,0,0,0,7636,7637,5,1028,
        0,0,7637,7638,5,931,0,0,7638,7651,3,1148,574,0,7639,7652,3,1208,
        604,0,7640,7641,5,1192,0,0,7641,7646,3,1208,604,0,7642,7643,5,1194,
        0,0,7643,7645,3,1208,604,0,7644,7642,1,0,0,0,7645,7648,1,0,0,0,7646,
        7644,1,0,0,0,7646,7647,1,0,0,0,7647,7649,1,0,0,0,7648,7646,1,0,0,
        0,7649,7650,5,1193,0,0,7650,7652,1,0,0,0,7651,7639,1,0,0,0,7651,
        7640,1,0,0,0,7651,7652,1,0,0,0,7652,7654,1,0,0,0,7653,7655,3,582,
        291,0,7654,7653,1,0,0,0,7654,7655,1,0,0,0,7655,581,1,0,0,0,7656,
        7657,5,1063,0,0,7657,7662,3,584,292,0,7658,7659,5,1194,0,0,7659,
        7661,3,584,292,0,7660,7658,1,0,0,0,7661,7664,1,0,0,0,7662,7660,1,
        0,0,0,7662,7663,1,0,0,0,7663,583,1,0,0,0,7664,7662,1,0,0,0,7665,
        7672,5,380,0,0,7666,7668,5,1194,0,0,7667,7666,1,0,0,0,7667,7668,
        1,0,0,0,7668,7669,1,0,0,0,7669,7670,5,702,0,0,7670,7671,5,1174,0,
        0,7671,7673,3,1174,587,0,7672,7667,1,0,0,0,7672,7673,1,0,0,0,7673,
        7712,1,0,0,0,7674,7675,5,841,0,0,7675,7676,5,1168,0,0,7676,7683,
        7,71,0,0,7677,7679,5,1194,0,0,7678,7677,1,0,0,0,7678,7679,1,0,0,
        0,7679,7680,1,0,0,0,7680,7681,5,702,0,0,7681,7682,5,1174,0,0,7682,
        7684,3,1174,587,0,7683,7678,1,0,0,0,7683,7684,1,0,0,0,7684,7712,
        1,0,0,0,7685,7687,5,797,0,0,7686,7688,3,530,265,0,7687,7686,1,0,
        0,0,7687,7688,1,0,0,0,7688,7712,1,0,0,0,7689,7690,5,936,0,0,7690,
        7691,5,1174,0,0,7691,7712,3,914,457,0,7692,7693,5,825,0,0,7693,7694,
        5,1174,0,0,7694,7712,5,1168,0,0,7695,7696,5,678,0,0,7696,7697,5,
        1174,0,0,7697,7712,5,1168,0,0,7698,7712,5,22,0,0,7699,7712,5,155,
        0,0,7700,7712,5,447,0,0,7701,7712,5,610,0,0,7702,7703,5,446,0,0,
        7703,7704,5,1174,0,0,7704,7712,3,1174,587,0,7705,7706,5,538,0,0,
        7706,7707,5,1174,0,0,7707,7712,5,1168,0,0,7708,7709,5,77,0,0,7709,
        7710,5,1174,0,0,7710,7712,3,1174,587,0,7711,7665,1,0,0,0,7711,7674,
        1,0,0,0,7711,7685,1,0,0,0,7711,7689,1,0,0,0,7711,7692,1,0,0,0,7711,
        7695,1,0,0,0,7711,7698,1,0,0,0,7711,7699,1,0,0,0,7711,7700,1,0,0,
        0,7711,7701,1,0,0,0,7711,7702,1,0,0,0,7711,7705,1,0,0,0,7711,7708,
        1,0,0,0,7712,585,1,0,0,0,7713,7714,5,197,0,0,7714,7715,5,966,0,0,
        7715,7716,3,1150,575,0,7716,7717,5,1192,0,0,7717,7724,3,864,432,
        0,7718,7720,5,1194,0,0,7719,7718,1,0,0,0,7719,7720,1,0,0,0,7720,
        7721,1,0,0,0,7721,7723,3,588,294,0,7722,7719,1,0,0,0,7723,7726,1,
        0,0,0,7724,7722,1,0,0,0,7724,7725,1,0,0,0,7725,7728,1,0,0,0,7726,
        7724,1,0,0,0,7727,7729,5,1194,0,0,7728,7727,1,0,0,0,7728,7729,1,
        0,0,0,7729,7730,1,0,0,0,7730,7733,5,1193,0,0,7731,7732,5,521,0,0,
        7732,7734,3,1210,605,0,7733,7731,1,0,0,0,7733,7734,1,0,0,0,7734,
        7738,1,0,0,0,7735,7737,3,590,295,0,7736,7735,1,0,0,0,7737,7740,1,
        0,0,0,7738,7736,1,0,0,0,7738,7739,1,0,0,0,7739,7745,1,0,0,0,7740,
        7738,1,0,0,0,7741,7742,5,649,0,0,7742,7746,3,1208,604,0,7743,7746,
        5,243,0,0,7744,7746,3,880,440,0,7745,7741,1,0,0,0,7745,7743,1,0,
        0,0,7745,7744,1,0,0,0,7745,7746,1,0,0,0,7746,7750,1,0,0,0,7747,7748,
        5,977,0,0,7748,7751,3,1208,604,0,7749,7751,5,243,0,0,7750,7747,1,
        0,0,0,7750,7749,1,0,0,0,7750,7751,1,0,0,0,7751,7753,1,0,0,0,7752,
        7754,5,1195,0,0,7753,7752,1,0,0,0,7753,7754,1,0,0,0,7754,587,1,0,
        0,0,7755,7756,5,447,0,0,7756,7758,3,1208,604,0,7757,7759,5,1020,
        0,0,7758,7757,1,0,0,0,7758,7759,1,0,0,0,7759,7761,1,0,0,0,7760,7762,
        3,1176,588,0,7761,7760,1,0,0,0,7761,7762,1,0,0,0,7762,7763,1,0,0,
        0,7763,7764,5,1192,0,0,7764,7765,3,1164,582,0,7765,7766,5,1193,0,
        0,7766,7789,1,0,0,0,7767,7768,5,447,0,0,7768,7769,3,1208,604,0,7769,
        7770,5,149,0,0,7770,7771,5,156,0,0,7771,7789,1,0,0,0,7772,7773,5,
        447,0,0,7773,7775,3,1208,604,0,7774,7776,5,607,0,0,7775,7774,1,0,
        0,0,7775,7776,1,0,0,0,7776,7777,1,0,0,0,7777,7778,5,156,0,0,7778,
        7779,5,1192,0,0,7779,7780,3,1170,585,0,7780,7782,5,1193,0,0,7781,
        7783,3,594,297,0,7782,7781,1,0,0,0,7782,7783,1,0,0,0,7783,7786,1,
        0,0,0,7784,7785,5,649,0,0,7785,7787,3,1208,604,0,7786,7784,1,0,0,
        0,7786,7787,1,0,0,0,7787,7789,1,0,0,0,7788,7755,1,0,0,0,7788,7767,
        1,0,0,0,7788,7772,1,0,0,0,7789,589,1,0,0,0,7790,7810,5,1063,0,0,
        7791,7792,5,1192,0,0,7792,7797,3,592,296,0,7793,7794,5,1194,0,0,
        7794,7796,3,592,296,0,7795,7793,1,0,0,0,7796,7799,1,0,0,0,7797,7795,
        1,0,0,0,7797,7798,1,0,0,0,7798,7800,1,0,0,0,7799,7797,1,0,0,0,7800,
        7801,5,1193,0,0,7801,7811,1,0,0,0,7802,7807,3,592,296,0,7803,7804,
        5,1194,0,0,7804,7806,3,592,296,0,7805,7803,1,0,0,0,7806,7809,1,0,
        0,0,7807,7805,1,0,0,0,7807,7808,1,0,0,0,7808,7811,1,0,0,0,7809,7807,
        1,0,0,0,7810,7791,1,0,0,0,7810,7802,1,0,0,0,7811,591,1,0,0,0,7812,
        7815,3,1210,605,0,7813,7815,3,1206,603,0,7814,7812,1,0,0,0,7814,
        7813,1,0,0,0,7815,7816,1,0,0,0,7816,7821,5,1174,0,0,7817,7822,3,
        1210,605,0,7818,7822,3,1206,603,0,7819,7822,3,1174,587,0,7820,7822,
        5,1168,0,0,7821,7817,1,0,0,0,7821,7818,1,0,0,0,7821,7819,1,0,0,0,
        7821,7820,1,0,0,0,7822,7869,1,0,0,0,7823,7824,5,149,0,0,7824,7825,
        5,156,0,0,7825,7869,5,447,0,0,7826,7869,5,415,0,0,7827,7828,5,357,
        0,0,7828,7829,5,1174,0,0,7829,7869,5,1168,0,0,7830,7831,5,274,0,
        0,7831,7832,5,1174,0,0,7832,7833,5,408,0,0,7833,7834,5,1192,0,0,
        7834,7835,3,1208,604,0,7835,7836,5,1193,0,0,7836,7869,1,0,0,0,7837,
        7838,5,149,0,0,7838,7839,5,447,0,0,7839,7840,5,1192,0,0,7840,7842,
        3,1208,604,0,7841,7843,7,72,0,0,7842,7841,1,0,0,0,7842,7843,1,0,
        0,0,7843,7851,1,0,0,0,7844,7845,5,1194,0,0,7845,7847,3,1208,604,
        0,7846,7848,7,72,0,0,7847,7846,1,0,0,0,7847,7848,1,0,0,0,7848,7850,
        1,0,0,0,7849,7844,1,0,0,0,7850,7853,1,0,0,0,7851,7849,1,0,0,0,7851,
        7852,1,0,0,0,7852,7854,1,0,0,0,7853,7851,1,0,0,0,7854,7855,5,1193,
        0,0,7855,7869,1,0,0,0,7856,7857,5,223,0,0,7857,7858,5,1174,0,0,7858,
        7860,7,73,0,0,7859,7861,3,530,265,0,7860,7859,1,0,0,0,7860,7861,
        1,0,0,0,7861,7869,1,0,0,0,7862,7863,5,1078,0,0,7863,7864,5,1174,
        0,0,7864,7866,3,1174,587,0,7865,7867,3,530,265,0,7866,7865,1,0,0,
        0,7866,7867,1,0,0,0,7867,7869,1,0,0,0,7868,7814,1,0,0,0,7868,7823,
        1,0,0,0,7868,7826,1,0,0,0,7868,7827,1,0,0,0,7868,7830,1,0,0,0,7868,
        7837,1,0,0,0,7868,7856,1,0,0,0,7868,7862,1,0,0,0,7869,593,1,0,0,
        0,7870,7871,5,1063,0,0,7871,7872,5,1192,0,0,7872,7877,3,596,298,
        0,7873,7874,5,1194,0,0,7874,7876,3,596,298,0,7875,7873,1,0,0,0,7876,
        7879,1,0,0,0,7877,7875,1,0,0,0,7877,7878,1,0,0,0,7878,7880,1,0,0,
        0,7879,7877,1,0,0,0,7880,7881,5,1193,0,0,7881,595,1,0,0,0,7882,7883,
        5,676,0,0,7883,7884,5,1174,0,0,7884,7919,3,1174,587,0,7885,7886,
        5,357,0,0,7886,7887,5,1174,0,0,7887,7919,5,1168,0,0,7888,7889,5,
        433,0,0,7889,7890,5,1174,0,0,7890,7919,3,1174,587,0,7891,7892,5,
        933,0,0,7892,7893,5,1174,0,0,7893,7919,3,1174,587,0,7894,7895,5,
        932,0,0,7895,7896,5,1174,0,0,7896,7919,3,1174,587,0,7897,7898,5,
        28,0,0,7898,7899,5,1174,0,0,7899,7919,3,1174,587,0,7900,7901,5,27,
        0,0,7901,7902,5,1174,0,0,7902,7919,3,1174,587,0,7903,7904,5,663,
        0,0,7904,7905,5,1174,0,0,7905,7919,3,1174,587,0,7906,7907,5,223,
        0,0,7907,7908,5,1174,0,0,7908,7910,7,63,0,0,7909,7911,3,530,265,
        0,7910,7909,1,0,0,0,7910,7911,1,0,0,0,7911,7919,1,0,0,0,7912,7913,
        5,1078,0,0,7913,7914,5,1174,0,0,7914,7916,3,1174,587,0,7915,7917,
        3,530,265,0,7916,7915,1,0,0,0,7916,7917,1,0,0,0,7917,7919,1,0,0,
        0,7918,7882,1,0,0,0,7918,7885,1,0,0,0,7918,7888,1,0,0,0,7918,7891,
        1,0,0,0,7918,7894,1,0,0,0,7918,7897,1,0,0,0,7918,7900,1,0,0,0,7918,
        7903,1,0,0,0,7918,7906,1,0,0,0,7918,7912,1,0,0,0,7919,597,1,0,0,
        0,7920,7923,5,197,0,0,7921,7922,5,665,0,0,7922,7924,7,66,0,0,7923,
        7921,1,0,0,0,7923,7924,1,0,0,0,7924,7927,1,0,0,0,7925,7927,5,35,
        0,0,7926,7920,1,0,0,0,7926,7925,1,0,0,0,7927,7928,1,0,0,0,7928,7929,
        5,1051,0,0,7929,7934,3,1152,576,0,7930,7931,5,1192,0,0,7931,7932,
        3,1170,585,0,7932,7933,5,1193,0,0,7933,7935,1,0,0,0,7934,7930,1,
        0,0,0,7934,7935,1,0,0,0,7935,7945,1,0,0,0,7936,7937,5,1063,0,0,7937,
        7942,3,600,300,0,7938,7939,5,1194,0,0,7939,7941,3,600,300,0,7940,
        7938,1,0,0,0,7941,7944,1,0,0,0,7942,7940,1,0,0,0,7942,7943,1,0,0,
        0,7943,7946,1,0,0,0,7944,7942,1,0,0,0,7945,7936,1,0,0,0,7945,7946,
        1,0,0,0,7946,7947,1,0,0,0,7947,7948,5,56,0,0,7948,7952,3,482,241,
        0,7949,7950,5,1063,0,0,7950,7951,5,131,0,0,7951,7953,5,664,0,0,7952,
        7949,1,0,0,0,7952,7953,1,0,0,0,7953,7955,1,0,0,0,7954,7956,5,1195,
        0,0,7955,7954,1,0,0,0,7955,7956,1,0,0,0,7956,599,1,0,0,0,7957,7958,
        7,74,0,0,7958,601,1,0,0,0,7959,7960,5,35,0,0,7960,7961,5,966,0,0,
        7961,8035,3,1150,575,0,7962,7963,5,887,0,0,7963,7964,5,1192,0,0,
        7964,7965,5,522,0,0,7965,7966,5,1174,0,0,7966,7967,7,75,0,0,7967,
        8036,5,1193,0,0,7968,7969,5,11,0,0,7969,8036,3,864,432,0,7970,7971,
        5,35,0,0,7971,7974,5,153,0,0,7972,7975,3,868,434,0,7973,7975,3,872,
        436,0,7974,7972,1,0,0,0,7974,7973,1,0,0,0,7975,8036,1,0,0,0,7976,
        7977,5,280,0,0,7977,7978,5,153,0,0,7978,7983,3,1208,604,0,7979,7980,
        5,1194,0,0,7980,7982,3,1208,604,0,7981,7979,1,0,0,0,7982,7985,1,
        0,0,0,7983,7981,1,0,0,0,7983,7984,1,0,0,0,7984,8036,1,0,0,0,7985,
        7983,1,0,0,0,7986,7987,5,280,0,0,7987,7988,5,177,0,0,7988,8036,3,
        1208,604,0,7989,7990,5,1063,0,0,7990,7991,7,76,0,0,7991,7994,5,11,
        0,0,7992,7993,5,177,0,0,7993,7995,3,1208,604,0,7994,7992,1,0,0,0,
        7994,7995,1,0,0,0,7995,8021,1,0,0,0,7996,7997,5,371,0,0,7997,7998,
        5,489,0,0,7998,7999,5,1192,0,0,7999,8000,3,1170,585,0,8000,8001,
        5,1193,0,0,8001,8002,5,773,0,0,8002,8007,3,1150,575,0,8003,8004,
        5,1192,0,0,8004,8005,3,1170,585,0,8005,8006,5,1193,0,0,8006,8008,
        1,0,0,0,8007,8003,1,0,0,0,8007,8008,1,0,0,0,8008,8013,1,0,0,0,8009,
        8012,3,892,446,0,8010,8012,3,894,447,0,8011,8009,1,0,0,0,8011,8010,
        1,0,0,0,8012,8015,1,0,0,0,8013,8011,1,0,0,0,8013,8014,1,0,0,0,8014,
        8022,1,0,0,0,8015,8013,1,0,0,0,8016,8017,5,131,0,0,8017,8018,5,1192,
        0,0,8018,8019,3,938,469,0,8019,8020,5,1193,0,0,8020,8022,1,0,0,0,
        8021,7996,1,0,0,0,8021,8016,1,0,0,0,8022,8036,1,0,0,0,8023,8024,
        7,76,0,0,8024,8025,5,177,0,0,8025,8036,3,1208,604,0,8026,8027,7,
        25,0,0,8027,8029,5,999,0,0,8028,8030,3,1208,604,0,8029,8028,1,0,
        0,0,8029,8030,1,0,0,0,8030,8036,1,0,0,0,8031,8032,5,767,0,0,8032,
        8036,3,590,295,0,8033,8034,5,960,0,0,8034,8036,3,604,302,0,8035,
        7962,1,0,0,0,8035,7968,1,0,0,0,8035,7970,1,0,0,0,8035,7976,1,0,0,
        0,8035,7986,1,0,0,0,8035,7989,1,0,0,0,8035,8023,1,0,0,0,8035,8026,
        1,0,0,0,8035,8031,1,0,0,0,8035,8033,1,0,0,0,8036,8038,1,0,0,0,8037,
        8039,5,1195,0,0,8038,8037,1,0,0,0,8038,8039,1,0,0,0,8039,603,1,0,
        0,0,8040,8042,5,687,0,0,8041,8040,1,0,0,0,8041,8042,1,0,0,0,8042,
        8043,1,0,0,0,8043,8045,3,914,457,0,8044,8041,1,0,0,0,8044,8045,1,
        0,0,0,8045,8046,1,0,0,0,8046,8047,5,986,0,0,8047,8050,3,1150,575,
        0,8048,8049,5,687,0,0,8049,8051,3,914,457,0,8050,8048,1,0,0,0,8050,
        8051,1,0,0,0,8051,8054,1,0,0,0,8052,8053,5,1063,0,0,8053,8055,3,
        606,303,0,8054,8052,1,0,0,0,8054,8055,1,0,0,0,8055,605,1,0,0,0,8056,
        8057,5,1057,0,0,8057,8058,5,1192,0,0,8058,8059,5,546,0,0,8059,8060,
        5,1174,0,0,8060,8062,3,486,243,0,8061,8063,5,569,0,0,8062,8061,1,
        0,0,0,8062,8063,1,0,0,0,8063,8064,1,0,0,0,8064,8065,5,1194,0,0,8065,
        8066,5,2,0,0,8066,8067,5,1174,0,0,8067,8068,7,77,0,0,8068,8069,5,
        1193,0,0,8069,607,1,0,0,0,8070,8071,5,35,0,0,8071,8074,5,217,0,0,
        8072,8075,3,1208,604,0,8073,8075,5,204,0,0,8074,8072,1,0,0,0,8074,
        8073,1,0,0,0,8075,8090,1,0,0,0,8076,8077,5,579,0,0,8077,8078,5,584,
        0,0,8078,8079,5,1174,0,0,8079,8091,3,1208,604,0,8080,8081,5,151,
        0,0,8081,8091,3,1208,604,0,8082,8083,5,887,0,0,8083,8086,3,618,309,
        0,8084,8085,5,1063,0,0,8085,8087,3,688,344,0,8086,8084,1,0,0,0,8086,
        8087,1,0,0,0,8087,8091,1,0,0,0,8088,8091,3,610,305,0,8089,8091,3,
        614,307,0,8090,8076,1,0,0,0,8090,8080,1,0,0,0,8090,8082,1,0,0,0,
        8090,8088,1,0,0,0,8090,8089,1,0,0,0,8091,8093,1,0,0,0,8092,8094,
        5,1195,0,0,8093,8092,1,0,0,0,8093,8094,1,0,0,0,8094,609,1,0,0,0,
        8095,8096,5,11,0,0,8096,8097,5,341,0,0,8097,8102,3,612,306,0,8098,
        8099,5,1194,0,0,8099,8101,3,612,306,0,8100,8098,1,0,0,0,8101,8104,
        1,0,0,0,8102,8100,1,0,0,0,8102,8103,1,0,0,0,8103,8108,1,0,0,0,8104,
        8102,1,0,0,0,8105,8106,5,986,0,0,8106,8107,5,342,0,0,8107,8109,3,
        1208,604,0,8108,8105,1,0,0,0,8108,8109,1,0,0,0,8109,8128,1,0,0,0,
        8110,8111,5,11,0,0,8111,8112,5,523,0,0,8112,8113,5,341,0,0,8113,
        8118,3,612,306,0,8114,8115,5,1194,0,0,8115,8117,3,612,306,0,8116,
        8114,1,0,0,0,8117,8120,1,0,0,0,8118,8116,1,0,0,0,8118,8119,1,0,0,
        0,8119,8128,1,0,0,0,8120,8118,1,0,0,0,8121,8122,5,781,0,0,8122,8123,
        5,341,0,0,8123,8128,3,1208,604,0,8124,8125,5,579,0,0,8125,8126,5,
        341,0,0,8126,8128,3,612,306,0,8127,8095,1,0,0,0,8127,8110,1,0,0,
        0,8127,8121,1,0,0,0,8127,8124,1,0,0,0,8128,611,1,0,0,0,8129,8130,
        5,1192,0,0,8130,8131,5,584,0,0,8131,8132,5,1174,0,0,8132,8137,3,
        1212,606,0,8133,8134,5,1194,0,0,8134,8135,5,590,0,0,8135,8136,5,
        1174,0,0,8136,8138,3,1212,606,0,8137,8133,1,0,0,0,8137,8138,1,0,
        0,0,8138,8143,1,0,0,0,8139,8140,5,1194,0,0,8140,8141,5,347,0,0,8141,
        8142,5,1174,0,0,8142,8144,5,1170,0,0,8143,8139,1,0,0,0,8143,8144,
        1,0,0,0,8144,8149,1,0,0,0,8145,8146,5,1194,0,0,8146,8147,5,905,0,
        0,8147,8148,5,1174,0,0,8148,8150,3,1218,609,0,8149,8145,1,0,0,0,
        8149,8150,1,0,0,0,8150,8156,1,0,0,0,8151,8152,5,1194,0,0,8152,8153,
        5,540,0,0,8153,8154,5,1174,0,0,8154,8157,3,1218,609,0,8155,8157,
        5,1022,0,0,8156,8151,1,0,0,0,8156,8155,1,0,0,0,8156,8157,1,0,0,0,
        8157,8162,1,0,0,0,8158,8159,5,1194,0,0,8159,8160,5,346,0,0,8160,
        8161,5,1174,0,0,8161,8163,3,1218,609,0,8162,8158,1,0,0,0,8162,8163,
        1,0,0,0,8163,8166,1,0,0,0,8164,8165,5,1194,0,0,8165,8167,5,644,0,
        0,8166,8164,1,0,0,0,8166,8167,1,0,0,0,8167,8168,1,0,0,0,8168,8169,
        5,1193,0,0,8169,613,1,0,0,0,8170,8171,5,11,0,0,8171,8172,5,342,0,
        0,8172,8177,3,1208,604,0,8173,8174,5,179,0,0,8174,8178,5,351,0,0,
        8175,8176,5,179,0,0,8176,8178,5,562,0,0,8177,8173,1,0,0,0,8177,8175,
        1,0,0,0,8177,8178,1,0,0,0,8178,8195,1,0,0,0,8179,8180,5,781,0,0,
        8180,8181,5,342,0,0,8181,8195,3,1208,604,0,8182,8183,5,579,0,0,8183,
        8184,5,342,0,0,8184,8192,3,1208,604,0,8185,8193,3,616,308,0,8186,
        8193,5,243,0,0,8187,8188,5,584,0,0,8188,8189,5,1174,0,0,8189,8193,
        3,1208,604,0,8190,8193,5,71,0,0,8191,8193,5,70,0,0,8192,8185,1,0,
        0,0,8192,8186,1,0,0,0,8192,8187,1,0,0,0,8192,8190,1,0,0,0,8192,8191,
        1,0,0,0,8193,8195,1,0,0,0,8194,8170,1,0,0,0,8194,8179,1,0,0,0,8194,
        8182,1,0,0,0,8195,615,1,0,0,0,8196,8197,7,78,0,0,8197,617,1,0,0,
        0,8198,8222,3,620,310,0,8199,8222,3,622,311,0,8200,8222,3,626,313,
        0,8201,8222,3,628,314,0,8202,8222,3,632,316,0,8203,8222,3,658,329,
        0,8204,8222,3,660,330,0,8205,8222,3,662,331,0,8206,8222,3,664,332,
        0,8207,8222,3,666,333,0,8208,8222,3,668,334,0,8209,8222,3,670,335,
        0,8210,8211,5,351,0,0,8211,8222,3,1134,567,0,8212,8222,3,672,336,
        0,8213,8222,3,674,337,0,8214,8222,3,676,338,0,8215,8222,3,678,339,
        0,8216,8222,3,680,340,0,8217,8222,3,682,341,0,8218,8222,3,684,342,
        0,8219,8222,3,686,343,0,8220,8222,3,688,344,0,8221,8198,1,0,0,0,
        8221,8199,1,0,0,0,8221,8200,1,0,0,0,8221,8201,1,0,0,0,8221,8202,
        1,0,0,0,8221,8203,1,0,0,0,8221,8204,1,0,0,0,8221,8205,1,0,0,0,8221,
        8206,1,0,0,0,8221,8207,1,0,0,0,8221,8208,1,0,0,0,8221,8209,1,0,0,
        0,8221,8210,1,0,0,0,8221,8212,1,0,0,0,8221,8213,1,0,0,0,8221,8214,
        1,0,0,0,8221,8215,1,0,0,0,8221,8216,1,0,0,0,8221,8217,1,0,0,0,8221,
        8218,1,0,0,0,8221,8219,1,0,0,0,8221,8220,1,0,0,0,8222,619,1,0,0,
        0,8223,8224,5,75,0,0,8224,8241,3,1174,587,0,8225,8226,5,76,0,0,8226,
        8241,5,643,0,0,8227,8232,5,649,0,0,8228,8229,5,446,0,0,8229,8230,
        5,1174,0,0,8230,8233,5,649,0,0,8231,8233,5,643,0,0,8232,8228,1,0,
        0,0,8232,8231,1,0,0,0,8233,8241,1,0,0,0,8234,8235,5,78,0,0,8235,
        8241,3,1174,587,0,8236,8237,5,79,0,0,8237,8241,3,1174,587,0,8238,
        8239,5,80,0,0,8239,8241,7,17,0,0,8240,8223,1,0,0,0,8240,8225,1,0,
        0,0,8240,8227,1,0,0,0,8240,8234,1,0,0,0,8240,8236,1,0,0,0,8240,8238,
        1,0,0,0,8241,621,1,0,0,0,8242,8243,5,128,0,0,8243,8261,5,1174,0,
        0,8244,8262,5,643,0,0,8245,8246,5,649,0,0,8246,8257,5,1192,0,0,8247,
        8252,3,624,312,0,8248,8249,5,1194,0,0,8249,8251,3,624,312,0,8250,
        8248,1,0,0,0,8251,8254,1,0,0,0,8252,8250,1,0,0,0,8252,8253,1,0,0,
        0,8253,8256,1,0,0,0,8254,8252,1,0,0,0,8255,8247,1,0,0,0,8256,8259,
        1,0,0,0,8257,8255,1,0,0,0,8257,8258,1,0,0,0,8258,8260,1,0,0,0,8259,
        8257,1,0,0,0,8260,8262,5,1193,0,0,8261,8244,1,0,0,0,8261,8245,1,
        0,0,0,8262,623,1,0,0,0,8263,8264,5,74,0,0,8264,8265,5,1174,0,0,8265,
        8271,3,1174,587,0,8266,8267,5,127,0,0,8267,8268,5,1174,0,0,8268,
        8269,5,1168,0,0,8269,8271,7,79,0,0,8270,8263,1,0,0,0,8270,8266,1,
        0,0,0,8271,625,1,0,0,0,8272,8273,5,178,0,0,8273,8274,5,1174,0,0,
        8274,8275,7,62,0,0,8275,627,1,0,0,0,8276,8277,5,212,0,0,8277,8281,
        3,1174,587,0,8278,8279,5,213,0,0,8279,8281,7,80,0,0,8280,8276,1,
        0,0,0,8280,8278,1,0,0,0,8281,629,1,0,0,0,8282,8283,5,35,0,0,8283,
        8284,5,298,0,0,8284,8287,3,1208,604,0,8285,8286,5,68,0,0,8286,8288,
        3,1208,604,0,8287,8285,1,0,0,0,8287,8288,1,0,0,0,8288,8292,1,0,0,
        0,8289,8290,5,929,0,0,8290,8291,5,1174,0,0,8291,8293,7,26,0,0,8292,
        8289,1,0,0,0,8292,8293,1,0,0,0,8293,8294,1,0,0,0,8294,8295,5,56,
        0,0,8295,8296,5,976,0,0,8296,8297,5,1192,0,0,8297,8298,3,300,150,
        0,8298,8349,5,1193,0,0,8299,8300,5,363,0,0,8300,8301,5,1008,0,0,
        8301,8302,5,1192,0,0,8302,8350,5,1193,0,0,8303,8304,5,363,0,0,8304,
        8305,5,880,0,0,8305,8306,5,1192,0,0,8306,8311,3,298,149,0,8307,8309,
        5,1194,0,0,8308,8307,1,0,0,0,8308,8309,1,0,0,0,8309,8310,1,0,0,0,
        8310,8312,3,296,148,0,8311,8308,1,0,0,0,8311,8312,1,0,0,0,8312,8319,
        1,0,0,0,8313,8315,5,1194,0,0,8314,8313,1,0,0,0,8314,8315,1,0,0,0,
        8315,8316,1,0,0,0,8316,8317,5,566,0,0,8317,8318,5,1174,0,0,8318,
        8320,7,27,0,0,8319,8314,1,0,0,0,8319,8320,1,0,0,0,8320,8327,1,0,
        0,0,8321,8323,5,1194,0,0,8322,8321,1,0,0,0,8322,8323,1,0,0,0,8323,
        8324,1,0,0,0,8324,8325,5,567,0,0,8325,8326,5,1174,0,0,8326,8328,
        5,1168,0,0,8327,8322,1,0,0,0,8327,8328,1,0,0,0,8328,8329,1,0,0,0,
        8329,8330,5,1193,0,0,8330,8350,1,0,0,0,8331,8332,5,363,0,0,8332,
        8333,5,219,0,0,8333,8334,5,1192,0,0,8334,8339,3,298,149,0,8335,8337,
        5,1194,0,0,8336,8335,1,0,0,0,8336,8337,1,0,0,0,8337,8338,1,0,0,0,
        8338,8340,3,296,148,0,8339,8336,1,0,0,0,8339,8340,1,0,0,0,8340,8342,
        1,0,0,0,8341,8343,5,1194,0,0,8342,8341,1,0,0,0,8342,8343,1,0,0,0,
        8343,8344,1,0,0,0,8344,8345,5,819,0,0,8345,8346,5,1174,0,0,8346,
        8347,7,28,0,0,8347,8348,5,1193,0,0,8348,8350,1,0,0,0,8349,8299,1,
        0,0,0,8349,8303,1,0,0,0,8349,8331,1,0,0,0,8350,631,1,0,0,0,8351,
        8352,3,634,317,0,8352,633,1,0,0,0,8353,8354,3,636,318,0,8354,8355,
        3,642,321,0,8355,8360,1,0,0,0,8356,8357,3,638,319,0,8357,8358,3,
        644,322,0,8358,8360,1,0,0,0,8359,8353,1,0,0,0,8359,8356,1,0,0,0,
        8360,635,1,0,0,0,8361,8362,5,689,0,0,8362,637,1,0,0,0,8363,8364,
        5,1067,0,0,8364,639,1,0,0,0,8365,8366,5,1174,0,0,8366,641,1,0,0,
        0,8367,8368,3,640,320,0,8368,8369,3,648,324,0,8369,8380,1,0,0,0,
        8370,8380,5,331,0,0,8371,8380,5,370,0,0,8372,8380,5,643,0,0,8373,
        8380,5,808,0,0,8374,8375,5,840,0,0,8375,8380,7,81,0,0,8376,8380,
        5,959,0,0,8377,8378,5,983,0,0,8378,8380,5,1168,0,0,8379,8367,1,0,
        0,0,8379,8370,1,0,0,0,8379,8371,1,0,0,0,8379,8372,1,0,0,0,8379,8373,
        1,0,0,0,8379,8374,1,0,0,0,8379,8376,1,0,0,0,8379,8377,1,0,0,0,8380,
        643,1,0,0,0,8381,8382,3,640,320,0,8382,8383,3,646,323,0,8383,8386,
        1,0,0,0,8384,8386,5,643,0,0,8385,8381,1,0,0,0,8385,8384,1,0,0,0,
        8386,645,1,0,0,0,8387,8388,3,648,324,0,8388,647,1,0,0,0,8389,8390,
        3,652,326,0,8390,8391,3,656,328,0,8391,8392,3,650,325,0,8392,8393,
        3,654,327,0,8393,649,1,0,0,0,8394,8395,5,1196,0,0,8395,651,1,0,0,
        0,8396,8397,5,976,0,0,8397,8398,5,1196,0,0,8398,8399,5,279,0,0,8399,
        653,1,0,0,0,8400,8401,5,1168,0,0,8401,655,1,0,0,0,8402,8403,3,1208,
        604,0,8403,8404,5,1187,0,0,8404,8405,3,656,328,0,8405,8413,1,0,0,
        0,8406,8407,3,1208,604,0,8407,8408,5,1187,0,0,8408,8411,1,0,0,0,
        8409,8411,3,1208,604,0,8410,8406,1,0,0,0,8410,8409,1,0,0,0,8411,
        8413,1,0,0,0,8412,8402,1,0,0,0,8412,8410,1,0,0,0,8413,657,1,0,0,
        0,8414,8415,5,230,0,0,8415,8416,3,1174,587,0,8416,659,1,0,0,0,8417,
        8418,5,295,0,0,8418,8419,3,1174,587,0,8419,661,1,0,0,0,8420,8421,
        7,82,0,0,8421,663,1,0,0,0,8422,8423,7,83,0,0,8423,665,1,0,0,0,8424,
        8425,7,84,0,0,8425,667,1,0,0,0,8426,8427,5,251,0,0,8427,8428,5,1174,
        0,0,8428,8429,7,85,0,0,8429,669,1,0,0,0,8430,8431,5,234,0,0,8431,
        8456,3,1174,587,0,8432,8433,5,1004,0,0,8433,8456,3,1174,587,0,8434,
        8435,5,247,0,0,8435,8438,5,1174,0,0,8436,8439,3,1208,604,0,8437,
        8439,5,1170,0,0,8438,8436,1,0,0,0,8438,8437,1,0,0,0,8439,8456,1,
        0,0,0,8440,8441,5,246,0,0,8441,8444,5,1174,0,0,8442,8445,3,1208,
        604,0,8443,8445,5,1170,0,0,8444,8442,1,0,0,0,8444,8443,1,0,0,0,8445,
        8456,1,0,0,0,8446,8447,5,588,0,0,8447,8448,5,1174,0,0,8448,8456,
        7,17,0,0,8449,8450,5,997,0,0,8450,8451,5,1174,0,0,8451,8456,7,17,
        0,0,8452,8453,5,1009,0,0,8453,8454,5,1174,0,0,8454,8456,5,1168,0,
        0,8455,8430,1,0,0,0,8455,8432,1,0,0,0,8455,8434,1,0,0,0,8455,8440,
        1,0,0,0,8455,8446,1,0,0,0,8455,8449,1,0,0,0,8455,8452,1,0,0,0,8456,
        671,1,0,0,0,8457,8466,5,407,0,0,8458,8459,5,81,0,0,8459,8460,5,403,
        0,0,8460,8461,5,1174,0,0,8461,8464,3,1208,604,0,8462,8464,5,643,
        0,0,8463,8458,1,0,0,0,8463,8462,1,0,0,0,8464,8467,1,0,0,0,8465,8467,
        7,86,0,0,8466,8463,1,0,0,0,8466,8465,1,0,0,0,8467,673,1,0,0,0,8468,
        8469,5,577,0,0,8469,8470,7,17,0,0,8470,675,1,0,0,0,8471,8472,5,681,
        0,0,8472,8473,7,87,0,0,8473,677,1,0,0,0,8474,8475,5,771,0,0,8475,
        8484,7,88,0,0,8476,8477,5,988,0,0,8477,8484,3,1174,587,0,8478,8479,
        5,5,0,0,8479,8480,5,1174,0,0,8480,8484,3,1174,587,0,8481,8482,5,
        679,0,0,8482,8484,7,89,0,0,8483,8474,1,0,0,0,8483,8476,1,0,0,0,8483,
        8478,1,0,0,0,8483,8481,1,0,0,0,8484,679,1,0,0,0,8485,8492,5,292,
        0,0,8486,8492,5,270,0,0,8487,8492,5,593,0,0,8488,8492,5,302,0,0,
        8489,8490,5,420,0,0,8490,8492,3,1174,587,0,8491,8485,1,0,0,0,8491,
        8486,1,0,0,0,8491,8487,1,0,0,0,8491,8488,1,0,0,0,8491,8489,1,0,0,
        0,8492,681,1,0,0,0,8493,8494,5,30,0,0,8494,8499,3,1174,587,0,8495,
        8496,5,762,0,0,8496,8499,7,17,0,0,8497,8499,7,17,0,0,8498,8493,1,
        0,0,0,8498,8495,1,0,0,0,8498,8497,1,0,0,0,8499,683,1,0,0,0,8500,
        8501,5,41,0,0,8501,8522,3,1174,587,0,8502,8503,5,40,0,0,8503,8522,
        3,1174,587,0,8504,8505,5,44,0,0,8505,8522,3,1174,587,0,8506,8507,
        5,45,0,0,8507,8522,3,1174,587,0,8508,8509,5,54,0,0,8509,8522,3,1174,
        587,0,8510,8511,5,164,0,0,8511,8512,5,1174,0,0,8512,8522,5,1168,
        0,0,8513,8514,5,171,0,0,8514,8522,3,1174,587,0,8515,8516,5,634,0,
        0,8516,8522,3,1174,587,0,8517,8518,5,743,0,0,8518,8522,3,1174,587,
        0,8519,8520,5,772,0,0,8520,8522,3,1174,587,0,8521,8500,1,0,0,0,8521,
        8502,1,0,0,0,8521,8504,1,0,0,0,8521,8506,1,0,0,0,8521,8508,1,0,0,
        0,8521,8510,1,0,0,0,8521,8513,1,0,0,0,8521,8515,1,0,0,0,8521,8517,
        1,0,0,0,8521,8519,1,0,0,0,8522,685,1,0,0,0,8523,8524,5,974,0,0,8524,
        8525,5,1174,0,0,8525,8526,5,1168,0,0,8526,8527,7,90,0,0,8527,687,
        1,0,0,0,8528,8529,5,820,0,0,8529,8530,5,19,0,0,8530,8535,5,1168,
        0,0,8531,8532,5,820,0,0,8532,8535,5,438,0,0,8533,8535,5,626,0,0,
        8534,8528,1,0,0,0,8534,8531,1,0,0,0,8534,8533,1,0,0,0,8535,689,1,
        0,0,0,8536,8537,5,280,0,0,8537,8540,5,447,0,0,8538,8539,5,431,0,
        0,8539,8541,5,320,0,0,8540,8538,1,0,0,0,8540,8541,1,0,0,0,8541,8558,
        1,0,0,0,8542,8547,3,692,346,0,8543,8544,5,1194,0,0,8544,8546,3,692,
        346,0,8545,8543,1,0,0,0,8546,8549,1,0,0,0,8547,8545,1,0,0,0,8547,
        8548,1,0,0,0,8548,8559,1,0,0,0,8549,8547,1,0,0,0,8550,8555,3,694,
        347,0,8551,8552,5,1194,0,0,8552,8554,3,694,347,0,8553,8551,1,0,0,
        0,8554,8557,1,0,0,0,8555,8553,1,0,0,0,8555,8556,1,0,0,0,8556,8559,
        1,0,0,0,8557,8555,1,0,0,0,8558,8542,1,0,0,0,8558,8550,1,0,0,0,8559,
        8561,1,0,0,0,8560,8562,5,1195,0,0,8561,8560,1,0,0,0,8561,8562,1,
        0,0,0,8562,691,1,0,0,0,8563,8564,3,1208,604,0,8564,8565,5,649,0,
        0,8565,8566,3,1148,574,0,8566,693,1,0,0,0,8567,8568,3,1208,604,0,
        8568,8569,5,1187,0,0,8569,8571,1,0,0,0,8570,8567,1,0,0,0,8570,8571,
        1,0,0,0,8571,8572,1,0,0,0,8572,8573,3,1208,604,0,8573,8574,5,1187,
        0,0,8574,8575,3,1208,604,0,8575,695,1,0,0,0,8576,8577,5,280,0,0,
        8577,8580,7,67,0,0,8578,8579,5,431,0,0,8579,8581,5,320,0,0,8580,
        8578,1,0,0,0,8580,8581,1,0,0,0,8581,8582,1,0,0,0,8582,8587,3,1154,
        577,0,8583,8584,5,1194,0,0,8584,8586,3,1154,577,0,8585,8583,1,0,
        0,0,8586,8589,1,0,0,0,8587,8585,1,0,0,0,8587,8588,1,0,0,0,8588,8591,
        1,0,0,0,8589,8587,1,0,0,0,8590,8592,5,1195,0,0,8591,8590,1,0,0,0,
        8591,8592,1,0,0,0,8592,697,1,0,0,0,8593,8596,3,700,350,0,8594,8596,
        3,702,351,0,8595,8593,1,0,0,0,8595,8594,1,0,0,0,8596,699,1,0,0,0,
        8597,8598,5,280,0,0,8598,8601,5,999,0,0,8599,8600,5,431,0,0,8600,
        8602,5,320,0,0,8601,8599,1,0,0,0,8601,8602,1,0,0,0,8602,8603,1,0,
        0,0,8603,8608,3,1152,576,0,8604,8605,5,1194,0,0,8605,8607,3,1152,
        576,0,8606,8604,1,0,0,0,8607,8610,1,0,0,0,8608,8606,1,0,0,0,8608,
        8609,1,0,0,0,8609,8612,1,0,0,0,8610,8608,1,0,0,0,8611,8613,5,1195,
        0,0,8612,8611,1,0,0,0,8612,8613,1,0,0,0,8613,701,1,0,0,0,8614,8615,
        5,280,0,0,8615,8618,5,999,0,0,8616,8617,5,431,0,0,8617,8619,5,320,
        0,0,8618,8616,1,0,0,0,8618,8619,1,0,0,0,8619,8620,1,0,0,0,8620,8625,
        3,1152,576,0,8621,8622,5,1194,0,0,8622,8624,3,1152,576,0,8623,8621,
        1,0,0,0,8624,8627,1,0,0,0,8625,8623,1,0,0,0,8625,8626,1,0,0,0,8626,
        8628,1,0,0,0,8627,8625,1,0,0,0,8628,8632,5,649,0,0,8629,8633,5,217,
        0,0,8630,8631,5,22,0,0,8631,8633,5,876,0,0,8632,8629,1,0,0,0,8632,
        8630,1,0,0,0,8633,8635,1,0,0,0,8634,8636,5,1195,0,0,8635,8634,1,
        0,0,0,8635,8636,1,0,0,0,8636,703,1,0,0,0,8637,8638,5,280,0,0,8638,
        8641,5,384,0,0,8639,8640,5,431,0,0,8640,8642,5,320,0,0,8641,8639,
        1,0,0,0,8641,8642,1,0,0,0,8642,8643,1,0,0,0,8643,8648,3,1154,577,
        0,8644,8645,5,1194,0,0,8645,8647,3,1154,577,0,8646,8644,1,0,0,0,
        8647,8650,1,0,0,0,8648,8646,1,0,0,0,8648,8649,1,0,0,0,8649,8652,
        1,0,0,0,8650,8648,1,0,0,0,8651,8653,5,1195,0,0,8652,8651,1,0,0,0,
        8652,8653,1,0,0,0,8653,705,1,0,0,0,8654,8655,5,280,0,0,8655,8665,
        5,931,0,0,8656,8658,5,1194,0,0,8657,8656,1,0,0,0,8657,8658,1,0,0,
        0,8658,8662,1,0,0,0,8659,8660,3,1150,575,0,8660,8661,5,1187,0,0,
        8661,8663,1,0,0,0,8662,8659,1,0,0,0,8662,8663,1,0,0,0,8663,8664,
        1,0,0,0,8664,8666,3,1208,604,0,8665,8657,1,0,0,0,8666,8667,1,0,0,
        0,8667,8665,1,0,0,0,8667,8668,1,0,0,0,8668,8669,1,0,0,0,8669,8670,
        5,1195,0,0,8670,707,1,0,0,0,8671,8672,5,280,0,0,8672,8675,5,966,
        0,0,8673,8674,5,431,0,0,8674,8676,5,320,0,0,8675,8673,1,0,0,0,8675,
        8676,1,0,0,0,8676,8677,1,0,0,0,8677,8682,3,1150,575,0,8678,8679,
        5,1194,0,0,8679,8681,3,1150,575,0,8680,8678,1,0,0,0,8681,8684,1,
        0,0,0,8682,8680,1,0,0,0,8682,8683,1,0,0,0,8683,8686,1,0,0,0,8684,
        8682,1,0,0,0,8685,8687,5,1195,0,0,8686,8685,1,0,0,0,8686,8687,1,
        0,0,0,8687,709,1,0,0,0,8688,8689,5,280,0,0,8689,8692,5,1051,0,0,
        8690,8691,5,431,0,0,8691,8693,5,320,0,0,8692,8690,1,0,0,0,8692,8693,
        1,0,0,0,8693,8694,1,0,0,0,8694,8699,3,1152,576,0,8695,8696,5,1194,
        0,0,8696,8698,3,1152,576,0,8697,8695,1,0,0,0,8698,8701,1,0,0,0,8699,
        8697,1,0,0,0,8699,8700,1,0,0,0,8700,8703,1,0,0,0,8701,8699,1,0,0,
        0,8702,8704,5,1195,0,0,8703,8702,1,0,0,0,8703,8704,1,0,0,0,8704,
        711,1,0,0,0,8705,8706,5,197,0,0,8706,8707,5,1010,0,0,8707,8713,3,
        1152,576,0,8708,8709,5,378,0,0,8709,8711,3,1200,600,0,8710,8712,
        3,1178,589,0,8711,8710,1,0,0,0,8711,8712,1,0,0,0,8712,8714,1,0,0,
        0,8713,8708,1,0,0,0,8713,8714,1,0,0,0,8714,8721,1,0,0,0,8715,8716,
        5,56,0,0,8716,8717,5,966,0,0,8717,8718,5,1192,0,0,8718,8719,3,864,
        432,0,8719,8720,5,1193,0,0,8720,8722,1,0,0,0,8721,8715,1,0,0,0,8721,
        8722,1,0,0,0,8722,713,1,0,0,0,8723,8724,5,280,0,0,8724,8727,5,1010,
        0,0,8725,8726,5,431,0,0,8726,8728,5,320,0,0,8727,8725,1,0,0,0,8727,
        8728,1,0,0,0,8728,8729,1,0,0,0,8729,8730,3,1152,576,0,8730,715,1,
        0,0,0,8731,8734,3,718,359,0,8732,8734,3,720,360,0,8733,8731,1,0,
        0,0,8733,8732,1,0,0,0,8734,717,1,0,0,0,8735,8736,5,656,0,0,8736,
        8737,5,1192,0,0,8737,8738,3,1208,604,0,8738,8739,5,1194,0,0,8739,
        8740,5,1170,0,0,8740,8741,5,1193,0,0,8741,719,1,0,0,0,8742,8743,
        5,654,0,0,8743,8744,5,1192,0,0,8744,8745,5,1170,0,0,8745,8746,5,
        1194,0,0,8746,8747,5,1170,0,0,8747,8748,5,1193,0,0,8748,8750,5,1187,
        0,0,8749,8751,3,1208,604,0,8750,8749,1,0,0,0,8750,8751,1,0,0,0,8751,
        8752,1,0,0,0,8752,8754,5,1187,0,0,8753,8755,3,1208,604,0,8754,8753,
        1,0,0,0,8754,8755,1,0,0,0,8755,8756,1,0,0,0,8756,8757,5,1187,0,0,
        8757,8758,3,1208,604,0,8758,721,1,0,0,0,8759,8760,5,240,0,0,8760,
        8762,5,1166,0,0,8761,8763,5,56,0,0,8762,8761,1,0,0,0,8762,8763,1,
        0,0,0,8763,8767,1,0,0,0,8764,8768,3,1200,600,0,8765,8768,3,856,428,
        0,8766,8768,3,1150,575,0,8767,8764,1,0,0,0,8767,8765,1,0,0,0,8767,
        8766,1,0,0,0,8768,8798,1,0,0,0,8769,8770,5,240,0,0,8770,8775,3,854,
        427,0,8771,8772,5,1194,0,0,8772,8774,3,854,427,0,8773,8771,1,0,0,
        0,8774,8777,1,0,0,0,8775,8773,1,0,0,0,8775,8776,1,0,0,0,8776,8798,
        1,0,0,0,8777,8775,1,0,0,0,8778,8779,5,240,0,0,8779,8781,5,1166,0,
        0,8780,8782,5,56,0,0,8781,8780,1,0,0,0,8781,8782,1,0,0,0,8782,8783,
        1,0,0,0,8783,8798,3,860,430,0,8784,8785,5,1063,0,0,8785,8786,5,1076,
        0,0,8786,8787,5,1192,0,0,8787,8792,3,724,362,0,8788,8789,5,1194,
        0,0,8789,8791,3,724,362,0,8790,8788,1,0,0,0,8791,8794,1,0,0,0,8792,
        8790,1,0,0,0,8792,8793,1,0,0,0,8793,8795,1,0,0,0,8794,8792,1,0,0,
        0,8795,8796,5,1193,0,0,8796,8798,1,0,0,0,8797,8759,1,0,0,0,8797,
        8769,1,0,0,0,8797,8778,1,0,0,0,8797,8784,1,0,0,0,8798,723,1,0,0,
        0,8799,8800,5,1170,0,0,8800,8801,5,56,0,0,8801,8805,3,1208,604,0,
        8802,8803,5,243,0,0,8803,8805,5,1170,0,0,8804,8799,1,0,0,0,8804,
        8802,1,0,0,0,8805,725,1,0,0,0,8806,8808,5,147,0,0,8807,8809,5,397,
        0,0,8808,8807,1,0,0,0,8808,8809,1,0,0,0,8809,8810,1,0,0,0,8810,8812,
        3,1172,586,0,8811,8813,5,1195,0,0,8812,8811,1,0,0,0,8812,8813,1,
        0,0,0,8813,8836,1,0,0,0,8814,8816,5,239,0,0,8815,8817,5,397,0,0,
        8816,8815,1,0,0,0,8816,8817,1,0,0,0,8817,8819,1,0,0,0,8818,8820,
        5,211,0,0,8819,8818,1,0,0,0,8819,8820,1,0,0,0,8820,8821,1,0,0,0,
        8821,8823,3,1172,586,0,8822,8824,5,1195,0,0,8823,8822,1,0,0,0,8823,
        8824,1,0,0,0,8824,8836,1,0,0,0,8825,8836,3,900,450,0,8826,8836,3,
        906,453,0,8827,8829,5,653,0,0,8828,8830,5,397,0,0,8829,8828,1,0,
        0,0,8829,8830,1,0,0,0,8830,8831,1,0,0,0,8831,8833,3,1172,586,0,8832,
        8834,5,1195,0,0,8833,8832,1,0,0,0,8833,8834,1,0,0,0,8834,8836,1,
        0,0,0,8835,8806,1,0,0,0,8835,8814,1,0,0,0,8835,8825,1,0,0,0,8835,
        8826,1,0,0,0,8835,8827,1,0,0,0,8836,727,1,0,0,0,8837,8838,5,85,0,
        0,8838,8839,5,217,0,0,8839,8852,3,1208,604,0,8840,8849,5,766,0,0,
        8841,8843,5,1194,0,0,8842,8841,1,0,0,0,8842,8843,1,0,0,0,8843,8844,
        1,0,0,0,8844,8845,7,91,0,0,8845,8846,5,1174,0,0,8846,8848,5,1170,
        0,0,8847,8842,1,0,0,0,8848,8851,1,0,0,0,8849,8847,1,0,0,0,8849,8850,
        1,0,0,0,8850,8853,1,0,0,0,8851,8849,1,0,0,0,8852,8840,1,0,0,0,8852,
        8853,1,0,0,0,8853,8862,1,0,0,0,8854,8856,5,1194,0,0,8855,8854,1,
        0,0,0,8855,8856,1,0,0,0,8856,8857,1,0,0,0,8857,8858,7,91,0,0,8858,
        8859,5,1174,0,0,8859,8861,5,1170,0,0,8860,8855,1,0,0,0,8861,8864,
        1,0,0,0,8862,8860,1,0,0,0,8862,8863,1,0,0,0,8863,8888,1,0,0,0,8864,
        8862,1,0,0,0,8865,8870,5,986,0,0,8866,8868,5,1194,0,0,8867,8866,
        1,0,0,0,8867,8868,1,0,0,0,8868,8869,1,0,0,0,8869,8871,3,1208,604,
        0,8870,8867,1,0,0,0,8871,8872,1,0,0,0,8872,8870,1,0,0,0,8872,8873,
        1,0,0,0,8873,8889,1,0,0,0,8874,8884,5,986,0,0,8875,8877,5,1194,0,
        0,8876,8875,1,0,0,0,8876,8877,1,0,0,0,8877,8878,1,0,0,0,8878,8879,
        7,92,0,0,8879,8882,5,1174,0,0,8880,8883,5,1170,0,0,8881,8883,3,1208,
        604,0,8882,8880,1,0,0,0,8882,8881,1,0,0,0,8883,8885,1,0,0,0,8884,
        8876,1,0,0,0,8885,8886,1,0,0,0,8886,8884,1,0,0,0,8886,8887,1,0,0,
        0,8887,8889,1,0,0,0,8888,8865,1,0,0,0,8888,8874,1,0,0,0,8889,8923,
        1,0,0,0,8890,8891,5,575,0,0,8891,8896,5,986,0,0,8892,8894,5,1194,
        0,0,8893,8892,1,0,0,0,8893,8894,1,0,0,0,8894,8895,1,0,0,0,8895,8897,
        3,1208,604,0,8896,8893,1,0,0,0,8897,8898,1,0,0,0,8898,8896,1,0,0,
        0,8898,8899,1,0,0,0,8899,8901,1,0,0,0,8900,8890,1,0,0,0,8901,8902,
        1,0,0,0,8902,8900,1,0,0,0,8902,8903,1,0,0,0,8903,8924,1,0,0,0,8904,
        8905,5,575,0,0,8905,8915,5,986,0,0,8906,8908,5,1194,0,0,8907,8906,
        1,0,0,0,8907,8908,1,0,0,0,8908,8909,1,0,0,0,8909,8910,7,92,0,0,8910,
        8913,5,1174,0,0,8911,8914,5,1170,0,0,8912,8914,3,1208,604,0,8913,
        8911,1,0,0,0,8913,8912,1,0,0,0,8914,8916,1,0,0,0,8915,8907,1,0,0,
        0,8916,8917,1,0,0,0,8917,8915,1,0,0,0,8917,8918,1,0,0,0,8918,8920,
        1,0,0,0,8919,8904,1,0,0,0,8920,8921,1,0,0,0,8921,8919,1,0,0,0,8921,
        8922,1,0,0,0,8922,8924,1,0,0,0,8923,8900,1,0,0,0,8923,8919,1,0,0,
        0,8923,8924,1,0,0,0,8924,9085,1,0,0,0,8925,9082,5,1063,0,0,8926,
        8928,5,1194,0,0,8927,8926,1,0,0,0,8927,8928,1,0,0,0,8928,8929,1,
        0,0,0,8929,9081,5,266,0,0,8930,8932,5,1194,0,0,8931,8930,1,0,0,0,
        8931,8932,1,0,0,0,8932,8933,1,0,0,0,8933,9081,5,192,0,0,8934,8936,
        5,1194,0,0,8935,8934,1,0,0,0,8935,8936,1,0,0,0,8936,8937,1,0,0,0,
        8937,9081,7,93,0,0,8938,8940,5,1194,0,0,8939,8938,1,0,0,0,8939,8940,
        1,0,0,0,8940,8941,1,0,0,0,8941,8942,5,259,0,0,8942,8945,5,1174,0,
        0,8943,8946,5,1170,0,0,8944,8946,3,1208,604,0,8945,8943,1,0,0,0,
        8945,8944,1,0,0,0,8946,9081,1,0,0,0,8947,8949,5,1194,0,0,8948,8947,
        1,0,0,0,8948,8949,1,0,0,0,8949,8950,1,0,0,0,8950,8951,5,584,0,0,
        8951,8952,5,1174,0,0,8952,9081,3,1208,604,0,8953,8955,5,1194,0,0,
        8954,8953,1,0,0,0,8954,8955,1,0,0,0,8955,8956,1,0,0,0,8956,9081,
        5,200,0,0,8957,8959,5,1194,0,0,8958,8957,1,0,0,0,8958,8959,1,0,0,
        0,8959,8960,1,0,0,0,8960,9081,5,356,0,0,8961,8963,5,1194,0,0,8962,
        8961,1,0,0,0,8962,8963,1,0,0,0,8963,8976,1,0,0,0,8964,8965,5,324,
        0,0,8965,8968,5,1174,0,0,8966,8969,5,1170,0,0,8967,8969,3,1208,604,
        0,8968,8966,1,0,0,0,8968,8967,1,0,0,0,8969,8977,1,0,0,0,8970,8971,
        5,809,0,0,8971,8974,5,1174,0,0,8972,8975,5,1168,0,0,8973,8975,3,
        1208,604,0,8974,8972,1,0,0,0,8974,8973,1,0,0,0,8975,8977,1,0,0,0,
        8976,8964,1,0,0,0,8976,8970,1,0,0,0,8977,9081,1,0,0,0,8978,8980,
        5,1194,0,0,8979,8978,1,0,0,0,8979,8980,1,0,0,0,8980,8981,1,0,0,0,
        8981,9081,7,94,0,0,8982,8984,5,1194,0,0,8983,8982,1,0,0,0,8983,8984,
        1,0,0,0,8984,8985,1,0,0,0,8985,9081,7,95,0,0,8986,8988,5,1194,0,
        0,8987,8986,1,0,0,0,8987,8988,1,0,0,0,8988,8989,1,0,0,0,8989,9081,
        7,96,0,0,8990,8992,5,1194,0,0,8991,8990,1,0,0,0,8991,8992,1,0,0,
        0,8992,8993,1,0,0,0,8993,8994,5,558,0,0,8994,8997,5,1174,0,0,8995,
        8998,5,1170,0,0,8996,8998,3,1208,604,0,8997,8995,1,0,0,0,8997,8996,
        1,0,0,0,8998,9081,1,0,0,0,8999,9001,5,1194,0,0,9000,8999,1,0,0,0,
        9000,9001,1,0,0,0,9001,9002,1,0,0,0,9002,9003,5,559,0,0,9003,9004,
        5,1174,0,0,9004,9081,5,1170,0,0,9005,9007,5,1194,0,0,9006,9005,1,
        0,0,0,9006,9007,1,0,0,0,9007,9008,1,0,0,0,9008,9009,5,101,0,0,9009,
        9012,5,1174,0,0,9010,9013,5,1168,0,0,9011,9013,3,1208,604,0,9012,
        9010,1,0,0,0,9012,9011,1,0,0,0,9013,9081,1,0,0,0,9014,9016,5,1194,
        0,0,9015,9014,1,0,0,0,9015,9016,1,0,0,0,9016,9017,1,0,0,0,9017,9018,
        5,107,0,0,9018,9021,5,1174,0,0,9019,9022,5,1168,0,0,9020,9022,3,
        1208,604,0,9021,9019,1,0,0,0,9021,9020,1,0,0,0,9022,9081,1,0,0,0,
        9023,9025,5,1194,0,0,9024,9023,1,0,0,0,9024,9025,1,0,0,0,9025,9026,
        1,0,0,0,9026,9027,5,541,0,0,9027,9030,5,1174,0,0,9028,9031,5,1168,
        0,0,9029,9031,3,1208,604,0,9030,9028,1,0,0,0,9030,9029,1,0,0,0,9031,
        9081,1,0,0,0,9032,9034,5,1194,0,0,9033,9032,1,0,0,0,9033,9034,1,
        0,0,0,9034,9035,1,0,0,0,9035,9081,7,97,0,0,9036,9038,5,1194,0,0,
        9037,9036,1,0,0,0,9037,9038,1,0,0,0,9038,9039,1,0,0,0,9039,9081,
        7,98,0,0,9040,9042,5,1194,0,0,9041,9040,1,0,0,0,9041,9042,1,0,0,
        0,9042,9043,1,0,0,0,9043,9081,5,803,0,0,9044,9046,5,1194,0,0,9045,
        9044,1,0,0,0,9045,9046,1,0,0,0,9046,9047,1,0,0,0,9047,9050,5,934,
        0,0,9048,9049,5,1174,0,0,9049,9051,5,1168,0,0,9050,9048,1,0,0,0,
        9050,9051,1,0,0,0,9051,9081,1,0,0,0,9052,9054,5,1194,0,0,9053,9052,
        1,0,0,0,9053,9054,1,0,0,0,9054,9055,1,0,0,0,9055,9081,7,99,0,0,9056,
        9058,5,1194,0,0,9057,9056,1,0,0,0,9057,9058,1,0,0,0,9058,9059,1,
        0,0,0,9059,9081,7,100,0,0,9060,9062,5,1194,0,0,9061,9060,1,0,0,0,
        9061,9062,1,0,0,0,9062,9063,1,0,0,0,9063,9064,5,295,0,0,9064,9065,
        5,1192,0,0,9065,9066,5,21,0,0,9066,9067,5,1174,0,0,9067,9068,7,101,
        0,0,9068,9069,5,1194,0,0,9069,9070,5,876,0,0,9070,9071,5,121,0,0,
        9071,9078,5,1174,0,0,9072,9079,3,1208,604,0,9073,9074,5,876,0,0,
        9074,9075,5,61,0,0,9075,9076,5,489,0,0,9076,9077,5,1174,0,0,9077,
        9079,3,1208,604,0,9078,9072,1,0,0,0,9078,9073,1,0,0,0,9079,9081,
        1,0,0,0,9080,8927,1,0,0,0,9080,8931,1,0,0,0,9080,8935,1,0,0,0,9080,
        8939,1,0,0,0,9080,8948,1,0,0,0,9080,8954,1,0,0,0,9080,8958,1,0,0,
        0,9080,8962,1,0,0,0,9080,8979,1,0,0,0,9080,8983,1,0,0,0,9080,8987,
        1,0,0,0,9080,8991,1,0,0,0,9080,9000,1,0,0,0,9080,9006,1,0,0,0,9080,
        9015,1,0,0,0,9080,9024,1,0,0,0,9080,9033,1,0,0,0,9080,9037,1,0,0,
        0,9080,9041,1,0,0,0,9080,9045,1,0,0,0,9080,9053,1,0,0,0,9080,9057,
        1,0,0,0,9080,9061,1,0,0,0,9081,9084,1,0,0,0,9082,9080,1,0,0,0,9082,
        9083,1,0,0,0,9083,9086,1,0,0,0,9084,9082,1,0,0,0,9085,8925,1,0,0,
        0,9085,9086,1,0,0,0,9086,729,1,0,0,0,9087,9088,5,85,0,0,9088,9089,
        5,523,0,0,9089,9113,3,1208,604,0,9090,9095,5,986,0,0,9091,9093,5,
        1194,0,0,9092,9091,1,0,0,0,9092,9093,1,0,0,0,9093,9094,1,0,0,0,9094,
        9096,3,1208,604,0,9095,9092,1,0,0,0,9096,9097,1,0,0,0,9097,9095,
        1,0,0,0,9097,9098,1,0,0,0,9098,9114,1,0,0,0,9099,9109,5,986,0,0,
        9100,9102,5,1194,0,0,9101,9100,1,0,0,0,9101,9102,1,0,0,0,9102,9103,
        1,0,0,0,9103,9104,7,92,0,0,9104,9107,5,1174,0,0,9105,9108,5,1170,
        0,0,9106,9108,3,1208,604,0,9107,9105,1,0,0,0,9107,9106,1,0,0,0,9108,
        9110,1,0,0,0,9109,9101,1,0,0,0,9110,9111,1,0,0,0,9111,9109,1,0,0,
        0,9111,9112,1,0,0,0,9112,9114,1,0,0,0,9113,9090,1,0,0,0,9113,9099,
        1,0,0,0,9114,9148,1,0,0,0,9115,9116,5,575,0,0,9116,9121,5,986,0,
        0,9117,9119,5,1194,0,0,9118,9117,1,0,0,0,9118,9119,1,0,0,0,9119,
        9120,1,0,0,0,9120,9122,3,1208,604,0,9121,9118,1,0,0,0,9122,9123,
        1,0,0,0,9123,9121,1,0,0,0,9123,9124,1,0,0,0,9124,9126,1,0,0,0,9125,
        9115,1,0,0,0,9126,9127,1,0,0,0,9127,9125,1,0,0,0,9127,9128,1,0,0,
        0,9128,9149,1,0,0,0,9129,9130,5,575,0,0,9130,9140,5,986,0,0,9131,
        9133,5,1194,0,0,9132,9131,1,0,0,0,9132,9133,1,0,0,0,9133,9134,1,
        0,0,0,9134,9135,7,92,0,0,9135,9138,5,1174,0,0,9136,9139,5,1170,0,
        0,9137,9139,3,1208,604,0,9138,9136,1,0,0,0,9138,9137,1,0,0,0,9139,
        9141,1,0,0,0,9140,9132,1,0,0,0,9141,9142,1,0,0,0,9142,9140,1,0,0,
        0,9142,9143,1,0,0,0,9143,9145,1,0,0,0,9144,9129,1,0,0,0,9145,9146,
        1,0,0,0,9146,9144,1,0,0,0,9146,9147,1,0,0,0,9147,9149,1,0,0,0,9148,
        9125,1,0,0,0,9148,9144,1,0,0,0,9148,9149,1,0,0,0,9149,9323,1,0,0,
        0,9150,9320,5,1063,0,0,9151,9153,5,1194,0,0,9152,9151,1,0,0,0,9152,
        9153,1,0,0,0,9153,9154,1,0,0,0,9154,9319,5,266,0,0,9155,9157,5,1194,
        0,0,9156,9155,1,0,0,0,9156,9157,1,0,0,0,9157,9158,1,0,0,0,9158,9319,
        5,192,0,0,9159,9161,5,1194,0,0,9160,9159,1,0,0,0,9160,9161,1,0,0,
        0,9161,9162,1,0,0,0,9162,9319,7,93,0,0,9163,9165,5,1194,0,0,9164,
        9163,1,0,0,0,9164,9165,1,0,0,0,9165,9166,1,0,0,0,9166,9167,5,259,
        0,0,9167,9170,5,1174,0,0,9168,9171,5,1170,0,0,9169,9171,3,1208,604,
        0,9170,9168,1,0,0,0,9170,9169,1,0,0,0,9171,9319,1,0,0,0,9172,9174,
        5,1194,0,0,9173,9172,1,0,0,0,9173,9174,1,0,0,0,9174,9175,1,0,0,0,
        9175,9176,5,584,0,0,9176,9177,5,1174,0,0,9177,9319,3,1208,604,0,
        9178,9180,5,1194,0,0,9179,9178,1,0,0,0,9179,9180,1,0,0,0,9180,9181,
        1,0,0,0,9181,9319,5,200,0,0,9182,9184,5,1194,0,0,9183,9182,1,0,0,
        0,9183,9184,1,0,0,0,9184,9185,1,0,0,0,9185,9319,5,356,0,0,9186,9188,
        5,1194,0,0,9187,9186,1,0,0,0,9187,9188,1,0,0,0,9188,9201,1,0,0,0,
        9189,9190,5,324,0,0,9190,9193,5,1174,0,0,9191,9194,5,1170,0,0,9192,
        9194,3,1208,604,0,9193,9191,1,0,0,0,9193,9192,1,0,0,0,9194,9202,
        1,0,0,0,9195,9196,5,809,0,0,9196,9199,5,1174,0,0,9197,9200,5,1168,
        0,0,9198,9200,3,1208,604,0,9199,9197,1,0,0,0,9199,9198,1,0,0,0,9200,
        9202,1,0,0,0,9201,9189,1,0,0,0,9201,9195,1,0,0,0,9202,9319,1,0,0,
        0,9203,9205,5,1194,0,0,9204,9203,1,0,0,0,9204,9205,1,0,0,0,9205,
        9206,1,0,0,0,9206,9319,7,94,0,0,9207,9209,5,1194,0,0,9208,9207,1,
        0,0,0,9208,9209,1,0,0,0,9209,9210,1,0,0,0,9210,9319,7,95,0,0,9211,
        9213,5,1194,0,0,9212,9211,1,0,0,0,9212,9213,1,0,0,0,9213,9214,1,
        0,0,0,9214,9319,7,96,0,0,9215,9217,5,1194,0,0,9216,9215,1,0,0,0,
        9216,9217,1,0,0,0,9217,9218,1,0,0,0,9218,9219,5,558,0,0,9219,9222,
        5,1174,0,0,9220,9223,5,1170,0,0,9221,9223,3,1208,604,0,9222,9220,
        1,0,0,0,9222,9221,1,0,0,0,9223,9319,1,0,0,0,9224,9226,5,1194,0,0,
        9225,9224,1,0,0,0,9225,9226,1,0,0,0,9226,9227,1,0,0,0,9227,9228,
        5,559,0,0,9228,9229,5,1174,0,0,9229,9319,5,1170,0,0,9230,9232,5,
        1194,0,0,9231,9230,1,0,0,0,9231,9232,1,0,0,0,9232,9233,1,0,0,0,9233,
        9234,5,101,0,0,9234,9237,5,1174,0,0,9235,9238,5,1168,0,0,9236,9238,
        3,1208,604,0,9237,9235,1,0,0,0,9237,9236,1,0,0,0,9238,9319,1,0,0,
        0,9239,9241,5,1194,0,0,9240,9239,1,0,0,0,9240,9241,1,0,0,0,9241,
        9242,1,0,0,0,9242,9243,5,107,0,0,9243,9246,5,1174,0,0,9244,9247,
        5,1168,0,0,9245,9247,3,1208,604,0,9246,9244,1,0,0,0,9246,9245,1,
        0,0,0,9247,9319,1,0,0,0,9248,9250,5,1194,0,0,9249,9248,1,0,0,0,9249,
        9250,1,0,0,0,9250,9251,1,0,0,0,9251,9252,5,541,0,0,9252,9255,5,1174,
        0,0,9253,9256,5,1168,0,0,9254,9256,3,1208,604,0,9255,9253,1,0,0,
        0,9255,9254,1,0,0,0,9256,9319,1,0,0,0,9257,9259,5,1194,0,0,9258,
        9257,1,0,0,0,9258,9259,1,0,0,0,9259,9260,1,0,0,0,9260,9319,7,97,
        0,0,9261,9263,5,1194,0,0,9262,9261,1,0,0,0,9262,9263,1,0,0,0,9263,
        9264,1,0,0,0,9264,9319,7,98,0,0,9265,9267,5,1194,0,0,9266,9265,1,
        0,0,0,9266,9267,1,0,0,0,9267,9268,1,0,0,0,9268,9319,5,803,0,0,9269,
        9271,5,1194,0,0,9270,9269,1,0,0,0,9270,9271,1,0,0,0,9271,9272,1,
        0,0,0,9272,9275,5,934,0,0,9273,9274,5,1174,0,0,9274,9276,5,1168,
        0,0,9275,9273,1,0,0,0,9275,9276,1,0,0,0,9276,9319,1,0,0,0,9277,9279,
        5,1194,0,0,9278,9277,1,0,0,0,9278,9279,1,0,0,0,9279,9280,1,0,0,0,
        9280,9319,7,99,0,0,9281,9283,5,1194,0,0,9282,9281,1,0,0,0,9282,9283,
        1,0,0,0,9283,9284,1,0,0,0,9284,9319,7,100,0,0,9285,9287,5,1194,0,
        0,9286,9285,1,0,0,0,9286,9287,1,0,0,0,9287,9292,1,0,0,0,9288,9293,
        5,611,0,0,9289,9290,5,924,0,0,9290,9291,5,1174,0,0,9291,9293,5,1170,
        0,0,9292,9288,1,0,0,0,9292,9289,1,0,0,0,9293,9319,1,0,0,0,9294,9296,
        5,1194,0,0,9295,9294,1,0,0,0,9295,9296,1,0,0,0,9296,9297,1,0,0,0,
        9297,9319,5,625,0,0,9298,9300,5,1194,0,0,9299,9298,1,0,0,0,9299,
        9300,1,0,0,0,9300,9301,1,0,0,0,9301,9302,5,295,0,0,9302,9303,5,1192,
        0,0,9303,9304,5,21,0,0,9304,9305,5,1174,0,0,9305,9306,7,101,0,0,
        9306,9307,5,1194,0,0,9307,9308,5,876,0,0,9308,9309,5,121,0,0,9309,
        9316,5,1174,0,0,9310,9317,3,1208,604,0,9311,9312,5,876,0,0,9312,
        9313,5,61,0,0,9313,9314,5,489,0,0,9314,9315,5,1174,0,0,9315,9317,
        3,1208,604,0,9316,9310,1,0,0,0,9316,9311,1,0,0,0,9317,9319,1,0,0,
        0,9318,9152,1,0,0,0,9318,9156,1,0,0,0,9318,9160,1,0,0,0,9318,9164,
        1,0,0,0,9318,9173,1,0,0,0,9318,9179,1,0,0,0,9318,9183,1,0,0,0,9318,
        9187,1,0,0,0,9318,9204,1,0,0,0,9318,9208,1,0,0,0,9318,9212,1,0,0,
        0,9318,9216,1,0,0,0,9318,9225,1,0,0,0,9318,9231,1,0,0,0,9318,9240,
        1,0,0,0,9318,9249,1,0,0,0,9318,9258,1,0,0,0,9318,9262,1,0,0,0,9318,
        9266,1,0,0,0,9318,9270,1,0,0,0,9318,9278,1,0,0,0,9318,9282,1,0,0,
        0,9318,9286,1,0,0,0,9318,9295,1,0,0,0,9318,9299,1,0,0,0,9319,9322,
        1,0,0,0,9320,9318,1,0,0,0,9320,9321,1,0,0,0,9321,9324,1,0,0,0,9322,
        9320,1,0,0,0,9323,9150,1,0,0,0,9323,9324,1,0,0,0,9324,731,1,0,0,
        0,9325,9326,5,85,0,0,9326,9327,5,121,0,0,9327,9328,3,1208,604,0,
        9328,9329,5,986,0,0,9329,9330,5,341,0,0,9330,9331,5,1174,0,0,9331,
        9363,5,1170,0,0,9332,9333,5,1063,0,0,9333,9334,5,723,0,0,9334,9335,
        5,489,0,0,9335,9358,5,1192,0,0,9336,9338,5,1194,0,0,9337,9336,1,
        0,0,0,9337,9338,1,0,0,0,9338,9339,1,0,0,0,9339,9340,5,341,0,0,9340,
        9341,5,1174,0,0,9341,9359,5,1170,0,0,9342,9344,5,1194,0,0,9343,9342,
        1,0,0,0,9343,9344,1,0,0,0,9344,9345,1,0,0,0,9345,9346,5,295,0,0,
        9346,9347,5,110,0,0,9347,9348,5,690,0,0,9348,9349,5,1174,0,0,9349,
        9359,5,1170,0,0,9350,9352,5,1194,0,0,9351,9350,1,0,0,0,9351,9352,
        1,0,0,0,9352,9353,1,0,0,0,9353,9354,5,242,0,0,9354,9355,5,110,0,
        0,9355,9356,5,690,0,0,9356,9357,5,1174,0,0,9357,9359,5,1170,0,0,
        9358,9337,1,0,0,0,9358,9343,1,0,0,0,9358,9351,1,0,0,0,9359,9360,
        1,0,0,0,9360,9358,1,0,0,0,9360,9361,1,0,0,0,9361,9362,1,0,0,0,9362,
        9364,5,1193,0,0,9363,9332,1,0,0,0,9363,9364,1,0,0,0,9364,733,1,0,
        0,0,9365,9366,5,85,0,0,9366,9367,5,534,0,0,9367,9368,5,489,0,0,9368,
        9369,5,986,0,0,9369,9370,5,341,0,0,9370,9371,5,1174,0,0,9371,9372,
        5,1170,0,0,9372,9373,5,295,0,0,9373,9374,5,110,0,0,9374,9375,5,690,
        0,0,9375,9376,5,1174,0,0,9376,9377,5,1170,0,0,9377,735,1,0,0,0,9378,
        9379,5,85,0,0,9379,9380,5,878,0,0,9380,9381,5,534,0,0,9381,9382,
        5,489,0,0,9382,9383,5,986,0,0,9383,9384,5,341,0,0,9384,9385,5,1174,
        0,0,9385,9386,5,1170,0,0,9386,9387,5,295,0,0,9387,9388,5,110,0,0,
        9388,9389,5,690,0,0,9389,9390,5,1174,0,0,9390,9391,5,1170,0,0,9391,
        737,1,0,0,0,9392,9396,5,495,0,0,9393,9397,3,740,370,0,9394,9397,
        3,742,371,0,9395,9397,3,744,372,0,9396,9393,1,0,0,0,9396,9394,1,
        0,0,0,9396,9395,1,0,0,0,9397,739,1,0,0,0,9398,9401,7,31,0,0,9399,
        9401,5,1027,0,0,9400,9398,1,0,0,0,9400,9399,1,0,0,0,9401,9404,1,
        0,0,0,9402,9403,5,1063,0,0,9403,9405,5,938,0,0,9404,9402,1,0,0,0,
        9404,9405,1,0,0,0,9405,741,1,0,0,0,9406,9407,5,739,0,0,9407,9408,
        5,615,0,0,9408,9411,5,951,0,0,9409,9412,5,22,0,0,9410,9412,5,1168,
        0,0,9411,9409,1,0,0,0,9411,9410,1,0,0,0,9412,743,1,0,0,0,9413,9414,
        5,934,0,0,9414,9415,5,474,0,0,9415,9416,5,1168,0,0,9416,745,1,0,
        0,0,9417,9418,5,318,0,0,9418,9420,3,750,375,0,9419,9421,5,1195,0,
        0,9420,9419,1,0,0,0,9420,9421,1,0,0,0,9421,747,1,0,0,0,9422,9431,
        3,1158,579,0,9423,9428,3,752,376,0,9424,9425,5,1194,0,0,9425,9427,
        3,752,376,0,9426,9424,1,0,0,0,9427,9430,1,0,0,0,9428,9426,1,0,0,
        0,9428,9429,1,0,0,0,9429,9432,1,0,0,0,9430,9428,1,0,0,0,9431,9423,
        1,0,0,0,9431,9432,1,0,0,0,9432,9434,1,0,0,0,9433,9435,5,1195,0,0,
        9434,9433,1,0,0,0,9434,9435,1,0,0,0,9435,749,1,0,0,0,9436,9437,5,
        1166,0,0,9437,9439,5,1174,0,0,9438,9436,1,0,0,0,9438,9439,1,0,0,
        0,9439,9442,1,0,0,0,9440,9443,3,1158,579,0,9441,9443,3,760,380,0,
        9442,9440,1,0,0,0,9442,9441,1,0,0,0,9443,9445,1,0,0,0,9444,9446,
        3,752,376,0,9445,9444,1,0,0,0,9445,9446,1,0,0,0,9446,9475,1,0,0,
        0,9447,9448,5,1192,0,0,9448,9453,3,760,380,0,9449,9450,5,1194,0,
        0,9450,9452,3,760,380,0,9451,9449,1,0,0,0,9452,9455,1,0,0,0,9453,
        9451,1,0,0,0,9453,9454,1,0,0,0,9454,9456,1,0,0,0,9455,9453,1,0,0,
        0,9456,9461,5,1193,0,0,9457,9458,5,56,0,0,9458,9459,7,102,0,0,9459,
        9460,5,1174,0,0,9460,9462,5,1170,0,0,9461,9457,1,0,0,0,9461,9462,
        1,0,0,0,9462,9465,1,0,0,0,9463,9464,5,63,0,0,9464,9466,3,1208,604,
        0,9465,9463,1,0,0,0,9465,9466,1,0,0,0,9466,9475,1,0,0,0,9467,9472,
        5,56,0,0,9468,9469,7,102,0,0,9469,9470,5,1174,0,0,9470,9473,5,1170,
        0,0,9471,9473,5,113,0,0,9472,9468,1,0,0,0,9472,9471,1,0,0,0,9473,
        9475,1,0,0,0,9474,9438,1,0,0,0,9474,9447,1,0,0,0,9474,9467,1,0,0,
        0,9475,751,1,0,0,0,9476,9481,3,756,378,0,9477,9478,5,1194,0,0,9478,
        9480,3,752,376,0,9479,9477,1,0,0,0,9480,9483,1,0,0,0,9481,9479,1,
        0,0,0,9481,9482,1,0,0,0,9482,9493,1,0,0,0,9483,9481,1,0,0,0,9484,
        9489,3,754,377,0,9485,9486,5,1194,0,0,9486,9488,3,754,377,0,9487,
        9485,1,0,0,0,9488,9491,1,0,0,0,9489,9487,1,0,0,0,9489,9490,1,0,0,
        0,9490,9493,1,0,0,0,9491,9489,1,0,0,0,9492,9476,1,0,0,0,9492,9484,
        1,0,0,0,9493,753,1,0,0,0,9494,9495,5,1166,0,0,9495,9496,5,1174,0,
        0,9496,9497,3,758,379,0,9497,755,1,0,0,0,9498,9499,3,758,379,0,9499,
        757,1,0,0,0,9500,9509,3,1202,601,0,9501,9503,5,1166,0,0,9502,9504,
        7,103,0,0,9503,9502,1,0,0,0,9503,9504,1,0,0,0,9504,9509,1,0,0,0,
        9505,9509,3,1208,604,0,9506,9509,5,243,0,0,9507,9509,5,630,0,0,9508,
        9500,1,0,0,0,9508,9501,1,0,0,0,9508,9505,1,0,0,0,9508,9506,1,0,0,
        0,9508,9507,1,0,0,0,9509,759,1,0,0,0,9510,9512,5,1166,0,0,9511,9513,
        7,103,0,0,9512,9511,1,0,0,0,9512,9513,1,0,0,0,9513,9520,1,0,0,0,
        9514,9515,5,1201,0,0,9515,9518,5,1166,0,0,9516,9517,5,1201,0,0,9517,
        9519,3,760,380,0,9518,9516,1,0,0,0,9518,9519,1,0,0,0,9519,9521,1,
        0,0,0,9520,9514,1,0,0,0,9520,9521,1,0,0,0,9521,9532,1,0,0,0,9522,
        9529,5,1170,0,0,9523,9524,5,1201,0,0,9524,9527,5,1166,0,0,9525,9526,
        5,1201,0,0,9526,9528,3,760,380,0,9527,9525,1,0,0,0,9527,9528,1,0,
        0,0,9528,9530,1,0,0,0,9529,9523,1,0,0,0,9529,9530,1,0,0,0,9530,9532,
        1,0,0,0,9531,9510,1,0,0,0,9531,9522,1,0,0,0,9532,761,1,0,0,0,9533,
        9535,3,852,426,0,9534,9536,5,1195,0,0,9535,9534,1,0,0,0,9535,9536,
        1,0,0,0,9536,9596,1,0,0,0,9537,9549,5,401,0,0,9538,9540,5,22,0,0,
        9539,9541,5,725,0,0,9540,9539,1,0,0,0,9540,9541,1,0,0,0,9541,9550,
        1,0,0,0,9542,9547,3,790,395,0,9543,9544,5,1192,0,0,9544,9545,3,1170,
        585,0,9545,9546,5,1193,0,0,9546,9548,1,0,0,0,9547,9543,1,0,0,0,9547,
        9548,1,0,0,0,9548,9550,1,0,0,0,9549,9538,1,0,0,0,9549,9542,1,0,0,
        0,9550,9558,1,0,0,0,9551,9555,5,649,0,0,9552,9553,3,156,78,0,9553,
        9554,5,1197,0,0,9554,9556,1,0,0,0,9555,9552,1,0,0,0,9555,9556,1,
        0,0,0,9556,9557,1,0,0,0,9557,9559,3,1150,575,0,9558,9551,1,0,0,0,
        9558,9559,1,0,0,0,9559,9560,1,0,0,0,9560,9561,5,986,0,0,9561,9566,
        3,764,382,0,9562,9563,5,1194,0,0,9563,9565,3,764,382,0,9564,9562,
        1,0,0,0,9565,9568,1,0,0,0,9566,9564,1,0,0,0,9566,9567,1,0,0,0,9567,
        9572,1,0,0,0,9568,9566,1,0,0,0,9569,9570,5,1063,0,0,9570,9571,5,
        401,0,0,9571,9573,5,664,0,0,9572,9569,1,0,0,0,9572,9573,1,0,0,0,
        9573,9576,1,0,0,0,9574,9575,5,56,0,0,9575,9577,3,764,382,0,9576,
        9574,1,0,0,0,9576,9577,1,0,0,0,9577,9579,1,0,0,0,9578,9580,5,1195,
        0,0,9579,9578,1,0,0,0,9579,9580,1,0,0,0,9580,9596,1,0,0,0,9581,9586,
        5,814,0,0,9582,9583,5,1063,0,0,9583,9584,5,191,0,0,9584,9585,5,1174,
        0,0,9585,9587,5,1166,0,0,9586,9582,1,0,0,0,9586,9587,1,0,0,0,9587,
        9589,1,0,0,0,9588,9590,5,1195,0,0,9589,9588,1,0,0,0,9589,9590,1,
        0,0,0,9590,9596,1,0,0,0,9591,9596,3,776,388,0,9592,9596,3,778,389,
        0,9593,9596,3,780,390,0,9594,9596,3,766,383,0,9595,9533,1,0,0,0,
        9595,9537,1,0,0,0,9595,9581,1,0,0,0,9595,9591,1,0,0,0,9595,9592,
        1,0,0,0,9595,9593,1,0,0,0,9595,9594,1,0,0,0,9596,763,1,0,0,0,9597,
        9600,3,1208,604,0,9598,9600,5,735,0,0,9599,9597,1,0,0,0,9599,9598,
        1,0,0,0,9600,765,1,0,0,0,9601,9602,5,197,0,0,9602,9603,5,121,0,0,
        9603,9606,3,1208,604,0,9604,9605,5,68,0,0,9605,9607,3,1208,604,0,
        9606,9604,1,0,0,0,9606,9607,1,0,0,0,9607,9611,1,0,0,0,9608,9609,
        5,378,0,0,9609,9612,3,768,384,0,9610,9612,3,772,386,0,9611,9608,
        1,0,0,0,9611,9610,1,0,0,0,9612,9619,1,0,0,0,9613,9614,5,10,0,0,9614,
        9615,5,363,0,0,9615,9616,5,90,0,0,9616,9617,5,264,0,0,9617,9618,
        5,1174,0,0,9618,9620,3,1174,587,0,9619,9613,1,0,0,0,9619,9620,1,
        0,0,0,9620,767,1,0,0,0,9621,9622,5,59,0,0,9622,9639,3,1208,604,0,
        9623,9625,5,316,0,0,9624,9623,1,0,0,0,9624,9625,1,0,0,0,9625,9626,
        1,0,0,0,9626,9627,5,341,0,0,9627,9628,5,1174,0,0,9628,9636,5,1170,
        0,0,9629,9630,5,1063,0,0,9630,9631,5,723,0,0,9631,9632,5,489,0,0,
        9632,9633,5,1192,0,0,9633,9634,3,770,385,0,9634,9635,5,1193,0,0,
        9635,9637,1,0,0,0,9636,9629,1,0,0,0,9636,9637,1,0,0,0,9637,9639,
        1,0,0,0,9638,9621,1,0,0,0,9638,9624,1,0,0,0,9639,769,1,0,0,0,9640,
        9641,7,104,0,0,9641,9642,5,1174,0,0,9642,9649,5,1170,0,0,9643,9644,
        5,1194,0,0,9644,9645,7,105,0,0,9645,9646,5,110,0,0,9646,9647,5,690,
        0,0,9647,9648,5,1174,0,0,9648,9650,5,1170,0,0,9649,9643,1,0,0,0,
        9649,9650,1,0,0,0,9650,771,1,0,0,0,9651,9652,5,295,0,0,9652,9653,
        5,110,0,0,9653,9654,5,690,0,0,9654,9655,5,1174,0,0,9655,9657,5,1170,
        0,0,9656,9651,1,0,0,0,9656,9657,1,0,0,0,9657,9658,1,0,0,0,9658,9659,
        5,1063,0,0,9659,9660,5,949,0,0,9660,9661,5,1174,0,0,9661,9666,5,
        1170,0,0,9662,9663,5,1194,0,0,9663,9665,3,774,387,0,9664,9662,1,
        0,0,0,9665,9668,1,0,0,0,9666,9664,1,0,0,0,9666,9667,1,0,0,0,9667,
        773,1,0,0,0,9668,9666,1,0,0,0,9669,9670,7,106,0,0,9670,9671,5,1174,
        0,0,9671,9672,5,1170,0,0,9672,775,1,0,0,0,9673,9674,5,653,0,0,9674,
        9675,5,961,0,0,9675,9676,5,489,0,0,9676,9677,3,1208,604,0,9677,9678,
        5,242,0,0,9678,9679,5,110,0,0,9679,9680,3,788,394,0,9680,9690,1,
        0,0,0,9681,9682,5,653,0,0,9682,9683,5,534,0,0,9683,9684,5,489,0,
        0,9684,9685,5,242,0,0,9685,9686,5,110,0,0,9686,9687,5,690,0,0,9687,
        9688,5,1174,0,0,9688,9690,5,1170,0,0,9689,9673,1,0,0,0,9689,9681,
        1,0,0,0,9690,777,1,0,0,0,9691,9692,5,147,0,0,9692,9693,5,961,0,0,
        9693,9694,5,489,0,0,9694,9703,3,1208,604,0,9695,9696,5,147,0,0,9696,
        9697,5,22,0,0,9697,9698,5,961,0,0,9698,9703,5,490,0,0,9699,9700,
        5,147,0,0,9700,9701,5,534,0,0,9701,9703,5,489,0,0,9702,9691,1,0,
        0,0,9702,9695,1,0,0,0,9702,9699,1,0,0,0,9703,779,1,0,0,0,9704,9705,
        5,197,0,0,9705,9706,5,534,0,0,9706,9707,5,489,0,0,9707,9708,5,295,
        0,0,9708,9709,5,110,0,0,9709,9710,5,690,0,0,9710,9711,5,1174,0,0,
        9711,9740,5,1170,0,0,9712,9713,5,197,0,0,9713,9714,5,961,0,0,9714,
        9715,5,489,0,0,9715,9718,3,1208,604,0,9716,9717,5,68,0,0,9717,9719,
        3,1208,604,0,9718,9716,1,0,0,0,9718,9719,1,0,0,0,9719,9723,1,0,0,
        0,9720,9721,5,378,0,0,9721,9722,5,733,0,0,9722,9724,3,1208,604,0,
        9723,9720,1,0,0,0,9723,9724,1,0,0,0,9724,9725,1,0,0,0,9725,9735,
        5,1063,0,0,9726,9731,3,782,391,0,9727,9728,5,295,0,0,9728,9729,5,
        110,0,0,9729,9731,3,786,393,0,9730,9726,1,0,0,0,9730,9727,1,0,0,
        0,9731,9733,1,0,0,0,9732,9734,5,1194,0,0,9733,9732,1,0,0,0,9733,
        9734,1,0,0,0,9734,9736,1,0,0,0,9735,9730,1,0,0,0,9736,9737,1,0,0,
        0,9737,9735,1,0,0,0,9737,9738,1,0,0,0,9738,9740,1,0,0,0,9739,9704,
        1,0,0,0,9739,9712,1,0,0,0,9740,781,1,0,0,0,9741,9742,5,493,0,0,9742,
        9743,5,1174,0,0,9743,9757,5,1170,0,0,9744,9745,5,21,0,0,9745,9746,
        5,1174,0,0,9746,9757,3,784,392,0,9747,9748,5,427,0,0,9748,9749,5,
        1174,0,0,9749,9757,5,1170,0,0,9750,9751,5,734,0,0,9751,9752,5,1174,
        0,0,9752,9757,5,1170,0,0,9753,9754,5,199,0,0,9754,9755,5,1174,0,
        0,9755,9757,7,9,0,0,9756,9741,1,0,0,0,9756,9744,1,0,0,0,9756,9747,
        1,0,0,0,9756,9750,1,0,0,0,9756,9753,1,0,0,0,9757,783,1,0,0,0,9758,
        9759,7,107,0,0,9759,785,1,0,0,0,9760,9761,5,121,0,0,9761,9772,3,
        1208,604,0,9762,9763,5,61,0,0,9763,9764,5,489,0,0,9764,9772,3,1208,
        604,0,9765,9766,5,961,0,0,9766,9767,5,489,0,0,9767,9772,3,1208,604,
        0,9768,9769,5,690,0,0,9769,9770,5,1174,0,0,9770,9772,5,1170,0,0,
        9771,9760,1,0,0,0,9771,9762,1,0,0,0,9771,9765,1,0,0,0,9771,9768,
        1,0,0,0,9772,787,1,0,0,0,9773,9774,5,121,0,0,9774,9779,3,1208,604,
        0,9775,9776,5,1063,0,0,9776,9777,5,690,0,0,9777,9778,5,1174,0,0,
        9778,9780,5,1170,0,0,9779,9775,1,0,0,0,9779,9780,1,0,0,0,9780,9797,
        1,0,0,0,9781,9782,5,61,0,0,9782,9783,5,489,0,0,9783,9788,3,1208,
        604,0,9784,9785,5,1063,0,0,9785,9786,5,690,0,0,9786,9787,5,1174,
        0,0,9787,9789,5,1170,0,0,9788,9784,1,0,0,0,9788,9789,1,0,0,0,9789,
        9797,1,0,0,0,9790,9791,5,961,0,0,9791,9792,5,489,0,0,9792,9797,3,
        1208,604,0,9793,9794,5,690,0,0,9794,9795,5,1174,0,0,9795,9797,5,
        1170,0,0,9796,9773,1,0,0,0,9796,9781,1,0,0,0,9796,9790,1,0,0,0,9796,
        9793,1,0,0,0,9797,789,1,0,0,0,9798,9804,5,13,0,0,9799,9800,5,108,
        0,0,9800,9805,5,660,0,0,9801,9802,5,217,0,0,9802,9803,5,108,0,0,
        9803,9805,5,660,0,0,9804,9799,1,0,0,0,9804,9801,1,0,0,0,9805,10012,
        1,0,0,0,9806,9877,5,35,0,0,9807,9870,5,46,0,0,9808,9809,5,48,0,0,
        9809,9871,5,819,0,0,9810,9871,5,59,0,0,9811,9812,5,61,0,0,9812,9871,
        5,489,0,0,9813,9814,5,81,0,0,9814,9871,5,403,0,0,9815,9871,5,121,
        0,0,9816,9821,5,153,0,0,9817,9818,5,295,0,0,9818,9822,5,489,0,0,
        9819,9820,5,534,0,0,9820,9822,5,489,0,0,9821,9817,1,0,0,0,9821,9819,
        1,0,0,0,9822,9871,1,0,0,0,9823,9871,5,175,0,0,9824,9871,5,186,0,
        0,9825,9871,5,200,0,0,9826,9834,5,217,0,0,9827,9835,5,64,0,0,9828,
        9829,5,238,0,0,9829,9835,5,999,0,0,9830,9831,5,311,0,0,9831,9835,
        7,108,0,0,9832,9833,5,849,0,0,9833,9835,5,173,0,0,9834,9827,1,0,
        0,0,9834,9828,1,0,0,0,9834,9830,1,0,0,0,9834,9832,1,0,0,0,9834,9835,
        1,0,0,0,9835,9871,1,0,0,0,9836,9871,5,222,0,0,9837,9871,5,298,0,
        0,9838,9839,5,311,0,0,9839,9871,7,108,0,0,9840,9846,5,329,0,0,9841,
        9842,5,216,0,0,9842,9847,5,913,0,0,9843,9844,5,341,0,0,9844,9847,
        5,372,0,0,9845,9847,5,505,0,0,9846,9841,1,0,0,0,9846,9843,1,0,0,
        0,9846,9845,1,0,0,0,9847,9871,1,0,0,0,9848,9849,5,381,0,0,9849,9871,
        5,118,0,0,9850,9851,5,509,0,0,9851,9871,5,876,0,0,9852,9871,5,524,
        0,0,9853,9871,5,532,0,0,9854,9855,5,565,0,0,9855,9871,5,1010,0,0,
        9856,9857,5,778,0,0,9857,9858,5,878,0,0,9858,9871,5,96,0,0,9859,
        9871,5,819,0,0,9860,9871,5,823,0,0,9861,9871,5,844,0,0,9862,9863,
        5,861,0,0,9863,9871,5,711,0,0,9864,9865,5,876,0,0,9865,9871,7,109,
        0,0,9866,9871,5,878,0,0,9867,9868,5,961,0,0,9868,9871,5,489,0,0,
        9869,9871,5,1035,0,0,9870,9808,1,0,0,0,9870,9810,1,0,0,0,9870,9811,
        1,0,0,0,9870,9813,1,0,0,0,9870,9815,1,0,0,0,9870,9816,1,0,0,0,9870,
        9823,1,0,0,0,9870,9824,1,0,0,0,9870,9825,1,0,0,0,9870,9826,1,0,0,
        0,9870,9836,1,0,0,0,9870,9837,1,0,0,0,9870,9838,1,0,0,0,9870,9840,
        1,0,0,0,9870,9848,1,0,0,0,9870,9850,1,0,0,0,9870,9852,1,0,0,0,9870,
        9853,1,0,0,0,9870,9854,1,0,0,0,9870,9856,1,0,0,0,9870,9859,1,0,0,
        0,9870,9860,1,0,0,0,9870,9861,1,0,0,0,9870,9862,1,0,0,0,9870,9864,
        1,0,0,0,9870,9866,1,0,0,0,9870,9867,1,0,0,0,9870,9869,1,0,0,0,9871,
        9878,1,0,0,0,9872,9878,5,801,0,0,9873,9874,5,876,0,0,9874,9878,5,
        929,0,0,9875,9878,5,890,0,0,9876,9878,5,990,0,0,9877,9807,1,0,0,
        0,9877,9872,1,0,0,0,9877,9873,1,0,0,0,9877,9875,1,0,0,0,9877,9876,
        1,0,0,0,9877,9878,1,0,0,0,9878,10012,1,0,0,0,9879,9881,5,66,0,0,
        9880,9882,5,876,0,0,9881,9880,1,0,0,0,9881,9882,1,0,0,0,9882,10012,
        1,0,0,0,9883,9884,5,85,0,0,9884,10012,7,110,0,0,9885,10012,5,137,
        0,0,9886,9891,5,174,0,0,9887,9888,5,46,0,0,9888,9892,5,217,0,0,9889,
        9892,5,791,0,0,9890,9892,5,919,0,0,9891,9887,1,0,0,0,9891,9889,1,
        0,0,0,9891,9890,1,0,0,0,9891,9892,1,0,0,0,9892,10012,1,0,0,0,9893,
        9895,5,188,0,0,9894,9896,5,876,0,0,9895,9894,1,0,0,0,9895,9896,1,
        0,0,0,9896,10012,1,0,0,0,9897,9951,5,197,0,0,9898,9952,5,20,0,0,
        9899,9900,5,46,0,0,9900,9952,5,217,0,0,9901,9952,5,59,0,0,9902,9903,
        5,61,0,0,9903,9952,5,489,0,0,9904,9905,5,81,0,0,9905,9952,5,403,
        0,0,9906,9952,5,121,0,0,9907,9952,5,186,0,0,9908,9912,5,217,0,0,
        9909,9910,5,238,0,0,9910,9911,5,311,0,0,9911,9913,5,615,0,0,9912,
        9909,1,0,0,0,9912,9913,1,0,0,0,9913,9952,1,0,0,0,9914,9915,5,238,
        0,0,9915,9916,5,311,0,0,9916,9952,5,615,0,0,9917,9952,5,243,0,0,
        9918,9952,5,298,0,0,9919,9920,5,329,0,0,9920,9952,5,505,0,0,9921,
        9922,5,381,0,0,9922,9952,5,118,0,0,9923,9952,5,384,0,0,9924,9925,
        5,565,0,0,9925,9952,5,1010,0,0,9926,9952,5,728,0,0,9927,9952,5,741,
        0,0,9928,9929,5,778,0,0,9929,9930,5,878,0,0,9930,9952,5,96,0,0,9931,
        9952,5,819,0,0,9932,9952,5,823,0,0,9933,9952,5,838,0,0,9934,9952,
        5,844,0,0,9935,9952,5,873,0,0,9936,9937,5,876,0,0,9937,9952,5,819,
        0,0,9938,9952,5,878,0,0,9939,9940,5,961,0,0,9940,9952,5,489,0,0,
        9941,9952,5,963,0,0,9942,9952,5,966,0,0,9943,9944,5,990,0,0,9944,
        9945,5,311,0,0,9945,9952,5,615,0,0,9946,9952,5,1010,0,0,9947,9952,
        5,1051,0,0,9948,9949,5,1074,0,0,9949,9950,5,844,0,0,9950,9952,5,
        152,0,0,9951,9898,1,0,0,0,9951,9899,1,0,0,0,9951,9901,1,0,0,0,9951,
        9902,1,0,0,0,9951,9904,1,0,0,0,9951,9906,1,0,0,0,9951,9907,1,0,0,
        0,9951,9908,1,0,0,0,9951,9914,1,0,0,0,9951,9917,1,0,0,0,9951,9918,
        1,0,0,0,9951,9919,1,0,0,0,9951,9921,1,0,0,0,9951,9923,1,0,0,0,9951,
        9924,1,0,0,0,9951,9926,1,0,0,0,9951,9927,1,0,0,0,9951,9928,1,0,0,
        0,9951,9931,1,0,0,0,9951,9932,1,0,0,0,9951,9933,1,0,0,0,9951,9934,
        1,0,0,0,9951,9935,1,0,0,0,9951,9936,1,0,0,0,9951,9938,1,0,0,0,9951,
        9939,1,0,0,0,9951,9941,1,0,0,0,9951,9942,1,0,0,0,9951,9943,1,0,0,
        0,9951,9946,1,0,0,0,9951,9947,1,0,0,0,9951,9948,1,0,0,0,9952,10012,
        1,0,0,0,9953,10012,5,252,0,0,9954,9958,5,318,0,0,9955,9956,5,46,
        0,0,9956,9957,5,329,0,0,9957,9959,5,851,0,0,9958,9955,1,0,0,0,9958,
        9959,1,0,0,0,9959,10012,1,0,0,0,9960,9961,5,329,0,0,9961,9962,5,
        7,0,0,9962,10012,5,59,0,0,9963,9966,5,439,0,0,9964,9965,5,46,0,0,
        9965,9967,5,524,0,0,9966,9964,1,0,0,0,9966,9967,1,0,0,0,9967,10012,
        1,0,0,0,9968,10012,5,457,0,0,9969,9970,5,495,0,0,9970,9971,5,217,
        0,0,9971,10012,5,175,0,0,9972,10012,5,768,0,0,9973,10012,5,773,0,
        0,9974,9978,5,865,0,0,9975,9976,5,22,0,0,9976,9977,5,1035,0,0,9977,
        9979,5,860,0,0,9978,9975,1,0,0,0,9978,9979,1,0,0,0,9979,10012,1,
        0,0,0,9980,10012,5,871,0,0,9981,10012,5,895,0,0,9982,10012,5,900,
        0,0,9983,9984,5,950,0,0,9984,9985,5,739,0,0,9985,10012,5,616,0,0,
        9986,9987,5,971,0,0,9987,10012,5,675,0,0,9988,10012,5,1024,0,0,9989,
        9990,5,1026,0,0,9990,10012,5,59,0,0,9991,10012,5,1028,0,0,9992,10009,
        5,1051,0,0,9993,10000,5,46,0,0,9994,10001,5,217,0,0,9995,10001,5,
        249,0,0,9996,9997,5,153,0,0,9997,9998,7,12,0,0,9998,9999,5,489,0,
        0,9999,10001,5,249,0,0,10000,9994,1,0,0,0,10000,9995,1,0,0,0,10000,
        9996,1,0,0,0,10001,10010,1,0,0,0,10002,10003,5,124,0,0,10003,10010,
        5,991,0,0,10004,10005,5,217,0,0,10005,10010,5,929,0,0,10006,10010,
        5,249,0,0,10007,10008,5,876,0,0,10008,10010,5,929,0,0,10009,9993,
        1,0,0,0,10009,10002,1,0,0,0,10009,10004,1,0,0,0,10009,10006,1,0,
        0,0,10009,10007,1,0,0,0,10010,10012,1,0,0,0,10011,9798,1,0,0,0,10011,
        9806,1,0,0,0,10011,9879,1,0,0,0,10011,9883,1,0,0,0,10011,9885,1,
        0,0,0,10011,9886,1,0,0,0,10011,9893,1,0,0,0,10011,9897,1,0,0,0,10011,
        9953,1,0,0,0,10011,9954,1,0,0,0,10011,9960,1,0,0,0,10011,9963,1,
        0,0,0,10011,9968,1,0,0,0,10011,9969,1,0,0,0,10011,9972,1,0,0,0,10011,
        9973,1,0,0,0,10011,9974,1,0,0,0,10011,9980,1,0,0,0,10011,9981,1,
        0,0,0,10011,9982,1,0,0,0,10011,9983,1,0,0,0,10011,9986,1,0,0,0,10011,
        9988,1,0,0,0,10011,9989,1,0,0,0,10011,9991,1,0,0,0,10011,9992,1,
        0,0,0,10012,791,1,0,0,0,10013,10014,5,887,0,0,10014,10017,5,1166,
        0,0,10015,10016,5,1187,0,0,10016,10018,3,1208,604,0,10017,10015,
        1,0,0,0,10017,10018,1,0,0,0,10018,10019,1,0,0,0,10019,10020,5,1174,
        0,0,10020,10045,3,914,457,0,10021,10022,5,887,0,0,10022,10023,5,
        1166,0,0,10023,10024,3,1216,608,0,10024,10025,3,914,457,0,10025,
        10045,1,0,0,0,10026,10027,5,887,0,0,10027,10028,5,1166,0,0,10028,
        10029,5,1174,0,0,10029,10030,5,211,0,0,10030,10041,3,902,451,0,10031,
        10039,5,363,0,0,10032,10033,5,754,0,0,10033,10040,5,651,0,0,10034,
        10037,5,1028,0,0,10035,10036,5,642,0,0,10036,10038,3,1170,585,0,
        10037,10035,1,0,0,0,10037,10038,1,0,0,0,10038,10040,1,0,0,0,10039,
        10032,1,0,0,0,10039,10034,1,0,0,0,10040,10042,1,0,0,0,10041,10031,
        1,0,0,0,10041,10042,1,0,0,0,10042,10045,1,0,0,0,10043,10045,3,908,
        454,0,10044,10013,1,0,0,0,10044,10021,1,0,0,0,10044,10026,1,0,0,
        0,10044,10043,1,0,0,0,10045,793,1,0,0,0,10046,10047,5,90,0,0,10047,
        10048,5,273,0,0,10048,10051,7,111,0,0,10049,10052,3,1208,604,0,10050,
        10052,5,1166,0,0,10051,10049,1,0,0,0,10051,10050,1,0,0,0,10051,10052,
        1,0,0,0,10052,10107,1,0,0,0,10053,10054,5,90,0,0,10054,10064,7,111,
        0,0,10055,10058,3,1208,604,0,10056,10058,5,1166,0,0,10057,10055,
        1,0,0,0,10057,10056,1,0,0,0,10058,10062,1,0,0,0,10059,10060,5,1063,
        0,0,10060,10061,5,531,0,0,10061,10063,5,1170,0,0,10062,10059,1,0,
        0,0,10062,10063,1,0,0,0,10063,10065,1,0,0,0,10064,10057,1,0,0,0,
        10064,10065,1,0,0,0,10065,10107,1,0,0,0,10066,10067,5,162,0,0,10067,
        10080,7,111,0,0,10068,10071,3,1208,604,0,10069,10071,5,1166,0,0,
        10070,10068,1,0,0,0,10070,10069,1,0,0,0,10071,10078,1,0,0,0,10072,
        10073,5,1063,0,0,10073,10074,5,1192,0,0,10074,10075,5,251,0,0,10075,
        10076,5,1174,0,0,10076,10077,7,17,0,0,10077,10079,5,1193,0,0,10078,
        10072,1,0,0,0,10078,10079,1,0,0,0,10079,10081,1,0,0,0,10080,10070,
        1,0,0,0,10080,10081,1,0,0,0,10081,10107,1,0,0,0,10082,10084,5,162,
        0,0,10083,10085,5,1068,0,0,10084,10083,1,0,0,0,10084,10085,1,0,0,
        0,10085,10107,1,0,0,0,10086,10087,5,162,0,0,10087,10107,3,1208,604,
        0,10088,10089,5,820,0,0,10089,10107,3,1208,604,0,10090,10091,5,820,
        0,0,10091,10094,7,111,0,0,10092,10095,3,1208,604,0,10093,10095,5,
        1166,0,0,10094,10092,1,0,0,0,10094,10093,1,0,0,0,10094,10095,1,0,
        0,0,10095,10107,1,0,0,0,10096,10098,5,820,0,0,10097,10099,5,1068,
        0,0,10098,10097,1,0,0,0,10098,10099,1,0,0,0,10099,10107,1,0,0,0,
        10100,10101,5,842,0,0,10101,10104,7,111,0,0,10102,10105,3,1208,604,
        0,10103,10105,5,1166,0,0,10104,10102,1,0,0,0,10104,10103,1,0,0,0,
        10104,10105,1,0,0,0,10105,10107,1,0,0,0,10106,10046,1,0,0,0,10106,
        10053,1,0,0,0,10106,10066,1,0,0,0,10106,10082,1,0,0,0,10106,10086,
        1,0,0,0,10106,10088,1,0,0,0,10106,10090,1,0,0,0,10106,10096,1,0,
        0,0,10106,10100,1,0,0,0,10107,795,1,0,0,0,10108,10110,5,398,0,0,
        10109,10111,5,1168,0,0,10110,10109,1,0,0,0,10110,10111,1,0,0,0,10111,
        797,1,0,0,0,10112,10113,5,1033,0,0,10113,10114,3,1208,604,0,10114,
        799,1,0,0,0,10115,10117,5,891,0,0,10116,10118,5,1170,0,0,10117,10116,
        1,0,0,0,10117,10118,1,0,0,0,10118,801,1,0,0,0,10119,10122,5,770,
        0,0,10120,10121,5,1063,0,0,10121,10123,5,673,0,0,10122,10120,1,0,
        0,0,10122,10123,1,0,0,0,10123,803,1,0,0,0,10124,10127,5,900,0,0,
        10125,10126,5,1063,0,0,10126,10128,5,618,0,0,10127,10125,1,0,0,0,
        10127,10128,1,0,0,0,10128,805,1,0,0,0,10129,10131,5,137,0,0,10130,
        10132,5,1168,0,0,10131,10130,1,0,0,0,10131,10132,1,0,0,0,10132,807,
        1,0,0,0,10133,10134,7,112,0,0,10134,809,1,0,0,0,10135,10160,5,132,
        0,0,10136,10140,5,1192,0,0,10137,10141,3,1208,604,0,10138,10141,
        5,1170,0,0,10139,10141,5,1168,0,0,10140,10137,1,0,0,0,10140,10138,
        1,0,0,0,10140,10139,1,0,0,0,10141,10146,1,0,0,0,10142,10143,5,1194,
        0,0,10143,10147,5,604,0,0,10144,10145,5,1194,0,0,10145,10147,7,113,
        0,0,10146,10142,1,0,0,0,10146,10144,1,0,0,0,10146,10147,1,0,0,0,
        10147,10148,1,0,0,0,10148,10158,5,1193,0,0,10149,10150,5,1063,0,
        0,10150,10155,3,808,404,0,10151,10152,5,1194,0,0,10152,10154,3,808,
        404,0,10153,10151,1,0,0,0,10154,10157,1,0,0,0,10155,10153,1,0,0,
        0,10155,10156,1,0,0,0,10156,10159,1,0,0,0,10157,10155,1,0,0,0,10158,
        10149,1,0,0,0,10158,10159,1,0,0,0,10159,10161,1,0,0,0,10160,10136,
        1,0,0,0,10160,10161,1,0,0,0,10161,811,1,0,0,0,10162,10170,5,133,
        0,0,10163,10167,5,1192,0,0,10164,10168,3,1208,604,0,10165,10168,
        5,1170,0,0,10166,10168,5,1168,0,0,10167,10164,1,0,0,0,10167,10165,
        1,0,0,0,10167,10166,1,0,0,0,10168,10169,1,0,0,0,10169,10171,5,1193,
        0,0,10170,10163,1,0,0,0,10170,10171,1,0,0,0,10171,10174,1,0,0,0,
        10172,10173,5,1063,0,0,10173,10175,5,622,0,0,10174,10172,1,0,0,0,
        10174,10175,1,0,0,0,10175,813,1,0,0,0,10176,10177,7,114,0,0,10177,
        815,1,0,0,0,10178,10185,5,134,0,0,10179,10182,5,1192,0,0,10180,10183,
        3,1208,604,0,10181,10183,5,1170,0,0,10182,10180,1,0,0,0,10182,10181,
        1,0,0,0,10183,10184,1,0,0,0,10184,10186,5,1193,0,0,10185,10179,1,
        0,0,0,10185,10186,1,0,0,0,10186,10196,1,0,0,0,10187,10188,5,1063,
        0,0,10188,10193,3,814,407,0,10189,10190,5,1194,0,0,10190,10192,3,
        814,407,0,10191,10189,1,0,0,0,10192,10195,1,0,0,0,10193,10191,1,
        0,0,0,10193,10194,1,0,0,0,10194,10197,1,0,0,0,10195,10193,1,0,0,
        0,10196,10187,1,0,0,0,10196,10197,1,0,0,0,10197,817,1,0,0,0,10198,
        10209,5,32,0,0,10199,10209,5,327,0,0,10200,10209,5,622,0,0,10201,
        10209,5,969,0,0,10202,10209,5,310,0,0,10203,10209,5,706,0,0,10204,
        10209,5,224,0,0,10205,10206,5,538,0,0,10206,10207,5,1174,0,0,10207,
        10209,5,1168,0,0,10208,10198,1,0,0,0,10208,10199,1,0,0,0,10208,10200,
        1,0,0,0,10208,10201,1,0,0,0,10208,10202,1,0,0,0,10208,10203,1,0,
        0,0,10208,10204,1,0,0,0,10208,10205,1,0,0,0,10209,819,1,0,0,0,10210,
        10222,5,135,0,0,10211,10215,5,1192,0,0,10212,10216,3,1208,604,0,
        10213,10216,5,1170,0,0,10214,10216,5,1168,0,0,10215,10212,1,0,0,
        0,10215,10213,1,0,0,0,10215,10214,1,0,0,0,10216,10219,1,0,0,0,10217,
        10218,5,1194,0,0,10218,10220,7,115,0,0,10219,10217,1,0,0,0,10219,
        10220,1,0,0,0,10220,10221,1,0,0,0,10221,10223,5,1193,0,0,10222,10211,
        1,0,0,0,10222,10223,1,0,0,0,10223,10233,1,0,0,0,10224,10225,5,1063,
        0,0,10225,10230,3,818,409,0,10226,10227,5,1194,0,0,10227,10229,3,
        818,409,0,10228,10226,1,0,0,0,10229,10232,1,0,0,0,10230,10228,1,
        0,0,0,10230,10231,1,0,0,0,10231,10234,1,0,0,0,10232,10230,1,0,0,
        0,10233,10224,1,0,0,0,10233,10234,1,0,0,0,10234,821,1,0,0,0,10235,
        10244,5,32,0,0,10236,10244,5,622,0,0,10237,10244,5,969,0,0,10238,
        10244,5,310,0,0,10239,10244,5,706,0,0,10240,10241,5,538,0,0,10241,
        10242,5,1174,0,0,10242,10244,5,1168,0,0,10243,10235,1,0,0,0,10243,
        10236,1,0,0,0,10243,10237,1,0,0,0,10243,10238,1,0,0,0,10243,10239,
        1,0,0,0,10243,10240,1,0,0,0,10244,823,1,0,0,0,10245,10256,5,136,
        0,0,10246,10249,5,1192,0,0,10247,10250,5,1168,0,0,10248,10250,5,
        1170,0,0,10249,10247,1,0,0,0,10249,10248,1,0,0,0,10250,10253,1,0,
        0,0,10251,10252,5,1194,0,0,10252,10254,7,115,0,0,10253,10251,1,0,
        0,0,10253,10254,1,0,0,0,10254,10255,1,0,0,0,10255,10257,5,1193,0,
        0,10256,10246,1,0,0,0,10256,10257,1,0,0,0,10257,10267,1,0,0,0,10258,
        10259,5,1063,0,0,10259,10264,3,822,411,0,10260,10261,5,1194,0,0,
        10261,10263,3,822,411,0,10262,10260,1,0,0,0,10263,10266,1,0,0,0,
        10264,10262,1,0,0,0,10264,10265,1,0,0,0,10265,10268,1,0,0,0,10266,
        10264,1,0,0,0,10267,10258,1,0,0,0,10267,10268,1,0,0,0,10268,825,
        1,0,0,0,10269,10270,5,140,0,0,10270,10271,5,1192,0,0,10271,10280,
        5,1170,0,0,10272,10278,5,1194,0,0,10273,10279,5,604,0,0,10274,10279,
        3,914,457,0,10275,10279,5,783,0,0,10276,10279,5,784,0,0,10277,10279,
        5,785,0,0,10278,10273,1,0,0,0,10278,10274,1,0,0,0,10278,10275,1,
        0,0,0,10278,10276,1,0,0,0,10278,10277,1,0,0,0,10279,10281,1,0,0,
        0,10280,10272,1,0,0,0,10280,10281,1,0,0,0,10281,10282,1,0,0,0,10282,
        10292,5,1193,0,0,10283,10284,5,1063,0,0,10284,10289,3,818,409,0,
        10285,10286,5,1194,0,0,10286,10288,3,818,409,0,10287,10285,1,0,0,
        0,10288,10291,1,0,0,0,10289,10287,1,0,0,0,10289,10290,1,0,0,0,10290,
        10293,1,0,0,0,10291,10289,1,0,0,0,10292,10283,1,0,0,0,10292,10293,
        1,0,0,0,10293,827,1,0,0,0,10294,10295,5,144,0,0,10295,10299,5,1192,
        0,0,10296,10300,3,1208,604,0,10297,10300,5,1170,0,0,10298,10300,
        5,1168,0,0,10299,10296,1,0,0,0,10299,10297,1,0,0,0,10299,10298,1,
        0,0,0,10300,10301,1,0,0,0,10301,10304,5,1194,0,0,10302,10305,3,1208,
        604,0,10303,10305,5,1170,0,0,10304,10302,1,0,0,0,10304,10303,1,0,
        0,0,10305,10308,1,0,0,0,10306,10307,5,1194,0,0,10307,10309,5,1168,
        0,0,10308,10306,1,0,0,0,10308,10309,1,0,0,0,10309,10310,1,0,0,0,
        10310,10313,5,1193,0,0,10311,10312,5,1063,0,0,10312,10314,5,622,
        0,0,10313,10311,1,0,0,0,10313,10314,1,0,0,0,10314,829,1,0,0,0,10315,
        10316,7,116,0,0,10316,831,1,0,0,0,10317,10318,5,146,0,0,10318,10319,
        5,1192,0,0,10319,10320,3,1208,604,0,10320,10321,5,1194,0,0,10321,
        10322,3,1208,604,0,10322,10332,5,1193,0,0,10323,10324,5,1063,0,0,
        10324,10329,3,830,415,0,10325,10326,5,1194,0,0,10326,10328,3,830,
        415,0,10327,10325,1,0,0,0,10328,10331,1,0,0,0,10329,10327,1,0,0,
        0,10329,10330,1,0,0,0,10330,10333,1,0,0,0,10331,10329,1,0,0,0,10332,
        10323,1,0,0,0,10332,10333,1,0,0,0,10333,833,1,0,0,0,10334,10339,
        5,694,0,0,10335,10336,5,1192,0,0,10336,10337,3,1208,604,0,10337,
        10338,5,1193,0,0,10338,10340,1,0,0,0,10339,10335,1,0,0,0,10339,10340,
        1,0,0,0,10340,10343,1,0,0,0,10341,10342,5,1063,0,0,10342,10344,5,
        435,0,0,10343,10341,1,0,0,0,10343,10344,1,0,0,0,10344,835,1,0,0,
        0,10345,10348,5,727,0,0,10346,10347,5,1063,0,0,10347,10349,5,622,
        0,0,10348,10346,1,0,0,0,10348,10349,1,0,0,0,10349,837,1,0,0,0,10350,
        10351,7,117,0,0,10351,839,1,0,0,0,10352,10361,5,894,0,0,10353,10354,
        5,1192,0,0,10354,10357,3,914,457,0,10355,10356,5,1194,0,0,10356,
        10358,3,914,457,0,10357,10355,1,0,0,0,10357,10358,1,0,0,0,10358,
        10359,1,0,0,0,10359,10360,5,1193,0,0,10360,10362,1,0,0,0,10361,10353,
        1,0,0,0,10361,10362,1,0,0,0,10362,10372,1,0,0,0,10363,10364,5,1063,
        0,0,10364,10369,3,838,419,0,10365,10366,5,1194,0,0,10366,10368,3,
        838,419,0,10367,10365,1,0,0,0,10368,10371,1,0,0,0,10369,10367,1,
        0,0,0,10369,10370,1,0,0,0,10370,10373,1,0,0,0,10371,10369,1,0,0,
        0,10372,10363,1,0,0,0,10372,10373,1,0,0,0,10373,841,1,0,0,0,10374,
        10384,5,899,0,0,10375,10376,5,1192,0,0,10376,10377,5,905,0,0,10377,
        10381,5,1174,0,0,10378,10379,5,1168,0,0,10379,10382,7,51,0,0,10380,
        10382,5,243,0,0,10381,10378,1,0,0,0,10381,10380,1,0,0,0,10382,10383,
        1,0,0,0,10383,10385,5,1193,0,0,10384,10375,1,0,0,0,10384,10385,1,
        0,0,0,10385,10388,1,0,0,0,10386,10387,5,1063,0,0,10387,10389,5,622,
        0,0,10388,10386,1,0,0,0,10388,10389,1,0,0,0,10389,843,1,0,0,0,10390,
        10391,5,233,0,0,10391,10392,5,1192,0,0,10392,10399,3,1212,606,0,
        10393,10394,5,1194,0,0,10394,10397,3,1212,606,0,10395,10396,5,1194,
        0,0,10396,10398,3,914,457,0,10397,10395,1,0,0,0,10397,10398,1,0,
        0,0,10398,10400,1,0,0,0,10399,10393,1,0,0,0,10399,10400,1,0,0,0,
        10400,10401,1,0,0,0,10401,10404,5,1193,0,0,10402,10403,5,1063,0,
        0,10403,10405,5,622,0,0,10404,10402,1,0,0,0,10404,10405,1,0,0,0,
        10405,845,1,0,0,0,10406,10407,3,1208,604,0,10407,10408,5,1192,0,
        0,10408,10409,5,375,0,0,10409,10412,5,1193,0,0,10410,10411,5,1063,
        0,0,10411,10413,5,622,0,0,10412,10410,1,0,0,0,10412,10413,1,0,0,
        0,10413,847,1,0,0,0,10414,10419,5,281,0,0,10415,10416,5,1192,0,0,
        10416,10420,5,169,0,0,10417,10418,5,22,0,0,10418,10420,5,1193,0,
        0,10419,10415,1,0,0,0,10419,10417,1,0,0,0,10419,10420,1,0,0,0,10420,
        10423,1,0,0,0,10421,10422,5,1063,0,0,10422,10424,5,622,0,0,10423,
        10421,1,0,0,0,10423,10424,1,0,0,0,10424,849,1,0,0,0,10425,10441,
        5,232,0,0,10426,10442,3,810,405,0,10427,10442,3,812,406,0,10428,
        10442,3,816,408,0,10429,10442,3,820,410,0,10430,10442,3,824,412,
        0,10431,10442,3,826,413,0,10432,10442,3,828,414,0,10433,10442,3,
        832,416,0,10434,10442,3,844,422,0,10435,10442,3,846,423,0,10436,
        10442,3,848,424,0,10437,10442,3,834,417,0,10438,10442,3,836,418,
        0,10439,10442,3,840,420,0,10440,10442,3,842,421,0,10441,10426,1,
        0,0,0,10441,10427,1,0,0,0,10441,10428,1,0,0,0,10441,10429,1,0,0,
        0,10441,10430,1,0,0,0,10441,10431,1,0,0,0,10441,10432,1,0,0,0,10441,
        10433,1,0,0,0,10441,10434,1,0,0,0,10441,10435,1,0,0,0,10441,10436,
        1,0,0,0,10441,10437,1,0,0,0,10441,10438,1,0,0,0,10441,10439,1,0,
        0,0,10441,10440,1,0,0,0,10442,851,1,0,0,0,10443,10444,5,318,0,0,
        10444,10445,5,56,0,0,10445,10446,7,118,0,0,10446,853,1,0,0,0,10447,
        10449,5,1166,0,0,10448,10450,5,56,0,0,10449,10448,1,0,0,0,10449,
        10450,1,0,0,0,10450,10451,1,0,0,0,10451,10454,3,1200,600,0,10452,
        10453,5,1174,0,0,10453,10455,3,914,457,0,10454,10452,1,0,0,0,10454,
        10455,1,0,0,0,10455,855,1,0,0,0,10456,10457,5,966,0,0,10457,10458,
        5,1192,0,0,10458,10465,3,864,432,0,10459,10461,5,1194,0,0,10460,
        10459,1,0,0,0,10460,10461,1,0,0,0,10461,10462,1,0,0,0,10462,10464,
        3,858,429,0,10463,10460,1,0,0,0,10464,10467,1,0,0,0,10465,10463,
        1,0,0,0,10465,10466,1,0,0,0,10466,10468,1,0,0,0,10467,10465,1,0,
        0,0,10468,10469,5,1193,0,0,10469,857,1,0,0,0,10470,10471,5,717,0,
        0,10471,10475,5,489,0,0,10472,10473,5,447,0,0,10473,10475,3,1208,
        604,0,10474,10470,1,0,0,0,10474,10472,1,0,0,0,10475,10477,1,0,0,
        0,10476,10478,7,119,0,0,10477,10476,1,0,0,0,10477,10478,1,0,0,0,
        10478,10481,1,0,0,0,10479,10481,5,1020,0,0,10480,10474,1,0,0,0,10480,
        10479,1,0,0,0,10481,10482,1,0,0,0,10482,10483,5,1192,0,0,10483,10484,
        3,1164,582,0,10484,10485,5,1193,0,0,10485,10492,1,0,0,0,10486,10487,
        5,131,0,0,10487,10488,5,1192,0,0,10488,10489,3,938,469,0,10489,10490,
        5,1193,0,0,10490,10492,1,0,0,0,10491,10480,1,0,0,0,10491,10486,1,
        0,0,0,10492,859,1,0,0,0,10493,10494,5,1074,0,0,10494,10496,5,1192,
        0,0,10495,10497,7,120,0,0,10496,10495,1,0,0,0,10496,10497,1,0,0,
        0,10497,10498,1,0,0,0,10498,10499,3,862,431,0,10499,10500,5,1193,
        0,0,10500,861,1,0,0,0,10501,10502,5,1169,0,0,10502,10503,5,1187,
        0,0,10503,10504,5,1169,0,0,10504,863,1,0,0,0,10505,10512,3,866,433,
        0,10506,10508,5,1194,0,0,10507,10506,1,0,0,0,10507,10508,1,0,0,0,
        10508,10509,1,0,0,0,10509,10511,3,866,433,0,10510,10507,1,0,0,0,
        10511,10514,1,0,0,0,10512,10510,1,0,0,0,10512,10513,1,0,0,0,10513,
        865,1,0,0,0,10514,10512,1,0,0,0,10515,10519,3,868,434,0,10516,10519,
        3,874,437,0,10517,10519,3,882,441,0,10518,10515,1,0,0,0,10518,10516,
        1,0,0,0,10518,10517,1,0,0,0,10519,867,1,0,0,0,10520,10527,3,1208,
        604,0,10521,10528,3,1200,600,0,10522,10523,5,56,0,0,10523,10525,
        3,914,457,0,10524,10526,5,701,0,0,10525,10524,1,0,0,0,10525,10526,
        1,0,0,0,10526,10528,1,0,0,0,10527,10521,1,0,0,0,10527,10522,1,0,
        0,0,10528,10532,1,0,0,0,10529,10531,3,870,435,0,10530,10529,1,0,
        0,0,10531,10534,1,0,0,0,10532,10530,1,0,0,0,10532,10533,1,0,0,0,
        10533,10536,1,0,0,0,10534,10532,1,0,0,0,10535,10537,3,878,439,0,
        10536,10535,1,0,0,0,10536,10537,1,0,0,0,10537,869,1,0,0,0,10538,
        10592,5,351,0,0,10539,10540,5,151,0,0,10540,10592,3,1208,604,0,10541,
        10592,5,915,0,0,10542,10543,5,533,0,0,10543,10544,5,1063,0,0,10544,
        10545,5,1192,0,0,10545,10546,5,384,0,0,10546,10547,5,1174,0,0,10547,
        10548,5,1170,0,0,10548,10592,5,1193,0,0,10549,10550,5,177,0,0,10550,
        10552,3,1208,604,0,10551,10549,1,0,0,0,10551,10552,1,0,0,0,10552,
        10553,1,0,0,0,10553,10554,5,243,0,0,10554,10592,3,914,457,0,10555,
        10561,5,424,0,0,10556,10557,5,1192,0,0,10557,10558,5,1168,0,0,10558,
        10559,5,1194,0,0,10559,10560,5,1168,0,0,10560,10562,5,1193,0,0,10561,
        10556,1,0,0,0,10561,10562,1,0,0,0,10562,10592,1,0,0,0,10563,10564,
        5,614,0,0,10564,10565,5,363,0,0,10565,10592,5,791,0,0,10566,10567,
        5,386,0,0,10567,10568,5,36,0,0,10568,10569,5,56,0,0,10569,10570,
        7,121,0,0,10570,10572,7,122,0,0,10571,10573,5,416,0,0,10572,10571,
        1,0,0,0,10572,10573,1,0,0,0,10573,10592,1,0,0,0,10574,10592,5,828,
        0,0,10575,10576,5,293,0,0,10576,10577,5,1063,0,0,10577,10578,5,1192,
        0,0,10578,10579,5,158,0,0,10579,10580,5,1174,0,0,10580,10581,5,1170,
        0,0,10581,10582,5,1194,0,0,10582,10583,5,296,0,0,10583,10584,5,1174,
        0,0,10584,10585,7,123,0,0,10585,10586,5,1194,0,0,10586,10587,5,21,
        0,0,10587,10588,5,1174,0,0,10588,10589,5,1170,0,0,10589,10592,5,
        1193,0,0,10590,10592,3,876,438,0,10591,10538,1,0,0,0,10591,10539,
        1,0,0,0,10591,10541,1,0,0,0,10591,10542,1,0,0,0,10591,10551,1,0,
        0,0,10591,10555,1,0,0,0,10591,10563,1,0,0,0,10591,10566,1,0,0,0,
        10591,10574,1,0,0,0,10591,10575,1,0,0,0,10591,10590,1,0,0,0,10592,
        871,1,0,0,0,10593,10594,3,1208,604,0,10594,10616,7,23,0,0,10595,
        10617,5,828,0,0,10596,10617,5,701,0,0,10597,10598,5,614,0,0,10598,
        10599,5,363,0,0,10599,10617,5,791,0,0,10600,10617,5,915,0,0,10601,
        10617,5,416,0,0,10602,10614,5,533,0,0,10603,10612,5,1063,0,0,10604,
        10605,5,384,0,0,10605,10606,5,1174,0,0,10606,10613,5,1170,0,0,10607,
        10608,5,1192,0,0,10608,10609,5,384,0,0,10609,10610,5,1174,0,0,10610,
        10611,5,1170,0,0,10611,10613,5,1193,0,0,10612,10604,1,0,0,0,10612,
        10607,1,0,0,0,10613,10615,1,0,0,0,10614,10603,1,0,0,0,10614,10615,
        1,0,0,0,10615,10617,1,0,0,0,10616,10595,1,0,0,0,10616,10596,1,0,
        0,0,10616,10597,1,0,0,0,10616,10600,1,0,0,0,10616,10601,1,0,0,0,
        10616,10602,1,0,0,0,10617,873,1,0,0,0,10618,10619,3,1208,604,0,10619,
        10620,7,124,0,0,10620,10624,3,914,457,0,10621,10625,5,536,0,0,10622,
        10623,5,614,0,0,10623,10625,5,536,0,0,10624,10621,1,0,0,0,10624,
        10622,1,0,0,0,10624,10625,1,0,0,0,10625,875,1,0,0,0,10626,10627,
        5,177,0,0,10627,10629,3,1208,604,0,10628,10626,1,0,0,0,10628,10629,
        1,0,0,0,10629,10646,1,0,0,0,10630,10647,3,1178,589,0,10631,10632,
        5,717,0,0,10632,10635,5,489,0,0,10633,10635,5,1020,0,0,10634,10631,
        1,0,0,0,10634,10633,1,0,0,0,10635,10637,1,0,0,0,10636,10638,3,1176,
        588,0,10637,10636,1,0,0,0,10637,10638,1,0,0,0,10638,10639,1,0,0,
        0,10639,10647,3,886,443,0,10640,10641,5,371,0,0,10641,10643,5,489,
        0,0,10642,10640,1,0,0,0,10642,10643,1,0,0,0,10643,10644,1,0,0,0,
        10644,10647,3,888,444,0,10645,10647,3,890,445,0,10646,10630,1,0,
        0,0,10646,10634,1,0,0,0,10646,10642,1,0,0,0,10646,10645,1,0,0,0,
        10647,877,1,0,0,0,10648,10649,5,447,0,0,10649,10651,3,1208,604,0,
        10650,10652,3,1176,588,0,10651,10650,1,0,0,0,10651,10652,1,0,0,0,
        10652,10654,1,0,0,0,10653,10655,3,594,297,0,10654,10653,1,0,0,0,
        10654,10655,1,0,0,0,10655,10657,1,0,0,0,10656,10658,3,880,440,0,
        10657,10656,1,0,0,0,10657,10658,1,0,0,0,10658,10664,1,0,0,0,10659,
        10662,5,352,0,0,10660,10663,3,1208,604,0,10661,10663,5,631,0,0,10662,
        10660,1,0,0,0,10662,10661,1,0,0,0,10663,10665,1,0,0,0,10664,10659,
        1,0,0,0,10664,10665,1,0,0,0,10665,879,1,0,0,0,10666,10674,5,649,
        0,0,10667,10668,3,1208,604,0,10668,10669,5,1192,0,0,10669,10670,
        3,1208,604,0,10670,10671,5,1193,0,0,10671,10675,1,0,0,0,10672,10675,
        3,1208,604,0,10673,10675,5,245,0,0,10674,10667,1,0,0,0,10674,10672,
        1,0,0,0,10674,10673,1,0,0,0,10675,881,1,0,0,0,10676,10677,5,177,
        0,0,10677,10679,3,1208,604,0,10678,10676,1,0,0,0,10678,10679,1,0,
        0,0,10679,10721,1,0,0,0,10680,10681,5,717,0,0,10681,10684,5,489,
        0,0,10682,10684,5,1020,0,0,10683,10680,1,0,0,0,10683,10682,1,0,0,
        0,10684,10686,1,0,0,0,10685,10687,3,1176,588,0,10686,10685,1,0,0,
        0,10686,10687,1,0,0,0,10687,10688,1,0,0,0,10688,10689,5,1192,0,0,
        10689,10690,3,1164,582,0,10690,10691,5,1193,0,0,10691,10692,3,886,
        443,0,10692,10722,1,0,0,0,10693,10694,5,371,0,0,10694,10695,5,489,
        0,0,10695,10696,5,1192,0,0,10696,10697,3,1170,585,0,10697,10698,
        5,1193,0,0,10698,10699,3,888,444,0,10699,10722,1,0,0,0,10700,10701,
        5,175,0,0,10701,10702,5,1192,0,0,10702,10707,3,884,442,0,10703,10704,
        5,1194,0,0,10704,10706,3,884,442,0,10705,10703,1,0,0,0,10706,10709,
        1,0,0,0,10707,10705,1,0,0,0,10707,10708,1,0,0,0,10708,10710,1,0,
        0,0,10709,10707,1,0,0,0,10710,10711,5,1193,0,0,10711,10722,1,0,0,
        0,10712,10713,5,243,0,0,10713,10714,3,914,457,0,10714,10715,5,363,
        0,0,10715,10718,3,1208,604,0,10716,10717,5,1063,0,0,10717,10719,
        5,1042,0,0,10718,10716,1,0,0,0,10718,10719,1,0,0,0,10719,10722,1,
        0,0,0,10720,10722,3,890,445,0,10721,10683,1,0,0,0,10721,10693,1,
        0,0,0,10721,10700,1,0,0,0,10721,10712,1,0,0,0,10721,10720,1,0,0,
        0,10722,883,1,0,0,0,10723,10724,3,1208,604,0,10724,10725,5,986,0,
        0,10725,10726,3,1208,604,0,10726,885,1,0,0,0,10727,10728,5,1063,
        0,0,10728,10729,5,357,0,0,10729,10730,5,1174,0,0,10730,10732,5,1168,
        0,0,10731,10727,1,0,0,0,10731,10732,1,0,0,0,10732,10734,1,0,0,0,
        10733,10735,3,896,448,0,10734,10733,1,0,0,0,10734,10735,1,0,0,0,
        10735,10737,1,0,0,0,10736,10738,3,880,440,0,10737,10736,1,0,0,0,
        10737,10738,1,0,0,0,10738,887,1,0,0,0,10739,10740,5,773,0,0,10740,
        10741,3,1150,575,0,10741,10742,5,1192,0,0,10742,10743,3,1170,585,
        0,10743,10748,5,1193,0,0,10744,10747,3,892,446,0,10745,10747,3,894,
        447,0,10746,10744,1,0,0,0,10746,10745,1,0,0,0,10747,10750,1,0,0,
        0,10748,10746,1,0,0,0,10748,10749,1,0,0,0,10749,10754,1,0,0,0,10750,
        10748,1,0,0,0,10751,10752,5,614,0,0,10752,10753,5,363,0,0,10753,
        10755,5,791,0,0,10754,10751,1,0,0,0,10754,10755,1,0,0,0,10755,889,
        1,0,0,0,10756,10760,5,131,0,0,10757,10758,5,614,0,0,10758,10759,
        5,363,0,0,10759,10761,5,791,0,0,10760,10757,1,0,0,0,10760,10761,
        1,0,0,0,10761,10762,1,0,0,0,10762,10763,5,1192,0,0,10763,10764,3,
        938,469,0,10764,10765,5,1193,0,0,10765,891,1,0,0,0,10766,10767,5,
        649,0,0,10767,10775,5,252,0,0,10768,10769,5,596,0,0,10769,10776,
        5,8,0,0,10770,10776,5,115,0,0,10771,10772,5,887,0,0,10772,10776,
        5,630,0,0,10773,10774,5,887,0,0,10774,10776,5,243,0,0,10775,10768,
        1,0,0,0,10775,10770,1,0,0,0,10775,10771,1,0,0,0,10775,10773,1,0,
        0,0,10776,893,1,0,0,0,10777,10778,5,649,0,0,10778,10786,5,1028,0,
        0,10779,10780,5,596,0,0,10780,10787,5,8,0,0,10781,10787,5,115,0,
        0,10782,10783,5,887,0,0,10783,10787,5,630,0,0,10784,10785,5,887,
        0,0,10785,10787,5,243,0,0,10786,10779,1,0,0,0,10786,10781,1,0,0,
        0,10786,10782,1,0,0,0,10786,10784,1,0,0,0,10787,895,1,0,0,0,10788,
        10789,5,1063,0,0,10789,10790,5,1192,0,0,10790,10795,3,898,449,0,
        10791,10792,5,1194,0,0,10792,10794,3,898,449,0,10793,10791,1,0,0,
        0,10794,10797,1,0,0,0,10795,10793,1,0,0,0,10795,10796,1,0,0,0,10796,
        10798,1,0,0,0,10797,10795,1,0,0,0,10798,10799,5,1193,0,0,10799,897,
        1,0,0,0,10800,10801,5,676,0,0,10801,10802,5,1174,0,0,10802,10887,
        3,1174,587,0,10803,10804,5,357,0,0,10804,10805,5,1174,0,0,10805,
        10887,5,1168,0,0,10806,10807,5,433,0,0,10807,10808,5,1174,0,0,10808,
        10887,3,1174,587,0,10809,10810,5,933,0,0,10810,10811,5,1174,0,0,
        10811,10887,3,1174,587,0,10812,10813,5,28,0,0,10813,10814,5,1174,
        0,0,10814,10887,3,1174,587,0,10815,10816,5,27,0,0,10816,10817,5,
        1174,0,0,10817,10887,3,1174,587,0,10818,10819,5,663,0,0,10819,10820,
        5,1174,0,0,10820,10887,3,1174,587,0,10821,10822,5,911,0,0,10822,
        10823,5,1174,0,0,10823,10887,3,1174,587,0,10824,10825,5,538,0,0,
        10825,10826,5,1174,0,0,10826,10887,5,1168,0,0,10827,10828,5,223,
        0,0,10828,10829,5,1174,0,0,10829,10831,7,63,0,0,10830,10832,3,530,
        265,0,10831,10830,1,0,0,0,10831,10832,1,0,0,0,10832,10887,1,0,0,
        0,10833,10834,5,1078,0,0,10834,10835,5,1174,0,0,10835,10837,3,1174,
        587,0,10836,10838,3,530,265,0,10837,10836,1,0,0,0,10837,10838,1,
        0,0,0,10838,10887,1,0,0,0,10839,10840,5,274,0,0,10840,10841,5,1174,
        0,0,10841,10842,5,408,0,0,10842,10843,5,1192,0,0,10843,10844,3,1208,
        604,0,10844,10845,5,1193,0,0,10845,10887,1,0,0,0,10846,10847,5,149,
        0,0,10847,10848,5,447,0,0,10848,10849,5,1192,0,0,10849,10851,3,1208,
        604,0,10850,10852,7,72,0,0,10851,10850,1,0,0,0,10851,10852,1,0,0,
        0,10852,10860,1,0,0,0,10853,10854,5,1194,0,0,10854,10856,3,1208,
        604,0,10855,10857,7,72,0,0,10856,10855,1,0,0,0,10856,10857,1,0,0,
        0,10857,10859,1,0,0,0,10858,10853,1,0,0,0,10859,10862,1,0,0,0,10860,
        10858,1,0,0,0,10860,10861,1,0,0,0,10861,10863,1,0,0,0,10862,10860,
        1,0,0,0,10863,10864,5,1193,0,0,10864,10887,1,0,0,0,10865,10866,5,
        650,0,0,10866,10875,5,1174,0,0,10867,10872,5,649,0,0,10868,10869,
        5,1192,0,0,10869,10870,3,606,303,0,10870,10871,5,1193,0,0,10871,
        10873,1,0,0,0,10872,10868,1,0,0,0,10872,10873,1,0,0,0,10873,10876,
        1,0,0,0,10874,10876,5,643,0,0,10875,10867,1,0,0,0,10875,10874,1,
        0,0,0,10876,10887,1,0,0,0,10877,10878,5,807,0,0,10878,10879,5,1174,
        0,0,10879,10887,3,1174,587,0,10880,10881,5,546,0,0,10881,10882,5,
        1174,0,0,10882,10884,5,1168,0,0,10883,10885,5,569,0,0,10884,10883,
        1,0,0,0,10884,10885,1,0,0,0,10885,10887,1,0,0,0,10886,10800,1,0,
        0,0,10886,10803,1,0,0,0,10886,10806,1,0,0,0,10886,10809,1,0,0,0,
        10886,10812,1,0,0,0,10886,10815,1,0,0,0,10886,10818,1,0,0,0,10886,
        10821,1,0,0,0,10886,10824,1,0,0,0,10886,10827,1,0,0,0,10886,10833,
        1,0,0,0,10886,10839,1,0,0,0,10886,10846,1,0,0,0,10886,10865,1,0,
        0,0,10886,10877,1,0,0,0,10886,10880,1,0,0,0,10887,899,1,0,0,0,10888,
        10889,5,240,0,0,10889,10921,3,1172,586,0,10890,10900,5,211,0,0,10891,
        10898,3,902,451,0,10892,10893,5,363,0,0,10893,10896,5,1028,0,0,10894,
        10895,5,642,0,0,10895,10897,3,1170,585,0,10896,10894,1,0,0,0,10896,
        10897,1,0,0,0,10897,10899,1,0,0,0,10898,10892,1,0,0,0,10898,10899,
        1,0,0,0,10899,10901,1,0,0,0,10900,10891,1,0,0,0,10900,10901,1,0,
        0,0,10901,10922,1,0,0,0,10902,10904,7,125,0,0,10903,10902,1,0,0,
        0,10903,10904,1,0,0,0,10904,10906,1,0,0,0,10905,10907,5,852,0,0,
        10906,10905,1,0,0,0,10906,10907,1,0,0,0,10907,10908,1,0,0,0,10908,
        10909,5,211,0,0,10909,10910,5,363,0,0,10910,10919,3,482,241,0,10911,
        10917,5,363,0,0,10912,10913,5,754,0,0,10913,10918,5,651,0,0,10914,
        10918,5,1028,0,0,10915,10916,5,642,0,0,10916,10918,3,1170,585,0,
        10917,10912,1,0,0,0,10917,10914,1,0,0,0,10917,10915,1,0,0,0,10918,
        10920,1,0,0,0,10919,10911,1,0,0,0,10919,10920,1,0,0,0,10920,10922,
        1,0,0,0,10921,10890,1,0,0,0,10921,10903,1,0,0,0,10922,10924,1,0,
        0,0,10923,10925,5,1195,0,0,10924,10923,1,0,0,0,10924,10925,1,0,0,
        0,10925,901,1,0,0,0,10926,10928,3,904,452,0,10927,10926,1,0,0,0,
        10928,10931,1,0,0,0,10929,10927,1,0,0,0,10929,10930,1,0,0,0,10930,
        10932,1,0,0,0,10931,10929,1,0,0,0,10932,10933,5,363,0,0,10933,10934,
        3,482,241,0,10934,903,1,0,0,0,10935,10941,7,80,0,0,10936,10941,7,
        126,0,0,10937,10941,7,127,0,0,10938,10941,7,128,0,0,10939,10941,
        5,1014,0,0,10940,10935,1,0,0,0,10940,10936,1,0,0,0,10940,10937,1,
        0,0,0,10940,10938,1,0,0,0,10940,10939,1,0,0,0,10941,905,1,0,0,0,
        10942,10952,5,340,0,0,10943,10950,5,595,0,0,10944,10950,5,720,0,
        0,10945,10950,5,359,0,0,10946,10950,5,498,0,0,10947,10948,7,129,
        0,0,10948,10950,3,914,457,0,10949,10943,1,0,0,0,10949,10944,1,0,
        0,0,10949,10945,1,0,0,0,10949,10946,1,0,0,0,10949,10947,1,0,0,0,
        10949,10950,1,0,0,0,10950,10951,1,0,0,0,10951,10953,5,378,0,0,10952,
        10949,1,0,0,0,10952,10953,1,0,0,0,10953,10955,1,0,0,0,10954,10956,
        5,397,0,0,10955,10954,1,0,0,0,10955,10956,1,0,0,0,10956,10957,1,
        0,0,0,10957,10967,3,1172,586,0,10958,10959,5,462,0,0,10959,10964,
        5,1166,0,0,10960,10961,5,1194,0,0,10961,10963,5,1166,0,0,10962,10960,
        1,0,0,0,10963,10966,1,0,0,0,10964,10962,1,0,0,0,10964,10965,1,0,
        0,0,10965,10968,1,0,0,0,10966,10964,1,0,0,0,10967,10958,1,0,0,0,
        10967,10968,1,0,0,0,10968,10970,1,0,0,0,10969,10971,5,1195,0,0,10970,
        10969,1,0,0,0,10970,10971,1,0,0,0,10971,907,1,0,0,0,10972,10973,
        5,887,0,0,10973,10977,3,1208,604,0,10974,10978,3,1208,604,0,10975,
        10978,3,912,456,0,10976,10978,3,1174,587,0,10977,10974,1,0,0,0,10977,
        10975,1,0,0,0,10977,10976,1,0,0,0,10978,10980,1,0,0,0,10979,10981,
        5,1195,0,0,10980,10979,1,0,0,0,10980,10981,1,0,0,0,10981,11040,1,
        0,0,0,10982,10983,5,887,0,0,10983,10984,5,931,0,0,10984,10985,7,
        130,0,0,10985,10987,3,1174,587,0,10986,10988,5,1195,0,0,10987,10986,
        1,0,0,0,10987,10988,1,0,0,0,10988,11040,1,0,0,0,10989,10990,5,887,
        0,0,10990,10991,5,825,0,0,10991,10993,7,0,0,0,10992,10994,5,1195,
        0,0,10993,10992,1,0,0,0,10993,10994,1,0,0,0,10994,11040,1,0,0,0,
        10995,10996,5,887,0,0,10996,10997,5,978,0,0,10997,10999,5,1168,0,
        0,10998,11000,5,1195,0,0,10999,10998,1,0,0,0,10999,11000,1,0,0,0,
        11000,11040,1,0,0,0,11001,11002,5,887,0,0,11002,11003,5,994,0,0,
        11003,11004,5,470,0,0,11004,11014,5,504,0,0,11005,11006,5,754,0,
        0,11006,11015,5,1017,0,0,11007,11008,5,754,0,0,11008,11015,5,163,
        0,0,11009,11010,5,786,0,0,11010,11015,5,754,0,0,11011,11015,5,908,
        0,0,11012,11015,5,875,0,0,11013,11015,5,1168,0,0,11014,11005,1,0,
        0,0,11014,11007,1,0,0,0,11014,11009,1,0,0,0,11014,11011,1,0,0,0,
        11014,11012,1,0,0,0,11014,11013,1,0,0,0,11015,11017,1,0,0,0,11016,
        11018,5,1195,0,0,11017,11016,1,0,0,0,11017,11018,1,0,0,0,11018,11040,
        1,0,0,0,11019,11020,5,887,0,0,11020,11021,5,426,0,0,11021,11022,
        3,1150,575,0,11022,11024,3,1174,587,0,11023,11025,5,1195,0,0,11024,
        11023,1,0,0,0,11024,11025,1,0,0,0,11025,11040,1,0,0,0,11026,11027,
        5,887,0,0,11027,11032,3,910,455,0,11028,11029,5,1194,0,0,11029,11031,
        3,910,455,0,11030,11028,1,0,0,0,11031,11034,1,0,0,0,11032,11030,
        1,0,0,0,11032,11033,1,0,0,0,11033,11035,1,0,0,0,11034,11032,1,0,
        0,0,11035,11036,3,1174,587,0,11036,11040,1,0,0,0,11037,11038,5,887,
        0,0,11038,11040,3,1072,536,0,11039,10972,1,0,0,0,11039,10982,1,0,
        0,0,11039,10989,1,0,0,0,11039,10995,1,0,0,0,11039,11001,1,0,0,0,
        11039,11019,1,0,0,0,11039,11026,1,0,0,0,11039,11037,1,0,0,0,11040,
        909,1,0,0,0,11041,11042,7,131,0,0,11042,911,1,0,0,0,11043,11046,
        3,1202,601,0,11044,11046,5,1166,0,0,11045,11043,1,0,0,0,11045,11044,
        1,0,0,0,11046,913,1,0,0,0,11047,11048,6,457,-1,0,11048,11057,3,920,
        460,0,11049,11057,3,1036,518,0,11050,11057,3,922,461,0,11051,11057,
        3,1162,581,0,11052,11057,3,926,463,0,11053,11057,3,924,462,0,11054,
        11057,3,1120,560,0,11055,11057,5,1155,0,0,11056,11047,1,0,0,0,11056,
        11049,1,0,0,0,11056,11050,1,0,0,0,11056,11051,1,0,0,0,11056,11052,
        1,0,0,0,11056,11053,1,0,0,0,11056,11054,1,0,0,0,11056,11055,1,0,
        0,0,11057,11082,1,0,0,0,11058,11059,10,5,0,0,11059,11060,7,132,0,
        0,11060,11081,3,914,457,6,11061,11062,10,4,0,0,11062,11063,7,133,
        0,0,11063,11081,3,914,457,5,11064,11065,10,12,0,0,11065,11070,5,
        1187,0,0,11066,11071,3,1062,531,0,11067,11071,3,1066,533,0,11068,
        11071,3,1070,535,0,11069,11071,3,1074,537,0,11070,11066,1,0,0,0,
        11070,11067,1,0,0,0,11070,11068,1,0,0,0,11070,11069,1,0,0,0,11071,
        11081,1,0,0,0,11072,11073,10,11,0,0,11073,11074,5,1187,0,0,11074,
        11081,3,1076,538,0,11075,11076,10,10,0,0,11076,11077,5,151,0,0,11077,
        11081,3,1208,604,0,11078,11079,10,3,0,0,11079,11081,3,918,459,0,
        11080,11058,1,0,0,0,11080,11061,1,0,0,0,11080,11064,1,0,0,0,11080,
        11072,1,0,0,0,11080,11075,1,0,0,0,11080,11078,1,0,0,0,11081,11084,
        1,0,0,0,11082,11080,1,0,0,0,11082,11083,1,0,0,0,11083,915,1,0,0,
        0,11084,11082,1,0,0,0,11085,11086,5,1207,0,0,11086,917,1,0,0,0,11087,
        11088,5,63,0,0,11088,11089,5,982,0,0,11089,11090,5,1080,0,0,11090,
        11091,3,914,457,0,11091,919,1,0,0,0,11092,11097,5,243,0,0,11093,
        11097,5,630,0,0,11094,11097,5,1166,0,0,11095,11097,3,1204,602,0,
        11096,11092,1,0,0,0,11096,11093,1,0,0,0,11096,11094,1,0,0,0,11096,
        11095,1,0,0,0,11097,921,1,0,0,0,11098,11099,5,116,0,0,11099,11101,
        3,914,457,0,11100,11102,3,1082,541,0,11101,11100,1,0,0,0,11102,11103,
        1,0,0,0,11103,11101,1,0,0,0,11103,11104,1,0,0,0,11104,11107,1,0,
        0,0,11105,11106,5,287,0,0,11106,11108,3,914,457,0,11107,11105,1,
        0,0,0,11107,11108,1,0,0,0,11108,11109,1,0,0,0,11109,11110,5,297,
        0,0,11110,11124,1,0,0,0,11111,11113,5,116,0,0,11112,11114,3,1084,
        542,0,11113,11112,1,0,0,0,11114,11115,1,0,0,0,11115,11113,1,0,0,
        0,11115,11116,1,0,0,0,11116,11119,1,0,0,0,11117,11118,5,287,0,0,
        11118,11120,3,914,457,0,11119,11117,1,0,0,0,11119,11120,1,0,0,0,
        11120,11121,1,0,0,0,11121,11122,5,297,0,0,11122,11124,1,0,0,0,11123,
        11098,1,0,0,0,11123,11111,1,0,0,0,11124,923,1,0,0,0,11125,11126,
        5,1203,0,0,11126,11130,3,914,457,0,11127,11128,7,134,0,0,11128,11130,
        3,914,457,0,11129,11125,1,0,0,0,11129,11127,1,0,0,0,11130,925,1,
        0,0,0,11131,11132,5,1192,0,0,11132,11133,3,914,457,0,11133,11134,
        5,1193,0,0,11134,11140,1,0,0,0,11135,11136,5,1192,0,0,11136,11137,
        3,928,464,0,11137,11138,5,1193,0,0,11138,11140,1,0,0,0,11139,11131,
        1,0,0,0,11139,11135,1,0,0,0,11140,927,1,0,0,0,11141,11142,3,484,
        242,0,11142,929,1,0,0,0,11143,11144,5,1063,0,0,11144,11149,3,932,
        466,0,11145,11146,5,1194,0,0,11146,11148,3,932,466,0,11147,11145,
        1,0,0,0,11148,11151,1,0,0,0,11149,11147,1,0,0,0,11149,11150,1,0,
        0,0,11150,931,1,0,0,0,11151,11149,1,0,0,0,11152,11157,3,1208,604,
        0,11153,11154,5,1192,0,0,11154,11155,3,1170,585,0,11155,11156,5,
        1193,0,0,11156,11158,1,0,0,0,11157,11153,1,0,0,0,11157,11158,1,0,
        0,0,11158,11159,1,0,0,0,11159,11160,5,56,0,0,11160,11161,5,1192,
        0,0,11161,11162,3,484,242,0,11162,11163,5,1193,0,0,11163,933,1,0,
        0,0,11164,11165,5,1166,0,0,11165,11166,5,1174,0,0,11166,11169,3,
        1162,581,0,11167,11170,5,1174,0,0,11168,11170,3,1216,608,0,11169,
        11167,1,0,0,0,11169,11168,1,0,0,0,11170,11171,1,0,0,0,11171,11172,
        3,914,457,0,11172,11190,1,0,0,0,11173,11176,3,1162,581,0,11174,11176,
        5,1166,0,0,11175,11173,1,0,0,0,11175,11174,1,0,0,0,11176,11179,1,
        0,0,0,11177,11180,5,1174,0,0,11178,11180,3,1216,608,0,11179,11177,
        1,0,0,0,11179,11178,1,0,0,0,11180,11181,1,0,0,0,11181,11190,3,914,
        457,0,11182,11183,3,1208,604,0,11183,11184,5,1187,0,0,11184,11185,
        3,1208,604,0,11185,11186,5,1192,0,0,11186,11187,3,1110,555,0,11187,
        11188,5,1193,0,0,11188,11190,1,0,0,0,11189,11164,1,0,0,0,11189,11175,
        1,0,0,0,11189,11182,1,0,0,0,11190,935,1,0,0,0,11191,11194,3,1162,
        581,0,11192,11194,5,1166,0,0,11193,11191,1,0,0,0,11193,11192,1,0,
        0,0,11194,11197,1,0,0,0,11195,11198,5,1174,0,0,11196,11198,3,1216,
        608,0,11197,11195,1,0,0,0,11197,11196,1,0,0,0,11198,11199,1,0,0,
        0,11199,11208,3,914,457,0,11200,11201,3,1208,604,0,11201,11202,5,
        1187,0,0,11202,11203,3,1208,604,0,11203,11204,5,1192,0,0,11204,11205,
        3,1110,555,0,11205,11206,5,1193,0,0,11206,11208,1,0,0,0,11207,11193,
        1,0,0,0,11207,11200,1,0,0,0,11208,937,1,0,0,0,11209,11213,6,469,
        -1,0,11210,11212,5,614,0,0,11211,11210,1,0,0,0,11212,11215,1,0,0,
        0,11213,11211,1,0,0,0,11213,11214,1,0,0,0,11214,11221,1,0,0,0,11215,
        11213,1,0,0,0,11216,11222,3,940,470,0,11217,11218,5,1192,0,0,11218,
        11219,3,938,469,0,11219,11220,5,1193,0,0,11220,11222,1,0,0,0,11221,
        11216,1,0,0,0,11221,11217,1,0,0,0,11222,11231,1,0,0,0,11223,11224,
        10,2,0,0,11224,11225,5,37,0,0,11225,11230,3,938,469,3,11226,11227,
        10,1,0,0,11227,11228,5,665,0,0,11228,11230,3,938,469,2,11229,11223,
        1,0,0,0,11229,11226,1,0,0,0,11230,11233,1,0,0,0,11231,11229,1,0,
        0,0,11231,11232,1,0,0,0,11232,939,1,0,0,0,11233,11231,1,0,0,0,11234,
        11235,5,320,0,0,11235,11236,5,1192,0,0,11236,11237,3,928,464,0,11237,
        11238,5,1193,0,0,11238,11300,1,0,0,0,11239,11300,3,1042,521,0,11240,
        11241,3,914,457,0,11241,11242,3,1214,607,0,11242,11243,3,914,457,
        0,11243,11300,1,0,0,0,11244,11245,3,914,457,0,11245,11246,5,1180,
        0,0,11246,11247,3,914,457,0,11247,11300,1,0,0,0,11248,11249,3,914,
        457,0,11249,11250,3,1214,607,0,11250,11251,7,135,0,0,11251,11252,
        5,1192,0,0,11252,11253,3,928,464,0,11253,11254,5,1193,0,0,11254,
        11300,1,0,0,0,11255,11259,3,914,457,0,11256,11258,5,614,0,0,11257,
        11256,1,0,0,0,11258,11261,1,0,0,0,11259,11257,1,0,0,0,11259,11260,
        1,0,0,0,11260,11262,1,0,0,0,11261,11259,1,0,0,0,11262,11263,5,92,
        0,0,11263,11264,3,914,457,0,11264,11265,5,37,0,0,11265,11266,3,914,
        457,0,11266,11300,1,0,0,0,11267,11271,3,914,457,0,11268,11270,5,
        614,0,0,11269,11268,1,0,0,0,11270,11273,1,0,0,0,11271,11269,1,0,
        0,0,11271,11272,1,0,0,0,11272,11274,1,0,0,0,11273,11271,1,0,0,0,
        11274,11275,5,442,0,0,11275,11278,5,1192,0,0,11276,11279,3,928,464,
        0,11277,11279,3,1110,555,0,11278,11276,1,0,0,0,11278,11277,1,0,0,
        0,11279,11280,1,0,0,0,11280,11281,5,1193,0,0,11281,11300,1,0,0,0,
        11282,11286,3,914,457,0,11283,11285,5,614,0,0,11284,11283,1,0,0,
        0,11285,11288,1,0,0,0,11286,11284,1,0,0,0,11286,11287,1,0,0,0,11287,
        11289,1,0,0,0,11288,11286,1,0,0,0,11289,11290,5,507,0,0,11290,11293,
        3,914,457,0,11291,11292,5,309,0,0,11292,11294,3,914,457,0,11293,
        11291,1,0,0,0,11293,11294,1,0,0,0,11294,11300,1,0,0,0,11295,11296,
        3,914,457,0,11296,11297,5,465,0,0,11297,11298,3,1178,589,0,11298,
        11300,1,0,0,0,11299,11234,1,0,0,0,11299,11239,1,0,0,0,11299,11240,
        1,0,0,0,11299,11244,1,0,0,0,11299,11248,1,0,0,0,11299,11255,1,0,
        0,0,11299,11267,1,0,0,0,11299,11282,1,0,0,0,11299,11295,1,0,0,0,
        11300,941,1,0,0,0,11301,11303,3,946,473,0,11302,11304,3,956,478,
        0,11303,11302,1,0,0,0,11303,11304,1,0,0,0,11304,11308,1,0,0,0,11305,
        11307,3,944,472,0,11306,11305,1,0,0,0,11307,11310,1,0,0,0,11308,
        11306,1,0,0,0,11308,11309,1,0,0,0,11309,11322,1,0,0,0,11310,11308,
        1,0,0,0,11311,11312,5,1192,0,0,11312,11313,3,942,471,0,11313,11319,
        5,1193,0,0,11314,11316,5,1019,0,0,11315,11317,5,22,0,0,11316,11315,
        1,0,0,0,11316,11317,1,0,0,0,11317,11318,1,0,0,0,11318,11320,3,942,
        471,0,11319,11314,1,0,0,0,11319,11320,1,0,0,0,11320,11322,1,0,0,
        0,11321,11301,1,0,0,0,11321,11311,1,0,0,0,11322,943,1,0,0,0,11323,
        11325,5,1019,0,0,11324,11326,5,22,0,0,11325,11324,1,0,0,0,11325,
        11326,1,0,0,0,11326,11330,1,0,0,0,11327,11330,5,314,0,0,11328,11330,
        5,461,0,0,11329,11323,1,0,0,0,11329,11327,1,0,0,0,11329,11328,1,
        0,0,0,11330,11336,1,0,0,0,11331,11337,3,946,473,0,11332,11333,5,
        1192,0,0,11333,11334,3,942,471,0,11334,11335,5,1193,0,0,11335,11337,
        1,0,0,0,11336,11331,1,0,0,0,11336,11332,1,0,0,0,11337,945,1,0,0,
        0,11338,11340,5,865,0,0,11339,11341,7,136,0,0,11340,11339,1,0,0,
        0,11340,11341,1,0,0,0,11341,11343,1,0,0,0,11342,11344,3,948,474,
        0,11343,11342,1,0,0,0,11343,11344,1,0,0,0,11344,11345,1,0,0,0,11345,
        11348,3,974,487,0,11346,11347,5,462,0,0,11347,11349,3,1150,575,0,
        11348,11346,1,0,0,0,11348,11349,1,0,0,0,11349,11352,1,0,0,0,11350,
        11351,5,378,0,0,11351,11353,3,986,493,0,11352,11350,1,0,0,0,11352,
        11353,1,0,0,0,11353,11356,1,0,0,0,11354,11355,5,1060,0,0,11355,11357,
        3,938,469,0,11356,11354,1,0,0,0,11356,11357,1,0,0,0,11357,11386,
        1,0,0,0,11358,11359,5,403,0,0,11359,11384,5,110,0,0,11360,11362,
        5,22,0,0,11361,11360,1,0,0,0,11361,11362,1,0,0,0,11362,11363,1,0,
        0,0,11363,11368,3,966,483,0,11364,11365,5,1194,0,0,11365,11367,3,
        966,483,0,11366,11364,1,0,0,0,11367,11370,1,0,0,0,11368,11366,1,
        0,0,0,11368,11369,1,0,0,0,11369,11385,1,0,0,0,11370,11368,1,0,0,
        0,11371,11372,5,404,0,0,11372,11373,5,889,0,0,11373,11374,5,1192,
        0,0,11374,11379,3,964,482,0,11375,11376,5,1194,0,0,11376,11378,3,
        964,482,0,11377,11375,1,0,0,0,11378,11381,1,0,0,0,11379,11377,1,
        0,0,0,11379,11380,1,0,0,0,11380,11382,1,0,0,0,11381,11379,1,0,0,
        0,11382,11383,5,1193,0,0,11383,11385,1,0,0,0,11384,11361,1,0,0,0,
        11384,11371,1,0,0,0,11385,11387,1,0,0,0,11386,11358,1,0,0,0,11386,
        11387,1,0,0,0,11387,11390,1,0,0,0,11388,11389,5,412,0,0,11389,11391,
        3,938,469,0,11390,11388,1,0,0,0,11390,11391,1,0,0,0,11391,947,1,
        0,0,0,11392,11395,5,987,0,0,11393,11396,3,950,475,0,11394,11396,
        3,952,476,0,11395,11393,1,0,0,0,11395,11394,1,0,0,0,11396,11399,
        1,0,0,0,11397,11398,5,1063,0,0,11398,11400,5,981,0,0,11399,11397,
        1,0,0,0,11399,11400,1,0,0,0,11400,949,1,0,0,0,11401,11402,7,137,
        0,0,11402,11409,5,695,0,0,11403,11404,5,1192,0,0,11404,11405,3,914,
        457,0,11405,11406,5,1193,0,0,11406,11407,5,695,0,0,11407,11409,1,
        0,0,0,11408,11401,1,0,0,0,11408,11403,1,0,0,0,11409,951,1,0,0,0,
        11410,11416,5,1168,0,0,11411,11412,5,1192,0,0,11412,11413,3,914,
        457,0,11413,11414,5,1193,0,0,11414,11416,1,0,0,0,11415,11410,1,0,
        0,0,11415,11411,1,0,0,0,11416,953,1,0,0,0,11417,11418,5,666,0,0,
        11418,11419,5,110,0,0,11419,11424,3,962,481,0,11420,11421,5,1194,
        0,0,11421,11423,3,962,481,0,11422,11420,1,0,0,0,11423,11426,1,0,
        0,0,11424,11422,1,0,0,0,11424,11425,1,0,0,0,11425,955,1,0,0,0,11426,
        11424,1,0,0,0,11427,11439,3,954,477,0,11428,11429,5,645,0,0,11429,
        11430,3,914,457,0,11430,11437,7,138,0,0,11431,11432,5,340,0,0,11432,
        11433,7,139,0,0,11433,11434,3,914,457,0,11434,11435,7,138,0,0,11435,
        11436,5,651,0,0,11436,11438,1,0,0,0,11437,11431,1,0,0,0,11437,11438,
        1,0,0,0,11438,11440,1,0,0,0,11439,11428,1,0,0,0,11439,11440,1,0,
        0,0,11440,957,1,0,0,0,11441,11442,5,363,0,0,11442,11531,5,105,0,
        0,11443,11444,5,363,0,0,11444,11452,5,1074,0,0,11445,11449,5,750,
        0,0,11446,11447,5,1192,0,0,11447,11448,5,1170,0,0,11448,11450,5,
        1193,0,0,11449,11446,1,0,0,0,11449,11450,1,0,0,0,11450,11453,1,0,
        0,0,11451,11453,5,69,0,0,11452,11445,1,0,0,0,11452,11451,1,0,0,0,
        11453,11457,1,0,0,0,11454,11456,3,960,480,0,11455,11454,1,0,0,0,
        11456,11459,1,0,0,0,11457,11455,1,0,0,0,11457,11458,1,0,0,0,11458,
        11470,1,0,0,0,11459,11457,1,0,0,0,11460,11468,5,1194,0,0,11461,11469,
        5,1075,0,0,11462,11466,5,1077,0,0,11463,11464,5,1192,0,0,11464,11465,
        5,1170,0,0,11465,11467,5,1193,0,0,11466,11463,1,0,0,0,11466,11467,
        1,0,0,0,11467,11469,1,0,0,0,11468,11461,1,0,0,0,11468,11462,1,0,
        0,0,11469,11471,1,0,0,0,11470,11460,1,0,0,0,11470,11471,1,0,0,0,
        11471,11477,1,0,0,0,11472,11473,5,1194,0,0,11473,11475,5,286,0,0,
        11474,11476,7,140,0,0,11475,11474,1,0,0,0,11475,11476,1,0,0,0,11476,
        11478,1,0,0,0,11477,11472,1,0,0,0,11477,11478,1,0,0,0,11478,11531,
        1,0,0,0,11479,11480,5,363,0,0,11480,11481,5,1074,0,0,11481,11485,
        5,326,0,0,11482,11484,3,960,480,0,11483,11482,1,0,0,0,11484,11487,
        1,0,0,0,11485,11483,1,0,0,0,11485,11486,1,0,0,0,11486,11490,1,0,
        0,0,11487,11485,1,0,0,0,11488,11489,5,1194,0,0,11489,11491,5,1075,
        0,0,11490,11488,1,0,0,0,11490,11491,1,0,0,0,11491,11531,1,0,0,0,
        11492,11493,5,363,0,0,11493,11494,5,1074,0,0,11494,11498,5,691,0,
        0,11495,11496,5,1192,0,0,11496,11497,5,1170,0,0,11497,11499,5,1193,
        0,0,11498,11495,1,0,0,0,11498,11499,1,0,0,0,11499,11503,1,0,0,0,
        11500,11502,3,960,480,0,11501,11500,1,0,0,0,11502,11505,1,0,0,0,
        11503,11501,1,0,0,0,11503,11504,1,0,0,0,11504,11511,1,0,0,0,11505,
        11503,1,0,0,0,11506,11507,5,1194,0,0,11507,11509,5,286,0,0,11508,
        11510,7,140,0,0,11509,11508,1,0,0,0,11509,11510,1,0,0,0,11510,11512,
        1,0,0,0,11511,11506,1,0,0,0,11511,11512,1,0,0,0,11512,11531,1,0,
        0,0,11513,11514,5,363,0,0,11514,11515,5,476,0,0,11515,11527,7,141,
        0,0,11516,11523,5,1194,0,0,11517,11518,5,821,0,0,11518,11519,5,1192,
        0,0,11519,11520,5,1170,0,0,11520,11524,5,1193,0,0,11521,11524,5,
        444,0,0,11522,11524,5,1066,0,0,11523,11517,1,0,0,0,11523,11521,1,
        0,0,0,11523,11522,1,0,0,0,11524,11526,1,0,0,0,11525,11516,1,0,0,
        0,11526,11529,1,0,0,0,11527,11525,1,0,0,0,11527,11528,1,0,0,0,11528,
        11531,1,0,0,0,11529,11527,1,0,0,0,11530,11441,1,0,0,0,11530,11443,
        1,0,0,0,11530,11479,1,0,0,0,11530,11492,1,0,0,0,11530,11513,1,0,
        0,0,11531,959,1,0,0,0,11532,11542,5,1194,0,0,11533,11534,5,95,0,
        0,11534,11543,5,88,0,0,11535,11543,5,1010,0,0,11536,11540,5,821,
        0,0,11537,11538,5,1192,0,0,11538,11539,5,1170,0,0,11539,11541,5,
        1193,0,0,11540,11537,1,0,0,0,11540,11541,1,0,0,0,11541,11543,1,0,
        0,0,11542,11533,1,0,0,0,11542,11535,1,0,0,0,11542,11536,1,0,0,0,
        11543,961,1,0,0,0,11544,11547,3,914,457,0,11545,11548,5,57,0,0,11546,
        11548,5,258,0,0,11547,11545,1,0,0,0,11547,11546,1,0,0,0,11547,11548,
        1,0,0,0,11548,963,1,0,0,0,11549,11551,5,1192,0,0,11550,11549,1,0,
        0,0,11550,11551,1,0,0,0,11551,11552,1,0,0,0,11552,11557,3,966,483,
        0,11553,11554,5,1194,0,0,11554,11556,3,966,483,0,11555,11553,1,0,
        0,0,11556,11559,1,0,0,0,11557,11555,1,0,0,0,11557,11558,1,0,0,0,
        11558,11561,1,0,0,0,11559,11557,1,0,0,0,11560,11562,5,1193,0,0,11561,
        11560,1,0,0,0,11561,11562,1,0,0,0,11562,11566,1,0,0,0,11563,11564,
        5,1192,0,0,11564,11566,5,1193,0,0,11565,11550,1,0,0,0,11565,11563,
        1,0,0,0,11566,965,1,0,0,0,11567,11568,3,914,457,0,11568,967,1,0,
        0,0,11569,11570,5,664,0,0,11570,11571,5,1192,0,0,11571,11576,3,970,
        485,0,11572,11573,5,1194,0,0,11573,11575,3,970,485,0,11574,11572,
        1,0,0,0,11575,11578,1,0,0,0,11576,11574,1,0,0,0,11576,11577,1,0,
        0,0,11577,11579,1,0,0,0,11578,11576,1,0,0,0,11579,11580,5,1193,0,
        0,11580,969,1,0,0,0,11581,11582,5,338,0,0,11582,11627,5,1168,0,0,
        11583,11584,7,142,0,0,11584,11627,5,403,0,0,11585,11586,7,143,0,
        0,11586,11627,5,1019,0,0,11587,11588,7,144,0,0,11588,11627,5,475,
        0,0,11589,11590,5,323,0,0,11590,11627,5,1052,0,0,11591,11592,5,364,
        0,0,11592,11627,5,666,0,0,11593,11627,5,434,0,0,11594,11595,5,484,
        0,0,11595,11627,5,708,0,0,11596,11597,5,486,0,0,11597,11627,5,708,
        0,0,11598,11599,5,538,0,0,11599,11627,5,1168,0,0,11600,11601,5,539,
        0,0,11601,11627,5,1168,0,0,11602,11603,5,662,0,0,11603,11604,5,363,
        0,0,11604,11605,5,1192,0,0,11605,11610,3,972,486,0,11606,11607,5,
        1194,0,0,11607,11609,3,972,486,0,11608,11606,1,0,0,0,11609,11612,
        1,0,0,0,11610,11608,1,0,0,0,11610,11611,1,0,0,0,11611,11613,1,0,
        0,0,11612,11610,1,0,0,0,11613,11614,5,1193,0,0,11614,11627,1,0,0,
        0,11615,11616,5,662,0,0,11616,11617,5,363,0,0,11617,11627,5,1021,
        0,0,11618,11619,5,681,0,0,11619,11627,7,87,0,0,11620,11627,5,769,
        0,0,11621,11622,5,818,0,0,11622,11627,5,708,0,0,11623,11624,5,1033,
        0,0,11624,11625,5,708,0,0,11625,11627,5,1170,0,0,11626,11581,1,0,
        0,0,11626,11583,1,0,0,0,11626,11585,1,0,0,0,11626,11587,1,0,0,0,
        11626,11589,1,0,0,0,11626,11591,1,0,0,0,11626,11593,1,0,0,0,11626,
        11594,1,0,0,0,11626,11596,1,0,0,0,11626,11598,1,0,0,0,11626,11600,
        1,0,0,0,11626,11602,1,0,0,0,11626,11615,1,0,0,0,11626,11618,1,0,
        0,0,11626,11620,1,0,0,0,11626,11621,1,0,0,0,11626,11623,1,0,0,0,
        11627,971,1,0,0,0,11628,11635,5,1166,0,0,11629,11636,5,1021,0,0,
        11630,11633,5,1174,0,0,11631,11634,3,1202,601,0,11632,11634,5,630,
        0,0,11633,11631,1,0,0,0,11633,11632,1,0,0,0,11634,11636,1,0,0,0,
        11635,11629,1,0,0,0,11635,11630,1,0,0,0,11636,973,1,0,0,0,11637,
        11642,3,984,492,0,11638,11639,5,1194,0,0,11639,11641,3,984,492,0,
        11640,11638,1,0,0,0,11641,11644,1,0,0,0,11642,11640,1,0,0,0,11642,
        11643,1,0,0,0,11643,975,1,0,0,0,11644,11642,1,0,0,0,11645,11646,
        5,1192,0,0,11646,11651,3,760,380,0,11647,11648,5,1194,0,0,11648,
        11650,3,760,380,0,11649,11647,1,0,0,0,11650,11653,1,0,0,0,11651,
        11649,1,0,0,0,11651,11652,1,0,0,0,11652,11654,1,0,0,0,11653,11651,
        1,0,0,0,11654,11655,5,1193,0,0,11655,977,1,0,0,0,11656,11657,3,1150,
        575,0,11657,11658,5,1187,0,0,11658,11660,1,0,0,0,11659,11656,1,0,
        0,0,11659,11660,1,0,0,0,11660,11661,1,0,0,0,11661,11666,5,1198,0,
        0,11662,11663,7,145,0,0,11663,11664,5,1187,0,0,11664,11666,5,1198,
        0,0,11665,11659,1,0,0,0,11665,11662,1,0,0,0,11666,979,1,0,0,0,11667,
        11668,3,1208,604,0,11668,11669,5,1187,0,0,11669,11670,3,1208,604,
        0,11670,11672,3,976,488,0,11671,11673,3,1086,543,0,11672,11671,1,
        0,0,0,11672,11673,1,0,0,0,11673,11684,1,0,0,0,11674,11675,3,1208,
        604,0,11675,11676,5,1197,0,0,11676,11678,3,1208,604,0,11677,11679,
        3,976,488,0,11678,11677,1,0,0,0,11678,11679,1,0,0,0,11679,11681,
        1,0,0,0,11680,11682,3,1086,543,0,11681,11680,1,0,0,0,11681,11682,
        1,0,0,0,11682,11684,1,0,0,0,11683,11667,1,0,0,0,11683,11674,1,0,
        0,0,11684,981,1,0,0,0,11685,11686,3,1106,553,0,11686,11687,5,1174,
        0,0,11687,11688,3,914,457,0,11688,11694,1,0,0,0,11689,11691,3,914,
        457,0,11690,11692,3,1086,543,0,11691,11690,1,0,0,0,11691,11692,1,
        0,0,0,11692,11694,1,0,0,0,11693,11685,1,0,0,0,11693,11689,1,0,0,
        0,11694,983,1,0,0,0,11695,11705,3,978,489,0,11696,11705,3,980,490,
        0,11697,11700,5,1166,0,0,11698,11701,3,1216,608,0,11699,11701,5,
        1174,0,0,11700,11698,1,0,0,0,11700,11699,1,0,0,0,11701,11702,1,0,
        0,0,11702,11705,3,914,457,0,11703,11705,3,982,491,0,11704,11695,
        1,0,0,0,11704,11696,1,0,0,0,11704,11697,1,0,0,0,11704,11703,1,0,
        0,0,11705,985,1,0,0,0,11706,11716,3,988,494,0,11707,11712,3,990,
        495,0,11708,11709,5,1194,0,0,11709,11711,3,990,495,0,11710,11708,
        1,0,0,0,11711,11714,1,0,0,0,11712,11710,1,0,0,0,11712,11713,1,0,
        0,0,11713,11716,1,0,0,0,11714,11712,1,0,0,0,11715,11706,1,0,0,0,
        11715,11707,1,0,0,0,11716,987,1,0,0,0,11717,11720,3,990,495,0,11718,
        11719,5,1194,0,0,11719,11721,3,990,495,0,11720,11718,1,0,0,0,11721,
        11722,1,0,0,0,11722,11720,1,0,0,0,11722,11723,1,0,0,0,11723,989,
        1,0,0,0,11724,11728,3,992,496,0,11725,11727,3,1012,506,0,11726,11725,
        1,0,0,0,11727,11730,1,0,0,0,11728,11726,1,0,0,0,11728,11729,1,0,
        0,0,11729,991,1,0,0,0,11730,11728,1,0,0,0,11731,11732,3,1148,574,
        0,11732,11733,3,1094,547,0,11733,11734,3,1088,544,0,11734,11800,
        1,0,0,0,11735,11737,3,1148,574,0,11736,11738,3,1088,544,0,11737,
        11736,1,0,0,0,11737,11738,1,0,0,0,11738,11742,1,0,0,0,11739,11743,
        3,1092,546,0,11740,11743,3,1094,547,0,11741,11743,3,1096,548,0,11742,
        11739,1,0,0,0,11742,11740,1,0,0,0,11742,11741,1,0,0,0,11742,11743,
        1,0,0,0,11743,11800,1,0,0,0,11744,11746,3,1030,515,0,11745,11747,
        3,1088,544,0,11746,11745,1,0,0,0,11746,11747,1,0,0,0,11747,11800,
        1,0,0,0,11748,11749,5,1192,0,0,11749,11750,3,1034,517,0,11750,11755,
        5,1193,0,0,11751,11753,3,1088,544,0,11752,11754,3,1104,552,0,11753,
        11752,1,0,0,0,11753,11754,1,0,0,0,11754,11756,1,0,0,0,11755,11751,
        1,0,0,0,11755,11756,1,0,0,0,11756,11800,1,0,0,0,11757,11759,3,1006,
        503,0,11758,11760,3,1088,544,0,11759,11758,1,0,0,0,11759,11760,1,
        0,0,0,11760,11800,1,0,0,0,11761,11766,3,1080,540,0,11762,11764,3,
        1088,544,0,11763,11765,3,1104,552,0,11764,11763,1,0,0,0,11764,11765,
        1,0,0,0,11765,11767,1,0,0,0,11766,11762,1,0,0,0,11766,11767,1,0,
        0,0,11767,11800,1,0,0,0,11768,11773,3,1036,518,0,11769,11771,3,1088,
        544,0,11770,11772,3,1104,552,0,11771,11770,1,0,0,0,11771,11772,1,
        0,0,0,11772,11774,1,0,0,0,11773,11769,1,0,0,0,11773,11774,1,0,0,
        0,11774,11800,1,0,0,0,11775,11777,5,1166,0,0,11776,11778,3,1088,
        544,0,11777,11776,1,0,0,0,11777,11778,1,0,0,0,11778,11800,1,0,0,
        0,11779,11780,5,1166,0,0,11780,11781,5,1187,0,0,11781,11786,3,1036,
        518,0,11782,11784,3,1088,544,0,11783,11785,3,1104,552,0,11784,11783,
        1,0,0,0,11784,11785,1,0,0,0,11785,11787,1,0,0,0,11786,11782,1,0,
        0,0,11786,11787,1,0,0,0,11787,11800,1,0,0,0,11788,11800,3,994,497,
        0,11789,11800,3,996,498,0,11790,11791,5,1197,0,0,11791,11793,3,1036,
        518,0,11792,11794,3,1088,544,0,11793,11792,1,0,0,0,11793,11794,1,
        0,0,0,11794,11800,1,0,0,0,11795,11796,5,1192,0,0,11796,11797,3,990,
        495,0,11797,11798,5,1193,0,0,11798,11800,1,0,0,0,11799,11731,1,0,
        0,0,11799,11735,1,0,0,0,11799,11744,1,0,0,0,11799,11748,1,0,0,0,
        11799,11757,1,0,0,0,11799,11761,1,0,0,0,11799,11768,1,0,0,0,11799,
        11775,1,0,0,0,11799,11779,1,0,0,0,11799,11788,1,0,0,0,11799,11789,
        1,0,0,0,11799,11790,1,0,0,0,11799,11795,1,0,0,0,11800,993,1,0,0,
        0,11801,11802,5,658,0,0,11802,11803,5,1192,0,0,11803,11804,3,914,
        457,0,11804,11805,5,1194,0,0,11805,11808,3,914,457,0,11806,11807,
        5,1194,0,0,11807,11809,3,914,457,0,11808,11806,1,0,0,0,11808,11809,
        1,0,0,0,11809,11810,1,0,0,0,11810,11816,5,1193,0,0,11811,11812,5,
        1063,0,0,11812,11813,5,1192,0,0,11813,11814,3,1002,501,0,11814,11815,
        5,1193,0,0,11815,11817,1,0,0,0,11816,11811,1,0,0,0,11816,11817,1,
        0,0,0,11817,11819,1,0,0,0,11818,11820,3,1088,544,0,11819,11818,1,
        0,0,0,11819,11820,1,0,0,0,11820,995,1,0,0,0,11821,11822,5,655,0,
        0,11822,11823,5,1192,0,0,11823,11826,3,914,457,0,11824,11825,5,1194,
        0,0,11825,11827,3,914,457,0,11826,11824,1,0,0,0,11826,11827,1,0,
        0,0,11827,11828,1,0,0,0,11828,11834,5,1193,0,0,11829,11830,5,1063,
        0,0,11830,11831,5,1192,0,0,11831,11832,3,998,499,0,11832,11833,5,
        1193,0,0,11833,11835,1,0,0,0,11834,11829,1,0,0,0,11834,11835,1,0,
        0,0,11835,11837,1,0,0,0,11836,11838,3,1088,544,0,11837,11836,1,0,
        0,0,11837,11838,1,0,0,0,11838,997,1,0,0,0,11839,11844,3,1000,500,
        0,11840,11841,5,1194,0,0,11841,11843,3,1000,500,0,11842,11840,1,
        0,0,0,11843,11846,1,0,0,0,11844,11842,1,0,0,0,11844,11845,1,0,0,
        0,11845,999,1,0,0,0,11846,11844,1,0,0,0,11847,11850,3,1004,502,0,
        11848,11849,5,56,0,0,11849,11851,5,476,0,0,11850,11848,1,0,0,0,11850,
        11851,1,0,0,0,11851,1001,1,0,0,0,11852,11857,3,1004,502,0,11853,
        11854,5,1194,0,0,11854,11856,3,1004,502,0,11855,11853,1,0,0,0,11856,
        11859,1,0,0,0,11857,11855,1,0,0,0,11857,11858,1,0,0,0,11858,1003,
        1,0,0,0,11859,11857,1,0,0,0,11860,11861,3,1208,604,0,11861,11863,
        3,1200,600,0,11862,11864,5,1170,0,0,11863,11862,1,0,0,0,11863,11864,
        1,0,0,0,11864,1005,1,0,0,0,11865,11868,3,1008,504,0,11866,11868,
        3,1010,505,0,11867,11865,1,0,0,0,11867,11866,1,0,0,0,11868,1007,
        1,0,0,0,11869,11870,5,126,0,0,11870,11871,5,1192,0,0,11871,11872,
        5,125,0,0,11872,11873,3,1150,575,0,11873,11874,5,1194,0,0,11874,
        11875,7,146,0,0,11875,11876,5,1193,0,0,11876,1009,1,0,0,0,11877,
        11878,5,126,0,0,11878,11879,5,1192,0,0,11879,11880,5,1050,0,0,11880,
        11881,3,1150,575,0,11881,11882,5,1194,0,0,11882,11883,3,1028,514,
        0,11883,11884,5,1194,0,0,11884,11885,3,974,487,0,11885,11886,5,1193,
        0,0,11886,1011,1,0,0,0,11887,11893,3,1014,507,0,11888,11893,3,1016,
        508,0,11889,11893,3,1018,509,0,11890,11893,3,1020,510,0,11891,11893,
        3,1022,511,0,11892,11887,1,0,0,0,11892,11888,1,0,0,0,11892,11889,
        1,0,0,0,11892,11890,1,0,0,0,11892,11891,1,0,0,0,11893,1013,1,0,0,
        0,11894,11896,5,454,0,0,11895,11894,1,0,0,0,11895,11896,1,0,0,0,
        11896,11902,1,0,0,0,11897,11899,7,147,0,0,11898,11900,5,670,0,0,
        11899,11898,1,0,0,0,11899,11900,1,0,0,0,11900,11902,1,0,0,0,11901,
        11895,1,0,0,0,11901,11897,1,0,0,0,11902,11904,1,0,0,0,11903,11905,
        7,148,0,0,11904,11903,1,0,0,0,11904,11905,1,0,0,0,11905,11906,1,
        0,0,0,11906,11907,5,475,0,0,11907,11908,3,990,495,0,11908,11909,
        5,649,0,0,11909,11910,3,938,469,0,11910,1015,1,0,0,0,11911,11912,
        5,201,0,0,11912,11913,5,475,0,0,11913,11914,3,992,496,0,11914,1017,
        1,0,0,0,11915,11916,7,149,0,0,11916,11917,5,52,0,0,11917,11918,3,
        992,496,0,11918,1019,1,0,0,0,11919,11920,5,707,0,0,11920,11921,3,
        1024,512,0,11921,11922,3,1088,544,0,11922,1021,1,0,0,0,11923,11924,
        5,1025,0,0,11924,11925,3,1026,513,0,11925,11926,3,1088,544,0,11926,
        1023,1,0,0,0,11927,11928,5,1192,0,0,11928,11929,3,1114,557,0,11929,
        11930,5,363,0,0,11930,11931,3,1162,581,0,11931,11932,5,442,0,0,11932,
        11933,3,1104,552,0,11933,11934,5,1193,0,0,11934,1025,1,0,0,0,11935,
        11936,5,1192,0,0,11936,11937,3,914,457,0,11937,11938,5,363,0,0,11938,
        11939,3,1162,581,0,11939,11940,5,442,0,0,11940,11941,5,1192,0,0,
        11941,11942,3,1028,514,0,11942,11943,5,1193,0,0,11943,11944,5,1193,
        0,0,11944,1027,1,0,0,0,11945,11950,3,1162,581,0,11946,11947,5,1194,
        0,0,11947,11949,3,1162,581,0,11948,11946,1,0,0,0,11949,11952,1,0,
        0,0,11950,11948,1,0,0,0,11950,11951,1,0,0,0,11951,1029,1,0,0,0,11952,
        11950,1,0,0,0,11953,11954,5,657,0,0,11954,11955,5,1192,0,0,11955,
        11956,5,1170,0,0,11956,11957,5,1194,0,0,11957,11958,5,1170,0,0,11958,
        11959,5,1194,0,0,11959,11960,5,1170,0,0,11960,11980,5,1193,0,0,11961,
        11962,5,657,0,0,11962,11963,5,1192,0,0,11963,11964,5,108,0,0,11964,
        11965,5,1170,0,0,11965,11975,5,1194,0,0,11966,11971,3,1032,516,0,
        11967,11968,5,1194,0,0,11968,11970,3,1032,516,0,11969,11967,1,0,
        0,0,11970,11973,1,0,0,0,11971,11969,1,0,0,0,11971,11972,1,0,0,0,
        11972,11976,1,0,0,0,11973,11971,1,0,0,0,11974,11976,3,1208,604,0,
        11975,11966,1,0,0,0,11975,11974,1,0,0,0,11976,11977,1,0,0,0,11977,
        11978,5,1193,0,0,11978,11980,1,0,0,0,11979,11953,1,0,0,0,11979,11961,
        1,0,0,0,11980,1031,1,0,0,0,11981,11982,3,1208,604,0,11982,11983,
        5,1174,0,0,11983,11984,7,31,0,0,11984,1033,1,0,0,0,11985,12004,3,
        928,464,0,11986,11987,5,1192,0,0,11987,11993,3,928,464,0,11988,11989,
        5,1019,0,0,11989,11990,5,22,0,0,11990,11992,3,928,464,0,11991,11988,
        1,0,0,0,11992,11995,1,0,0,0,11993,11991,1,0,0,0,11993,11994,1,0,
        0,0,11994,11996,1,0,0,0,11995,11993,1,0,0,0,11996,11997,5,1193,0,
        0,11997,12004,1,0,0,0,11998,12004,3,1108,554,0,11999,12000,5,1192,
        0,0,12000,12001,3,1108,554,0,12001,12002,5,1193,0,0,12002,12004,
        1,0,0,0,12003,11985,1,0,0,0,12003,11986,1,0,0,0,12003,11998,1,0,
        0,0,12003,11999,1,0,0,0,12004,1035,1,0,0,0,12005,12020,3,1112,556,
        0,12006,12020,3,1114,557,0,12007,12020,3,1116,558,0,12008,12020,
        3,1048,524,0,12009,12010,3,1180,590,0,12010,12012,5,1192,0,0,12011,
        12013,3,1110,555,0,12012,12011,1,0,0,0,12012,12013,1,0,0,0,12013,
        12014,1,0,0,0,12014,12015,5,1193,0,0,12015,12020,1,0,0,0,12016,12020,
        3,1040,520,0,12017,12020,3,1038,519,0,12018,12020,3,1078,539,0,12019,
        12005,1,0,0,0,12019,12006,1,0,0,0,12019,12007,1,0,0,0,12019,12008,
        1,0,0,0,12019,12009,1,0,0,0,12019,12016,1,0,0,0,12019,12017,1,0,
        0,0,12019,12018,1,0,0,0,12020,1037,1,0,0,0,12021,12022,3,1208,604,
        0,12022,12023,5,1187,0,0,12023,12025,1,0,0,0,12024,12021,1,0,0,0,
        12024,12025,1,0,0,0,12025,12026,1,0,0,0,12026,12027,5,276,0,0,12027,
        12028,5,1187,0,0,12028,12029,3,1208,604,0,12029,12030,5,1192,0,0,
        12030,12031,3,914,457,0,12031,12032,5,1193,0,0,12032,1039,1,0,0,
        0,12033,12034,7,150,0,0,12034,12035,5,1192,0,0,12035,12036,3,1150,
        575,0,12036,12050,5,1194,0,0,12037,12051,3,1162,581,0,12038,12039,
        5,1192,0,0,12039,12044,3,1162,581,0,12040,12041,5,1194,0,0,12041,
        12043,3,1162,581,0,12042,12040,1,0,0,0,12043,12046,1,0,0,0,12044,
        12042,1,0,0,0,12044,12045,1,0,0,0,12045,12047,1,0,0,0,12046,12044,
        1,0,0,0,12047,12048,5,1193,0,0,12048,12051,1,0,0,0,12049,12051,5,
        1198,0,0,12050,12037,1,0,0,0,12050,12038,1,0,0,0,12050,12049,1,0,
        0,0,12051,12052,1,0,0,0,12052,12053,5,1194,0,0,12053,12057,3,914,
        457,0,12054,12055,5,1194,0,0,12055,12056,5,497,0,0,12056,12058,3,
        914,457,0,12057,12054,1,0,0,0,12057,12058,1,0,0,0,12058,12061,1,
        0,0,0,12059,12060,5,1194,0,0,12060,12062,3,914,457,0,12061,12059,
        1,0,0,0,12061,12062,1,0,0,0,12062,12063,1,0,0,0,12063,12064,5,1193,
        0,0,12064,12102,1,0,0,0,12065,12066,7,151,0,0,12066,12067,5,1192,
        0,0,12067,12068,3,1150,575,0,12068,12082,5,1194,0,0,12069,12083,
        3,1162,581,0,12070,12071,5,1192,0,0,12071,12076,3,1162,581,0,12072,
        12073,5,1194,0,0,12073,12075,3,1162,581,0,12074,12072,1,0,0,0,12075,
        12078,1,0,0,0,12076,12074,1,0,0,0,12076,12077,1,0,0,0,12077,12079,
        1,0,0,0,12078,12076,1,0,0,0,12079,12080,5,1193,0,0,12080,12083,1,
        0,0,0,12081,12083,5,1198,0,0,12082,12069,1,0,0,0,12082,12070,1,0,
        0,0,12082,12081,1,0,0,0,12083,12084,1,0,0,0,12084,12085,5,1194,0,
        0,12085,12086,3,914,457,0,12086,12087,5,1193,0,0,12087,12102,1,0,
        0,0,12088,12089,5,868,0,0,12089,12090,5,1192,0,0,12090,12091,3,1150,
        575,0,12091,12092,5,1194,0,0,12092,12093,3,1162,581,0,12093,12094,
        5,1194,0,0,12094,12095,3,914,457,0,12095,12096,5,1194,0,0,12096,
        12097,3,1162,581,0,12097,12098,5,1194,0,0,12098,12099,3,914,457,
        0,12099,12100,5,1193,0,0,12100,12102,1,0,0,0,12101,12033,1,0,0,0,
        12101,12065,1,0,0,0,12101,12088,1,0,0,0,12102,1041,1,0,0,0,12103,
        12104,5,179,0,0,12104,12125,5,1192,0,0,12105,12126,3,1162,581,0,
        12106,12107,5,1192,0,0,12107,12112,3,1162,581,0,12108,12109,5,1194,
        0,0,12109,12111,3,1162,581,0,12110,12108,1,0,0,0,12111,12114,1,0,
        0,0,12112,12110,1,0,0,0,12112,12113,1,0,0,0,12113,12115,1,0,0,0,
        12114,12112,1,0,0,0,12115,12116,5,1193,0,0,12116,12126,1,0,0,0,12117,
        12126,5,1198,0,0,12118,12119,5,732,0,0,12119,12120,5,1192,0,0,12120,
        12121,3,1162,581,0,12121,12122,5,1194,0,0,12122,12123,3,914,457,
        0,12123,12124,5,1193,0,0,12124,12126,1,0,0,0,12125,12105,1,0,0,0,
        12125,12106,1,0,0,0,12125,12117,1,0,0,0,12125,12118,1,0,0,0,12126,
        12127,1,0,0,0,12127,12128,5,1194,0,0,12128,12129,3,914,457,0,12129,
        12130,5,1193,0,0,12130,12160,1,0,0,0,12131,12132,5,376,0,0,12132,
        12133,5,1192,0,0,12133,12134,3,1150,575,0,12134,12148,5,1194,0,0,
        12135,12149,3,1162,581,0,12136,12137,5,1192,0,0,12137,12142,3,1162,
        581,0,12138,12139,5,1194,0,0,12139,12141,3,1162,581,0,12140,12138,
        1,0,0,0,12141,12144,1,0,0,0,12142,12140,1,0,0,0,12142,12143,1,0,
        0,0,12143,12145,1,0,0,0,12144,12142,1,0,0,0,12145,12146,5,1193,0,
        0,12146,12149,1,0,0,0,12147,12149,5,1198,0,0,12148,12135,1,0,0,0,
        12148,12136,1,0,0,0,12148,12147,1,0,0,0,12149,12150,1,0,0,0,12150,
        12151,5,1194,0,0,12151,12155,3,914,457,0,12152,12153,5,1194,0,0,
        12153,12154,5,497,0,0,12154,12156,3,914,457,0,12155,12152,1,0,0,
        0,12155,12156,1,0,0,0,12156,12157,1,0,0,0,12157,12158,5,1193,0,0,
        12158,12160,1,0,0,0,12159,12103,1,0,0,0,12159,12131,1,0,0,0,12160,
        1043,1,0,0,0,12161,12162,3,914,457,0,12162,12163,5,1196,0,0,12163,
        12164,3,914,457,0,12164,1045,1,0,0,0,12165,12166,7,152,0,0,12166,
        12167,5,649,0,0,12167,12168,5,630,0,0,12168,1047,1,0,0,0,12169,12170,
        5,53,0,0,12170,12171,5,1192,0,0,12171,13516,5,1193,0,0,12172,12173,
        5,50,0,0,12173,12174,5,1192,0,0,12174,12175,3,914,457,0,12175,12176,
        5,1194,0,0,12176,12177,3,914,457,0,12177,12178,5,1194,0,0,12178,
        12179,3,914,457,0,12179,12180,5,1193,0,0,12180,13516,1,0,0,0,12181,
        12182,5,51,0,0,12182,12183,5,1192,0,0,12183,12184,3,914,457,0,12184,
        12185,5,1194,0,0,12185,12186,3,914,457,0,12186,12187,5,1194,0,0,
        12187,12188,3,914,457,0,12188,12189,5,1194,0,0,12189,12190,3,914,
        457,0,12190,12191,5,1193,0,0,12191,13516,1,0,0,0,12192,12193,5,60,
        0,0,12193,12194,5,1192,0,0,12194,12195,3,914,457,0,12195,12196,5,
        1194,0,0,12196,12197,3,914,457,0,12197,12198,5,1193,0,0,12198,13516,
        1,0,0,0,12199,12200,5,160,0,0,12200,12201,5,1192,0,0,12201,12202,
        3,914,457,0,12202,12203,5,1194,0,0,12203,12204,3,914,457,0,12204,
        12205,5,1193,0,0,12205,13516,1,0,0,0,12206,12207,5,161,0,0,12207,
        12208,5,1192,0,0,12208,12209,3,914,457,0,12209,12210,5,1194,0,0,
        12210,12211,3,914,457,0,12211,12212,5,1193,0,0,12212,13516,1,0,0,
        0,12213,12214,5,154,0,0,12214,12215,5,1192,0,0,12215,12216,3,914,
        457,0,12216,12217,5,1194,0,0,12217,12218,3,914,457,0,12218,12219,
        5,1194,0,0,12219,12220,3,914,457,0,12220,12221,5,1193,0,0,12221,
        13516,1,0,0,0,12222,12223,5,218,0,0,12223,12224,5,1192,0,0,12224,
        12225,3,914,457,0,12225,12226,5,1194,0,0,12226,12227,3,914,457,0,
        12227,12228,5,1193,0,0,12228,13516,1,0,0,0,12229,12230,5,236,0,0,
        12230,12232,5,1192,0,0,12231,12233,3,914,457,0,12232,12231,1,0,0,
        0,12232,12233,1,0,0,0,12233,12234,1,0,0,0,12234,13516,5,1193,0,0,
        12235,12236,5,237,0,0,12236,12238,5,1192,0,0,12237,12239,3,914,457,
        0,12238,12237,1,0,0,0,12238,12239,1,0,0,0,12239,12240,1,0,0,0,12240,
        13516,5,1193,0,0,12241,12242,5,353,0,0,12242,12243,5,1192,0,0,12243,
        12244,3,914,457,0,12244,12245,5,1193,0,0,12245,13516,1,0,0,0,12246,
        12247,5,354,0,0,12247,12248,5,1192,0,0,12248,12249,3,914,457,0,12249,
        12250,5,1193,0,0,12250,13516,1,0,0,0,12251,12252,5,355,0,0,12252,
        12253,5,1192,0,0,12253,12254,3,914,457,0,12254,12255,5,1193,0,0,
        12255,13516,1,0,0,0,12256,12257,5,344,0,0,12257,12258,5,1192,0,0,
        12258,12259,3,914,457,0,12259,12260,5,1193,0,0,12260,13516,1,0,0,
        0,12261,12262,5,345,0,0,12262,12263,5,1192,0,0,12263,12264,3,914,
        457,0,12264,12265,5,1193,0,0,12265,13516,1,0,0,0,12266,12267,5,343,
        0,0,12267,12268,5,1192,0,0,12268,12269,3,914,457,0,12269,12270,5,
        1194,0,0,12270,12271,3,914,457,0,12271,12272,5,1193,0,0,12272,13516,
        1,0,0,0,12273,12274,5,349,0,0,12274,12275,5,1192,0,0,12275,12276,
        3,914,457,0,12276,12277,5,1194,0,0,12277,12278,3,914,457,0,12278,
        12279,5,1193,0,0,12279,13516,1,0,0,0,12280,12281,5,350,0,0,12281,
        12282,5,1192,0,0,12282,12283,3,914,457,0,12283,12284,5,1194,0,0,
        12284,12285,3,914,457,0,12285,12286,5,1193,0,0,12286,13516,1,0,0,
        0,12287,12288,5,382,0,0,12288,12289,5,1192,0,0,12289,12290,3,914,
        457,0,12290,12291,5,1194,0,0,12291,12292,3,914,457,0,12292,12293,
        5,1193,0,0,12293,13516,1,0,0,0,12294,12295,5,383,0,0,12295,12296,
        5,1192,0,0,12296,12297,3,914,457,0,12297,12298,5,1193,0,0,12298,
        13516,1,0,0,0,12299,12300,5,450,0,0,12300,12301,5,1192,0,0,12301,
        12302,3,914,457,0,12302,12303,5,1194,0,0,12303,12304,3,914,457,0,
        12304,12305,5,1194,0,0,12305,12306,3,914,457,0,12306,12307,5,1193,
        0,0,12307,13516,1,0,0,0,12308,12309,5,448,0,0,12309,12310,5,1192,
        0,0,12310,12311,3,914,457,0,12311,12312,5,1194,0,0,12312,12313,3,
        914,457,0,12313,12314,5,1194,0,0,12314,12315,3,914,457,0,12315,12316,
        5,1194,0,0,12316,12317,3,914,457,0,12317,12318,5,1193,0,0,12318,
        13516,1,0,0,0,12319,12320,5,449,0,0,12320,12321,5,1192,0,0,12321,
        12322,3,914,457,0,12322,12323,5,1194,0,0,12323,12324,3,914,457,0,
        12324,12325,5,1194,0,0,12325,12326,3,914,457,0,12326,12327,5,1193,
        0,0,12327,13516,1,0,0,0,12328,12329,5,595,0,0,12329,12330,5,1041,
        0,0,12330,12331,5,363,0,0,12331,12337,3,1150,575,0,12332,12333,5,
        672,0,0,12333,12334,5,1192,0,0,12334,12335,3,954,477,0,12335,12336,
        5,1193,0,0,12336,12338,1,0,0,0,12337,12332,1,0,0,0,12337,12338,1,
        0,0,0,12338,13516,1,0,0,0,12339,12340,5,638,0,0,12340,12341,5,1192,
        0,0,12341,12342,3,914,457,0,12342,12343,5,1193,0,0,12343,13516,1,
        0,0,0,12344,12345,5,639,0,0,12345,12346,5,1192,0,0,12346,12349,3,
        914,457,0,12347,12348,5,1194,0,0,12348,12350,3,914,457,0,12349,12347,
        1,0,0,0,12349,12350,1,0,0,0,12350,12351,1,0,0,0,12351,12352,5,1193,
        0,0,12352,13516,1,0,0,0,12353,12354,5,640,0,0,12354,12355,5,1192,
        0,0,12355,12358,3,914,457,0,12356,12357,5,1194,0,0,12357,12359,3,
        914,457,0,12358,12356,1,0,0,0,12358,12359,1,0,0,0,12359,12360,1,
        0,0,0,12360,12361,5,1193,0,0,12361,13516,1,0,0,0,12362,12363,5,641,
        0,0,12363,12364,5,1192,0,0,12364,12367,3,914,457,0,12365,12366,5,
        1194,0,0,12366,12368,3,914,457,0,12367,12365,1,0,0,0,12367,12368,
        1,0,0,0,12368,12369,1,0,0,0,12369,12370,5,1193,0,0,12370,13516,1,
        0,0,0,12371,12372,5,636,0,0,12372,12373,5,1192,0,0,12373,12374,3,
        914,457,0,12374,12375,5,1194,0,0,12375,12376,3,914,457,0,12376,12377,
        5,1193,0,0,12377,13516,1,0,0,0,12378,12379,5,637,0,0,12379,12380,
        5,1192,0,0,12380,12381,3,914,457,0,12381,12382,5,1194,0,0,12382,
        12383,3,914,457,0,12383,12384,5,1193,0,0,12384,13516,1,0,0,0,12385,
        12386,5,667,0,0,12386,12387,5,1192,0,0,12387,13516,5,1193,0,0,12388,
        12389,5,684,0,0,12389,12390,5,1192,0,0,12390,12391,3,914,457,0,12391,
        12392,5,1194,0,0,12392,12393,3,914,457,0,12393,12394,5,1193,0,0,
        12394,13516,1,0,0,0,12395,12396,5,846,0,0,12396,12398,5,1192,0,0,
        12397,12399,3,914,457,0,12398,12397,1,0,0,0,12398,12399,1,0,0,0,
        12399,12400,1,0,0,0,12400,13516,5,1193,0,0,12401,12402,5,847,0,0,
        12402,12404,5,1192,0,0,12403,12405,3,914,457,0,12404,12403,1,0,0,
        0,12404,12405,1,0,0,0,12405,12406,1,0,0,0,12406,13516,5,1193,0,0,
        12407,12408,5,850,0,0,12408,12409,5,1192,0,0,12409,13516,5,1193,
        0,0,12410,12411,5,877,0,0,12411,12412,5,1192,0,0,12412,12413,3,914,
        457,0,12413,12414,5,1193,0,0,12414,13516,1,0,0,0,12415,12416,5,935,
        0,0,12416,12417,5,1192,0,0,12417,12418,3,914,457,0,12418,12419,5,
        1194,0,0,12419,12420,3,914,457,0,12420,12421,5,1193,0,0,12421,13516,
        1,0,0,0,12422,12423,5,1012,0,0,12423,12424,5,1192,0,0,12424,12425,
        3,914,457,0,12425,12426,5,1193,0,0,12426,13516,1,0,0,0,12427,12428,
        5,1013,0,0,12428,12429,5,1192,0,0,12429,12430,3,914,457,0,12430,
        12431,5,1193,0,0,12431,13516,1,0,0,0,12432,12433,5,1011,0,0,12433,
        12434,5,1192,0,0,12434,12435,3,914,457,0,12435,12436,5,1194,0,0,
        12436,12437,3,914,457,0,12437,12438,5,1193,0,0,12438,13516,1,0,0,
        0,12439,12440,5,58,0,0,12440,12441,5,1192,0,0,12441,12442,3,914,
        457,0,12442,12443,5,1193,0,0,12443,13516,1,0,0,0,12444,12445,5,129,
        0,0,12445,12446,5,1192,0,0,12446,12447,3,914,457,0,12447,12448,5,
        1193,0,0,12448,13516,1,0,0,0,12449,12450,5,130,0,0,12450,12451,5,
        1192,0,0,12451,12452,3,914,457,0,12452,12453,5,1194,0,0,12453,12456,
        3,914,457,0,12454,12455,5,1194,0,0,12455,12457,3,914,457,0,12456,
        12454,1,0,0,0,12456,12457,1,0,0,0,12457,12458,1,0,0,0,12458,12459,
        5,1193,0,0,12459,13516,1,0,0,0,12460,12461,5,170,0,0,12461,12462,
        5,1192,0,0,12462,12463,3,914,457,0,12463,12464,5,1194,0,0,12464,
        12469,3,914,457,0,12465,12466,5,1194,0,0,12466,12468,3,914,457,0,
        12467,12465,1,0,0,0,12468,12471,1,0,0,0,12469,12467,1,0,0,0,12469,
        12470,1,0,0,0,12470,12472,1,0,0,0,12471,12469,1,0,0,0,12472,12473,
        5,1193,0,0,12473,13516,1,0,0,0,12474,12475,5,172,0,0,12475,12476,
        5,1192,0,0,12476,12477,3,914,457,0,12477,12478,5,1194,0,0,12478,
        12479,3,914,457,0,12479,12480,5,1194,0,0,12480,12485,3,914,457,0,
        12481,12482,5,1194,0,0,12482,12484,3,914,457,0,12483,12481,1,0,0,
        0,12484,12487,1,0,0,0,12485,12483,1,0,0,0,12485,12486,1,0,0,0,12486,
        12488,1,0,0,0,12487,12485,1,0,0,0,12488,12489,5,1193,0,0,12489,13516,
        1,0,0,0,12490,12491,5,265,0,0,12491,12492,5,1192,0,0,12492,12493,
        3,914,457,0,12493,12494,5,1194,0,0,12494,12495,3,914,457,0,12495,
        12496,5,1193,0,0,12496,13516,1,0,0,0,12497,12498,5,372,0,0,12498,
        12499,5,1192,0,0,12499,12500,3,914,457,0,12500,12501,5,1194,0,0,
        12501,12504,3,914,457,0,12502,12503,5,1194,0,0,12503,12505,3,914,
        457,0,12504,12502,1,0,0,0,12504,12505,1,0,0,0,12505,12506,1,0,0,
        0,12506,12507,5,1193,0,0,12507,13516,1,0,0,0,12508,12509,5,502,0,
        0,12509,12510,5,1192,0,0,12510,12511,3,914,457,0,12511,12512,5,1194,
        0,0,12512,12513,3,914,457,0,12513,12514,5,1193,0,0,12514,13516,1,
        0,0,0,12515,12516,5,503,0,0,12516,12517,5,1192,0,0,12517,12518,3,
        914,457,0,12518,12519,5,1193,0,0,12519,13516,1,0,0,0,12520,12521,
        5,528,0,0,12521,12522,5,1192,0,0,12522,12523,3,914,457,0,12523,12524,
        5,1193,0,0,12524,13516,1,0,0,0,12525,12526,5,529,0,0,12526,12527,
        5,1192,0,0,12527,12528,3,914,457,0,12528,12529,5,1193,0,0,12529,
        13516,1,0,0,0,12530,12531,5,586,0,0,12531,12532,5,1192,0,0,12532,
        12533,3,914,457,0,12533,12534,5,1193,0,0,12534,13516,1,0,0,0,12535,
        12536,5,692,0,0,12536,12537,5,1192,0,0,12537,12538,3,914,457,0,12538,
        12539,5,1194,0,0,12539,12540,3,914,457,0,12540,12541,5,1193,0,0,
        12541,13516,1,0,0,0,12542,12543,5,744,0,0,12543,12544,5,1192,0,0,
        12544,12547,3,914,457,0,12545,12546,5,1194,0,0,12546,12548,3,914,
        457,0,12547,12545,1,0,0,0,12547,12548,1,0,0,0,12548,12549,1,0,0,
        0,12549,12550,5,1193,0,0,12550,13516,1,0,0,0,12551,12552,5,788,0,
        0,12552,12553,5,1192,0,0,12553,12554,3,914,457,0,12554,12555,5,1194,
        0,0,12555,12556,3,914,457,0,12556,12557,5,1194,0,0,12557,12558,3,
        914,457,0,12558,12559,5,1193,0,0,12559,13516,1,0,0,0,12560,12561,
        5,790,0,0,12561,12562,5,1192,0,0,12562,12563,3,914,457,0,12563,12564,
        5,1194,0,0,12564,12565,3,914,457,0,12565,12566,5,1193,0,0,12566,
        13516,1,0,0,0,12567,12568,5,813,0,0,12568,12569,5,1192,0,0,12569,
        12570,3,914,457,0,12570,12571,5,1193,0,0,12571,13516,1,0,0,0,12572,
        12573,5,817,0,0,12573,12574,5,1192,0,0,12574,12575,3,914,457,0,12575,
        12576,5,1194,0,0,12576,12577,3,914,457,0,12577,12578,5,1193,0,0,
        12578,13516,1,0,0,0,12579,12580,5,837,0,0,12580,12581,5,1192,0,0,
        12581,12582,3,914,457,0,12582,12583,5,1193,0,0,12583,13516,1,0,0,
        0,12584,12585,5,912,0,0,12585,12586,5,1192,0,0,12586,12587,3,914,
        457,0,12587,12588,5,1193,0,0,12588,13516,1,0,0,0,12589,12590,5,914,
        0,0,12590,12591,5,1192,0,0,12591,12592,3,914,457,0,12592,12593,5,
        1193,0,0,12593,13516,1,0,0,0,12594,12595,5,945,0,0,12595,12596,5,
        1192,0,0,12596,12603,3,914,457,0,12597,12598,5,1194,0,0,12598,12601,
        3,914,457,0,12599,12600,5,1194,0,0,12600,12602,3,914,457,0,12601,
        12599,1,0,0,0,12601,12602,1,0,0,0,12602,12604,1,0,0,0,12603,12597,
        1,0,0,0,12603,12604,1,0,0,0,12604,12605,1,0,0,0,12605,12606,5,1193,
        0,0,12606,13516,1,0,0,0,12607,12608,5,946,0,0,12608,12609,5,1192,
        0,0,12609,12610,3,914,457,0,12610,12611,5,1194,0,0,12611,12612,3,
        914,457,0,12612,12619,5,1193,0,0,12613,12614,5,1064,0,0,12614,12615,
        5,403,0,0,12615,12616,5,1192,0,0,12616,12617,3,954,477,0,12617,12618,
        5,1193,0,0,12618,12620,1,0,0,0,12619,12613,1,0,0,0,12619,12620,1,
        0,0,0,12620,13516,1,0,0,0,12621,12622,5,947,0,0,12622,12623,5,1192,
        0,0,12623,12624,3,914,457,0,12624,12625,5,1194,0,0,12625,12626,3,
        914,457,0,12626,12627,5,1193,0,0,12627,13516,1,0,0,0,12628,12629,
        5,948,0,0,12629,12630,5,1192,0,0,12630,12631,3,914,457,0,12631,12632,
        5,1194,0,0,12632,12633,3,914,457,0,12633,12634,5,1194,0,0,12634,
        12635,3,914,457,0,12635,12636,5,1194,0,0,12636,12637,3,914,457,0,
        12637,12638,5,1193,0,0,12638,13516,1,0,0,0,12639,12640,5,952,0,0,
        12640,12641,5,1192,0,0,12641,12642,3,914,457,0,12642,12643,5,1194,
        0,0,12643,12644,3,914,457,0,12644,12645,5,1194,0,0,12645,12646,3,
        914,457,0,12646,12647,5,1193,0,0,12647,13516,1,0,0,0,12648,12649,
        5,998,0,0,12649,12650,5,1192,0,0,12650,12651,3,914,457,0,12651,12652,
        5,1194,0,0,12652,12653,3,914,457,0,12653,12654,5,1194,0,0,12654,
        12655,3,914,457,0,12655,12656,5,1193,0,0,12656,13516,1,0,0,0,12657,
        12658,5,1000,0,0,12658,12662,5,1192,0,0,12659,12660,3,914,457,0,
        12660,12661,5,378,0,0,12661,12663,1,0,0,0,12662,12659,1,0,0,0,12662,
        12663,1,0,0,0,12663,12664,1,0,0,0,12664,12665,3,914,457,0,12665,
        12666,5,1193,0,0,12666,13516,1,0,0,0,12667,12668,5,1018,0,0,12668,
        12669,5,1192,0,0,12669,12670,3,914,457,0,12670,12671,5,1193,0,0,
        12671,13516,1,0,0,0,12672,12673,5,1031,0,0,12673,12674,5,1192,0,
        0,12674,12675,3,914,457,0,12675,12676,5,1193,0,0,12676,13516,1,0,
        0,0,12677,12678,5,94,0,0,12678,12688,5,1192,0,0,12679,12689,5,1198,
        0,0,12680,12685,3,914,457,0,12681,12682,5,1194,0,0,12682,12684,3,
        914,457,0,12683,12681,1,0,0,0,12684,12687,1,0,0,0,12685,12683,1,
        0,0,0,12685,12686,1,0,0,0,12686,12689,1,0,0,0,12687,12685,1,0,0,
        0,12688,12679,1,0,0,0,12688,12680,1,0,0,0,12689,12690,1,0,0,0,12690,
        13516,5,1193,0,0,12691,12692,5,138,0,0,12692,12702,5,1192,0,0,12693,
        12703,5,1198,0,0,12694,12699,3,914,457,0,12695,12696,5,1194,0,0,
        12696,12698,3,914,457,0,12697,12695,1,0,0,0,12698,12701,1,0,0,0,
        12699,12697,1,0,0,0,12699,12700,1,0,0,0,12700,12703,1,0,0,0,12701,
        12699,1,0,0,0,12702,12693,1,0,0,0,12702,12694,1,0,0,0,12703,12704,
        1,0,0,0,12704,13516,5,1193,0,0,12705,12706,5,165,0,0,12706,12707,
        5,1192,0,0,12707,12708,3,914,457,0,12708,12709,5,1193,0,0,12709,
        13516,1,0,0,0,12710,12711,5,176,0,0,12711,12712,5,1192,0,0,12712,
        12713,5,1170,0,0,12713,13516,5,1193,0,0,12714,12715,5,183,0,0,12715,
        12716,5,1192,0,0,12716,13516,5,1193,0,0,12717,12718,5,206,0,0,12718,
        12719,5,1192,0,0,12719,13516,5,1193,0,0,12720,12721,5,209,0,0,12721,
        12722,5,1192,0,0,12722,13516,5,1193,0,0,12723,12724,5,241,0,0,12724,
        12725,5,1192,0,0,12725,12726,3,914,457,0,12726,12727,5,1193,0,0,
        12727,13516,1,0,0,0,12728,12729,5,303,0,0,12729,12730,5,1192,0,0,
        12730,13516,5,1193,0,0,12731,12732,5,304,0,0,12732,12733,5,1192,
        0,0,12733,13516,5,1193,0,0,12734,12735,5,305,0,0,12735,12736,5,1192,
        0,0,12736,13516,5,1193,0,0,12737,12738,5,306,0,0,12738,12739,5,1192,
        0,0,12739,13516,5,1193,0,0,12740,12741,5,307,0,0,12741,12742,5,1192,
        0,0,12742,13516,5,1193,0,0,12743,12744,5,308,0,0,12744,12745,5,1192,
        0,0,12745,13516,5,1193,0,0,12746,12747,5,373,0,0,12747,12751,5,1192,
        0,0,12748,12752,5,1168,0,0,12749,12752,5,1170,0,0,12750,12752,5,
        1166,0,0,12751,12748,1,0,0,0,12751,12749,1,0,0,0,12751,12750,1,0,
        0,0,12752,12753,1,0,0,0,12753,12754,5,1194,0,0,12754,12759,3,914,
        457,0,12755,12756,5,1194,0,0,12756,12758,3,914,457,0,12757,12755,
        1,0,0,0,12758,12761,1,0,0,0,12759,12757,1,0,0,0,12759,12760,1,0,
        0,0,12760,12762,1,0,0,0,12761,12759,1,0,0,0,12762,12763,5,1193,0,
        0,12763,13516,1,0,0,0,12764,12765,5,396,0,0,12765,12766,5,1192,0,
        0,12766,13516,5,1193,0,0,12767,12768,5,389,0,0,12768,12770,5,1192,
        0,0,12769,12771,5,1170,0,0,12770,12769,1,0,0,0,12770,12771,1,0,0,
        0,12771,12772,1,0,0,0,12772,13516,5,1193,0,0,12773,12774,5,421,0,
        0,12774,12775,5,1192,0,0,12775,13516,5,1193,0,0,12776,12777,5,422,
        0,0,12777,12778,5,1192,0,0,12778,13516,5,1193,0,0,12779,12780,5,
        468,0,0,12780,12781,5,1192,0,0,12781,12782,3,914,457,0,12782,12783,
        5,1194,0,0,12783,12784,3,914,457,0,12784,12785,5,1193,0,0,12785,
        13516,1,0,0,0,12786,12787,5,469,0,0,12787,12788,5,1192,0,0,12788,
        12789,3,914,457,0,12789,12790,5,1193,0,0,12790,13516,1,0,0,0,12791,
        12792,5,571,0,0,12792,12793,5,1192,0,0,12793,13516,5,1193,0,0,12794,
        12795,5,589,0,0,12795,12796,5,1192,0,0,12796,13516,5,1193,0,0,12797,
        12798,5,591,0,0,12798,12799,5,1192,0,0,12799,13516,5,1193,0,0,12800,
        12801,5,826,0,0,12801,12802,5,1192,0,0,12802,13516,5,1193,0,0,12803,
        12804,5,884,0,0,12804,12805,5,1192,0,0,12805,12806,5,1170,0,0,12806,
        13516,5,1193,0,0,12807,12808,5,1072,0,0,12808,12809,5,1192,0,0,12809,
        13516,5,1193,0,0,12810,12811,5,117,0,0,12811,12812,5,1192,0,0,12812,
        12813,3,914,457,0,12813,12814,5,56,0,0,12814,12815,3,1200,600,0,
        12815,12816,5,1193,0,0,12816,13516,1,0,0,0,12817,12818,5,1006,0,
        0,12818,12819,5,1192,0,0,12819,12820,3,914,457,0,12820,12821,5,56,
        0,0,12821,12822,3,1200,600,0,12822,12823,5,1193,0,0,12823,13516,
        1,0,0,0,12824,12825,5,190,0,0,12825,12826,5,1192,0,0,12826,12827,
        3,1200,600,0,12827,12828,5,1194,0,0,12828,12831,3,914,457,0,12829,
        12830,5,1194,0,0,12830,12832,3,914,457,0,12831,12829,1,0,0,0,12831,
        12832,1,0,0,0,12832,12833,1,0,0,0,12833,12834,5,1193,0,0,12834,13516,
        1,0,0,0,12835,12836,5,150,0,0,12836,12837,5,1192,0,0,12837,12838,
        3,1110,555,0,12838,12839,5,1193,0,0,12839,13516,1,0,0,0,12840,13516,
        5,1156,0,0,12841,13516,5,1157,0,0,12842,12843,5,214,0,0,12843,12844,
        5,1192,0,0,12844,12845,5,1170,0,0,12845,12846,5,1194,0,0,12846,12847,
        3,914,457,0,12847,12848,5,1193,0,0,12848,13516,1,0,0,0,12849,12850,
        5,123,0,0,12850,12851,5,1192,0,0,12851,12852,3,914,457,0,12852,12853,
        5,1193,0,0,12853,13516,1,0,0,0,12854,12855,5,221,0,0,12855,12856,
        5,1192,0,0,12856,12857,3,914,457,0,12857,12858,5,1193,0,0,12858,
        13516,1,0,0,0,12859,12860,5,428,0,0,12860,12861,5,1192,0,0,12861,
        12862,3,914,457,0,12862,12863,5,1193,0,0,12863,13516,1,0,0,0,12864,
        12865,5,429,0,0,12865,12866,5,1192,0,0,12866,12867,3,914,457,0,12867,
        12868,5,1193,0,0,12868,13516,1,0,0,0,12869,12870,5,430,0,0,12870,
        12871,5,1192,0,0,12871,12872,3,914,457,0,12872,12873,5,1193,0,0,
        12873,13516,1,0,0,0,12874,12875,5,424,0,0,12875,12876,5,1192,0,0,
        12876,12881,3,1200,600,0,12877,12878,5,1194,0,0,12878,12879,5,1168,
        0,0,12879,12880,5,1194,0,0,12880,12882,5,1168,0,0,12881,12877,1,
        0,0,0,12881,12882,1,0,0,0,12882,12883,1,0,0,0,12883,12884,5,1193,
        0,0,12884,13516,1,0,0,0,12885,12886,5,923,0,0,12886,12887,5,1192,
        0,0,12887,12888,3,914,457,0,12888,12889,5,1194,0,0,12889,12890,5,
        1170,0,0,12890,12891,5,1193,0,0,12891,13516,1,0,0,0,12892,12893,
        5,205,0,0,12893,12894,5,1192,0,0,12894,13516,5,1193,0,0,12895,13516,
        5,208,0,0,12896,12897,5,1103,0,0,12897,12898,5,1192,0,0,12898,13516,
        5,1193,0,0,12899,12900,5,1104,0,0,12900,12901,5,1192,0,0,12901,13516,
        5,1193,0,0,12902,12903,5,1105,0,0,12903,12904,5,1192,0,0,12904,12905,
        3,1052,526,0,12905,12906,5,1194,0,0,12906,12907,3,914,457,0,12907,
        12908,5,1194,0,0,12908,12911,3,914,457,0,12909,12910,5,1194,0,0,
        12910,12912,3,914,457,0,12911,12909,1,0,0,0,12911,12912,1,0,0,0,
        12912,12913,1,0,0,0,12913,12914,5,1193,0,0,12914,13516,1,0,0,0,12915,
        12916,5,226,0,0,12916,12917,5,1192,0,0,12917,12918,3,1054,527,0,
        12918,12919,5,1194,0,0,12919,12920,3,914,457,0,12920,12921,5,1194,
        0,0,12921,12922,3,914,457,0,12922,12923,5,1193,0,0,12923,13516,1,
        0,0,0,12924,12925,5,227,0,0,12925,12926,5,1192,0,0,12926,12927,3,
        1054,527,0,12927,12928,5,1194,0,0,12928,12929,3,914,457,0,12929,
        12930,5,1194,0,0,12930,12931,3,914,457,0,12931,12932,5,1193,0,0,
        12932,13516,1,0,0,0,12933,12934,5,1106,0,0,12934,12935,5,1192,0,
        0,12935,12936,3,1054,527,0,12936,12937,5,1194,0,0,12937,12938,3,
        914,457,0,12938,12939,5,1194,0,0,12939,12940,3,914,457,0,12940,12941,
        5,1193,0,0,12941,13516,1,0,0,0,12942,12943,5,1107,0,0,12943,12944,
        5,1192,0,0,12944,12945,3,914,457,0,12945,12946,5,1194,0,0,12946,
        12947,3,914,457,0,12947,12948,5,1194,0,0,12948,12949,3,914,457,0,
        12949,12950,5,1193,0,0,12950,13516,1,0,0,0,12951,12952,5,228,0,0,
        12952,12953,5,1192,0,0,12953,12954,3,1056,528,0,12954,12955,5,1194,
        0,0,12955,12956,3,914,457,0,12956,12957,5,1193,0,0,12957,13516,1,
        0,0,0,12958,12959,5,229,0,0,12959,12960,5,1192,0,0,12960,12961,3,
        1056,528,0,12961,12962,5,1194,0,0,12962,12963,3,914,457,0,12963,
        12964,5,1193,0,0,12964,13516,1,0,0,0,12965,12966,5,1108,0,0,12966,
        12967,5,1192,0,0,12967,12968,3,914,457,0,12968,12969,5,1194,0,0,
        12969,12970,3,914,457,0,12970,12971,5,1194,0,0,12971,12972,3,914,
        457,0,12972,12973,5,1194,0,0,12973,12974,3,914,457,0,12974,12975,
        5,1194,0,0,12975,12976,3,914,457,0,12976,12977,5,1194,0,0,12977,
        12978,3,914,457,0,12978,12979,5,1194,0,0,12979,12980,3,914,457,0,
        12980,12981,5,1194,0,0,12981,12982,3,914,457,0,12982,12983,5,1193,
        0,0,12983,13516,1,0,0,0,12984,12985,5,1109,0,0,12985,12986,5,1192,
        0,0,12986,12987,3,914,457,0,12987,12988,5,1194,0,0,12988,12989,3,
        914,457,0,12989,12990,5,1194,0,0,12990,12991,3,914,457,0,12991,12992,
        5,1194,0,0,12992,12993,3,914,457,0,12993,12994,5,1194,0,0,12994,
        12995,3,914,457,0,12995,12996,5,1194,0,0,12996,12997,3,914,457,0,
        12997,12998,5,1194,0,0,12998,12999,3,914,457,0,12999,13000,5,1193,
        0,0,13000,13516,1,0,0,0,13001,13002,5,1110,0,0,13002,13003,5,1192,
        0,0,13003,13004,3,914,457,0,13004,13005,5,1194,0,0,13005,13006,3,
        914,457,0,13006,13007,5,1194,0,0,13007,13008,3,914,457,0,13008,13009,
        5,1194,0,0,13009,13010,3,914,457,0,13010,13011,5,1194,0,0,13011,
        13012,3,914,457,0,13012,13013,5,1194,0,0,13013,13014,3,914,457,0,
        13014,13015,5,1194,0,0,13015,13016,3,914,457,0,13016,13017,5,1194,
        0,0,13017,13018,3,914,457,0,13018,13019,5,1194,0,0,13019,13020,3,
        914,457,0,13020,13021,5,1194,0,0,13021,13022,5,1168,0,0,13022,13023,
        5,1193,0,0,13023,13516,1,0,0,0,13024,13025,5,1111,0,0,13025,13026,
        5,1192,0,0,13026,13027,3,1058,529,0,13027,13028,5,1194,0,0,13028,
        13029,3,914,457,0,13029,13030,5,1193,0,0,13030,13516,1,0,0,0,13031,
        13032,5,1112,0,0,13032,13033,5,1192,0,0,13033,13034,3,914,457,0,
        13034,13035,5,1193,0,0,13035,13516,1,0,0,0,13036,13037,5,1113,0,
        0,13037,13038,5,1192,0,0,13038,13041,3,914,457,0,13039,13040,5,1194,
        0,0,13040,13042,3,914,457,0,13041,13039,1,0,0,0,13041,13042,1,0,
        0,0,13042,13043,1,0,0,0,13043,13044,5,1193,0,0,13044,13516,1,0,0,
        0,13045,13046,5,390,0,0,13046,13047,5,1192,0,0,13047,13516,5,1193,
        0,0,13048,13049,5,395,0,0,13049,13050,5,1192,0,0,13050,13516,5,1193,
        0,0,13051,13052,5,1114,0,0,13052,13053,5,1192,0,0,13053,13054,3,
        914,457,0,13054,13055,5,1193,0,0,13055,13516,1,0,0,0,13056,13057,
        5,1115,0,0,13057,13058,5,1192,0,0,13058,13059,3,914,457,0,13059,
        13060,5,1193,0,0,13060,13516,1,0,0,0,13061,13062,5,1116,0,0,13062,
        13063,5,1192,0,0,13063,13064,3,914,457,0,13064,13065,5,1194,0,0,
        13065,13066,3,914,457,0,13066,13067,5,1194,0,0,13067,13068,3,914,
        457,0,13068,13069,5,1194,0,0,13069,13070,3,914,457,0,13070,13071,
        5,1194,0,0,13071,13072,3,914,457,0,13072,13073,5,1193,0,0,13073,
        13516,1,0,0,0,13074,13075,5,1117,0,0,13075,13076,5,1192,0,0,13076,
        13077,3,914,457,0,13077,13078,5,1194,0,0,13078,13079,3,914,457,0,
        13079,13080,5,1193,0,0,13080,13516,1,0,0,0,13081,13082,5,1118,0,
        0,13082,13083,5,1192,0,0,13083,13516,5,1193,0,0,13084,13085,5,1119,
        0,0,13085,13086,5,1192,0,0,13086,13516,5,1193,0,0,13087,13088,5,
        1120,0,0,13088,13089,5,1192,0,0,13089,13516,5,1193,0,0,13090,13091,
        5,1121,0,0,13091,13092,5,1192,0,0,13092,13093,3,914,457,0,13093,
        13094,5,1194,0,0,13094,13095,3,914,457,0,13095,13096,5,1194,0,0,
        13096,13097,3,914,457,0,13097,13098,5,1194,0,0,13098,13099,3,914,
        457,0,13099,13100,5,1194,0,0,13100,13101,5,1168,0,0,13101,13102,
        5,1193,0,0,13102,13516,1,0,0,0,13103,13104,5,1122,0,0,13104,13105,
        5,1192,0,0,13105,13106,3,914,457,0,13106,13107,5,1194,0,0,13107,
        13108,3,914,457,0,13108,13109,5,1193,0,0,13109,13516,1,0,0,0,13110,
        13111,5,1123,0,0,13111,13112,5,1192,0,0,13112,13113,3,914,457,0,
        13113,13114,5,1193,0,0,13114,13516,1,0,0,0,13115,13116,5,424,0,0,
        13116,13117,5,1192,0,0,13117,13120,3,1200,600,0,13118,13119,5,1194,
        0,0,13119,13121,5,1168,0,0,13120,13118,1,0,0,0,13120,13121,1,0,0,
        0,13121,13124,1,0,0,0,13122,13123,5,1194,0,0,13123,13125,5,1168,
        0,0,13124,13122,1,0,0,0,13124,13125,1,0,0,0,13125,13126,1,0,0,0,
        13126,13127,5,1193,0,0,13127,13516,1,0,0,0,13128,13129,5,571,0,0,
        13129,13130,5,1192,0,0,13130,13516,5,1193,0,0,13131,13132,5,629,
        0,0,13132,13133,5,1192,0,0,13133,13134,3,914,457,0,13134,13135,5,
        1194,0,0,13135,13136,3,914,457,0,13136,13137,5,1193,0,0,13137,13516,
        1,0,0,0,13138,13139,5,683,0,0,13139,13140,5,1192,0,0,13140,13141,
        3,914,457,0,13141,13142,5,56,0,0,13142,13145,3,1200,600,0,13143,
        13144,5,1038,0,0,13144,13146,3,914,457,0,13145,13143,1,0,0,0,13145,
        13146,1,0,0,0,13146,13147,1,0,0,0,13147,13148,5,1193,0,0,13148,13516,
        1,0,0,0,13149,13516,3,1050,525,0,13150,13151,5,437,0,0,13151,13152,
        5,1192,0,0,13152,13153,3,938,469,0,13153,13154,5,1194,0,0,13154,
        13155,3,914,457,0,13155,13156,5,1194,0,0,13156,13157,3,914,457,0,
        13157,13158,5,1193,0,0,13158,13516,1,0,0,0,13159,13160,5,467,0,0,
        13160,13161,5,1192,0,0,13161,13164,3,914,457,0,13162,13163,5,1194,
        0,0,13163,13165,3,914,457,0,13164,13162,1,0,0,0,13164,13165,1,0,
        0,0,13165,13166,1,0,0,0,13166,13167,5,1193,0,0,13167,13516,1,0,0,
        0,13168,13169,5,479,0,0,13169,13178,5,1192,0,0,13170,13175,3,1044,
        522,0,13171,13172,5,1194,0,0,13172,13174,3,1044,522,0,13173,13171,
        1,0,0,0,13174,13177,1,0,0,0,13175,13173,1,0,0,0,13175,13176,1,0,
        0,0,13176,13179,1,0,0,0,13177,13175,1,0,0,0,13178,13170,1,0,0,0,
        13178,13179,1,0,0,0,13179,13181,1,0,0,0,13180,13182,3,1046,523,0,
        13181,13180,1,0,0,0,13181,13182,1,0,0,0,13182,13183,1,0,0,0,13183,
        13516,5,1193,0,0,13184,13185,5,477,0,0,13185,13187,5,1192,0,0,13186,
        13188,3,1110,555,0,13187,13186,1,0,0,0,13187,13188,1,0,0,0,13188,
        13190,1,0,0,0,13189,13191,3,1046,523,0,13190,13189,1,0,0,0,13190,
        13191,1,0,0,0,13191,13192,1,0,0,0,13192,13516,5,1193,0,0,13193,13194,
        5,482,0,0,13194,13195,5,1192,0,0,13195,13196,3,914,457,0,13196,13197,
        5,1194,0,0,13197,13198,3,914,457,0,13198,13199,5,1193,0,0,13199,
        13516,1,0,0,0,13200,13201,5,481,0,0,13201,13202,5,1192,0,0,13202,
        13205,3,914,457,0,13203,13204,5,1194,0,0,13204,13206,3,914,457,0,
        13205,13203,1,0,0,0,13205,13206,1,0,0,0,13206,13207,1,0,0,0,13207,
        13208,5,1193,0,0,13208,13516,1,0,0,0,13209,13210,5,478,0,0,13210,
        13211,5,1192,0,0,13211,13212,3,914,457,0,13212,13213,5,1194,0,0,
        13213,13214,3,914,457,0,13214,13215,5,1194,0,0,13215,13216,3,914,
        457,0,13216,13217,5,1193,0,0,13217,13516,1,0,0,0,13218,13219,5,480,
        0,0,13219,13220,5,1192,0,0,13220,13221,3,914,457,0,13221,13222,5,
        1194,0,0,13222,13223,3,914,457,0,13223,13224,5,1193,0,0,13224,13516,
        1,0,0,0,13225,13226,5,1081,0,0,13226,13227,5,1192,0,0,13227,13228,
        3,914,457,0,13228,13229,5,1193,0,0,13229,13516,1,0,0,0,13230,13231,
        5,1082,0,0,13231,13232,5,1192,0,0,13232,13233,3,914,457,0,13233,
        13234,5,1193,0,0,13234,13516,1,0,0,0,13235,13236,5,1083,0,0,13236,
        13237,5,1192,0,0,13237,13238,3,914,457,0,13238,13239,5,1193,0,0,
        13239,13516,1,0,0,0,13240,13241,5,1084,0,0,13241,13242,5,1192,0,
        0,13242,13243,3,914,457,0,13243,13244,5,1193,0,0,13244,13516,1,0,
        0,0,13245,13246,5,1085,0,0,13246,13247,5,1192,0,0,13247,13248,3,
        914,457,0,13248,13249,5,1194,0,0,13249,13250,3,914,457,0,13250,13251,
        5,1193,0,0,13251,13516,1,0,0,0,13252,13253,5,1086,0,0,13253,13254,
        5,1192,0,0,13254,13255,3,914,457,0,13255,13256,5,1193,0,0,13256,
        13516,1,0,0,0,13257,13258,5,1087,0,0,13258,13259,5,1192,0,0,13259,
        13260,3,914,457,0,13260,13261,5,1193,0,0,13261,13516,1,0,0,0,13262,
        13263,5,1088,0,0,13263,13264,5,1192,0,0,13264,13265,3,914,457,0,
        13265,13266,5,1193,0,0,13266,13516,1,0,0,0,13267,13268,5,1089,0,
        0,13268,13269,5,1192,0,0,13269,13270,3,914,457,0,13270,13271,5,1193,
        0,0,13271,13516,1,0,0,0,13272,13273,5,1090,0,0,13273,13274,5,1192,
        0,0,13274,13275,3,914,457,0,13275,13276,5,1193,0,0,13276,13516,1,
        0,0,0,13277,13278,5,1091,0,0,13278,13279,5,1192,0,0,13279,13280,
        3,914,457,0,13280,13281,5,1193,0,0,13281,13516,1,0,0,0,13282,13283,
        5,523,0,0,13283,13284,5,1192,0,0,13284,13287,3,914,457,0,13285,13286,
        5,1194,0,0,13286,13288,3,914,457,0,13287,13285,1,0,0,0,13287,13288,
        1,0,0,0,13288,13289,1,0,0,0,13289,13290,5,1193,0,0,13290,13516,1,
        0,0,0,13291,13292,5,1092,0,0,13292,13293,5,1192,0,0,13293,13294,
        3,914,457,0,13294,13295,5,1193,0,0,13295,13516,1,0,0,0,13296,13297,
        5,1093,0,0,13297,13298,5,1192,0,0,13298,13516,5,1193,0,0,13299,13300,
        5,1094,0,0,13300,13301,5,1192,0,0,13301,13302,3,914,457,0,13302,
        13303,5,1194,0,0,13303,13304,3,914,457,0,13304,13305,5,1193,0,0,
        13305,13516,1,0,0,0,13306,13307,5,1095,0,0,13307,13308,5,1192,0,
        0,13308,13309,3,914,457,0,13309,13310,5,1193,0,0,13310,13516,1,0,
        0,0,13311,13312,5,1096,0,0,13312,13314,5,1192,0,0,13313,13315,3,
        914,457,0,13314,13313,1,0,0,0,13314,13315,1,0,0,0,13315,13316,1,
        0,0,0,13316,13516,5,1193,0,0,13317,13318,5,1097,0,0,13318,13319,
        5,1192,0,0,13319,13320,3,914,457,0,13320,13321,5,1194,0,0,13321,
        13324,3,914,457,0,13322,13323,5,1194,0,0,13323,13325,3,914,457,0,
        13324,13322,1,0,0,0,13324,13325,1,0,0,0,13325,13326,1,0,0,0,13326,
        13327,5,1193,0,0,13327,13516,1,0,0,0,13328,13329,5,1098,0,0,13329,
        13330,5,1192,0,0,13330,13331,3,914,457,0,13331,13332,5,1193,0,0,
        13332,13516,1,0,0,0,13333,13334,5,1099,0,0,13334,13335,5,1192,0,
        0,13335,13336,3,914,457,0,13336,13337,5,1193,0,0,13337,13516,1,0,
        0,0,13338,13339,5,1100,0,0,13339,13340,5,1192,0,0,13340,13341,3,
        914,457,0,13341,13342,5,1193,0,0,13342,13516,1,0,0,0,13343,13344,
        5,1101,0,0,13344,13345,5,1192,0,0,13345,13346,3,914,457,0,13346,
        13347,5,1193,0,0,13347,13516,1,0,0,0,13348,13349,5,1102,0,0,13349,
        13350,5,1192,0,0,13350,13351,3,914,457,0,13351,13352,5,1193,0,0,
        13352,13516,1,0,0,0,13353,13354,5,402,0,0,13354,13355,5,1192,0,0,
        13355,13356,3,1110,555,0,13356,13357,5,1193,0,0,13357,13516,1,0,
        0,0,13358,13359,5,501,0,0,13359,13360,5,1192,0,0,13360,13361,3,1110,
        555,0,13361,13362,5,1193,0,0,13362,13516,1,0,0,0,13363,13364,5,120,
        0,0,13364,13365,5,1192,0,0,13365,13366,3,914,457,0,13366,13367,5,
        1193,0,0,13367,13516,1,0,0,0,13368,13369,5,122,0,0,13369,13370,5,
        1192,0,0,13370,13371,3,914,457,0,13371,13372,5,1194,0,0,13372,13375,
        3,914,457,0,13373,13374,5,1194,0,0,13374,13376,3,914,457,0,13375,
        13373,1,0,0,0,13375,13376,1,0,0,0,13376,13377,1,0,0,0,13377,13378,
        5,1193,0,0,13378,13516,1,0,0,0,13379,13516,5,210,0,0,13380,13381,
        5,220,0,0,13381,13383,5,1192,0,0,13382,13384,3,914,457,0,13383,13382,
        1,0,0,0,13383,13384,1,0,0,0,13384,13385,1,0,0,0,13385,13516,5,1193,
        0,0,13386,13387,5,410,0,0,13387,13388,5,1192,0,0,13388,13389,3,914,
        457,0,13389,13390,5,1193,0,0,13390,13516,1,0,0,0,13391,13392,5,411,
        0,0,13392,13393,5,1192,0,0,13393,13394,3,914,457,0,13394,13395,5,
        1194,0,0,13395,13396,3,914,457,0,13396,13397,5,1194,0,0,13397,13404,
        3,914,457,0,13398,13399,5,1194,0,0,13399,13402,3,914,457,0,13400,
        13401,5,1194,0,0,13401,13403,3,914,457,0,13402,13400,1,0,0,0,13402,
        13403,1,0,0,0,13403,13405,1,0,0,0,13404,13398,1,0,0,0,13404,13405,
        1,0,0,0,13405,13406,1,0,0,0,13406,13407,5,1193,0,0,13407,13516,1,
        0,0,0,13408,13409,5,471,0,0,13409,13410,5,1192,0,0,13410,13411,3,
        914,457,0,13411,13412,5,1193,0,0,13412,13516,1,0,0,0,13413,13414,
        5,472,0,0,13414,13415,5,1192,0,0,13415,13418,3,914,457,0,13416,13417,
        5,1194,0,0,13417,13419,3,914,457,0,13418,13416,1,0,0,0,13418,13419,
        1,0,0,0,13419,13420,1,0,0,0,13420,13421,5,1193,0,0,13421,13516,1,
        0,0,0,13422,13423,5,473,0,0,13423,13424,5,1192,0,0,13424,13427,3,
        914,457,0,13425,13426,5,1194,0,0,13426,13428,3,914,457,0,13427,13425,
        1,0,0,0,13427,13428,1,0,0,0,13428,13429,1,0,0,0,13429,13430,5,1193,
        0,0,13430,13516,1,0,0,0,13431,13432,5,525,0,0,13432,13433,5,1192,
        0,0,13433,13434,3,914,457,0,13434,13435,5,1194,0,0,13435,13436,3,
        914,457,0,13436,13437,5,1193,0,0,13437,13516,1,0,0,0,13438,13439,
        5,668,0,0,13439,13440,5,1192,0,0,13440,13516,5,1193,0,0,13441,13442,
        5,699,0,0,13442,13448,5,1192,0,0,13443,13446,3,914,457,0,13444,13445,
        5,1194,0,0,13445,13447,3,914,457,0,13446,13444,1,0,0,0,13446,13447,
        1,0,0,0,13447,13449,1,0,0,0,13448,13443,1,0,0,0,13448,13449,1,0,
        0,0,13449,13450,1,0,0,0,13450,13516,5,1193,0,0,13451,13452,5,737,
        0,0,13452,13453,5,1192,0,0,13453,13454,3,914,457,0,13454,13455,5,
        1193,0,0,13455,13516,1,0,0,0,13456,13457,5,736,0,0,13457,13458,5,
        1192,0,0,13458,13459,3,914,457,0,13459,13460,5,1194,0,0,13460,13463,
        3,914,457,0,13461,13462,5,1194,0,0,13462,13464,3,914,457,0,13463,
        13461,1,0,0,0,13463,13464,1,0,0,0,13464,13465,1,0,0,0,13465,13466,
        5,1193,0,0,13466,13516,1,0,0,0,13467,13516,5,886,0,0,13468,13469,
        5,883,0,0,13469,13470,5,1192,0,0,13470,13471,3,914,457,0,13471,13472,
        5,1193,0,0,13472,13516,1,0,0,0,13473,13474,5,955,0,0,13474,13476,
        5,1192,0,0,13475,13477,3,914,457,0,13476,13475,1,0,0,0,13476,13477,
        1,0,0,0,13477,13478,1,0,0,0,13478,13516,5,1193,0,0,13479,13480,5,
        956,0,0,13480,13482,5,1192,0,0,13481,13483,3,914,457,0,13482,13481,
        1,0,0,0,13482,13483,1,0,0,0,13483,13484,1,0,0,0,13484,13516,5,1193,
        0,0,13485,13486,5,957,0,0,13486,13492,5,1192,0,0,13487,13490,3,914,
        457,0,13488,13489,5,1194,0,0,13489,13491,3,914,457,0,13490,13488,
        1,0,0,0,13490,13491,1,0,0,0,13491,13493,1,0,0,0,13492,13487,1,0,
        0,0,13492,13493,1,0,0,0,13493,13494,1,0,0,0,13494,13516,5,1193,0,
        0,13495,13496,5,958,0,0,13496,13498,5,1192,0,0,13497,13499,3,914,
        457,0,13498,13497,1,0,0,0,13498,13499,1,0,0,0,13499,13500,1,0,0,
        0,13500,13516,5,1193,0,0,13501,13516,5,965,0,0,13502,13516,5,1035,
        0,0,13503,13504,5,1036,0,0,13504,13506,5,1192,0,0,13505,13507,3,
        914,457,0,13506,13505,1,0,0,0,13506,13507,1,0,0,0,13507,13508,1,
        0,0,0,13508,13516,5,1193,0,0,13509,13510,5,1037,0,0,13510,13512,
        5,1192,0,0,13511,13513,3,914,457,0,13512,13511,1,0,0,0,13512,13513,
        1,0,0,0,13513,13514,1,0,0,0,13514,13516,5,1193,0,0,13515,12169,1,
        0,0,0,13515,12172,1,0,0,0,13515,12181,1,0,0,0,13515,12192,1,0,0,
        0,13515,12199,1,0,0,0,13515,12206,1,0,0,0,13515,12213,1,0,0,0,13515,
        12222,1,0,0,0,13515,12229,1,0,0,0,13515,12235,1,0,0,0,13515,12241,
        1,0,0,0,13515,12246,1,0,0,0,13515,12251,1,0,0,0,13515,12256,1,0,
        0,0,13515,12261,1,0,0,0,13515,12266,1,0,0,0,13515,12273,1,0,0,0,
        13515,12280,1,0,0,0,13515,12287,1,0,0,0,13515,12294,1,0,0,0,13515,
        12299,1,0,0,0,13515,12308,1,0,0,0,13515,12319,1,0,0,0,13515,12328,
        1,0,0,0,13515,12339,1,0,0,0,13515,12344,1,0,0,0,13515,12353,1,0,
        0,0,13515,12362,1,0,0,0,13515,12371,1,0,0,0,13515,12378,1,0,0,0,
        13515,12385,1,0,0,0,13515,12388,1,0,0,0,13515,12395,1,0,0,0,13515,
        12401,1,0,0,0,13515,12407,1,0,0,0,13515,12410,1,0,0,0,13515,12415,
        1,0,0,0,13515,12422,1,0,0,0,13515,12427,1,0,0,0,13515,12432,1,0,
        0,0,13515,12439,1,0,0,0,13515,12444,1,0,0,0,13515,12449,1,0,0,0,
        13515,12460,1,0,0,0,13515,12474,1,0,0,0,13515,12490,1,0,0,0,13515,
        12497,1,0,0,0,13515,12508,1,0,0,0,13515,12515,1,0,0,0,13515,12520,
        1,0,0,0,13515,12525,1,0,0,0,13515,12530,1,0,0,0,13515,12535,1,0,
        0,0,13515,12542,1,0,0,0,13515,12551,1,0,0,0,13515,12560,1,0,0,0,
        13515,12567,1,0,0,0,13515,12572,1,0,0,0,13515,12579,1,0,0,0,13515,
        12584,1,0,0,0,13515,12589,1,0,0,0,13515,12594,1,0,0,0,13515,12607,
        1,0,0,0,13515,12621,1,0,0,0,13515,12628,1,0,0,0,13515,12639,1,0,
        0,0,13515,12648,1,0,0,0,13515,12657,1,0,0,0,13515,12667,1,0,0,0,
        13515,12672,1,0,0,0,13515,12677,1,0,0,0,13515,12691,1,0,0,0,13515,
        12705,1,0,0,0,13515,12710,1,0,0,0,13515,12714,1,0,0,0,13515,12717,
        1,0,0,0,13515,12720,1,0,0,0,13515,12723,1,0,0,0,13515,12728,1,0,
        0,0,13515,12731,1,0,0,0,13515,12734,1,0,0,0,13515,12737,1,0,0,0,
        13515,12740,1,0,0,0,13515,12743,1,0,0,0,13515,12746,1,0,0,0,13515,
        12764,1,0,0,0,13515,12767,1,0,0,0,13515,12773,1,0,0,0,13515,12776,
        1,0,0,0,13515,12779,1,0,0,0,13515,12786,1,0,0,0,13515,12791,1,0,
        0,0,13515,12794,1,0,0,0,13515,12797,1,0,0,0,13515,12800,1,0,0,0,
        13515,12803,1,0,0,0,13515,12807,1,0,0,0,13515,12810,1,0,0,0,13515,
        12817,1,0,0,0,13515,12824,1,0,0,0,13515,12835,1,0,0,0,13515,12840,
        1,0,0,0,13515,12841,1,0,0,0,13515,12842,1,0,0,0,13515,12849,1,0,
        0,0,13515,12854,1,0,0,0,13515,12859,1,0,0,0,13515,12864,1,0,0,0,
        13515,12869,1,0,0,0,13515,12874,1,0,0,0,13515,12885,1,0,0,0,13515,
        12892,1,0,0,0,13515,12895,1,0,0,0,13515,12896,1,0,0,0,13515,12899,
        1,0,0,0,13515,12902,1,0,0,0,13515,12915,1,0,0,0,13515,12924,1,0,
        0,0,13515,12933,1,0,0,0,13515,12942,1,0,0,0,13515,12951,1,0,0,0,
        13515,12958,1,0,0,0,13515,12965,1,0,0,0,13515,12984,1,0,0,0,13515,
        13001,1,0,0,0,13515,13024,1,0,0,0,13515,13031,1,0,0,0,13515,13036,
        1,0,0,0,13515,13045,1,0,0,0,13515,13048,1,0,0,0,13515,13051,1,0,
        0,0,13515,13056,1,0,0,0,13515,13061,1,0,0,0,13515,13074,1,0,0,0,
        13515,13081,1,0,0,0,13515,13084,1,0,0,0,13515,13087,1,0,0,0,13515,
        13090,1,0,0,0,13515,13103,1,0,0,0,13515,13110,1,0,0,0,13515,13115,
        1,0,0,0,13515,13128,1,0,0,0,13515,13131,1,0,0,0,13515,13138,1,0,
        0,0,13515,13149,1,0,0,0,13515,13150,1,0,0,0,13515,13159,1,0,0,0,
        13515,13168,1,0,0,0,13515,13184,1,0,0,0,13515,13193,1,0,0,0,13515,
        13200,1,0,0,0,13515,13209,1,0,0,0,13515,13218,1,0,0,0,13515,13225,
        1,0,0,0,13515,13230,1,0,0,0,13515,13235,1,0,0,0,13515,13240,1,0,
        0,0,13515,13245,1,0,0,0,13515,13252,1,0,0,0,13515,13257,1,0,0,0,
        13515,13262,1,0,0,0,13515,13267,1,0,0,0,13515,13272,1,0,0,0,13515,
        13277,1,0,0,0,13515,13282,1,0,0,0,13515,13291,1,0,0,0,13515,13296,
        1,0,0,0,13515,13299,1,0,0,0,13515,13306,1,0,0,0,13515,13311,1,0,
        0,0,13515,13317,1,0,0,0,13515,13328,1,0,0,0,13515,13333,1,0,0,0,
        13515,13338,1,0,0,0,13515,13343,1,0,0,0,13515,13348,1,0,0,0,13515,
        13353,1,0,0,0,13515,13358,1,0,0,0,13515,13363,1,0,0,0,13515,13368,
        1,0,0,0,13515,13379,1,0,0,0,13515,13380,1,0,0,0,13515,13386,1,0,
        0,0,13515,13391,1,0,0,0,13515,13408,1,0,0,0,13515,13413,1,0,0,0,
        13515,13422,1,0,0,0,13515,13431,1,0,0,0,13515,13438,1,0,0,0,13515,
        13441,1,0,0,0,13515,13451,1,0,0,0,13515,13456,1,0,0,0,13515,13467,
        1,0,0,0,13515,13468,1,0,0,0,13515,13473,1,0,0,0,13515,13479,1,0,
        0,0,13515,13485,1,0,0,0,13515,13495,1,0,0,0,13515,13501,1,0,0,0,
        13515,13502,1,0,0,0,13515,13503,1,0,0,0,13515,13509,1,0,0,0,13516,
        1049,1,0,0,0,13517,13522,3,1060,530,0,13518,13522,3,1064,532,0,13519,
        13522,3,1068,534,0,13520,13522,3,1072,536,0,13521,13517,1,0,0,0,
        13521,13518,1,0,0,0,13521,13519,1,0,0,0,13521,13520,1,0,0,0,13522,
        1051,1,0,0,0,13523,13524,7,153,0,0,13524,1053,1,0,0,0,13525,13533,
        3,1052,526,0,13526,13533,5,1125,0,0,13527,13533,5,1139,0,0,13528,
        13533,5,1131,0,0,13529,13533,5,1146,0,0,13530,13533,5,1132,0,0,13531,
        13533,5,1147,0,0,13532,13525,1,0,0,0,13532,13526,1,0,0,0,13532,13527,
        1,0,0,0,13532,13528,1,0,0,0,13532,13529,1,0,0,0,13532,13530,1,0,
        0,0,13532,13531,1,0,0,0,13533,1055,1,0,0,0,13534,13542,3,1054,527,
        0,13535,13542,5,1135,0,0,13536,13542,5,1150,0,0,13537,13542,5,1133,
        0,0,13538,13542,5,1148,0,0,13539,13542,5,1134,0,0,13540,13542,5,
        1149,0,0,13541,13534,1,0,0,0,13541,13535,1,0,0,0,13541,13536,1,0,
        0,0,13541,13537,1,0,0,0,13541,13538,1,0,0,0,13541,13539,1,0,0,0,
        13541,13540,1,0,0,0,13542,1057,1,0,0,0,13543,13551,3,1052,526,0,
        13544,13551,5,1125,0,0,13545,13551,5,1139,0,0,13546,13551,5,1131,
        0,0,13547,13551,5,1146,0,0,13548,13551,5,1134,0,0,13549,13551,5,
        1149,0,0,13550,13543,1,0,0,0,13550,13544,1,0,0,0,13550,13545,1,0,
        0,0,13550,13546,1,0,0,0,13550,13547,1,0,0,0,13550,13548,1,0,0,0,
        13550,13549,1,0,0,0,13551,1059,1,0,0,0,13552,13563,5,1166,0,0,13553,
        13563,3,1162,581,0,13554,13555,5,312,0,0,13555,13556,5,1192,0,0,
        13556,13563,5,1193,0,0,13557,13563,3,1064,532,0,13558,13559,5,1192,
        0,0,13559,13560,3,928,464,0,13560,13561,5,1193,0,0,13561,13563,1,
        0,0,0,13562,13552,1,0,0,0,13562,13553,1,0,0,0,13562,13554,1,0,0,
        0,13562,13557,1,0,0,0,13562,13558,1,0,0,0,13563,13564,1,0,0,0,13564,
        13565,5,1187,0,0,13565,13566,3,1062,531,0,13566,1061,1,0,0,0,13567,
        13568,7,154,0,0,13568,13569,5,1192,0,0,13569,13570,5,1170,0,0,13570,
        13571,5,1194,0,0,13571,13572,5,1170,0,0,13572,13573,5,1193,0,0,13573,
        1063,1,0,0,0,13574,13581,5,1166,0,0,13575,13581,3,1162,581,0,13576,
        13577,5,1192,0,0,13577,13578,3,928,464,0,13578,13579,5,1193,0,0,
        13579,13581,1,0,0,0,13580,13574,1,0,0,0,13580,13575,1,0,0,0,13580,
        13576,1,0,0,0,13581,13582,1,0,0,0,13582,13583,5,1187,0,0,13583,13584,
        3,1066,533,0,13584,1065,1,0,0,0,13585,13586,7,155,0,0,13586,13587,
        5,1192,0,0,13587,13588,5,1170,0,0,13588,13589,5,1193,0,0,13589,1067,
        1,0,0,0,13590,13597,5,1166,0,0,13591,13597,3,1162,581,0,13592,13593,
        5,1192,0,0,13593,13594,3,928,464,0,13594,13595,5,1193,0,0,13595,
        13597,1,0,0,0,13596,13590,1,0,0,0,13596,13591,1,0,0,0,13596,13592,
        1,0,0,0,13597,13598,1,0,0,0,13598,13599,5,1187,0,0,13599,13600,3,
        1070,535,0,13600,1069,1,0,0,0,13601,13602,7,156,0,0,13602,13603,
        5,1192,0,0,13603,13604,5,1170,0,0,13604,13605,5,1193,0,0,13605,1071,
        1,0,0,0,13606,13613,5,1166,0,0,13607,13613,3,1162,581,0,13608,13609,
        5,1192,0,0,13609,13610,3,928,464,0,13610,13611,5,1193,0,0,13611,
        13613,1,0,0,0,13612,13606,1,0,0,0,13612,13607,1,0,0,0,13612,13608,
        1,0,0,0,13613,13614,1,0,0,0,13614,13615,5,1187,0,0,13615,13616,3,
        1074,537,0,13616,1073,1,0,0,0,13617,13618,7,157,0,0,13618,13619,
        5,1192,0,0,13619,13620,5,1170,0,0,13620,13621,5,1193,0,0,13621,1075,
        1,0,0,0,13622,13623,5,388,0,0,13623,13624,5,1192,0,0,13624,13625,
        3,914,457,0,13625,13626,5,1193,0,0,13626,13653,1,0,0,0,13627,13628,
        5,391,0,0,13628,13629,5,1192,0,0,13629,13630,3,914,457,0,13630,13631,
        5,1194,0,0,13631,13632,3,914,457,0,13632,13633,5,1193,0,0,13633,
        13653,1,0,0,0,13634,13635,5,392,0,0,13635,13636,5,1192,0,0,13636,
        13653,5,1193,0,0,13637,13638,5,466,0,0,13638,13639,5,1192,0,0,13639,
        13640,3,914,457,0,13640,13641,5,1193,0,0,13641,13653,1,0,0,0,13642,
        13643,5,393,0,0,13643,13644,5,1192,0,0,13644,13645,3,914,457,0,13645,
        13646,5,1194,0,0,13646,13647,3,914,457,0,13647,13648,5,1193,0,0,
        13648,13653,1,0,0,0,13649,13650,5,989,0,0,13650,13651,5,1192,0,0,
        13651,13653,5,1193,0,0,13652,13622,1,0,0,0,13652,13627,1,0,0,0,13652,
        13634,1,0,0,0,13652,13637,1,0,0,0,13652,13642,1,0,0,0,13652,13649,
        1,0,0,0,13653,1077,1,0,0,0,13654,13655,5,417,0,0,13655,13664,5,1197,
        0,0,13656,13657,5,394,0,0,13657,13658,5,1192,0,0,13658,13665,5,1193,
        0,0,13659,13660,5,683,0,0,13660,13661,5,1192,0,0,13661,13662,3,914,
        457,0,13662,13663,5,1193,0,0,13663,13665,1,0,0,0,13664,13656,1,0,
        0,0,13664,13659,1,0,0,0,13665,1079,1,0,0,0,13666,13673,5,1166,0,
        0,13667,13673,3,1162,581,0,13668,13669,5,1192,0,0,13669,13670,3,
        928,464,0,13670,13671,5,1193,0,0,13671,13673,1,0,0,0,13672,13666,
        1,0,0,0,13672,13667,1,0,0,0,13672,13668,1,0,0,0,13673,13674,1,0,
        0,0,13674,13675,5,1187,0,0,13675,13676,5,599,0,0,13676,13677,5,1192,
        0,0,13677,13678,5,1170,0,0,13678,13679,5,1193,0,0,13679,1081,1,0,
        0,0,13680,13681,5,1059,0,0,13681,13682,3,914,457,0,13682,13683,5,
        979,0,0,13683,13684,3,914,457,0,13684,1083,1,0,0,0,13685,13686,5,
        1059,0,0,13686,13687,3,938,469,0,13687,13688,5,979,0,0,13688,13689,
        3,914,457,0,13689,1085,1,0,0,0,13690,13692,5,56,0,0,13691,13690,
        1,0,0,0,13691,13692,1,0,0,0,13692,13693,1,0,0,0,13693,13694,3,1106,
        553,0,13694,1087,1,0,0,0,13695,13697,5,56,0,0,13696,13695,1,0,0,
        0,13696,13697,1,0,0,0,13697,13698,1,0,0,0,13698,13699,3,1090,545,
        0,13699,1089,1,0,0,0,13700,13701,3,1208,604,0,13701,1091,1,0,0,0,
        13702,13703,5,1063,0,0,13703,13704,5,1192,0,0,13704,13711,3,1100,
        550,0,13705,13707,5,1194,0,0,13706,13705,1,0,0,0,13706,13707,1,0,
        0,0,13707,13708,1,0,0,0,13708,13710,3,1100,550,0,13709,13706,1,0,
        0,0,13710,13713,1,0,0,0,13711,13709,1,0,0,0,13711,13712,1,0,0,0,
        13712,13714,1,0,0,0,13713,13711,1,0,0,0,13714,13715,5,1193,0,0,13715,
        1093,1,0,0,0,13716,13717,5,1192,0,0,13717,13718,3,1100,550,0,13718,
        13719,5,1193,0,0,13719,1095,1,0,0,0,13720,13722,3,1098,549,0,13721,
        13720,1,0,0,0,13722,13723,1,0,0,0,13723,13721,1,0,0,0,13723,13724,
        1,0,0,0,13724,1097,1,0,0,0,13725,13726,7,158,0,0,13726,1099,1,0,
        0,0,13727,13784,5,601,0,0,13728,13747,5,447,0,0,13729,13730,5,1192,
        0,0,13730,13735,3,1102,551,0,13731,13732,5,1194,0,0,13732,13734,
        3,1102,551,0,13733,13731,1,0,0,0,13734,13737,1,0,0,0,13735,13733,
        1,0,0,0,13735,13736,1,0,0,0,13736,13738,1,0,0,0,13737,13735,1,0,
        0,0,13738,13739,5,1193,0,0,13739,13748,1,0,0,0,13740,13741,5,1174,
        0,0,13741,13742,5,1192,0,0,13742,13743,3,1102,551,0,13743,13744,
        5,1193,0,0,13744,13748,1,0,0,0,13745,13746,5,1174,0,0,13746,13748,
        3,1102,551,0,13747,13729,1,0,0,0,13747,13740,1,0,0,0,13747,13745,
        1,0,0,0,13748,13784,1,0,0,0,13749,13757,5,368,0,0,13750,13751,5,
        1192,0,0,13751,13752,3,1102,551,0,13752,13753,5,1192,0,0,13753,13754,
        3,1170,585,0,13754,13755,5,1193,0,0,13755,13756,5,1193,0,0,13756,
        13758,1,0,0,0,13757,13750,1,0,0,0,13757,13758,1,0,0,0,13758,13784,
        1,0,0,0,13759,13784,5,367,0,0,13760,13784,5,419,0,0,13761,13784,
        5,606,0,0,13762,13784,5,618,0,0,13763,13784,5,680,0,0,13764,13784,
        5,755,0,0,13765,13784,5,756,0,0,13766,13784,5,758,0,0,13767,13784,
        5,760,0,0,13768,13784,5,787,0,0,13769,13784,5,829,0,0,13770,13784,
        5,875,0,0,13771,13784,5,908,0,0,13772,13773,5,916,0,0,13773,13774,
        5,1174,0,0,13774,13784,5,1168,0,0,13775,13784,5,969,0,0,13776,13784,
        5,970,0,0,13777,13784,5,1030,0,0,13778,13784,5,1073,0,0,13779,13784,
        5,487,0,0,13780,13784,5,485,0,0,13781,13784,5,432,0,0,13782,13784,
        5,436,0,0,13783,13727,1,0,0,0,13783,13728,1,0,0,0,13783,13749,1,
        0,0,0,13783,13759,1,0,0,0,13783,13760,1,0,0,0,13783,13761,1,0,0,
        0,13783,13762,1,0,0,0,13783,13763,1,0,0,0,13783,13764,1,0,0,0,13783,
        13765,1,0,0,0,13783,13766,1,0,0,0,13783,13767,1,0,0,0,13783,13768,
        1,0,0,0,13783,13769,1,0,0,0,13783,13770,1,0,0,0,13783,13771,1,0,
        0,0,13783,13772,1,0,0,0,13783,13775,1,0,0,0,13783,13776,1,0,0,0,
        13783,13777,1,0,0,0,13783,13778,1,0,0,0,13783,13779,1,0,0,0,13783,
        13780,1,0,0,0,13783,13781,1,0,0,0,13783,13782,1,0,0,0,13784,1101,
        1,0,0,0,13785,13788,3,1208,604,0,13786,13788,5,1168,0,0,13787,13785,
        1,0,0,0,13787,13786,1,0,0,0,13788,1103,1,0,0,0,13789,13790,5,1192,
        0,0,13790,13795,3,1106,553,0,13791,13792,5,1194,0,0,13792,13794,
        3,1106,553,0,13793,13791,1,0,0,0,13794,13797,1,0,0,0,13795,13793,
        1,0,0,0,13795,13796,1,0,0,0,13796,13798,1,0,0,0,13797,13795,1,0,
        0,0,13798,13799,5,1193,0,0,13799,1105,1,0,0,0,13800,13803,3,1208,
        604,0,13801,13803,5,1170,0,0,13802,13800,1,0,0,0,13802,13801,1,0,
        0,0,13803,1107,1,0,0,0,13804,13805,5,1042,0,0,13805,13806,5,1192,
        0,0,13806,13807,3,1110,555,0,13807,13815,5,1193,0,0,13808,13809,
        5,1194,0,0,13809,13810,5,1192,0,0,13810,13811,3,1110,555,0,13811,
        13812,5,1193,0,0,13812,13814,1,0,0,0,13813,13808,1,0,0,0,13814,13817,
        1,0,0,0,13815,13813,1,0,0,0,13815,13816,1,0,0,0,13816,1109,1,0,0,
        0,13817,13815,1,0,0,0,13818,13823,3,914,457,0,13819,13820,5,1194,
        0,0,13820,13822,3,914,457,0,13821,13819,1,0,0,0,13822,13825,1,0,
        0,0,13823,13821,1,0,0,0,13823,13824,1,0,0,0,13824,1111,1,0,0,0,13825,
        13823,1,0,0,0,13826,13827,7,159,0,0,13827,13828,5,1192,0,0,13828,
        13829,5,1193,0,0,13829,13837,3,1120,560,0,13830,13831,5,627,0,0,
        13831,13832,5,1192,0,0,13832,13833,3,914,457,0,13833,13834,5,1193,
        0,0,13834,13835,3,1120,560,0,13835,13837,1,0,0,0,13836,13826,1,0,
        0,0,13836,13830,1,0,0,0,13837,1113,1,0,0,0,13838,13839,7,160,0,0,
        13839,13840,5,1192,0,0,13840,13841,3,1118,559,0,13841,13843,5,1193,
        0,0,13842,13844,3,1120,560,0,13843,13842,1,0,0,0,13843,13844,1,0,
        0,0,13844,13871,1,0,0,0,13845,13846,7,161,0,0,13846,13849,5,1192,
        0,0,13847,13850,5,1198,0,0,13848,13850,3,1118,559,0,13849,13847,
        1,0,0,0,13849,13848,1,0,0,0,13850,13851,1,0,0,0,13851,13853,5,1193,
        0,0,13852,13854,3,1120,560,0,13853,13852,1,0,0,0,13853,13854,1,0,
        0,0,13854,13871,1,0,0,0,13855,13856,5,139,0,0,13856,13857,5,1192,
        0,0,13857,13858,3,1118,559,0,13858,13859,5,1193,0,0,13859,13871,
        1,0,0,0,13860,13861,5,404,0,0,13861,13862,5,1192,0,0,13862,13863,
        3,914,457,0,13863,13864,5,1193,0,0,13864,13871,1,0,0,0,13865,13866,
        5,405,0,0,13866,13867,5,1192,0,0,13867,13868,3,1110,555,0,13868,
        13869,5,1193,0,0,13869,13871,1,0,0,0,13870,13838,1,0,0,0,13870,13845,
        1,0,0,0,13870,13855,1,0,0,0,13870,13860,1,0,0,0,13870,13865,1,0,
        0,0,13871,1115,1,0,0,0,13872,13873,7,162,0,0,13873,13874,5,1192,
        0,0,13874,13875,3,914,457,0,13875,13876,5,1193,0,0,13876,13877,3,
        1120,560,0,13877,13924,1,0,0,0,13878,13879,7,163,0,0,13879,13880,
        5,1192,0,0,13880,13887,3,914,457,0,13881,13882,5,1194,0,0,13882,
        13885,3,914,457,0,13883,13884,5,1194,0,0,13884,13886,3,914,457,0,
        13885,13883,1,0,0,0,13885,13886,1,0,0,0,13886,13888,1,0,0,0,13887,
        13881,1,0,0,0,13887,13888,1,0,0,0,13888,13889,1,0,0,0,13889,13890,
        5,1193,0,0,13890,13891,3,1120,560,0,13891,13924,1,0,0,0,13892,13893,
        7,164,0,0,13893,13894,5,1192,0,0,13894,13895,5,1193,0,0,13895,13896,
        5,672,0,0,13896,13900,5,1192,0,0,13897,13898,5,687,0,0,13898,13899,
        5,110,0,0,13899,13901,3,1110,555,0,13900,13897,1,0,0,0,13900,13901,
        1,0,0,0,13901,13902,1,0,0,0,13902,13903,3,954,477,0,13903,13904,
        5,1193,0,0,13904,13924,1,0,0,0,13905,13906,7,165,0,0,13906,13907,
        5,1192,0,0,13907,13908,3,914,457,0,13908,13909,5,1193,0,0,13909,
        13910,5,1064,0,0,13910,13911,5,403,0,0,13911,13912,5,1192,0,0,13912,
        13913,3,954,477,0,13913,13914,5,1193,0,0,13914,13915,5,672,0,0,13915,
        13919,5,1192,0,0,13916,13917,5,687,0,0,13917,13918,5,110,0,0,13918,
        13920,3,1110,555,0,13919,13916,1,0,0,0,13919,13920,1,0,0,0,13920,
        13921,1,0,0,0,13921,13922,5,1193,0,0,13922,13924,1,0,0,0,13923,13872,
        1,0,0,0,13923,13878,1,0,0,0,13923,13892,1,0,0,0,13923,13905,1,0,
        0,0,13924,1117,1,0,0,0,13925,13927,7,136,0,0,13926,13925,1,0,0,0,
        13926,13927,1,0,0,0,13927,13928,1,0,0,0,13928,13929,3,914,457,0,
        13929,1119,1,0,0,0,13930,13931,5,672,0,0,13931,13935,5,1192,0,0,
        13932,13933,5,687,0,0,13933,13934,5,110,0,0,13934,13936,3,1110,555,
        0,13935,13932,1,0,0,0,13935,13936,1,0,0,0,13936,13938,1,0,0,0,13937,
        13939,3,954,477,0,13938,13937,1,0,0,0,13938,13939,1,0,0,0,13939,
        13941,1,0,0,0,13940,13942,3,1122,561,0,13941,13940,1,0,0,0,13941,
        13942,1,0,0,0,13942,13943,1,0,0,0,13943,13944,5,1193,0,0,13944,1121,
        1,0,0,0,13945,13946,7,166,0,0,13946,13947,3,1124,562,0,13947,1123,
        1,0,0,0,13948,13955,3,1128,564,0,13949,13950,5,92,0,0,13950,13951,
        3,1126,563,0,13951,13952,5,37,0,0,13952,13953,3,1126,563,0,13953,
        13955,1,0,0,0,13954,13948,1,0,0,0,13954,13949,1,0,0,0,13955,1125,
        1,0,0,0,13956,13959,3,1128,564,0,13957,13959,3,1130,565,0,13958,
        13956,1,0,0,0,13958,13957,1,0,0,0,13959,1127,1,0,0,0,13960,13961,
        5,1015,0,0,13961,13967,5,714,0,0,13962,13963,5,1168,0,0,13963,13967,
        5,714,0,0,13964,13965,5,204,0,0,13965,13967,5,824,0,0,13966,13960,
        1,0,0,0,13966,13962,1,0,0,0,13966,13964,1,0,0,0,13967,1129,1,0,0,
        0,13968,13969,5,1015,0,0,13969,13973,5,362,0,0,13970,13971,5,1168,
        0,0,13971,13973,5,362,0,0,13972,13968,1,0,0,0,13972,13970,1,0,0,
        0,13973,1131,1,0,0,0,13974,13975,5,351,0,0,13975,13980,3,1134,567,
        0,13976,13977,5,1194,0,0,13977,13979,3,1134,567,0,13978,13976,1,
        0,0,0,13979,13982,1,0,0,0,13980,13978,1,0,0,0,13980,13981,1,0,0,
        0,13981,14009,1,0,0,0,13982,13980,1,0,0,0,13983,13984,5,247,0,0,
        13984,13987,5,1174,0,0,13985,13988,3,1208,604,0,13986,13988,5,1170,
        0,0,13987,13985,1,0,0,0,13987,13986,1,0,0,0,13988,14009,1,0,0,0,
        13989,13990,5,246,0,0,13990,13993,5,1174,0,0,13991,13994,3,1208,
        604,0,13992,13994,5,1170,0,0,13993,13991,1,0,0,0,13993,13992,1,0,
        0,0,13994,14009,1,0,0,0,13995,13996,5,588,0,0,13996,13997,5,1174,
        0,0,13997,14009,7,17,0,0,13998,13999,5,997,0,0,13999,14000,5,1174,
        0,0,14000,14009,7,17,0,0,14001,14002,5,1009,0,0,14002,14003,5,1174,
        0,0,14003,14009,5,1168,0,0,14004,14005,5,234,0,0,14005,14009,7,17,
        0,0,14006,14007,5,1004,0,0,14007,14009,7,17,0,0,14008,13974,1,0,
        0,0,14008,13983,1,0,0,0,14008,13989,1,0,0,0,14008,13995,1,0,0,0,
        14008,13998,1,0,0,0,14008,14001,1,0,0,0,14008,14004,1,0,0,0,14008,
        14006,1,0,0,0,14009,1133,1,0,0,0,14010,14017,5,1192,0,0,14011,14012,
        5,609,0,0,14012,14013,5,1174,0,0,14013,14018,7,167,0,0,14014,14015,
        5,267,0,0,14015,14016,5,1174,0,0,14016,14018,5,1170,0,0,14017,14011,
        1,0,0,0,14017,14014,1,0,0,0,14018,14019,1,0,0,0,14019,14020,5,1193,
        0,0,14020,1135,1,0,0,0,14021,14024,3,1138,569,0,14022,14024,3,1140,
        570,0,14023,14021,1,0,0,0,14023,14022,1,0,0,0,14024,1137,1,0,0,0,
        14025,14026,5,342,0,0,14026,14029,3,1208,604,0,14027,14028,5,179,
        0,0,14028,14030,5,351,0,0,14029,14027,1,0,0,0,14029,14030,1,0,0,
        0,14030,14032,1,0,0,0,14031,14033,5,243,0,0,14032,14031,1,0,0,0,
        14032,14033,1,0,0,0,14033,14036,1,0,0,0,14034,14035,5,179,0,0,14035,
        14037,5,562,0,0,14036,14034,1,0,0,0,14036,14037,1,0,0,0,14037,14038,
        1,0,0,0,14038,14043,3,1140,570,0,14039,14040,5,1194,0,0,14040,14042,
        3,1140,570,0,14041,14039,1,0,0,0,14042,14045,1,0,0,0,14043,14041,
        1,0,0,0,14043,14044,1,0,0,0,14044,1139,1,0,0,0,14045,14043,1,0,0,
        0,14046,14047,5,1192,0,0,14047,14048,5,584,0,0,14048,14051,5,1174,
        0,0,14049,14052,3,1208,604,0,14050,14052,5,1170,0,0,14051,14049,
        1,0,0,0,14051,14050,1,0,0,0,14052,14054,1,0,0,0,14053,14055,5,1194,
        0,0,14054,14053,1,0,0,0,14054,14055,1,0,0,0,14055,14056,1,0,0,0,
        14056,14057,5,347,0,0,14057,14058,5,1174,0,0,14058,14060,5,1170,
        0,0,14059,14061,5,1194,0,0,14060,14059,1,0,0,0,14060,14061,1,0,0,
        0,14061,14068,1,0,0,0,14062,14063,5,905,0,0,14063,14064,5,1174,0,
        0,14064,14066,3,1218,609,0,14065,14067,5,1194,0,0,14066,14065,1,
        0,0,0,14066,14067,1,0,0,0,14067,14069,1,0,0,0,14068,14062,1,0,0,
        0,14068,14069,1,0,0,0,14069,14079,1,0,0,0,14070,14071,5,540,0,0,
        14071,14074,5,1174,0,0,14072,14075,3,1218,609,0,14073,14075,5,1022,
        0,0,14074,14072,1,0,0,0,14074,14073,1,0,0,0,14075,14077,1,0,0,0,
        14076,14078,5,1194,0,0,14077,14076,1,0,0,0,14077,14078,1,0,0,0,14078,
        14080,1,0,0,0,14079,14070,1,0,0,0,14079,14080,1,0,0,0,14080,14087,
        1,0,0,0,14081,14082,5,346,0,0,14082,14083,5,1174,0,0,14083,14085,
        3,1218,609,0,14084,14086,5,1194,0,0,14085,14084,1,0,0,0,14085,14086,
        1,0,0,0,14086,14088,1,0,0,0,14087,14081,1,0,0,0,14087,14088,1,0,
        0,0,14088,14089,1,0,0,0,14089,14090,5,1193,0,0,14090,1141,1,0,0,
        0,14091,14092,3,1208,604,0,14092,14093,5,1187,0,0,14093,14094,3,
        1208,604,0,14094,14095,5,1187,0,0,14095,14096,3,1208,604,0,14096,
        14097,5,1187,0,0,14097,14109,1,0,0,0,14098,14099,3,1208,604,0,14099,
        14101,5,1187,0,0,14100,14102,3,1208,604,0,14101,14100,1,0,0,0,14101,
        14102,1,0,0,0,14102,14103,1,0,0,0,14103,14104,5,1187,0,0,14104,14109,
        1,0,0,0,14105,14106,3,1208,604,0,14106,14107,5,1187,0,0,14107,14109,
        1,0,0,0,14108,14091,1,0,0,0,14108,14098,1,0,0,0,14108,14105,1,0,
        0,0,14108,14109,1,0,0,0,14109,14110,1,0,0,0,14110,14111,3,1208,604,
        0,14111,1143,1,0,0,0,14112,14118,3,1208,604,0,14113,14114,3,1208,
        604,0,14114,14115,5,1187,0,0,14115,14116,3,1208,604,0,14116,14118,
        1,0,0,0,14117,14112,1,0,0,0,14117,14113,1,0,0,0,14118,1145,1,0,0,
        0,14119,14125,3,1208,604,0,14120,14121,3,1208,604,0,14121,14122,
        5,1187,0,0,14122,14123,3,1208,604,0,14123,14125,1,0,0,0,14124,14119,
        1,0,0,0,14124,14120,1,0,0,0,14125,1147,1,0,0,0,14126,14127,3,1208,
        604,0,14127,14128,5,1187,0,0,14128,14129,5,1187,0,0,14129,14130,
        3,1208,604,0,14130,14131,5,1187,0,0,14131,14150,1,0,0,0,14132,14133,
        3,1208,604,0,14133,14134,5,1187,0,0,14134,14135,3,1208,604,0,14135,
        14136,5,1187,0,0,14136,14137,3,1208,604,0,14137,14138,5,1187,0,0,
        14138,14150,1,0,0,0,14139,14140,3,1208,604,0,14140,14142,5,1187,
        0,0,14141,14143,3,1208,604,0,14142,14141,1,0,0,0,14142,14143,1,0,
        0,0,14143,14144,1,0,0,0,14144,14145,5,1187,0,0,14145,14150,1,0,0,
        0,14146,14147,3,1208,604,0,14147,14148,5,1187,0,0,14148,14150,1,
        0,0,0,14149,14126,1,0,0,0,14149,14132,1,0,0,0,14149,14139,1,0,0,
        0,14149,14146,1,0,0,0,14149,14150,1,0,0,0,14150,14151,1,0,0,0,14151,
        14152,3,1208,604,0,14152,1149,1,0,0,0,14153,14154,3,1208,604,0,14154,
        14156,5,1187,0,0,14155,14157,3,1208,604,0,14156,14155,1,0,0,0,14156,
        14157,1,0,0,0,14157,14158,1,0,0,0,14158,14159,5,1187,0,0,14159,14164,
        1,0,0,0,14160,14161,3,1208,604,0,14161,14162,5,1187,0,0,14162,14164,
        1,0,0,0,14163,14153,1,0,0,0,14163,14160,1,0,0,0,14163,14164,1,0,
        0,0,14164,14167,1,0,0,0,14165,14168,3,1208,604,0,14166,14168,5,100,
        0,0,14167,14165,1,0,0,0,14167,14166,1,0,0,0,14168,1151,1,0,0,0,14169,
        14170,3,1208,604,0,14170,14171,5,1187,0,0,14171,14173,1,0,0,0,14172,
        14169,1,0,0,0,14172,14173,1,0,0,0,14173,14174,1,0,0,0,14174,14175,
        3,1208,604,0,14175,1153,1,0,0,0,14176,14177,3,1208,604,0,14177,14178,
        5,1187,0,0,14178,14180,1,0,0,0,14179,14176,1,0,0,0,14179,14180,1,
        0,0,0,14180,14181,1,0,0,0,14181,14182,3,1208,604,0,14182,1155,1,
        0,0,0,14183,14185,3,1208,604,0,14184,14183,1,0,0,0,14184,14185,1,
        0,0,0,14185,14186,1,0,0,0,14186,14188,5,1187,0,0,14187,14189,3,1208,
        604,0,14188,14187,1,0,0,0,14188,14189,1,0,0,0,14189,14190,1,0,0,
        0,14190,14191,5,1187,0,0,14191,14194,3,1208,604,0,14192,14194,3,
        1154,577,0,14193,14184,1,0,0,0,14193,14192,1,0,0,0,14194,1157,1,
        0,0,0,14195,14197,3,1208,604,0,14196,14195,1,0,0,0,14196,14197,1,
        0,0,0,14197,14198,1,0,0,0,14198,14200,5,1187,0,0,14199,14201,3,1208,
        604,0,14200,14199,1,0,0,0,14200,14201,1,0,0,0,14201,14202,1,0,0,
        0,14202,14204,5,1187,0,0,14203,14205,3,1208,604,0,14204,14203,1,
        0,0,0,14204,14205,1,0,0,0,14205,14206,1,0,0,0,14206,14207,5,1187,
        0,0,14207,14210,3,1208,604,0,14208,14210,3,1156,578,0,14209,14196,
        1,0,0,0,14209,14208,1,0,0,0,14210,1159,1,0,0,0,14211,14214,3,1148,
        574,0,14212,14214,5,1166,0,0,14213,14211,1,0,0,0,14213,14212,1,0,
        0,0,14214,1161,1,0,0,0,14215,14219,5,253,0,0,14216,14219,5,458,0,
        0,14217,14219,3,1148,574,0,14218,14215,1,0,0,0,14218,14216,1,0,0,
        0,14218,14217,1,0,0,0,14219,14220,1,0,0,0,14220,14222,5,1187,0,0,
        14221,14218,1,0,0,0,14221,14222,1,0,0,0,14222,14226,1,0,0,0,14223,
        14227,3,1208,604,0,14224,14225,5,1191,0,0,14225,14227,7,168,0,0,
        14226,14223,1,0,0,0,14226,14224,1,0,0,0,14227,1163,1,0,0,0,14228,
        14230,3,1208,604,0,14229,14231,7,72,0,0,14230,14229,1,0,0,0,14230,
        14231,1,0,0,0,14231,14239,1,0,0,0,14232,14233,5,1194,0,0,14233,14235,
        3,1208,604,0,14234,14236,7,72,0,0,14235,14234,1,0,0,0,14235,14236,
        1,0,0,0,14236,14238,1,0,0,0,14237,14232,1,0,0,0,14238,14241,1,0,
        0,0,14239,14237,1,0,0,0,14239,14240,1,0,0,0,14240,1165,1,0,0,0,14241,
        14239,1,0,0,0,14242,14247,3,1168,584,0,14243,14244,5,1194,0,0,14244,
        14246,3,1168,584,0,14245,14243,1,0,0,0,14246,14249,1,0,0,0,14247,
        14245,1,0,0,0,14247,14248,1,0,0,0,14248,1167,1,0,0,0,14249,14247,
        1,0,0,0,14250,14252,3,1208,604,0,14251,14250,1,0,0,0,14251,14252,
        1,0,0,0,14252,14253,1,0,0,0,14253,14255,5,1187,0,0,14254,14251,1,
        0,0,0,14255,14258,1,0,0,0,14256,14254,1,0,0,0,14256,14257,1,0,0,
        0,14257,14259,1,0,0,0,14258,14256,1,0,0,0,14259,14260,3,1208,604,
        0,14260,1169,1,0,0,0,14261,14266,3,1208,604,0,14262,14263,5,1194,
        0,0,14263,14265,3,1208,604,0,14264,14262,1,0,0,0,14265,14268,1,0,
        0,0,14266,14264,1,0,0,0,14266,14267,1,0,0,0,14267,1171,1,0,0,0,14268,
        14266,1,0,0,0,14269,14272,3,1208,604,0,14270,14272,5,1166,0,0,14271,
        14269,1,0,0,0,14271,14270,1,0,0,0,14272,1173,1,0,0,0,14273,14274,
        7,17,0,0,14274,1175,1,0,0,0,14275,14276,7,119,0,0,14276,1177,1,0,
        0,0,14277,14279,5,614,0,0,14278,14277,1,0,0,0,14278,14279,1,0,0,
        0,14279,14280,1,0,0,0,14280,14281,5,630,0,0,14281,1179,1,0,0,0,14282,
        14288,3,1158,579,0,14283,14288,5,817,0,0,14284,14288,5,502,0,0,14285,
        14288,5,94,0,0,14286,14288,5,138,0,0,14287,14282,1,0,0,0,14287,14283,
        1,0,0,0,14287,14284,1,0,0,0,14287,14285,1,0,0,0,14287,14286,1,0,
        0,0,14288,1181,1,0,0,0,14289,14290,5,90,0,0,14290,14291,5,189,0,
        0,14291,14292,5,984,0,0,14292,14293,5,1192,0,0,14293,14294,5,1166,
        0,0,14294,14295,5,1193,0,0,14295,14296,5,983,0,0,14296,14297,5,1174,
        0,0,14297,14299,3,486,243,0,14298,14300,5,1195,0,0,14299,14298,1,
        0,0,0,14299,14300,1,0,0,0,14300,1183,1,0,0,0,14301,14302,5,90,0,
        0,14302,14304,5,264,0,0,14303,14305,5,189,0,0,14304,14303,1,0,0,
        0,14304,14305,1,0,0,0,14305,14306,1,0,0,0,14306,14307,5,1166,0,0,
        14307,14308,5,378,0,0,14308,14309,5,878,0,0,14309,14310,3,1188,594,
        0,14310,14311,5,986,0,0,14311,14312,5,878,0,0,14312,14315,3,1188,
        594,0,14313,14314,5,1194,0,0,14314,14316,5,1170,0,0,14315,14313,
        1,0,0,0,14315,14316,1,0,0,0,14316,14317,1,0,0,0,14317,14318,5,649,
        0,0,14318,14319,5,186,0,0,14319,14342,3,1186,593,0,14320,14327,5,
        1063,0,0,14321,14322,7,169,0,0,14322,14323,5,1174,0,0,14323,14325,
        5,1166,0,0,14324,14326,5,1194,0,0,14325,14324,1,0,0,0,14325,14326,
        1,0,0,0,14326,14328,1,0,0,0,14327,14321,1,0,0,0,14327,14328,1,0,
        0,0,14328,14335,1,0,0,0,14329,14330,5,506,0,0,14330,14331,5,1174,
        0,0,14331,14333,7,0,0,0,14332,14334,5,1194,0,0,14333,14332,1,0,0,
        0,14333,14334,1,0,0,0,14334,14336,1,0,0,0,14335,14329,1,0,0,0,14335,
        14336,1,0,0,0,14336,14340,1,0,0,0,14337,14338,5,295,0,0,14338,14339,
        5,1174,0,0,14339,14341,3,1174,587,0,14340,14337,1,0,0,0,14340,14341,
        1,0,0,0,14341,14343,1,0,0,0,14342,14320,1,0,0,0,14342,14343,1,0,
        0,0,14343,14345,1,0,0,0,14344,14346,5,1195,0,0,14345,14344,1,0,0,
        0,14345,14346,1,0,0,0,14346,1185,1,0,0,0,14347,14350,3,1208,604,
        0,14348,14350,3,914,457,0,14349,14347,1,0,0,0,14349,14348,1,0,0,
        0,14350,1187,1,0,0,0,14351,14354,3,1208,604,0,14352,14354,3,914,
        457,0,14353,14351,1,0,0,0,14353,14352,1,0,0,0,14354,1189,1,0,0,0,
        14355,14356,5,297,0,0,14356,14357,5,189,0,0,14357,14359,5,1166,0,
        0,14358,14360,5,1195,0,0,14359,14358,1,0,0,0,14359,14360,1,0,0,0,
        14360,14373,1,0,0,0,14361,14368,5,1063,0,0,14362,14363,5,301,0,0,
        14363,14364,5,1174,0,0,14364,14365,7,1,0,0,14365,14366,5,259,0,0,
        14366,14367,5,1174,0,0,14367,14369,7,1,0,0,14368,14362,1,0,0,0,14368,
        14369,1,0,0,0,14369,14371,1,0,0,0,14370,14372,5,145,0,0,14371,14370,
        1,0,0,0,14371,14372,1,0,0,0,14372,14374,1,0,0,0,14373,14361,1,0,
        0,0,14373,14374,1,0,0,0,14374,1191,1,0,0,0,14375,14377,5,1056,0,
        0,14376,14375,1,0,0,0,14376,14377,1,0,0,0,14377,14378,1,0,0,0,14378,
        14379,5,1192,0,0,14379,14380,3,1194,597,0,14380,14386,5,1193,0,0,
        14381,14383,5,1194,0,0,14382,14381,1,0,0,0,14382,14383,1,0,0,0,14383,
        14384,1,0,0,0,14384,14385,5,983,0,0,14385,14387,3,486,243,0,14386,
        14382,1,0,0,0,14386,14387,1,0,0,0,14387,14389,1,0,0,0,14388,14390,
        5,1195,0,0,14389,14388,1,0,0,0,14389,14390,1,0,0,0,14390,1193,1,
        0,0,0,14391,14392,5,387,0,0,14392,14393,5,189,0,0,14393,14394,5,
        403,0,0,14394,14395,7,1,0,0,14395,14396,5,378,0,0,14396,14398,3,
        1196,598,0,14397,14399,5,1195,0,0,14398,14397,1,0,0,0,14398,14399,
        1,0,0,0,14399,1195,1,0,0,0,14400,14401,3,1208,604,0,14401,14402,
        5,1187,0,0,14402,14403,3,1208,604,0,14403,14404,5,1187,0,0,14404,
        14405,3,1208,604,0,14405,14408,1,0,0,0,14406,14408,3,1208,604,0,
        14407,14400,1,0,0,0,14407,14406,1,0,0,0,14408,1197,1,0,0,0,14409,
        14410,5,871,0,0,14410,14411,5,649,0,0,14411,14412,5,189,0,0,14412,
        14413,7,1,0,0,14413,14414,5,565,0,0,14414,14415,5,1010,0,0,14415,
        14419,3,914,457,0,14416,14417,5,1192,0,0,14417,14418,7,1,0,0,14418,
        14420,5,1193,0,0,14419,14416,1,0,0,0,14419,14420,1,0,0,0,14420,14422,
        1,0,0,0,14421,14423,5,1195,0,0,14422,14421,1,0,0,0,14422,14423,1,
        0,0,0,14423,1199,1,0,0,0,14424,14425,7,170,0,0,14425,14426,5,1192,
        0,0,14426,14427,5,537,0,0,14427,14455,5,1193,0,0,14428,14429,3,1208,
        604,0,14429,14430,5,1192,0,0,14430,14431,5,1168,0,0,14431,14432,
        5,1194,0,0,14432,14433,5,1168,0,0,14433,14434,5,1193,0,0,14434,14455,
        1,0,0,0,14435,14436,3,1208,604,0,14436,14437,5,1192,0,0,14437,14438,
        5,1168,0,0,14438,14439,5,1193,0,0,14439,14455,1,0,0,0,14440,14441,
        3,1208,604,0,14441,14447,5,424,0,0,14442,14443,5,1192,0,0,14443,
        14444,5,1168,0,0,14444,14445,5,1194,0,0,14445,14446,5,1168,0,0,14446,
        14448,5,1193,0,0,14447,14442,1,0,0,0,14447,14448,1,0,0,0,14448,14455,
        1,0,0,0,14449,14451,5,277,0,0,14450,14452,5,715,0,0,14451,14450,
        1,0,0,0,14451,14452,1,0,0,0,14452,14455,1,0,0,0,14453,14455,3,1208,
        604,0,14454,14424,1,0,0,0,14454,14428,1,0,0,0,14454,14435,1,0,0,
        0,14454,14440,1,0,0,0,14454,14449,1,0,0,0,14454,14453,1,0,0,0,14455,
        1201,1,0,0,0,14456,14472,5,1170,0,0,14457,14472,5,1171,0,0,14458,
        14460,5,1202,0,0,14459,14458,1,0,0,0,14459,14460,1,0,0,0,14460,14461,
        1,0,0,0,14461,14472,7,137,0,0,14462,14464,5,1202,0,0,14463,14462,
        1,0,0,0,14463,14464,1,0,0,0,14464,14465,1,0,0,0,14465,14467,5,1191,
        0,0,14466,14468,7,134,0,0,14467,14466,1,0,0,0,14467,14468,1,0,0,
        0,14468,14469,1,0,0,0,14469,14472,7,171,0,0,14470,14472,3,916,458,
        0,14471,14456,1,0,0,0,14471,14457,1,0,0,0,14471,14459,1,0,0,0,14471,
        14463,1,0,0,0,14471,14470,1,0,0,0,14472,1203,1,0,0,0,14473,14483,
        5,1170,0,0,14474,14483,5,1171,0,0,14475,14483,7,137,0,0,14476,14478,
        5,1191,0,0,14477,14479,7,134,0,0,14478,14477,1,0,0,0,14478,14479,
        1,0,0,0,14479,14480,1,0,0,0,14480,14483,7,171,0,0,14481,14483,3,
        916,458,0,14482,14473,1,0,0,0,14482,14474,1,0,0,0,14482,14475,1,
        0,0,0,14482,14476,1,0,0,0,14482,14481,1,0,0,0,14483,1205,1,0,0,0,
        14484,14485,7,172,0,0,14485,1207,1,0,0,0,14486,14494,5,1169,0,0,
        14487,14494,5,1167,0,0,14488,14494,5,1162,0,0,14489,14494,5,1163,
        0,0,14490,14494,5,1165,0,0,14491,14494,3,1206,603,0,14492,14494,
        5,750,0,0,14493,14486,1,0,0,0,14493,14487,1,0,0,0,14493,14488,1,
        0,0,0,14493,14489,1,0,0,0,14493,14490,1,0,0,0,14493,14491,1,0,0,
        0,14493,14492,1,0,0,0,14494,1209,1,0,0,0,14495,14496,5,1169,0,0,
        14496,1211,1,0,0,0,14497,14500,3,1208,604,0,14498,14500,5,1170,0,
        0,14499,14497,1,0,0,0,14499,14498,1,0,0,0,14500,1213,1,0,0,0,14501,
        14517,5,1174,0,0,14502,14517,5,1175,0,0,14503,14517,5,1176,0,0,14504,
        14505,5,1176,0,0,14505,14517,5,1174,0,0,14506,14507,5,1175,0,0,14507,
        14517,5,1174,0,0,14508,14509,5,1176,0,0,14509,14517,5,1175,0,0,14510,
        14511,5,1177,0,0,14511,14517,5,1174,0,0,14512,14513,5,1177,0,0,14513,
        14517,5,1175,0,0,14514,14515,5,1177,0,0,14515,14517,5,1176,0,0,14516,
        14501,1,0,0,0,14516,14502,1,0,0,0,14516,14503,1,0,0,0,14516,14504,
        1,0,0,0,14516,14506,1,0,0,0,14516,14508,1,0,0,0,14516,14510,1,0,
        0,0,14516,14512,1,0,0,0,14516,14514,1,0,0,0,14517,1215,1,0,0,0,14518,
        14519,7,173,0,0,14519,1217,1,0,0,0,14520,14522,5,1168,0,0,14521,
        14523,7,174,0,0,14522,14521,1,0,0,0,14522,14523,1,0,0,0,14523,1219,
        1,0,0,0,1840,1223,1231,1236,1240,1246,1248,1253,1260,1263,1269,1273,
        1277,1281,1285,1289,1293,1296,1304,1471,1478,1492,1496,1501,1506,
        1510,1514,1519,1524,1526,1530,1533,1540,1543,1552,1555,1566,1571,
        1576,1581,1586,1592,1596,1599,1603,1606,1609,1616,1620,1622,1627,
        1633,1637,1649,1653,1659,1662,1671,1674,1695,1703,1708,1711,1716,
        1719,1724,1733,1745,1750,1753,1758,1764,1769,1786,1789,1792,1795,
        1800,1809,1824,1841,1852,1858,1873,1888,1897,1901,1906,1912,1918,
        1921,1926,1931,1939,1949,1968,1976,1989,1991,2003,2005,2012,2021,
        2027,2036,2050,2060,2070,2110,2133,2169,2171,2189,2213,2216,2230,
        2262,2280,2283,2288,2291,2296,2299,2304,2307,2312,2315,2323,2326,
        2334,2347,2358,2363,2367,2373,2396,2408,2419,2424,2428,2434,2436,
        2449,2472,2479,2488,2493,2496,2501,2504,2509,2514,2542,2550,2556,
        2563,2565,2578,2585,2600,2618,2621,2623,2628,2632,2635,2637,2643,
        2646,2648,2654,2656,2678,2686,2694,2696,2698,2707,2728,2741,2756,
        2760,2795,2798,2803,2826,2829,2834,2860,2874,2879,2887,2892,2899,
        2920,2957,2962,2981,2993,2996,3001,3004,3010,3025,3030,3038,3041,
        3046,3051,3054,3078,3085,3090,3095,3100,3102,3109,3122,3128,3133,
        3141,3157,3164,3169,3174,3177,3183,3189,3194,3199,3204,3207,3213,
        3219,3230,3233,3243,3249,3253,3257,3286,3299,3305,3315,3318,3334,
        3339,3355,3358,3361,3366,3369,3374,3383,3386,3389,3396,3404,3408,
        3410,3412,3418,3422,3427,3430,3432,3444,3447,3449,3460,3464,3468,
        3473,3488,3495,3504,3512,3515,3520,3525,3533,3539,3543,3549,3554,
        3558,3565,3573,3581,3590,3595,3599,3602,3606,3612,3617,3625,3633,
        3639,3645,3648,3653,3656,3663,3665,3668,3674,3677,3682,3685,3690,
        3693,3698,3701,3706,3709,3712,3715,3722,3726,3733,3740,3746,3759,
        3763,3768,3778,3787,3791,3803,3809,3814,3816,3836,3840,3848,3857,
        3863,3869,3877,3879,3889,3893,3896,3900,3905,3911,3914,3918,3926,
        3928,3931,3939,3947,3954,3961,3963,3965,3970,3976,3979,3981,3983,
        3986,3991,3994,3999,4014,4021,4028,4030,4032,4037,4043,4046,4048,
        4050,4053,4058,4061,4066,4079,4084,4093,4098,4104,4108,4112,4129,
        4131,4141,4146,4148,4152,4158,4166,4171,4174,4182,4185,4190,4195,
        4200,4205,4210,4215,4219,4224,4235,4240,4243,4246,4251,4254,4259,
        4262,4267,4270,4275,4278,4283,4286,4291,4297,4302,4305,4310,4317,
        4319,4325,4334,4339,4341,4353,4359,4371,4374,4379,4381,4391,4396,
        4398,4402,4408,4426,4428,4443,4461,4469,4479,4495,4516,4527,4533,
        4542,4551,4557,4566,4571,4574,4579,4582,4587,4590,4598,4604,4608,
        4615,4621,4625,4628,4630,4633,4638,4641,4646,4649,4654,4657,4662,
        4665,4680,4691,4702,4709,4712,4720,4726,4735,4742,4751,4761,4766,
        4780,4791,4798,4801,4809,4816,4823,4827,4832,4835,4840,4843,4848,
        4851,4860,4867,4882,4885,4890,4901,4910,4921,4927,4929,4937,4945,
        4950,4961,4964,4968,4976,4980,4984,4992,4997,5005,5010,5014,5016,
        5021,5030,5033,5038,5045,5051,5053,5058,5064,5070,5075,5081,5088,
        5093,5098,5103,5106,5110,5113,5117,5121,5124,5128,5133,5137,5141,
        5151,5157,5164,5167,5173,5179,5184,5186,5192,5194,5199,5205,5211,
        5216,5218,5222,5226,5229,5243,5248,5252,5265,5268,5270,5278,5288,
        5294,5301,5304,5310,5316,5321,5323,5329,5331,5336,5342,5348,5354,
        5359,5361,5365,5369,5372,5386,5391,5395,5408,5411,5413,5421,5432,
        5441,5450,5461,5470,5479,5491,5495,5500,5502,5504,5509,5513,5518,
        5520,5522,5536,5541,5563,5585,5590,5603,5611,5629,5632,5640,5645,
        5656,5663,5668,5672,5676,5679,5686,5704,5706,5726,5733,5740,5745,
        5750,5756,5761,5763,5770,5776,5782,5785,5791,5801,5804,5811,5814,
        5819,5821,5829,5833,5839,5844,5846,5849,5856,5862,5869,5872,5878,
        5883,5885,5888,5896,5902,5909,5912,5918,5923,5925,5933,5941,5947,
        5952,5954,5964,5969,5979,5985,5997,5999,6006,6012,6018,6024,6029,
        6031,6038,6046,6052,6066,6068,6071,6076,6078,6090,6096,6110,6112,
        6115,6120,6123,6128,6130,6139,6146,6158,6174,6183,6192,6195,6200,
        6207,6209,6215,6217,6225,6227,6233,6235,6241,6243,6250,6253,6255,
        6258,6262,6264,6274,6280,6284,6292,6299,6305,6307,6318,6323,6329,
        6333,6343,6351,6363,6366,6374,6376,6379,6383,6386,6395,6398,6401,
        6409,6415,6422,6426,6437,6443,6445,6454,6458,6465,6470,6473,6481,
        6485,6488,6492,6495,6499,6506,6510,6512,6514,6517,6520,6523,6528,
        6531,6539,6541,6544,6548,6551,6557,6560,6564,6567,6570,6577,6580,
        6587,6593,6597,6607,6610,6613,6619,6622,6625,6628,6632,6635,6643,
        6645,6649,6652,6660,6664,6668,6675,6679,6681,6683,6686,6689,6692,
        6700,6706,6712,6714,6718,6721,6735,6739,6746,6749,6758,6761,6765,
        6773,6776,6780,6783,6797,6801,6804,6808,6811,6820,6832,6838,6847,
        6852,6861,6873,6876,6882,6885,6894,6905,6914,6938,6940,6946,6949,
        6956,6958,6967,6997,7000,7009,7024,7030,7032,7041,7059,7065,7074,
        7077,7079,7087,7093,7097,7110,7114,7117,7126,7144,7150,7152,7156,
        7168,7171,7175,7178,7182,7198,7200,7202,7205,7208,7217,7244,7247,
        7261,7266,7269,7275,7278,7285,7289,7291,7299,7302,7306,7313,7316,
        7328,7333,7336,7348,7351,7357,7364,7369,7374,7380,7384,7391,7394,
        7402,7410,7413,7421,7428,7435,7438,7448,7455,7460,7463,7473,7476,
        7479,7488,7490,7501,7504,7507,7514,7519,7523,7525,7535,7538,7541,
        7548,7554,7558,7564,7568,7573,7577,7581,7584,7589,7603,7619,7623,
        7629,7631,7634,7646,7651,7654,7662,7667,7672,7678,7683,7687,7711,
        7719,7724,7728,7733,7738,7745,7750,7753,7758,7761,7775,7782,7786,
        7788,7797,7807,7810,7814,7821,7842,7847,7851,7860,7866,7868,7877,
        7910,7916,7918,7923,7926,7934,7942,7945,7952,7955,7974,7983,7994,
        8007,8011,8013,8021,8029,8035,8038,8041,8044,8050,8054,8062,8074,
        8086,8090,8093,8102,8108,8118,8127,8137,8143,8149,8156,8162,8166,
        8177,8192,8194,8221,8232,8240,8252,8257,8261,8270,8280,8287,8292,
        8308,8311,8314,8319,8322,8327,8336,8339,8342,8349,8359,8379,8385,
        8410,8412,8438,8444,8455,8463,8466,8483,8491,8498,8521,8534,8540,
        8547,8555,8558,8561,8570,8580,8587,8591,8595,8601,8608,8612,8618,
        8625,8632,8635,8641,8648,8652,8657,8662,8667,8675,8682,8686,8692,
        8699,8703,8711,8713,8721,8727,8733,8750,8754,8762,8767,8775,8781,
        8792,8797,8804,8808,8812,8816,8819,8823,8829,8833,8835,8842,8849,
        8852,8855,8862,8867,8872,8876,8882,8886,8888,8893,8898,8902,8907,
        8913,8917,8921,8923,8927,8931,8935,8939,8945,8948,8954,8958,8962,
        8968,8974,8976,8979,8983,8987,8991,8997,9000,9006,9012,9015,9021,
        9024,9030,9033,9037,9041,9045,9050,9053,9057,9061,9078,9080,9082,
        9085,9092,9097,9101,9107,9111,9113,9118,9123,9127,9132,9138,9142,
        9146,9148,9152,9156,9160,9164,9170,9173,9179,9183,9187,9193,9199,
        9201,9204,9208,9212,9216,9222,9225,9231,9237,9240,9246,9249,9255,
        9258,9262,9266,9270,9275,9278,9282,9286,9292,9295,9299,9316,9318,
        9320,9323,9337,9343,9351,9358,9360,9363,9396,9400,9404,9411,9420,
        9428,9431,9434,9438,9442,9445,9453,9461,9465,9472,9474,9481,9489,
        9492,9503,9508,9512,9518,9520,9527,9529,9531,9535,9540,9547,9549,
        9555,9558,9566,9572,9576,9579,9586,9589,9595,9599,9606,9611,9619,
        9624,9636,9638,9649,9656,9666,9689,9702,9718,9723,9730,9733,9737,
        9739,9756,9771,9779,9788,9796,9804,9821,9834,9846,9870,9877,9881,
        9891,9895,9912,9951,9958,9966,9978,10000,10009,10011,10017,10037,
        10039,10041,10044,10051,10057,10062,10064,10070,10078,10080,10084,
        10094,10098,10104,10106,10110,10117,10122,10127,10131,10140,10146,
        10155,10158,10160,10167,10170,10174,10182,10185,10193,10196,10208,
        10215,10219,10222,10230,10233,10243,10249,10253,10256,10264,10267,
        10278,10280,10289,10292,10299,10304,10308,10313,10329,10332,10339,
        10343,10348,10357,10361,10369,10372,10381,10384,10388,10397,10399,
        10404,10412,10419,10423,10441,10449,10454,10460,10465,10474,10477,
        10480,10491,10496,10507,10512,10518,10525,10527,10532,10536,10551,
        10561,10572,10591,10612,10614,10616,10624,10628,10634,10637,10642,
        10646,10651,10654,10657,10662,10664,10674,10678,10683,10686,10707,
        10718,10721,10731,10734,10737,10746,10748,10754,10760,10775,10786,
        10795,10831,10837,10851,10856,10860,10872,10875,10884,10886,10896,
        10898,10900,10903,10906,10917,10919,10921,10924,10929,10940,10949,
        10952,10955,10964,10967,10970,10977,10980,10987,10993,10999,11014,
        11017,11024,11032,11039,11045,11056,11070,11080,11082,11096,11103,
        11107,11115,11119,11123,11129,11139,11149,11157,11169,11175,11179,
        11189,11193,11197,11207,11213,11221,11229,11231,11259,11271,11278,
        11286,11293,11299,11303,11308,11316,11319,11321,11325,11329,11336,
        11340,11343,11348,11352,11356,11361,11368,11379,11384,11386,11390,
        11395,11399,11408,11415,11424,11437,11439,11449,11452,11457,11466,
        11468,11470,11475,11477,11485,11490,11498,11503,11509,11511,11523,
        11527,11530,11540,11542,11547,11550,11557,11561,11565,11576,11610,
        11626,11633,11635,11642,11651,11659,11665,11672,11678,11681,11683,
        11691,11693,11700,11704,11712,11715,11722,11728,11737,11742,11746,
        11753,11755,11759,11764,11766,11771,11773,11777,11784,11786,11793,
        11799,11808,11816,11819,11826,11834,11837,11844,11850,11857,11863,
        11867,11892,11895,11899,11901,11904,11950,11971,11975,11979,11993,
        12003,12012,12019,12024,12044,12050,12057,12061,12076,12082,12101,
        12112,12125,12142,12148,12155,12159,12232,12238,12337,12349,12358,
        12367,12398,12404,12456,12469,12485,12504,12547,12601,12603,12619,
        12662,12685,12688,12699,12702,12751,12759,12770,12831,12881,12911,
        13041,13120,13124,13145,13164,13175,13178,13181,13187,13190,13205,
        13287,13314,13324,13375,13383,13402,13404,13418,13427,13446,13448,
        13463,13476,13482,13490,13492,13498,13506,13512,13515,13521,13532,
        13541,13550,13562,13580,13596,13612,13652,13664,13672,13691,13696,
        13706,13711,13723,13735,13747,13757,13783,13787,13795,13802,13815,
        13823,13836,13843,13849,13853,13870,13885,13887,13900,13919,13923,
        13926,13935,13938,13941,13954,13958,13966,13972,13980,13987,13993,
        14008,14017,14023,14029,14032,14036,14043,14051,14054,14060,14066,
        14068,14074,14077,14079,14085,14087,14101,14108,14117,14124,14142,
        14149,14156,14163,14167,14172,14179,14184,14188,14193,14196,14200,
        14204,14209,14213,14218,14221,14226,14230,14235,14239,14247,14251,
        14256,14266,14271,14278,14287,14299,14304,14315,14325,14327,14333,
        14335,14340,14342,14345,14349,14353,14359,14368,14371,14373,14376,
        14382,14386,14389,14398,14407,14419,14422,14447,14451,14454,14459,
        14463,14467,14471,14478,14482,14493,14499,14516,14522
    ]

class TSqlParser ( Parser ):

    grammarFileName = "TSqlParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'ABORT'", "'ABORT_AFTER_WAIT'", "'ABSENT'", 
                     "'ABSOLUTE'", "'ACCELERATED_DATABASE_RECOVERY'", "'ACCENT_SENSITIVITY'", 
                     "'ACCESS'", "'ACTION'", "'ACTIVATION'", "'ACTIVE'", 
                     "'ADD'", "'ADDRESS'", "'ADMINISTER'", "'AES'", "'AES_128'", 
                     "'AES_192'", "'AES_256'", "'AFFINITY'", "'AFTER'", 
                     "'AGGREGATE'", "'ALGORITHM'", "'ALL'", "'ALLOWED'", 
                     "'ALLOW_CONNECTIONS'", "'ALLOW_ENCRYPTED_VALUE_MODIFICATIONS'", 
                     "'ALLOW_MULTIPLE_EVENT_LOSS'", "'ALLOW_PAGE_LOCKS'", 
                     "'ALLOW_ROW_LOCKS'", "'ALLOW_SINGLE_EVENT_LOSS'", "'ALLOW_SNAPSHOT_ISOLATION'", 
                     "'ALL_CONSTRAINTS'", "'ALL_ERRORMSGS'", "'ALL_INDEXES'", 
                     "'ALL_LEVELS'", "'ALTER'", "'ALWAYS'", "'AND'", "'ANONYMOUS'", 
                     "'ANSI_DEFAULTS'", "'ANSI_NULLS'", "'ANSI_NULL_DEFAULT'", 
                     "'ANSI_NULL_DFLT_OFF'", "'ANSI_NULL_DFLT_ON'", "'ANSI_PADDING'", 
                     "'ANSI_WARNINGS'", "'ANY'", "'APPEND'", "'APPLICATION'", 
                     "'APPLICATION_LOG'", "'APPLOCK_MODE'", "'APPLOCK_TEST'", 
                     "'APPLY'", "'APP_NAME'", "'ARITHABORT'", "'ARITHIGNORE'", 
                     "'AS'", "'ASC'", "'ASCII'", "'ASSEMBLY'", "'ASSEMBLYPROPERTY'", 
                     "'ASYMMETRIC'", "'ASYNCHRONOUS_COMMIT'", "'AT'", "'AUDIT'", 
                     "'AUDIT_GUID'", "'AUTHENTICATE'", "'AUTHENTICATION'", 
                     "'AUTHORIZATION'", "'AUTO'", "'AUTOGROW_ALL_FILES'", 
                     "'AUTOGROW_SINGLE_FILE'", "'AUTOMATED_BACKUP_PREFERENCE'", 
                     "'AUTOMATIC'", "'AUTO_CLEANUP'", "'AUTO_CLOSE'", "'AUTO_CREATE_STATISTICS'", 
                     "'AUTO_DROP'", "'AUTO_SHRINK'", "'AUTO_UPDATE_STATISTICS'", 
                     "'AUTO_UPDATE_STATISTICS_ASYNC'", "'AVAILABILITY'", 
                     "'AVAILABILITY_MODE'", "'AVG'", "'\\'", "'BACKUP'", 
                     "'BACKUP_CLONEDB'", "'BACKUP_PRIORITY'", "'BASE64'", 
                     "'BEFORE'", "'BEGIN'", "'BEGIN_DIALOG'", "'BETWEEN'", 
                     "'BIGINT'", "'BINARY_CHECKSUM'", "'BINARY'", "'BINDING'", 
                     "'BLOB_STORAGE'", "'BLOCK'", "'BLOCKERS'", "'BLOCKING_HIERARCHY'", 
                     "'BLOCKSIZE'", "'BREAK'", "'BROKER'", "'BROKER_INSTANCE'", 
                     "'BROWSE'", "'BUFFER'", "'BUFFERCOUNT'", "'BULK'", 
                     "'BULK_LOGGED'", "'BY'", "'CACHE'", "'CALLED'", "'CALLER'", 
                     "'CAP_CPU_PERCENT'", "'CASCADE'", "'CASE'", "'CAST'", 
                     "'CATALOG'", "'CATCH'", "'CERTENCODED'", "'CERTIFICATE'", 
                     "'CERTPRIVATEKEY'", "'CERT_ID'", "'CHANGE'", "'CHANGES'", 
                     "'CHANGETABLE'", "'CHANGE_RETENTION'", "'CHANGE_TRACKING'", 
                     "'CHAR'", "'CHARINDEX'", "'CHECK'", "'CHECKALLOC'", 
                     "'CHECKCATALOG'", "'CHECKCONSTRAINTS'", "'CHECKDB'", 
                     "'CHECKFILEGROUP'", "'CHECKPOINT'", "'CHECKSUM'", "'CHECKSUM_AGG'", 
                     "'CHECKTABLE'", "'CHECK_EXPIRATION'", "'CHECK_POLICY'", 
                     "'CLASSIFIER_FUNCTION'", "'CLEANTABLE'", "'CLEANUP'", 
                     "'CLONEDATABASE'", "'CLOSE'", "'CLUSTER'", "'CLUSTERED'", 
                     "'COALESCE'", "'COLLATE'", "'COLLECTION'", "'COLUMN'", 
                     "'COLUMNPROPERTY'", "'COLUMNS'", "'COLUMNSTORE'", "'COLUMNSTORE_ARCHIVE'", 
                     "'COLUMN_ENCRYPTION_KEY'", "'COLUMN_MASTER_KEY'", "'COL_LENGTH'", 
                     "'COL_NAME'", "'COMMIT'", "'COMMITTED'", "'COMPATIBILITY_LEVEL'", 
                     "'COMPRESS'", "'COMPRESSION'", "'COMPRESSION_DELAY'", 
                     "'COMPRESS_ALL_ROW_GROUPS'", "'COMPUTE'", "'CONCAT'", 
                     "'CONCAT_NULL_YIELDS_NULL'", "'CONCAT_WS'", "'CONFIGURATION'", 
                     "'CONNECT'", "'CONNECTION'", "'CONNECTIONPROPERTY'", 
                     "'CONSTRAINT'", "'CONTAINMENT'", "'CONTAINS'", "'CONTAINSTABLE'", 
                     "'CONTENT'", "'CONTEXT'", "'CONTEXT_INFO'", "'CONTINUE'", 
                     "'CONTINUE_AFTER_ERROR'", "'CONTRACT'", "'CONTRACT_NAME'", 
                     "'CONTROL'", "'CONVERSATION'", "<INVALID>", "'COOKIE'", 
                     "'COPY_ONLY'", "'COUNT'", "'COUNTER'", "'COUNT_BIG'", 
                     "'CPU'", "'CREATE'", "'CREATE_NEW'", "'CREATION_DISPOSITION'", 
                     "'CREDENTIAL'", "'CROSS'", "'CRYPTOGRAPHIC'", "'CUME_DIST'", 
                     "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_REQUEST_ID'", 
                     "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_TRANSACTION_ID'", 
                     "'CURRENT_USER'", "'CURSOR'", "'CURSOR_CLOSE_ON_COMMIT'", 
                     "'CURSOR_DEFAULT'", "'CURSOR_STATUS'", "'CYCLE'", "'DATA'", 
                     "'DATABASE'", "'DATABASEPROPERTYEX'", "'DATABASE_MIRRORING'", 
                     "'DATABASE_PRINCIPAL_ID'", "'DATALENGTH'", "'DATASPACE'", 
                     "'DATA_COMPRESSION'", "'DATA_PURITY'", "'DATA_SOURCE'", 
                     "'DATEADD'", "'DATEDIFF'", "'DATENAME'", "'DATEPART'", 
                     "'DATE_CORRELATION_OPTIMIZATION'", "'DAYS'", "'DBCC'", 
                     "'DBREINDEX'", "'DB_CHAINING'", "'DB_FAILOVER'", "'DB_ID'", 
                     "'DB_NAME'", "'DDL'", "'DEALLOCATE'", "'DECLARE'", 
                     "'DECOMPRESS'", "'DECRYPTION'", "'DEFAULT'", "'DEFAULT_DATABASE'", 
                     "<INVALID>", "'DEFAULT_FULLTEXT_LANGUAGE'", "'DEFAULT_LANGUAGE'", 
                     "'DEFAULT_SCHEMA'", "'DEFINITION'", "'DELAY'", "'DELAYED_DURABILITY'", 
                     "'DELETE'", "'DELETED'", "'DENSE_RANK'", "'DENY'", 
                     "'DEPENDENTS'", "'DES'", "'DESC'", "'DESCRIPTION'", 
                     "'DESX'", "'DETERMINISTIC'", "'DHCP'", "'DIAGNOSTICS'", 
                     "'DIALOG'", "'DIFFERENCE'", "'DIFFERENTIAL'", "'DIRECTORY_NAME'", 
                     "'DISABLE'", "'DISABLED'", "'DISABLE_BROKER'", "'DISK'", 
                     "'DISTINCT'", "'DISTRIBUTED'", "'DISTRIBUTION'", "'DOCUMENT'", 
                     "'$PARTITION'", "'DOUBLE'", "'\\\\'", "'//'", "'DROP'", 
                     "'DROPCLEANBUFFERS'", "'DROP_EXISTING'", "'DTC_SUPPORT'", 
                     "'DUMP'", "'DYNAMIC'", "'ELEMENTS'", "'ELSE'", "'EMERGENCY'", 
                     "'EMPTY'", "'ENABLE'", "'ENABLED'", "'ENABLE_BROKER'", 
                     "'ENCRYPTED'", "'ENCRYPTED_VALUE'", "'ENCRYPTION'", 
                     "'ENCRYPTION_TYPE'", "'END'", "'ENDPOINT'", "'ENDPOINT_URL'", 
                     "'ERRLVL'", "'ERROR'", "'ERROR_BROKER_CONVERSATIONS'", 
                     "'ERROR_LINE'", "'ERROR_MESSAGE'", "'ERROR_NUMBER'", 
                     "'ERROR_PROCEDURE'", "'ERROR_SEVERITY'", "'ERROR_STATE'", 
                     "'ESCAPE'", "'ESTIMATEONLY'", "'EVENT'", "'EVENTDATA'", 
                     "'EVENT_RETENTION_MODE'", "'EXCEPT'", "'EXCLUSIVE'", 
                     "'EXECUTABLE'", "'EXECUTABLE_FILE'", "<INVALID>", "'EXIST'", 
                     "'EXISTS'", "'[EXIST]'", "'EXIT'", "'EXPAND'", "'EXPIREDATE'", 
                     "'EXPIRY_DATE'", "'EXPLICIT'", "'EXTENDED_LOGICAL_CHECKS'", 
                     "'EXTENSION'", "'EXTERNAL'", "'EXTERNAL_ACCESS'", "'FAILOVER'", 
                     "'FAILOVER_MODE'", "'FAILURE'", "'FAILURECONDITIONLEVEL'", 
                     "'FAILURE_CONDITION_LEVEL'", "'FAIL_OPERATION'", "'FAN_IN'", 
                     "'FAST'", "'FAST_FORWARD'", "'FETCH'", "'FILE'", "'FILEGROUP'", 
                     "'FILEGROUPPROPERTY'", "'FILEGROUP_ID'", "'FILEGROUP_NAME'", 
                     "'FILEGROWTH'", "'FILENAME'", "'FILEPATH'", "'FILEPROPERTY'", 
                     "'FILEPROPERTYEX'", "'FILESTREAM'", "'FILESTREAM_ON'", 
                     "'FILE_ID'", "'FILE_IDEX'", "'FILE_NAME'", "'FILE_SNAPSHOT'", 
                     "'FILLFACTOR'", "'FILTER'", "'FIRST'", "'FIRST_VALUE'", 
                     "'FMTONLY'", "'FOLLOWING'", "'FOR'", "'FORCE'", "'FORCED'", 
                     "'FORCEPLAN'", "'FORCESCAN'", "'FORCESEEK'", "'FORCE_FAILOVER_ALLOW_DATA_LOSS'", 
                     "'FORCE_SERVICE_ALLOW_DATA_LOSS'", "'FOREIGN'", "'FORMAT'", 
                     "'FORMATMESSAGE'", "'FORWARD_ONLY'", "'FREE'", "'FREETEXT'", 
                     "'FREETEXTTABLE'", "'FROM'", "'FULL'", "'FULLSCAN'", 
                     "'FULLTEXT'", "'FULLTEXTCATALOGPROPERTY'", "'FULLTEXTSERVICEPROPERTY'", 
                     "'FUNCTION'", "'GB'", "'GENERATED'", "'GET'", "'GETANCESTOR'", 
                     "'GETANSINULL'", "'GETDATE'", "'GETDESCENDANT'", "'GETLEVEL'", 
                     "'GETREPARENTEDVALUE'", "'GETROOT'", "'GETUTCDATE'", 
                     "'GET_FILESTREAM_TRANSACTION_CONTEXT'", "'GLOBAL'", 
                     "'GO'", "'GOTO'", "'GOVERNOR'", "'GRANT'", "'GREATEST'", 
                     "'GROUP'", "'GROUPING'", "'GROUPING_ID'", "'GROUP_MAX_REQUESTS'", 
                     "'HADR'", "'HASH'", "'HASHED'", "'HAS_DBACCESS'", "'HAS_PERMS_BY_NAME'", 
                     "'HAVING'", "'HEALTHCHECKTIMEOUT'", "'HEALTH_CHECK_TIMEOUT'", 
                     "'HEAP'", "'HIDDEN'", "'HIERARCHYID'", "'HIGH'", "'HOLDLOCK'", 
                     "'HONOR_BROKER_PRIORITY'", "'HOST_ID'", "'HOST_NAME'", 
                     "'HOURS'", "'IDENTITY'", "'IDENTITYCOL'", "'IDENTITY_INSERT'", 
                     "'IDENTITY_VALUE'", "'IDENT_CURRENT'", "'IDENT_INCR'", 
                     "'IDENT_SEED'", "'IF'", "'IGNORE_CONSTRAINTS'", "'IGNORE_DUP_KEY'", 
                     "'IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX'", "'IGNORE_REPLICATED_TABLE_CACHE'", 
                     "'IGNORE_TRIGGERS'", "'IIF'", "'IMMEDIATE'", "'IMPERSONATE'", 
                     "'IMPLICIT_TRANSACTIONS'", "'IMPORTANCE'", "'IN'", 
                     "'INCLUDE'", "'INCLUDE_NULL_VALUES'", "'INCREMENT'", 
                     "'INCREMENTAL'", "'INDEX'", "'INDEXKEY_PROPERTY'", 
                     "'INDEXPROPERTY'", "'INDEX_COL'", "'INFINITE'", "'INIT'", 
                     "'INITIATOR'", "'INNER'", "'INPUT'", "'INSENSITIVE'", 
                     "'INSERT'", "'INSERTED'", "'INSTEAD'", "'INT'", "'INTERSECT'", 
                     "'INTO'", "'IO'", "'IP'", "'IS'", "'ISDESCENDANTOF'", 
                     "'ISJSON'", "'ISNULL'", "'ISNUMERIC'", "'ISOLATION'", 
                     "'IS_MEMBER'", "'IS_ROLEMEMBER'", "'IS_SRVROLEMEMBER'", 
                     "'JOB'", "'JOIN'", "'JSON'", "'JSON_ARRAY'", "'JSON_MODIFY'", 
                     "'JSON_OBJECT'", "'JSON_PATH_EXISTS'", "'JSON_QUERY'", 
                     "'JSON_VALUE'", "'KB'", "'KEEP'", "'KEEPDEFAULTS'", 
                     "'KEEPFIXED'", "'KEEPIDENTITY'", "'KERBEROS'", "'KEY'", 
                     "'KEYS'", "'KEYSET'", "'KEY_PATH'", "'KEY_SOURCE'", 
                     "'KEY_STORE_PROVIDER_NAME'", "'KILL'", "'LAG'", "'LANGUAGE'", 
                     "'LAST'", "'LAST_VALUE'", "'LEAD'", "'LEAST'", "'LEFT'", 
                     "'LEN'", "'LEVEL'", "'LIBRARY'", "'LIFETIME'", "'LIKE'", 
                     "'LINENO'", "'LINKED'", "'LINUX'", "'LIST'", "'LISTENER'", 
                     "'LISTENER_IP'", "'LISTENER_PORT'", "'LISTENER_URL'", 
                     "'LOAD'", "'LOB_COMPACTION'", "'LOCAL'", "'LOCAL_SERVICE_NAME'", 
                     "'LOCATION'", "'LOCK'", "'LOCK_ESCALATION'", "'LOG'", 
                     "'LOGIN'", "'LOGINPROPERTY'", "'LOOP'", "'LOW'", "'LOWER'", 
                     "'LTRIM'", "'MANUAL'", "'MARK'", "'MASK'", "'MASKED'", 
                     "'MASTER'", "'MATCHED'", "'MATERIALIZED'", "'MAX'", 
                     "'MAXDOP'", "'MAXRECURSION'", "'MAXSIZE'", "'MAXTRANSFER'", 
                     "'MAXVALUE'", "'MAX_CPU_PERCENT'", "'MAX_DISPATCH_LATENCY'", 
                     "'MAX_DOP'", "'MAX_DURATION'", "'MAX_EVENT_SIZE'", 
                     "'MAX_FILES'", "'MAX_IOPS_PER_VOLUME'", "'MAX_MEMORY'", 
                     "'MAX_MEMORY_PERCENT'", "'MAX_OUTSTANDING_IO_PER_VOLUME'", 
                     "'MAX_PROCESSES'", "'MAX_QUEUE_READERS'", "'MAX_ROLLOVER_FILES'", 
                     "'MAX_SIZE'", "'MB'", "'MEDIADESCRIPTION'", "'MEDIANAME'", 
                     "'MEDIUM'", "'MEMBER'", "'MEMORY_OPTIMIZED_DATA'", 
                     "'MEMORY_PARTITION_MODE'", "'MERGE'", "'MESSAGE'", 
                     "'MESSAGE_FORWARDING'", "'MESSAGE_FORWARD_SIZE'", "'MIN'", 
                     "'MINUTES'", "'MINVALUE'", "'MIN_ACTIVE_ROWVERSION'", 
                     "'MIN_CPU_PERCENT'", "'MIN_IOPS_PER_VOLUME'", "'MIN_MEMORY_PERCENT'", 
                     "'MIRROR'", "'MIRROR_ADDRESS'", "'MIXED_PAGE_ALLOCATION'", 
                     "'MODE'", "'MODIFY'", "'[MODIFY]'", "'MOVE'", "'MULTI_USER'", 
                     "'MUST_CHANGE'", "'NAME'", "'NATIONAL'", "'NCHAR'", 
                     "'NEGOTIATE'", "'NESTED_TRIGGERS'", "'NEWID'", "'NEWNAME'", 
                     "'NEWSEQUENTIALID'", "'NEW_ACCOUNT'", "'NEW_BROKER'", 
                     "'NEW_PASSWORD'", "'NEXT'", "'NO'", "'NOCHECK'", "'NOCOUNT'", 
                     "'NODES'", "'NOEXEC'", "'NOEXPAND'", "'NOFORMAT'", 
                     "'NOHOLDLOCK'", "'NOINDEX'", "'NOINIT'", "'NOLOCK'", 
                     "'NONCLUSTERED'", "'NONE'", "'NON_TRANSACTED_ACCESS'", 
                     "'NORECOMPUTE'", "'NORECOVERY'", "'NOREWIND'", "'NOSKIP'", 
                     "'NOT'", "'NOTIFICATION'", "'NOTIFICATIONS'", "'NOUNLOAD'", 
                     "'NOWAIT'", "'NO_CHECKSUM'", "'NO_COMPRESSION'", "'NO_EVENT_LOSS'", 
                     "'NO_INFOMSGS'", "'NO_QUERYSTORE'", "'NO_STATISTICS'", 
                     "'NO_TRUNCATE'", "'NO_WAIT'", "'NTILE'", "'NTLM'", 
                     "'NULLIF'", "'NULL'", "<INVALID>", "'NUMANODE'", "'NUMBER'", 
                     "'NUMERIC_ROUNDABORT'", "'OBJECT'", "'OBJECTPROPERTY'", 
                     "'OBJECTPROPERTYEX'", "'OBJECT_DEFINITION'", "'OBJECT_ID'", 
                     "'OBJECT_NAME'", "'OBJECT_SCHEMA_NAME'", "'OF'", "'OFF'", 
                     "'OFFLINE'", "'OFFSET'", "'OFFSETS'", "'OLD_ACCOUNT'", 
                     "'OLD_PASSWORD'", "'ON'", "'ONLINE'", "'ONLY'", "'ON_FAILURE'", 
                     "'OPEN'", "'OPENDATASOURCE'", "'OPENJSON'", "'OPENQUERY'", 
                     "'OPENROWSET'", "'OPENXML'", "'OPEN_EXISTING'", "'OPERATIONS'", 
                     "'OPTIMISTIC'", "'OPTIMIZE'", "'OPTIMIZE_FOR_SEQUENTIAL_KEY'", 
                     "'OPTION'", "'OR'", "'ORDER'", "'ORIGINAL_DB_NAME'", 
                     "'ORIGINAL_LOGIN'", "'OUT'", "'OUTER'", "'OUTPUT'", 
                     "'OVER'", "'OVERRIDE'", "'OWNER'", "'OWNERSHIP'", "'PAD_INDEX'", 
                     "'PAGE'", "'PAGECOUNT'", "'PAGE_VERIFY'", "'PAGLOCK'", 
                     "'PARAMETERIZATION'", "'PARAM_NODE'", "<INVALID>", 
                     "'PARSENAME'", "'PARSEONLY'", "'PARTIAL'", "'PARTITION'", 
                     "'PARTITIONS'", "'PARTNER'", "'PASSWORD'", "'PATH'", 
                     "'PATINDEX'", "'PAUSE'", "'PDW_SHOWSPACEUSED'", "'PERCENT'", 
                     "'PERCENTILE_CONT'", "'PERCENTILE_DISC'", "'PERCENT_RANK'", 
                     "'PERMISSIONS'", "'PERMISSION_SET'", "'PERSISTED'", 
                     "'PERSIST_SAMPLE_PERCENT'", "'PER_CPU'", "'PER_DB'", 
                     "'PER_NODE'", "'PHYSICAL_ONLY'", "'PIVOT'", "'PLAN'", 
                     "'PLATFORM'", "'POISON_MESSAGE_HANDLING'", "'POLICY'", 
                     "'POOL'", "'PORT'", "'PRECEDING'", "'PRECISION'", "'PREDICATE'", 
                     "'PRIMARY'", "'PRIMARY_ROLE'", "'PRINT'", "'PRIOR'", 
                     "'PRIORITY'", "'PRIORITY_LEVEL'", "'PRIVATE'", "'PRIVATE_KEY'", 
                     "'PRIVILEGES'", "'PROC'", "'PROCCACHE'", "'PROCEDURE'", 
                     "'PROCEDURE_NAME'", "'PROCESS'", "'PROFILE'", "'PROPERTY'", 
                     "'PROVIDER'", "'PROVIDER_KEY_NAME'", "'PUBLIC'", "'PWDCOMPARE'", 
                     "'PWDENCRYPT'", "'PYTHON'", "'QUERY'", "'[QUERY]'", 
                     "'QUEUE'", "'QUEUE_DELAY'", "'QUOTED_IDENTIFIER'", 
                     "'QUOTENAME'", "'R'", "'RAISERROR'", "'RANDOMIZED'", 
                     "'RANGE'", "'RANK'", "'RAW'", "'RC2'", "'RC4'", "'RC4_128'", 
                     "'READ'", "'READCOMMITTED'", "'READCOMMITTEDLOCK'", 
                     "'READONLY'", "'READPAST'", "'READTEXT'", "'READUNCOMMITTED'", 
                     "'READWRITE'", "'READ_COMMITTED_SNAPSHOT'", "'READ_ONLY'", 
                     "'READ_ONLY_ROUTING_LIST'", "'READ_WRITE'", "'READ_WRITE_FILEGROUPS'", 
                     "'REBUILD'", "'RECEIVE'", "'RECOMPILE'", "'RECONFIGURE'", 
                     "'RECOVERY'", "'RECURSIVE_TRIGGERS'", "'REFERENCES'", 
                     "'REGENERATE'", "'RELATED_CONVERSATION'", "'RELATED_CONVERSATION_GROUP'", 
                     "'RELATIVE'", "'REMOTE'", "'REMOTE_PROC_TRANSACTIONS'", 
                     "'REMOTE_SERVICE_NAME'", "'REMOVE'", "'REORGANIZE'", 
                     "'REPAIR_ALLOW_DATA_LOSS'", "'REPAIR_FAST'", "'REPAIR_REBUILD'", 
                     "'REPEATABLE'", "'REPEATABLEREAD'", "'REPLACE'", "'REPLICA'", 
                     "'REPLICATE'", "'REPLICATION'", "'REQUEST_MAX_CPU_TIME_SEC'", 
                     "'REQUEST_MAX_MEMORY_GRANT_PERCENT'", "'REQUEST_MEMORY_GRANT_TIMEOUT_SEC'", 
                     "'REQUIRED'", "'REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT'", 
                     "'RESAMPLE'", "'RESERVE_DISK_SPACE'", "'RESET'", "'RESOURCE'", 
                     "'RESOURCES'", "'RESOURCE_MANAGER_LOCATION'", "'RESTART'", 
                     "'RESTORE'", "'RESTRICT'", "'RESTRICTED_USER'", "'RESUMABLE'", 
                     "'RESUME'", "'RETAINDAYS'", "'RETENTION'", "'RETURN'", 
                     "'RETURNS'", "'REVERSE'", "'REVERT'", "'REVOKE'", "'REWIND'", 
                     "'RIGHT'", "'ROBUST'", "'ROLE'", "'ROLLBACK'", "'ROOT'", 
                     "'ROUND_ROBIN'", "'ROUTE'", "'ROW'", "'ROWCOUNT'", 
                     "'ROWCOUNT_BIG'", "'ROWGUID'", "'ROWGUIDCOL'", "'ROWLOCK'", 
                     "'ROWS'", "'ROW_NUMBER'", "'RSA_1024'", "'RSA_2048'", 
                     "'RSA_3072'", "'RSA_4096'", "'RSA_512'", "'RTRIM'", 
                     "'RULE'", "'SAFE'", "'SAFETY'", "'SAMPLE'", "'SAVE'", 
                     "'SCHEDULER'", "'SCHEMA'", "'SCHEMABINDING'", "'SCHEMA_ID'", 
                     "'SCHEMA_NAME'", "'SCHEME'", "'SCOPED'", "'SCOPE_IDENTITY'", 
                     "'SCRIPT'", "'SCROLL'", "'SCROLL_LOCKS'", "'SEARCH'", 
                     "'SECONDARY'", "'SECONDARY_ONLY'", "'SECONDARY_ROLE'", 
                     "'SECONDS'", "'SECRET'", "'SECURABLES'", "'SECURITY'", 
                     "'SECURITYAUDIT'", "'SECURITY_LOG'", "'SEEDING_MODE'", 
                     "'SELECT'", "'SELF'", "'SEMANTICKEYPHRASETABLE'", "'SEMANTICSIMILARITYDETAILSTABLE'", 
                     "'SEMANTICSIMILARITYTABLE'", "'SEMI_SENSITIVE'", "'SEND'", 
                     "'SENT'", "'SEQUENCE'", "'SEQUENCE_NUMBER'", "'SERIALIZABLE'", 
                     "'SERVER'", "'SERVERPROPERTY'", "'SERVICE'", "'SERVICEBROKER'", 
                     "'SERVICE_BROKER'", "'SERVICE_NAME'", "'SESSION'", 
                     "'SESSIONPROPERTY'", "'SESSION_CONTEXT'", "'SESSION_TIMEOUT'", 
                     "'SESSION_USER'", "'SET'", "'SETERROR'", "'SETS'", 
                     "'SETTINGS'", "'SETUSER'", "'SHARE'", "'SHARED'", "'SHOWCONTIG'", 
                     "'SHOWPLAN'", "'SHOWPLAN_ALL'", "'SHOWPLAN_TEXT'", 
                     "'SHOWPLAN_XML'", "'SHRINKLOG'", "'SHUTDOWN'", "'SID'", 
                     "'SIGNATURE'", "'SIMPLE'", "'SINGLE_USER'", "'SIZE'", 
                     "'SKIP'", "'SMALLINT'", "'SNAPSHOT'", "'SOFTNUMA'", 
                     "'SOME'", "'SORT_IN_TEMPDB'", "'SOUNDEX'", "'SOURCE'", 
                     "'SPACE'", "'SPARSE'", "'SPATIAL_WINDOW_MAX_CELLS'", 
                     "'SPECIFICATION'", "'SPLIT'", "'SQL'", "'SQLDUMPERFLAGS'", 
                     "'SQLDUMPERPATH'", "'SQLDUMPERTIMEOUT'", "'SQL_VARIANT_PROPERTY'", 
                     "'STANDBY'", "'START'", "'STARTED'", "'STARTUP_STATE'", 
                     "'START_DATE'", "'STATE'", "'STATIC'", "'STATISTICS'", 
                     "'STATISTICS_INCREMENTAL'", "'STATISTICS_NORECOMPUTE'", 
                     "'STATS'", "'STATS_DATE'", "'STATS_STREAM'", "'STATUS'", 
                     "'STATUSONLY'", "'STDEV'", "'STDEVP'", "'STOP'", "'STOPLIST'", 
                     "'STOPPED'", "'STOP_ON_ERROR'", "'STR'", "'STRING_AGG'", 
                     "'STRING_ESCAPE'", "'STUFF'", "'SUBJECT'", "'SUBSCRIBE'", 
                     "'SUBSCRIPTION'", "'SUBSTRING'", "'SUM'", "'SUPPORTED'", 
                     "'SUSER_ID'", "'SUSER_NAME'", "'SUSER_SID'", "'SUSER_SNAME'", 
                     "'SUSPEND'", "'SWITCH'", "'SYMMETRIC'", "'SYNCHRONOUS_COMMIT'", 
                     "'SYNONYM'", "'SYSTEM'", "'SYSTEM_USER'", "'TABLE'", 
                     "'TABLERESULTS'", "'TABLESAMPLE'", "'TABLOCK'", "'TABLOCKX'", 
                     "'TAKE'", "'TAPE'", "'TARGET'", "'TARGET_RECOVERY_TIME'", 
                     "'TB'", "'TCP'", "'TEXTIMAGE_ON'", "'TEXTSIZE'", "'THEN'", 
                     "'THROW'", "'TIES'", "'TIME'", "'TIMEOUT'", "'TIMER'", 
                     "'TINYINT'", "'TO'", "'TOP'", "'TORN_PAGE_DETECTION'", 
                     "'TOSTRING'", "'TRACE'", "'TRACKING'", "'TRACK_CAUSALITY'", 
                     "'TRAN'", "'TRANSACTION'", "'TRANSACTION_ID'", "'TRANSFER'", 
                     "'TRANSFORM_NOISE_WORDS'", "'TRANSLATE'", "'TRIGGER'", 
                     "'TRIM'", "'TRIPLE_DES'", "'TRIPLE_DES_3KEY'", "'TRUNCATE'", 
                     "'TRUSTWORTHY'", "'TRY'", "'TRY_CAST'", "'TSEQUAL'", 
                     "'TSQL'", "'TWO_DIGIT_YEAR_CUTOFF'", "'TYPE'", "'TYPEPROPERTY'", 
                     "'TYPE_ID'", "'TYPE_NAME'", "'TYPE_WARNING'", "'UNBOUNDED'", 
                     "'UNCHECKED'", "'UNCOMMITTED'", "'UNICODE'", "'UNION'", 
                     "'UNIQUE'", "'UNKNOWN'", "'UNLIMITED'", "'UNLOCK'", 
                     "'UNMASK'", "'UNPIVOT'", "'UNSAFE'", "'UOW'", "'UPDATE'", 
                     "'UPDATETEXT'", "'UPDLOCK'", "'UPPER'", "'URL'", "'USE'", 
                     "'USED'", "'USER'", "'USER_ID'", "'USER_NAME'", "'USING'", 
                     "'VALIDATION'", "'VALID_XML'", "'VALUE'", "'VALUES'", 
                     "'[VALUE]'", "'VAR'", "'VARBINARY'", "'VARP'", "'VARYING'", 
                     "'VERBOSELOGGING'", "'VERIFY_CLONEDB'", "'VERSION'", 
                     "'VIEW'", "'VIEWS'", "'VIEW_METADATA'", "'VISIBILITY'", 
                     "'WAIT'", "'WAITFOR'", "'WAIT_AT_LOW_PRIORITY'", "'WELL_FORMED_XML'", 
                     "'WHEN'", "'WHERE'", "'WHILE'", "'WINDOWS'", "'WITH'", 
                     "'WITHIN'", "'WITHOUT'", "'WITHOUT_ARRAY_WRAPPER'", 
                     "'WITNESS'", "'WORK'", "'WORKLOAD'", "'WRITETEXT'", 
                     "'XACT_ABORT'", "'XACT_STATE'", "'XLOCK'", "'XML'", 
                     "'XMLDATA'", "'XMLNAMESPACES'", "'XMLSCHEMA'", "'XML_COMPRESSION'", 
                     "'XSINIL'", "'ZONE'", "'ABS'", "'ACOS'", "'ASIN'", 
                     "'ATAN'", "'ATN2'", "'CEILING'", "'COS'", "'COT'", 
                     "'DEGREES'", "'EXP'", "'FLOOR'", "'LOG10'", "'PI'", 
                     "'POWER'", "'RADIANS'", "'RAND'", "'ROUND'", "'SIGN'", 
                     "'SIN'", "'SQRT'", "'SQUARE'", "'TAN'", "'CURRENT_TIMEZONE'", 
                     "'CURRENT_TIMEZONE_ID'", "'DATE_BUCKET'", "'DATEDIFF_BIG'", 
                     "'DATEFROMPARTS'", "'DATETIME2FROMPARTS'", "'DATETIMEFROMPARTS'", 
                     "'DATETIMEOFFSETFROMPARTS'", "'DATETRUNC'", "'DAY'", 
                     "'EOMONTH'", "'ISDATE'", "'MONTH'", "'SMALLDATETIMEFROMPARTS'", 
                     "'SWITCHOFFSET'", "'SYSDATETIME'", "'SYSDATETIMEOFFSET'", 
                     "'SYSUTCDATETIME'", "'TIMEFROMPARTS'", "'TODATETIMEOFFSET'", 
                     "'YEAR'", "'QUARTER'", "'DAYOFYEAR'", "'WEEK'", "'HOUR'", 
                     "'MINUTE'", "'SECOND'", "'MILLISECOND'", "'MICROSECOND'", 
                     "'NANOSECOND'", "'TZOFFSET'", "'ISO_WEEK'", "'WEEKDAY'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'hh'", "<INVALID>", "<INVALID>", 
                     "'ms'", "'mcs'", "'ns'", "'tz'", "<INVALID>", "'dw'", 
                     "'SP_EXECUTESQL'", "'VARCHAR'", "'NVARCHAR'", "<INVALID>", 
                     "'$ACTION'", "'@@CURSOR_ROWS'", "'@@FETCH_STATUS'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'\"\"'", "'''", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'='", "'>'", 
                     "'<'", "'!'", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'&='", "'^='", "'|='", "'||'", "'.'", "'_'", "'@'", 
                     "'#'", "'$'", "'('", "')'", "','", "';'", "':'", "'::'", 
                     "'*'", "'/'", "'%'", "'+'", "'-'", "'~'", "'|'", "'&'", 
                     "'^'", "'?'" ]

    symbolicNames = [ "<INVALID>", "ABORT", "ABORT_AFTER_WAIT", "ABSENT", 
                      "ABSOLUTE", "ACCELERATED_DATABASE_RECOVERY", "ACCENT_SENSITIVITY", 
                      "ACCESS", "ACTION", "ACTIVATION", "ACTIVE", "ADD", 
                      "ADDRESS", "ADMINISTER", "AES", "AES_128", "AES_192", 
                      "AES_256", "AFFINITY", "AFTER", "AGGREGATE", "ALGORITHM", 
                      "ALL", "ALLOWED", "ALLOW_CONNECTIONS", "ALLOW_ENCRYPTED_VALUE_MODIFICATIONS", 
                      "ALLOW_MULTIPLE_EVENT_LOSS", "ALLOW_PAGE_LOCKS", "ALLOW_ROW_LOCKS", 
                      "ALLOW_SINGLE_EVENT_LOSS", "ALLOW_SNAPSHOT_ISOLATION", 
                      "ALL_CONSTRAINTS", "ALL_ERRORMSGS", "ALL_INDEXES", 
                      "ALL_LEVELS", "ALTER", "ALWAYS", "AND", "ANONYMOUS", 
                      "ANSI_DEFAULTS", "ANSI_NULLS", "ANSI_NULL_DEFAULT", 
                      "ANSI_NULL_DFLT_OFF", "ANSI_NULL_DFLT_ON", "ANSI_PADDING", 
                      "ANSI_WARNINGS", "ANY", "APPEND", "APPLICATION", "APPLICATION_LOG", 
                      "APPLOCK_MODE", "APPLOCK_TEST", "APPLY", "APP_NAME", 
                      "ARITHABORT", "ARITHIGNORE", "AS", "ASC", "ASCII", 
                      "ASSEMBLY", "ASSEMBLYPROPERTY", "ASYMMETRIC", "ASYNCHRONOUS_COMMIT", 
                      "AT_KEYWORD", "AUDIT", "AUDIT_GUID", "AUTHENTICATE", 
                      "AUTHENTICATION", "AUTHORIZATION", "AUTO", "AUTOGROW_ALL_FILES", 
                      "AUTOGROW_SINGLE_FILE", "AUTOMATED_BACKUP_PREFERENCE", 
                      "AUTOMATIC", "AUTO_CLEANUP", "AUTO_CLOSE", "AUTO_CREATE_STATISTICS", 
                      "AUTO_DROP", "AUTO_SHRINK", "AUTO_UPDATE_STATISTICS", 
                      "AUTO_UPDATE_STATISTICS_ASYNC", "AVAILABILITY", "AVAILABILITY_MODE", 
                      "AVG", "BACKSLASH", "BACKUP", "BACKUP_CLONEDB", "BACKUP_PRIORITY", 
                      "BASE64", "BEFORE", "BEGIN", "BEGIN_DIALOG", "BETWEEN", 
                      "BIGINT", "BINARY_CHECKSUM", "BINARY_KEYWORD", "BINDING", 
                      "BLOB_STORAGE", "BLOCK", "BLOCKERS", "BLOCKING_HIERARCHY", 
                      "BLOCKSIZE", "BREAK", "BROKER", "BROKER_INSTANCE", 
                      "BROWSE", "BUFFER", "BUFFERCOUNT", "BULK", "BULK_LOGGED", 
                      "BY", "CACHE", "CALLED", "CALLER", "CAP_CPU_PERCENT", 
                      "CASCADE", "CASE", "CAST", "CATALOG", "CATCH", "CERTENCODED", 
                      "CERTIFICATE", "CERTPRIVATEKEY", "CERT_ID", "CHANGE", 
                      "CHANGES", "CHANGETABLE", "CHANGE_RETENTION", "CHANGE_TRACKING", 
                      "CHAR", "CHARINDEX", "CHECK", "CHECKALLOC", "CHECKCATALOG", 
                      "CHECKCONSTRAINTS", "CHECKDB", "CHECKFILEGROUP", "CHECKPOINT", 
                      "CHECKSUM", "CHECKSUM_AGG", "CHECKTABLE", "CHECK_EXPIRATION", 
                      "CHECK_POLICY", "CLASSIFIER_FUNCTION", "CLEANTABLE", 
                      "CLEANUP", "CLONEDATABASE", "CLOSE", "CLUSTER", "CLUSTERED", 
                      "COALESCE", "COLLATE", "COLLECTION", "COLUMN", "COLUMNPROPERTY", 
                      "COLUMNS", "COLUMNSTORE", "COLUMNSTORE_ARCHIVE", "COLUMN_ENCRYPTION_KEY", 
                      "COLUMN_MASTER_KEY", "COL_LENGTH", "COL_NAME", "COMMIT", 
                      "COMMITTED", "COMPATIBILITY_LEVEL", "COMPRESS", "COMPRESSION", 
                      "COMPRESSION_DELAY", "COMPRESS_ALL_ROW_GROUPS", "COMPUTE", 
                      "CONCAT", "CONCAT_NULL_YIELDS_NULL", "CONCAT_WS", 
                      "CONFIGURATION", "CONNECT", "CONNECTION", "CONNECTIONPROPERTY", 
                      "CONSTRAINT", "CONTAINMENT", "CONTAINS", "CONTAINSTABLE", 
                      "CONTENT", "CONTEXT", "CONTEXT_INFO", "CONTINUE", 
                      "CONTINUE_AFTER_ERROR", "CONTRACT", "CONTRACT_NAME", 
                      "CONTROL", "CONVERSATION", "CONVERT", "COOKIE", "COPY_ONLY", 
                      "COUNT", "COUNTER", "COUNT_BIG", "CPU", "CREATE", 
                      "CREATE_NEW", "CREATION_DISPOSITION", "CREDENTIAL", 
                      "CROSS", "CRYPTOGRAPHIC", "CUME_DIST", "CURRENT", 
                      "CURRENT_DATE", "CURRENT_REQUEST_ID", "CURRENT_TIME", 
                      "CURRENT_TIMESTAMP", "CURRENT_TRANSACTION_ID", "CURRENT_USER", 
                      "CURSOR", "CURSOR_CLOSE_ON_COMMIT", "CURSOR_DEFAULT", 
                      "CURSOR_STATUS", "CYCLE", "DATA", "DATABASE", "DATABASEPROPERTYEX", 
                      "DATABASE_MIRRORING", "DATABASE_PRINCIPAL_ID", "DATALENGTH", 
                      "DATASPACE", "DATA_COMPRESSION", "DATA_PURITY", "DATA_SOURCE", 
                      "DATEADD", "DATEDIFF", "DATENAME", "DATEPART", "DATE_CORRELATION_OPTIMIZATION", 
                      "DAYS", "DBCC", "DBREINDEX", "DB_CHAINING", "DB_FAILOVER", 
                      "DB_ID", "DB_NAME", "DDL", "DEALLOCATE", "DECLARE", 
                      "DECOMPRESS", "DECRYPTION", "DEFAULT", "DEFAULT_DATABASE", 
                      "DEFAULT_DOUBLE_QUOTE", "DEFAULT_FULLTEXT_LANGUAGE", 
                      "DEFAULT_LANGUAGE", "DEFAULT_SCHEMA", "DEFINITION", 
                      "DELAY", "DELAYED_DURABILITY", "DELETE", "DELETED", 
                      "DENSE_RANK", "DENY", "DEPENDENTS", "DES", "DESC", 
                      "DESCRIPTION", "DESX", "DETERMINISTIC", "DHCP", "DIAGNOSTICS", 
                      "DIALOG", "DIFFERENCE", "DIFFERENTIAL", "DIRECTORY_NAME", 
                      "DISABLE", "DISABLED", "DISABLE_BROKER", "DISK", "DISTINCT", 
                      "DISTRIBUTED", "DISTRIBUTION", "DOCUMENT", "DOLLAR_PARTITION", 
                      "DOUBLE", "DOUBLE_BACK_SLASH", "DOUBLE_FORWARD_SLASH", 
                      "DROP", "DROPCLEANBUFFERS", "DROP_EXISTING", "DTC_SUPPORT", 
                      "DUMP", "DYNAMIC", "ELEMENTS", "ELSE", "EMERGENCY", 
                      "EMPTY", "ENABLE", "ENABLED", "ENABLE_BROKER", "ENCRYPTED", 
                      "ENCRYPTED_VALUE", "ENCRYPTION", "ENCRYPTION_TYPE", 
                      "END", "ENDPOINT", "ENDPOINT_URL", "ERRLVL", "ERROR", 
                      "ERROR_BROKER_CONVERSATIONS", "ERROR_LINE", "ERROR_MESSAGE", 
                      "ERROR_NUMBER", "ERROR_PROCEDURE", "ERROR_SEVERITY", 
                      "ERROR_STATE", "ESCAPE", "ESTIMATEONLY", "EVENT", 
                      "EVENTDATA", "EVENT_RETENTION_MODE", "EXCEPT", "EXCLUSIVE", 
                      "EXECUTABLE", "EXECUTABLE_FILE", "EXECUTE", "EXIST", 
                      "EXISTS", "EXIST_SQUARE_BRACKET", "EXIT", "EXPAND", 
                      "EXPIREDATE", "EXPIRY_DATE", "EXPLICIT", "EXTENDED_LOGICAL_CHECKS", 
                      "EXTENSION", "EXTERNAL", "EXTERNAL_ACCESS", "FAILOVER", 
                      "FAILOVER_MODE", "FAILURE", "FAILURECONDITIONLEVEL", 
                      "FAILURE_CONDITION_LEVEL", "FAIL_OPERATION", "FAN_IN", 
                      "FAST", "FAST_FORWARD", "FETCH", "FILE", "FILEGROUP", 
                      "FILEGROUPPROPERTY", "FILEGROUP_ID", "FILEGROUP_NAME", 
                      "FILEGROWTH", "FILENAME", "FILEPATH", "FILEPROPERTY", 
                      "FILEPROPERTYEX", "FILESTREAM", "FILESTREAM_ON", "FILE_ID", 
                      "FILE_IDEX", "FILE_NAME", "FILE_SNAPSHOT", "FILLFACTOR", 
                      "FILTER", "FIRST", "FIRST_VALUE", "FMTONLY", "FOLLOWING", 
                      "FOR", "FORCE", "FORCED", "FORCEPLAN", "FORCESCAN", 
                      "FORCESEEK", "FORCE_FAILOVER_ALLOW_DATA_LOSS", "FORCE_SERVICE_ALLOW_DATA_LOSS", 
                      "FOREIGN", "FORMAT", "FORMATMESSAGE", "FORWARD_ONLY", 
                      "FREE", "FREETEXT", "FREETEXTTABLE", "FROM", "FULL", 
                      "FULLSCAN", "FULLTEXT", "FULLTEXTCATALOGPROPERTY", 
                      "FULLTEXTSERVICEPROPERTY", "FUNCTION", "GB", "GENERATED", 
                      "GET", "GETANCESTOR", "GETANSINULL", "GETDATE", "GETDESCENDANT", 
                      "GETLEVEL", "GETREPARENTEDVALUE", "GETROOT", "GETUTCDATE", 
                      "GET_FILESTREAM_TRANSACTION_CONTEXT", "GLOBAL", "GO", 
                      "GOTO", "GOVERNOR", "GRANT", "GREATEST", "GROUP", 
                      "GROUPING", "GROUPING_ID", "GROUP_MAX_REQUESTS", "HADR", 
                      "HASH", "HASHED", "HAS_DBACCESS", "HAS_PERMS_BY_NAME", 
                      "HAVING", "HEALTHCHECKTIMEOUT", "HEALTH_CHECK_TIMEOUT", 
                      "HEAP", "HIDDEN_KEYWORD", "HIERARCHYID", "HIGH", "HOLDLOCK", 
                      "HONOR_BROKER_PRIORITY", "HOST_ID", "HOST_NAME", "HOURS", 
                      "IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT", "IDENTITY_VALUE", 
                      "IDENT_CURRENT", "IDENT_INCR", "IDENT_SEED", "IF", 
                      "IGNORE_CONSTRAINTS", "IGNORE_DUP_KEY", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", 
                      "IGNORE_REPLICATED_TABLE_CACHE", "IGNORE_TRIGGERS", 
                      "IIF", "IMMEDIATE", "IMPERSONATE", "IMPLICIT_TRANSACTIONS", 
                      "IMPORTANCE", "IN", "INCLUDE", "INCLUDE_NULL_VALUES", 
                      "INCREMENT", "INCREMENTAL", "INDEX", "INDEXKEY_PROPERTY", 
                      "INDEXPROPERTY", "INDEX_COL", "INFINITE", "INIT", 
                      "INITIATOR", "INNER", "INPUT", "INSENSITIVE", "INSERT", 
                      "INSERTED", "INSTEAD", "INT", "INTERSECT", "INTO", 
                      "IO", "IP", "IS", "ISDESCENDANTOF", "ISJSON", "ISNULL", 
                      "ISNUMERIC", "ISOLATION", "IS_MEMBER", "IS_ROLEMEMBER", 
                      "IS_SRVROLEMEMBER", "JOB", "JOIN", "JSON", "JSON_ARRAY", 
                      "JSON_MODIFY", "JSON_OBJECT", "JSON_PATH_EXISTS", 
                      "JSON_QUERY", "JSON_VALUE", "KB", "KEEP", "KEEPDEFAULTS", 
                      "KEEPFIXED", "KEEPIDENTITY", "KERBEROS", "KEY", "KEYS", 
                      "KEYSET", "KEY_PATH", "KEY_SOURCE", "KEY_STORE_PROVIDER_NAME", 
                      "KILL", "LAG", "LANGUAGE", "LAST", "LAST_VALUE", "LEAD", 
                      "LEAST", "LEFT", "LEN", "LEVEL", "LIBRARY", "LIFETIME", 
                      "LIKE", "LINENO", "LINKED", "LINUX", "LIST", "LISTENER", 
                      "LISTENER_IP", "LISTENER_PORT", "LISTENER_URL", "LOAD", 
                      "LOB_COMPACTION", "LOCAL", "LOCAL_SERVICE_NAME", "LOCATION", 
                      "LOCK", "LOCK_ESCALATION", "LOG", "LOGIN", "LOGINPROPERTY", 
                      "LOOP", "LOW", "LOWER", "LTRIM", "MANUAL", "MARK", 
                      "MASK", "MASKED", "MASTER", "MATCHED", "MATERIALIZED", 
                      "MAX", "MAXDOP", "MAXRECURSION", "MAXSIZE", "MAXTRANSFER", 
                      "MAXVALUE", "MAX_CPU_PERCENT", "MAX_DISPATCH_LATENCY", 
                      "MAX_DOP", "MAX_DURATION", "MAX_EVENT_SIZE", "MAX_FILES", 
                      "MAX_IOPS_PER_VOLUME", "MAX_MEMORY", "MAX_MEMORY_PERCENT", 
                      "MAX_OUTSTANDING_IO_PER_VOLUME", "MAX_PROCESSES", 
                      "MAX_QUEUE_READERS", "MAX_ROLLOVER_FILES", "MAX_SIZE", 
                      "MB", "MEDIADESCRIPTION", "MEDIANAME", "MEDIUM", "MEMBER", 
                      "MEMORY_OPTIMIZED_DATA", "MEMORY_PARTITION_MODE", 
                      "MERGE", "MESSAGE", "MESSAGE_FORWARDING", "MESSAGE_FORWARD_SIZE", 
                      "MIN", "MINUTES", "MINVALUE", "MIN_ACTIVE_ROWVERSION", 
                      "MIN_CPU_PERCENT", "MIN_IOPS_PER_VOLUME", "MIN_MEMORY_PERCENT", 
                      "MIRROR", "MIRROR_ADDRESS", "MIXED_PAGE_ALLOCATION", 
                      "MODE", "MODIFY", "MODIFY_SQUARE_BRACKET", "MOVE", 
                      "MULTI_USER", "MUST_CHANGE", "NAME", "NATIONAL", "NCHAR", 
                      "NEGOTIATE", "NESTED_TRIGGERS", "NEWID", "NEWNAME", 
                      "NEWSEQUENTIALID", "NEW_ACCOUNT", "NEW_BROKER", "NEW_PASSWORD", 
                      "NEXT", "NO", "NOCHECK", "NOCOUNT", "NODES", "NOEXEC", 
                      "NOEXPAND", "NOFORMAT", "NOHOLDLOCK", "NOINDEX", "NOINIT", 
                      "NOLOCK", "NONCLUSTERED", "NONE", "NON_TRANSACTED_ACCESS", 
                      "NORECOMPUTE", "NORECOVERY", "NOREWIND", "NOSKIP", 
                      "NOT", "NOTIFICATION", "NOTIFICATIONS", "NOUNLOAD", 
                      "NOWAIT", "NO_CHECKSUM", "NO_COMPRESSION", "NO_EVENT_LOSS", 
                      "NO_INFOMSGS", "NO_QUERYSTORE", "NO_STATISTICS", "NO_TRUNCATE", 
                      "NO_WAIT", "NTILE", "NTLM", "NULLIF", "NULL_", "NULL_DOUBLE_QUOTE", 
                      "NUMANODE", "NUMBER", "NUMERIC_ROUNDABORT", "OBJECT", 
                      "OBJECTPROPERTY", "OBJECTPROPERTYEX", "OBJECT_DEFINITION", 
                      "OBJECT_ID", "OBJECT_NAME", "OBJECT_SCHEMA_NAME", 
                      "OF", "OFF", "OFFLINE", "OFFSET", "OFFSETS", "OLD_ACCOUNT", 
                      "OLD_PASSWORD", "ON", "ONLINE", "ONLY", "ON_FAILURE", 
                      "OPEN", "OPENDATASOURCE", "OPENJSON", "OPENQUERY", 
                      "OPENROWSET", "OPENXML", "OPEN_EXISTING", "OPERATIONS", 
                      "OPTIMISTIC", "OPTIMIZE", "OPTIMIZE_FOR_SEQUENTIAL_KEY", 
                      "OPTION", "OR", "ORDER", "ORIGINAL_DB_NAME", "ORIGINAL_LOGIN", 
                      "OUT", "OUTER", "OUTPUT", "OVER", "OVERRIDE", "OWNER", 
                      "OWNERSHIP", "PAD_INDEX", "PAGE", "PAGECOUNT", "PAGE_VERIFY", 
                      "PAGLOCK", "PARAMETERIZATION", "PARAM_NODE", "PARSE", 
                      "PARSENAME", "PARSEONLY", "PARTIAL", "PARTITION", 
                      "PARTITIONS", "PARTNER", "PASSWORD", "PATH", "PATINDEX", 
                      "PAUSE", "PDW_SHOWSPACEUSED", "PERCENT", "PERCENTILE_CONT", 
                      "PERCENTILE_DISC", "PERCENT_RANK", "PERMISSIONS", 
                      "PERMISSION_SET", "PERSISTED", "PERSIST_SAMPLE_PERCENT", 
                      "PER_CPU", "PER_DB", "PER_NODE", "PHYSICAL_ONLY", 
                      "PIVOT", "PLAN", "PLATFORM", "POISON_MESSAGE_HANDLING", 
                      "POLICY", "POOL", "PORT", "PRECEDING", "PRECISION", 
                      "PREDICATE", "PRIMARY", "PRIMARY_ROLE", "PRINT", "PRIOR", 
                      "PRIORITY", "PRIORITY_LEVEL", "PRIVATE", "PRIVATE_KEY", 
                      "PRIVILEGES", "PROC", "PROCCACHE", "PROCEDURE", "PROCEDURE_NAME", 
                      "PROCESS", "PROFILE", "PROPERTY", "PROVIDER", "PROVIDER_KEY_NAME", 
                      "PUBLIC", "PWDCOMPARE", "PWDENCRYPT", "PYTHON", "QUERY", 
                      "QUERY_SQUARE_BRACKET", "QUEUE", "QUEUE_DELAY", "QUOTED_IDENTIFIER", 
                      "QUOTENAME", "R", "RAISERROR", "RANDOMIZED", "RANGE", 
                      "RANK", "RAW", "RC2", "RC4", "RC4_128", "READ", "READCOMMITTED", 
                      "READCOMMITTEDLOCK", "READONLY", "READPAST", "READTEXT", 
                      "READUNCOMMITTED", "READWRITE", "READ_COMMITTED_SNAPSHOT", 
                      "READ_ONLY", "READ_ONLY_ROUTING_LIST", "READ_WRITE", 
                      "READ_WRITE_FILEGROUPS", "REBUILD", "RECEIVE", "RECOMPILE", 
                      "RECONFIGURE", "RECOVERY", "RECURSIVE_TRIGGERS", "REFERENCES", 
                      "REGENERATE", "RELATED_CONVERSATION", "RELATED_CONVERSATION_GROUP", 
                      "RELATIVE", "REMOTE", "REMOTE_PROC_TRANSACTIONS", 
                      "REMOTE_SERVICE_NAME", "REMOVE", "REORGANIZE", "REPAIR_ALLOW_DATA_LOSS", 
                      "REPAIR_FAST", "REPAIR_REBUILD", "REPEATABLE", "REPEATABLEREAD", 
                      "REPLACE", "REPLICA", "REPLICATE", "REPLICATION", 
                      "REQUEST_MAX_CPU_TIME_SEC", "REQUEST_MAX_MEMORY_GRANT_PERCENT", 
                      "REQUEST_MEMORY_GRANT_TIMEOUT_SEC", "REQUIRED", "REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT", 
                      "RESAMPLE", "RESERVE_DISK_SPACE", "RESET", "RESOURCE", 
                      "RESOURCES", "RESOURCE_MANAGER_LOCATION", "RESTART", 
                      "RESTORE", "RESTRICT", "RESTRICTED_USER", "RESUMABLE", 
                      "RESUME", "RETAINDAYS", "RETENTION", "RETURN", "RETURNS", 
                      "REVERSE", "REVERT", "REVOKE", "REWIND", "RIGHT", 
                      "ROBUST", "ROLE", "ROLLBACK", "ROOT", "ROUND_ROBIN", 
                      "ROUTE", "ROW", "ROWCOUNT", "ROWCOUNT_BIG", "ROWGUID", 
                      "ROWGUIDCOL", "ROWLOCK", "ROWS", "ROW_NUMBER", "RSA_1024", 
                      "RSA_2048", "RSA_3072", "RSA_4096", "RSA_512", "RTRIM", 
                      "RULE", "SAFE", "SAFETY", "SAMPLE", "SAVE", "SCHEDULER", 
                      "SCHEMA", "SCHEMABINDING", "SCHEMA_ID", "SCHEMA_NAME", 
                      "SCHEME", "SCOPED", "SCOPE_IDENTITY", "SCRIPT", "SCROLL", 
                      "SCROLL_LOCKS", "SEARCH", "SECONDARY", "SECONDARY_ONLY", 
                      "SECONDARY_ROLE", "SECONDS", "SECRET", "SECURABLES", 
                      "SECURITY", "SECURITYAUDIT", "SECURITY_LOG", "SEEDING_MODE", 
                      "SELECT", "SELF", "SEMANTICKEYPHRASETABLE", "SEMANTICSIMILARITYDETAILSTABLE", 
                      "SEMANTICSIMILARITYTABLE", "SEMI_SENSITIVE", "SEND", 
                      "SENT", "SEQUENCE", "SEQUENCE_NUMBER", "SERIALIZABLE", 
                      "SERVER", "SERVERPROPERTY", "SERVICE", "SERVICEBROKER", 
                      "SERVICE_BROKER", "SERVICE_NAME", "SESSION", "SESSIONPROPERTY", 
                      "SESSION_CONTEXT", "SESSION_TIMEOUT", "SESSION_USER", 
                      "SET", "SETERROR", "SETS", "SETTINGS", "SETUSER", 
                      "SHARE", "SHARED", "SHOWCONTIG", "SHOWPLAN", "SHOWPLAN_ALL", 
                      "SHOWPLAN_TEXT", "SHOWPLAN_XML", "SHRINKLOG", "SHUTDOWN", 
                      "SID", "SIGNATURE", "SIMPLE", "SINGLE_USER", "SIZE", 
                      "SKIP_KEYWORD", "SMALLINT", "SNAPSHOT", "SOFTNUMA", 
                      "SOME", "SORT_IN_TEMPDB", "SOUNDEX", "SOURCE", "SPACE_KEYWORD", 
                      "SPARSE", "SPATIAL_WINDOW_MAX_CELLS", "SPECIFICATION", 
                      "SPLIT", "SQL", "SQLDUMPERFLAGS", "SQLDUMPERPATH", 
                      "SQLDUMPERTIMEOUT", "SQL_VARIANT_PROPERTY", "STANDBY", 
                      "START", "STARTED", "STARTUP_STATE", "START_DATE", 
                      "STATE", "STATIC", "STATISTICS", "STATISTICS_INCREMENTAL", 
                      "STATISTICS_NORECOMPUTE", "STATS", "STATS_DATE", "STATS_STREAM", 
                      "STATUS", "STATUSONLY", "STDEV", "STDEVP", "STOP", 
                      "STOPLIST", "STOPPED", "STOP_ON_ERROR", "STR", "STRING_AGG", 
                      "STRING_ESCAPE", "STUFF", "SUBJECT", "SUBSCRIBE", 
                      "SUBSCRIPTION", "SUBSTRING", "SUM", "SUPPORTED", "SUSER_ID", 
                      "SUSER_NAME", "SUSER_SID", "SUSER_SNAME", "SUSPEND", 
                      "SWITCH", "SYMMETRIC", "SYNCHRONOUS_COMMIT", "SYNONYM", 
                      "SYSTEM", "SYSTEM_USER", "TABLE", "TABLERESULTS", 
                      "TABLESAMPLE", "TABLOCK", "TABLOCKX", "TAKE", "TAPE", 
                      "TARGET", "TARGET_RECOVERY_TIME", "TB", "TCP", "TEXTIMAGE_ON", 
                      "TEXTSIZE", "THEN", "THROW", "TIES", "TIME", "TIMEOUT", 
                      "TIMER", "TINYINT", "TO", "TOP", "TORN_PAGE_DETECTION", 
                      "TOSTRING", "TRACE", "TRACKING", "TRACK_CAUSALITY", 
                      "TRAN", "TRANSACTION", "TRANSACTION_ID", "TRANSFER", 
                      "TRANSFORM_NOISE_WORDS", "TRANSLATE", "TRIGGER", "TRIM", 
                      "TRIPLE_DES", "TRIPLE_DES_3KEY", "TRUNCATE", "TRUSTWORTHY", 
                      "TRY", "TRY_CAST", "TSEQUAL", "TSQL", "TWO_DIGIT_YEAR_CUTOFF", 
                      "TYPE", "TYPEPROPERTY", "TYPE_ID", "TYPE_NAME", "TYPE_WARNING", 
                      "UNBOUNDED", "UNCHECKED", "UNCOMMITTED", "UNICODE", 
                      "UNION", "UNIQUE", "UNKNOWN", "UNLIMITED", "UNLOCK", 
                      "UNMASK", "UNPIVOT", "UNSAFE", "UOW", "UPDATE", "UPDATETEXT", 
                      "UPDLOCK", "UPPER", "URL", "USE", "USED", "USER", 
                      "USER_ID", "USER_NAME", "USING", "VALIDATION", "VALID_XML", 
                      "VALUE", "VALUES", "VALUE_SQUARE_BRACKET", "VAR", 
                      "VARBINARY_KEYWORD", "VARP", "VARYING", "VERBOSELOGGING", 
                      "VERIFY_CLONEDB", "VERSION", "VIEW", "VIEWS", "VIEW_METADATA", 
                      "VISIBILITY", "WAIT", "WAITFOR", "WAIT_AT_LOW_PRIORITY", 
                      "WELL_FORMED_XML", "WHEN", "WHERE", "WHILE", "WINDOWS", 
                      "WITH", "WITHIN", "WITHOUT", "WITHOUT_ARRAY_WRAPPER", 
                      "WITNESS", "WORK", "WORKLOAD", "WRITETEXT", "XACT_ABORT", 
                      "XACT_STATE", "XLOCK", "XML", "XMLDATA", "XMLNAMESPACES", 
                      "XMLSCHEMA", "XML_COMPRESSION", "XSINIL", "ZONE", 
                      "ABS", "ACOS", "ASIN", "ATAN", "ATN2", "CEILING", 
                      "COS", "COT", "DEGREES", "EXP", "FLOOR", "LOG10", 
                      "PI", "POWER", "RADIANS", "RAND", "ROUND", "SIGN", 
                      "SIN", "SQRT", "SQUARE", "TAN", "CURRENT_TIMEZONE", 
                      "CURRENT_TIMEZONE_ID", "DATE_BUCKET", "DATEDIFF_BIG", 
                      "DATEFROMPARTS", "DATETIME2FROMPARTS", "DATETIMEFROMPARTS", 
                      "DATETIMEOFFSETFROMPARTS", "DATETRUNC", "DAY", "EOMONTH", 
                      "ISDATE", "MONTH", "SMALLDATETIMEFROMPARTS", "SWITCHOFFSET", 
                      "SYSDATETIME", "SYSDATETIMEOFFSET", "SYSUTCDATETIME", 
                      "TIMEFROMPARTS", "TODATETIMEOFFSET", "YEAR", "QUARTER", 
                      "DAYOFYEAR", "WEEK", "HOUR", "MINUTE", "SECOND", "MILLISECOND", 
                      "MICROSECOND", "NANOSECOND", "TZOFFSET", "ISO_WEEK", 
                      "WEEKDAY", "YEAR_ABBR", "QUARTER_ABBR", "MONTH_ABBR", 
                      "DAYOFYEAR_ABBR", "DAY_ABBR", "WEEK_ABBR", "HOUR_ABBR", 
                      "MINUTE_ABBR", "SECOND_ABBR", "MILLISECOND_ABBR", 
                      "MICROSECOND_ABBR", "NANOSECOND_ABBR", "TZOFFSET_ABBR", 
                      "ISO_WEEK_ABBR", "WEEKDAY_ABBR", "SP_EXECUTESQL", 
                      "VARCHAR", "NVARCHAR", "DISK_DRIVE", "DOLLAR_ACTION", 
                      "CURSOR_ROWS", "FETCH_STATUS", "IPV4_ADDR", "SPACE", 
                      "COMMENT", "LINE_COMMENT", "DOUBLE_QUOTE_ID", "DOUBLE_QUOTE_BLANK", 
                      "SINGLE_QUOTE", "SQUARE_BRACKET_ID", "LOCAL_ID", "TEMP_ID", 
                      "DECIMAL", "ID", "STRING", "BINARY", "FLOAT", "REAL", 
                      "EQUAL", "GREATER", "LESS", "EXCLAMATION", "PLUS_ASSIGN", 
                      "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
                      "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "DOUBLE_BAR", 
                      "DOT", "UNDERLINE", "AT", "SHARP", "DOLLAR", "LR_BRACKET", 
                      "RR_BRACKET", "COMMA", "SEMI", "COLON", "DOUBLE_COLON", 
                      "STAR", "DIVIDE", "MODULE", "PLUS", "MINUS", "BIT_NOT", 
                      "BIT_OR", "BIT_AND", "BIT_XOR", "PLACEHOLDER" ]

    RULE_tsql_file = 0
    RULE_batch = 1
    RULE_batch_level_statement = 2
    RULE_sql_clauses = 3
    RULE_dml_clause = 4
    RULE_ddl_clause = 5
    RULE_backup_statement = 6
    RULE_cfl_statement = 7
    RULE_block_statement = 8
    RULE_break_statement = 9
    RULE_continue_statement = 10
    RULE_goto_statement = 11
    RULE_return_statement = 12
    RULE_if_statement = 13
    RULE_throw_statement = 14
    RULE_throw_error_number = 15
    RULE_throw_message = 16
    RULE_throw_state = 17
    RULE_try_catch_statement = 18
    RULE_waitfor_statement = 19
    RULE_while_statement = 20
    RULE_print_statement = 21
    RULE_raiseerror_statement = 22
    RULE_empty_statement = 23
    RULE_another_statement = 24
    RULE_alter_application_role = 25
    RULE_alter_xml_schema_collection = 26
    RULE_create_application_role = 27
    RULE_drop_aggregate = 28
    RULE_drop_application_role = 29
    RULE_alter_assembly = 30
    RULE_alter_assembly_start = 31
    RULE_alter_assembly_clause = 32
    RULE_alter_assembly_from_clause = 33
    RULE_alter_assembly_from_clause_start = 34
    RULE_alter_assembly_drop_clause = 35
    RULE_alter_assembly_drop_multiple_files = 36
    RULE_alter_assembly_drop = 37
    RULE_alter_assembly_add_clause = 38
    RULE_alter_asssembly_add_clause_start = 39
    RULE_alter_assembly_client_file_clause = 40
    RULE_alter_assembly_file_name = 41
    RULE_alter_assembly_file_bits = 42
    RULE_alter_assembly_as = 43
    RULE_alter_assembly_with_clause = 44
    RULE_alter_assembly_with = 45
    RULE_client_assembly_specifier = 46
    RULE_assembly_option = 47
    RULE_network_file_share = 48
    RULE_network_computer = 49
    RULE_network_file_start = 50
    RULE_file_path = 51
    RULE_file_directory_path_separator = 52
    RULE_local_file = 53
    RULE_local_drive = 54
    RULE_multiple_local_files = 55
    RULE_multiple_local_file_start = 56
    RULE_create_assembly = 57
    RULE_drop_assembly = 58
    RULE_alter_asymmetric_key = 59
    RULE_alter_asymmetric_key_start = 60
    RULE_asymmetric_key_option = 61
    RULE_asymmetric_key_option_start = 62
    RULE_asymmetric_key_password_change_option = 63
    RULE_create_asymmetric_key = 64
    RULE_drop_asymmetric_key = 65
    RULE_alter_authorization = 66
    RULE_authorization_grantee = 67
    RULE_entity_to = 68
    RULE_colon_colon = 69
    RULE_alter_authorization_start = 70
    RULE_alter_authorization_for_sql_database = 71
    RULE_alter_authorization_for_azure_dw = 72
    RULE_alter_authorization_for_parallel_dw = 73
    RULE_class_type = 74
    RULE_class_type_for_sql_database = 75
    RULE_class_type_for_azure_dw = 76
    RULE_class_type_for_parallel_dw = 77
    RULE_class_type_for_grant = 78
    RULE_drop_availability_group = 79
    RULE_alter_availability_group = 80
    RULE_alter_availability_group_start = 81
    RULE_alter_availability_group_options = 82
    RULE_ip_v4_failover = 83
    RULE_ip_v6_failover = 84
    RULE_create_or_alter_broker_priority = 85
    RULE_drop_broker_priority = 86
    RULE_alter_certificate = 87
    RULE_alter_column_encryption_key = 88
    RULE_create_column_encryption_key = 89
    RULE_drop_certificate = 90
    RULE_drop_column_encryption_key = 91
    RULE_drop_column_master_key = 92
    RULE_drop_contract = 93
    RULE_drop_credential = 94
    RULE_drop_cryptograhic_provider = 95
    RULE_drop_database = 96
    RULE_drop_database_audit_specification = 97
    RULE_drop_database_encryption_key = 98
    RULE_drop_database_scoped_credential = 99
    RULE_drop_default = 100
    RULE_drop_endpoint = 101
    RULE_drop_external_data_source = 102
    RULE_drop_external_file_format = 103
    RULE_drop_external_library = 104
    RULE_drop_external_resource_pool = 105
    RULE_drop_external_table = 106
    RULE_drop_event_notifications = 107
    RULE_drop_event_session = 108
    RULE_drop_fulltext_catalog = 109
    RULE_drop_fulltext_index = 110
    RULE_drop_fulltext_stoplist = 111
    RULE_drop_login = 112
    RULE_drop_master_key = 113
    RULE_drop_message_type = 114
    RULE_drop_partition_function = 115
    RULE_drop_partition_scheme = 116
    RULE_drop_queue = 117
    RULE_drop_remote_service_binding = 118
    RULE_drop_resource_pool = 119
    RULE_drop_db_role = 120
    RULE_drop_route = 121
    RULE_drop_rule = 122
    RULE_drop_schema = 123
    RULE_drop_search_property_list = 124
    RULE_drop_security_policy = 125
    RULE_drop_sequence = 126
    RULE_drop_server_audit = 127
    RULE_drop_server_audit_specification = 128
    RULE_drop_server_role = 129
    RULE_drop_service = 130
    RULE_drop_signature = 131
    RULE_drop_statistics_name_azure_dw_and_pdw = 132
    RULE_drop_symmetric_key = 133
    RULE_drop_synonym = 134
    RULE_drop_user = 135
    RULE_drop_workload_group = 136
    RULE_drop_xml_schema_collection = 137
    RULE_disable_trigger = 138
    RULE_enable_trigger = 139
    RULE_lock_table = 140
    RULE_truncate_table = 141
    RULE_create_column_master_key = 142
    RULE_alter_credential = 143
    RULE_create_credential = 144
    RULE_alter_cryptographic_provider = 145
    RULE_create_cryptographic_provider = 146
    RULE_create_endpoint = 147
    RULE_endpoint_encryption_alogorithm_clause = 148
    RULE_endpoint_authentication_clause = 149
    RULE_endpoint_listener_clause = 150
    RULE_create_event_notification = 151
    RULE_create_or_alter_event_session = 152
    RULE_event_session_predicate_expression = 153
    RULE_event_session_predicate_factor = 154
    RULE_event_session_predicate_leaf = 155
    RULE_alter_external_data_source = 156
    RULE_alter_external_library = 157
    RULE_create_external_library = 158
    RULE_alter_external_resource_pool = 159
    RULE_create_external_resource_pool = 160
    RULE_alter_fulltext_catalog = 161
    RULE_create_fulltext_catalog = 162
    RULE_alter_fulltext_stoplist = 163
    RULE_create_fulltext_stoplist = 164
    RULE_alter_login_sql_server = 165
    RULE_create_login_sql_server = 166
    RULE_alter_login_azure_sql = 167
    RULE_create_login_azure_sql = 168
    RULE_alter_login_azure_sql_dw_and_pdw = 169
    RULE_create_login_pdw = 170
    RULE_alter_master_key_sql_server = 171
    RULE_create_master_key_sql_server = 172
    RULE_alter_master_key_azure_sql = 173
    RULE_create_master_key_azure_sql = 174
    RULE_alter_message_type = 175
    RULE_alter_partition_function = 176
    RULE_alter_partition_scheme = 177
    RULE_alter_remote_service_binding = 178
    RULE_create_remote_service_binding = 179
    RULE_create_resource_pool = 180
    RULE_alter_resource_governor = 181
    RULE_alter_database_audit_specification = 182
    RULE_audit_action_spec_group = 183
    RULE_audit_action_specification = 184
    RULE_action_specification = 185
    RULE_audit_class_name = 186
    RULE_audit_securable = 187
    RULE_alter_db_role = 188
    RULE_create_database_audit_specification = 189
    RULE_create_db_role = 190
    RULE_create_route = 191
    RULE_create_rule = 192
    RULE_alter_schema_sql = 193
    RULE_create_schema = 194
    RULE_create_schema_azure_sql_dw_and_pdw = 195
    RULE_alter_schema_azure_sql_dw_and_pdw = 196
    RULE_create_search_property_list = 197
    RULE_create_security_policy = 198
    RULE_alter_sequence = 199
    RULE_create_sequence = 200
    RULE_alter_server_audit = 201
    RULE_create_server_audit = 202
    RULE_alter_server_audit_specification = 203
    RULE_create_server_audit_specification = 204
    RULE_alter_server_configuration = 205
    RULE_alter_server_role = 206
    RULE_create_server_role = 207
    RULE_alter_server_role_pdw = 208
    RULE_alter_service = 209
    RULE_opt_arg_clause = 210
    RULE_create_service = 211
    RULE_alter_service_master_key = 212
    RULE_alter_symmetric_key = 213
    RULE_create_synonym = 214
    RULE_alter_user = 215
    RULE_create_user = 216
    RULE_create_user_azure_sql_dw = 217
    RULE_alter_user_azure_sql = 218
    RULE_alter_workload_group = 219
    RULE_create_workload_group = 220
    RULE_create_xml_schema_collection = 221
    RULE_create_partition_function = 222
    RULE_create_partition_scheme = 223
    RULE_create_queue = 224
    RULE_queue_settings = 225
    RULE_alter_queue = 226
    RULE_queue_action = 227
    RULE_queue_rebuild_options = 228
    RULE_create_contract = 229
    RULE_conversation_statement = 230
    RULE_message_statement = 231
    RULE_merge_statement = 232
    RULE_when_matches = 233
    RULE_merge_matched = 234
    RULE_merge_not_matched = 235
    RULE_delete_statement = 236
    RULE_delete_statement_from = 237
    RULE_insert_statement = 238
    RULE_insert_statement_value = 239
    RULE_receive_statement = 240
    RULE_select_statement_standalone = 241
    RULE_select_statement = 242
    RULE_time = 243
    RULE_update_statement = 244
    RULE_output_clause = 245
    RULE_output_dml_list_elem = 246
    RULE_bulk_insert_statement = 247
    RULE_create_database = 248
    RULE_create_index = 249
    RULE_create_index_options = 250
    RULE_relational_index_option = 251
    RULE_alter_index = 252
    RULE_resumable_index_options = 253
    RULE_resumable_index_option = 254
    RULE_reorganize_partition = 255
    RULE_reorganize_options = 256
    RULE_reorganize_option = 257
    RULE_set_index_options = 258
    RULE_set_index_option = 259
    RULE_rebuild_partition = 260
    RULE_rebuild_index_options = 261
    RULE_rebuild_index_option = 262
    RULE_single_partition_rebuild_index_options = 263
    RULE_single_partition_rebuild_index_option = 264
    RULE_on_partitions = 265
    RULE_create_columnstore_index = 266
    RULE_create_columnstore_index_options = 267
    RULE_columnstore_index_option = 268
    RULE_create_nonclustered_columnstore_index = 269
    RULE_create_xml_index = 270
    RULE_xml_index_options = 271
    RULE_xml_index_option = 272
    RULE_create_or_alter_procedure = 273
    RULE_as_external_name = 274
    RULE_create_or_alter_trigger = 275
    RULE_create_or_alter_dml_trigger = 276
    RULE_dml_trigger_option = 277
    RULE_dml_trigger_operation = 278
    RULE_create_or_alter_ddl_trigger = 279
    RULE_ddl_trigger_operation = 280
    RULE_create_or_alter_function = 281
    RULE_func_body_returns_select = 282
    RULE_func_body_returns_table = 283
    RULE_func_body_returns_scalar = 284
    RULE_procedure_param_default_value = 285
    RULE_procedure_param = 286
    RULE_procedure_option = 287
    RULE_function_option = 288
    RULE_create_statistics = 289
    RULE_update_statistics = 290
    RULE_update_statistics_options = 291
    RULE_update_statistics_option = 292
    RULE_create_table = 293
    RULE_table_indices = 294
    RULE_table_options = 295
    RULE_table_option = 296
    RULE_create_table_index_options = 297
    RULE_create_table_index_option = 298
    RULE_create_view = 299
    RULE_view_attribute = 300
    RULE_alter_table = 301
    RULE_switch_partition = 302
    RULE_low_priority_lock_wait = 303
    RULE_alter_database = 304
    RULE_add_or_modify_files = 305
    RULE_filespec = 306
    RULE_add_or_modify_filegroups = 307
    RULE_filegroup_updatability_option = 308
    RULE_database_optionspec = 309
    RULE_auto_option = 310
    RULE_change_tracking_option = 311
    RULE_change_tracking_option_list = 312
    RULE_containment_option = 313
    RULE_cursor_option = 314
    RULE_alter_endpoint = 315
    RULE_database_mirroring_option = 316
    RULE_mirroring_set_option = 317
    RULE_mirroring_partner = 318
    RULE_mirroring_witness = 319
    RULE_witness_partner_equal = 320
    RULE_partner_option = 321
    RULE_witness_option = 322
    RULE_witness_server = 323
    RULE_partner_server = 324
    RULE_mirroring_host_port_seperator = 325
    RULE_partner_server_tcp_prefix = 326
    RULE_port_number = 327
    RULE_host = 328
    RULE_date_correlation_optimization_option = 329
    RULE_db_encryption_option = 330
    RULE_db_state_option = 331
    RULE_db_update_option = 332
    RULE_db_user_access_option = 333
    RULE_delayed_durability_option = 334
    RULE_external_access_option = 335
    RULE_hadr_options = 336
    RULE_mixed_page_allocation_option = 337
    RULE_parameterization_option = 338
    RULE_recovery_option = 339
    RULE_service_broker_option = 340
    RULE_snapshot_option = 341
    RULE_sql_option = 342
    RULE_target_recovery_time_option = 343
    RULE_termination = 344
    RULE_drop_index = 345
    RULE_drop_relational_or_xml_or_spatial_index = 346
    RULE_drop_backward_compatible_index = 347
    RULE_drop_procedure = 348
    RULE_drop_trigger = 349
    RULE_drop_dml_trigger = 350
    RULE_drop_ddl_trigger = 351
    RULE_drop_function = 352
    RULE_drop_statistics = 353
    RULE_drop_table = 354
    RULE_drop_view = 355
    RULE_create_type = 356
    RULE_drop_type = 357
    RULE_rowset_function_limited = 358
    RULE_openquery = 359
    RULE_opendatasource = 360
    RULE_declare_statement = 361
    RULE_xml_declaration = 362
    RULE_cursor_statement = 363
    RULE_backup_database = 364
    RULE_backup_log = 365
    RULE_backup_certificate = 366
    RULE_backup_master_key = 367
    RULE_backup_service_master_key = 368
    RULE_kill_statement = 369
    RULE_kill_process = 370
    RULE_kill_query_notification = 371
    RULE_kill_stats_job = 372
    RULE_execute_statement = 373
    RULE_execute_body_batch = 374
    RULE_execute_body = 375
    RULE_execute_statement_arg = 376
    RULE_execute_statement_arg_named = 377
    RULE_execute_statement_arg_unnamed = 378
    RULE_execute_parameter = 379
    RULE_execute_var_string = 380
    RULE_security_statement = 381
    RULE_principal_id = 382
    RULE_create_certificate = 383
    RULE_existing_keys = 384
    RULE_private_key_options = 385
    RULE_generate_new_keys = 386
    RULE_date_options = 387
    RULE_open_key = 388
    RULE_close_key = 389
    RULE_create_key = 390
    RULE_key_options = 391
    RULE_algorithm = 392
    RULE_encryption_mechanism = 393
    RULE_decryption_mechanism = 394
    RULE_grant_permission = 395
    RULE_set_statement = 396
    RULE_transaction_statement = 397
    RULE_go_statement = 398
    RULE_use_statement = 399
    RULE_setuser_statement = 400
    RULE_reconfigure_statement = 401
    RULE_shutdown_statement = 402
    RULE_checkpoint_statement = 403
    RULE_dbcc_checkalloc_option = 404
    RULE_dbcc_checkalloc = 405
    RULE_dbcc_checkcatalog = 406
    RULE_dbcc_checkconstraints_option = 407
    RULE_dbcc_checkconstraints = 408
    RULE_dbcc_checkdb_table_option = 409
    RULE_dbcc_checkdb = 410
    RULE_dbcc_checkfilegroup_option = 411
    RULE_dbcc_checkfilegroup = 412
    RULE_dbcc_checktable = 413
    RULE_dbcc_cleantable = 414
    RULE_dbcc_clonedatabase_option = 415
    RULE_dbcc_clonedatabase = 416
    RULE_dbcc_pdw_showspaceused = 417
    RULE_dbcc_proccache = 418
    RULE_dbcc_showcontig_option = 419
    RULE_dbcc_showcontig = 420
    RULE_dbcc_shrinklog = 421
    RULE_dbcc_dbreindex = 422
    RULE_dbcc_dll_free = 423
    RULE_dbcc_dropcleanbuffers = 424
    RULE_dbcc_clause = 425
    RULE_execute_clause = 426
    RULE_declare_local = 427
    RULE_table_type_definition = 428
    RULE_table_type_indices = 429
    RULE_xml_type_definition = 430
    RULE_xml_schema_collection = 431
    RULE_column_def_table_constraints = 432
    RULE_column_def_table_constraint = 433
    RULE_column_definition = 434
    RULE_column_definition_element = 435
    RULE_column_modifier = 436
    RULE_materialized_column_definition = 437
    RULE_column_constraint = 438
    RULE_column_index = 439
    RULE_on_partition_or_filegroup = 440
    RULE_table_constraint = 441
    RULE_connection_node = 442
    RULE_primary_key_options = 443
    RULE_foreign_key_options = 444
    RULE_check_constraint = 445
    RULE_on_delete = 446
    RULE_on_update = 447
    RULE_alter_table_index_options = 448
    RULE_alter_table_index_option = 449
    RULE_declare_cursor = 450
    RULE_declare_set_cursor_common = 451
    RULE_declare_set_cursor_common_partial = 452
    RULE_fetch_cursor = 453
    RULE_set_special = 454
    RULE_special_list = 455
    RULE_constant_LOCAL_ID = 456
    RULE_expression = 457
    RULE_parameter = 458
    RULE_time_zone = 459
    RULE_primitive_expression = 460
    RULE_case_expression = 461
    RULE_unary_operator_expression = 462
    RULE_bracket_expression = 463
    RULE_subquery = 464
    RULE_with_expression = 465
    RULE_common_table_expression = 466
    RULE_update_elem = 467
    RULE_update_elem_merge = 468
    RULE_search_condition = 469
    RULE_predicate = 470
    RULE_query_expression = 471
    RULE_sql_union = 472
    RULE_query_specification = 473
    RULE_top_clause = 474
    RULE_top_percent = 475
    RULE_top_count = 476
    RULE_order_by_clause = 477
    RULE_select_order_by_clause = 478
    RULE_for_clause = 479
    RULE_xml_common_directives = 480
    RULE_order_by_expression = 481
    RULE_grouping_sets_item = 482
    RULE_group_by_item = 483
    RULE_option_clause = 484
    RULE_option = 485
    RULE_optimize_for_arg = 486
    RULE_select_list = 487
    RULE_udt_method_arguments = 488
    RULE_asterisk = 489
    RULE_udt_elem = 490
    RULE_expression_elem = 491
    RULE_select_list_elem = 492
    RULE_table_sources = 493
    RULE_non_ansi_join = 494
    RULE_table_source = 495
    RULE_table_source_item = 496
    RULE_open_xml = 497
    RULE_open_json = 498
    RULE_json_declaration = 499
    RULE_json_column_declaration = 500
    RULE_schema_declaration = 501
    RULE_column_declaration = 502
    RULE_change_table = 503
    RULE_change_table_changes = 504
    RULE_change_table_version = 505
    RULE_join_part = 506
    RULE_join_on = 507
    RULE_cross_join = 508
    RULE_apply_ = 509
    RULE_pivot = 510
    RULE_unpivot = 511
    RULE_pivot_clause = 512
    RULE_unpivot_clause = 513
    RULE_full_column_name_list = 514
    RULE_rowset_function = 515
    RULE_bulk_option = 516
    RULE_derived_table = 517
    RULE_function_call = 518
    RULE_partition_function = 519
    RULE_freetext_function = 520
    RULE_freetext_predicate = 521
    RULE_json_key_value = 522
    RULE_json_null_clause = 523
    RULE_built_in_functions = 524
    RULE_xml_data_type_methods = 525
    RULE_dateparts_9 = 526
    RULE_dateparts_12 = 527
    RULE_dateparts_15 = 528
    RULE_dateparts_datetrunc = 529
    RULE_value_method = 530
    RULE_value_call = 531
    RULE_query_method = 532
    RULE_query_call = 533
    RULE_exist_method = 534
    RULE_exist_call = 535
    RULE_modify_method = 536
    RULE_modify_call = 537
    RULE_hierarchyid_call = 538
    RULE_hierarchyid_static_method = 539
    RULE_nodes_method = 540
    RULE_switch_section = 541
    RULE_switch_search_condition_section = 542
    RULE_as_column_alias = 543
    RULE_as_table_alias = 544
    RULE_table_alias = 545
    RULE_with_table_hints = 546
    RULE_deprecated_table_hint = 547
    RULE_sybase_legacy_hints = 548
    RULE_sybase_legacy_hint = 549
    RULE_table_hint = 550
    RULE_index_value = 551
    RULE_column_alias_list = 552
    RULE_column_alias = 553
    RULE_table_value_constructor = 554
    RULE_expression_list_ = 555
    RULE_ranking_windowed_function = 556
    RULE_aggregate_windowed_function = 557
    RULE_analytic_windowed_function = 558
    RULE_all_distinct_expression = 559
    RULE_over_clause = 560
    RULE_row_or_range_clause = 561
    RULE_window_frame_extent = 562
    RULE_window_frame_bound = 563
    RULE_window_frame_preceding = 564
    RULE_window_frame_following = 565
    RULE_create_database_option = 566
    RULE_database_filestream_option = 567
    RULE_database_file_spec = 568
    RULE_file_group = 569
    RULE_file_spec = 570
    RULE_entity_name = 571
    RULE_entity_name_for_azure_dw = 572
    RULE_entity_name_for_parallel_dw = 573
    RULE_full_table_name = 574
    RULE_table_name = 575
    RULE_simple_name = 576
    RULE_func_proc_name_schema = 577
    RULE_func_proc_name_database_schema = 578
    RULE_func_proc_name_server_database_schema = 579
    RULE_ddl_object = 580
    RULE_full_column_name = 581
    RULE_column_name_list_with_order = 582
    RULE_insert_column_name_list = 583
    RULE_insert_column_id = 584
    RULE_column_name_list = 585
    RULE_cursor_name = 586
    RULE_on_off = 587
    RULE_clustered = 588
    RULE_null_notnull = 589
    RULE_scalar_function_name = 590
    RULE_begin_conversation_timer = 591
    RULE_begin_conversation_dialog = 592
    RULE_contract_name = 593
    RULE_service_name = 594
    RULE_end_conversation = 595
    RULE_waitfor_conversation = 596
    RULE_get_conversation = 597
    RULE_queue_id = 598
    RULE_send_conversation = 599
    RULE_data_type = 600
    RULE_constant = 601
    RULE_primitive_constant = 602
    RULE_keyword = 603
    RULE_id_ = 604
    RULE_simple_id = 605
    RULE_id_or_string = 606
    RULE_comparison_operator = 607
    RULE_assignment_operator = 608
    RULE_file_size = 609

    ruleNames =  [ "tsql_file", "batch", "batch_level_statement", "sql_clauses", 
                   "dml_clause", "ddl_clause", "backup_statement", "cfl_statement", 
                   "block_statement", "break_statement", "continue_statement", 
                   "goto_statement", "return_statement", "if_statement", 
                   "throw_statement", "throw_error_number", "throw_message", 
                   "throw_state", "try_catch_statement", "waitfor_statement", 
                   "while_statement", "print_statement", "raiseerror_statement", 
                   "empty_statement", "another_statement", "alter_application_role", 
                   "alter_xml_schema_collection", "create_application_role", 
                   "drop_aggregate", "drop_application_role", "alter_assembly", 
                   "alter_assembly_start", "alter_assembly_clause", "alter_assembly_from_clause", 
                   "alter_assembly_from_clause_start", "alter_assembly_drop_clause", 
                   "alter_assembly_drop_multiple_files", "alter_assembly_drop", 
                   "alter_assembly_add_clause", "alter_asssembly_add_clause_start", 
                   "alter_assembly_client_file_clause", "alter_assembly_file_name", 
                   "alter_assembly_file_bits", "alter_assembly_as", "alter_assembly_with_clause", 
                   "alter_assembly_with", "client_assembly_specifier", "assembly_option", 
                   "network_file_share", "network_computer", "network_file_start", 
                   "file_path", "file_directory_path_separator", "local_file", 
                   "local_drive", "multiple_local_files", "multiple_local_file_start", 
                   "create_assembly", "drop_assembly", "alter_asymmetric_key", 
                   "alter_asymmetric_key_start", "asymmetric_key_option", 
                   "asymmetric_key_option_start", "asymmetric_key_password_change_option", 
                   "create_asymmetric_key", "drop_asymmetric_key", "alter_authorization", 
                   "authorization_grantee", "entity_to", "colon_colon", 
                   "alter_authorization_start", "alter_authorization_for_sql_database", 
                   "alter_authorization_for_azure_dw", "alter_authorization_for_parallel_dw", 
                   "class_type", "class_type_for_sql_database", "class_type_for_azure_dw", 
                   "class_type_for_parallel_dw", "class_type_for_grant", 
                   "drop_availability_group", "alter_availability_group", 
                   "alter_availability_group_start", "alter_availability_group_options", 
                   "ip_v4_failover", "ip_v6_failover", "create_or_alter_broker_priority", 
                   "drop_broker_priority", "alter_certificate", "alter_column_encryption_key", 
                   "create_column_encryption_key", "drop_certificate", "drop_column_encryption_key", 
                   "drop_column_master_key", "drop_contract", "drop_credential", 
                   "drop_cryptograhic_provider", "drop_database", "drop_database_audit_specification", 
                   "drop_database_encryption_key", "drop_database_scoped_credential", 
                   "drop_default", "drop_endpoint", "drop_external_data_source", 
                   "drop_external_file_format", "drop_external_library", 
                   "drop_external_resource_pool", "drop_external_table", 
                   "drop_event_notifications", "drop_event_session", "drop_fulltext_catalog", 
                   "drop_fulltext_index", "drop_fulltext_stoplist", "drop_login", 
                   "drop_master_key", "drop_message_type", "drop_partition_function", 
                   "drop_partition_scheme", "drop_queue", "drop_remote_service_binding", 
                   "drop_resource_pool", "drop_db_role", "drop_route", "drop_rule", 
                   "drop_schema", "drop_search_property_list", "drop_security_policy", 
                   "drop_sequence", "drop_server_audit", "drop_server_audit_specification", 
                   "drop_server_role", "drop_service", "drop_signature", 
                   "drop_statistics_name_azure_dw_and_pdw", "drop_symmetric_key", 
                   "drop_synonym", "drop_user", "drop_workload_group", "drop_xml_schema_collection", 
                   "disable_trigger", "enable_trigger", "lock_table", "truncate_table", 
                   "create_column_master_key", "alter_credential", "create_credential", 
                   "alter_cryptographic_provider", "create_cryptographic_provider", 
                   "create_endpoint", "endpoint_encryption_alogorithm_clause", 
                   "endpoint_authentication_clause", "endpoint_listener_clause", 
                   "create_event_notification", "create_or_alter_event_session", 
                   "event_session_predicate_expression", "event_session_predicate_factor", 
                   "event_session_predicate_leaf", "alter_external_data_source", 
                   "alter_external_library", "create_external_library", 
                   "alter_external_resource_pool", "create_external_resource_pool", 
                   "alter_fulltext_catalog", "create_fulltext_catalog", 
                   "alter_fulltext_stoplist", "create_fulltext_stoplist", 
                   "alter_login_sql_server", "create_login_sql_server", 
                   "alter_login_azure_sql", "create_login_azure_sql", "alter_login_azure_sql_dw_and_pdw", 
                   "create_login_pdw", "alter_master_key_sql_server", "create_master_key_sql_server", 
                   "alter_master_key_azure_sql", "create_master_key_azure_sql", 
                   "alter_message_type", "alter_partition_function", "alter_partition_scheme", 
                   "alter_remote_service_binding", "create_remote_service_binding", 
                   "create_resource_pool", "alter_resource_governor", "alter_database_audit_specification", 
                   "audit_action_spec_group", "audit_action_specification", 
                   "action_specification", "audit_class_name", "audit_securable", 
                   "alter_db_role", "create_database_audit_specification", 
                   "create_db_role", "create_route", "create_rule", "alter_schema_sql", 
                   "create_schema", "create_schema_azure_sql_dw_and_pdw", 
                   "alter_schema_azure_sql_dw_and_pdw", "create_search_property_list", 
                   "create_security_policy", "alter_sequence", "create_sequence", 
                   "alter_server_audit", "create_server_audit", "alter_server_audit_specification", 
                   "create_server_audit_specification", "alter_server_configuration", 
                   "alter_server_role", "create_server_role", "alter_server_role_pdw", 
                   "alter_service", "opt_arg_clause", "create_service", 
                   "alter_service_master_key", "alter_symmetric_key", "create_synonym", 
                   "alter_user", "create_user", "create_user_azure_sql_dw", 
                   "alter_user_azure_sql", "alter_workload_group", "create_workload_group", 
                   "create_xml_schema_collection", "create_partition_function", 
                   "create_partition_scheme", "create_queue", "queue_settings", 
                   "alter_queue", "queue_action", "queue_rebuild_options", 
                   "create_contract", "conversation_statement", "message_statement", 
                   "merge_statement", "when_matches", "merge_matched", "merge_not_matched", 
                   "delete_statement", "delete_statement_from", "insert_statement", 
                   "insert_statement_value", "receive_statement", "select_statement_standalone", 
                   "select_statement", "time", "update_statement", "output_clause", 
                   "output_dml_list_elem", "bulk_insert_statement", "create_database", 
                   "create_index", "create_index_options", "relational_index_option", 
                   "alter_index", "resumable_index_options", "resumable_index_option", 
                   "reorganize_partition", "reorganize_options", "reorganize_option", 
                   "set_index_options", "set_index_option", "rebuild_partition", 
                   "rebuild_index_options", "rebuild_index_option", "single_partition_rebuild_index_options", 
                   "single_partition_rebuild_index_option", "on_partitions", 
                   "create_columnstore_index", "create_columnstore_index_options", 
                   "columnstore_index_option", "create_nonclustered_columnstore_index", 
                   "create_xml_index", "xml_index_options", "xml_index_option", 
                   "create_or_alter_procedure", "as_external_name", "create_or_alter_trigger", 
                   "create_or_alter_dml_trigger", "dml_trigger_option", 
                   "dml_trigger_operation", "create_or_alter_ddl_trigger", 
                   "ddl_trigger_operation", "create_or_alter_function", 
                   "func_body_returns_select", "func_body_returns_table", 
                   "func_body_returns_scalar", "procedure_param_default_value", 
                   "procedure_param", "procedure_option", "function_option", 
                   "create_statistics", "update_statistics", "update_statistics_options", 
                   "update_statistics_option", "create_table", "table_indices", 
                   "table_options", "table_option", "create_table_index_options", 
                   "create_table_index_option", "create_view", "view_attribute", 
                   "alter_table", "switch_partition", "low_priority_lock_wait", 
                   "alter_database", "add_or_modify_files", "filespec", 
                   "add_or_modify_filegroups", "filegroup_updatability_option", 
                   "database_optionspec", "auto_option", "change_tracking_option", 
                   "change_tracking_option_list", "containment_option", 
                   "cursor_option", "alter_endpoint", "database_mirroring_option", 
                   "mirroring_set_option", "mirroring_partner", "mirroring_witness", 
                   "witness_partner_equal", "partner_option", "witness_option", 
                   "witness_server", "partner_server", "mirroring_host_port_seperator", 
                   "partner_server_tcp_prefix", "port_number", "host", "date_correlation_optimization_option", 
                   "db_encryption_option", "db_state_option", "db_update_option", 
                   "db_user_access_option", "delayed_durability_option", 
                   "external_access_option", "hadr_options", "mixed_page_allocation_option", 
                   "parameterization_option", "recovery_option", "service_broker_option", 
                   "snapshot_option", "sql_option", "target_recovery_time_option", 
                   "termination", "drop_index", "drop_relational_or_xml_or_spatial_index", 
                   "drop_backward_compatible_index", "drop_procedure", "drop_trigger", 
                   "drop_dml_trigger", "drop_ddl_trigger", "drop_function", 
                   "drop_statistics", "drop_table", "drop_view", "create_type", 
                   "drop_type", "rowset_function_limited", "openquery", 
                   "opendatasource", "declare_statement", "xml_declaration", 
                   "cursor_statement", "backup_database", "backup_log", 
                   "backup_certificate", "backup_master_key", "backup_service_master_key", 
                   "kill_statement", "kill_process", "kill_query_notification", 
                   "kill_stats_job", "execute_statement", "execute_body_batch", 
                   "execute_body", "execute_statement_arg", "execute_statement_arg_named", 
                   "execute_statement_arg_unnamed", "execute_parameter", 
                   "execute_var_string", "security_statement", "principal_id", 
                   "create_certificate", "existing_keys", "private_key_options", 
                   "generate_new_keys", "date_options", "open_key", "close_key", 
                   "create_key", "key_options", "algorithm", "encryption_mechanism", 
                   "decryption_mechanism", "grant_permission", "set_statement", 
                   "transaction_statement", "go_statement", "use_statement", 
                   "setuser_statement", "reconfigure_statement", "shutdown_statement", 
                   "checkpoint_statement", "dbcc_checkalloc_option", "dbcc_checkalloc", 
                   "dbcc_checkcatalog", "dbcc_checkconstraints_option", 
                   "dbcc_checkconstraints", "dbcc_checkdb_table_option", 
                   "dbcc_checkdb", "dbcc_checkfilegroup_option", "dbcc_checkfilegroup", 
                   "dbcc_checktable", "dbcc_cleantable", "dbcc_clonedatabase_option", 
                   "dbcc_clonedatabase", "dbcc_pdw_showspaceused", "dbcc_proccache", 
                   "dbcc_showcontig_option", "dbcc_showcontig", "dbcc_shrinklog", 
                   "dbcc_dbreindex", "dbcc_dll_free", "dbcc_dropcleanbuffers", 
                   "dbcc_clause", "execute_clause", "declare_local", "table_type_definition", 
                   "table_type_indices", "xml_type_definition", "xml_schema_collection", 
                   "column_def_table_constraints", "column_def_table_constraint", 
                   "column_definition", "column_definition_element", "column_modifier", 
                   "materialized_column_definition", "column_constraint", 
                   "column_index", "on_partition_or_filegroup", "table_constraint", 
                   "connection_node", "primary_key_options", "foreign_key_options", 
                   "check_constraint", "on_delete", "on_update", "alter_table_index_options", 
                   "alter_table_index_option", "declare_cursor", "declare_set_cursor_common", 
                   "declare_set_cursor_common_partial", "fetch_cursor", 
                   "set_special", "special_list", "constant_LOCAL_ID", "expression", 
                   "parameter", "time_zone", "primitive_expression", "case_expression", 
                   "unary_operator_expression", "bracket_expression", "subquery", 
                   "with_expression", "common_table_expression", "update_elem", 
                   "update_elem_merge", "search_condition", "predicate", 
                   "query_expression", "sql_union", "query_specification", 
                   "top_clause", "top_percent", "top_count", "order_by_clause", 
                   "select_order_by_clause", "for_clause", "xml_common_directives", 
                   "order_by_expression", "grouping_sets_item", "group_by_item", 
                   "option_clause", "option", "optimize_for_arg", "select_list", 
                   "udt_method_arguments", "asterisk", "udt_elem", "expression_elem", 
                   "select_list_elem", "table_sources", "non_ansi_join", 
                   "table_source", "table_source_item", "open_xml", "open_json", 
                   "json_declaration", "json_column_declaration", "schema_declaration", 
                   "column_declaration", "change_table", "change_table_changes", 
                   "change_table_version", "join_part", "join_on", "cross_join", 
                   "apply_", "pivot", "unpivot", "pivot_clause", "unpivot_clause", 
                   "full_column_name_list", "rowset_function", "bulk_option", 
                   "derived_table", "function_call", "partition_function", 
                   "freetext_function", "freetext_predicate", "json_key_value", 
                   "json_null_clause", "built_in_functions", "xml_data_type_methods", 
                   "dateparts_9", "dateparts_12", "dateparts_15", "dateparts_datetrunc", 
                   "value_method", "value_call", "query_method", "query_call", 
                   "exist_method", "exist_call", "modify_method", "modify_call", 
                   "hierarchyid_call", "hierarchyid_static_method", "nodes_method", 
                   "switch_section", "switch_search_condition_section", 
                   "as_column_alias", "as_table_alias", "table_alias", "with_table_hints", 
                   "deprecated_table_hint", "sybase_legacy_hints", "sybase_legacy_hint", 
                   "table_hint", "index_value", "column_alias_list", "column_alias", 
                   "table_value_constructor", "expression_list_", "ranking_windowed_function", 
                   "aggregate_windowed_function", "analytic_windowed_function", 
                   "all_distinct_expression", "over_clause", "row_or_range_clause", 
                   "window_frame_extent", "window_frame_bound", "window_frame_preceding", 
                   "window_frame_following", "create_database_option", "database_filestream_option", 
                   "database_file_spec", "file_group", "file_spec", "entity_name", 
                   "entity_name_for_azure_dw", "entity_name_for_parallel_dw", 
                   "full_table_name", "table_name", "simple_name", "func_proc_name_schema", 
                   "func_proc_name_database_schema", "func_proc_name_server_database_schema", 
                   "ddl_object", "full_column_name", "column_name_list_with_order", 
                   "insert_column_name_list", "insert_column_id", "column_name_list", 
                   "cursor_name", "on_off", "clustered", "null_notnull", 
                   "scalar_function_name", "begin_conversation_timer", "begin_conversation_dialog", 
                   "contract_name", "service_name", "end_conversation", 
                   "waitfor_conversation", "get_conversation", "queue_id", 
                   "send_conversation", "data_type", "constant", "primitive_constant", 
                   "keyword", "id_", "simple_id", "id_or_string", "comparison_operator", 
                   "assignment_operator", "file_size" ]

    EOF = Token.EOF
    ABORT=1
    ABORT_AFTER_WAIT=2
    ABSENT=3
    ABSOLUTE=4
    ACCELERATED_DATABASE_RECOVERY=5
    ACCENT_SENSITIVITY=6
    ACCESS=7
    ACTION=8
    ACTIVATION=9
    ACTIVE=10
    ADD=11
    ADDRESS=12
    ADMINISTER=13
    AES=14
    AES_128=15
    AES_192=16
    AES_256=17
    AFFINITY=18
    AFTER=19
    AGGREGATE=20
    ALGORITHM=21
    ALL=22
    ALLOWED=23
    ALLOW_CONNECTIONS=24
    ALLOW_ENCRYPTED_VALUE_MODIFICATIONS=25
    ALLOW_MULTIPLE_EVENT_LOSS=26
    ALLOW_PAGE_LOCKS=27
    ALLOW_ROW_LOCKS=28
    ALLOW_SINGLE_EVENT_LOSS=29
    ALLOW_SNAPSHOT_ISOLATION=30
    ALL_CONSTRAINTS=31
    ALL_ERRORMSGS=32
    ALL_INDEXES=33
    ALL_LEVELS=34
    ALTER=35
    ALWAYS=36
    AND=37
    ANONYMOUS=38
    ANSI_DEFAULTS=39
    ANSI_NULLS=40
    ANSI_NULL_DEFAULT=41
    ANSI_NULL_DFLT_OFF=42
    ANSI_NULL_DFLT_ON=43
    ANSI_PADDING=44
    ANSI_WARNINGS=45
    ANY=46
    APPEND=47
    APPLICATION=48
    APPLICATION_LOG=49
    APPLOCK_MODE=50
    APPLOCK_TEST=51
    APPLY=52
    APP_NAME=53
    ARITHABORT=54
    ARITHIGNORE=55
    AS=56
    ASC=57
    ASCII=58
    ASSEMBLY=59
    ASSEMBLYPROPERTY=60
    ASYMMETRIC=61
    ASYNCHRONOUS_COMMIT=62
    AT_KEYWORD=63
    AUDIT=64
    AUDIT_GUID=65
    AUTHENTICATE=66
    AUTHENTICATION=67
    AUTHORIZATION=68
    AUTO=69
    AUTOGROW_ALL_FILES=70
    AUTOGROW_SINGLE_FILE=71
    AUTOMATED_BACKUP_PREFERENCE=72
    AUTOMATIC=73
    AUTO_CLEANUP=74
    AUTO_CLOSE=75
    AUTO_CREATE_STATISTICS=76
    AUTO_DROP=77
    AUTO_SHRINK=78
    AUTO_UPDATE_STATISTICS=79
    AUTO_UPDATE_STATISTICS_ASYNC=80
    AVAILABILITY=81
    AVAILABILITY_MODE=82
    AVG=83
    BACKSLASH=84
    BACKUP=85
    BACKUP_CLONEDB=86
    BACKUP_PRIORITY=87
    BASE64=88
    BEFORE=89
    BEGIN=90
    BEGIN_DIALOG=91
    BETWEEN=92
    BIGINT=93
    BINARY_CHECKSUM=94
    BINARY_KEYWORD=95
    BINDING=96
    BLOB_STORAGE=97
    BLOCK=98
    BLOCKERS=99
    BLOCKING_HIERARCHY=100
    BLOCKSIZE=101
    BREAK=102
    BROKER=103
    BROKER_INSTANCE=104
    BROWSE=105
    BUFFER=106
    BUFFERCOUNT=107
    BULK=108
    BULK_LOGGED=109
    BY=110
    CACHE=111
    CALLED=112
    CALLER=113
    CAP_CPU_PERCENT=114
    CASCADE=115
    CASE=116
    CAST=117
    CATALOG=118
    CATCH=119
    CERTENCODED=120
    CERTIFICATE=121
    CERTPRIVATEKEY=122
    CERT_ID=123
    CHANGE=124
    CHANGES=125
    CHANGETABLE=126
    CHANGE_RETENTION=127
    CHANGE_TRACKING=128
    CHAR=129
    CHARINDEX=130
    CHECK=131
    CHECKALLOC=132
    CHECKCATALOG=133
    CHECKCONSTRAINTS=134
    CHECKDB=135
    CHECKFILEGROUP=136
    CHECKPOINT=137
    CHECKSUM=138
    CHECKSUM_AGG=139
    CHECKTABLE=140
    CHECK_EXPIRATION=141
    CHECK_POLICY=142
    CLASSIFIER_FUNCTION=143
    CLEANTABLE=144
    CLEANUP=145
    CLONEDATABASE=146
    CLOSE=147
    CLUSTER=148
    CLUSTERED=149
    COALESCE=150
    COLLATE=151
    COLLECTION=152
    COLUMN=153
    COLUMNPROPERTY=154
    COLUMNS=155
    COLUMNSTORE=156
    COLUMNSTORE_ARCHIVE=157
    COLUMN_ENCRYPTION_KEY=158
    COLUMN_MASTER_KEY=159
    COL_LENGTH=160
    COL_NAME=161
    COMMIT=162
    COMMITTED=163
    COMPATIBILITY_LEVEL=164
    COMPRESS=165
    COMPRESSION=166
    COMPRESSION_DELAY=167
    COMPRESS_ALL_ROW_GROUPS=168
    COMPUTE=169
    CONCAT=170
    CONCAT_NULL_YIELDS_NULL=171
    CONCAT_WS=172
    CONFIGURATION=173
    CONNECT=174
    CONNECTION=175
    CONNECTIONPROPERTY=176
    CONSTRAINT=177
    CONTAINMENT=178
    CONTAINS=179
    CONTAINSTABLE=180
    CONTENT=181
    CONTEXT=182
    CONTEXT_INFO=183
    CONTINUE=184
    CONTINUE_AFTER_ERROR=185
    CONTRACT=186
    CONTRACT_NAME=187
    CONTROL=188
    CONVERSATION=189
    CONVERT=190
    COOKIE=191
    COPY_ONLY=192
    COUNT=193
    COUNTER=194
    COUNT_BIG=195
    CPU=196
    CREATE=197
    CREATE_NEW=198
    CREATION_DISPOSITION=199
    CREDENTIAL=200
    CROSS=201
    CRYPTOGRAPHIC=202
    CUME_DIST=203
    CURRENT=204
    CURRENT_DATE=205
    CURRENT_REQUEST_ID=206
    CURRENT_TIME=207
    CURRENT_TIMESTAMP=208
    CURRENT_TRANSACTION_ID=209
    CURRENT_USER=210
    CURSOR=211
    CURSOR_CLOSE_ON_COMMIT=212
    CURSOR_DEFAULT=213
    CURSOR_STATUS=214
    CYCLE=215
    DATA=216
    DATABASE=217
    DATABASEPROPERTYEX=218
    DATABASE_MIRRORING=219
    DATABASE_PRINCIPAL_ID=220
    DATALENGTH=221
    DATASPACE=222
    DATA_COMPRESSION=223
    DATA_PURITY=224
    DATA_SOURCE=225
    DATEADD=226
    DATEDIFF=227
    DATENAME=228
    DATEPART=229
    DATE_CORRELATION_OPTIMIZATION=230
    DAYS=231
    DBCC=232
    DBREINDEX=233
    DB_CHAINING=234
    DB_FAILOVER=235
    DB_ID=236
    DB_NAME=237
    DDL=238
    DEALLOCATE=239
    DECLARE=240
    DECOMPRESS=241
    DECRYPTION=242
    DEFAULT=243
    DEFAULT_DATABASE=244
    DEFAULT_DOUBLE_QUOTE=245
    DEFAULT_FULLTEXT_LANGUAGE=246
    DEFAULT_LANGUAGE=247
    DEFAULT_SCHEMA=248
    DEFINITION=249
    DELAY=250
    DELAYED_DURABILITY=251
    DELETE=252
    DELETED=253
    DENSE_RANK=254
    DENY=255
    DEPENDENTS=256
    DES=257
    DESC=258
    DESCRIPTION=259
    DESX=260
    DETERMINISTIC=261
    DHCP=262
    DIAGNOSTICS=263
    DIALOG=264
    DIFFERENCE=265
    DIFFERENTIAL=266
    DIRECTORY_NAME=267
    DISABLE=268
    DISABLED=269
    DISABLE_BROKER=270
    DISK=271
    DISTINCT=272
    DISTRIBUTED=273
    DISTRIBUTION=274
    DOCUMENT=275
    DOLLAR_PARTITION=276
    DOUBLE=277
    DOUBLE_BACK_SLASH=278
    DOUBLE_FORWARD_SLASH=279
    DROP=280
    DROPCLEANBUFFERS=281
    DROP_EXISTING=282
    DTC_SUPPORT=283
    DUMP=284
    DYNAMIC=285
    ELEMENTS=286
    ELSE=287
    EMERGENCY=288
    EMPTY=289
    ENABLE=290
    ENABLED=291
    ENABLE_BROKER=292
    ENCRYPTED=293
    ENCRYPTED_VALUE=294
    ENCRYPTION=295
    ENCRYPTION_TYPE=296
    END=297
    ENDPOINT=298
    ENDPOINT_URL=299
    ERRLVL=300
    ERROR=301
    ERROR_BROKER_CONVERSATIONS=302
    ERROR_LINE=303
    ERROR_MESSAGE=304
    ERROR_NUMBER=305
    ERROR_PROCEDURE=306
    ERROR_SEVERITY=307
    ERROR_STATE=308
    ESCAPE=309
    ESTIMATEONLY=310
    EVENT=311
    EVENTDATA=312
    EVENT_RETENTION_MODE=313
    EXCEPT=314
    EXCLUSIVE=315
    EXECUTABLE=316
    EXECUTABLE_FILE=317
    EXECUTE=318
    EXIST=319
    EXISTS=320
    EXIST_SQUARE_BRACKET=321
    EXIT=322
    EXPAND=323
    EXPIREDATE=324
    EXPIRY_DATE=325
    EXPLICIT=326
    EXTENDED_LOGICAL_CHECKS=327
    EXTENSION=328
    EXTERNAL=329
    EXTERNAL_ACCESS=330
    FAILOVER=331
    FAILOVER_MODE=332
    FAILURE=333
    FAILURECONDITIONLEVEL=334
    FAILURE_CONDITION_LEVEL=335
    FAIL_OPERATION=336
    FAN_IN=337
    FAST=338
    FAST_FORWARD=339
    FETCH=340
    FILE=341
    FILEGROUP=342
    FILEGROUPPROPERTY=343
    FILEGROUP_ID=344
    FILEGROUP_NAME=345
    FILEGROWTH=346
    FILENAME=347
    FILEPATH=348
    FILEPROPERTY=349
    FILEPROPERTYEX=350
    FILESTREAM=351
    FILESTREAM_ON=352
    FILE_ID=353
    FILE_IDEX=354
    FILE_NAME=355
    FILE_SNAPSHOT=356
    FILLFACTOR=357
    FILTER=358
    FIRST=359
    FIRST_VALUE=360
    FMTONLY=361
    FOLLOWING=362
    FOR=363
    FORCE=364
    FORCED=365
    FORCEPLAN=366
    FORCESCAN=367
    FORCESEEK=368
    FORCE_FAILOVER_ALLOW_DATA_LOSS=369
    FORCE_SERVICE_ALLOW_DATA_LOSS=370
    FOREIGN=371
    FORMAT=372
    FORMATMESSAGE=373
    FORWARD_ONLY=374
    FREE=375
    FREETEXT=376
    FREETEXTTABLE=377
    FROM=378
    FULL=379
    FULLSCAN=380
    FULLTEXT=381
    FULLTEXTCATALOGPROPERTY=382
    FULLTEXTSERVICEPROPERTY=383
    FUNCTION=384
    GB=385
    GENERATED=386
    GET=387
    GETANCESTOR=388
    GETANSINULL=389
    GETDATE=390
    GETDESCENDANT=391
    GETLEVEL=392
    GETREPARENTEDVALUE=393
    GETROOT=394
    GETUTCDATE=395
    GET_FILESTREAM_TRANSACTION_CONTEXT=396
    GLOBAL=397
    GO=398
    GOTO=399
    GOVERNOR=400
    GRANT=401
    GREATEST=402
    GROUP=403
    GROUPING=404
    GROUPING_ID=405
    GROUP_MAX_REQUESTS=406
    HADR=407
    HASH=408
    HASHED=409
    HAS_DBACCESS=410
    HAS_PERMS_BY_NAME=411
    HAVING=412
    HEALTHCHECKTIMEOUT=413
    HEALTH_CHECK_TIMEOUT=414
    HEAP=415
    HIDDEN_KEYWORD=416
    HIERARCHYID=417
    HIGH=418
    HOLDLOCK=419
    HONOR_BROKER_PRIORITY=420
    HOST_ID=421
    HOST_NAME=422
    HOURS=423
    IDENTITY=424
    IDENTITYCOL=425
    IDENTITY_INSERT=426
    IDENTITY_VALUE=427
    IDENT_CURRENT=428
    IDENT_INCR=429
    IDENT_SEED=430
    IF=431
    IGNORE_CONSTRAINTS=432
    IGNORE_DUP_KEY=433
    IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=434
    IGNORE_REPLICATED_TABLE_CACHE=435
    IGNORE_TRIGGERS=436
    IIF=437
    IMMEDIATE=438
    IMPERSONATE=439
    IMPLICIT_TRANSACTIONS=440
    IMPORTANCE=441
    IN=442
    INCLUDE=443
    INCLUDE_NULL_VALUES=444
    INCREMENT=445
    INCREMENTAL=446
    INDEX=447
    INDEXKEY_PROPERTY=448
    INDEXPROPERTY=449
    INDEX_COL=450
    INFINITE=451
    INIT=452
    INITIATOR=453
    INNER=454
    INPUT=455
    INSENSITIVE=456
    INSERT=457
    INSERTED=458
    INSTEAD=459
    INT=460
    INTERSECT=461
    INTO=462
    IO=463
    IP=464
    IS=465
    ISDESCENDANTOF=466
    ISJSON=467
    ISNULL=468
    ISNUMERIC=469
    ISOLATION=470
    IS_MEMBER=471
    IS_ROLEMEMBER=472
    IS_SRVROLEMEMBER=473
    JOB=474
    JOIN=475
    JSON=476
    JSON_ARRAY=477
    JSON_MODIFY=478
    JSON_OBJECT=479
    JSON_PATH_EXISTS=480
    JSON_QUERY=481
    JSON_VALUE=482
    KB=483
    KEEP=484
    KEEPDEFAULTS=485
    KEEPFIXED=486
    KEEPIDENTITY=487
    KERBEROS=488
    KEY=489
    KEYS=490
    KEYSET=491
    KEY_PATH=492
    KEY_SOURCE=493
    KEY_STORE_PROVIDER_NAME=494
    KILL=495
    LAG=496
    LANGUAGE=497
    LAST=498
    LAST_VALUE=499
    LEAD=500
    LEAST=501
    LEFT=502
    LEN=503
    LEVEL=504
    LIBRARY=505
    LIFETIME=506
    LIKE=507
    LINENO=508
    LINKED=509
    LINUX=510
    LIST=511
    LISTENER=512
    LISTENER_IP=513
    LISTENER_PORT=514
    LISTENER_URL=515
    LOAD=516
    LOB_COMPACTION=517
    LOCAL=518
    LOCAL_SERVICE_NAME=519
    LOCATION=520
    LOCK=521
    LOCK_ESCALATION=522
    LOG=523
    LOGIN=524
    LOGINPROPERTY=525
    LOOP=526
    LOW=527
    LOWER=528
    LTRIM=529
    MANUAL=530
    MARK=531
    MASK=532
    MASKED=533
    MASTER=534
    MATCHED=535
    MATERIALIZED=536
    MAX=537
    MAXDOP=538
    MAXRECURSION=539
    MAXSIZE=540
    MAXTRANSFER=541
    MAXVALUE=542
    MAX_CPU_PERCENT=543
    MAX_DISPATCH_LATENCY=544
    MAX_DOP=545
    MAX_DURATION=546
    MAX_EVENT_SIZE=547
    MAX_FILES=548
    MAX_IOPS_PER_VOLUME=549
    MAX_MEMORY=550
    MAX_MEMORY_PERCENT=551
    MAX_OUTSTANDING_IO_PER_VOLUME=552
    MAX_PROCESSES=553
    MAX_QUEUE_READERS=554
    MAX_ROLLOVER_FILES=555
    MAX_SIZE=556
    MB=557
    MEDIADESCRIPTION=558
    MEDIANAME=559
    MEDIUM=560
    MEMBER=561
    MEMORY_OPTIMIZED_DATA=562
    MEMORY_PARTITION_MODE=563
    MERGE=564
    MESSAGE=565
    MESSAGE_FORWARDING=566
    MESSAGE_FORWARD_SIZE=567
    MIN=568
    MINUTES=569
    MINVALUE=570
    MIN_ACTIVE_ROWVERSION=571
    MIN_CPU_PERCENT=572
    MIN_IOPS_PER_VOLUME=573
    MIN_MEMORY_PERCENT=574
    MIRROR=575
    MIRROR_ADDRESS=576
    MIXED_PAGE_ALLOCATION=577
    MODE=578
    MODIFY=579
    MODIFY_SQUARE_BRACKET=580
    MOVE=581
    MULTI_USER=582
    MUST_CHANGE=583
    NAME=584
    NATIONAL=585
    NCHAR=586
    NEGOTIATE=587
    NESTED_TRIGGERS=588
    NEWID=589
    NEWNAME=590
    NEWSEQUENTIALID=591
    NEW_ACCOUNT=592
    NEW_BROKER=593
    NEW_PASSWORD=594
    NEXT=595
    NO=596
    NOCHECK=597
    NOCOUNT=598
    NODES=599
    NOEXEC=600
    NOEXPAND=601
    NOFORMAT=602
    NOHOLDLOCK=603
    NOINDEX=604
    NOINIT=605
    NOLOCK=606
    NONCLUSTERED=607
    NONE=608
    NON_TRANSACTED_ACCESS=609
    NORECOMPUTE=610
    NORECOVERY=611
    NOREWIND=612
    NOSKIP=613
    NOT=614
    NOTIFICATION=615
    NOTIFICATIONS=616
    NOUNLOAD=617
    NOWAIT=618
    NO_CHECKSUM=619
    NO_COMPRESSION=620
    NO_EVENT_LOSS=621
    NO_INFOMSGS=622
    NO_QUERYSTORE=623
    NO_STATISTICS=624
    NO_TRUNCATE=625
    NO_WAIT=626
    NTILE=627
    NTLM=628
    NULLIF=629
    NULL_=630
    NULL_DOUBLE_QUOTE=631
    NUMANODE=632
    NUMBER=633
    NUMERIC_ROUNDABORT=634
    OBJECT=635
    OBJECTPROPERTY=636
    OBJECTPROPERTYEX=637
    OBJECT_DEFINITION=638
    OBJECT_ID=639
    OBJECT_NAME=640
    OBJECT_SCHEMA_NAME=641
    OF=642
    OFF=643
    OFFLINE=644
    OFFSET=645
    OFFSETS=646
    OLD_ACCOUNT=647
    OLD_PASSWORD=648
    ON=649
    ONLINE=650
    ONLY=651
    ON_FAILURE=652
    OPEN=653
    OPENDATASOURCE=654
    OPENJSON=655
    OPENQUERY=656
    OPENROWSET=657
    OPENXML=658
    OPEN_EXISTING=659
    OPERATIONS=660
    OPTIMISTIC=661
    OPTIMIZE=662
    OPTIMIZE_FOR_SEQUENTIAL_KEY=663
    OPTION=664
    OR=665
    ORDER=666
    ORIGINAL_DB_NAME=667
    ORIGINAL_LOGIN=668
    OUT=669
    OUTER=670
    OUTPUT=671
    OVER=672
    OVERRIDE=673
    OWNER=674
    OWNERSHIP=675
    PAD_INDEX=676
    PAGE=677
    PAGECOUNT=678
    PAGE_VERIFY=679
    PAGLOCK=680
    PARAMETERIZATION=681
    PARAM_NODE=682
    PARSE=683
    PARSENAME=684
    PARSEONLY=685
    PARTIAL=686
    PARTITION=687
    PARTITIONS=688
    PARTNER=689
    PASSWORD=690
    PATH=691
    PATINDEX=692
    PAUSE=693
    PDW_SHOWSPACEUSED=694
    PERCENT=695
    PERCENTILE_CONT=696
    PERCENTILE_DISC=697
    PERCENT_RANK=698
    PERMISSIONS=699
    PERMISSION_SET=700
    PERSISTED=701
    PERSIST_SAMPLE_PERCENT=702
    PER_CPU=703
    PER_DB=704
    PER_NODE=705
    PHYSICAL_ONLY=706
    PIVOT=707
    PLAN=708
    PLATFORM=709
    POISON_MESSAGE_HANDLING=710
    POLICY=711
    POOL=712
    PORT=713
    PRECEDING=714
    PRECISION=715
    PREDICATE=716
    PRIMARY=717
    PRIMARY_ROLE=718
    PRINT=719
    PRIOR=720
    PRIORITY=721
    PRIORITY_LEVEL=722
    PRIVATE=723
    PRIVATE_KEY=724
    PRIVILEGES=725
    PROC=726
    PROCCACHE=727
    PROCEDURE=728
    PROCEDURE_NAME=729
    PROCESS=730
    PROFILE=731
    PROPERTY=732
    PROVIDER=733
    PROVIDER_KEY_NAME=734
    PUBLIC=735
    PWDCOMPARE=736
    PWDENCRYPT=737
    PYTHON=738
    QUERY=739
    QUERY_SQUARE_BRACKET=740
    QUEUE=741
    QUEUE_DELAY=742
    QUOTED_IDENTIFIER=743
    QUOTENAME=744
    R=745
    RAISERROR=746
    RANDOMIZED=747
    RANGE=748
    RANK=749
    RAW=750
    RC2=751
    RC4=752
    RC4_128=753
    READ=754
    READCOMMITTED=755
    READCOMMITTEDLOCK=756
    READONLY=757
    READPAST=758
    READTEXT=759
    READUNCOMMITTED=760
    READWRITE=761
    READ_COMMITTED_SNAPSHOT=762
    READ_ONLY=763
    READ_ONLY_ROUTING_LIST=764
    READ_WRITE=765
    READ_WRITE_FILEGROUPS=766
    REBUILD=767
    RECEIVE=768
    RECOMPILE=769
    RECONFIGURE=770
    RECOVERY=771
    RECURSIVE_TRIGGERS=772
    REFERENCES=773
    REGENERATE=774
    RELATED_CONVERSATION=775
    RELATED_CONVERSATION_GROUP=776
    RELATIVE=777
    REMOTE=778
    REMOTE_PROC_TRANSACTIONS=779
    REMOTE_SERVICE_NAME=780
    REMOVE=781
    REORGANIZE=782
    REPAIR_ALLOW_DATA_LOSS=783
    REPAIR_FAST=784
    REPAIR_REBUILD=785
    REPEATABLE=786
    REPEATABLEREAD=787
    REPLACE=788
    REPLICA=789
    REPLICATE=790
    REPLICATION=791
    REQUEST_MAX_CPU_TIME_SEC=792
    REQUEST_MAX_MEMORY_GRANT_PERCENT=793
    REQUEST_MEMORY_GRANT_TIMEOUT_SEC=794
    REQUIRED=795
    REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT=796
    RESAMPLE=797
    RESERVE_DISK_SPACE=798
    RESET=799
    RESOURCE=800
    RESOURCES=801
    RESOURCE_MANAGER_LOCATION=802
    RESTART=803
    RESTORE=804
    RESTRICT=805
    RESTRICTED_USER=806
    RESUMABLE=807
    RESUME=808
    RETAINDAYS=809
    RETENTION=810
    RETURN=811
    RETURNS=812
    REVERSE=813
    REVERT=814
    REVOKE=815
    REWIND=816
    RIGHT=817
    ROBUST=818
    ROLE=819
    ROLLBACK=820
    ROOT=821
    ROUND_ROBIN=822
    ROUTE=823
    ROW=824
    ROWCOUNT=825
    ROWCOUNT_BIG=826
    ROWGUID=827
    ROWGUIDCOL=828
    ROWLOCK=829
    ROWS=830
    ROW_NUMBER=831
    RSA_1024=832
    RSA_2048=833
    RSA_3072=834
    RSA_4096=835
    RSA_512=836
    RTRIM=837
    RULE=838
    SAFE=839
    SAFETY=840
    SAMPLE=841
    SAVE=842
    SCHEDULER=843
    SCHEMA=844
    SCHEMABINDING=845
    SCHEMA_ID=846
    SCHEMA_NAME=847
    SCHEME=848
    SCOPED=849
    SCOPE_IDENTITY=850
    SCRIPT=851
    SCROLL=852
    SCROLL_LOCKS=853
    SEARCH=854
    SECONDARY=855
    SECONDARY_ONLY=856
    SECONDARY_ROLE=857
    SECONDS=858
    SECRET=859
    SECURABLES=860
    SECURITY=861
    SECURITYAUDIT=862
    SECURITY_LOG=863
    SEEDING_MODE=864
    SELECT=865
    SELF=866
    SEMANTICKEYPHRASETABLE=867
    SEMANTICSIMILARITYDETAILSTABLE=868
    SEMANTICSIMILARITYTABLE=869
    SEMI_SENSITIVE=870
    SEND=871
    SENT=872
    SEQUENCE=873
    SEQUENCE_NUMBER=874
    SERIALIZABLE=875
    SERVER=876
    SERVERPROPERTY=877
    SERVICE=878
    SERVICEBROKER=879
    SERVICE_BROKER=880
    SERVICE_NAME=881
    SESSION=882
    SESSIONPROPERTY=883
    SESSION_CONTEXT=884
    SESSION_TIMEOUT=885
    SESSION_USER=886
    SET=887
    SETERROR=888
    SETS=889
    SETTINGS=890
    SETUSER=891
    SHARE=892
    SHARED=893
    SHOWCONTIG=894
    SHOWPLAN=895
    SHOWPLAN_ALL=896
    SHOWPLAN_TEXT=897
    SHOWPLAN_XML=898
    SHRINKLOG=899
    SHUTDOWN=900
    SID=901
    SIGNATURE=902
    SIMPLE=903
    SINGLE_USER=904
    SIZE=905
    SKIP_KEYWORD=906
    SMALLINT=907
    SNAPSHOT=908
    SOFTNUMA=909
    SOME=910
    SORT_IN_TEMPDB=911
    SOUNDEX=912
    SOURCE=913
    SPACE_KEYWORD=914
    SPARSE=915
    SPATIAL_WINDOW_MAX_CELLS=916
    SPECIFICATION=917
    SPLIT=918
    SQL=919
    SQLDUMPERFLAGS=920
    SQLDUMPERPATH=921
    SQLDUMPERTIMEOUT=922
    SQL_VARIANT_PROPERTY=923
    STANDBY=924
    START=925
    STARTED=926
    STARTUP_STATE=927
    START_DATE=928
    STATE=929
    STATIC=930
    STATISTICS=931
    STATISTICS_INCREMENTAL=932
    STATISTICS_NORECOMPUTE=933
    STATS=934
    STATS_DATE=935
    STATS_STREAM=936
    STATUS=937
    STATUSONLY=938
    STDEV=939
    STDEVP=940
    STOP=941
    STOPLIST=942
    STOPPED=943
    STOP_ON_ERROR=944
    STR=945
    STRING_AGG=946
    STRING_ESCAPE=947
    STUFF=948
    SUBJECT=949
    SUBSCRIBE=950
    SUBSCRIPTION=951
    SUBSTRING=952
    SUM=953
    SUPPORTED=954
    SUSER_ID=955
    SUSER_NAME=956
    SUSER_SID=957
    SUSER_SNAME=958
    SUSPEND=959
    SWITCH=960
    SYMMETRIC=961
    SYNCHRONOUS_COMMIT=962
    SYNONYM=963
    SYSTEM=964
    SYSTEM_USER=965
    TABLE=966
    TABLERESULTS=967
    TABLESAMPLE=968
    TABLOCK=969
    TABLOCKX=970
    TAKE=971
    TAPE=972
    TARGET=973
    TARGET_RECOVERY_TIME=974
    TB=975
    TCP=976
    TEXTIMAGE_ON=977
    TEXTSIZE=978
    THEN=979
    THROW=980
    TIES=981
    TIME=982
    TIMEOUT=983
    TIMER=984
    TINYINT=985
    TO=986
    TOP=987
    TORN_PAGE_DETECTION=988
    TOSTRING=989
    TRACE=990
    TRACKING=991
    TRACK_CAUSALITY=992
    TRAN=993
    TRANSACTION=994
    TRANSACTION_ID=995
    TRANSFER=996
    TRANSFORM_NOISE_WORDS=997
    TRANSLATE=998
    TRIGGER=999
    TRIM=1000
    TRIPLE_DES=1001
    TRIPLE_DES_3KEY=1002
    TRUNCATE=1003
    TRUSTWORTHY=1004
    TRY=1005
    TRY_CAST=1006
    TSEQUAL=1007
    TSQL=1008
    TWO_DIGIT_YEAR_CUTOFF=1009
    TYPE=1010
    TYPEPROPERTY=1011
    TYPE_ID=1012
    TYPE_NAME=1013
    TYPE_WARNING=1014
    UNBOUNDED=1015
    UNCHECKED=1016
    UNCOMMITTED=1017
    UNICODE=1018
    UNION=1019
    UNIQUE=1020
    UNKNOWN=1021
    UNLIMITED=1022
    UNLOCK=1023
    UNMASK=1024
    UNPIVOT=1025
    UNSAFE=1026
    UOW=1027
    UPDATE=1028
    UPDATETEXT=1029
    UPDLOCK=1030
    UPPER=1031
    URL=1032
    USE=1033
    USED=1034
    USER=1035
    USER_ID=1036
    USER_NAME=1037
    USING=1038
    VALIDATION=1039
    VALID_XML=1040
    VALUE=1041
    VALUES=1042
    VALUE_SQUARE_BRACKET=1043
    VAR=1044
    VARBINARY_KEYWORD=1045
    VARP=1046
    VARYING=1047
    VERBOSELOGGING=1048
    VERIFY_CLONEDB=1049
    VERSION=1050
    VIEW=1051
    VIEWS=1052
    VIEW_METADATA=1053
    VISIBILITY=1054
    WAIT=1055
    WAITFOR=1056
    WAIT_AT_LOW_PRIORITY=1057
    WELL_FORMED_XML=1058
    WHEN=1059
    WHERE=1060
    WHILE=1061
    WINDOWS=1062
    WITH=1063
    WITHIN=1064
    WITHOUT=1065
    WITHOUT_ARRAY_WRAPPER=1066
    WITNESS=1067
    WORK=1068
    WORKLOAD=1069
    WRITETEXT=1070
    XACT_ABORT=1071
    XACT_STATE=1072
    XLOCK=1073
    XML=1074
    XMLDATA=1075
    XMLNAMESPACES=1076
    XMLSCHEMA=1077
    XML_COMPRESSION=1078
    XSINIL=1079
    ZONE=1080
    ABS=1081
    ACOS=1082
    ASIN=1083
    ATAN=1084
    ATN2=1085
    CEILING=1086
    COS=1087
    COT=1088
    DEGREES=1089
    EXP=1090
    FLOOR=1091
    LOG10=1092
    PI=1093
    POWER=1094
    RADIANS=1095
    RAND=1096
    ROUND=1097
    SIGN=1098
    SIN=1099
    SQRT=1100
    SQUARE=1101
    TAN=1102
    CURRENT_TIMEZONE=1103
    CURRENT_TIMEZONE_ID=1104
    DATE_BUCKET=1105
    DATEDIFF_BIG=1106
    DATEFROMPARTS=1107
    DATETIME2FROMPARTS=1108
    DATETIMEFROMPARTS=1109
    DATETIMEOFFSETFROMPARTS=1110
    DATETRUNC=1111
    DAY=1112
    EOMONTH=1113
    ISDATE=1114
    MONTH=1115
    SMALLDATETIMEFROMPARTS=1116
    SWITCHOFFSET=1117
    SYSDATETIME=1118
    SYSDATETIMEOFFSET=1119
    SYSUTCDATETIME=1120
    TIMEFROMPARTS=1121
    TODATETIMEOFFSET=1122
    YEAR=1123
    QUARTER=1124
    DAYOFYEAR=1125
    WEEK=1126
    HOUR=1127
    MINUTE=1128
    SECOND=1129
    MILLISECOND=1130
    MICROSECOND=1131
    NANOSECOND=1132
    TZOFFSET=1133
    ISO_WEEK=1134
    WEEKDAY=1135
    YEAR_ABBR=1136
    QUARTER_ABBR=1137
    MONTH_ABBR=1138
    DAYOFYEAR_ABBR=1139
    DAY_ABBR=1140
    WEEK_ABBR=1141
    HOUR_ABBR=1142
    MINUTE_ABBR=1143
    SECOND_ABBR=1144
    MILLISECOND_ABBR=1145
    MICROSECOND_ABBR=1146
    NANOSECOND_ABBR=1147
    TZOFFSET_ABBR=1148
    ISO_WEEK_ABBR=1149
    WEEKDAY_ABBR=1150
    SP_EXECUTESQL=1151
    VARCHAR=1152
    NVARCHAR=1153
    DISK_DRIVE=1154
    DOLLAR_ACTION=1155
    CURSOR_ROWS=1156
    FETCH_STATUS=1157
    IPV4_ADDR=1158
    SPACE=1159
    COMMENT=1160
    LINE_COMMENT=1161
    DOUBLE_QUOTE_ID=1162
    DOUBLE_QUOTE_BLANK=1163
    SINGLE_QUOTE=1164
    SQUARE_BRACKET_ID=1165
    LOCAL_ID=1166
    TEMP_ID=1167
    DECIMAL=1168
    ID=1169
    STRING=1170
    BINARY=1171
    FLOAT=1172
    REAL=1173
    EQUAL=1174
    GREATER=1175
    LESS=1176
    EXCLAMATION=1177
    PLUS_ASSIGN=1178
    MINUS_ASSIGN=1179
    MULT_ASSIGN=1180
    DIV_ASSIGN=1181
    MOD_ASSIGN=1182
    AND_ASSIGN=1183
    XOR_ASSIGN=1184
    OR_ASSIGN=1185
    DOUBLE_BAR=1186
    DOT=1187
    UNDERLINE=1188
    AT=1189
    SHARP=1190
    DOLLAR=1191
    LR_BRACKET=1192
    RR_BRACKET=1193
    COMMA=1194
    SEMI=1195
    COLON=1196
    DOUBLE_COLON=1197
    STAR=1198
    DIVIDE=1199
    MODULE=1200
    PLUS=1201
    MINUS=1202
    BIT_NOT=1203
    BIT_OR=1204
    BIT_AND=1205
    BIT_XOR=1206
    PLACEHOLDER=1207

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Tsql_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(TSqlParser.EOF, 0)

        def batch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.BatchContext)
            else:
                return self.getTypedRuleContext(TSqlParser.BatchContext,i)


        def execute_body_batch(self):
            return self.getTypedRuleContext(TSqlParser.Execute_body_batchContext,0)


        def go_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Go_statementContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Go_statementContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_tsql_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsql_file" ):
                listener.enterTsql_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsql_file" ):
                listener.exitTsql_file(self)




    def tsql_file(self):

        localctx = TSqlParser.Tsql_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_tsql_file)
        self._la = 0 # Token type
        try:
            self.state = 1236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243288301109282) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6827967477973009) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4619006566893355017) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 9221120237006638591) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -297255170024374277) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714896436989) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755805072108290049) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873699427288690721) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -9) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510937462965505) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799299305767) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18577349547134989) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -648870293145649169) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -81064914088626209) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877377) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864761785063178417) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -17892869472777) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 9697231019) != 0):
                    self.state = 1220
                    self.batch()
                    self.state = 1225
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1226
                self.match(TSqlParser.EOF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1227
                self.execute_body_batch()
                self.state = 1231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==398:
                    self.state = 1228
                    self.go_statement()
                    self.state = 1233
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1234
                self.match(TSqlParser.EOF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def go_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Go_statementContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Go_statementContext,i)


        def execute_body_batch(self):
            return self.getTypedRuleContext(TSqlParser.Execute_body_batchContext,0)


        def sql_clauses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Sql_clausesContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Sql_clausesContext,i)


        def batch_level_statement(self):
            return self.getTypedRuleContext(TSqlParser.Batch_level_statementContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_batch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBatch" ):
                listener.enterBatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBatch" ):
                listener.exitBatch(self)




    def batch(self):

        localctx = TSqlParser.BatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_batch)
        try:
            self.state = 1263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1238
                self.go_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1240
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                if la_ == 1:
                    self.state = 1239
                    self.execute_body_batch()


                self.state = 1248
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 1242
                    self.go_statement()
                    pass

                elif la_ == 2:
                    self.state = 1244 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1243
                            self.sql_clauses()

                        else:
                            raise NoViableAltException(self)
                        self.state = 1246 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

                    pass


                self.state = 1253
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1250
                        self.go_statement() 
                    self.state = 1255
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1256
                self.batch_level_statement()
                self.state = 1260
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1257
                        self.go_statement() 
                    self.state = 1262
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Batch_level_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_or_alter_function(self):
            return self.getTypedRuleContext(TSqlParser.Create_or_alter_functionContext,0)


        def create_or_alter_procedure(self):
            return self.getTypedRuleContext(TSqlParser.Create_or_alter_procedureContext,0)


        def create_or_alter_trigger(self):
            return self.getTypedRuleContext(TSqlParser.Create_or_alter_triggerContext,0)


        def create_view(self):
            return self.getTypedRuleContext(TSqlParser.Create_viewContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_batch_level_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBatch_level_statement" ):
                listener.enterBatch_level_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBatch_level_statement" ):
                listener.exitBatch_level_statement(self)




    def batch_level_statement(self):

        localctx = TSqlParser.Batch_level_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_batch_level_statement)
        try:
            self.state = 1269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1265
                self.create_or_alter_function()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1266
                self.create_or_alter_procedure()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1267
                self.create_or_alter_trigger()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1268
                self.create_view()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_clause(self):
            return self.getTypedRuleContext(TSqlParser.Dml_clauseContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def cfl_statement(self):
            return self.getTypedRuleContext(TSqlParser.Cfl_statementContext,0)


        def another_statement(self):
            return self.getTypedRuleContext(TSqlParser.Another_statementContext,0)


        def ddl_clause(self):
            return self.getTypedRuleContext(TSqlParser.Ddl_clauseContext,0)


        def dbcc_clause(self):
            return self.getTypedRuleContext(TSqlParser.Dbcc_clauseContext,0)


        def backup_statement(self):
            return self.getTypedRuleContext(TSqlParser.Backup_statementContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_sql_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_clauses" ):
                listener.enterSql_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_clauses" ):
                listener.exitSql_clauses(self)




    def sql_clauses(self):

        localctx = TSqlParser.Sql_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_sql_clauses)
        try:
            self.state = 1296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1271
                self.dml_clause()
                self.state = 1273
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 1272
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1275
                self.cfl_statement()
                self.state = 1277
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 1276
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1279
                self.another_statement()
                self.state = 1281
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 1280
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1283
                self.ddl_clause()
                self.state = 1285
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                if la_ == 1:
                    self.state = 1284
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1287
                self.dbcc_clause()
                self.state = 1289
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 1288
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1291
                self.backup_statement()
                self.state = 1293
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 1292
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1295
                self.match(TSqlParser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dml_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def merge_statement(self):
            return self.getTypedRuleContext(TSqlParser.Merge_statementContext,0)


        def delete_statement(self):
            return self.getTypedRuleContext(TSqlParser.Delete_statementContext,0)


        def insert_statement(self):
            return self.getTypedRuleContext(TSqlParser.Insert_statementContext,0)


        def select_statement_standalone(self):
            return self.getTypedRuleContext(TSqlParser.Select_statement_standaloneContext,0)


        def update_statement(self):
            return self.getTypedRuleContext(TSqlParser.Update_statementContext,0)


        def bulk_insert_statement(self):
            return self.getTypedRuleContext(TSqlParser.Bulk_insert_statementContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_dml_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_clause" ):
                listener.enterDml_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_clause" ):
                listener.exitDml_clause(self)




    def dml_clause(self):

        localctx = TSqlParser.Dml_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_dml_clause)
        try:
            self.state = 1304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1298
                self.merge_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1299
                self.delete_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1300
                self.insert_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1301
                self.select_statement_standalone()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1302
                self.update_statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1303
                self.bulk_insert_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ddl_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_application_role(self):
            return self.getTypedRuleContext(TSqlParser.Alter_application_roleContext,0)


        def alter_assembly(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assemblyContext,0)


        def alter_asymmetric_key(self):
            return self.getTypedRuleContext(TSqlParser.Alter_asymmetric_keyContext,0)


        def alter_authorization(self):
            return self.getTypedRuleContext(TSqlParser.Alter_authorizationContext,0)


        def alter_authorization_for_azure_dw(self):
            return self.getTypedRuleContext(TSqlParser.Alter_authorization_for_azure_dwContext,0)


        def alter_authorization_for_parallel_dw(self):
            return self.getTypedRuleContext(TSqlParser.Alter_authorization_for_parallel_dwContext,0)


        def alter_authorization_for_sql_database(self):
            return self.getTypedRuleContext(TSqlParser.Alter_authorization_for_sql_databaseContext,0)


        def alter_availability_group(self):
            return self.getTypedRuleContext(TSqlParser.Alter_availability_groupContext,0)


        def alter_certificate(self):
            return self.getTypedRuleContext(TSqlParser.Alter_certificateContext,0)


        def alter_column_encryption_key(self):
            return self.getTypedRuleContext(TSqlParser.Alter_column_encryption_keyContext,0)


        def alter_credential(self):
            return self.getTypedRuleContext(TSqlParser.Alter_credentialContext,0)


        def alter_cryptographic_provider(self):
            return self.getTypedRuleContext(TSqlParser.Alter_cryptographic_providerContext,0)


        def alter_database(self):
            return self.getTypedRuleContext(TSqlParser.Alter_databaseContext,0)


        def alter_database_audit_specification(self):
            return self.getTypedRuleContext(TSqlParser.Alter_database_audit_specificationContext,0)


        def alter_db_role(self):
            return self.getTypedRuleContext(TSqlParser.Alter_db_roleContext,0)


        def alter_endpoint(self):
            return self.getTypedRuleContext(TSqlParser.Alter_endpointContext,0)


        def alter_external_data_source(self):
            return self.getTypedRuleContext(TSqlParser.Alter_external_data_sourceContext,0)


        def alter_external_library(self):
            return self.getTypedRuleContext(TSqlParser.Alter_external_libraryContext,0)


        def alter_external_resource_pool(self):
            return self.getTypedRuleContext(TSqlParser.Alter_external_resource_poolContext,0)


        def alter_fulltext_catalog(self):
            return self.getTypedRuleContext(TSqlParser.Alter_fulltext_catalogContext,0)


        def alter_fulltext_stoplist(self):
            return self.getTypedRuleContext(TSqlParser.Alter_fulltext_stoplistContext,0)


        def alter_index(self):
            return self.getTypedRuleContext(TSqlParser.Alter_indexContext,0)


        def alter_login_azure_sql(self):
            return self.getTypedRuleContext(TSqlParser.Alter_login_azure_sqlContext,0)


        def alter_login_azure_sql_dw_and_pdw(self):
            return self.getTypedRuleContext(TSqlParser.Alter_login_azure_sql_dw_and_pdwContext,0)


        def alter_login_sql_server(self):
            return self.getTypedRuleContext(TSqlParser.Alter_login_sql_serverContext,0)


        def alter_master_key_azure_sql(self):
            return self.getTypedRuleContext(TSqlParser.Alter_master_key_azure_sqlContext,0)


        def alter_master_key_sql_server(self):
            return self.getTypedRuleContext(TSqlParser.Alter_master_key_sql_serverContext,0)


        def alter_message_type(self):
            return self.getTypedRuleContext(TSqlParser.Alter_message_typeContext,0)


        def alter_partition_function(self):
            return self.getTypedRuleContext(TSqlParser.Alter_partition_functionContext,0)


        def alter_partition_scheme(self):
            return self.getTypedRuleContext(TSqlParser.Alter_partition_schemeContext,0)


        def alter_remote_service_binding(self):
            return self.getTypedRuleContext(TSqlParser.Alter_remote_service_bindingContext,0)


        def alter_resource_governor(self):
            return self.getTypedRuleContext(TSqlParser.Alter_resource_governorContext,0)


        def alter_schema_azure_sql_dw_and_pdw(self):
            return self.getTypedRuleContext(TSqlParser.Alter_schema_azure_sql_dw_and_pdwContext,0)


        def alter_schema_sql(self):
            return self.getTypedRuleContext(TSqlParser.Alter_schema_sqlContext,0)


        def alter_sequence(self):
            return self.getTypedRuleContext(TSqlParser.Alter_sequenceContext,0)


        def alter_server_audit(self):
            return self.getTypedRuleContext(TSqlParser.Alter_server_auditContext,0)


        def alter_server_audit_specification(self):
            return self.getTypedRuleContext(TSqlParser.Alter_server_audit_specificationContext,0)


        def alter_server_configuration(self):
            return self.getTypedRuleContext(TSqlParser.Alter_server_configurationContext,0)


        def alter_server_role(self):
            return self.getTypedRuleContext(TSqlParser.Alter_server_roleContext,0)


        def alter_server_role_pdw(self):
            return self.getTypedRuleContext(TSqlParser.Alter_server_role_pdwContext,0)


        def alter_service(self):
            return self.getTypedRuleContext(TSqlParser.Alter_serviceContext,0)


        def alter_service_master_key(self):
            return self.getTypedRuleContext(TSqlParser.Alter_service_master_keyContext,0)


        def alter_symmetric_key(self):
            return self.getTypedRuleContext(TSqlParser.Alter_symmetric_keyContext,0)


        def alter_table(self):
            return self.getTypedRuleContext(TSqlParser.Alter_tableContext,0)


        def alter_user(self):
            return self.getTypedRuleContext(TSqlParser.Alter_userContext,0)


        def alter_user_azure_sql(self):
            return self.getTypedRuleContext(TSqlParser.Alter_user_azure_sqlContext,0)


        def alter_workload_group(self):
            return self.getTypedRuleContext(TSqlParser.Alter_workload_groupContext,0)


        def alter_xml_schema_collection(self):
            return self.getTypedRuleContext(TSqlParser.Alter_xml_schema_collectionContext,0)


        def create_application_role(self):
            return self.getTypedRuleContext(TSqlParser.Create_application_roleContext,0)


        def create_assembly(self):
            return self.getTypedRuleContext(TSqlParser.Create_assemblyContext,0)


        def create_asymmetric_key(self):
            return self.getTypedRuleContext(TSqlParser.Create_asymmetric_keyContext,0)


        def create_column_encryption_key(self):
            return self.getTypedRuleContext(TSqlParser.Create_column_encryption_keyContext,0)


        def create_column_master_key(self):
            return self.getTypedRuleContext(TSqlParser.Create_column_master_keyContext,0)


        def create_columnstore_index(self):
            return self.getTypedRuleContext(TSqlParser.Create_columnstore_indexContext,0)


        def create_credential(self):
            return self.getTypedRuleContext(TSqlParser.Create_credentialContext,0)


        def create_cryptographic_provider(self):
            return self.getTypedRuleContext(TSqlParser.Create_cryptographic_providerContext,0)


        def create_database(self):
            return self.getTypedRuleContext(TSqlParser.Create_databaseContext,0)


        def create_database_audit_specification(self):
            return self.getTypedRuleContext(TSqlParser.Create_database_audit_specificationContext,0)


        def create_db_role(self):
            return self.getTypedRuleContext(TSqlParser.Create_db_roleContext,0)


        def create_endpoint(self):
            return self.getTypedRuleContext(TSqlParser.Create_endpointContext,0)


        def create_event_notification(self):
            return self.getTypedRuleContext(TSqlParser.Create_event_notificationContext,0)


        def create_external_library(self):
            return self.getTypedRuleContext(TSqlParser.Create_external_libraryContext,0)


        def create_external_resource_pool(self):
            return self.getTypedRuleContext(TSqlParser.Create_external_resource_poolContext,0)


        def create_fulltext_catalog(self):
            return self.getTypedRuleContext(TSqlParser.Create_fulltext_catalogContext,0)


        def create_fulltext_stoplist(self):
            return self.getTypedRuleContext(TSqlParser.Create_fulltext_stoplistContext,0)


        def create_index(self):
            return self.getTypedRuleContext(TSqlParser.Create_indexContext,0)


        def create_login_azure_sql(self):
            return self.getTypedRuleContext(TSqlParser.Create_login_azure_sqlContext,0)


        def create_login_pdw(self):
            return self.getTypedRuleContext(TSqlParser.Create_login_pdwContext,0)


        def create_login_sql_server(self):
            return self.getTypedRuleContext(TSqlParser.Create_login_sql_serverContext,0)


        def create_master_key_azure_sql(self):
            return self.getTypedRuleContext(TSqlParser.Create_master_key_azure_sqlContext,0)


        def create_master_key_sql_server(self):
            return self.getTypedRuleContext(TSqlParser.Create_master_key_sql_serverContext,0)


        def create_nonclustered_columnstore_index(self):
            return self.getTypedRuleContext(TSqlParser.Create_nonclustered_columnstore_indexContext,0)


        def create_or_alter_broker_priority(self):
            return self.getTypedRuleContext(TSqlParser.Create_or_alter_broker_priorityContext,0)


        def create_or_alter_event_session(self):
            return self.getTypedRuleContext(TSqlParser.Create_or_alter_event_sessionContext,0)


        def create_partition_function(self):
            return self.getTypedRuleContext(TSqlParser.Create_partition_functionContext,0)


        def create_partition_scheme(self):
            return self.getTypedRuleContext(TSqlParser.Create_partition_schemeContext,0)


        def create_remote_service_binding(self):
            return self.getTypedRuleContext(TSqlParser.Create_remote_service_bindingContext,0)


        def create_resource_pool(self):
            return self.getTypedRuleContext(TSqlParser.Create_resource_poolContext,0)


        def create_route(self):
            return self.getTypedRuleContext(TSqlParser.Create_routeContext,0)


        def create_rule(self):
            return self.getTypedRuleContext(TSqlParser.Create_ruleContext,0)


        def create_schema(self):
            return self.getTypedRuleContext(TSqlParser.Create_schemaContext,0)


        def create_schema_azure_sql_dw_and_pdw(self):
            return self.getTypedRuleContext(TSqlParser.Create_schema_azure_sql_dw_and_pdwContext,0)


        def create_search_property_list(self):
            return self.getTypedRuleContext(TSqlParser.Create_search_property_listContext,0)


        def create_security_policy(self):
            return self.getTypedRuleContext(TSqlParser.Create_security_policyContext,0)


        def create_sequence(self):
            return self.getTypedRuleContext(TSqlParser.Create_sequenceContext,0)


        def create_server_audit(self):
            return self.getTypedRuleContext(TSqlParser.Create_server_auditContext,0)


        def create_server_audit_specification(self):
            return self.getTypedRuleContext(TSqlParser.Create_server_audit_specificationContext,0)


        def create_server_role(self):
            return self.getTypedRuleContext(TSqlParser.Create_server_roleContext,0)


        def create_service(self):
            return self.getTypedRuleContext(TSqlParser.Create_serviceContext,0)


        def create_statistics(self):
            return self.getTypedRuleContext(TSqlParser.Create_statisticsContext,0)


        def create_synonym(self):
            return self.getTypedRuleContext(TSqlParser.Create_synonymContext,0)


        def create_table(self):
            return self.getTypedRuleContext(TSqlParser.Create_tableContext,0)


        def create_type(self):
            return self.getTypedRuleContext(TSqlParser.Create_typeContext,0)


        def create_user(self):
            return self.getTypedRuleContext(TSqlParser.Create_userContext,0)


        def create_user_azure_sql_dw(self):
            return self.getTypedRuleContext(TSqlParser.Create_user_azure_sql_dwContext,0)


        def create_workload_group(self):
            return self.getTypedRuleContext(TSqlParser.Create_workload_groupContext,0)


        def create_xml_index(self):
            return self.getTypedRuleContext(TSqlParser.Create_xml_indexContext,0)


        def create_xml_schema_collection(self):
            return self.getTypedRuleContext(TSqlParser.Create_xml_schema_collectionContext,0)


        def disable_trigger(self):
            return self.getTypedRuleContext(TSqlParser.Disable_triggerContext,0)


        def drop_aggregate(self):
            return self.getTypedRuleContext(TSqlParser.Drop_aggregateContext,0)


        def drop_application_role(self):
            return self.getTypedRuleContext(TSqlParser.Drop_application_roleContext,0)


        def drop_assembly(self):
            return self.getTypedRuleContext(TSqlParser.Drop_assemblyContext,0)


        def drop_asymmetric_key(self):
            return self.getTypedRuleContext(TSqlParser.Drop_asymmetric_keyContext,0)


        def drop_availability_group(self):
            return self.getTypedRuleContext(TSqlParser.Drop_availability_groupContext,0)


        def drop_broker_priority(self):
            return self.getTypedRuleContext(TSqlParser.Drop_broker_priorityContext,0)


        def drop_certificate(self):
            return self.getTypedRuleContext(TSqlParser.Drop_certificateContext,0)


        def drop_column_encryption_key(self):
            return self.getTypedRuleContext(TSqlParser.Drop_column_encryption_keyContext,0)


        def drop_column_master_key(self):
            return self.getTypedRuleContext(TSqlParser.Drop_column_master_keyContext,0)


        def drop_contract(self):
            return self.getTypedRuleContext(TSqlParser.Drop_contractContext,0)


        def drop_credential(self):
            return self.getTypedRuleContext(TSqlParser.Drop_credentialContext,0)


        def drop_cryptograhic_provider(self):
            return self.getTypedRuleContext(TSqlParser.Drop_cryptograhic_providerContext,0)


        def drop_database(self):
            return self.getTypedRuleContext(TSqlParser.Drop_databaseContext,0)


        def drop_database_audit_specification(self):
            return self.getTypedRuleContext(TSqlParser.Drop_database_audit_specificationContext,0)


        def drop_database_encryption_key(self):
            return self.getTypedRuleContext(TSqlParser.Drop_database_encryption_keyContext,0)


        def drop_database_scoped_credential(self):
            return self.getTypedRuleContext(TSqlParser.Drop_database_scoped_credentialContext,0)


        def drop_db_role(self):
            return self.getTypedRuleContext(TSqlParser.Drop_db_roleContext,0)


        def drop_default(self):
            return self.getTypedRuleContext(TSqlParser.Drop_defaultContext,0)


        def drop_endpoint(self):
            return self.getTypedRuleContext(TSqlParser.Drop_endpointContext,0)


        def drop_event_notifications(self):
            return self.getTypedRuleContext(TSqlParser.Drop_event_notificationsContext,0)


        def drop_event_session(self):
            return self.getTypedRuleContext(TSqlParser.Drop_event_sessionContext,0)


        def drop_external_data_source(self):
            return self.getTypedRuleContext(TSqlParser.Drop_external_data_sourceContext,0)


        def drop_external_file_format(self):
            return self.getTypedRuleContext(TSqlParser.Drop_external_file_formatContext,0)


        def drop_external_library(self):
            return self.getTypedRuleContext(TSqlParser.Drop_external_libraryContext,0)


        def drop_external_resource_pool(self):
            return self.getTypedRuleContext(TSqlParser.Drop_external_resource_poolContext,0)


        def drop_external_table(self):
            return self.getTypedRuleContext(TSqlParser.Drop_external_tableContext,0)


        def drop_fulltext_catalog(self):
            return self.getTypedRuleContext(TSqlParser.Drop_fulltext_catalogContext,0)


        def drop_fulltext_index(self):
            return self.getTypedRuleContext(TSqlParser.Drop_fulltext_indexContext,0)


        def drop_fulltext_stoplist(self):
            return self.getTypedRuleContext(TSqlParser.Drop_fulltext_stoplistContext,0)


        def drop_function(self):
            return self.getTypedRuleContext(TSqlParser.Drop_functionContext,0)


        def drop_index(self):
            return self.getTypedRuleContext(TSqlParser.Drop_indexContext,0)


        def drop_login(self):
            return self.getTypedRuleContext(TSqlParser.Drop_loginContext,0)


        def drop_master_key(self):
            return self.getTypedRuleContext(TSqlParser.Drop_master_keyContext,0)


        def drop_message_type(self):
            return self.getTypedRuleContext(TSqlParser.Drop_message_typeContext,0)


        def drop_partition_function(self):
            return self.getTypedRuleContext(TSqlParser.Drop_partition_functionContext,0)


        def drop_partition_scheme(self):
            return self.getTypedRuleContext(TSqlParser.Drop_partition_schemeContext,0)


        def drop_procedure(self):
            return self.getTypedRuleContext(TSqlParser.Drop_procedureContext,0)


        def drop_queue(self):
            return self.getTypedRuleContext(TSqlParser.Drop_queueContext,0)


        def drop_remote_service_binding(self):
            return self.getTypedRuleContext(TSqlParser.Drop_remote_service_bindingContext,0)


        def drop_resource_pool(self):
            return self.getTypedRuleContext(TSqlParser.Drop_resource_poolContext,0)


        def drop_route(self):
            return self.getTypedRuleContext(TSqlParser.Drop_routeContext,0)


        def drop_rule(self):
            return self.getTypedRuleContext(TSqlParser.Drop_ruleContext,0)


        def drop_schema(self):
            return self.getTypedRuleContext(TSqlParser.Drop_schemaContext,0)


        def drop_search_property_list(self):
            return self.getTypedRuleContext(TSqlParser.Drop_search_property_listContext,0)


        def drop_security_policy(self):
            return self.getTypedRuleContext(TSqlParser.Drop_security_policyContext,0)


        def drop_sequence(self):
            return self.getTypedRuleContext(TSqlParser.Drop_sequenceContext,0)


        def drop_server_audit(self):
            return self.getTypedRuleContext(TSqlParser.Drop_server_auditContext,0)


        def drop_server_audit_specification(self):
            return self.getTypedRuleContext(TSqlParser.Drop_server_audit_specificationContext,0)


        def drop_server_role(self):
            return self.getTypedRuleContext(TSqlParser.Drop_server_roleContext,0)


        def drop_service(self):
            return self.getTypedRuleContext(TSqlParser.Drop_serviceContext,0)


        def drop_signature(self):
            return self.getTypedRuleContext(TSqlParser.Drop_signatureContext,0)


        def drop_statistics(self):
            return self.getTypedRuleContext(TSqlParser.Drop_statisticsContext,0)


        def drop_statistics_name_azure_dw_and_pdw(self):
            return self.getTypedRuleContext(TSqlParser.Drop_statistics_name_azure_dw_and_pdwContext,0)


        def drop_symmetric_key(self):
            return self.getTypedRuleContext(TSqlParser.Drop_symmetric_keyContext,0)


        def drop_synonym(self):
            return self.getTypedRuleContext(TSqlParser.Drop_synonymContext,0)


        def drop_table(self):
            return self.getTypedRuleContext(TSqlParser.Drop_tableContext,0)


        def drop_trigger(self):
            return self.getTypedRuleContext(TSqlParser.Drop_triggerContext,0)


        def drop_type(self):
            return self.getTypedRuleContext(TSqlParser.Drop_typeContext,0)


        def drop_user(self):
            return self.getTypedRuleContext(TSqlParser.Drop_userContext,0)


        def drop_view(self):
            return self.getTypedRuleContext(TSqlParser.Drop_viewContext,0)


        def drop_workload_group(self):
            return self.getTypedRuleContext(TSqlParser.Drop_workload_groupContext,0)


        def drop_xml_schema_collection(self):
            return self.getTypedRuleContext(TSqlParser.Drop_xml_schema_collectionContext,0)


        def enable_trigger(self):
            return self.getTypedRuleContext(TSqlParser.Enable_triggerContext,0)


        def lock_table(self):
            return self.getTypedRuleContext(TSqlParser.Lock_tableContext,0)


        def truncate_table(self):
            return self.getTypedRuleContext(TSqlParser.Truncate_tableContext,0)


        def update_statistics(self):
            return self.getTypedRuleContext(TSqlParser.Update_statisticsContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_ddl_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdl_clause" ):
                listener.enterDdl_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdl_clause" ):
                listener.exitDdl_clause(self)




    def ddl_clause(self):

        localctx = TSqlParser.Ddl_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_ddl_clause)
        try:
            self.state = 1471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1306
                self.alter_application_role()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1307
                self.alter_assembly()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1308
                self.alter_asymmetric_key()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1309
                self.alter_authorization()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1310
                self.alter_authorization_for_azure_dw()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1311
                self.alter_authorization_for_parallel_dw()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1312
                self.alter_authorization_for_sql_database()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1313
                self.alter_availability_group()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1314
                self.alter_certificate()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1315
                self.alter_column_encryption_key()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1316
                self.alter_credential()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1317
                self.alter_cryptographic_provider()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1318
                self.alter_database()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1319
                self.alter_database_audit_specification()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1320
                self.alter_db_role()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1321
                self.alter_endpoint()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1322
                self.alter_external_data_source()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1323
                self.alter_external_library()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1324
                self.alter_external_resource_pool()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1325
                self.alter_fulltext_catalog()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1326
                self.alter_fulltext_stoplist()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1327
                self.alter_index()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1328
                self.alter_login_azure_sql()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1329
                self.alter_login_azure_sql_dw_and_pdw()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1330
                self.alter_login_sql_server()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1331
                self.alter_master_key_azure_sql()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1332
                self.alter_master_key_sql_server()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1333
                self.alter_message_type()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1334
                self.alter_partition_function()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1335
                self.alter_partition_scheme()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1336
                self.alter_remote_service_binding()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1337
                self.alter_resource_governor()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1338
                self.alter_schema_azure_sql_dw_and_pdw()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1339
                self.alter_schema_sql()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1340
                self.alter_sequence()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1341
                self.alter_server_audit()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1342
                self.alter_server_audit_specification()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1343
                self.alter_server_configuration()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1344
                self.alter_server_role()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1345
                self.alter_server_role_pdw()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1346
                self.alter_service()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1347
                self.alter_service_master_key()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 1348
                self.alter_symmetric_key()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 1349
                self.alter_table()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 1350
                self.alter_user()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 1351
                self.alter_user_azure_sql()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 1352
                self.alter_workload_group()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 1353
                self.alter_xml_schema_collection()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 1354
                self.create_application_role()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 1355
                self.create_assembly()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 1356
                self.create_asymmetric_key()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 1357
                self.create_column_encryption_key()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 1358
                self.create_column_master_key()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 1359
                self.create_columnstore_index()
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 1360
                self.create_credential()
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 1361
                self.create_cryptographic_provider()
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 1362
                self.create_database()
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 1363
                self.create_database_audit_specification()
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 1364
                self.create_db_role()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 1365
                self.create_endpoint()
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 1366
                self.create_event_notification()
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 1367
                self.create_external_library()
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 1368
                self.create_external_resource_pool()
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 1369
                self.create_fulltext_catalog()
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 1370
                self.create_fulltext_stoplist()
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 1371
                self.create_index()
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 1372
                self.create_login_azure_sql()
                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 1373
                self.create_login_pdw()
                pass

            elif la_ == 69:
                self.enterOuterAlt(localctx, 69)
                self.state = 1374
                self.create_login_sql_server()
                pass

            elif la_ == 70:
                self.enterOuterAlt(localctx, 70)
                self.state = 1375
                self.create_master_key_azure_sql()
                pass

            elif la_ == 71:
                self.enterOuterAlt(localctx, 71)
                self.state = 1376
                self.create_master_key_sql_server()
                pass

            elif la_ == 72:
                self.enterOuterAlt(localctx, 72)
                self.state = 1377
                self.create_nonclustered_columnstore_index()
                pass

            elif la_ == 73:
                self.enterOuterAlt(localctx, 73)
                self.state = 1378
                self.create_or_alter_broker_priority()
                pass

            elif la_ == 74:
                self.enterOuterAlt(localctx, 74)
                self.state = 1379
                self.create_or_alter_event_session()
                pass

            elif la_ == 75:
                self.enterOuterAlt(localctx, 75)
                self.state = 1380
                self.create_partition_function()
                pass

            elif la_ == 76:
                self.enterOuterAlt(localctx, 76)
                self.state = 1381
                self.create_partition_scheme()
                pass

            elif la_ == 77:
                self.enterOuterAlt(localctx, 77)
                self.state = 1382
                self.create_remote_service_binding()
                pass

            elif la_ == 78:
                self.enterOuterAlt(localctx, 78)
                self.state = 1383
                self.create_resource_pool()
                pass

            elif la_ == 79:
                self.enterOuterAlt(localctx, 79)
                self.state = 1384
                self.create_route()
                pass

            elif la_ == 80:
                self.enterOuterAlt(localctx, 80)
                self.state = 1385
                self.create_rule()
                pass

            elif la_ == 81:
                self.enterOuterAlt(localctx, 81)
                self.state = 1386
                self.create_schema()
                pass

            elif la_ == 82:
                self.enterOuterAlt(localctx, 82)
                self.state = 1387
                self.create_schema_azure_sql_dw_and_pdw()
                pass

            elif la_ == 83:
                self.enterOuterAlt(localctx, 83)
                self.state = 1388
                self.create_search_property_list()
                pass

            elif la_ == 84:
                self.enterOuterAlt(localctx, 84)
                self.state = 1389
                self.create_security_policy()
                pass

            elif la_ == 85:
                self.enterOuterAlt(localctx, 85)
                self.state = 1390
                self.create_sequence()
                pass

            elif la_ == 86:
                self.enterOuterAlt(localctx, 86)
                self.state = 1391
                self.create_server_audit()
                pass

            elif la_ == 87:
                self.enterOuterAlt(localctx, 87)
                self.state = 1392
                self.create_server_audit_specification()
                pass

            elif la_ == 88:
                self.enterOuterAlt(localctx, 88)
                self.state = 1393
                self.create_server_role()
                pass

            elif la_ == 89:
                self.enterOuterAlt(localctx, 89)
                self.state = 1394
                self.create_service()
                pass

            elif la_ == 90:
                self.enterOuterAlt(localctx, 90)
                self.state = 1395
                self.create_statistics()
                pass

            elif la_ == 91:
                self.enterOuterAlt(localctx, 91)
                self.state = 1396
                self.create_synonym()
                pass

            elif la_ == 92:
                self.enterOuterAlt(localctx, 92)
                self.state = 1397
                self.create_table()
                pass

            elif la_ == 93:
                self.enterOuterAlt(localctx, 93)
                self.state = 1398
                self.create_type()
                pass

            elif la_ == 94:
                self.enterOuterAlt(localctx, 94)
                self.state = 1399
                self.create_user()
                pass

            elif la_ == 95:
                self.enterOuterAlt(localctx, 95)
                self.state = 1400
                self.create_user_azure_sql_dw()
                pass

            elif la_ == 96:
                self.enterOuterAlt(localctx, 96)
                self.state = 1401
                self.create_workload_group()
                pass

            elif la_ == 97:
                self.enterOuterAlt(localctx, 97)
                self.state = 1402
                self.create_xml_index()
                pass

            elif la_ == 98:
                self.enterOuterAlt(localctx, 98)
                self.state = 1403
                self.create_xml_schema_collection()
                pass

            elif la_ == 99:
                self.enterOuterAlt(localctx, 99)
                self.state = 1404
                self.disable_trigger()
                pass

            elif la_ == 100:
                self.enterOuterAlt(localctx, 100)
                self.state = 1405
                self.drop_aggregate()
                pass

            elif la_ == 101:
                self.enterOuterAlt(localctx, 101)
                self.state = 1406
                self.drop_application_role()
                pass

            elif la_ == 102:
                self.enterOuterAlt(localctx, 102)
                self.state = 1407
                self.drop_assembly()
                pass

            elif la_ == 103:
                self.enterOuterAlt(localctx, 103)
                self.state = 1408
                self.drop_asymmetric_key()
                pass

            elif la_ == 104:
                self.enterOuterAlt(localctx, 104)
                self.state = 1409
                self.drop_availability_group()
                pass

            elif la_ == 105:
                self.enterOuterAlt(localctx, 105)
                self.state = 1410
                self.drop_broker_priority()
                pass

            elif la_ == 106:
                self.enterOuterAlt(localctx, 106)
                self.state = 1411
                self.drop_certificate()
                pass

            elif la_ == 107:
                self.enterOuterAlt(localctx, 107)
                self.state = 1412
                self.drop_column_encryption_key()
                pass

            elif la_ == 108:
                self.enterOuterAlt(localctx, 108)
                self.state = 1413
                self.drop_column_master_key()
                pass

            elif la_ == 109:
                self.enterOuterAlt(localctx, 109)
                self.state = 1414
                self.drop_contract()
                pass

            elif la_ == 110:
                self.enterOuterAlt(localctx, 110)
                self.state = 1415
                self.drop_credential()
                pass

            elif la_ == 111:
                self.enterOuterAlt(localctx, 111)
                self.state = 1416
                self.drop_cryptograhic_provider()
                pass

            elif la_ == 112:
                self.enterOuterAlt(localctx, 112)
                self.state = 1417
                self.drop_database()
                pass

            elif la_ == 113:
                self.enterOuterAlt(localctx, 113)
                self.state = 1418
                self.drop_database_audit_specification()
                pass

            elif la_ == 114:
                self.enterOuterAlt(localctx, 114)
                self.state = 1419
                self.drop_database_encryption_key()
                pass

            elif la_ == 115:
                self.enterOuterAlt(localctx, 115)
                self.state = 1420
                self.drop_database_scoped_credential()
                pass

            elif la_ == 116:
                self.enterOuterAlt(localctx, 116)
                self.state = 1421
                self.drop_db_role()
                pass

            elif la_ == 117:
                self.enterOuterAlt(localctx, 117)
                self.state = 1422
                self.drop_default()
                pass

            elif la_ == 118:
                self.enterOuterAlt(localctx, 118)
                self.state = 1423
                self.drop_endpoint()
                pass

            elif la_ == 119:
                self.enterOuterAlt(localctx, 119)
                self.state = 1424
                self.drop_event_notifications()
                pass

            elif la_ == 120:
                self.enterOuterAlt(localctx, 120)
                self.state = 1425
                self.drop_event_session()
                pass

            elif la_ == 121:
                self.enterOuterAlt(localctx, 121)
                self.state = 1426
                self.drop_external_data_source()
                pass

            elif la_ == 122:
                self.enterOuterAlt(localctx, 122)
                self.state = 1427
                self.drop_external_file_format()
                pass

            elif la_ == 123:
                self.enterOuterAlt(localctx, 123)
                self.state = 1428
                self.drop_external_library()
                pass

            elif la_ == 124:
                self.enterOuterAlt(localctx, 124)
                self.state = 1429
                self.drop_external_resource_pool()
                pass

            elif la_ == 125:
                self.enterOuterAlt(localctx, 125)
                self.state = 1430
                self.drop_external_table()
                pass

            elif la_ == 126:
                self.enterOuterAlt(localctx, 126)
                self.state = 1431
                self.drop_fulltext_catalog()
                pass

            elif la_ == 127:
                self.enterOuterAlt(localctx, 127)
                self.state = 1432
                self.drop_fulltext_index()
                pass

            elif la_ == 128:
                self.enterOuterAlt(localctx, 128)
                self.state = 1433
                self.drop_fulltext_stoplist()
                pass

            elif la_ == 129:
                self.enterOuterAlt(localctx, 129)
                self.state = 1434
                self.drop_function()
                pass

            elif la_ == 130:
                self.enterOuterAlt(localctx, 130)
                self.state = 1435
                self.drop_index()
                pass

            elif la_ == 131:
                self.enterOuterAlt(localctx, 131)
                self.state = 1436
                self.drop_login()
                pass

            elif la_ == 132:
                self.enterOuterAlt(localctx, 132)
                self.state = 1437
                self.drop_master_key()
                pass

            elif la_ == 133:
                self.enterOuterAlt(localctx, 133)
                self.state = 1438
                self.drop_message_type()
                pass

            elif la_ == 134:
                self.enterOuterAlt(localctx, 134)
                self.state = 1439
                self.drop_partition_function()
                pass

            elif la_ == 135:
                self.enterOuterAlt(localctx, 135)
                self.state = 1440
                self.drop_partition_scheme()
                pass

            elif la_ == 136:
                self.enterOuterAlt(localctx, 136)
                self.state = 1441
                self.drop_procedure()
                pass

            elif la_ == 137:
                self.enterOuterAlt(localctx, 137)
                self.state = 1442
                self.drop_queue()
                pass

            elif la_ == 138:
                self.enterOuterAlt(localctx, 138)
                self.state = 1443
                self.drop_remote_service_binding()
                pass

            elif la_ == 139:
                self.enterOuterAlt(localctx, 139)
                self.state = 1444
                self.drop_resource_pool()
                pass

            elif la_ == 140:
                self.enterOuterAlt(localctx, 140)
                self.state = 1445
                self.drop_route()
                pass

            elif la_ == 141:
                self.enterOuterAlt(localctx, 141)
                self.state = 1446
                self.drop_rule()
                pass

            elif la_ == 142:
                self.enterOuterAlt(localctx, 142)
                self.state = 1447
                self.drop_schema()
                pass

            elif la_ == 143:
                self.enterOuterAlt(localctx, 143)
                self.state = 1448
                self.drop_search_property_list()
                pass

            elif la_ == 144:
                self.enterOuterAlt(localctx, 144)
                self.state = 1449
                self.drop_security_policy()
                pass

            elif la_ == 145:
                self.enterOuterAlt(localctx, 145)
                self.state = 1450
                self.drop_sequence()
                pass

            elif la_ == 146:
                self.enterOuterAlt(localctx, 146)
                self.state = 1451
                self.drop_server_audit()
                pass

            elif la_ == 147:
                self.enterOuterAlt(localctx, 147)
                self.state = 1452
                self.drop_server_audit_specification()
                pass

            elif la_ == 148:
                self.enterOuterAlt(localctx, 148)
                self.state = 1453
                self.drop_server_role()
                pass

            elif la_ == 149:
                self.enterOuterAlt(localctx, 149)
                self.state = 1454
                self.drop_service()
                pass

            elif la_ == 150:
                self.enterOuterAlt(localctx, 150)
                self.state = 1455
                self.drop_signature()
                pass

            elif la_ == 151:
                self.enterOuterAlt(localctx, 151)
                self.state = 1456
                self.drop_statistics()
                pass

            elif la_ == 152:
                self.enterOuterAlt(localctx, 152)
                self.state = 1457
                self.drop_statistics_name_azure_dw_and_pdw()
                pass

            elif la_ == 153:
                self.enterOuterAlt(localctx, 153)
                self.state = 1458
                self.drop_symmetric_key()
                pass

            elif la_ == 154:
                self.enterOuterAlt(localctx, 154)
                self.state = 1459
                self.drop_synonym()
                pass

            elif la_ == 155:
                self.enterOuterAlt(localctx, 155)
                self.state = 1460
                self.drop_table()
                pass

            elif la_ == 156:
                self.enterOuterAlt(localctx, 156)
                self.state = 1461
                self.drop_trigger()
                pass

            elif la_ == 157:
                self.enterOuterAlt(localctx, 157)
                self.state = 1462
                self.drop_type()
                pass

            elif la_ == 158:
                self.enterOuterAlt(localctx, 158)
                self.state = 1463
                self.drop_user()
                pass

            elif la_ == 159:
                self.enterOuterAlt(localctx, 159)
                self.state = 1464
                self.drop_view()
                pass

            elif la_ == 160:
                self.enterOuterAlt(localctx, 160)
                self.state = 1465
                self.drop_workload_group()
                pass

            elif la_ == 161:
                self.enterOuterAlt(localctx, 161)
                self.state = 1466
                self.drop_xml_schema_collection()
                pass

            elif la_ == 162:
                self.enterOuterAlt(localctx, 162)
                self.state = 1467
                self.enable_trigger()
                pass

            elif la_ == 163:
                self.enterOuterAlt(localctx, 163)
                self.state = 1468
                self.lock_table()
                pass

            elif la_ == 164:
                self.enterOuterAlt(localctx, 164)
                self.state = 1469
                self.truncate_table()
                pass

            elif la_ == 165:
                self.enterOuterAlt(localctx, 165)
                self.state = 1470
                self.update_statistics()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Backup_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def backup_database(self):
            return self.getTypedRuleContext(TSqlParser.Backup_databaseContext,0)


        def backup_log(self):
            return self.getTypedRuleContext(TSqlParser.Backup_logContext,0)


        def backup_certificate(self):
            return self.getTypedRuleContext(TSqlParser.Backup_certificateContext,0)


        def backup_master_key(self):
            return self.getTypedRuleContext(TSqlParser.Backup_master_keyContext,0)


        def backup_service_master_key(self):
            return self.getTypedRuleContext(TSqlParser.Backup_service_master_keyContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_backup_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackup_statement" ):
                listener.enterBackup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackup_statement" ):
                listener.exitBackup_statement(self)




    def backup_statement(self):

        localctx = TSqlParser.Backup_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_backup_statement)
        try:
            self.state = 1478
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1473
                self.backup_database()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1474
                self.backup_log()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1475
                self.backup_certificate()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1476
                self.backup_master_key()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1477
                self.backup_service_master_key()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cfl_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block_statement(self):
            return self.getTypedRuleContext(TSqlParser.Block_statementContext,0)


        def break_statement(self):
            return self.getTypedRuleContext(TSqlParser.Break_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(TSqlParser.Continue_statementContext,0)


        def goto_statement(self):
            return self.getTypedRuleContext(TSqlParser.Goto_statementContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(TSqlParser.If_statementContext,0)


        def print_statement(self):
            return self.getTypedRuleContext(TSqlParser.Print_statementContext,0)


        def raiseerror_statement(self):
            return self.getTypedRuleContext(TSqlParser.Raiseerror_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(TSqlParser.Return_statementContext,0)


        def throw_statement(self):
            return self.getTypedRuleContext(TSqlParser.Throw_statementContext,0)


        def try_catch_statement(self):
            return self.getTypedRuleContext(TSqlParser.Try_catch_statementContext,0)


        def waitfor_statement(self):
            return self.getTypedRuleContext(TSqlParser.Waitfor_statementContext,0)


        def while_statement(self):
            return self.getTypedRuleContext(TSqlParser.While_statementContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_cfl_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCfl_statement" ):
                listener.enterCfl_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCfl_statement" ):
                listener.exitCfl_statement(self)




    def cfl_statement(self):

        localctx = TSqlParser.Cfl_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_cfl_statement)
        try:
            self.state = 1492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1480
                self.block_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1481
                self.break_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1482
                self.continue_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1483
                self.goto_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1484
                self.if_statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1485
                self.print_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1486
                self.raiseerror_statement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1487
                self.return_statement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1488
                self.throw_statement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1489
                self.try_catch_statement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1490
                self.waitfor_statement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1491
                self.while_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(TSqlParser.BEGIN, 0)

        def END(self):
            return self.getToken(TSqlParser.END, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SEMI)
            else:
                return self.getToken(TSqlParser.SEMI, i)

        def sql_clauses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Sql_clausesContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Sql_clausesContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_block_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_statement" ):
                listener.enterBlock_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_statement" ):
                listener.exitBlock_statement(self)




    def block_statement(self):

        localctx = TSqlParser.Block_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_block_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1494
            self.match(TSqlParser.BEGIN)
            self.state = 1496
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 1495
                self.match(TSqlParser.SEMI)


            self.state = 1501
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1498
                    self.sql_clauses() 
                self.state = 1503
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

            self.state = 1504
            self.match(TSqlParser.END)
            self.state = 1506
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 1505
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(TSqlParser.BREAK, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_break_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_statement" ):
                listener.enterBreak_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_statement" ):
                listener.exitBreak_statement(self)




    def break_statement(self):

        localctx = TSqlParser.Break_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_break_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1508
            self.match(TSqlParser.BREAK)
            self.state = 1510
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 1509
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(TSqlParser.CONTINUE, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_continue_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_statement" ):
                listener.enterContinue_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_statement" ):
                listener.exitContinue_statement(self)




    def continue_statement(self):

        localctx = TSqlParser.Continue_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_continue_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1512
            self.match(TSqlParser.CONTINUE)
            self.state = 1514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 1513
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Goto_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(TSqlParser.GOTO, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def COLON(self):
            return self.getToken(TSqlParser.COLON, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_goto_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoto_statement" ):
                listener.enterGoto_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoto_statement" ):
                listener.exitGoto_statement(self)




    def goto_statement(self):

        localctx = TSqlParser.Goto_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_goto_statement)
        try:
            self.state = 1526
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [399]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1516
                self.match(TSqlParser.GOTO)
                self.state = 1517
                self.id_()
                self.state = 1519
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                if la_ == 1:
                    self.state = 1518
                    self.match(TSqlParser.SEMI)


                pass
            elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1521
                self.id_()
                self.state = 1522
                self.match(TSqlParser.COLON)
                self.state = 1524
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 1523
                    self.match(TSqlParser.SEMI)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(TSqlParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_return_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_statement" ):
                listener.enterReturn_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_statement" ):
                listener.exitReturn_statement(self)




    def return_statement(self):

        localctx = TSqlParser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_return_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1528
            self.match(TSqlParser.RETURN)
            self.state = 1530
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 1529
                self.expression(0)


            self.state = 1533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 1532
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def sql_clauses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Sql_clausesContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Sql_clausesContext,i)


        def ELSE(self):
            return self.getToken(TSqlParser.ELSE, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)




    def if_statement(self):

        localctx = TSqlParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_if_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1535
            self.match(TSqlParser.IF)
            self.state = 1536
            self.search_condition(0)
            self.state = 1537
            self.sql_clauses()
            self.state = 1540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 1538
                self.match(TSqlParser.ELSE)
                self.state = 1539
                self.sql_clauses()


            self.state = 1543
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 1542
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throw_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(TSqlParser.THROW, 0)

        def throw_error_number(self):
            return self.getTypedRuleContext(TSqlParser.Throw_error_numberContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def throw_message(self):
            return self.getTypedRuleContext(TSqlParser.Throw_messageContext,0)


        def throw_state(self):
            return self.getTypedRuleContext(TSqlParser.Throw_stateContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_throw_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_statement" ):
                listener.enterThrow_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_statement" ):
                listener.exitThrow_statement(self)




    def throw_statement(self):

        localctx = TSqlParser.Throw_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_throw_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1545
            self.match(TSqlParser.THROW)
            self.state = 1552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1166 or _la==1168:
                self.state = 1546
                self.throw_error_number()
                self.state = 1547
                self.match(TSqlParser.COMMA)
                self.state = 1548
                self.throw_message()
                self.state = 1549
                self.match(TSqlParser.COMMA)
                self.state = 1550
                self.throw_state()


            self.state = 1555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 1554
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throw_error_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_throw_error_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_error_number" ):
                listener.enterThrow_error_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_error_number" ):
                listener.exitThrow_error_number(self)




    def throw_error_number(self):

        localctx = TSqlParser.Throw_error_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_throw_error_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1557
            _la = self._input.LA(1)
            if not(_la==1166 or _la==1168):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throw_messageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_throw_message

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_message" ):
                listener.enterThrow_message(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_message" ):
                listener.exitThrow_message(self)




    def throw_message(self):

        localctx = TSqlParser.Throw_messageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_throw_message)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1559
            _la = self._input.LA(1)
            if not(_la==1166 or _la==1170):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throw_stateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_throw_state

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_state" ):
                listener.enterThrow_state(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_state" ):
                listener.exitThrow_state(self)




    def throw_state(self):

        localctx = TSqlParser.Throw_stateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_throw_state)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1561
            _la = self._input.LA(1)
            if not(_la==1166 or _la==1168):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_catch_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.try_clauses = None # Sql_clausesContext
            self.catch_clauses = None # Sql_clausesContext

        def BEGIN(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BEGIN)
            else:
                return self.getToken(TSqlParser.BEGIN, i)

        def TRY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TRY)
            else:
                return self.getToken(TSqlParser.TRY, i)

        def END(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.END)
            else:
                return self.getToken(TSqlParser.END, i)

        def CATCH(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CATCH)
            else:
                return self.getToken(TSqlParser.CATCH, i)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SEMI)
            else:
                return self.getToken(TSqlParser.SEMI, i)

        def sql_clauses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Sql_clausesContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Sql_clausesContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_try_catch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_catch_statement" ):
                listener.enterTry_catch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_catch_statement" ):
                listener.exitTry_catch_statement(self)




    def try_catch_statement(self):

        localctx = TSqlParser.Try_catch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_try_catch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1563
            self.match(TSqlParser.BEGIN)
            self.state = 1564
            self.match(TSqlParser.TRY)
            self.state = 1566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 1565
                self.match(TSqlParser.SEMI)


            self.state = 1569 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1568
                    localctx.try_clauses = self.sql_clauses()

                else:
                    raise NoViableAltException(self)
                self.state = 1571 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

            self.state = 1573
            self.match(TSqlParser.END)
            self.state = 1574
            self.match(TSqlParser.TRY)
            self.state = 1576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1195:
                self.state = 1575
                self.match(TSqlParser.SEMI)


            self.state = 1578
            self.match(TSqlParser.BEGIN)
            self.state = 1579
            self.match(TSqlParser.CATCH)
            self.state = 1581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 1580
                self.match(TSqlParser.SEMI)


            self.state = 1586
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1583
                    localctx.catch_clauses = self.sql_clauses() 
                self.state = 1588
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

            self.state = 1589
            self.match(TSqlParser.END)
            self.state = 1590
            self.match(TSqlParser.CATCH)
            self.state = 1592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 1591
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Waitfor_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAITFOR(self):
            return self.getToken(TSqlParser.WAITFOR, 0)

        def receive_statement(self):
            return self.getTypedRuleContext(TSqlParser.Receive_statementContext,0)


        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def time(self):
            return self.getTypedRuleContext(TSqlParser.TimeContext,0)


        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def DELAY(self):
            return self.getToken(TSqlParser.DELAY, 0)

        def TIME(self):
            return self.getToken(TSqlParser.TIME, 0)

        def TIMEOUT(self):
            return self.getToken(TSqlParser.TIMEOUT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_waitfor_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaitfor_statement" ):
                listener.enterWaitfor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaitfor_statement" ):
                listener.exitWaitfor_statement(self)




    def waitfor_statement(self):

        localctx = TSqlParser.Waitfor_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_waitfor_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1594
            self.match(TSqlParser.WAITFOR)
            self.state = 1596
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 1595
                self.receive_statement()


            self.state = 1599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1194:
                self.state = 1598
                self.match(TSqlParser.COMMA)


            self.state = 1603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 1601
                _la = self._input.LA(1)
                if not(_la==250 or _la==982 or _la==983):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1602
                self.time()


            self.state = 1606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 1605
                self.expression(0)


            self.state = 1609
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 1608
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(TSqlParser.WHILE, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def sql_clauses(self):
            return self.getTypedRuleContext(TSqlParser.Sql_clausesContext,0)


        def BREAK(self):
            return self.getToken(TSqlParser.BREAK, 0)

        def CONTINUE(self):
            return self.getToken(TSqlParser.CONTINUE, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_while_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_statement" ):
                listener.enterWhile_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_statement" ):
                listener.exitWhile_statement(self)




    def while_statement(self):

        localctx = TSqlParser.While_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_while_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1611
            self.match(TSqlParser.WHILE)
            self.state = 1612
            self.search_condition(0)
            self.state = 1622
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 1613
                self.sql_clauses()
                pass

            elif la_ == 2:
                self.state = 1614
                self.match(TSqlParser.BREAK)
                self.state = 1616
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                if la_ == 1:
                    self.state = 1615
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 3:
                self.state = 1618
                self.match(TSqlParser.CONTINUE)
                self.state = 1620
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 1619
                    self.match(TSqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Print_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(TSqlParser.PRINT, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def DOUBLE_QUOTE_ID(self):
            return self.getToken(TSqlParser.DOUBLE_QUOTE_ID, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOCAL_ID)
            else:
                return self.getToken(TSqlParser.LOCAL_ID, i)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_print_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_statement" ):
                listener.enterPrint_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_statement" ):
                listener.exitPrint_statement(self)




    def print_statement(self):

        localctx = TSqlParser.Print_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_print_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1624
            self.match(TSqlParser.PRINT)
            self.state = 1627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 1625
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 1626
                self.match(TSqlParser.DOUBLE_QUOTE_ID)
                pass


            self.state = 1633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 1629
                self.match(TSqlParser.COMMA)
                self.state = 1630
                self.match(TSqlParser.LOCAL_ID)
                self.state = 1635
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 1636
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raiseerror_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.msg = None # Token
            self.severity = None # Constant_LOCAL_IDContext
            self.state = None # Constant_LOCAL_IDContext
            self.formatstring = None # Token
            self.argument = None # Token

        def RAISERROR(self):
            return self.getToken(TSqlParser.RAISERROR, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def constant_LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Constant_LOCAL_IDContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Constant_LOCAL_IDContext,i)


        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOCAL_ID)
            else:
                return self.getToken(TSqlParser.LOCAL_ID, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def LOG(self):
            return self.getToken(TSqlParser.LOG, 0)

        def SETERROR(self):
            return self.getToken(TSqlParser.SETERROR, 0)

        def NOWAIT(self):
            return self.getToken(TSqlParser.NOWAIT, 0)

        def NULL_(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NULL_)
            else:
                return self.getToken(TSqlParser.NULL_, i)

        def DOUBLE_QUOTE_ID(self):
            return self.getToken(TSqlParser.DOUBLE_QUOTE_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_raiseerror_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaiseerror_statement" ):
                listener.enterRaiseerror_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaiseerror_statement" ):
                listener.exitRaiseerror_statement(self)




    def raiseerror_statement(self):

        localctx = TSqlParser.Raiseerror_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_raiseerror_statement)
        self._la = 0 # Token type
        try:
            self.state = 1674
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1639
                self.match(TSqlParser.RAISERROR)
                self.state = 1640
                self.match(TSqlParser.LR_BRACKET)
                self.state = 1641
                localctx.msg = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 1166)) & ~0x3f) == 0 and ((1 << (_la - 1166)) & 21) != 0)):
                    localctx.msg = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1642
                self.match(TSqlParser.COMMA)
                self.state = 1643
                localctx.severity = self.constant_LOCAL_ID()
                self.state = 1644
                self.match(TSqlParser.COMMA)
                self.state = 1645
                localctx.state = self.constant_LOCAL_ID()
                self.state = 1653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 1646
                    self.match(TSqlParser.COMMA)
                    self.state = 1649
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1166, 1168, 1170, 1171, 1172, 1173, 1191, 1202, 1207]:
                        self.state = 1647
                        self.constant_LOCAL_ID()
                        pass
                    elif token in [630]:
                        self.state = 1648
                        self.match(TSqlParser.NULL_)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1655
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1656
                self.match(TSqlParser.RR_BRACKET)
                self.state = 1659
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 1657
                    self.match(TSqlParser.WITH)
                    self.state = 1658
                    _la = self._input.LA(1)
                    if not(_la==523 or _la==618 or _la==888):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1662
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 1661
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1664
                self.match(TSqlParser.RAISERROR)
                self.state = 1665
                self.match(TSqlParser.DECIMAL)
                self.state = 1666
                localctx.formatstring = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 273) != 0)):
                    localctx.formatstring = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 1667
                    self.match(TSqlParser.COMMA)
                    self.state = 1668
                    localctx.argument = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(((((_la - 1166)) & ~0x3f) == 0 and ((1 << (_la - 1166)) & 21) != 0)):
                        localctx.argument = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1673
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Empty_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_empty_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty_statement" ):
                listener.enterEmpty_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty_statement" ):
                listener.exitEmpty_statement(self)




    def empty_statement(self):

        localctx = TSqlParser.Empty_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_empty_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1676
            self.match(TSqlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Another_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_queue(self):
            return self.getTypedRuleContext(TSqlParser.Alter_queueContext,0)


        def checkpoint_statement(self):
            return self.getTypedRuleContext(TSqlParser.Checkpoint_statementContext,0)


        def conversation_statement(self):
            return self.getTypedRuleContext(TSqlParser.Conversation_statementContext,0)


        def create_contract(self):
            return self.getTypedRuleContext(TSqlParser.Create_contractContext,0)


        def create_queue(self):
            return self.getTypedRuleContext(TSqlParser.Create_queueContext,0)


        def cursor_statement(self):
            return self.getTypedRuleContext(TSqlParser.Cursor_statementContext,0)


        def declare_statement(self):
            return self.getTypedRuleContext(TSqlParser.Declare_statementContext,0)


        def execute_statement(self):
            return self.getTypedRuleContext(TSqlParser.Execute_statementContext,0)


        def kill_statement(self):
            return self.getTypedRuleContext(TSqlParser.Kill_statementContext,0)


        def message_statement(self):
            return self.getTypedRuleContext(TSqlParser.Message_statementContext,0)


        def reconfigure_statement(self):
            return self.getTypedRuleContext(TSqlParser.Reconfigure_statementContext,0)


        def security_statement(self):
            return self.getTypedRuleContext(TSqlParser.Security_statementContext,0)


        def set_statement(self):
            return self.getTypedRuleContext(TSqlParser.Set_statementContext,0)


        def setuser_statement(self):
            return self.getTypedRuleContext(TSqlParser.Setuser_statementContext,0)


        def shutdown_statement(self):
            return self.getTypedRuleContext(TSqlParser.Shutdown_statementContext,0)


        def transaction_statement(self):
            return self.getTypedRuleContext(TSqlParser.Transaction_statementContext,0)


        def use_statement(self):
            return self.getTypedRuleContext(TSqlParser.Use_statementContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_another_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnother_statement" ):
                listener.enterAnother_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnother_statement" ):
                listener.exitAnother_statement(self)




    def another_statement(self):

        localctx = TSqlParser.Another_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_another_statement)
        try:
            self.state = 1695
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1678
                self.alter_queue()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1679
                self.checkpoint_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1680
                self.conversation_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1681
                self.create_contract()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1682
                self.create_queue()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1683
                self.cursor_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1684
                self.declare_statement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1685
                self.execute_statement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1686
                self.kill_statement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1687
                self.message_statement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1688
                self.reconfigure_statement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1689
                self.security_statement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1690
                self.set_statement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1691
                self.setuser_statement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1692
                self.shutdown_statement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1693
                self.transaction_statement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1694
                self.use_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_application_roleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.appliction_role = None # Id_Context
            self.new_application_role_name = None # Id_Context
            self.application_role_password = None # Token
            self.app_role_default_schema = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def APPLICATION(self):
            return self.getToken(TSqlParser.APPLICATION, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def DEFAULT_SCHEMA(self):
            return self.getToken(TSqlParser.DEFAULT_SCHEMA, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_application_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_application_role" ):
                listener.enterAlter_application_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_application_role" ):
                listener.exitAlter_application_role(self)




    def alter_application_role(self):

        localctx = TSqlParser.Alter_application_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_alter_application_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1697
            self.match(TSqlParser.ALTER)
            self.state = 1698
            self.match(TSqlParser.APPLICATION)
            self.state = 1699
            self.match(TSqlParser.ROLE)
            self.state = 1700
            localctx.appliction_role = self.id_()
            self.state = 1701
            self.match(TSqlParser.WITH)
            self.state = 1708
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 1703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 1702
                    self.match(TSqlParser.COMMA)


                self.state = 1705
                self.match(TSqlParser.NAME)
                self.state = 1706
                self.match(TSqlParser.EQUAL)
                self.state = 1707
                localctx.new_application_role_name = self.id_()


            self.state = 1716
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 1711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 1710
                    self.match(TSqlParser.COMMA)


                self.state = 1713
                self.match(TSqlParser.PASSWORD)
                self.state = 1714
                self.match(TSqlParser.EQUAL)
                self.state = 1715
                localctx.application_role_password = self.match(TSqlParser.STRING)


            self.state = 1724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 1719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 1718
                    self.match(TSqlParser.COMMA)


                self.state = 1721
                self.match(TSqlParser.DEFAULT_SCHEMA)
                self.state = 1722
                self.match(TSqlParser.EQUAL)
                self.state = 1723
                localctx.app_role_default_schema = self.id_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_xml_schema_collectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def XML(self):
            return self.getToken(TSqlParser.XML, 0)

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def COLLECTION(self):
            return self.getToken(TSqlParser.COLLECTION, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_xml_schema_collection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_xml_schema_collection" ):
                listener.enterAlter_xml_schema_collection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_xml_schema_collection" ):
                listener.exitAlter_xml_schema_collection(self)




    def alter_xml_schema_collection(self):

        localctx = TSqlParser.Alter_xml_schema_collectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_alter_xml_schema_collection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1726
            self.match(TSqlParser.ALTER)
            self.state = 1727
            self.match(TSqlParser.XML)
            self.state = 1728
            self.match(TSqlParser.SCHEMA)
            self.state = 1729
            self.match(TSqlParser.COLLECTION)
            self.state = 1733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 1730
                self.id_()
                self.state = 1731
                self.match(TSqlParser.DOT)


            self.state = 1735
            self.id_()
            self.state = 1736
            self.match(TSqlParser.ADD)
            self.state = 1737
            self.match(TSqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_application_roleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.appliction_role = None # Id_Context
            self.application_role_password = None # Token
            self.app_role_default_schema = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def APPLICATION(self):
            return self.getToken(TSqlParser.APPLICATION, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def DEFAULT_SCHEMA(self):
            return self.getToken(TSqlParser.DEFAULT_SCHEMA, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_application_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_application_role" ):
                listener.enterCreate_application_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_application_role" ):
                listener.exitCreate_application_role(self)




    def create_application_role(self):

        localctx = TSqlParser.Create_application_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_create_application_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1739
            self.match(TSqlParser.CREATE)
            self.state = 1740
            self.match(TSqlParser.APPLICATION)
            self.state = 1741
            self.match(TSqlParser.ROLE)
            self.state = 1742
            localctx.appliction_role = self.id_()
            self.state = 1743
            self.match(TSqlParser.WITH)
            self.state = 1750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 1745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 1744
                    self.match(TSqlParser.COMMA)


                self.state = 1747
                self.match(TSqlParser.PASSWORD)
                self.state = 1748
                self.match(TSqlParser.EQUAL)
                self.state = 1749
                localctx.application_role_password = self.match(TSqlParser.STRING)


            self.state = 1758
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 1753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 1752
                    self.match(TSqlParser.COMMA)


                self.state = 1755
                self.match(TSqlParser.DEFAULT_SCHEMA)
                self.state = 1756
                self.match(TSqlParser.EQUAL)
                self.state = 1757
                localctx.app_role_default_schema = self.id_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_aggregateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # Id_Context
            self.aggregate_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def AGGREGATE(self):
            return self.getToken(TSqlParser.AGGREGATE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_aggregate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_aggregate" ):
                listener.enterDrop_aggregate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_aggregate" ):
                listener.exitDrop_aggregate(self)




    def drop_aggregate(self):

        localctx = TSqlParser.Drop_aggregateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_drop_aggregate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1760
            self.match(TSqlParser.DROP)
            self.state = 1761
            self.match(TSqlParser.AGGREGATE)
            self.state = 1764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==431:
                self.state = 1762
                self.match(TSqlParser.IF)
                self.state = 1763
                self.match(TSqlParser.EXISTS)


            self.state = 1769
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 1766
                localctx.schema_name = self.id_()
                self.state = 1767
                self.match(TSqlParser.DOT)


            self.state = 1771
            localctx.aggregate_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_application_roleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rolename = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def APPLICATION(self):
            return self.getToken(TSqlParser.APPLICATION, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_application_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_application_role" ):
                listener.enterDrop_application_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_application_role" ):
                listener.exitDrop_application_role(self)




    def drop_application_role(self):

        localctx = TSqlParser.Drop_application_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_drop_application_role)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1773
            self.match(TSqlParser.DROP)
            self.state = 1774
            self.match(TSqlParser.APPLICATION)
            self.state = 1775
            self.match(TSqlParser.ROLE)
            self.state = 1776
            localctx.rolename = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assemblyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assembly_name = None # Id_Context

        def alter_assembly_start(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_startContext,0)


        def alter_assembly_clause(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_clauseContext,0)


        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly" ):
                listener.enterAlter_assembly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly" ):
                listener.exitAlter_assembly(self)




    def alter_assembly(self):

        localctx = TSqlParser.Alter_assemblyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_alter_assembly)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1778
            self.alter_assembly_start()
            self.state = 1779
            localctx.assembly_name = self.id_()
            self.state = 1780
            self.alter_assembly_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def ASSEMBLY(self):
            return self.getToken(TSqlParser.ASSEMBLY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_start" ):
                listener.enterAlter_assembly_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_start" ):
                listener.exitAlter_assembly_start(self)




    def alter_assembly_start(self):

        localctx = TSqlParser.Alter_assembly_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_alter_assembly_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1782
            self.match(TSqlParser.ALTER)
            self.state = 1783
            self.match(TSqlParser.ASSEMBLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_assembly_from_clause(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_from_clauseContext,0)


        def alter_assembly_with_clause(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_with_clauseContext,0)


        def alter_assembly_drop_clause(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_drop_clauseContext,0)


        def alter_assembly_add_clause(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_add_clauseContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_clause" ):
                listener.enterAlter_assembly_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_clause" ):
                listener.exitAlter_assembly_clause(self)




    def alter_assembly_clause(self):

        localctx = TSqlParser.Alter_assembly_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_alter_assembly_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==378:
                self.state = 1785
                self.alter_assembly_from_clause()


            self.state = 1789
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 1788
                self.alter_assembly_with_clause()


            self.state = 1792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 1791
                self.alter_assembly_drop_clause()


            self.state = 1795
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 1794
                self.alter_assembly_add_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_from_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_assembly_from_clause_start(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_from_clause_startContext,0)


        def client_assembly_specifier(self):
            return self.getTypedRuleContext(TSqlParser.Client_assembly_specifierContext,0)


        def alter_assembly_file_bits(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_file_bitsContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_from_clause" ):
                listener.enterAlter_assembly_from_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_from_clause" ):
                listener.exitAlter_assembly_from_clause(self)




    def alter_assembly_from_clause(self):

        localctx = TSqlParser.Alter_assembly_from_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_alter_assembly_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1797
            self.alter_assembly_from_clause_start()
            self.state = 1800
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [278, 1154, 1170]:
                self.state = 1798
                self.client_assembly_specifier()
                pass
            elif token in [56]:
                self.state = 1799
                self.alter_assembly_file_bits()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_from_clause_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_from_clause_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_from_clause_start" ):
                listener.enterAlter_assembly_from_clause_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_from_clause_start" ):
                listener.exitAlter_assembly_from_clause_start(self)




    def alter_assembly_from_clause_start(self):

        localctx = TSqlParser.Alter_assembly_from_clause_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_alter_assembly_from_clause_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1802
            self.match(TSqlParser.FROM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_drop_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_assembly_drop(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_dropContext,0)


        def alter_assembly_drop_multiple_files(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_drop_multiple_filesContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_drop_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_drop_clause" ):
                listener.enterAlter_assembly_drop_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_drop_clause" ):
                listener.exitAlter_assembly_drop_clause(self)




    def alter_assembly_drop_clause(self):

        localctx = TSqlParser.Alter_assembly_drop_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_alter_assembly_drop_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1804
            self.alter_assembly_drop()
            self.state = 1805
            self.alter_assembly_drop_multiple_files()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_drop_multiple_filesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def multiple_local_files(self):
            return self.getTypedRuleContext(TSqlParser.Multiple_local_filesContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_drop_multiple_files

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_drop_multiple_files" ):
                listener.enterAlter_assembly_drop_multiple_files(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_drop_multiple_files" ):
                listener.exitAlter_assembly_drop_multiple_files(self)




    def alter_assembly_drop_multiple_files(self):

        localctx = TSqlParser.Alter_assembly_drop_multiple_filesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_alter_assembly_drop_multiple_files)
        try:
            self.state = 1809
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1807
                self.match(TSqlParser.ALL)
                pass
            elif token in [1154, 1164]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1808
                self.multiple_local_files()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_dropContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_drop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_drop" ):
                listener.enterAlter_assembly_drop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_drop" ):
                listener.exitAlter_assembly_drop(self)




    def alter_assembly_drop(self):

        localctx = TSqlParser.Alter_assembly_dropContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_alter_assembly_drop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1811
            self.match(TSqlParser.DROP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_add_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_asssembly_add_clause_start(self):
            return self.getTypedRuleContext(TSqlParser.Alter_asssembly_add_clause_startContext,0)


        def alter_assembly_client_file_clause(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_client_file_clauseContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_add_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_add_clause" ):
                listener.enterAlter_assembly_add_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_add_clause" ):
                listener.exitAlter_assembly_add_clause(self)




    def alter_assembly_add_clause(self):

        localctx = TSqlParser.Alter_assembly_add_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_alter_assembly_add_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1813
            self.alter_asssembly_add_clause_start()
            self.state = 1814
            self.alter_assembly_client_file_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_asssembly_add_clause_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_asssembly_add_clause_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_asssembly_add_clause_start" ):
                listener.enterAlter_asssembly_add_clause_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_asssembly_add_clause_start" ):
                listener.exitAlter_asssembly_add_clause_start(self)




    def alter_asssembly_add_clause_start(self):

        localctx = TSqlParser.Alter_asssembly_add_clause_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_alter_asssembly_add_clause_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1816
            self.match(TSqlParser.ADD)
            self.state = 1817
            self.match(TSqlParser.FILE)
            self.state = 1818
            self.match(TSqlParser.FROM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_client_file_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_assembly_file_name(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_file_nameContext,0)


        def alter_assembly_as(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_asContext,0)


        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_client_file_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_client_file_clause" ):
                listener.enterAlter_assembly_client_file_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_client_file_clause" ):
                listener.exitAlter_assembly_client_file_clause(self)




    def alter_assembly_client_file_clause(self):

        localctx = TSqlParser.Alter_assembly_client_file_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_alter_assembly_client_file_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1820
            self.alter_assembly_file_name()
            self.state = 1824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 1821
                self.alter_assembly_as()
                self.state = 1822
                self.id_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_file_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_file_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_file_name" ):
                listener.enterAlter_assembly_file_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_file_name" ):
                listener.exitAlter_assembly_file_name(self)




    def alter_assembly_file_name(self):

        localctx = TSqlParser.Alter_assembly_file_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_alter_assembly_file_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1826
            self.match(TSqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_file_bitsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_assembly_as(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_asContext,0)


        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_file_bits

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_file_bits" ):
                listener.enterAlter_assembly_file_bits(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_file_bits" ):
                listener.exitAlter_assembly_file_bits(self)




    def alter_assembly_file_bits(self):

        localctx = TSqlParser.Alter_assembly_file_bitsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_alter_assembly_file_bits)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1828
            self.alter_assembly_as()
            self.state = 1829
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_asContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_as

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_as" ):
                listener.enterAlter_assembly_as(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_as" ):
                listener.exitAlter_assembly_as(self)




    def alter_assembly_as(self):

        localctx = TSqlParser.Alter_assembly_asContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_alter_assembly_as)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1831
            self.match(TSqlParser.AS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_with_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_assembly_with(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_withContext,0)


        def assembly_option(self):
            return self.getTypedRuleContext(TSqlParser.Assembly_optionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_with_clause" ):
                listener.enterAlter_assembly_with_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_with_clause" ):
                listener.exitAlter_assembly_with_clause(self)




    def alter_assembly_with_clause(self):

        localctx = TSqlParser.Alter_assembly_with_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_alter_assembly_with_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1833
            self.alter_assembly_with()
            self.state = 1834
            self.assembly_option(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_withContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_with

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_with" ):
                listener.enterAlter_assembly_with(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_with" ):
                listener.exitAlter_assembly_with(self)




    def alter_assembly_with(self):

        localctx = TSqlParser.Alter_assembly_withContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_alter_assembly_with)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1836
            self.match(TSqlParser.WITH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Client_assembly_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def network_file_share(self):
            return self.getTypedRuleContext(TSqlParser.Network_file_shareContext,0)


        def local_file(self):
            return self.getTypedRuleContext(TSqlParser.Local_fileContext,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_client_assembly_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClient_assembly_specifier" ):
                listener.enterClient_assembly_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClient_assembly_specifier" ):
                listener.exitClient_assembly_specifier(self)




    def client_assembly_specifier(self):

        localctx = TSqlParser.Client_assembly_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_client_assembly_specifier)
        try:
            self.state = 1841
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [278]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1838
                self.network_file_share()
                pass
            elif token in [1154]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1839
                self.local_file()
                pass
            elif token in [1170]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1840
                self.match(TSqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assembly_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERMISSION_SET(self):
            return self.getToken(TSqlParser.PERMISSION_SET, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def SAFE(self):
            return self.getToken(TSqlParser.SAFE, 0)

        def EXTERNAL_ACCESS(self):
            return self.getToken(TSqlParser.EXTERNAL_ACCESS, 0)

        def UNSAFE(self):
            return self.getToken(TSqlParser.UNSAFE, 0)

        def VISIBILITY(self):
            return self.getToken(TSqlParser.VISIBILITY, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def UNCHECKED(self):
            return self.getToken(TSqlParser.UNCHECKED, 0)

        def DATA(self):
            return self.getToken(TSqlParser.DATA, 0)

        def assembly_option(self):
            return self.getTypedRuleContext(TSqlParser.Assembly_optionContext,0)


        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_assembly_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssembly_option" ):
                listener.enterAssembly_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssembly_option" ):
                listener.exitAssembly_option(self)



    def assembly_option(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TSqlParser.Assembly_optionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 94
        self.enterRecursionRule(localctx, 94, self.RULE_assembly_option, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1852
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [700]:
                self.state = 1844
                self.match(TSqlParser.PERMISSION_SET)
                self.state = 1845
                self.match(TSqlParser.EQUAL)
                self.state = 1846
                _la = self._input.LA(1)
                if not(_la==330 or _la==839 or _la==1026):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [1054]:
                self.state = 1847
                self.match(TSqlParser.VISIBILITY)
                self.state = 1848
                self.match(TSqlParser.EQUAL)
                self.state = 1849
                self.on_off()
                pass
            elif token in [1016]:
                self.state = 1850
                self.match(TSqlParser.UNCHECKED)
                self.state = 1851
                self.match(TSqlParser.DATA)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1858
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TSqlParser.Assembly_optionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_assembly_option)
                    self.state = 1854
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1855
                    self.match(TSqlParser.COMMA) 
                self.state = 1860
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Network_file_shareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def network_file_start(self):
            return self.getTypedRuleContext(TSqlParser.Network_file_startContext,0)


        def network_computer(self):
            return self.getTypedRuleContext(TSqlParser.Network_computerContext,0)


        def file_path(self):
            return self.getTypedRuleContext(TSqlParser.File_pathContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_network_file_share

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNetwork_file_share" ):
                listener.enterNetwork_file_share(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNetwork_file_share" ):
                listener.exitNetwork_file_share(self)




    def network_file_share(self):

        localctx = TSqlParser.Network_file_shareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_network_file_share)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1861
            self.network_file_start()
            self.state = 1862
            self.network_computer()
            self.state = 1863
            self.file_path()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Network_computerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.computer_name = None # Id_Context

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_network_computer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNetwork_computer" ):
                listener.enterNetwork_computer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNetwork_computer" ):
                listener.exitNetwork_computer(self)




    def network_computer(self):

        localctx = TSqlParser.Network_computerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_network_computer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1865
            localctx.computer_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Network_file_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_BACK_SLASH(self):
            return self.getToken(TSqlParser.DOUBLE_BACK_SLASH, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_network_file_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNetwork_file_start" ):
                listener.enterNetwork_file_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNetwork_file_start" ):
                listener.exitNetwork_file_start(self)




    def network_file_start(self):

        localctx = TSqlParser.Network_file_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_network_file_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1867
            self.match(TSqlParser.DOUBLE_BACK_SLASH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def file_directory_path_separator(self):
            return self.getTypedRuleContext(TSqlParser.File_directory_path_separatorContext,0)


        def file_path(self):
            return self.getTypedRuleContext(TSqlParser.File_pathContext,0)


        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_file_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_path" ):
                listener.enterFile_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_path" ):
                listener.exitFile_path(self)




    def file_path(self):

        localctx = TSqlParser.File_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_file_path)
        try:
            self.state = 1873
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [84]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1869
                self.file_directory_path_separator()
                self.state = 1870
                self.file_path()
                pass
            elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1872
                self.id_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_directory_path_separatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKSLASH(self):
            return self.getToken(TSqlParser.BACKSLASH, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_file_directory_path_separator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_directory_path_separator" ):
                listener.enterFile_directory_path_separator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_directory_path_separator" ):
                listener.exitFile_directory_path_separator(self)




    def file_directory_path_separator(self):

        localctx = TSqlParser.File_directory_path_separatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_file_directory_path_separator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1875
            self.match(TSqlParser.BACKSLASH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_drive(self):
            return self.getTypedRuleContext(TSqlParser.Local_driveContext,0)


        def file_path(self):
            return self.getTypedRuleContext(TSqlParser.File_pathContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_local_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_file" ):
                listener.enterLocal_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_file" ):
                listener.exitLocal_file(self)




    def local_file(self):

        localctx = TSqlParser.Local_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_local_file)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1877
            self.local_drive()
            self.state = 1878
            self.file_path()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_driveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISK_DRIVE(self):
            return self.getToken(TSqlParser.DISK_DRIVE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_local_drive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_drive" ):
                listener.enterLocal_drive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_drive" ):
                listener.exitLocal_drive(self)




    def local_drive(self):

        localctx = TSqlParser.Local_driveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_local_drive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1880
            self.match(TSqlParser.DISK_DRIVE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multiple_local_filesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiple_local_file_start(self):
            return self.getTypedRuleContext(TSqlParser.Multiple_local_file_startContext,0)


        def local_file(self):
            return self.getTypedRuleContext(TSqlParser.Local_fileContext,0)


        def SINGLE_QUOTE(self):
            return self.getToken(TSqlParser.SINGLE_QUOTE, 0)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_multiple_local_files

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiple_local_files" ):
                listener.enterMultiple_local_files(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiple_local_files" ):
                listener.exitMultiple_local_files(self)




    def multiple_local_files(self):

        localctx = TSqlParser.Multiple_local_filesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_multiple_local_files)
        try:
            self.state = 1888
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1164]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1882
                self.multiple_local_file_start()
                self.state = 1883
                self.local_file()
                self.state = 1884
                self.match(TSqlParser.SINGLE_QUOTE)
                self.state = 1885
                self.match(TSqlParser.COMMA)
                pass
            elif token in [1154]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1887
                self.local_file()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multiple_local_file_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SINGLE_QUOTE(self):
            return self.getToken(TSqlParser.SINGLE_QUOTE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_multiple_local_file_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiple_local_file_start" ):
                listener.enterMultiple_local_file_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiple_local_file_start" ):
                listener.exitMultiple_local_file_start(self)




    def multiple_local_file_start(self):

        localctx = TSqlParser.Multiple_local_file_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_multiple_local_file_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1890
            self.match(TSqlParser.SINGLE_QUOTE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_assemblyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assembly_name = None # Id_Context
            self.owner_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def ASSEMBLY(self):
            return self.getToken(TSqlParser.ASSEMBLY, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def PERMISSION_SET(self):
            return self.getToken(TSqlParser.PERMISSION_SET, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def BINARY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BINARY)
            else:
                return self.getToken(TSqlParser.BINARY, i)

        def SAFE(self):
            return self.getToken(TSqlParser.SAFE, 0)

        def EXTERNAL_ACCESS(self):
            return self.getToken(TSqlParser.EXTERNAL_ACCESS, 0)

        def UNSAFE(self):
            return self.getToken(TSqlParser.UNSAFE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_assembly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_assembly" ):
                listener.enterCreate_assembly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_assembly" ):
                listener.exitCreate_assembly(self)




    def create_assembly(self):

        localctx = TSqlParser.Create_assemblyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_create_assembly)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1892
            self.match(TSqlParser.CREATE)
            self.state = 1893
            self.match(TSqlParser.ASSEMBLY)
            self.state = 1894
            localctx.assembly_name = self.id_()
            self.state = 1897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 1895
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 1896
                localctx.owner_name = self.id_()


            self.state = 1899
            self.match(TSqlParser.FROM)
            self.state = 1904 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 1900
                    self.match(TSqlParser.COMMA)


                self.state = 1903
                _la = self._input.LA(1)
                if not(_la==1170 or _la==1171):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1906 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 1170)) & ~0x3f) == 0 and ((1 << (_la - 1170)) & 16777219) != 0)):
                    break

            self.state = 1912
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 1908
                self.match(TSqlParser.WITH)
                self.state = 1909
                self.match(TSqlParser.PERMISSION_SET)
                self.state = 1910
                self.match(TSqlParser.EQUAL)
                self.state = 1911
                _la = self._input.LA(1)
                if not(_la==330 or _la==839 or _la==1026):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_assemblyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assembly_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def ASSEMBLY(self):
            return self.getToken(TSqlParser.ASSEMBLY, 0)

        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def NO(self):
            return self.getToken(TSqlParser.NO, 0)

        def DEPENDENTS(self):
            return self.getToken(TSqlParser.DEPENDENTS, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_assembly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_assembly" ):
                listener.enterDrop_assembly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_assembly" ):
                listener.exitDrop_assembly(self)




    def drop_assembly(self):

        localctx = TSqlParser.Drop_assemblyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_drop_assembly)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1914
            self.match(TSqlParser.DROP)
            self.state = 1915
            self.match(TSqlParser.ASSEMBLY)
            self.state = 1918
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==431:
                self.state = 1916
                self.match(TSqlParser.IF)
                self.state = 1917
                self.match(TSqlParser.EXISTS)


            self.state = 1924 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1921
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 1920
                        self.match(TSqlParser.COMMA)


                    self.state = 1923
                    localctx.assembly_name = self.id_()

                else:
                    raise NoViableAltException(self)
                self.state = 1926 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

            self.state = 1931
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 1928
                self.match(TSqlParser.WITH)
                self.state = 1929
                self.match(TSqlParser.NO)
                self.state = 1930
                self.match(TSqlParser.DEPENDENTS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_asymmetric_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Asym_Key_Name = None # Id_Context

        def alter_asymmetric_key_start(self):
            return self.getTypedRuleContext(TSqlParser.Alter_asymmetric_key_startContext,0)


        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def asymmetric_key_option(self):
            return self.getTypedRuleContext(TSqlParser.Asymmetric_key_optionContext,0)


        def REMOVE(self):
            return self.getToken(TSqlParser.REMOVE, 0)

        def PRIVATE(self):
            return self.getToken(TSqlParser.PRIVATE, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_asymmetric_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_asymmetric_key" ):
                listener.enterAlter_asymmetric_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_asymmetric_key" ):
                listener.exitAlter_asymmetric_key(self)




    def alter_asymmetric_key(self):

        localctx = TSqlParser.Alter_asymmetric_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_alter_asymmetric_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1933
            self.alter_asymmetric_key_start()
            self.state = 1934
            localctx.Asym_Key_Name = self.id_()
            self.state = 1939
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1063]:
                self.state = 1935
                self.asymmetric_key_option()
                pass
            elif token in [781]:
                self.state = 1936
                self.match(TSqlParser.REMOVE)
                self.state = 1937
                self.match(TSqlParser.PRIVATE)
                self.state = 1938
                self.match(TSqlParser.KEY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_asymmetric_key_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_asymmetric_key_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_asymmetric_key_start" ):
                listener.enterAlter_asymmetric_key_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_asymmetric_key_start" ):
                listener.exitAlter_asymmetric_key_start(self)




    def alter_asymmetric_key_start(self):

        localctx = TSqlParser.Alter_asymmetric_key_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_alter_asymmetric_key_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1941
            self.match(TSqlParser.ALTER)
            self.state = 1942
            self.match(TSqlParser.ASYMMETRIC)
            self.state = 1943
            self.match(TSqlParser.KEY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Asymmetric_key_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def asymmetric_key_option_start(self):
            return self.getTypedRuleContext(TSqlParser.Asymmetric_key_option_startContext,0)


        def asymmetric_key_password_change_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Asymmetric_key_password_change_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Asymmetric_key_password_change_optionContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_asymmetric_key_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsymmetric_key_option" ):
                listener.enterAsymmetric_key_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsymmetric_key_option" ):
                listener.exitAsymmetric_key_option(self)




    def asymmetric_key_option(self):

        localctx = TSqlParser.Asymmetric_key_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_asymmetric_key_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1945
            self.asymmetric_key_option_start()
            self.state = 1946
            self.asymmetric_key_password_change_option()
            self.state = 1949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1194:
                self.state = 1947
                self.match(TSqlParser.COMMA)
                self.state = 1948
                self.asymmetric_key_password_change_option()


            self.state = 1951
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Asymmetric_key_option_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def PRIVATE(self):
            return self.getToken(TSqlParser.PRIVATE, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_asymmetric_key_option_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsymmetric_key_option_start" ):
                listener.enterAsymmetric_key_option_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsymmetric_key_option_start" ):
                listener.exitAsymmetric_key_option_start(self)




    def asymmetric_key_option_start(self):

        localctx = TSqlParser.Asymmetric_key_option_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_asymmetric_key_option_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1953
            self.match(TSqlParser.WITH)
            self.state = 1954
            self.match(TSqlParser.PRIVATE)
            self.state = 1955
            self.match(TSqlParser.KEY)
            self.state = 1956
            self.match(TSqlParser.LR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Asymmetric_key_password_change_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECRYPTION(self):
            return self.getToken(TSqlParser.DECRYPTION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_asymmetric_key_password_change_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsymmetric_key_password_change_option" ):
                listener.enterAsymmetric_key_password_change_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsymmetric_key_password_change_option" ):
                listener.exitAsymmetric_key_password_change_option(self)




    def asymmetric_key_password_change_option(self):

        localctx = TSqlParser.Asymmetric_key_password_change_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_asymmetric_key_password_change_option)
        try:
            self.state = 1968
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [242]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1958
                self.match(TSqlParser.DECRYPTION)
                self.state = 1959
                self.match(TSqlParser.BY)
                self.state = 1960
                self.match(TSqlParser.PASSWORD)
                self.state = 1961
                self.match(TSqlParser.EQUAL)
                self.state = 1962
                self.match(TSqlParser.STRING)
                pass
            elif token in [295]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1963
                self.match(TSqlParser.ENCRYPTION)
                self.state = 1964
                self.match(TSqlParser.BY)
                self.state = 1965
                self.match(TSqlParser.PASSWORD)
                self.state = 1966
                self.match(TSqlParser.EQUAL)
                self.state = 1967
                self.match(TSqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_asymmetric_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Asym_Key_Nam = None # Id_Context
            self.database_principal_name = None # Id_Context
            self.Assembly_Name = None # Id_Context
            self.Provider_Name = None # Id_Context
            self.provider_key_name = None # Token
            self.asymmetric_key_password = None # Token

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def EXECUTABLE_FILE(self):
            return self.getToken(TSqlParser.EXECUTABLE_FILE, 0)

        def ASSEMBLY(self):
            return self.getToken(TSqlParser.ASSEMBLY, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def ALGORITHM(self):
            return self.getToken(TSqlParser.ALGORITHM, 0)

        def PROVIDER_KEY_NAME(self):
            return self.getToken(TSqlParser.PROVIDER_KEY_NAME, 0)

        def CREATION_DISPOSITION(self):
            return self.getToken(TSqlParser.CREATION_DISPOSITION, 0)

        def RSA_4096(self):
            return self.getToken(TSqlParser.RSA_4096, 0)

        def RSA_3072(self):
            return self.getToken(TSqlParser.RSA_3072, 0)

        def RSA_2048(self):
            return self.getToken(TSqlParser.RSA_2048, 0)

        def RSA_1024(self):
            return self.getToken(TSqlParser.RSA_1024, 0)

        def RSA_512(self):
            return self.getToken(TSqlParser.RSA_512, 0)

        def CREATE_NEW(self):
            return self.getToken(TSqlParser.CREATE_NEW, 0)

        def OPEN_EXISTING(self):
            return self.getToken(TSqlParser.OPEN_EXISTING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_asymmetric_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_asymmetric_key" ):
                listener.enterCreate_asymmetric_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_asymmetric_key" ):
                listener.exitCreate_asymmetric_key(self)




    def create_asymmetric_key(self):

        localctx = TSqlParser.Create_asymmetric_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_create_asymmetric_key)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1970
            self.match(TSqlParser.CREATE)
            self.state = 1971
            self.match(TSqlParser.ASYMMETRIC)
            self.state = 1972
            self.match(TSqlParser.KEY)
            self.state = 1973
            localctx.Asym_Key_Nam = self.id_()
            self.state = 1976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 1974
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 1975
                localctx.database_principal_name = self.id_()


            self.state = 1991
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==378:
                self.state = 1978
                self.match(TSqlParser.FROM)
                self.state = 1989
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [341]:
                    self.state = 1979
                    self.match(TSqlParser.FILE)
                    self.state = 1980
                    self.match(TSqlParser.EQUAL)
                    self.state = 1981
                    self.match(TSqlParser.STRING)
                    pass
                elif token in [317]:
                    self.state = 1982
                    self.match(TSqlParser.EXECUTABLE_FILE)
                    self.state = 1983
                    self.match(TSqlParser.EQUAL)
                    self.state = 1984
                    self.match(TSqlParser.STRING)
                    pass
                elif token in [59]:
                    self.state = 1985
                    self.match(TSqlParser.ASSEMBLY)
                    self.state = 1986
                    localctx.Assembly_Name = self.id_()
                    pass
                elif token in [733]:
                    self.state = 1987
                    self.match(TSqlParser.PROVIDER)
                    self.state = 1988
                    localctx.Provider_Name = self.id_()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 2005
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 1993
                self.match(TSqlParser.WITH)
                self.state = 2003
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [21]:
                    self.state = 1994
                    self.match(TSqlParser.ALGORITHM)
                    self.state = 1995
                    self.match(TSqlParser.EQUAL)
                    self.state = 1996
                    _la = self._input.LA(1)
                    if not(((((_la - 832)) & ~0x3f) == 0 and ((1 << (_la - 832)) & 31) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [734]:
                    self.state = 1997
                    self.match(TSqlParser.PROVIDER_KEY_NAME)
                    self.state = 1998
                    self.match(TSqlParser.EQUAL)
                    self.state = 1999
                    localctx.provider_key_name = self.match(TSqlParser.STRING)
                    pass
                elif token in [199]:
                    self.state = 2000
                    self.match(TSqlParser.CREATION_DISPOSITION)
                    self.state = 2001
                    self.match(TSqlParser.EQUAL)
                    self.state = 2002
                    _la = self._input.LA(1)
                    if not(_la==198 or _la==659):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 2012
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 2007
                self.match(TSqlParser.ENCRYPTION)
                self.state = 2008
                self.match(TSqlParser.BY)
                self.state = 2009
                self.match(TSqlParser.PASSWORD)
                self.state = 2010
                self.match(TSqlParser.EQUAL)
                self.state = 2011
                localctx.asymmetric_key_password = self.match(TSqlParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_asymmetric_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def KEY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.KEY)
            else:
                return self.getToken(TSqlParser.KEY, i)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def REMOVE(self):
            return self.getToken(TSqlParser.REMOVE, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_asymmetric_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_asymmetric_key" ):
                listener.enterDrop_asymmetric_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_asymmetric_key" ):
                listener.exitDrop_asymmetric_key(self)




    def drop_asymmetric_key(self):

        localctx = TSqlParser.Drop_asymmetric_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_drop_asymmetric_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2014
            self.match(TSqlParser.DROP)
            self.state = 2015
            self.match(TSqlParser.ASYMMETRIC)
            self.state = 2016
            self.match(TSqlParser.KEY)
            self.state = 2017
            localctx.key_name = self.id_()
            self.state = 2021
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 2018
                self.match(TSqlParser.REMOVE)
                self.state = 2019
                self.match(TSqlParser.PROVIDER)
                self.state = 2020
                self.match(TSqlParser.KEY)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_authorizationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.entity = None # Entity_nameContext

        def alter_authorization_start(self):
            return self.getTypedRuleContext(TSqlParser.Alter_authorization_startContext,0)


        def entity_to(self):
            return self.getTypedRuleContext(TSqlParser.Entity_toContext,0)


        def authorization_grantee(self):
            return self.getTypedRuleContext(TSqlParser.Authorization_granteeContext,0)


        def entity_name(self):
            return self.getTypedRuleContext(TSqlParser.Entity_nameContext,0)


        def class_type(self):
            return self.getTypedRuleContext(TSqlParser.Class_typeContext,0)


        def colon_colon(self):
            return self.getTypedRuleContext(TSqlParser.Colon_colonContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_authorization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_authorization" ):
                listener.enterAlter_authorization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_authorization" ):
                listener.exitAlter_authorization(self)




    def alter_authorization(self):

        localctx = TSqlParser.Alter_authorizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_alter_authorization)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2023
            self.alter_authorization_start()
            self.state = 2027
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 2024
                self.class_type()
                self.state = 2025
                self.colon_colon()


            self.state = 2029
            localctx.entity = self.entity_name()
            self.state = 2030
            self.entity_to()
            self.state = 2031
            self.authorization_grantee()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Authorization_granteeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.principal_name = None # Id_Context

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def OWNER(self):
            return self.getToken(TSqlParser.OWNER, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_authorization_grantee

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthorization_grantee" ):
                listener.enterAuthorization_grantee(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthorization_grantee" ):
                listener.exitAuthorization_grantee(self)




    def authorization_grantee(self):

        localctx = TSqlParser.Authorization_granteeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_authorization_grantee)
        try:
            self.state = 2036
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2033
                localctx.principal_name = self.id_()
                pass
            elif token in [844]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2034
                self.match(TSqlParser.SCHEMA)
                self.state = 2035
                self.match(TSqlParser.OWNER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Entity_toContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_entity_to

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntity_to" ):
                listener.enterEntity_to(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntity_to" ):
                listener.exitEntity_to(self)




    def entity_to(self):

        localctx = TSqlParser.Entity_toContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_entity_to)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2038
            self.match(TSqlParser.TO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Colon_colonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_COLON(self):
            return self.getToken(TSqlParser.DOUBLE_COLON, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_colon_colon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColon_colon" ):
                listener.enterColon_colon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColon_colon" ):
                listener.exitColon_colon(self)




    def colon_colon(self):

        localctx = TSqlParser.Colon_colonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_colon_colon)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2040
            self.match(TSqlParser.DOUBLE_COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_authorization_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_authorization_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_authorization_start" ):
                listener.enterAlter_authorization_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_authorization_start" ):
                listener.exitAlter_authorization_start(self)




    def alter_authorization_start(self):

        localctx = TSqlParser.Alter_authorization_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_alter_authorization_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2042
            self.match(TSqlParser.ALTER)
            self.state = 2043
            self.match(TSqlParser.AUTHORIZATION)
            self.state = 2044
            self.match(TSqlParser.ON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_authorization_for_sql_databaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.entity = None # Entity_nameContext

        def alter_authorization_start(self):
            return self.getTypedRuleContext(TSqlParser.Alter_authorization_startContext,0)


        def entity_to(self):
            return self.getTypedRuleContext(TSqlParser.Entity_toContext,0)


        def authorization_grantee(self):
            return self.getTypedRuleContext(TSqlParser.Authorization_granteeContext,0)


        def entity_name(self):
            return self.getTypedRuleContext(TSqlParser.Entity_nameContext,0)


        def class_type_for_sql_database(self):
            return self.getTypedRuleContext(TSqlParser.Class_type_for_sql_databaseContext,0)


        def colon_colon(self):
            return self.getTypedRuleContext(TSqlParser.Colon_colonContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_authorization_for_sql_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_authorization_for_sql_database" ):
                listener.enterAlter_authorization_for_sql_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_authorization_for_sql_database" ):
                listener.exitAlter_authorization_for_sql_database(self)




    def alter_authorization_for_sql_database(self):

        localctx = TSqlParser.Alter_authorization_for_sql_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_alter_authorization_for_sql_database)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2046
            self.alter_authorization_start()
            self.state = 2050
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 2047
                self.class_type_for_sql_database()
                self.state = 2048
                self.colon_colon()


            self.state = 2052
            localctx.entity = self.entity_name()
            self.state = 2053
            self.entity_to()
            self.state = 2054
            self.authorization_grantee()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_authorization_for_azure_dwContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.entity = None # Entity_name_for_azure_dwContext

        def alter_authorization_start(self):
            return self.getTypedRuleContext(TSqlParser.Alter_authorization_startContext,0)


        def entity_to(self):
            return self.getTypedRuleContext(TSqlParser.Entity_toContext,0)


        def authorization_grantee(self):
            return self.getTypedRuleContext(TSqlParser.Authorization_granteeContext,0)


        def entity_name_for_azure_dw(self):
            return self.getTypedRuleContext(TSqlParser.Entity_name_for_azure_dwContext,0)


        def class_type_for_azure_dw(self):
            return self.getTypedRuleContext(TSqlParser.Class_type_for_azure_dwContext,0)


        def colon_colon(self):
            return self.getTypedRuleContext(TSqlParser.Colon_colonContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_authorization_for_azure_dw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_authorization_for_azure_dw" ):
                listener.enterAlter_authorization_for_azure_dw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_authorization_for_azure_dw" ):
                listener.exitAlter_authorization_for_azure_dw(self)




    def alter_authorization_for_azure_dw(self):

        localctx = TSqlParser.Alter_authorization_for_azure_dwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_alter_authorization_for_azure_dw)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2056
            self.alter_authorization_start()
            self.state = 2060
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 2057
                self.class_type_for_azure_dw()
                self.state = 2058
                self.colon_colon()


            self.state = 2062
            localctx.entity = self.entity_name_for_azure_dw()
            self.state = 2063
            self.entity_to()
            self.state = 2064
            self.authorization_grantee()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_authorization_for_parallel_dwContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.entity = None # Entity_name_for_parallel_dwContext

        def alter_authorization_start(self):
            return self.getTypedRuleContext(TSqlParser.Alter_authorization_startContext,0)


        def entity_to(self):
            return self.getTypedRuleContext(TSqlParser.Entity_toContext,0)


        def authorization_grantee(self):
            return self.getTypedRuleContext(TSqlParser.Authorization_granteeContext,0)


        def entity_name_for_parallel_dw(self):
            return self.getTypedRuleContext(TSqlParser.Entity_name_for_parallel_dwContext,0)


        def class_type_for_parallel_dw(self):
            return self.getTypedRuleContext(TSqlParser.Class_type_for_parallel_dwContext,0)


        def colon_colon(self):
            return self.getTypedRuleContext(TSqlParser.Colon_colonContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_authorization_for_parallel_dw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_authorization_for_parallel_dw" ):
                listener.enterAlter_authorization_for_parallel_dw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_authorization_for_parallel_dw" ):
                listener.exitAlter_authorization_for_parallel_dw(self)




    def alter_authorization_for_parallel_dw(self):

        localctx = TSqlParser.Alter_authorization_for_parallel_dwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_alter_authorization_for_parallel_dw)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2066
            self.alter_authorization_start()
            self.state = 2070
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 2067
                self.class_type_for_parallel_dw()
                self.state = 2068
                self.colon_colon()


            self.state = 2072
            localctx.entity = self.entity_name_for_parallel_dw()
            self.state = 2073
            self.entity_to()
            self.state = 2074
            self.authorization_grantee()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(TSqlParser.OBJECT, 0)

        def ASSEMBLY(self):
            return self.getToken(TSqlParser.ASSEMBLY, 0)

        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def AVAILABILITY(self):
            return self.getToken(TSqlParser.AVAILABILITY, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def CONTRACT(self):
            return self.getToken(TSqlParser.CONTRACT, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def ENDPOINT(self):
            return self.getToken(TSqlParser.ENDPOINT, 0)

        def FULLTEXT(self):
            return self.getToken(TSqlParser.FULLTEXT, 0)

        def CATALOG(self):
            return self.getToken(TSqlParser.CATALOG, 0)

        def STOPLIST(self):
            return self.getToken(TSqlParser.STOPLIST, 0)

        def MESSAGE(self):
            return self.getToken(TSqlParser.MESSAGE, 0)

        def REMOTE(self):
            return self.getToken(TSqlParser.REMOTE, 0)

        def SERVICE(self):
            return self.getToken(TSqlParser.SERVICE, 0)

        def BINDING(self):
            return self.getToken(TSqlParser.BINDING, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def ROUTE(self):
            return self.getToken(TSqlParser.ROUTE, 0)

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def SEARCH(self):
            return self.getToken(TSqlParser.SEARCH, 0)

        def PROPERTY(self):
            return self.getToken(TSqlParser.PROPERTY, 0)

        def LIST(self):
            return self.getToken(TSqlParser.LIST, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def XML(self):
            return self.getToken(TSqlParser.XML, 0)

        def COLLECTION(self):
            return self.getToken(TSqlParser.COLLECTION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_class_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_type" ):
                listener.enterClass_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_type" ):
                listener.exitClass_type(self)




    def class_type(self):

        localctx = TSqlParser.Class_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_class_type)
        try:
            self.state = 2110
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2076
                self.match(TSqlParser.OBJECT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2077
                self.match(TSqlParser.ASSEMBLY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2078
                self.match(TSqlParser.ASYMMETRIC)
                self.state = 2079
                self.match(TSqlParser.KEY)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2080
                self.match(TSqlParser.AVAILABILITY)
                self.state = 2081
                self.match(TSqlParser.GROUP)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2082
                self.match(TSqlParser.CERTIFICATE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2083
                self.match(TSqlParser.CONTRACT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2084
                self.match(TSqlParser.TYPE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2085
                self.match(TSqlParser.DATABASE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2086
                self.match(TSqlParser.ENDPOINT)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2087
                self.match(TSqlParser.FULLTEXT)
                self.state = 2088
                self.match(TSqlParser.CATALOG)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2089
                self.match(TSqlParser.FULLTEXT)
                self.state = 2090
                self.match(TSqlParser.STOPLIST)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2091
                self.match(TSqlParser.MESSAGE)
                self.state = 2092
                self.match(TSqlParser.TYPE)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2093
                self.match(TSqlParser.REMOTE)
                self.state = 2094
                self.match(TSqlParser.SERVICE)
                self.state = 2095
                self.match(TSqlParser.BINDING)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2096
                self.match(TSqlParser.ROLE)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2097
                self.match(TSqlParser.ROUTE)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2098
                self.match(TSqlParser.SCHEMA)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2099
                self.match(TSqlParser.SEARCH)
                self.state = 2100
                self.match(TSqlParser.PROPERTY)
                self.state = 2101
                self.match(TSqlParser.LIST)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2102
                self.match(TSqlParser.SERVER)
                self.state = 2103
                self.match(TSqlParser.ROLE)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2104
                self.match(TSqlParser.SERVICE)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2105
                self.match(TSqlParser.SYMMETRIC)
                self.state = 2106
                self.match(TSqlParser.KEY)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2107
                self.match(TSqlParser.XML)
                self.state = 2108
                self.match(TSqlParser.SCHEMA)
                self.state = 2109
                self.match(TSqlParser.COLLECTION)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_type_for_sql_databaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(TSqlParser.OBJECT, 0)

        def ASSEMBLY(self):
            return self.getToken(TSqlParser.ASSEMBLY, 0)

        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def FULLTEXT(self):
            return self.getToken(TSqlParser.FULLTEXT, 0)

        def CATALOG(self):
            return self.getToken(TSqlParser.CATALOG, 0)

        def STOPLIST(self):
            return self.getToken(TSqlParser.STOPLIST, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def SEARCH(self):
            return self.getToken(TSqlParser.SEARCH, 0)

        def PROPERTY(self):
            return self.getToken(TSqlParser.PROPERTY, 0)

        def LIST(self):
            return self.getToken(TSqlParser.LIST, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def XML(self):
            return self.getToken(TSqlParser.XML, 0)

        def COLLECTION(self):
            return self.getToken(TSqlParser.COLLECTION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_class_type_for_sql_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_type_for_sql_database" ):
                listener.enterClass_type_for_sql_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_type_for_sql_database" ):
                listener.exitClass_type_for_sql_database(self)




    def class_type_for_sql_database(self):

        localctx = TSqlParser.Class_type_for_sql_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_class_type_for_sql_database)
        try:
            self.state = 2133
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2112
                self.match(TSqlParser.OBJECT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2113
                self.match(TSqlParser.ASSEMBLY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2114
                self.match(TSqlParser.ASYMMETRIC)
                self.state = 2115
                self.match(TSqlParser.KEY)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2116
                self.match(TSqlParser.CERTIFICATE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2117
                self.match(TSqlParser.TYPE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2118
                self.match(TSqlParser.DATABASE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2119
                self.match(TSqlParser.FULLTEXT)
                self.state = 2120
                self.match(TSqlParser.CATALOG)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2121
                self.match(TSqlParser.FULLTEXT)
                self.state = 2122
                self.match(TSqlParser.STOPLIST)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2123
                self.match(TSqlParser.ROLE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2124
                self.match(TSqlParser.SCHEMA)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2125
                self.match(TSqlParser.SEARCH)
                self.state = 2126
                self.match(TSqlParser.PROPERTY)
                self.state = 2127
                self.match(TSqlParser.LIST)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2128
                self.match(TSqlParser.SYMMETRIC)
                self.state = 2129
                self.match(TSqlParser.KEY)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2130
                self.match(TSqlParser.XML)
                self.state = 2131
                self.match(TSqlParser.SCHEMA)
                self.state = 2132
                self.match(TSqlParser.COLLECTION)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_type_for_azure_dwContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def OBJECT(self):
            return self.getToken(TSqlParser.OBJECT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_class_type_for_azure_dw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_type_for_azure_dw" ):
                listener.enterClass_type_for_azure_dw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_type_for_azure_dw" ):
                listener.exitClass_type_for_azure_dw(self)




    def class_type_for_azure_dw(self):

        localctx = TSqlParser.Class_type_for_azure_dwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_class_type_for_azure_dw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2135
            _la = self._input.LA(1)
            if not(_la==635 or _la==844):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_type_for_parallel_dwContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def OBJECT(self):
            return self.getToken(TSqlParser.OBJECT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_class_type_for_parallel_dw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_type_for_parallel_dw" ):
                listener.enterClass_type_for_parallel_dw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_type_for_parallel_dw" ):
                listener.exitClass_type_for_parallel_dw(self)




    def class_type_for_parallel_dw(self):

        localctx = TSqlParser.Class_type_for_parallel_dwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_class_type_for_parallel_dw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2137
            _la = self._input.LA(1)
            if not(_la==217 or _la==635 or _la==844):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_type_for_grantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def APPLICATION(self):
            return self.getToken(TSqlParser.APPLICATION, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def ASSEMBLY(self):
            return self.getToken(TSqlParser.ASSEMBLY, 0)

        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def AUDIT(self):
            return self.getToken(TSqlParser.AUDIT, 0)

        def AVAILABILITY(self):
            return self.getToken(TSqlParser.AVAILABILITY, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def BROKER(self):
            return self.getToken(TSqlParser.BROKER, 0)

        def PRIORITY(self):
            return self.getToken(TSqlParser.PRIORITY, 0)

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def COLUMN(self):
            return self.getToken(TSqlParser.COLUMN, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def CONTRACT(self):
            return self.getToken(TSqlParser.CONTRACT, 0)

        def CREDENTIAL(self):
            return self.getToken(TSqlParser.CREDENTIAL, 0)

        def CRYPTOGRAPHIC(self):
            return self.getToken(TSqlParser.CRYPTOGRAPHIC, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def SPECIFICATION(self):
            return self.getToken(TSqlParser.SPECIFICATION, 0)

        def EVENT(self):
            return self.getToken(TSqlParser.EVENT, 0)

        def SESSION(self):
            return self.getToken(TSqlParser.SESSION, 0)

        def SCOPED(self):
            return self.getToken(TSqlParser.SCOPED, 0)

        def CONFIGURATION(self):
            return self.getToken(TSqlParser.CONFIGURATION, 0)

        def RESOURCE(self):
            return self.getToken(TSqlParser.RESOURCE, 0)

        def GOVERNOR(self):
            return self.getToken(TSqlParser.GOVERNOR, 0)

        def ENDPOINT(self):
            return self.getToken(TSqlParser.ENDPOINT, 0)

        def NOTIFICATION(self):
            return self.getToken(TSqlParser.NOTIFICATION, 0)

        def OBJECT(self):
            return self.getToken(TSqlParser.OBJECT, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def DATA(self):
            return self.getToken(TSqlParser.DATA, 0)

        def SOURCE(self):
            return self.getToken(TSqlParser.SOURCE, 0)

        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def FORMAT(self):
            return self.getToken(TSqlParser.FORMAT, 0)

        def LIBRARY(self):
            return self.getToken(TSqlParser.LIBRARY, 0)

        def POOL(self):
            return self.getToken(TSqlParser.POOL, 0)

        def TABLE(self):
            return self.getToken(TSqlParser.TABLE, 0)

        def CATALOG(self):
            return self.getToken(TSqlParser.CATALOG, 0)

        def STOPLIST(self):
            return self.getToken(TSqlParser.STOPLIST, 0)

        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def MESSAGE(self):
            return self.getToken(TSqlParser.MESSAGE, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def PARTITION(self):
            return self.getToken(TSqlParser.PARTITION, 0)

        def FUNCTION(self):
            return self.getToken(TSqlParser.FUNCTION, 0)

        def SCHEME(self):
            return self.getToken(TSqlParser.SCHEME, 0)

        def REMOTE(self):
            return self.getToken(TSqlParser.REMOTE, 0)

        def SERVICE(self):
            return self.getToken(TSqlParser.SERVICE, 0)

        def BINDING(self):
            return self.getToken(TSqlParser.BINDING, 0)

        def ROUTE(self):
            return self.getToken(TSqlParser.ROUTE, 0)

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def SEARCH(self):
            return self.getToken(TSqlParser.SEARCH, 0)

        def PROPERTY(self):
            return self.getToken(TSqlParser.PROPERTY, 0)

        def LIST(self):
            return self.getToken(TSqlParser.LIST, 0)

        def SQL(self):
            return self.getToken(TSqlParser.SQL, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def TRIGGER(self):
            return self.getToken(TSqlParser.TRIGGER, 0)

        def USER(self):
            return self.getToken(TSqlParser.USER, 0)

        def XML(self):
            return self.getToken(TSqlParser.XML, 0)

        def COLLECTION(self):
            return self.getToken(TSqlParser.COLLECTION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_class_type_for_grant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_type_for_grant" ):
                listener.enterClass_type_for_grant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_type_for_grant" ):
                listener.exitClass_type_for_grant(self)




    def class_type_for_grant(self):

        localctx = TSqlParser.Class_type_for_grantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_class_type_for_grant)
        self._la = 0 # Token type
        try:
            self.state = 2230
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2139
                self.match(TSqlParser.APPLICATION)
                self.state = 2140
                self.match(TSqlParser.ROLE)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2141
                self.match(TSqlParser.ASSEMBLY)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2142
                self.match(TSqlParser.ASYMMETRIC)
                self.state = 2143
                self.match(TSqlParser.KEY)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2144
                self.match(TSqlParser.AUDIT)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2145
                self.match(TSqlParser.AVAILABILITY)
                self.state = 2146
                self.match(TSqlParser.GROUP)
                pass
            elif token in [103]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2147
                self.match(TSqlParser.BROKER)
                self.state = 2148
                self.match(TSqlParser.PRIORITY)
                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2149
                self.match(TSqlParser.CERTIFICATE)
                pass
            elif token in [153]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2150
                self.match(TSqlParser.COLUMN)
                self.state = 2151
                _la = self._input.LA(1)
                if not(_la==295 or _la==534):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2152
                self.match(TSqlParser.KEY)
                pass
            elif token in [186]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2153
                self.match(TSqlParser.CONTRACT)
                pass
            elif token in [200]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2154
                self.match(TSqlParser.CREDENTIAL)
                pass
            elif token in [202]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2155
                self.match(TSqlParser.CRYPTOGRAPHIC)
                self.state = 2156
                self.match(TSqlParser.PROVIDER)
                pass
            elif token in [217]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2157
                self.match(TSqlParser.DATABASE)
                self.state = 2171
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [64]:
                    self.state = 2158
                    self.match(TSqlParser.AUDIT)
                    self.state = 2159
                    self.match(TSqlParser.SPECIFICATION)
                    pass
                elif token in [295]:
                    self.state = 2160
                    self.match(TSqlParser.ENCRYPTION)
                    self.state = 2161
                    self.match(TSqlParser.KEY)
                    pass
                elif token in [311]:
                    self.state = 2162
                    self.match(TSqlParser.EVENT)
                    self.state = 2163
                    self.match(TSqlParser.SESSION)
                    pass
                elif token in [849]:
                    self.state = 2164
                    self.match(TSqlParser.SCOPED)
                    self.state = 2169
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [173]:
                        self.state = 2165
                        self.match(TSqlParser.CONFIGURATION)
                        pass
                    elif token in [200]:
                        self.state = 2166
                        self.match(TSqlParser.CREDENTIAL)
                        pass
                    elif token in [800]:
                        self.state = 2167
                        self.match(TSqlParser.RESOURCE)
                        self.state = 2168
                        self.match(TSqlParser.GOVERNOR)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [1197]:
                    pass
                else:
                    pass
                pass
            elif token in [298]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2173
                self.match(TSqlParser.ENDPOINT)
                pass
            elif token in [311]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2174
                self.match(TSqlParser.EVENT)
                self.state = 2175
                self.match(TSqlParser.SESSION)
                pass
            elif token in [615]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2176
                self.match(TSqlParser.NOTIFICATION)
                self.state = 2177
                _la = self._input.LA(1)
                if not(_la==217 or _la==635 or _la==876):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [329]:
                self.enterOuterAlt(localctx, 16)
                self.state = 2178
                self.match(TSqlParser.EXTERNAL)
                self.state = 2189
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [216]:
                    self.state = 2179
                    self.match(TSqlParser.DATA)
                    self.state = 2180
                    self.match(TSqlParser.SOURCE)
                    pass
                elif token in [341]:
                    self.state = 2181
                    self.match(TSqlParser.FILE)
                    self.state = 2182
                    self.match(TSqlParser.FORMAT)
                    pass
                elif token in [505]:
                    self.state = 2183
                    self.match(TSqlParser.LIBRARY)
                    pass
                elif token in [800]:
                    self.state = 2184
                    self.match(TSqlParser.RESOURCE)
                    self.state = 2185
                    self.match(TSqlParser.POOL)
                    pass
                elif token in [966]:
                    self.state = 2186
                    self.match(TSqlParser.TABLE)
                    pass
                elif token in [118]:
                    self.state = 2187
                    self.match(TSqlParser.CATALOG)
                    pass
                elif token in [942]:
                    self.state = 2188
                    self.match(TSqlParser.STOPLIST)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [524]:
                self.enterOuterAlt(localctx, 17)
                self.state = 2191
                self.match(TSqlParser.LOGIN)
                pass
            elif token in [534]:
                self.enterOuterAlt(localctx, 18)
                self.state = 2192
                self.match(TSqlParser.MASTER)
                self.state = 2193
                self.match(TSqlParser.KEY)
                pass
            elif token in [565]:
                self.enterOuterAlt(localctx, 19)
                self.state = 2194
                self.match(TSqlParser.MESSAGE)
                self.state = 2195
                self.match(TSqlParser.TYPE)
                pass
            elif token in [635]:
                self.enterOuterAlt(localctx, 20)
                self.state = 2196
                self.match(TSqlParser.OBJECT)
                pass
            elif token in [687]:
                self.enterOuterAlt(localctx, 21)
                self.state = 2197
                self.match(TSqlParser.PARTITION)
                self.state = 2198
                _la = self._input.LA(1)
                if not(_la==384 or _la==848):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [778]:
                self.enterOuterAlt(localctx, 22)
                self.state = 2199
                self.match(TSqlParser.REMOTE)
                self.state = 2200
                self.match(TSqlParser.SERVICE)
                self.state = 2201
                self.match(TSqlParser.BINDING)
                pass
            elif token in [800]:
                self.enterOuterAlt(localctx, 23)
                self.state = 2202
                self.match(TSqlParser.RESOURCE)
                self.state = 2203
                self.match(TSqlParser.GOVERNOR)
                pass
            elif token in [819]:
                self.enterOuterAlt(localctx, 24)
                self.state = 2204
                self.match(TSqlParser.ROLE)
                pass
            elif token in [823]:
                self.enterOuterAlt(localctx, 25)
                self.state = 2205
                self.match(TSqlParser.ROUTE)
                pass
            elif token in [844]:
                self.enterOuterAlt(localctx, 26)
                self.state = 2206
                self.match(TSqlParser.SCHEMA)
                pass
            elif token in [854]:
                self.enterOuterAlt(localctx, 27)
                self.state = 2207
                self.match(TSqlParser.SEARCH)
                self.state = 2208
                self.match(TSqlParser.PROPERTY)
                self.state = 2209
                self.match(TSqlParser.LIST)
                pass
            elif token in [876]:
                self.enterOuterAlt(localctx, 28)
                self.state = 2210
                self.match(TSqlParser.SERVER)
                self.state = 2216
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [64]:
                    self.state = 2211
                    self.match(TSqlParser.AUDIT)
                    self.state = 2213
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==917:
                        self.state = 2212
                        self.match(TSqlParser.SPECIFICATION)


                    pass
                elif token in [819]:
                    self.state = 2215
                    self.match(TSqlParser.ROLE)
                    pass
                elif token in [1197]:
                    pass
                else:
                    pass
                pass
            elif token in [878]:
                self.enterOuterAlt(localctx, 29)
                self.state = 2218
                self.match(TSqlParser.SERVICE)
                pass
            elif token in [919]:
                self.enterOuterAlt(localctx, 30)
                self.state = 2219
                self.match(TSqlParser.SQL)
                self.state = 2220
                self.match(TSqlParser.LOGIN)
                pass
            elif token in [961]:
                self.enterOuterAlt(localctx, 31)
                self.state = 2221
                self.match(TSqlParser.SYMMETRIC)
                self.state = 2222
                self.match(TSqlParser.KEY)
                pass
            elif token in [999]:
                self.enterOuterAlt(localctx, 32)
                self.state = 2223
                self.match(TSqlParser.TRIGGER)
                self.state = 2224
                _la = self._input.LA(1)
                if not(_la==217 or _la==876):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [1010]:
                self.enterOuterAlt(localctx, 33)
                self.state = 2225
                self.match(TSqlParser.TYPE)
                pass
            elif token in [1035]:
                self.enterOuterAlt(localctx, 34)
                self.state = 2226
                self.match(TSqlParser.USER)
                pass
            elif token in [1074]:
                self.enterOuterAlt(localctx, 35)
                self.state = 2227
                self.match(TSqlParser.XML)
                self.state = 2228
                self.match(TSqlParser.SCHEMA)
                self.state = 2229
                self.match(TSqlParser.COLLECTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_availability_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.group_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def AVAILABILITY(self):
            return self.getToken(TSqlParser.AVAILABILITY, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_availability_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_availability_group" ):
                listener.enterDrop_availability_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_availability_group" ):
                listener.exitDrop_availability_group(self)




    def drop_availability_group(self):

        localctx = TSqlParser.Drop_availability_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_drop_availability_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2232
            self.match(TSqlParser.DROP)
            self.state = 2233
            self.match(TSqlParser.AVAILABILITY)
            self.state = 2234
            self.match(TSqlParser.GROUP)
            self.state = 2235
            localctx.group_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_availability_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_availability_group_start(self):
            return self.getTypedRuleContext(TSqlParser.Alter_availability_group_startContext,0)


        def alter_availability_group_options(self):
            return self.getTypedRuleContext(TSqlParser.Alter_availability_group_optionsContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_availability_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_availability_group" ):
                listener.enterAlter_availability_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_availability_group" ):
                listener.exitAlter_availability_group(self)




    def alter_availability_group(self):

        localctx = TSqlParser.Alter_availability_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_alter_availability_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2237
            self.alter_availability_group_start()
            self.state = 2238
            self.alter_availability_group_options()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_availability_group_startContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.group_name = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def AVAILABILITY(self):
            return self.getToken(TSqlParser.AVAILABILITY, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_availability_group_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_availability_group_start" ):
                listener.enterAlter_availability_group_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_availability_group_start" ):
                listener.exitAlter_availability_group_start(self)




    def alter_availability_group_start(self):

        localctx = TSqlParser.Alter_availability_group_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_alter_availability_group_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2240
            self.match(TSqlParser.ALTER)
            self.state = 2241
            self.match(TSqlParser.AVAILABILITY)
            self.state = 2242
            self.match(TSqlParser.GROUP)
            self.state = 2243
            localctx.group_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_availability_group_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.milliseconds = None # Token
            self.database_name = None # Id_Context
            self.server_instance = None # Token
            self.session_timeout = None # Token
            self.ag_name = None # Token
            self.ag_name_modified = None # Token
            self.listener_name = None # Token

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def AUTOMATED_BACKUP_PREFERENCE(self):
            return self.getToken(TSqlParser.AUTOMATED_BACKUP_PREFERENCE, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def FAILURE_CONDITION_LEVEL(self):
            return self.getToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def HEALTH_CHECK_TIMEOUT(self):
            return self.getToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0)

        def DB_FAILOVER(self):
            return self.getToken(TSqlParser.DB_FAILOVER, 0)

        def REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT(self):
            return self.getToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0)

        def PRIMARY(self):
            return self.getToken(TSqlParser.PRIMARY, 0)

        def SECONDARY_ONLY(self):
            return self.getToken(TSqlParser.SECONDARY_ONLY, 0)

        def SECONDARY(self):
            return self.getToken(TSqlParser.SECONDARY, 0)

        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def REMOVE(self):
            return self.getToken(TSqlParser.REMOVE, 0)

        def REPLICA(self):
            return self.getToken(TSqlParser.REPLICA, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.WITH)
            else:
                return self.getToken(TSqlParser.WITH, i)

        def ENDPOINT_URL(self):
            return self.getToken(TSqlParser.ENDPOINT_URL, 0)

        def AVAILABILITY_MODE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AVAILABILITY_MODE)
            else:
                return self.getToken(TSqlParser.AVAILABILITY_MODE, i)

        def FAILOVER_MODE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FAILOVER_MODE)
            else:
                return self.getToken(TSqlParser.FAILOVER_MODE, i)

        def SEEDING_MODE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SEEDING_MODE)
            else:
                return self.getToken(TSqlParser.SEEDING_MODE, i)

        def BACKUP_PRIORITY(self):
            return self.getToken(TSqlParser.BACKUP_PRIORITY, 0)

        def PRIMARY_ROLE(self):
            return self.getToken(TSqlParser.PRIMARY_ROLE, 0)

        def ALLOW_CONNECTIONS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ALLOW_CONNECTIONS)
            else:
                return self.getToken(TSqlParser.ALLOW_CONNECTIONS, i)

        def SECONDARY_ROLE(self):
            return self.getToken(TSqlParser.SECONDARY_ROLE, 0)

        def SYNCHRONOUS_COMMIT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SYNCHRONOUS_COMMIT)
            else:
                return self.getToken(TSqlParser.SYNCHRONOUS_COMMIT, i)

        def ASYNCHRONOUS_COMMIT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ASYNCHRONOUS_COMMIT)
            else:
                return self.getToken(TSqlParser.ASYNCHRONOUS_COMMIT, i)

        def AUTOMATIC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AUTOMATIC)
            else:
                return self.getToken(TSqlParser.AUTOMATIC, i)

        def MANUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MANUAL)
            else:
                return self.getToken(TSqlParser.MANUAL, i)

        def READ_WRITE(self):
            return self.getToken(TSqlParser.READ_WRITE, 0)

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def READ_ONLY(self):
            return self.getToken(TSqlParser.READ_ONLY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def READ_ONLY_ROUTING_LIST(self):
            return self.getToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0)

        def NO(self):
            return self.getToken(TSqlParser.NO, 0)

        def SESSION_TIMEOUT(self):
            return self.getToken(TSqlParser.SESSION_TIMEOUT, 0)

        def MODIFY(self):
            return self.getToken(TSqlParser.MODIFY, 0)

        def JOIN(self):
            return self.getToken(TSqlParser.JOIN, 0)

        def AVAILABILITY(self):
            return self.getToken(TSqlParser.AVAILABILITY, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def LISTENER_URL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LISTENER_URL)
            else:
                return self.getToken(TSqlParser.LISTENER_URL, i)

        def GRANT(self):
            return self.getToken(TSqlParser.GRANT, 0)

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def ANY(self):
            return self.getToken(TSqlParser.ANY, 0)

        def DENY(self):
            return self.getToken(TSqlParser.DENY, 0)

        def FAILOVER(self):
            return self.getToken(TSqlParser.FAILOVER, 0)

        def FORCE_FAILOVER_ALLOW_DATA_LOSS(self):
            return self.getToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0)

        def LISTENER(self):
            return self.getToken(TSqlParser.LISTENER, 0)

        def DHCP(self):
            return self.getToken(TSqlParser.DHCP, 0)

        def IP(self):
            return self.getToken(TSqlParser.IP, 0)

        def ip_v4_failover(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Ip_v4_failoverContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Ip_v4_failoverContext,i)


        def PORT(self):
            return self.getToken(TSqlParser.PORT, 0)

        def ip_v6_failover(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Ip_v6_failoverContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Ip_v6_failoverContext,i)


        def RESTART(self):
            return self.getToken(TSqlParser.RESTART, 0)

        def OFFLINE(self):
            return self.getToken(TSqlParser.OFFLINE, 0)

        def DTC_SUPPORT(self):
            return self.getToken(TSqlParser.DTC_SUPPORT, 0)

        def PER_DB(self):
            return self.getToken(TSqlParser.PER_DB, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_availability_group_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_availability_group_options" ):
                listener.enterAlter_availability_group_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_availability_group_options" ):
                listener.exitAlter_availability_group_options(self)




    def alter_availability_group_options(self):

        localctx = TSqlParser.Alter_availability_group_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_alter_availability_group_options)
        self._la = 0 # Token type
        try:
            self.state = 2600
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2245
                self.match(TSqlParser.SET)
                self.state = 2246
                self.match(TSqlParser.LR_BRACKET)

                self.state = 2262
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [72]:
                    self.state = 2247
                    self.match(TSqlParser.AUTOMATED_BACKUP_PREFERENCE)
                    self.state = 2248
                    self.match(TSqlParser.EQUAL)
                    self.state = 2249
                    _la = self._input.LA(1)
                    if not(_la==608 or _la==717 or _la==855 or _la==856):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [335]:
                    self.state = 2250
                    self.match(TSqlParser.FAILURE_CONDITION_LEVEL)
                    self.state = 2251
                    self.match(TSqlParser.EQUAL)
                    self.state = 2252
                    self.match(TSqlParser.DECIMAL)
                    pass
                elif token in [414]:
                    self.state = 2253
                    self.match(TSqlParser.HEALTH_CHECK_TIMEOUT)
                    self.state = 2254
                    self.match(TSqlParser.EQUAL)
                    self.state = 2255
                    localctx.milliseconds = self.match(TSqlParser.DECIMAL)
                    pass
                elif token in [235]:
                    self.state = 2256
                    self.match(TSqlParser.DB_FAILOVER)
                    self.state = 2257
                    self.match(TSqlParser.EQUAL)
                    self.state = 2258
                    _la = self._input.LA(1)
                    if not(_la==643 or _la==649):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [796]:
                    self.state = 2259
                    self.match(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT)
                    self.state = 2260
                    self.match(TSqlParser.EQUAL)
                    self.state = 2261
                    self.match(TSqlParser.DECIMAL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2264
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2265
                self.match(TSqlParser.ADD)
                self.state = 2266
                self.match(TSqlParser.DATABASE)
                self.state = 2267
                localctx.database_name = self.id_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2268
                self.match(TSqlParser.REMOVE)
                self.state = 2269
                self.match(TSqlParser.DATABASE)
                self.state = 2270
                localctx.database_name = self.id_()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2271
                self.match(TSqlParser.ADD)
                self.state = 2272
                self.match(TSqlParser.REPLICA)
                self.state = 2273
                self.match(TSqlParser.ON)
                self.state = 2274
                localctx.server_instance = self.match(TSqlParser.STRING)

                self.state = 2275
                self.match(TSqlParser.WITH)
                self.state = 2276
                self.match(TSqlParser.LR_BRACKET)

                self.state = 2280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==299:
                    self.state = 2277
                    self.match(TSqlParser.ENDPOINT_URL)
                    self.state = 2278
                    self.match(TSqlParser.EQUAL)
                    self.state = 2279
                    self.match(TSqlParser.STRING)


                self.state = 2288
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 2283
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 2282
                        self.match(TSqlParser.COMMA)


                    self.state = 2285
                    self.match(TSqlParser.AVAILABILITY_MODE)
                    self.state = 2286
                    self.match(TSqlParser.EQUAL)
                    self.state = 2287
                    _la = self._input.LA(1)
                    if not(_la==62 or _la==962):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2296
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                if la_ == 1:
                    self.state = 2291
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 2290
                        self.match(TSqlParser.COMMA)


                    self.state = 2293
                    self.match(TSqlParser.FAILOVER_MODE)
                    self.state = 2294
                    self.match(TSqlParser.EQUAL)
                    self.state = 2295
                    _la = self._input.LA(1)
                    if not(_la==73 or _la==530):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2304
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                if la_ == 1:
                    self.state = 2299
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 2298
                        self.match(TSqlParser.COMMA)


                    self.state = 2301
                    self.match(TSqlParser.SEEDING_MODE)
                    self.state = 2302
                    self.match(TSqlParser.EQUAL)
                    self.state = 2303
                    _la = self._input.LA(1)
                    if not(_la==73 or _la==530):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2312
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                if la_ == 1:
                    self.state = 2307
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 2306
                        self.match(TSqlParser.COMMA)


                    self.state = 2309
                    self.match(TSqlParser.BACKUP_PRIORITY)
                    self.state = 2310
                    self.match(TSqlParser.EQUAL)
                    self.state = 2311
                    self.match(TSqlParser.DECIMAL)


                self.state = 2323
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                if la_ == 1:
                    self.state = 2315
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 2314
                        self.match(TSqlParser.COMMA)


                    self.state = 2317
                    self.match(TSqlParser.PRIMARY_ROLE)
                    self.state = 2318
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 2319
                    self.match(TSqlParser.ALLOW_CONNECTIONS)
                    self.state = 2320
                    self.match(TSqlParser.EQUAL)
                    self.state = 2321
                    _la = self._input.LA(1)
                    if not(_la==22 or _la==765):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2322
                    self.match(TSqlParser.RR_BRACKET)


                self.state = 2334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==857 or _la==1194:
                    self.state = 2326
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 2325
                        self.match(TSqlParser.COMMA)


                    self.state = 2328
                    self.match(TSqlParser.SECONDARY_ROLE)
                    self.state = 2329
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 2330
                    self.match(TSqlParser.ALLOW_CONNECTIONS)
                    self.state = 2331
                    self.match(TSqlParser.EQUAL)

                    self.state = 2332
                    self.match(TSqlParser.READ_ONLY)
                    self.state = 2333
                    self.match(TSqlParser.RR_BRACKET)


                self.state = 2336
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2337
                self.match(TSqlParser.SECONDARY_ROLE)
                self.state = 2338
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2347
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [24]:
                    self.state = 2339
                    self.match(TSqlParser.ALLOW_CONNECTIONS)
                    self.state = 2340
                    self.match(TSqlParser.EQUAL)
                    self.state = 2341
                    _la = self._input.LA(1)
                    if not(_la==22 or _la==596 or _la==763):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [764]:
                    self.state = 2342
                    self.match(TSqlParser.READ_ONLY_ROUTING_LIST)
                    self.state = 2343
                    self.match(TSqlParser.EQUAL)

                    self.state = 2344
                    self.match(TSqlParser.LR_BRACKET)

                    self.state = 2345
                    self.match(TSqlParser.STRING)
                    self.state = 2346
                    self.match(TSqlParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2349
                self.match(TSqlParser.PRIMARY_ROLE)
                self.state = 2350
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2373
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [24]:
                    self.state = 2351
                    self.match(TSqlParser.ALLOW_CONNECTIONS)
                    self.state = 2352
                    self.match(TSqlParser.EQUAL)
                    self.state = 2353
                    _la = self._input.LA(1)
                    if not(_la==22 or _la==596 or _la==763):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [764]:
                    self.state = 2354
                    self.match(TSqlParser.READ_ONLY_ROUTING_LIST)
                    self.state = 2355
                    self.match(TSqlParser.EQUAL)

                    self.state = 2356
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 2367
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1170, 1193, 1194]:
                        self.state = 2363
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1170 or _la==1194:
                            self.state = 2358
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 2357
                                self.match(TSqlParser.COMMA)


                            self.state = 2360
                            self.match(TSqlParser.STRING)
                            self.state = 2365
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [608]:
                        self.state = 2366
                        self.match(TSqlParser.NONE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2369
                    self.match(TSqlParser.RR_BRACKET)
                    pass
                elif token in [885]:
                    self.state = 2370
                    self.match(TSqlParser.SESSION_TIMEOUT)
                    self.state = 2371
                    self.match(TSqlParser.EQUAL)
                    self.state = 2372
                    localctx.session_timeout = self.match(TSqlParser.DECIMAL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2375
                self.match(TSqlParser.MODIFY)
                self.state = 2376
                self.match(TSqlParser.REPLICA)
                self.state = 2377
                self.match(TSqlParser.ON)
                self.state = 2378
                localctx.server_instance = self.match(TSqlParser.STRING)
                self.state = 2436
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1063]:
                    self.state = 2379
                    self.match(TSqlParser.WITH)
                    self.state = 2380
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 2396
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [299]:
                        self.state = 2381
                        self.match(TSqlParser.ENDPOINT_URL)
                        self.state = 2382
                        self.match(TSqlParser.EQUAL)
                        self.state = 2383
                        self.match(TSqlParser.STRING)
                        pass
                    elif token in [82]:
                        self.state = 2384
                        self.match(TSqlParser.AVAILABILITY_MODE)
                        self.state = 2385
                        self.match(TSqlParser.EQUAL)
                        self.state = 2386
                        _la = self._input.LA(1)
                        if not(_la==62 or _la==962):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [332]:
                        self.state = 2387
                        self.match(TSqlParser.FAILOVER_MODE)
                        self.state = 2388
                        self.match(TSqlParser.EQUAL)
                        self.state = 2389
                        _la = self._input.LA(1)
                        if not(_la==73 or _la==530):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [864]:
                        self.state = 2390
                        self.match(TSqlParser.SEEDING_MODE)
                        self.state = 2391
                        self.match(TSqlParser.EQUAL)
                        self.state = 2392
                        _la = self._input.LA(1)
                        if not(_la==73 or _la==530):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [87]:
                        self.state = 2393
                        self.match(TSqlParser.BACKUP_PRIORITY)
                        self.state = 2394
                        self.match(TSqlParser.EQUAL)
                        self.state = 2395
                        self.match(TSqlParser.DECIMAL)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [857]:
                    self.state = 2398
                    self.match(TSqlParser.SECONDARY_ROLE)
                    self.state = 2399
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 2408
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [24]:
                        self.state = 2400
                        self.match(TSqlParser.ALLOW_CONNECTIONS)
                        self.state = 2401
                        self.match(TSqlParser.EQUAL)
                        self.state = 2402
                        _la = self._input.LA(1)
                        if not(_la==22 or _la==596 or _la==763):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [764]:
                        self.state = 2403
                        self.match(TSqlParser.READ_ONLY_ROUTING_LIST)
                        self.state = 2404
                        self.match(TSqlParser.EQUAL)

                        self.state = 2405
                        self.match(TSqlParser.LR_BRACKET)

                        self.state = 2406
                        self.match(TSqlParser.STRING)
                        self.state = 2407
                        self.match(TSqlParser.RR_BRACKET)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [718]:
                    self.state = 2410
                    self.match(TSqlParser.PRIMARY_ROLE)
                    self.state = 2411
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 2434
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [24]:
                        self.state = 2412
                        self.match(TSqlParser.ALLOW_CONNECTIONS)
                        self.state = 2413
                        self.match(TSqlParser.EQUAL)
                        self.state = 2414
                        _la = self._input.LA(1)
                        if not(_la==22 or _la==596 or _la==763):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [764]:
                        self.state = 2415
                        self.match(TSqlParser.READ_ONLY_ROUTING_LIST)
                        self.state = 2416
                        self.match(TSqlParser.EQUAL)

                        self.state = 2417
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 2428
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [1170, 1193, 1194]:
                            self.state = 2424
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==1170 or _la==1194:
                                self.state = 2419
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 2418
                                    self.match(TSqlParser.COMMA)


                                self.state = 2421
                                self.match(TSqlParser.STRING)
                                self.state = 2426
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass
                        elif token in [608]:
                            self.state = 2427
                            self.match(TSqlParser.NONE)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 2430
                        self.match(TSqlParser.RR_BRACKET)
                        pass
                    elif token in [885]:
                        self.state = 2431
                        self.match(TSqlParser.SESSION_TIMEOUT)
                        self.state = 2432
                        self.match(TSqlParser.EQUAL)
                        self.state = 2433
                        localctx.session_timeout = self.match(TSqlParser.DECIMAL)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2438
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2439
                self.match(TSqlParser.REMOVE)
                self.state = 2440
                self.match(TSqlParser.REPLICA)
                self.state = 2441
                self.match(TSqlParser.ON)
                self.state = 2442
                self.match(TSqlParser.STRING)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2443
                self.match(TSqlParser.JOIN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2444
                self.match(TSqlParser.JOIN)
                self.state = 2445
                self.match(TSqlParser.AVAILABILITY)
                self.state = 2446
                self.match(TSqlParser.GROUP)
                self.state = 2447
                self.match(TSqlParser.ON)
                self.state = 2470 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2449
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 2448
                        self.match(TSqlParser.COMMA)


                    self.state = 2451
                    localctx.ag_name = self.match(TSqlParser.STRING)
                    self.state = 2452
                    self.match(TSqlParser.WITH)
                    self.state = 2453
                    self.match(TSqlParser.LR_BRACKET)

                    self.state = 2454
                    self.match(TSqlParser.LISTENER_URL)
                    self.state = 2455
                    self.match(TSqlParser.EQUAL)
                    self.state = 2456
                    self.match(TSqlParser.STRING)
                    self.state = 2457
                    self.match(TSqlParser.COMMA)
                    self.state = 2458
                    self.match(TSqlParser.AVAILABILITY_MODE)
                    self.state = 2459
                    self.match(TSqlParser.EQUAL)
                    self.state = 2460
                    _la = self._input.LA(1)
                    if not(_la==62 or _la==962):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2461
                    self.match(TSqlParser.COMMA)
                    self.state = 2462
                    self.match(TSqlParser.FAILOVER_MODE)
                    self.state = 2463
                    self.match(TSqlParser.EQUAL)
                    self.state = 2464
                    self.match(TSqlParser.MANUAL)
                    self.state = 2465
                    self.match(TSqlParser.COMMA)
                    self.state = 2466
                    self.match(TSqlParser.SEEDING_MODE)
                    self.state = 2467
                    self.match(TSqlParser.EQUAL)
                    self.state = 2468
                    _la = self._input.LA(1)
                    if not(_la==73 or _la==530):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2469
                    self.match(TSqlParser.RR_BRACKET)
                    self.state = 2472 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1170 or _la==1194):
                        break

                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2474
                self.match(TSqlParser.MODIFY)
                self.state = 2475
                self.match(TSqlParser.AVAILABILITY)
                self.state = 2476
                self.match(TSqlParser.GROUP)
                self.state = 2477
                self.match(TSqlParser.ON)
                self.state = 2512 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2479
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 2478
                        self.match(TSqlParser.COMMA)


                    self.state = 2481
                    localctx.ag_name_modified = self.match(TSqlParser.STRING)
                    self.state = 2482
                    self.match(TSqlParser.WITH)
                    self.state = 2483
                    self.match(TSqlParser.LR_BRACKET)

                    self.state = 2484
                    self.match(TSqlParser.LISTENER_URL)
                    self.state = 2485
                    self.match(TSqlParser.EQUAL)
                    self.state = 2486
                    self.match(TSqlParser.STRING)
                    self.state = 2493
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                    if la_ == 1:
                        self.state = 2488
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 2487
                            self.match(TSqlParser.COMMA)


                        self.state = 2490
                        self.match(TSqlParser.AVAILABILITY_MODE)
                        self.state = 2491
                        self.match(TSqlParser.EQUAL)
                        self.state = 2492
                        _la = self._input.LA(1)
                        if not(_la==62 or _la==962):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 2501
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
                    if la_ == 1:
                        self.state = 2496
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 2495
                            self.match(TSqlParser.COMMA)


                        self.state = 2498
                        self.match(TSqlParser.FAILOVER_MODE)
                        self.state = 2499
                        self.match(TSqlParser.EQUAL)
                        self.state = 2500
                        self.match(TSqlParser.MANUAL)


                    self.state = 2509
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==864 or _la==1194:
                        self.state = 2504
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 2503
                            self.match(TSqlParser.COMMA)


                        self.state = 2506
                        self.match(TSqlParser.SEEDING_MODE)
                        self.state = 2507
                        self.match(TSqlParser.EQUAL)
                        self.state = 2508
                        _la = self._input.LA(1)
                        if not(_la==73 or _la==530):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 2511
                    self.match(TSqlParser.RR_BRACKET)
                    self.state = 2514 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1170 or _la==1194):
                        break

                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2516
                self.match(TSqlParser.GRANT)
                self.state = 2517
                self.match(TSqlParser.CREATE)
                self.state = 2518
                self.match(TSqlParser.ANY)
                self.state = 2519
                self.match(TSqlParser.DATABASE)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2520
                self.match(TSqlParser.DENY)
                self.state = 2521
                self.match(TSqlParser.CREATE)
                self.state = 2522
                self.match(TSqlParser.ANY)
                self.state = 2523
                self.match(TSqlParser.DATABASE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2524
                self.match(TSqlParser.FAILOVER)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2525
                self.match(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2526
                self.match(TSqlParser.ADD)
                self.state = 2527
                self.match(TSqlParser.LISTENER)
                self.state = 2528
                localctx.listener_name = self.match(TSqlParser.STRING)
                self.state = 2529
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2565
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                if la_ == 1:
                    self.state = 2530
                    self.match(TSqlParser.WITH)
                    self.state = 2531
                    self.match(TSqlParser.DHCP)

                    self.state = 2532
                    self.match(TSqlParser.ON)
                    self.state = 2533
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 2534
                    self.ip_v4_failover()
                    self.state = 2535
                    self.ip_v4_failover()
                    self.state = 2536
                    self.match(TSqlParser.RR_BRACKET)
                    pass

                elif la_ == 2:
                    self.state = 2538
                    self.match(TSqlParser.WITH)
                    self.state = 2539
                    self.match(TSqlParser.IP)
                    self.state = 2540
                    self.match(TSqlParser.LR_BRACKET)

                    self.state = 2554 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 2542
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 2541
                            self.match(TSqlParser.COMMA)


                        self.state = 2544
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 2550
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                        if la_ == 1:
                            self.state = 2545
                            self.ip_v4_failover()
                            self.state = 2546
                            self.match(TSqlParser.COMMA)
                            self.state = 2547
                            self.ip_v4_failover()
                            pass

                        elif la_ == 2:
                            self.state = 2549
                            self.ip_v6_failover()
                            pass


                        self.state = 2552
                        self.match(TSqlParser.RR_BRACKET)
                        self.state = 2556 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1192 or _la==1194):
                            break

                    self.state = 2558
                    self.match(TSqlParser.RR_BRACKET)
                    self.state = 2563
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 2559
                        self.match(TSqlParser.COMMA)
                        self.state = 2560
                        self.match(TSqlParser.PORT)
                        self.state = 2561
                        self.match(TSqlParser.EQUAL)
                        self.state = 2562
                        self.match(TSqlParser.DECIMAL)


                    pass


                self.state = 2567
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2569
                self.match(TSqlParser.MODIFY)
                self.state = 2570
                self.match(TSqlParser.LISTENER)
                self.state = 2585
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [11]:
                    self.state = 2571
                    self.match(TSqlParser.ADD)
                    self.state = 2572
                    self.match(TSqlParser.IP)
                    self.state = 2573
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 2578
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                    if la_ == 1:
                        self.state = 2574
                        self.ip_v4_failover()
                        self.state = 2575
                        self.ip_v4_failover()
                        pass

                    elif la_ == 2:
                        self.state = 2577
                        self.ip_v6_failover()
                        pass


                    self.state = 2580
                    self.match(TSqlParser.RR_BRACKET)
                    pass
                elif token in [713]:
                    self.state = 2582
                    self.match(TSqlParser.PORT)
                    self.state = 2583
                    self.match(TSqlParser.EQUAL)
                    self.state = 2584
                    self.match(TSqlParser.DECIMAL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2587
                self.match(TSqlParser.RESTART)
                self.state = 2588
                self.match(TSqlParser.LISTENER)
                self.state = 2589
                self.match(TSqlParser.STRING)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2590
                self.match(TSqlParser.REMOVE)
                self.state = 2591
                self.match(TSqlParser.LISTENER)
                self.state = 2592
                self.match(TSqlParser.STRING)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2593
                self.match(TSqlParser.OFFLINE)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2594
                self.match(TSqlParser.WITH)
                self.state = 2595
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2596
                self.match(TSqlParser.DTC_SUPPORT)
                self.state = 2597
                self.match(TSqlParser.EQUAL)
                self.state = 2598
                self.match(TSqlParser.PER_DB)
                self.state = 2599
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ip_v4_failoverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_ip_v4_failover

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIp_v4_failover" ):
                listener.enterIp_v4_failover(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIp_v4_failover" ):
                listener.exitIp_v4_failover(self)




    def ip_v4_failover(self):

        localctx = TSqlParser.Ip_v4_failoverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_ip_v4_failover)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2602
            self.match(TSqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ip_v6_failoverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_ip_v6_failover

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIp_v6_failover" ):
                listener.enterIp_v6_failover(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIp_v6_failover" ):
                listener.exitIp_v6_failover(self)




    def ip_v6_failover(self):

        localctx = TSqlParser.Ip_v6_failoverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_ip_v6_failover)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2604
            self.match(TSqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_or_alter_broker_priorityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ConversationPriorityName = None # Id_Context
            self.RemoteServiceName = None # Token
            self.PriorityValue = None # Token

        def BROKER(self):
            return self.getToken(TSqlParser.BROKER, 0)

        def PRIORITY(self):
            return self.getToken(TSqlParser.PRIORITY, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def CONVERSATION(self):
            return self.getToken(TSqlParser.CONVERSATION, 0)

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def CONTRACT_NAME(self):
            return self.getToken(TSqlParser.CONTRACT_NAME, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def LOCAL_SERVICE_NAME(self):
            return self.getToken(TSqlParser.LOCAL_SERVICE_NAME, 0)

        def REMOTE_SERVICE_NAME(self):
            return self.getToken(TSqlParser.REMOTE_SERVICE_NAME, 0)

        def PRIORITY_LEVEL(self):
            return self.getToken(TSqlParser.PRIORITY_LEVEL, 0)

        def ANY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ANY)
            else:
                return self.getToken(TSqlParser.ANY, i)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def DOUBLE_FORWARD_SLASH(self):
            return self.getToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_or_alter_broker_priority

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_or_alter_broker_priority" ):
                listener.enterCreate_or_alter_broker_priority(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_or_alter_broker_priority" ):
                listener.exitCreate_or_alter_broker_priority(self)




    def create_or_alter_broker_priority(self):

        localctx = TSqlParser.Create_or_alter_broker_priorityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_create_or_alter_broker_priority)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2606
            _la = self._input.LA(1)
            if not(_la==35 or _la==197):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2607
            self.match(TSqlParser.BROKER)
            self.state = 2608
            self.match(TSqlParser.PRIORITY)
            self.state = 2609
            localctx.ConversationPriorityName = self.id_()
            self.state = 2610
            self.match(TSqlParser.FOR)
            self.state = 2611
            self.match(TSqlParser.CONVERSATION)
            self.state = 2612
            self.match(TSqlParser.SET)
            self.state = 2613
            self.match(TSqlParser.LR_BRACKET)
            self.state = 2623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==187:
                self.state = 2614
                self.match(TSqlParser.CONTRACT_NAME)
                self.state = 2615
                self.match(TSqlParser.EQUAL)
                self.state = 2618
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                    self.state = 2616
                    self.id_()
                    pass
                elif token in [46]:
                    self.state = 2617
                    self.match(TSqlParser.ANY)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 2620
                    self.match(TSqlParser.COMMA)




            self.state = 2637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==519:
                self.state = 2625
                self.match(TSqlParser.LOCAL_SERVICE_NAME)
                self.state = 2626
                self.match(TSqlParser.EQUAL)
                self.state = 2632
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 279, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                    self.state = 2628
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==279:
                        self.state = 2627
                        self.match(TSqlParser.DOUBLE_FORWARD_SLASH)


                    self.state = 2630
                    self.id_()
                    pass
                elif token in [46]:
                    self.state = 2631
                    self.match(TSqlParser.ANY)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 2634
                    self.match(TSqlParser.COMMA)




            self.state = 2648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==780:
                self.state = 2639
                self.match(TSqlParser.REMOTE_SERVICE_NAME)
                self.state = 2640
                self.match(TSqlParser.EQUAL)
                self.state = 2643
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1170]:
                    self.state = 2641
                    localctx.RemoteServiceName = self.match(TSqlParser.STRING)
                    pass
                elif token in [46]:
                    self.state = 2642
                    self.match(TSqlParser.ANY)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 2645
                    self.match(TSqlParser.COMMA)




            self.state = 2656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==722:
                self.state = 2650
                self.match(TSqlParser.PRIORITY_LEVEL)
                self.state = 2651
                self.match(TSqlParser.EQUAL)
                self.state = 2654
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1168]:
                    self.state = 2652
                    localctx.PriorityValue = self.match(TSqlParser.DECIMAL)
                    pass
                elif token in [243]:
                    self.state = 2653
                    self.match(TSqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 2658
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_broker_priorityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ConversationPriorityName = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def BROKER(self):
            return self.getToken(TSqlParser.BROKER, 0)

        def PRIORITY(self):
            return self.getToken(TSqlParser.PRIORITY, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_broker_priority

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_broker_priority" ):
                listener.enterDrop_broker_priority(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_broker_priority" ):
                listener.exitDrop_broker_priority(self)




    def drop_broker_priority(self):

        localctx = TSqlParser.Drop_broker_priorityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_drop_broker_priority)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2660
            self.match(TSqlParser.DROP)
            self.state = 2661
            self.match(TSqlParser.BROKER)
            self.state = 2662
            self.match(TSqlParser.PRIORITY)
            self.state = 2663
            localctx.ConversationPriorityName = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_certificateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.certificate_name = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def REMOVE(self):
            return self.getToken(TSqlParser.REMOVE, 0)

        def PRIVATE_KEY(self):
            return self.getToken(TSqlParser.PRIVATE_KEY, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def PRIVATE(self):
            return self.getToken(TSqlParser.PRIVATE, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def ACTIVE(self):
            return self.getToken(TSqlParser.ACTIVE, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def BEGIN_DIALOG(self):
            return self.getToken(TSqlParser.BEGIN_DIALOG, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def FILE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FILE)
            else:
                return self.getToken(TSqlParser.FILE, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def DECRYPTION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECRYPTION)
            else:
                return self.getToken(TSqlParser.DECRYPTION, i)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BY)
            else:
                return self.getToken(TSqlParser.BY, i)

        def PASSWORD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.PASSWORD)
            else:
                return self.getToken(TSqlParser.PASSWORD, i)

        def ENCRYPTION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ENCRYPTION)
            else:
                return self.getToken(TSqlParser.ENCRYPTION, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_certificate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_certificate" ):
                listener.enterAlter_certificate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_certificate" ):
                listener.exitAlter_certificate(self)




    def alter_certificate(self):

        localctx = TSqlParser.Alter_certificateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_alter_certificate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2665
            self.match(TSqlParser.ALTER)
            self.state = 2666
            self.match(TSqlParser.CERTIFICATE)
            self.state = 2667
            localctx.certificate_name = self.id_()
            self.state = 2707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.state = 2668
                self.match(TSqlParser.REMOVE)
                self.state = 2669
                self.match(TSqlParser.PRIVATE_KEY)
                pass

            elif la_ == 2:
                self.state = 2670
                self.match(TSqlParser.WITH)
                self.state = 2671
                self.match(TSqlParser.PRIVATE)
                self.state = 2672
                self.match(TSqlParser.KEY)
                self.state = 2673
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2696 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2696
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [341]:
                        self.state = 2674
                        self.match(TSqlParser.FILE)
                        self.state = 2675
                        self.match(TSqlParser.EQUAL)
                        self.state = 2676
                        self.match(TSqlParser.STRING)
                        self.state = 2678
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 2677
                            self.match(TSqlParser.COMMA)


                        pass
                    elif token in [242]:
                        self.state = 2680
                        self.match(TSqlParser.DECRYPTION)
                        self.state = 2681
                        self.match(TSqlParser.BY)
                        self.state = 2682
                        self.match(TSqlParser.PASSWORD)
                        self.state = 2683
                        self.match(TSqlParser.EQUAL)
                        self.state = 2684
                        self.match(TSqlParser.STRING)
                        self.state = 2686
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 2685
                            self.match(TSqlParser.COMMA)


                        pass
                    elif token in [295]:
                        self.state = 2688
                        self.match(TSqlParser.ENCRYPTION)
                        self.state = 2689
                        self.match(TSqlParser.BY)
                        self.state = 2690
                        self.match(TSqlParser.PASSWORD)
                        self.state = 2691
                        self.match(TSqlParser.EQUAL)
                        self.state = 2692
                        self.match(TSqlParser.STRING)
                        self.state = 2694
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 2693
                            self.match(TSqlParser.COMMA)


                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2698 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==242 or _la==295 or _la==341):
                        break

                self.state = 2700
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.state = 2701
                self.match(TSqlParser.WITH)
                self.state = 2702
                self.match(TSqlParser.ACTIVE)
                self.state = 2703
                self.match(TSqlParser.FOR)
                self.state = 2704
                self.match(TSqlParser.BEGIN_DIALOG)
                self.state = 2705
                self.match(TSqlParser.EQUAL)
                self.state = 2706
                _la = self._input.LA(1)
                if not(_la==643 or _la==649):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_column_encryption_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.column_encryption_key = None # Id_Context
            self.column_master_key_name = None # Id_Context
            self.algorithm_name = None # Token

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def COLUMN(self):
            return self.getToken(TSqlParser.COLUMN, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def VALUE(self):
            return self.getToken(TSqlParser.VALUE, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def COLUMN_MASTER_KEY(self):
            return self.getToken(TSqlParser.COLUMN_MASTER_KEY, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def ALGORITHM(self):
            return self.getToken(TSqlParser.ALGORITHM, 0)

        def ENCRYPTED_VALUE(self):
            return self.getToken(TSqlParser.ENCRYPTED_VALUE, 0)

        def BINARY(self):
            return self.getToken(TSqlParser.BINARY, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_column_encryption_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_column_encryption_key" ):
                listener.enterAlter_column_encryption_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_column_encryption_key" ):
                listener.exitAlter_column_encryption_key(self)




    def alter_column_encryption_key(self):

        localctx = TSqlParser.Alter_column_encryption_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_alter_column_encryption_key)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2709
            self.match(TSqlParser.ALTER)
            self.state = 2710
            self.match(TSqlParser.COLUMN)
            self.state = 2711
            self.match(TSqlParser.ENCRYPTION)
            self.state = 2712
            self.match(TSqlParser.KEY)
            self.state = 2713
            localctx.column_encryption_key = self.id_()
            self.state = 2714
            _la = self._input.LA(1)
            if not(_la==11 or _la==280):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2715
            self.match(TSqlParser.VALUE)
            self.state = 2716
            self.match(TSqlParser.LR_BRACKET)
            self.state = 2717
            self.match(TSqlParser.COLUMN_MASTER_KEY)
            self.state = 2718
            self.match(TSqlParser.EQUAL)
            self.state = 2719
            localctx.column_master_key_name = self.id_()
            self.state = 2728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1194:
                self.state = 2720
                self.match(TSqlParser.COMMA)
                self.state = 2721
                self.match(TSqlParser.ALGORITHM)
                self.state = 2722
                self.match(TSqlParser.EQUAL)
                self.state = 2723
                localctx.algorithm_name = self.match(TSqlParser.STRING)
                self.state = 2724
                self.match(TSqlParser.COMMA)
                self.state = 2725
                self.match(TSqlParser.ENCRYPTED_VALUE)
                self.state = 2726
                self.match(TSqlParser.EQUAL)
                self.state = 2727
                self.match(TSqlParser.BINARY)


            self.state = 2730
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_column_encryption_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.column_encryption_key = None # Id_Context
            self.column_master_key_name = None # Id_Context
            self.algorithm_name = None # Token
            self.encrypted_value = None # Token

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def COLUMN(self):
            return self.getToken(TSqlParser.COLUMN, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def VALUES(self):
            return self.getToken(TSqlParser.VALUES, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def COLUMN_MASTER_KEY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COLUMN_MASTER_KEY)
            else:
                return self.getToken(TSqlParser.COLUMN_MASTER_KEY, i)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def ALGORITHM(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ALGORITHM)
            else:
                return self.getToken(TSqlParser.ALGORITHM, i)

        def ENCRYPTED_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ENCRYPTED_VALUE)
            else:
                return self.getToken(TSqlParser.ENCRYPTED_VALUE, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def BINARY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BINARY)
            else:
                return self.getToken(TSqlParser.BINARY, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_column_encryption_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_column_encryption_key" ):
                listener.enterCreate_column_encryption_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_column_encryption_key" ):
                listener.exitCreate_column_encryption_key(self)




    def create_column_encryption_key(self):

        localctx = TSqlParser.Create_column_encryption_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_create_column_encryption_key)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2732
            self.match(TSqlParser.CREATE)
            self.state = 2733
            self.match(TSqlParser.COLUMN)
            self.state = 2734
            self.match(TSqlParser.ENCRYPTION)
            self.state = 2735
            self.match(TSqlParser.KEY)
            self.state = 2736
            localctx.column_encryption_key = self.id_()
            self.state = 2737
            self.match(TSqlParser.WITH)
            self.state = 2738
            self.match(TSqlParser.VALUES)
            self.state = 2758 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2739
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 2741
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 2740
                        self.match(TSqlParser.COMMA)


                    self.state = 2743
                    self.match(TSqlParser.COLUMN_MASTER_KEY)
                    self.state = 2744
                    self.match(TSqlParser.EQUAL)
                    self.state = 2745
                    localctx.column_master_key_name = self.id_()
                    self.state = 2746
                    self.match(TSqlParser.COMMA)
                    self.state = 2747
                    self.match(TSqlParser.ALGORITHM)
                    self.state = 2748
                    self.match(TSqlParser.EQUAL)
                    self.state = 2749
                    localctx.algorithm_name = self.match(TSqlParser.STRING)
                    self.state = 2750
                    self.match(TSqlParser.COMMA)
                    self.state = 2751
                    self.match(TSqlParser.ENCRYPTED_VALUE)
                    self.state = 2752
                    self.match(TSqlParser.EQUAL)
                    self.state = 2753
                    localctx.encrypted_value = self.match(TSqlParser.BINARY)
                    self.state = 2754
                    self.match(TSqlParser.RR_BRACKET)
                    self.state = 2756
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 2755
                        self.match(TSqlParser.COMMA)



                else:
                    raise NoViableAltException(self)
                self.state = 2760 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_certificateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.certificate_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_certificate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_certificate" ):
                listener.enterDrop_certificate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_certificate" ):
                listener.exitDrop_certificate(self)




    def drop_certificate(self):

        localctx = TSqlParser.Drop_certificateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_drop_certificate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2762
            self.match(TSqlParser.DROP)
            self.state = 2763
            self.match(TSqlParser.CERTIFICATE)
            self.state = 2764
            localctx.certificate_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_column_encryption_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def COLUMN(self):
            return self.getToken(TSqlParser.COLUMN, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_column_encryption_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_column_encryption_key" ):
                listener.enterDrop_column_encryption_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_column_encryption_key" ):
                listener.exitDrop_column_encryption_key(self)




    def drop_column_encryption_key(self):

        localctx = TSqlParser.Drop_column_encryption_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_drop_column_encryption_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2766
            self.match(TSqlParser.DROP)
            self.state = 2767
            self.match(TSqlParser.COLUMN)
            self.state = 2768
            self.match(TSqlParser.ENCRYPTION)
            self.state = 2769
            self.match(TSqlParser.KEY)
            self.state = 2770
            localctx.key_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_column_master_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def COLUMN(self):
            return self.getToken(TSqlParser.COLUMN, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_column_master_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_column_master_key" ):
                listener.enterDrop_column_master_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_column_master_key" ):
                listener.exitDrop_column_master_key(self)




    def drop_column_master_key(self):

        localctx = TSqlParser.Drop_column_master_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_drop_column_master_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2772
            self.match(TSqlParser.DROP)
            self.state = 2773
            self.match(TSqlParser.COLUMN)
            self.state = 2774
            self.match(TSqlParser.MASTER)
            self.state = 2775
            self.match(TSqlParser.KEY)
            self.state = 2776
            localctx.key_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_contractContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dropped_contract_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def CONTRACT(self):
            return self.getToken(TSqlParser.CONTRACT, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_contract

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_contract" ):
                listener.enterDrop_contract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_contract" ):
                listener.exitDrop_contract(self)




    def drop_contract(self):

        localctx = TSqlParser.Drop_contractContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_drop_contract)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2778
            self.match(TSqlParser.DROP)
            self.state = 2779
            self.match(TSqlParser.CONTRACT)
            self.state = 2780
            localctx.dropped_contract_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_credentialContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.credential_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def CREDENTIAL(self):
            return self.getToken(TSqlParser.CREDENTIAL, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_credential

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_credential" ):
                listener.enterDrop_credential(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_credential" ):
                listener.exitDrop_credential(self)




    def drop_credential(self):

        localctx = TSqlParser.Drop_credentialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_drop_credential)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2782
            self.match(TSqlParser.DROP)
            self.state = 2783
            self.match(TSqlParser.CREDENTIAL)
            self.state = 2784
            localctx.credential_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_cryptograhic_providerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def CRYPTOGRAPHIC(self):
            return self.getToken(TSqlParser.CRYPTOGRAPHIC, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_cryptograhic_provider

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_cryptograhic_provider" ):
                listener.enterDrop_cryptograhic_provider(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_cryptograhic_provider" ):
                listener.exitDrop_cryptograhic_provider(self)




    def drop_cryptograhic_provider(self):

        localctx = TSqlParser.Drop_cryptograhic_providerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_drop_cryptograhic_provider)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2786
            self.match(TSqlParser.DROP)
            self.state = 2787
            self.match(TSqlParser.CRYPTOGRAPHIC)
            self.state = 2788
            self.match(TSqlParser.PROVIDER)
            self.state = 2789
            localctx.provider_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_databaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database_name_or_database_snapshot_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_database" ):
                listener.enterDrop_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_database" ):
                listener.exitDrop_database(self)




    def drop_database(self):

        localctx = TSqlParser.Drop_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_drop_database)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2791
            self.match(TSqlParser.DROP)
            self.state = 2792
            self.match(TSqlParser.DATABASE)
            self.state = 2795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==431:
                self.state = 2793
                self.match(TSqlParser.IF)
                self.state = 2794
                self.match(TSqlParser.EXISTS)


            self.state = 2801 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2798
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 2797
                        self.match(TSqlParser.COMMA)


                    self.state = 2800
                    localctx.database_name_or_database_snapshot_name = self.id_()

                else:
                    raise NoViableAltException(self)
                self.state = 2803 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,183,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_database_audit_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.audit_specification_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def AUDIT(self):
            return self.getToken(TSqlParser.AUDIT, 0)

        def SPECIFICATION(self):
            return self.getToken(TSqlParser.SPECIFICATION, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_database_audit_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_database_audit_specification" ):
                listener.enterDrop_database_audit_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_database_audit_specification" ):
                listener.exitDrop_database_audit_specification(self)




    def drop_database_audit_specification(self):

        localctx = TSqlParser.Drop_database_audit_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_drop_database_audit_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2805
            self.match(TSqlParser.DROP)
            self.state = 2806
            self.match(TSqlParser.DATABASE)
            self.state = 2807
            self.match(TSqlParser.AUDIT)
            self.state = 2808
            self.match(TSqlParser.SPECIFICATION)
            self.state = 2809
            localctx.audit_specification_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_database_encryption_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_database_encryption_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_database_encryption_key" ):
                listener.enterDrop_database_encryption_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_database_encryption_key" ):
                listener.exitDrop_database_encryption_key(self)




    def drop_database_encryption_key(self):

        localctx = TSqlParser.Drop_database_encryption_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_drop_database_encryption_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2811
            self.match(TSqlParser.DROP)
            self.state = 2812
            self.match(TSqlParser.DATABASE)
            self.state = 2813
            self.match(TSqlParser.ENCRYPTION)
            self.state = 2814
            self.match(TSqlParser.KEY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_database_scoped_credentialContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.credential_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def SCOPED(self):
            return self.getToken(TSqlParser.SCOPED, 0)

        def CREDENTIAL(self):
            return self.getToken(TSqlParser.CREDENTIAL, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_database_scoped_credential

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_database_scoped_credential" ):
                listener.enterDrop_database_scoped_credential(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_database_scoped_credential" ):
                listener.exitDrop_database_scoped_credential(self)




    def drop_database_scoped_credential(self):

        localctx = TSqlParser.Drop_database_scoped_credentialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_drop_database_scoped_credential)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2816
            self.match(TSqlParser.DROP)
            self.state = 2817
            self.match(TSqlParser.DATABASE)
            self.state = 2818
            self.match(TSqlParser.SCOPED)
            self.state = 2819
            self.match(TSqlParser.CREDENTIAL)
            self.state = 2820
            localctx.credential_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # Id_Context
            self.default_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_default" ):
                listener.enterDrop_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_default" ):
                listener.exitDrop_default(self)




    def drop_default(self):

        localctx = TSqlParser.Drop_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_drop_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2822
            self.match(TSqlParser.DROP)
            self.state = 2823
            self.match(TSqlParser.DEFAULT)
            self.state = 2826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==431:
                self.state = 2824
                self.match(TSqlParser.IF)
                self.state = 2825
                self.match(TSqlParser.EXISTS)


            self.state = 2829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1194:
                self.state = 2828
                self.match(TSqlParser.COMMA)


            self.state = 2834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 2831
                localctx.schema_name = self.id_()
                self.state = 2832
                self.match(TSqlParser.DOT)


            self.state = 2836
            localctx.default_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_endpointContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.endPointName = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def ENDPOINT(self):
            return self.getToken(TSqlParser.ENDPOINT, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_endpoint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_endpoint" ):
                listener.enterDrop_endpoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_endpoint" ):
                listener.exitDrop_endpoint(self)




    def drop_endpoint(self):

        localctx = TSqlParser.Drop_endpointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_drop_endpoint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2838
            self.match(TSqlParser.DROP)
            self.state = 2839
            self.match(TSqlParser.ENDPOINT)
            self.state = 2840
            localctx.endPointName = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_external_data_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.external_data_source_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def DATA(self):
            return self.getToken(TSqlParser.DATA, 0)

        def SOURCE(self):
            return self.getToken(TSqlParser.SOURCE, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_external_data_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_external_data_source" ):
                listener.enterDrop_external_data_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_external_data_source" ):
                listener.exitDrop_external_data_source(self)




    def drop_external_data_source(self):

        localctx = TSqlParser.Drop_external_data_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_drop_external_data_source)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2842
            self.match(TSqlParser.DROP)
            self.state = 2843
            self.match(TSqlParser.EXTERNAL)
            self.state = 2844
            self.match(TSqlParser.DATA)
            self.state = 2845
            self.match(TSqlParser.SOURCE)
            self.state = 2846
            localctx.external_data_source_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_external_file_formatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.external_file_format_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def FORMAT(self):
            return self.getToken(TSqlParser.FORMAT, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_external_file_format

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_external_file_format" ):
                listener.enterDrop_external_file_format(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_external_file_format" ):
                listener.exitDrop_external_file_format(self)




    def drop_external_file_format(self):

        localctx = TSqlParser.Drop_external_file_formatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_drop_external_file_format)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2848
            self.match(TSqlParser.DROP)
            self.state = 2849
            self.match(TSqlParser.EXTERNAL)
            self.state = 2850
            self.match(TSqlParser.FILE)
            self.state = 2851
            self.match(TSqlParser.FORMAT)
            self.state = 2852
            localctx.external_file_format_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_external_libraryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.library_name = None # Id_Context
            self.owner_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def LIBRARY(self):
            return self.getToken(TSqlParser.LIBRARY, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_external_library

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_external_library" ):
                listener.enterDrop_external_library(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_external_library" ):
                listener.exitDrop_external_library(self)




    def drop_external_library(self):

        localctx = TSqlParser.Drop_external_libraryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_drop_external_library)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2854
            self.match(TSqlParser.DROP)
            self.state = 2855
            self.match(TSqlParser.EXTERNAL)
            self.state = 2856
            self.match(TSqlParser.LIBRARY)
            self.state = 2857
            localctx.library_name = self.id_()
            self.state = 2860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 2858
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 2859
                localctx.owner_name = self.id_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_external_resource_poolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pool_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def RESOURCE(self):
            return self.getToken(TSqlParser.RESOURCE, 0)

        def POOL(self):
            return self.getToken(TSqlParser.POOL, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_external_resource_pool

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_external_resource_pool" ):
                listener.enterDrop_external_resource_pool(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_external_resource_pool" ):
                listener.exitDrop_external_resource_pool(self)




    def drop_external_resource_pool(self):

        localctx = TSqlParser.Drop_external_resource_poolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_drop_external_resource_pool)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2862
            self.match(TSqlParser.DROP)
            self.state = 2863
            self.match(TSqlParser.EXTERNAL)
            self.state = 2864
            self.match(TSqlParser.RESOURCE)
            self.state = 2865
            self.match(TSqlParser.POOL)
            self.state = 2866
            localctx.pool_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_external_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database_name = None # Id_Context
            self.schema_name = None # Id_Context
            self.table = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def TABLE(self):
            return self.getToken(TSqlParser.TABLE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_external_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_external_table" ):
                listener.enterDrop_external_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_external_table" ):
                listener.exitDrop_external_table(self)




    def drop_external_table(self):

        localctx = TSqlParser.Drop_external_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_drop_external_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2868
            self.match(TSqlParser.DROP)
            self.state = 2869
            self.match(TSqlParser.EXTERNAL)
            self.state = 2870
            self.match(TSqlParser.TABLE)
            self.state = 2874
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.state = 2871
                localctx.database_name = self.id_()
                self.state = 2872
                self.match(TSqlParser.DOT)


            self.state = 2879
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.state = 2876
                localctx.schema_name = self.id_()
                self.state = 2877
                self.match(TSqlParser.DOT)


            self.state = 2881
            localctx.table = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_event_notificationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.notification_name = None # Id_Context
            self.queue_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def EVENT(self):
            return self.getToken(TSqlParser.EVENT, 0)

        def NOTIFICATION(self):
            return self.getToken(TSqlParser.NOTIFICATION, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def QUEUE(self):
            return self.getToken(TSqlParser.QUEUE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_event_notifications

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_event_notifications" ):
                listener.enterDrop_event_notifications(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_event_notifications" ):
                listener.exitDrop_event_notifications(self)




    def drop_event_notifications(self):

        localctx = TSqlParser.Drop_event_notificationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_drop_event_notifications)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2883
            self.match(TSqlParser.DROP)
            self.state = 2884
            self.match(TSqlParser.EVENT)
            self.state = 2885
            self.match(TSqlParser.NOTIFICATION)
            self.state = 2890 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 2886
                    self.match(TSqlParser.COMMA)


                self.state = 2889
                localctx.notification_name = self.id_()
                self.state = 2892 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6845834611130385) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4691064178111676937) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8067776519934725599) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387491794949) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714895912701) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755875440852549633) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873769796032868641) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510937462965505) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799299309863) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -651161675377934355) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -387309693044787745) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689521) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906573) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 4294967467) != 0)):
                    break

            self.state = 2894
            self.match(TSqlParser.ON)
            self.state = 2899
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [876]:
                self.state = 2895
                self.match(TSqlParser.SERVER)
                pass
            elif token in [217]:
                self.state = 2896
                self.match(TSqlParser.DATABASE)
                pass
            elif token in [741]:
                self.state = 2897
                self.match(TSqlParser.QUEUE)
                self.state = 2898
                localctx.queue_name = self.id_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_event_sessionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.event_session_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def EVENT(self):
            return self.getToken(TSqlParser.EVENT, 0)

        def SESSION(self):
            return self.getToken(TSqlParser.SESSION, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_event_session

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_event_session" ):
                listener.enterDrop_event_session(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_event_session" ):
                listener.exitDrop_event_session(self)




    def drop_event_session(self):

        localctx = TSqlParser.Drop_event_sessionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_drop_event_session)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2901
            self.match(TSqlParser.DROP)
            self.state = 2902
            self.match(TSqlParser.EVENT)
            self.state = 2903
            self.match(TSqlParser.SESSION)
            self.state = 2904
            localctx.event_session_name = self.id_()
            self.state = 2905
            self.match(TSqlParser.ON)
            self.state = 2906
            self.match(TSqlParser.SERVER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_fulltext_catalogContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.catalog_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def FULLTEXT(self):
            return self.getToken(TSqlParser.FULLTEXT, 0)

        def CATALOG(self):
            return self.getToken(TSqlParser.CATALOG, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_fulltext_catalog

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_fulltext_catalog" ):
                listener.enterDrop_fulltext_catalog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_fulltext_catalog" ):
                listener.exitDrop_fulltext_catalog(self)




    def drop_fulltext_catalog(self):

        localctx = TSqlParser.Drop_fulltext_catalogContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_drop_fulltext_catalog)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2908
            self.match(TSqlParser.DROP)
            self.state = 2909
            self.match(TSqlParser.FULLTEXT)
            self.state = 2910
            self.match(TSqlParser.CATALOG)
            self.state = 2911
            localctx.catalog_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_fulltext_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # Id_Context
            self.table = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def FULLTEXT(self):
            return self.getToken(TSqlParser.FULLTEXT, 0)

        def INDEX(self):
            return self.getToken(TSqlParser.INDEX, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_fulltext_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_fulltext_index" ):
                listener.enterDrop_fulltext_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_fulltext_index" ):
                listener.exitDrop_fulltext_index(self)




    def drop_fulltext_index(self):

        localctx = TSqlParser.Drop_fulltext_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_drop_fulltext_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2913
            self.match(TSqlParser.DROP)
            self.state = 2914
            self.match(TSqlParser.FULLTEXT)
            self.state = 2915
            self.match(TSqlParser.INDEX)
            self.state = 2916
            self.match(TSqlParser.ON)
            self.state = 2920
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.state = 2917
                localctx.schema = self.id_()
                self.state = 2918
                self.match(TSqlParser.DOT)


            self.state = 2922
            localctx.table = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_fulltext_stoplistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.stoplist_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def FULLTEXT(self):
            return self.getToken(TSqlParser.FULLTEXT, 0)

        def STOPLIST(self):
            return self.getToken(TSqlParser.STOPLIST, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_fulltext_stoplist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_fulltext_stoplist" ):
                listener.enterDrop_fulltext_stoplist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_fulltext_stoplist" ):
                listener.exitDrop_fulltext_stoplist(self)




    def drop_fulltext_stoplist(self):

        localctx = TSqlParser.Drop_fulltext_stoplistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_drop_fulltext_stoplist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2924
            self.match(TSqlParser.DROP)
            self.state = 2925
            self.match(TSqlParser.FULLTEXT)
            self.state = 2926
            self.match(TSqlParser.STOPLIST)
            self.state = 2927
            localctx.stoplist_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_loginContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.login_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_login

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_login" ):
                listener.enterDrop_login(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_login" ):
                listener.exitDrop_login(self)




    def drop_login(self):

        localctx = TSqlParser.Drop_loginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_drop_login)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2929
            self.match(TSqlParser.DROP)
            self.state = 2930
            self.match(TSqlParser.LOGIN)
            self.state = 2931
            localctx.login_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_master_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_master_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_master_key" ):
                listener.enterDrop_master_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_master_key" ):
                listener.exitDrop_master_key(self)




    def drop_master_key(self):

        localctx = TSqlParser.Drop_master_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_drop_master_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2933
            self.match(TSqlParser.DROP)
            self.state = 2934
            self.match(TSqlParser.MASTER)
            self.state = 2935
            self.match(TSqlParser.KEY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_message_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.message_type_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def MESSAGE(self):
            return self.getToken(TSqlParser.MESSAGE, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_message_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_message_type" ):
                listener.enterDrop_message_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_message_type" ):
                listener.exitDrop_message_type(self)




    def drop_message_type(self):

        localctx = TSqlParser.Drop_message_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_drop_message_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2937
            self.match(TSqlParser.DROP)
            self.state = 2938
            self.match(TSqlParser.MESSAGE)
            self.state = 2939
            self.match(TSqlParser.TYPE)
            self.state = 2940
            localctx.message_type_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_partition_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.partition_function_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def PARTITION(self):
            return self.getToken(TSqlParser.PARTITION, 0)

        def FUNCTION(self):
            return self.getToken(TSqlParser.FUNCTION, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_partition_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_partition_function" ):
                listener.enterDrop_partition_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_partition_function" ):
                listener.exitDrop_partition_function(self)




    def drop_partition_function(self):

        localctx = TSqlParser.Drop_partition_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_drop_partition_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2942
            self.match(TSqlParser.DROP)
            self.state = 2943
            self.match(TSqlParser.PARTITION)
            self.state = 2944
            self.match(TSqlParser.FUNCTION)
            self.state = 2945
            localctx.partition_function_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_partition_schemeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.partition_scheme_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def PARTITION(self):
            return self.getToken(TSqlParser.PARTITION, 0)

        def SCHEME(self):
            return self.getToken(TSqlParser.SCHEME, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_partition_scheme

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_partition_scheme" ):
                listener.enterDrop_partition_scheme(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_partition_scheme" ):
                listener.exitDrop_partition_scheme(self)




    def drop_partition_scheme(self):

        localctx = TSqlParser.Drop_partition_schemeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_drop_partition_scheme)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2947
            self.match(TSqlParser.DROP)
            self.state = 2948
            self.match(TSqlParser.PARTITION)
            self.state = 2949
            self.match(TSqlParser.SCHEME)
            self.state = 2950
            localctx.partition_scheme_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_queueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database_name = None # Id_Context
            self.schema_name = None # Id_Context
            self.queue_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def QUEUE(self):
            return self.getToken(TSqlParser.QUEUE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_queue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_queue" ):
                listener.enterDrop_queue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_queue" ):
                listener.exitDrop_queue(self)




    def drop_queue(self):

        localctx = TSqlParser.Drop_queueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_drop_queue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2952
            self.match(TSqlParser.DROP)
            self.state = 2953
            self.match(TSqlParser.QUEUE)
            self.state = 2957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.state = 2954
                localctx.database_name = self.id_()
                self.state = 2955
                self.match(TSqlParser.DOT)


            self.state = 2962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 2959
                localctx.schema_name = self.id_()
                self.state = 2960
                self.match(TSqlParser.DOT)


            self.state = 2964
            localctx.queue_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_remote_service_bindingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.binding_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def REMOTE(self):
            return self.getToken(TSqlParser.REMOTE, 0)

        def SERVICE(self):
            return self.getToken(TSqlParser.SERVICE, 0)

        def BINDING(self):
            return self.getToken(TSqlParser.BINDING, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_remote_service_binding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_remote_service_binding" ):
                listener.enterDrop_remote_service_binding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_remote_service_binding" ):
                listener.exitDrop_remote_service_binding(self)




    def drop_remote_service_binding(self):

        localctx = TSqlParser.Drop_remote_service_bindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_drop_remote_service_binding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2966
            self.match(TSqlParser.DROP)
            self.state = 2967
            self.match(TSqlParser.REMOTE)
            self.state = 2968
            self.match(TSqlParser.SERVICE)
            self.state = 2969
            self.match(TSqlParser.BINDING)
            self.state = 2970
            localctx.binding_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_resource_poolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pool_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def RESOURCE(self):
            return self.getToken(TSqlParser.RESOURCE, 0)

        def POOL(self):
            return self.getToken(TSqlParser.POOL, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_resource_pool

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_resource_pool" ):
                listener.enterDrop_resource_pool(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_resource_pool" ):
                listener.exitDrop_resource_pool(self)




    def drop_resource_pool(self):

        localctx = TSqlParser.Drop_resource_poolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_drop_resource_pool)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2972
            self.match(TSqlParser.DROP)
            self.state = 2973
            self.match(TSqlParser.RESOURCE)
            self.state = 2974
            self.match(TSqlParser.POOL)
            self.state = 2975
            localctx.pool_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_db_roleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.role_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_db_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_db_role" ):
                listener.enterDrop_db_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_db_role" ):
                listener.exitDrop_db_role(self)




    def drop_db_role(self):

        localctx = TSqlParser.Drop_db_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_drop_db_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2977
            self.match(TSqlParser.DROP)
            self.state = 2978
            self.match(TSqlParser.ROLE)
            self.state = 2981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==431:
                self.state = 2979
                self.match(TSqlParser.IF)
                self.state = 2980
                self.match(TSqlParser.EXISTS)


            self.state = 2983
            localctx.role_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_routeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.route_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def ROUTE(self):
            return self.getToken(TSqlParser.ROUTE, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_route

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_route" ):
                listener.enterDrop_route(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_route" ):
                listener.exitDrop_route(self)




    def drop_route(self):

        localctx = TSqlParser.Drop_routeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_drop_route)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2985
            self.match(TSqlParser.DROP)
            self.state = 2986
            self.match(TSqlParser.ROUTE)
            self.state = 2987
            localctx.route_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # Id_Context
            self.rule_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def RULE(self):
            return self.getToken(TSqlParser.RULE, 0)

        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_rule" ):
                listener.enterDrop_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_rule" ):
                listener.exitDrop_rule(self)




    def drop_rule(self):

        localctx = TSqlParser.Drop_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_drop_rule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2989
            self.match(TSqlParser.DROP)
            self.state = 2990
            self.match(TSqlParser.RULE)
            self.state = 2993
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.state = 2991
                self.match(TSqlParser.IF)
                self.state = 2992
                self.match(TSqlParser.EXISTS)


            self.state = 3004
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.state = 2996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 2995
                    self.match(TSqlParser.COMMA)


                self.state = 3001
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                if la_ == 1:
                    self.state = 2998
                    localctx.schema_name = self.id_()
                    self.state = 2999
                    self.match(TSqlParser.DOT)


                self.state = 3003
                localctx.rule_name = self.id_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_schema" ):
                listener.enterDrop_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_schema" ):
                listener.exitDrop_schema(self)




    def drop_schema(self):

        localctx = TSqlParser.Drop_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_drop_schema)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3006
            self.match(TSqlParser.DROP)
            self.state = 3007
            self.match(TSqlParser.SCHEMA)
            self.state = 3010
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==431:
                self.state = 3008
                self.match(TSqlParser.IF)
                self.state = 3009
                self.match(TSqlParser.EXISTS)


            self.state = 3012
            localctx.schema_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_search_property_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.property_list_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def SEARCH(self):
            return self.getToken(TSqlParser.SEARCH, 0)

        def PROPERTY(self):
            return self.getToken(TSqlParser.PROPERTY, 0)

        def LIST(self):
            return self.getToken(TSqlParser.LIST, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_search_property_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_search_property_list" ):
                listener.enterDrop_search_property_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_search_property_list" ):
                listener.exitDrop_search_property_list(self)




    def drop_search_property_list(self):

        localctx = TSqlParser.Drop_search_property_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_drop_search_property_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3014
            self.match(TSqlParser.DROP)
            self.state = 3015
            self.match(TSqlParser.SEARCH)
            self.state = 3016
            self.match(TSqlParser.PROPERTY)
            self.state = 3017
            self.match(TSqlParser.LIST)
            self.state = 3018
            localctx.property_list_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_security_policyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # Id_Context
            self.security_policy_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def SECURITY(self):
            return self.getToken(TSqlParser.SECURITY, 0)

        def POLICY(self):
            return self.getToken(TSqlParser.POLICY, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_security_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_security_policy" ):
                listener.enterDrop_security_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_security_policy" ):
                listener.exitDrop_security_policy(self)




    def drop_security_policy(self):

        localctx = TSqlParser.Drop_security_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_drop_security_policy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3020
            self.match(TSqlParser.DROP)
            self.state = 3021
            self.match(TSqlParser.SECURITY)
            self.state = 3022
            self.match(TSqlParser.POLICY)
            self.state = 3025
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==431:
                self.state = 3023
                self.match(TSqlParser.IF)
                self.state = 3024
                self.match(TSqlParser.EXISTS)


            self.state = 3030
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.state = 3027
                localctx.schema_name = self.id_()
                self.state = 3028
                self.match(TSqlParser.DOT)


            self.state = 3032
            localctx.security_policy_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_sequenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database_name = None # Id_Context
            self.schema_name = None # Id_Context
            self.sequence_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def SEQUENCE(self):
            return self.getToken(TSqlParser.SEQUENCE, 0)

        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_sequence" ):
                listener.enterDrop_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_sequence" ):
                listener.exitDrop_sequence(self)




    def drop_sequence(self):

        localctx = TSqlParser.Drop_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_drop_sequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3034
            self.match(TSqlParser.DROP)
            self.state = 3035
            self.match(TSqlParser.SEQUENCE)
            self.state = 3038
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.state = 3036
                self.match(TSqlParser.IF)
                self.state = 3037
                self.match(TSqlParser.EXISTS)


            self.state = 3054
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.state = 3041
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 3040
                    self.match(TSqlParser.COMMA)


                self.state = 3046
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
                if la_ == 1:
                    self.state = 3043
                    localctx.database_name = self.id_()
                    self.state = 3044
                    self.match(TSqlParser.DOT)


                self.state = 3051
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
                if la_ == 1:
                    self.state = 3048
                    localctx.schema_name = self.id_()
                    self.state = 3049
                    self.match(TSqlParser.DOT)


                self.state = 3053
                localctx.sequence_name = self.id_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_server_auditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.audit_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def AUDIT(self):
            return self.getToken(TSqlParser.AUDIT, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_server_audit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_server_audit" ):
                listener.enterDrop_server_audit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_server_audit" ):
                listener.exitDrop_server_audit(self)




    def drop_server_audit(self):

        localctx = TSqlParser.Drop_server_auditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_drop_server_audit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3056
            self.match(TSqlParser.DROP)
            self.state = 3057
            self.match(TSqlParser.SERVER)
            self.state = 3058
            self.match(TSqlParser.AUDIT)
            self.state = 3059
            localctx.audit_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_server_audit_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.audit_specification_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def AUDIT(self):
            return self.getToken(TSqlParser.AUDIT, 0)

        def SPECIFICATION(self):
            return self.getToken(TSqlParser.SPECIFICATION, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_server_audit_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_server_audit_specification" ):
                listener.enterDrop_server_audit_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_server_audit_specification" ):
                listener.exitDrop_server_audit_specification(self)




    def drop_server_audit_specification(self):

        localctx = TSqlParser.Drop_server_audit_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_drop_server_audit_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3061
            self.match(TSqlParser.DROP)
            self.state = 3062
            self.match(TSqlParser.SERVER)
            self.state = 3063
            self.match(TSqlParser.AUDIT)
            self.state = 3064
            self.match(TSqlParser.SPECIFICATION)
            self.state = 3065
            localctx.audit_specification_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_server_roleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.role_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_server_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_server_role" ):
                listener.enterDrop_server_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_server_role" ):
                listener.exitDrop_server_role(self)




    def drop_server_role(self):

        localctx = TSqlParser.Drop_server_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_drop_server_role)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3067
            self.match(TSqlParser.DROP)
            self.state = 3068
            self.match(TSqlParser.SERVER)
            self.state = 3069
            self.match(TSqlParser.ROLE)
            self.state = 3070
            localctx.role_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_serviceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dropped_service_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def SERVICE(self):
            return self.getToken(TSqlParser.SERVICE, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_service

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_service" ):
                listener.enterDrop_service(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_service" ):
                listener.exitDrop_service(self)




    def drop_service(self):

        localctx = TSqlParser.Drop_serviceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_drop_service)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3072
            self.match(TSqlParser.DROP)
            self.state = 3073
            self.match(TSqlParser.SERVICE)
            self.state = 3074
            localctx.dropped_service_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_signatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # Id_Context
            self.module_name = None # Id_Context
            self.cert_name = None # Id_Context
            self.Asym_key_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def SIGNATURE(self):
            return self.getToken(TSqlParser.SIGNATURE, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def COUNTER(self):
            return self.getToken(TSqlParser.COUNTER, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def CERTIFICATE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CERTIFICATE)
            else:
                return self.getToken(TSqlParser.CERTIFICATE, i)

        def ASYMMETRIC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ASYMMETRIC)
            else:
                return self.getToken(TSqlParser.ASYMMETRIC, i)

        def KEY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.KEY)
            else:
                return self.getToken(TSqlParser.KEY, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_signature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_signature" ):
                listener.enterDrop_signature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_signature" ):
                listener.exitDrop_signature(self)




    def drop_signature(self):

        localctx = TSqlParser.Drop_signatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_drop_signature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3076
            self.match(TSqlParser.DROP)
            self.state = 3078
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==194:
                self.state = 3077
                self.match(TSqlParser.COUNTER)


            self.state = 3080
            self.match(TSqlParser.SIGNATURE)
            self.state = 3081
            self.match(TSqlParser.FROM)
            self.state = 3085
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.state = 3082
                localctx.schema_name = self.id_()
                self.state = 3083
                self.match(TSqlParser.DOT)


            self.state = 3087
            localctx.module_name = self.id_()
            self.state = 3088
            self.match(TSqlParser.BY)
            self.state = 3100 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3100
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
                    if la_ == 1:
                        self.state = 3090
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 3089
                            self.match(TSqlParser.COMMA)


                        self.state = 3092
                        self.match(TSqlParser.CERTIFICATE)
                        self.state = 3093
                        localctx.cert_name = self.id_()
                        pass

                    elif la_ == 2:
                        self.state = 3095
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 3094
                            self.match(TSqlParser.COMMA)


                        self.state = 3097
                        self.match(TSqlParser.ASYMMETRIC)
                        self.state = 3098
                        self.match(TSqlParser.KEY)
                        self.state = 3099
                        localctx.Asym_key_name = self.id_()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 3102 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,214,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_statistics_name_azure_dw_and_pdwContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # Id_Context
            self.object_name = None # Id_Context
            self.statistics_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def STATISTICS(self):
            return self.getToken(TSqlParser.STATISTICS, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_statistics_name_azure_dw_and_pdw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_statistics_name_azure_dw_and_pdw" ):
                listener.enterDrop_statistics_name_azure_dw_and_pdw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_statistics_name_azure_dw_and_pdw" ):
                listener.exitDrop_statistics_name_azure_dw_and_pdw(self)




    def drop_statistics_name_azure_dw_and_pdw(self):

        localctx = TSqlParser.Drop_statistics_name_azure_dw_and_pdwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_drop_statistics_name_azure_dw_and_pdw)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3104
            self.match(TSqlParser.DROP)
            self.state = 3105
            self.match(TSqlParser.STATISTICS)
            self.state = 3109
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                self.state = 3106
                localctx.schema_name = self.id_()
                self.state = 3107
                self.match(TSqlParser.DOT)


            self.state = 3111
            localctx.object_name = self.id_()
            self.state = 3112
            self.match(TSqlParser.DOT)
            self.state = 3113
            localctx.statistics_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_symmetric_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.symmetric_key_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def KEY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.KEY)
            else:
                return self.getToken(TSqlParser.KEY, i)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def REMOVE(self):
            return self.getToken(TSqlParser.REMOVE, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_symmetric_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_symmetric_key" ):
                listener.enterDrop_symmetric_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_symmetric_key" ):
                listener.exitDrop_symmetric_key(self)




    def drop_symmetric_key(self):

        localctx = TSqlParser.Drop_symmetric_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_drop_symmetric_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3115
            self.match(TSqlParser.DROP)
            self.state = 3116
            self.match(TSqlParser.SYMMETRIC)
            self.state = 3117
            self.match(TSqlParser.KEY)
            self.state = 3118
            localctx.symmetric_key_name = self.id_()
            self.state = 3122
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.state = 3119
                self.match(TSqlParser.REMOVE)
                self.state = 3120
                self.match(TSqlParser.PROVIDER)
                self.state = 3121
                self.match(TSqlParser.KEY)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_synonymContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # Id_Context
            self.synonym_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def SYNONYM(self):
            return self.getToken(TSqlParser.SYNONYM, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_synonym

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_synonym" ):
                listener.enterDrop_synonym(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_synonym" ):
                listener.exitDrop_synonym(self)




    def drop_synonym(self):

        localctx = TSqlParser.Drop_synonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_drop_synonym)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3124
            self.match(TSqlParser.DROP)
            self.state = 3125
            self.match(TSqlParser.SYNONYM)
            self.state = 3128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==431:
                self.state = 3126
                self.match(TSqlParser.IF)
                self.state = 3127
                self.match(TSqlParser.EXISTS)


            self.state = 3133
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.state = 3130
                localctx.schema = self.id_()
                self.state = 3131
                self.match(TSqlParser.DOT)


            self.state = 3135
            localctx.synonym_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_userContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.user_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def USER(self):
            return self.getToken(TSqlParser.USER, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_user

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_user" ):
                listener.enterDrop_user(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_user" ):
                listener.exitDrop_user(self)




    def drop_user(self):

        localctx = TSqlParser.Drop_userContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_drop_user)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3137
            self.match(TSqlParser.DROP)
            self.state = 3138
            self.match(TSqlParser.USER)
            self.state = 3141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==431:
                self.state = 3139
                self.match(TSqlParser.IF)
                self.state = 3140
                self.match(TSqlParser.EXISTS)


            self.state = 3143
            localctx.user_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_workload_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.group_name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def WORKLOAD(self):
            return self.getToken(TSqlParser.WORKLOAD, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_workload_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_workload_group" ):
                listener.enterDrop_workload_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_workload_group" ):
                listener.exitDrop_workload_group(self)




    def drop_workload_group(self):

        localctx = TSqlParser.Drop_workload_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_drop_workload_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3145
            self.match(TSqlParser.DROP)
            self.state = 3146
            self.match(TSqlParser.WORKLOAD)
            self.state = 3147
            self.match(TSqlParser.GROUP)
            self.state = 3148
            localctx.group_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_xml_schema_collectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.relational_schema = None # Id_Context
            self.sql_identifier = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def XML(self):
            return self.getToken(TSqlParser.XML, 0)

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def COLLECTION(self):
            return self.getToken(TSqlParser.COLLECTION, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_xml_schema_collection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_xml_schema_collection" ):
                listener.enterDrop_xml_schema_collection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_xml_schema_collection" ):
                listener.exitDrop_xml_schema_collection(self)




    def drop_xml_schema_collection(self):

        localctx = TSqlParser.Drop_xml_schema_collectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_drop_xml_schema_collection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3150
            self.match(TSqlParser.DROP)
            self.state = 3151
            self.match(TSqlParser.XML)
            self.state = 3152
            self.match(TSqlParser.SCHEMA)
            self.state = 3153
            self.match(TSqlParser.COLLECTION)
            self.state = 3157
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.state = 3154
                localctx.relational_schema = self.id_()
                self.state = 3155
                self.match(TSqlParser.DOT)


            self.state = 3159
            localctx.sql_identifier = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Disable_triggerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # Id_Context
            self.trigger_name = None # Id_Context
            self.schema_id = None # Id_Context
            self.object_name = None # Id_Context

        def DISABLE(self):
            return self.getToken(TSqlParser.DISABLE, 0)

        def TRIGGER(self):
            return self.getToken(TSqlParser.TRIGGER, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ALL)
            else:
                return self.getToken(TSqlParser.ALL, i)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_disable_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisable_trigger" ):
                listener.enterDisable_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisable_trigger" ):
                listener.exitDisable_trigger(self)




    def disable_trigger(self):

        localctx = TSqlParser.Disable_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_disable_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3161
            self.match(TSqlParser.DISABLE)
            self.state = 3162
            self.match(TSqlParser.TRIGGER)
            self.state = 3177
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169, 1194]:
                self.state = 3172 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3164
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 3163
                        self.match(TSqlParser.COMMA)


                    self.state = 3169
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
                    if la_ == 1:
                        self.state = 3166
                        localctx.schema_name = self.id_()
                        self.state = 3167
                        self.match(TSqlParser.DOT)


                    self.state = 3171
                    localctx.trigger_name = self.id_()
                    self.state = 3174 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6845834611130385) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4691064178111676937) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8067776519934725599) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387491794949) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714895912701) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755875440852549633) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873769796032868641) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510937462965505) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799299309863) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -651161675377934355) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -387309693044787745) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689521) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906573) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 4294967467) != 0)):
                        break

                pass
            elif token in [22]:
                self.state = 3176
                self.match(TSqlParser.ALL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3179
            self.match(TSqlParser.ON)
            self.state = 3189
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                self.state = 3183
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                if la_ == 1:
                    self.state = 3180
                    localctx.schema_id = self.id_()
                    self.state = 3181
                    self.match(TSqlParser.DOT)


                self.state = 3185
                localctx.object_name = self.id_()
                pass
            elif token in [217]:
                self.state = 3186
                self.match(TSqlParser.DATABASE)
                pass
            elif token in [22]:
                self.state = 3187
                self.match(TSqlParser.ALL)
                self.state = 3188
                self.match(TSqlParser.SERVER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enable_triggerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # Id_Context
            self.trigger_name = None # Id_Context
            self.schema_id = None # Id_Context
            self.object_name = None # Id_Context

        def ENABLE(self):
            return self.getToken(TSqlParser.ENABLE, 0)

        def TRIGGER(self):
            return self.getToken(TSqlParser.TRIGGER, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ALL)
            else:
                return self.getToken(TSqlParser.ALL, i)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_enable_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnable_trigger" ):
                listener.enterEnable_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnable_trigger" ):
                listener.exitEnable_trigger(self)




    def enable_trigger(self):

        localctx = TSqlParser.Enable_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_enable_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3191
            self.match(TSqlParser.ENABLE)
            self.state = 3192
            self.match(TSqlParser.TRIGGER)
            self.state = 3207
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169, 1194]:
                self.state = 3202 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3194
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 3193
                        self.match(TSqlParser.COMMA)


                    self.state = 3199
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
                    if la_ == 1:
                        self.state = 3196
                        localctx.schema_name = self.id_()
                        self.state = 3197
                        self.match(TSqlParser.DOT)


                    self.state = 3201
                    localctx.trigger_name = self.id_()
                    self.state = 3204 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6845834611130385) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4691064178111676937) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8067776519934725599) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387491794949) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714895912701) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755875440852549633) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873769796032868641) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510937462965505) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799299309863) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -651161675377934355) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -387309693044787745) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689521) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906573) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 4294967467) != 0)):
                        break

                pass
            elif token in [22]:
                self.state = 3206
                self.match(TSqlParser.ALL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3209
            self.match(TSqlParser.ON)
            self.state = 3219
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                self.state = 3213
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
                if la_ == 1:
                    self.state = 3210
                    localctx.schema_id = self.id_()
                    self.state = 3211
                    self.match(TSqlParser.DOT)


                self.state = 3215
                localctx.object_name = self.id_()
                pass
            elif token in [217]:
                self.state = 3216
                self.match(TSqlParser.DATABASE)
                pass
            elif token in [22]:
                self.state = 3217
                self.match(TSqlParser.ALL)
                self.state = 3218
                self.match(TSqlParser.SERVER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.seconds = None # Token

        def LOCK(self):
            return self.getToken(TSqlParser.LOCK, 0)

        def TABLE(self):
            return self.getToken(TSqlParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def IN(self):
            return self.getToken(TSqlParser.IN, 0)

        def MODE(self):
            return self.getToken(TSqlParser.MODE, 0)

        def SHARE(self):
            return self.getToken(TSqlParser.SHARE, 0)

        def EXCLUSIVE(self):
            return self.getToken(TSqlParser.EXCLUSIVE, 0)

        def WAIT(self):
            return self.getToken(TSqlParser.WAIT, 0)

        def NOWAIT(self):
            return self.getToken(TSqlParser.NOWAIT, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_lock_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_table" ):
                listener.enterLock_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_table" ):
                listener.exitLock_table(self)




    def lock_table(self):

        localctx = TSqlParser.Lock_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_lock_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3221
            self.match(TSqlParser.LOCK)
            self.state = 3222
            self.match(TSqlParser.TABLE)
            self.state = 3223
            self.table_name()
            self.state = 3224
            self.match(TSqlParser.IN)
            self.state = 3225
            _la = self._input.LA(1)
            if not(_la==315 or _la==892):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3226
            self.match(TSqlParser.MODE)
            self.state = 3230
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                self.state = 3227
                self.match(TSqlParser.WAIT)
                self.state = 3228
                localctx.seconds = self.match(TSqlParser.DECIMAL)

            elif la_ == 2:
                self.state = 3229
                self.match(TSqlParser.NOWAIT)


            self.state = 3233
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.state = 3232
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Truncate_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUNCATE(self):
            return self.getToken(TSqlParser.TRUNCATE, 0)

        def TABLE(self):
            return self.getToken(TSqlParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def PARTITIONS(self):
            return self.getToken(TSqlParser.PARTITIONS, 0)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TO)
            else:
                return self.getToken(TSqlParser.TO, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_truncate_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncate_table" ):
                listener.enterTruncate_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncate_table" ):
                listener.exitTruncate_table(self)




    def truncate_table(self):

        localctx = TSqlParser.Truncate_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_truncate_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3235
            self.match(TSqlParser.TRUNCATE)
            self.state = 3236
            self.match(TSqlParser.TABLE)
            self.state = 3237
            self.table_name()
            self.state = 3257
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
            if la_ == 1:
                self.state = 3238
                self.match(TSqlParser.WITH)
                self.state = 3239
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3240
                self.match(TSqlParser.PARTITIONS)
                self.state = 3241
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3251 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3243
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 3242
                        self.match(TSqlParser.COMMA)


                    self.state = 3249
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
                    if la_ == 1:
                        self.state = 3245
                        self.match(TSqlParser.DECIMAL)
                        pass

                    elif la_ == 2:
                        self.state = 3246
                        self.match(TSqlParser.DECIMAL)
                        self.state = 3247
                        self.match(TSqlParser.TO)
                        self.state = 3248
                        self.match(TSqlParser.DECIMAL)
                        pass


                    self.state = 3253 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1168 or _la==1194):
                        break

                self.state = 3255
                self.match(TSqlParser.RR_BRACKET)
                self.state = 3256
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_column_master_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key_name = None # Id_Context
            self.key_store_provider_name = None # Token
            self.key_path = None # Token

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def COLUMN(self):
            return self.getToken(TSqlParser.COLUMN, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def KEY_STORE_PROVIDER_NAME(self):
            return self.getToken(TSqlParser.KEY_STORE_PROVIDER_NAME, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def KEY_PATH(self):
            return self.getToken(TSqlParser.KEY_PATH, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_column_master_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_column_master_key" ):
                listener.enterCreate_column_master_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_column_master_key" ):
                listener.exitCreate_column_master_key(self)




    def create_column_master_key(self):

        localctx = TSqlParser.Create_column_master_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_create_column_master_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3259
            self.match(TSqlParser.CREATE)
            self.state = 3260
            self.match(TSqlParser.COLUMN)
            self.state = 3261
            self.match(TSqlParser.MASTER)
            self.state = 3262
            self.match(TSqlParser.KEY)
            self.state = 3263
            localctx.key_name = self.id_()
            self.state = 3264
            self.match(TSqlParser.WITH)
            self.state = 3265
            self.match(TSqlParser.LR_BRACKET)
            self.state = 3266
            self.match(TSqlParser.KEY_STORE_PROVIDER_NAME)
            self.state = 3267
            self.match(TSqlParser.EQUAL)
            self.state = 3268
            localctx.key_store_provider_name = self.match(TSqlParser.STRING)
            self.state = 3269
            self.match(TSqlParser.COMMA)
            self.state = 3270
            self.match(TSqlParser.KEY_PATH)
            self.state = 3271
            self.match(TSqlParser.EQUAL)
            self.state = 3272
            localctx.key_path = self.match(TSqlParser.STRING)
            self.state = 3273
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_credentialContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.credential_name = None # Id_Context
            self.identity_name = None # Token
            self.secret = None # Token

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def CREDENTIAL(self):
            return self.getToken(TSqlParser.CREDENTIAL, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def IDENTITY(self):
            return self.getToken(TSqlParser.IDENTITY, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def SECRET(self):
            return self.getToken(TSqlParser.SECRET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_credential

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_credential" ):
                listener.enterAlter_credential(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_credential" ):
                listener.exitAlter_credential(self)




    def alter_credential(self):

        localctx = TSqlParser.Alter_credentialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_alter_credential)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3275
            self.match(TSqlParser.ALTER)
            self.state = 3276
            self.match(TSqlParser.CREDENTIAL)
            self.state = 3277
            localctx.credential_name = self.id_()
            self.state = 3278
            self.match(TSqlParser.WITH)
            self.state = 3279
            self.match(TSqlParser.IDENTITY)
            self.state = 3280
            self.match(TSqlParser.EQUAL)
            self.state = 3281
            localctx.identity_name = self.match(TSqlParser.STRING)
            self.state = 3286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1194:
                self.state = 3282
                self.match(TSqlParser.COMMA)
                self.state = 3283
                self.match(TSqlParser.SECRET)
                self.state = 3284
                self.match(TSqlParser.EQUAL)
                self.state = 3285
                localctx.secret = self.match(TSqlParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_credentialContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.credential_name = None # Id_Context
            self.identity_name = None # Token
            self.secret = None # Token
            self.cryptographic_provider_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def CREDENTIAL(self):
            return self.getToken(TSqlParser.CREDENTIAL, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def IDENTITY(self):
            return self.getToken(TSqlParser.IDENTITY, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def SECRET(self):
            return self.getToken(TSqlParser.SECRET, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def CRYPTOGRAPHIC(self):
            return self.getToken(TSqlParser.CRYPTOGRAPHIC, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_credential

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_credential" ):
                listener.enterCreate_credential(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_credential" ):
                listener.exitCreate_credential(self)




    def create_credential(self):

        localctx = TSqlParser.Create_credentialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_create_credential)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3288
            self.match(TSqlParser.CREATE)
            self.state = 3289
            self.match(TSqlParser.CREDENTIAL)
            self.state = 3290
            localctx.credential_name = self.id_()
            self.state = 3291
            self.match(TSqlParser.WITH)
            self.state = 3292
            self.match(TSqlParser.IDENTITY)
            self.state = 3293
            self.match(TSqlParser.EQUAL)
            self.state = 3294
            localctx.identity_name = self.match(TSqlParser.STRING)
            self.state = 3299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1194:
                self.state = 3295
                self.match(TSqlParser.COMMA)
                self.state = 3296
                self.match(TSqlParser.SECRET)
                self.state = 3297
                self.match(TSqlParser.EQUAL)
                self.state = 3298
                localctx.secret = self.match(TSqlParser.STRING)


            self.state = 3305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==363:
                self.state = 3301
                self.match(TSqlParser.FOR)
                self.state = 3302
                self.match(TSqlParser.CRYPTOGRAPHIC)
                self.state = 3303
                self.match(TSqlParser.PROVIDER)
                self.state = 3304
                localctx.cryptographic_provider_name = self.id_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_cryptographic_providerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider_name = None # Id_Context
            self.crypto_provider_ddl_file = None # Token

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def CRYPTOGRAPHIC(self):
            return self.getToken(TSqlParser.CRYPTOGRAPHIC, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def ENABLE(self):
            return self.getToken(TSqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(TSqlParser.DISABLE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_cryptographic_provider

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_cryptographic_provider" ):
                listener.enterAlter_cryptographic_provider(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_cryptographic_provider" ):
                listener.exitAlter_cryptographic_provider(self)




    def alter_cryptographic_provider(self):

        localctx = TSqlParser.Alter_cryptographic_providerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_alter_cryptographic_provider)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3307
            self.match(TSqlParser.ALTER)
            self.state = 3308
            self.match(TSqlParser.CRYPTOGRAPHIC)
            self.state = 3309
            self.match(TSqlParser.PROVIDER)
            self.state = 3310
            localctx.provider_name = self.id_()
            self.state = 3315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==378:
                self.state = 3311
                self.match(TSqlParser.FROM)
                self.state = 3312
                self.match(TSqlParser.FILE)
                self.state = 3313
                self.match(TSqlParser.EQUAL)
                self.state = 3314
                localctx.crypto_provider_ddl_file = self.match(TSqlParser.STRING)


            self.state = 3318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.state = 3317
                _la = self._input.LA(1)
                if not(_la==268 or _la==290):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_cryptographic_providerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider_name = None # Id_Context
            self.path_of_DLL = None # Token

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def CRYPTOGRAPHIC(self):
            return self.getToken(TSqlParser.CRYPTOGRAPHIC, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_cryptographic_provider

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_cryptographic_provider" ):
                listener.enterCreate_cryptographic_provider(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_cryptographic_provider" ):
                listener.exitCreate_cryptographic_provider(self)




    def create_cryptographic_provider(self):

        localctx = TSqlParser.Create_cryptographic_providerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_create_cryptographic_provider)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3320
            self.match(TSqlParser.CREATE)
            self.state = 3321
            self.match(TSqlParser.CRYPTOGRAPHIC)
            self.state = 3322
            self.match(TSqlParser.PROVIDER)
            self.state = 3323
            localctx.provider_name = self.id_()
            self.state = 3324
            self.match(TSqlParser.FROM)
            self.state = 3325
            self.match(TSqlParser.FILE)
            self.state = 3326
            self.match(TSqlParser.EQUAL)
            self.state = 3327
            localctx.path_of_DLL = self.match(TSqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_endpointContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.endpointname = None # Id_Context
            self.login = None # Id_Context
            self.state = None # Token

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def ENDPOINT(self):
            return self.getToken(TSqlParser.ENDPOINT, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def TCP(self):
            return self.getToken(TSqlParser.TCP, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def endpoint_listener_clause(self):
            return self.getTypedRuleContext(TSqlParser.Endpoint_listener_clauseContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def TSQL(self):
            return self.getToken(TSqlParser.TSQL, 0)

        def SERVICE_BROKER(self):
            return self.getToken(TSqlParser.SERVICE_BROKER, 0)

        def endpoint_authentication_clause(self):
            return self.getTypedRuleContext(TSqlParser.Endpoint_authentication_clauseContext,0)


        def DATABASE_MIRRORING(self):
            return self.getToken(TSqlParser.DATABASE_MIRRORING, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def STATE(self):
            return self.getToken(TSqlParser.STATE, 0)

        def WITNESS(self):
            return self.getToken(TSqlParser.WITNESS, 0)

        def PARTNER(self):
            return self.getToken(TSqlParser.PARTNER, 0)

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def STARTED(self):
            return self.getToken(TSqlParser.STARTED, 0)

        def STOPPED(self):
            return self.getToken(TSqlParser.STOPPED, 0)

        def DISABLED(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DISABLED)
            else:
                return self.getToken(TSqlParser.DISABLED, i)

        def endpoint_encryption_alogorithm_clause(self):
            return self.getTypedRuleContext(TSqlParser.Endpoint_encryption_alogorithm_clauseContext,0)


        def MESSAGE_FORWARDING(self):
            return self.getToken(TSqlParser.MESSAGE_FORWARDING, 0)

        def MESSAGE_FORWARD_SIZE(self):
            return self.getToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def ENABLED(self):
            return self.getToken(TSqlParser.ENABLED, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_endpoint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_endpoint" ):
                listener.enterCreate_endpoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_endpoint" ):
                listener.exitCreate_endpoint(self)




    def create_endpoint(self):

        localctx = TSqlParser.Create_endpointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_create_endpoint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3329
            self.match(TSqlParser.CREATE)
            self.state = 3330
            self.match(TSqlParser.ENDPOINT)
            self.state = 3331
            localctx.endpointname = self.id_()
            self.state = 3334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 3332
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 3333
                localctx.login = self.id_()


            self.state = 3339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==929:
                self.state = 3336
                self.match(TSqlParser.STATE)
                self.state = 3337
                self.match(TSqlParser.EQUAL)
                self.state = 3338
                localctx.state = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==269 or _la==926 or _la==943):
                    localctx.state = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3341
            self.match(TSqlParser.AS)
            self.state = 3342
            self.match(TSqlParser.TCP)
            self.state = 3343
            self.match(TSqlParser.LR_BRACKET)
            self.state = 3344
            self.endpoint_listener_clause()
            self.state = 3345
            self.match(TSqlParser.RR_BRACKET)
            self.state = 3396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.state = 3346
                self.match(TSqlParser.FOR)
                self.state = 3347
                self.match(TSqlParser.TSQL)
                self.state = 3348
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3349
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.state = 3350
                self.match(TSqlParser.FOR)
                self.state = 3351
                self.match(TSqlParser.SERVICE_BROKER)
                self.state = 3352
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3353
                self.endpoint_authentication_clause()
                self.state = 3358
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
                if la_ == 1:
                    self.state = 3355
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 3354
                        self.match(TSqlParser.COMMA)


                    self.state = 3357
                    self.endpoint_encryption_alogorithm_clause()


                self.state = 3366
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
                if la_ == 1:
                    self.state = 3361
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 3360
                        self.match(TSqlParser.COMMA)


                    self.state = 3363
                    self.match(TSqlParser.MESSAGE_FORWARDING)
                    self.state = 3364
                    self.match(TSqlParser.EQUAL)
                    self.state = 3365
                    _la = self._input.LA(1)
                    if not(_la==269 or _la==291):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==567 or _la==1194:
                    self.state = 3369
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 3368
                        self.match(TSqlParser.COMMA)


                    self.state = 3371
                    self.match(TSqlParser.MESSAGE_FORWARD_SIZE)
                    self.state = 3372
                    self.match(TSqlParser.EQUAL)
                    self.state = 3373
                    self.match(TSqlParser.DECIMAL)


                self.state = 3376
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.state = 3378
                self.match(TSqlParser.FOR)
                self.state = 3379
                self.match(TSqlParser.DATABASE_MIRRORING)
                self.state = 3380
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3381
                self.endpoint_authentication_clause()
                self.state = 3386
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
                if la_ == 1:
                    self.state = 3383
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 3382
                        self.match(TSqlParser.COMMA)


                    self.state = 3385
                    self.endpoint_encryption_alogorithm_clause()


                self.state = 3389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 3388
                    self.match(TSqlParser.COMMA)


                self.state = 3391
                self.match(TSqlParser.ROLE)
                self.state = 3392
                self.match(TSqlParser.EQUAL)
                self.state = 3393
                _la = self._input.LA(1)
                if not(_la==22 or _la==689 or _la==1067):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3394
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Endpoint_encryption_alogorithm_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def DISABLED(self):
            return self.getToken(TSqlParser.DISABLED, 0)

        def SUPPORTED(self):
            return self.getToken(TSqlParser.SUPPORTED, 0)

        def REQUIRED(self):
            return self.getToken(TSqlParser.REQUIRED, 0)

        def ALGORITHM(self):
            return self.getToken(TSqlParser.ALGORITHM, 0)

        def AES(self):
            return self.getToken(TSqlParser.AES, 0)

        def RC4(self):
            return self.getToken(TSqlParser.RC4, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_endpoint_encryption_alogorithm_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndpoint_encryption_alogorithm_clause" ):
                listener.enterEndpoint_encryption_alogorithm_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndpoint_encryption_alogorithm_clause" ):
                listener.exitEndpoint_encryption_alogorithm_clause(self)




    def endpoint_encryption_alogorithm_clause(self):

        localctx = TSqlParser.Endpoint_encryption_alogorithm_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_endpoint_encryption_alogorithm_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3398
            self.match(TSqlParser.ENCRYPTION)
            self.state = 3399
            self.match(TSqlParser.EQUAL)
            self.state = 3400
            _la = self._input.LA(1)
            if not(_la==269 or _la==795 or _la==954):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 3401
                self.match(TSqlParser.ALGORITHM)
                self.state = 3410
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14]:
                    self.state = 3402
                    self.match(TSqlParser.AES)
                    self.state = 3404
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==752:
                        self.state = 3403
                        self.match(TSqlParser.RC4)


                    pass
                elif token in [752]:
                    self.state = 3406
                    self.match(TSqlParser.RC4)
                    self.state = 3408
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==14:
                        self.state = 3407
                        self.match(TSqlParser.AES)


                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Endpoint_authentication_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cert_name = None # Id_Context

        def AUTHENTICATION(self):
            return self.getToken(TSqlParser.AUTHENTICATION, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def WINDOWS(self):
            return self.getToken(TSqlParser.WINDOWS, 0)

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def NTLM(self):
            return self.getToken(TSqlParser.NTLM, 0)

        def KERBEROS(self):
            return self.getToken(TSqlParser.KERBEROS, 0)

        def NEGOTIATE(self):
            return self.getToken(TSqlParser.NEGOTIATE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_endpoint_authentication_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndpoint_authentication_clause" ):
                listener.enterEndpoint_authentication_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndpoint_authentication_clause" ):
                listener.exitEndpoint_authentication_clause(self)




    def endpoint_authentication_clause(self):

        localctx = TSqlParser.Endpoint_authentication_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_endpoint_authentication_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3414
            self.match(TSqlParser.AUTHENTICATION)
            self.state = 3415
            self.match(TSqlParser.EQUAL)
            self.state = 3432
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1062]:
                self.state = 3416
                self.match(TSqlParser.WINDOWS)
                self.state = 3418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==488 or _la==587 or _la==628:
                    self.state = 3417
                    _la = self._input.LA(1)
                    if not(_la==488 or _la==587 or _la==628):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121:
                    self.state = 3420
                    self.match(TSqlParser.CERTIFICATE)
                    self.state = 3421
                    localctx.cert_name = self.id_()


                pass
            elif token in [121]:
                self.state = 3424
                self.match(TSqlParser.CERTIFICATE)
                self.state = 3425
                localctx.cert_name = self.id_()
                self.state = 3427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1062:
                    self.state = 3426
                    self.match(TSqlParser.WINDOWS)


                self.state = 3430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==488 or _la==587 or _la==628:
                    self.state = 3429
                    _la = self._input.LA(1)
                    if not(_la==488 or _la==587 or _la==628):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Endpoint_listener_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.port = None # Token
            self.ipv4 = None # Token
            self.ipv6 = None # Token

        def LISTENER_PORT(self):
            return self.getToken(TSqlParser.LISTENER_PORT, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def LISTENER_IP(self):
            return self.getToken(TSqlParser.LISTENER_IP, 0)

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def IPV4_ADDR(self):
            return self.getToken(TSqlParser.IPV4_ADDR, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_endpoint_listener_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndpoint_listener_clause" ):
                listener.enterEndpoint_listener_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndpoint_listener_clause" ):
                listener.exitEndpoint_listener_clause(self)




    def endpoint_listener_clause(self):

        localctx = TSqlParser.Endpoint_listener_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_endpoint_listener_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3434
            self.match(TSqlParser.LISTENER_PORT)
            self.state = 3435
            self.match(TSqlParser.EQUAL)
            self.state = 3436
            localctx.port = self.match(TSqlParser.DECIMAL)
            self.state = 3449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1194:
                self.state = 3437
                self.match(TSqlParser.COMMA)
                self.state = 3438
                self.match(TSqlParser.LISTENER_IP)
                self.state = 3439
                self.match(TSqlParser.EQUAL)
                self.state = 3447
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [22]:
                    self.state = 3440
                    self.match(TSqlParser.ALL)
                    pass
                elif token in [1192]:
                    self.state = 3441
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 3444
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1158]:
                        self.state = 3442
                        localctx.ipv4 = self.match(TSqlParser.IPV4_ADDR)
                        pass
                    elif token in [1170]:
                        self.state = 3443
                        localctx.ipv6 = self.match(TSqlParser.STRING)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3446
                    self.match(TSqlParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_event_notificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.event_notification_name = None # Id_Context
            self.queue_name = None # Id_Context
            self.event_type_or_group = None # Id_Context
            self.broker_service = None # Token
            self.broker_service_specifier_or_current_database = None # Token

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def EVENT(self):
            return self.getToken(TSqlParser.EVENT, 0)

        def NOTIFICATION(self):
            return self.getToken(TSqlParser.NOTIFICATION, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def SERVICE(self):
            return self.getToken(TSqlParser.SERVICE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def QUEUE(self):
            return self.getToken(TSqlParser.QUEUE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def FAN_IN(self):
            return self.getToken(TSqlParser.FAN_IN, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_event_notification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_event_notification" ):
                listener.enterCreate_event_notification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_event_notification" ):
                listener.exitCreate_event_notification(self)




    def create_event_notification(self):

        localctx = TSqlParser.Create_event_notificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_create_event_notification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3451
            self.match(TSqlParser.CREATE)
            self.state = 3452
            self.match(TSqlParser.EVENT)
            self.state = 3453
            self.match(TSqlParser.NOTIFICATION)
            self.state = 3454
            localctx.event_notification_name = self.id_()
            self.state = 3455
            self.match(TSqlParser.ON)
            self.state = 3460
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [876]:
                self.state = 3456
                self.match(TSqlParser.SERVER)
                pass
            elif token in [217]:
                self.state = 3457
                self.match(TSqlParser.DATABASE)
                pass
            elif token in [741]:
                self.state = 3458
                self.match(TSqlParser.QUEUE)
                self.state = 3459
                localctx.queue_name = self.id_()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1063:
                self.state = 3462
                self.match(TSqlParser.WITH)
                self.state = 3463
                self.match(TSqlParser.FAN_IN)


            self.state = 3466
            self.match(TSqlParser.FOR)
            self.state = 3471 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 3467
                    self.match(TSqlParser.COMMA)


                self.state = 3470
                localctx.event_type_or_group = self.id_()
                self.state = 3473 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6845834611130385) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4691064178111676937) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8067776519934725599) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387491794949) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714895912701) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755875440852549633) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873769796032868641) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510937462965505) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799299309863) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -651161675377934355) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -387309693044787745) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689521) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906573) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 4294967467) != 0)):
                    break

            self.state = 3475
            self.match(TSqlParser.TO)
            self.state = 3476
            self.match(TSqlParser.SERVICE)
            self.state = 3477
            localctx.broker_service = self.match(TSqlParser.STRING)
            self.state = 3478
            self.match(TSqlParser.COMMA)
            self.state = 3479
            localctx.broker_service_specifier_or_current_database = self.match(TSqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_or_alter_event_sessionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.event_session_name = None # Id_Context
            self.event_module_guid = None # Id_Context
            self.event_package_name = None # Id_Context
            self.event_name = None # Id_Context
            self.event_customizable_attributue = None # Id_Context
            self.action_name = None # Id_Context
            self.target_name = None # Id_Context
            self.target_parameter_name = None # Id_Context
            self.max_memory = None # Token
            self.max_dispatch_latency_seconds = None # Token
            self.max_event_size = None # Token

        def EVENT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EVENT)
            else:
                return self.getToken(TSqlParser.EVENT, i)

        def SESSION(self):
            return self.getToken(TSqlParser.SESSION, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def ADD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ADD)
            else:
                return self.getToken(TSqlParser.ADD, i)

        def DROP(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DROP)
            else:
                return self.getToken(TSqlParser.DROP, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def TARGET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TARGET)
            else:
                return self.getToken(TSqlParser.TARGET, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def STATE(self):
            return self.getToken(TSqlParser.STATE, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def START(self):
            return self.getToken(TSqlParser.START, 0)

        def STOP(self):
            return self.getToken(TSqlParser.STOP, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SET)
            else:
                return self.getToken(TSqlParser.SET, i)

        def MAX_MEMORY(self):
            return self.getToken(TSqlParser.MAX_MEMORY, 0)

        def EVENT_RETENTION_MODE(self):
            return self.getToken(TSqlParser.EVENT_RETENTION_MODE, 0)

        def MAX_DISPATCH_LATENCY(self):
            return self.getToken(TSqlParser.MAX_DISPATCH_LATENCY, 0)

        def MAX_EVENT_SIZE(self):
            return self.getToken(TSqlParser.MAX_EVENT_SIZE, 0)

        def MEMORY_PARTITION_MODE(self):
            return self.getToken(TSqlParser.MEMORY_PARTITION_MODE, 0)

        def TRACK_CAUSALITY(self):
            return self.getToken(TSqlParser.TRACK_CAUSALITY, 0)

        def STARTUP_STATE(self):
            return self.getToken(TSqlParser.STARTUP_STATE, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def KB(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.KB)
            else:
                return self.getToken(TSqlParser.KB, i)

        def MB(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MB)
            else:
                return self.getToken(TSqlParser.MB, i)

        def ALLOW_SINGLE_EVENT_LOSS(self):
            return self.getToken(TSqlParser.ALLOW_SINGLE_EVENT_LOSS, 0)

        def ALLOW_MULTIPLE_EVENT_LOSS(self):
            return self.getToken(TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS, 0)

        def NO_EVENT_LOSS(self):
            return self.getToken(TSqlParser.NO_EVENT_LOSS, 0)

        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def PER_NODE(self):
            return self.getToken(TSqlParser.PER_NODE, 0)

        def PER_CPU(self):
            return self.getToken(TSqlParser.PER_CPU, 0)

        def OFF(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OFF)
            else:
                return self.getToken(TSqlParser.OFF, i)

        def SECONDS(self):
            return self.getToken(TSqlParser.SECONDS, 0)

        def INFINITE(self):
            return self.getToken(TSqlParser.INFINITE, 0)

        def ACTION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ACTION)
            else:
                return self.getToken(TSqlParser.ACTION, i)

        def WHERE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.WHERE)
            else:
                return self.getToken(TSqlParser.WHERE, i)

        def event_session_predicate_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Event_session_predicate_expressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Event_session_predicate_expressionContext,i)


        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_or_alter_event_session

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_or_alter_event_session" ):
                listener.enterCreate_or_alter_event_session(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_or_alter_event_session" ):
                listener.exitCreate_or_alter_event_session(self)




    def create_or_alter_event_session(self):

        localctx = TSqlParser.Create_or_alter_event_sessionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_create_or_alter_event_session)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3481
            _la = self._input.LA(1)
            if not(_la==35 or _la==197):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3482
            self.match(TSqlParser.EVENT)
            self.state = 3483
            self.match(TSqlParser.SESSION)
            self.state = 3484
            localctx.event_session_name = self.id_()
            self.state = 3485
            self.match(TSqlParser.ON)
            self.state = 3486
            self.match(TSqlParser.SERVER)
            self.state = 3554
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,283,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3488
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 3487
                        self.match(TSqlParser.COMMA)


                    self.state = 3490
                    self.match(TSqlParser.ADD)
                    self.state = 3491
                    self.match(TSqlParser.EVENT)

                    self.state = 3495
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
                    if la_ == 1:
                        self.state = 3492
                        localctx.event_module_guid = self.id_()
                        self.state = 3493
                        self.match(TSqlParser.DOT)


                    self.state = 3497
                    localctx.event_package_name = self.id_()
                    self.state = 3498
                    self.match(TSqlParser.DOT)
                    self.state = 3499
                    localctx.event_name = self.id_()
                    self.state = 3549
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,282,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 3501
                            self.match(TSqlParser.LR_BRACKET)
                            self.state = 3515
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==887:
                                self.state = 3502
                                self.match(TSqlParser.SET)
                                self.state = 3512
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,275,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 3504
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)
                                        if _la==1194:
                                            self.state = 3503
                                            self.match(TSqlParser.COMMA)


                                        self.state = 3506
                                        localctx.event_customizable_attributue = self.id_()
                                        self.state = 3507
                                        self.match(TSqlParser.EQUAL)
                                        self.state = 3508
                                        _la = self._input.LA(1)
                                        if not(_la==1168 or _la==1170):
                                            self._errHandler.recoverInline(self)
                                        else:
                                            self._errHandler.reportMatch(self)
                                            self.consume() 
                                    self.state = 3514
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,275,self._ctx)



                            self.state = 3537 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 3517
                                self.match(TSqlParser.ACTION)
                                self.state = 3518
                                self.match(TSqlParser.LR_BRACKET)
                                self.state = 3531 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 3520
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if _la==1194:
                                        self.state = 3519
                                        self.match(TSqlParser.COMMA)


                                    self.state = 3525
                                    self._errHandler.sync(self)
                                    la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
                                    if la_ == 1:
                                        self.state = 3522
                                        localctx.event_module_guid = self.id_()
                                        self.state = 3523
                                        self.match(TSqlParser.DOT)


                                    self.state = 3527
                                    localctx.event_package_name = self.id_()
                                    self.state = 3528
                                    self.match(TSqlParser.DOT)
                                    self.state = 3529
                                    localctx.action_name = self.id_()
                                    self.state = 3533 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6845834611130385) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4691064178111676937) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8067776519934725599) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387491794949) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714895912701) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755875440852549633) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873769796032868641) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510937462965505) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799299309863) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -651161675377934355) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -387309693044787745) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689521) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906573) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 4294967467) != 0)):
                                        break

                                self.state = 3535
                                self.match(TSqlParser.RR_BRACKET)
                                self.state = 3539 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==8):
                                    break

                            self.state = 3543
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1060:
                                self.state = 3541
                                self.match(TSqlParser.WHERE)
                                self.state = 3542
                                self.event_session_predicate_expression()


                            self.state = 3545
                            self.match(TSqlParser.RR_BRACKET) 
                        self.state = 3551
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,282,self._ctx)
             
                self.state = 3556
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,283,self._ctx)

            self.state = 3573
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,286,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3558
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 3557
                        self.match(TSqlParser.COMMA)


                    self.state = 3560
                    self.match(TSqlParser.DROP)
                    self.state = 3561
                    self.match(TSqlParser.EVENT)
                    self.state = 3565
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
                    if la_ == 1:
                        self.state = 3562
                        localctx.event_module_guid = self.id_()
                        self.state = 3563
                        self.match(TSqlParser.DOT)


                    self.state = 3567
                    localctx.event_package_name = self.id_()
                    self.state = 3568
                    self.match(TSqlParser.DOT)
                    self.state = 3569
                    localctx.event_name = self.id_() 
                self.state = 3575
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,286,self._ctx)

            self.state = 3617
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,294,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3576
                    self.match(TSqlParser.ADD)
                    self.state = 3577
                    self.match(TSqlParser.TARGET)
                    self.state = 3581
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
                    if la_ == 1:
                        self.state = 3578
                        localctx.event_module_guid = self.id_()
                        self.state = 3579
                        self.match(TSqlParser.DOT)


                    self.state = 3583
                    localctx.event_package_name = self.id_()
                    self.state = 3584
                    self.match(TSqlParser.DOT)
                    self.state = 3585
                    localctx.target_name = self.id_()
                    self.state = 3612
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,293,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 3587
                            self.match(TSqlParser.LR_BRACKET)
                            self.state = 3588
                            self.match(TSqlParser.SET)
                            self.state = 3604 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 3590
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 3589
                                    self.match(TSqlParser.COMMA)


                                self.state = 3592
                                localctx.target_parameter_name = self.id_()
                                self.state = 3593
                                self.match(TSqlParser.EQUAL)
                                self.state = 3602
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [1168, 1192]:
                                    self.state = 3595
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if _la==1192:
                                        self.state = 3594
                                        self.match(TSqlParser.LR_BRACKET)


                                    self.state = 3597
                                    self.match(TSqlParser.DECIMAL)
                                    self.state = 3599
                                    self._errHandler.sync(self)
                                    la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
                                    if la_ == 1:
                                        self.state = 3598
                                        self.match(TSqlParser.RR_BRACKET)


                                    pass
                                elif token in [1170]:
                                    self.state = 3601
                                    self.match(TSqlParser.STRING)
                                    pass
                                else:
                                    raise NoViableAltException(self)

                                self.state = 3606 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6845834611130385) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4691064178111676937) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8067776519934725599) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387491794949) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714895912701) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755875440852549633) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873769796032868641) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510937462965505) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799299309863) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -651161675377934355) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -387309693044787745) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689521) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906573) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 4294967467) != 0)):
                                    break

                            self.state = 3608
                            self.match(TSqlParser.RR_BRACKET) 
                        self.state = 3614
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,293,self._ctx)
             
                self.state = 3619
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,294,self._ctx)

            self.state = 3633
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,296,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3620
                    self.match(TSqlParser.DROP)
                    self.state = 3621
                    self.match(TSqlParser.TARGET)
                    self.state = 3625
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
                    if la_ == 1:
                        self.state = 3622
                        localctx.event_module_guid = self.id_()
                        self.state = 3623
                        self.match(TSqlParser.DOT)


                    self.state = 3627
                    localctx.event_package_name = self.id_()
                    self.state = 3628
                    self.match(TSqlParser.DOT)
                    self.state = 3629
                    localctx.target_name = self.id_() 
                self.state = 3635
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,296,self._ctx)

            self.state = 3701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
            if la_ == 1:
                self.state = 3636
                self.match(TSqlParser.WITH)
                self.state = 3637
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3645
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
                if la_ == 1:
                    self.state = 3639
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 3638
                        self.match(TSqlParser.COMMA)


                    self.state = 3641
                    self.match(TSqlParser.MAX_MEMORY)
                    self.state = 3642
                    self.match(TSqlParser.EQUAL)
                    self.state = 3643
                    localctx.max_memory = self.match(TSqlParser.DECIMAL)
                    self.state = 3644
                    _la = self._input.LA(1)
                    if not(_la==483 or _la==557):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3653
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
                if la_ == 1:
                    self.state = 3648
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 3647
                        self.match(TSqlParser.COMMA)


                    self.state = 3650
                    self.match(TSqlParser.EVENT_RETENTION_MODE)
                    self.state = 3651
                    self.match(TSqlParser.EQUAL)
                    self.state = 3652
                    _la = self._input.LA(1)
                    if not(_la==26 or _la==29 or _la==621):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3665
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
                if la_ == 1:
                    self.state = 3656
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 3655
                        self.match(TSqlParser.COMMA)


                    self.state = 3658
                    self.match(TSqlParser.MAX_DISPATCH_LATENCY)
                    self.state = 3659
                    self.match(TSqlParser.EQUAL)
                    self.state = 3663
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1168]:
                        self.state = 3660
                        localctx.max_dispatch_latency_seconds = self.match(TSqlParser.DECIMAL)
                        self.state = 3661
                        self.match(TSqlParser.SECONDS)
                        pass
                    elif token in [451]:
                        self.state = 3662
                        self.match(TSqlParser.INFINITE)
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 3674
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
                if la_ == 1:
                    self.state = 3668
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 3667
                        self.match(TSqlParser.COMMA)


                    self.state = 3670
                    self.match(TSqlParser.MAX_EVENT_SIZE)
                    self.state = 3671
                    self.match(TSqlParser.EQUAL)
                    self.state = 3672
                    localctx.max_event_size = self.match(TSqlParser.DECIMAL)
                    self.state = 3673
                    _la = self._input.LA(1)
                    if not(_la==483 or _la==557):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3682
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
                if la_ == 1:
                    self.state = 3677
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 3676
                        self.match(TSqlParser.COMMA)


                    self.state = 3679
                    self.match(TSqlParser.MEMORY_PARTITION_MODE)
                    self.state = 3680
                    self.match(TSqlParser.EQUAL)
                    self.state = 3681
                    _la = self._input.LA(1)
                    if not(_la==608 or _la==703 or _la==705):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3690
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
                if la_ == 1:
                    self.state = 3685
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 3684
                        self.match(TSqlParser.COMMA)


                    self.state = 3687
                    self.match(TSqlParser.TRACK_CAUSALITY)
                    self.state = 3688
                    self.match(TSqlParser.EQUAL)
                    self.state = 3689
                    _la = self._input.LA(1)
                    if not(_la==643 or _la==649):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==927 or _la==1194:
                    self.state = 3693
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 3692
                        self.match(TSqlParser.COMMA)


                    self.state = 3695
                    self.match(TSqlParser.STARTUP_STATE)
                    self.state = 3696
                    self.match(TSqlParser.EQUAL)
                    self.state = 3697
                    _la = self._input.LA(1)
                    if not(_la==643 or _la==649):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3700
                self.match(TSqlParser.RR_BRACKET)


            self.state = 3706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                self.state = 3703
                self.match(TSqlParser.STATE)
                self.state = 3704
                self.match(TSqlParser.EQUAL)
                self.state = 3705
                _la = self._input.LA(1)
                if not(_la==925 or _la==941):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_session_predicate_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_session_predicate_factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Event_session_predicate_factorContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Event_session_predicate_factorContext,i)


        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def event_session_predicate_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Event_session_predicate_expressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Event_session_predicate_expressionContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOT)
            else:
                return self.getToken(TSqlParser.NOT, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AND)
            else:
                return self.getToken(TSqlParser.AND, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OR)
            else:
                return self.getToken(TSqlParser.OR, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_event_session_predicate_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_session_predicate_expression" ):
                listener.enterEvent_session_predicate_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_session_predicate_expression" ):
                listener.exitEvent_session_predicate_expression(self)




    def event_session_predicate_expression(self):

        localctx = TSqlParser.Event_session_predicate_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_event_session_predicate_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3724 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 3708
                    self.match(TSqlParser.COMMA)


                self.state = 3712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==37 or _la==665:
                    self.state = 3711
                    _la = self._input.LA(1)
                    if not(_la==37 or _la==665):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==614:
                    self.state = 3714
                    self.match(TSqlParser.NOT)


                self.state = 3722
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
                if la_ == 1:
                    self.state = 3717
                    self.event_session_predicate_factor()
                    pass

                elif la_ == 2:
                    self.state = 3718
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 3719
                    self.event_session_predicate_expression()
                    self.state = 3720
                    self.match(TSqlParser.RR_BRACKET)
                    pass


                self.state = 3726 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -216243185221894178) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6845834611130385) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4691064178111676937) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8067776519934725599) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387491794949) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714895912701) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755875440852549633) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873769796032868641) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510800024012033) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799282532647) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -651161675377934355) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -387309693044787745) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689521) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906573) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 5368709291) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_session_predicate_factorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_session_predicate_leaf(self):
            return self.getTypedRuleContext(TSqlParser.Event_session_predicate_leafContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def event_session_predicate_expression(self):
            return self.getTypedRuleContext(TSqlParser.Event_session_predicate_expressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_event_session_predicate_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_session_predicate_factor" ):
                listener.enterEvent_session_predicate_factor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_session_predicate_factor" ):
                listener.exitEvent_session_predicate_factor(self)




    def event_session_predicate_factor(self):

        localctx = TSqlParser.Event_session_predicate_factorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_event_session_predicate_factor)
        try:
            self.state = 3733
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3728
                self.event_session_predicate_leaf()
                pass
            elif token in [1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3729
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3730
                self.event_session_predicate_expression()
                self.state = 3731
                self.match(TSqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_session_predicate_leafContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.event_field_name = None # Id_Context
            self.event_module_guid = None # Id_Context
            self.event_package_name = None # Id_Context
            self.predicate_source_name = None # Id_Context
            self.predicate_compare_name = None # Id_Context

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def GREATER(self):
            return self.getToken(TSqlParser.GREATER, 0)

        def LESS(self):
            return self.getToken(TSqlParser.LESS, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def EXCLAMATION(self):
            return self.getToken(TSqlParser.EXCLAMATION, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_event_session_predicate_leaf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_session_predicate_leaf" ):
                listener.enterEvent_session_predicate_leaf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_session_predicate_leaf" ):
                listener.exitEvent_session_predicate_leaf(self)




    def event_session_predicate_leaf(self):

        localctx = TSqlParser.Event_session_predicate_leafContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_event_session_predicate_leaf)
        self._la = 0 # Token type
        try:
            self.state = 3791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,327,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3763
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
                if la_ == 1:
                    self.state = 3735
                    localctx.event_field_name = self.id_()
                    pass

                elif la_ == 2:
                    self.state = 3746
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
                    if la_ == 1:
                        self.state = 3736
                        localctx.event_field_name = self.id_()
                        pass

                    elif la_ == 2:
                        self.state = 3740
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,320,self._ctx)
                        if la_ == 1:
                            self.state = 3737
                            localctx.event_module_guid = self.id_()
                            self.state = 3738
                            self.match(TSqlParser.DOT)


                        self.state = 3742
                        localctx.event_package_name = self.id_()
                        self.state = 3743
                        self.match(TSqlParser.DOT)
                        self.state = 3744
                        localctx.predicate_source_name = self.id_()
                        pass


                    self.state = 3759
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
                    if la_ == 1:
                        self.state = 3748
                        self.match(TSqlParser.EQUAL)
                        pass

                    elif la_ == 2:
                        self.state = 3749
                        self.match(TSqlParser.LESS)
                        self.state = 3750
                        self.match(TSqlParser.GREATER)
                        pass

                    elif la_ == 3:
                        self.state = 3751
                        self.match(TSqlParser.EXCLAMATION)
                        self.state = 3752
                        self.match(TSqlParser.EQUAL)
                        pass

                    elif la_ == 4:
                        self.state = 3753
                        self.match(TSqlParser.GREATER)
                        pass

                    elif la_ == 5:
                        self.state = 3754
                        self.match(TSqlParser.GREATER)
                        self.state = 3755
                        self.match(TSqlParser.EQUAL)
                        pass

                    elif la_ == 6:
                        self.state = 3756
                        self.match(TSqlParser.LESS)
                        pass

                    elif la_ == 7:
                        self.state = 3757
                        self.match(TSqlParser.LESS)
                        self.state = 3758
                        self.match(TSqlParser.EQUAL)
                        pass


                    self.state = 3761
                    _la = self._input.LA(1)
                    if not(_la==1168 or _la==1170):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3768
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
                if la_ == 1:
                    self.state = 3765
                    localctx.event_module_guid = self.id_()
                    self.state = 3766
                    self.match(TSqlParser.DOT)


                self.state = 3770
                localctx.event_package_name = self.id_()
                self.state = 3771
                self.match(TSqlParser.DOT)
                self.state = 3772
                localctx.predicate_compare_name = self.id_()
                self.state = 3773
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3787
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
                if la_ == 1:
                    self.state = 3774
                    localctx.event_field_name = self.id_()
                    pass

                elif la_ == 2:
                    self.state = 3778
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,325,self._ctx)
                    if la_ == 1:
                        self.state = 3775
                        localctx.event_module_guid = self.id_()
                        self.state = 3776
                        self.match(TSqlParser.DOT)


                    self.state = 3780
                    localctx.event_package_name = self.id_()
                    self.state = 3781
                    self.match(TSqlParser.DOT)
                    self.state = 3782
                    localctx.predicate_source_name = self.id_()
                    self.state = 3784
                    self.match(TSqlParser.COMMA)
                    self.state = 3785
                    _la = self._input.LA(1)
                    if not(_la==1168 or _la==1170):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                self.state = 3789
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_external_data_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.data_source_name = None # Id_Context
            self.location = None # Token
            self.resource_manager_location = None # Token
            self.credential_name = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def DATA(self):
            return self.getToken(TSqlParser.DATA, 0)

        def SOURCE(self):
            return self.getToken(TSqlParser.SOURCE, 0)

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def LOCATION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOCATION)
            else:
                return self.getToken(TSqlParser.LOCATION, i)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def RESOURCE_MANAGER_LOCATION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RESOURCE_MANAGER_LOCATION)
            else:
                return self.getToken(TSqlParser.RESOURCE_MANAGER_LOCATION, i)

        def CREDENTIAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CREDENTIAL)
            else:
                return self.getToken(TSqlParser.CREDENTIAL, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def BLOB_STORAGE(self):
            return self.getToken(TSqlParser.BLOB_STORAGE, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_external_data_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_external_data_source" ):
                listener.enterAlter_external_data_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_external_data_source" ):
                listener.exitAlter_external_data_source(self)




    def alter_external_data_source(self):

        localctx = TSqlParser.Alter_external_data_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_alter_external_data_source)
        self._la = 0 # Token type
        try:
            self.state = 3840
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3793
                self.match(TSqlParser.ALTER)
                self.state = 3794
                self.match(TSqlParser.EXTERNAL)
                self.state = 3795
                self.match(TSqlParser.DATA)
                self.state = 3796
                self.match(TSqlParser.SOURCE)
                self.state = 3797
                localctx.data_source_name = self.id_()
                self.state = 3798
                self.match(TSqlParser.SET)
                self.state = 3814 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3814
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [520]:
                            self.state = 3799
                            self.match(TSqlParser.LOCATION)
                            self.state = 3800
                            self.match(TSqlParser.EQUAL)
                            self.state = 3801
                            localctx.location = self.match(TSqlParser.STRING)
                            self.state = 3803
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 3802
                                self.match(TSqlParser.COMMA)


                            pass
                        elif token in [802]:
                            self.state = 3805
                            self.match(TSqlParser.RESOURCE_MANAGER_LOCATION)
                            self.state = 3806
                            self.match(TSqlParser.EQUAL)
                            self.state = 3807
                            localctx.resource_manager_location = self.match(TSqlParser.STRING)
                            self.state = 3809
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 3808
                                self.match(TSqlParser.COMMA)


                            pass
                        elif token in [200]:
                            self.state = 3811
                            self.match(TSqlParser.CREDENTIAL)
                            self.state = 3812
                            self.match(TSqlParser.EQUAL)
                            self.state = 3813
                            localctx.credential_name = self.id_()
                            pass
                        else:
                            raise NoViableAltException(self)


                    else:
                        raise NoViableAltException(self)
                    self.state = 3816 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,331,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3818
                self.match(TSqlParser.ALTER)
                self.state = 3819
                self.match(TSqlParser.EXTERNAL)
                self.state = 3820
                self.match(TSqlParser.DATA)
                self.state = 3821
                self.match(TSqlParser.SOURCE)
                self.state = 3822
                localctx.data_source_name = self.id_()
                self.state = 3823
                self.match(TSqlParser.WITH)
                self.state = 3824
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3825
                self.match(TSqlParser.TYPE)
                self.state = 3826
                self.match(TSqlParser.EQUAL)
                self.state = 3827
                self.match(TSqlParser.BLOB_STORAGE)
                self.state = 3828
                self.match(TSqlParser.COMMA)
                self.state = 3829
                self.match(TSqlParser.LOCATION)
                self.state = 3830
                self.match(TSqlParser.EQUAL)
                self.state = 3831
                localctx.location = self.match(TSqlParser.STRING)
                self.state = 3836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 3832
                    self.match(TSqlParser.COMMA)
                    self.state = 3833
                    self.match(TSqlParser.CREDENTIAL)
                    self.state = 3834
                    self.match(TSqlParser.EQUAL)
                    self.state = 3835
                    localctx.credential_name = self.id_()


                self.state = 3838
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_external_libraryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.library_name = None # Id_Context
            self.owner_name = None # Id_Context
            self.client_library = None # Token
            self.external_data_source_name = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def LIBRARY(self):
            return self.getToken(TSqlParser.LIBRARY, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def CONTENT(self):
            return self.getToken(TSqlParser.CONTENT, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def BINARY(self):
            return self.getToken(TSqlParser.BINARY, 0)

        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def PLATFORM(self):
            return self.getToken(TSqlParser.PLATFORM, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def LANGUAGE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LANGUAGE)
            else:
                return self.getToken(TSqlParser.LANGUAGE, i)

        def DATA_SOURCE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DATA_SOURCE)
            else:
                return self.getToken(TSqlParser.DATA_SOURCE, i)

        def R(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.R)
            else:
                return self.getToken(TSqlParser.R, i)

        def PYTHON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.PYTHON)
            else:
                return self.getToken(TSqlParser.PYTHON, i)

        def WINDOWS(self):
            return self.getToken(TSqlParser.WINDOWS, 0)

        def LINUX(self):
            return self.getToken(TSqlParser.LINUX, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_external_library

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_external_library" ):
                listener.enterAlter_external_library(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_external_library" ):
                listener.exitAlter_external_library(self)




    def alter_external_library(self):

        localctx = TSqlParser.Alter_external_libraryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_alter_external_library)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3842
            self.match(TSqlParser.ALTER)
            self.state = 3843
            self.match(TSqlParser.EXTERNAL)
            self.state = 3844
            self.match(TSqlParser.LIBRARY)
            self.state = 3845
            localctx.library_name = self.id_()
            self.state = 3848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 3846
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 3847
                localctx.owner_name = self.id_()


            self.state = 3850
            _la = self._input.LA(1)
            if not(_la==11 or _la==887):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()

            self.state = 3851
            self.match(TSqlParser.LR_BRACKET)
            self.state = 3852
            self.match(TSqlParser.CONTENT)
            self.state = 3853
            self.match(TSqlParser.EQUAL)
            self.state = 3857
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1170]:
                self.state = 3854
                localctx.client_library = self.match(TSqlParser.STRING)
                pass
            elif token in [1171]:
                self.state = 3855
                self.match(TSqlParser.BINARY)
                pass
            elif token in [608]:
                self.state = 3856
                self.match(TSqlParser.NONE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3859
            self.match(TSqlParser.COMMA)
            self.state = 3860
            self.match(TSqlParser.PLATFORM)
            self.state = 3861
            self.match(TSqlParser.EQUAL)
            self.state = 3863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==510 or _la==1062:
                self.state = 3862
                _la = self._input.LA(1)
                if not(_la==510 or _la==1062):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3865
            self.match(TSqlParser.RR_BRACKET)
            self.state = 3867
            self.match(TSqlParser.WITH)
            self.state = 3877 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3877
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [497, 1194]:
                    self.state = 3869
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 3868
                        self.match(TSqlParser.COMMA)


                    self.state = 3871
                    self.match(TSqlParser.LANGUAGE)
                    self.state = 3872
                    self.match(TSqlParser.EQUAL)
                    self.state = 3873
                    _la = self._input.LA(1)
                    if not(_la==738 or _la==745):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [225]:
                    self.state = 3874
                    self.match(TSqlParser.DATA_SOURCE)
                    self.state = 3875
                    self.match(TSqlParser.EQUAL)
                    self.state = 3876
                    localctx.external_data_source_name = self.id_()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3879 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==225 or _la==497 or _la==1194):
                    break

            self.state = 3881
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_external_libraryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.library_name = None # Id_Context
            self.owner_name = None # Id_Context
            self.client_library = None # Token
            self.external_data_source_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def LIBRARY(self):
            return self.getToken(TSqlParser.LIBRARY, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def BINARY(self):
            return self.getToken(TSqlParser.BINARY, 0)

        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def CONTENT(self):
            return self.getToken(TSqlParser.CONTENT, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def PLATFORM(self):
            return self.getToken(TSqlParser.PLATFORM, 0)

        def LANGUAGE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LANGUAGE)
            else:
                return self.getToken(TSqlParser.LANGUAGE, i)

        def DATA_SOURCE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DATA_SOURCE)
            else:
                return self.getToken(TSqlParser.DATA_SOURCE, i)

        def R(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.R)
            else:
                return self.getToken(TSqlParser.R, i)

        def PYTHON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.PYTHON)
            else:
                return self.getToken(TSqlParser.PYTHON, i)

        def WINDOWS(self):
            return self.getToken(TSqlParser.WINDOWS, 0)

        def LINUX(self):
            return self.getToken(TSqlParser.LINUX, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_external_library

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_external_library" ):
                listener.enterCreate_external_library(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_external_library" ):
                listener.exitCreate_external_library(self)




    def create_external_library(self):

        localctx = TSqlParser.Create_external_libraryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_create_external_library)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3883
            self.match(TSqlParser.CREATE)
            self.state = 3884
            self.match(TSqlParser.EXTERNAL)
            self.state = 3885
            self.match(TSqlParser.LIBRARY)
            self.state = 3886
            localctx.library_name = self.id_()
            self.state = 3889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 3887
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 3888
                localctx.owner_name = self.id_()


            self.state = 3891
            self.match(TSqlParser.FROM)

            self.state = 3893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1194:
                self.state = 3892
                self.match(TSqlParser.COMMA)


            self.state = 3896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1192:
                self.state = 3895
                self.match(TSqlParser.LR_BRACKET)


            self.state = 3900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==181:
                self.state = 3898
                self.match(TSqlParser.CONTENT)
                self.state = 3899
                self.match(TSqlParser.EQUAL)


            self.state = 3905
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1170]:
                self.state = 3902
                localctx.client_library = self.match(TSqlParser.STRING)
                pass
            elif token in [1171]:
                self.state = 3903
                self.match(TSqlParser.BINARY)
                pass
            elif token in [608]:
                self.state = 3904
                self.match(TSqlParser.NONE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1194:
                self.state = 3907
                self.match(TSqlParser.COMMA)
                self.state = 3908
                self.match(TSqlParser.PLATFORM)
                self.state = 3909
                self.match(TSqlParser.EQUAL)
                self.state = 3911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==510 or _la==1062:
                    self.state = 3910
                    _la = self._input.LA(1)
                    if not(_la==510 or _la==1062):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3913
                self.match(TSqlParser.RR_BRACKET)


            self.state = 3931
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
            if la_ == 1:
                self.state = 3916
                self.match(TSqlParser.WITH)
                self.state = 3926 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3926
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [497, 1194]:
                        self.state = 3918
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 3917
                            self.match(TSqlParser.COMMA)


                        self.state = 3920
                        self.match(TSqlParser.LANGUAGE)
                        self.state = 3921
                        self.match(TSqlParser.EQUAL)
                        self.state = 3922
                        _la = self._input.LA(1)
                        if not(_la==738 or _la==745):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [225]:
                        self.state = 3923
                        self.match(TSqlParser.DATA_SOURCE)
                        self.state = 3924
                        self.match(TSqlParser.EQUAL)
                        self.state = 3925
                        localctx.external_data_source_name = self.id_()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3928 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==225 or _la==497 or _la==1194):
                        break

                self.state = 3930
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_external_resource_poolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pool_name = None # Id_Context
            self.max_cpu_percent = None # Token
            self.max_memory_percent = None # Token
            self.max_processes = None # Token

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def RESOURCE(self):
            return self.getToken(TSqlParser.RESOURCE, 0)

        def POOL(self):
            return self.getToken(TSqlParser.POOL, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def MAX_CPU_PERCENT(self):
            return self.getToken(TSqlParser.MAX_CPU_PERCENT, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def DEFAULT_DOUBLE_QUOTE(self):
            return self.getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0)

        def AFFINITY(self):
            return self.getToken(TSqlParser.AFFINITY, 0)

        def CPU(self):
            return self.getToken(TSqlParser.CPU, 0)

        def NUMANODE(self):
            return self.getToken(TSqlParser.NUMANODE, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def MAX_MEMORY_PERCENT(self):
            return self.getToken(TSqlParser.MAX_MEMORY_PERCENT, 0)

        def MAX_PROCESSES(self):
            return self.getToken(TSqlParser.MAX_PROCESSES, 0)

        def AUTO(self):
            return self.getToken(TSqlParser.AUTO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TO)
            else:
                return self.getToken(TSqlParser.TO, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_external_resource_pool

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_external_resource_pool" ):
                listener.enterAlter_external_resource_pool(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_external_resource_pool" ):
                listener.exitAlter_external_resource_pool(self)




    def alter_external_resource_pool(self):

        localctx = TSqlParser.Alter_external_resource_poolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_alter_external_resource_pool)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3933
            self.match(TSqlParser.ALTER)
            self.state = 3934
            self.match(TSqlParser.EXTERNAL)
            self.state = 3935
            self.match(TSqlParser.RESOURCE)
            self.state = 3936
            self.match(TSqlParser.POOL)
            self.state = 3939
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,351,self._ctx)
            if la_ == 1:
                self.state = 3937
                localctx.pool_name = self.id_()
                pass

            elif la_ == 2:
                self.state = 3938
                self.match(TSqlParser.DEFAULT_DOUBLE_QUOTE)
                pass


            self.state = 3941
            self.match(TSqlParser.WITH)
            self.state = 3942
            self.match(TSqlParser.LR_BRACKET)
            self.state = 3943
            self.match(TSqlParser.MAX_CPU_PERCENT)
            self.state = 3944
            self.match(TSqlParser.EQUAL)
            self.state = 3945
            localctx.max_cpu_percent = self.match(TSqlParser.DECIMAL)
            self.state = 3983
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 1194]:
                self.state = 3947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 3946
                    self.match(TSqlParser.COMMA)


                self.state = 3949
                self.match(TSqlParser.AFFINITY)
                self.state = 3950
                self.match(TSqlParser.CPU)
                self.state = 3951
                self.match(TSqlParser.EQUAL)
                self.state = 3965
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [69]:
                    self.state = 3952
                    self.match(TSqlParser.AUTO)
                    pass
                elif token in [1168, 1194]:
                    self.state = 3961 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 3961
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,354,self._ctx)
                            if la_ == 1:
                                self.state = 3954
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 3953
                                    self.match(TSqlParser.COMMA)


                                self.state = 3956
                                self.match(TSqlParser.DECIMAL)
                                self.state = 3957
                                self.match(TSqlParser.TO)
                                self.state = 3958
                                self.match(TSqlParser.DECIMAL)
                                pass

                            elif la_ == 2:
                                self.state = 3959
                                self.match(TSqlParser.COMMA)
                                self.state = 3960
                                self.match(TSqlParser.DECIMAL)
                                pass



                        else:
                            raise NoViableAltException(self)
                        self.state = 3963 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,355,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [632]:
                self.state = 3967
                self.match(TSqlParser.NUMANODE)
                self.state = 3968
                self.match(TSqlParser.EQUAL)
                self.state = 3979 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3979
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
                        if la_ == 1:
                            self.state = 3970
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 3969
                                self.match(TSqlParser.COMMA)


                            self.state = 3972
                            self.match(TSqlParser.DECIMAL)
                            self.state = 3973
                            self.match(TSqlParser.TO)
                            self.state = 3974
                            self.match(TSqlParser.DECIMAL)
                            pass

                        elif la_ == 2:
                            self.state = 3976
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 3975
                                self.match(TSqlParser.COMMA)


                            self.state = 3978
                            self.match(TSqlParser.DECIMAL)
                            pass



                    else:
                        raise NoViableAltException(self)
                    self.state = 3981 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,360,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 3991
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
            if la_ == 1:
                self.state = 3986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 3985
                    self.match(TSqlParser.COMMA)


                self.state = 3988
                self.match(TSqlParser.MAX_MEMORY_PERCENT)
                self.state = 3989
                self.match(TSqlParser.EQUAL)
                self.state = 3990
                localctx.max_memory_percent = self.match(TSqlParser.DECIMAL)


            self.state = 3999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==553 or _la==1194:
                self.state = 3994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 3993
                    self.match(TSqlParser.COMMA)


                self.state = 3996
                self.match(TSqlParser.MAX_PROCESSES)
                self.state = 3997
                self.match(TSqlParser.EQUAL)
                self.state = 3998
                localctx.max_processes = self.match(TSqlParser.DECIMAL)


            self.state = 4001
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_external_resource_poolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pool_name = None # Id_Context
            self.max_cpu_percent = None # Token
            self.max_memory_percent = None # Token
            self.max_processes = None # Token

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def RESOURCE(self):
            return self.getToken(TSqlParser.RESOURCE, 0)

        def POOL(self):
            return self.getToken(TSqlParser.POOL, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def MAX_CPU_PERCENT(self):
            return self.getToken(TSqlParser.MAX_CPU_PERCENT, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def AFFINITY(self):
            return self.getToken(TSqlParser.AFFINITY, 0)

        def CPU(self):
            return self.getToken(TSqlParser.CPU, 0)

        def NUMANODE(self):
            return self.getToken(TSqlParser.NUMANODE, 0)

        def MAX_MEMORY_PERCENT(self):
            return self.getToken(TSqlParser.MAX_MEMORY_PERCENT, 0)

        def MAX_PROCESSES(self):
            return self.getToken(TSqlParser.MAX_PROCESSES, 0)

        def AUTO(self):
            return self.getToken(TSqlParser.AUTO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TO)
            else:
                return self.getToken(TSqlParser.TO, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_external_resource_pool

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_external_resource_pool" ):
                listener.enterCreate_external_resource_pool(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_external_resource_pool" ):
                listener.exitCreate_external_resource_pool(self)




    def create_external_resource_pool(self):

        localctx = TSqlParser.Create_external_resource_poolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_create_external_resource_pool)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4003
            self.match(TSqlParser.CREATE)
            self.state = 4004
            self.match(TSqlParser.EXTERNAL)
            self.state = 4005
            self.match(TSqlParser.RESOURCE)
            self.state = 4006
            self.match(TSqlParser.POOL)
            self.state = 4007
            localctx.pool_name = self.id_()
            self.state = 4008
            self.match(TSqlParser.WITH)
            self.state = 4009
            self.match(TSqlParser.LR_BRACKET)
            self.state = 4010
            self.match(TSqlParser.MAX_CPU_PERCENT)
            self.state = 4011
            self.match(TSqlParser.EQUAL)
            self.state = 4012
            localctx.max_cpu_percent = self.match(TSqlParser.DECIMAL)
            self.state = 4050
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 1194]:
                self.state = 4014
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 4013
                    self.match(TSqlParser.COMMA)


                self.state = 4016
                self.match(TSqlParser.AFFINITY)
                self.state = 4017
                self.match(TSqlParser.CPU)
                self.state = 4018
                self.match(TSqlParser.EQUAL)
                self.state = 4032
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [69]:
                    self.state = 4019
                    self.match(TSqlParser.AUTO)
                    pass
                elif token in [1168, 1194]:
                    self.state = 4028 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 4028
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
                            if la_ == 1:
                                self.state = 4021
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 4020
                                    self.match(TSqlParser.COMMA)


                                self.state = 4023
                                self.match(TSqlParser.DECIMAL)
                                self.state = 4024
                                self.match(TSqlParser.TO)
                                self.state = 4025
                                self.match(TSqlParser.DECIMAL)
                                pass

                            elif la_ == 2:
                                self.state = 4026
                                self.match(TSqlParser.COMMA)
                                self.state = 4027
                                self.match(TSqlParser.DECIMAL)
                                pass



                        else:
                            raise NoViableAltException(self)
                        self.state = 4030 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,369,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [632]:
                self.state = 4034
                self.match(TSqlParser.NUMANODE)
                self.state = 4035
                self.match(TSqlParser.EQUAL)
                self.state = 4046 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 4046
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
                        if la_ == 1:
                            self.state = 4037
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 4036
                                self.match(TSqlParser.COMMA)


                            self.state = 4039
                            self.match(TSqlParser.DECIMAL)
                            self.state = 4040
                            self.match(TSqlParser.TO)
                            self.state = 4041
                            self.match(TSqlParser.DECIMAL)
                            pass

                        elif la_ == 2:
                            self.state = 4043
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 4042
                                self.match(TSqlParser.COMMA)


                            self.state = 4045
                            self.match(TSqlParser.DECIMAL)
                            pass



                    else:
                        raise NoViableAltException(self)
                    self.state = 4048 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,374,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 4058
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
            if la_ == 1:
                self.state = 4053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 4052
                    self.match(TSqlParser.COMMA)


                self.state = 4055
                self.match(TSqlParser.MAX_MEMORY_PERCENT)
                self.state = 4056
                self.match(TSqlParser.EQUAL)
                self.state = 4057
                localctx.max_memory_percent = self.match(TSqlParser.DECIMAL)


            self.state = 4066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==553 or _la==1194:
                self.state = 4061
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 4060
                    self.match(TSqlParser.COMMA)


                self.state = 4063
                self.match(TSqlParser.MAX_PROCESSES)
                self.state = 4064
                self.match(TSqlParser.EQUAL)
                self.state = 4065
                localctx.max_processes = self.match(TSqlParser.DECIMAL)


            self.state = 4068
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_fulltext_catalogContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.catalog_name = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def FULLTEXT(self):
            return self.getToken(TSqlParser.FULLTEXT, 0)

        def CATALOG(self):
            return self.getToken(TSqlParser.CATALOG, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def REBUILD(self):
            return self.getToken(TSqlParser.REBUILD, 0)

        def REORGANIZE(self):
            return self.getToken(TSqlParser.REORGANIZE, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def ACCENT_SENSITIVITY(self):
            return self.getToken(TSqlParser.ACCENT_SENSITIVITY, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_fulltext_catalog

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_fulltext_catalog" ):
                listener.enterAlter_fulltext_catalog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_fulltext_catalog" ):
                listener.exitAlter_fulltext_catalog(self)




    def alter_fulltext_catalog(self):

        localctx = TSqlParser.Alter_fulltext_catalogContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_alter_fulltext_catalog)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4070
            self.match(TSqlParser.ALTER)
            self.state = 4071
            self.match(TSqlParser.FULLTEXT)
            self.state = 4072
            self.match(TSqlParser.CATALOG)
            self.state = 4073
            localctx.catalog_name = self.id_()
            self.state = 4084
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [767]:
                self.state = 4074
                self.match(TSqlParser.REBUILD)
                self.state = 4079
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
                if la_ == 1:
                    self.state = 4075
                    self.match(TSqlParser.WITH)
                    self.state = 4076
                    self.match(TSqlParser.ACCENT_SENSITIVITY)
                    self.state = 4077
                    self.match(TSqlParser.EQUAL)
                    self.state = 4078
                    _la = self._input.LA(1)
                    if not(_la==643 or _la==649):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [782]:
                self.state = 4081
                self.match(TSqlParser.REORGANIZE)
                pass
            elif token in [56]:
                self.state = 4082
                self.match(TSqlParser.AS)
                self.state = 4083
                self.match(TSqlParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_fulltext_catalogContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.catalog_name = None # Id_Context
            self.filegroup = None # Id_Context
            self.rootpath = None # Token
            self.owner_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def FULLTEXT(self):
            return self.getToken(TSqlParser.FULLTEXT, 0)

        def CATALOG(self):
            return self.getToken(TSqlParser.CATALOG, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def FILEGROUP(self):
            return self.getToken(TSqlParser.FILEGROUP, 0)

        def IN(self):
            return self.getToken(TSqlParser.IN, 0)

        def PATH(self):
            return self.getToken(TSqlParser.PATH, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def ACCENT_SENSITIVITY(self):
            return self.getToken(TSqlParser.ACCENT_SENSITIVITY, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_fulltext_catalog

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_fulltext_catalog" ):
                listener.enterCreate_fulltext_catalog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_fulltext_catalog" ):
                listener.exitCreate_fulltext_catalog(self)




    def create_fulltext_catalog(self):

        localctx = TSqlParser.Create_fulltext_catalogContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_create_fulltext_catalog)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4086
            self.match(TSqlParser.CREATE)
            self.state = 4087
            self.match(TSqlParser.FULLTEXT)
            self.state = 4088
            self.match(TSqlParser.CATALOG)
            self.state = 4089
            localctx.catalog_name = self.id_()
            self.state = 4093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==649:
                self.state = 4090
                self.match(TSqlParser.ON)
                self.state = 4091
                self.match(TSqlParser.FILEGROUP)
                self.state = 4092
                localctx.filegroup = self.id_()


            self.state = 4098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==442:
                self.state = 4095
                self.match(TSqlParser.IN)
                self.state = 4096
                self.match(TSqlParser.PATH)
                self.state = 4097
                localctx.rootpath = self.match(TSqlParser.STRING)


            self.state = 4104
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,384,self._ctx)
            if la_ == 1:
                self.state = 4100
                self.match(TSqlParser.WITH)
                self.state = 4101
                self.match(TSqlParser.ACCENT_SENSITIVITY)
                self.state = 4102
                self.match(TSqlParser.EQUAL)
                self.state = 4103
                _la = self._input.LA(1)
                if not(_la==643 or _la==649):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 4106
                self.match(TSqlParser.AS)
                self.state = 4107
                self.match(TSqlParser.DEFAULT)


            self.state = 4112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 4110
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 4111
                localctx.owner_name = self.id_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_fulltext_stoplistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.stoplist_name = None # Id_Context
            self.stopword = None # Token

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def FULLTEXT(self):
            return self.getToken(TSqlParser.FULLTEXT, 0)

        def STOPLIST(self):
            return self.getToken(TSqlParser.STOPLIST, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def LANGUAGE(self):
            return self.getToken(TSqlParser.LANGUAGE, 0)

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def BINARY(self):
            return self.getToken(TSqlParser.BINARY, 0)

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_fulltext_stoplist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_fulltext_stoplist" ):
                listener.enterAlter_fulltext_stoplist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_fulltext_stoplist" ):
                listener.exitAlter_fulltext_stoplist(self)




    def alter_fulltext_stoplist(self):

        localctx = TSqlParser.Alter_fulltext_stoplistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_alter_fulltext_stoplist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4114
            self.match(TSqlParser.ALTER)
            self.state = 4115
            self.match(TSqlParser.FULLTEXT)
            self.state = 4116
            self.match(TSqlParser.STOPLIST)
            self.state = 4117
            localctx.stoplist_name = self.id_()
            self.state = 4131
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11]:
                self.state = 4118
                self.match(TSqlParser.ADD)
                self.state = 4119
                localctx.stopword = self.match(TSqlParser.STRING)
                self.state = 4120
                self.match(TSqlParser.LANGUAGE)
                self.state = 4121
                _la = self._input.LA(1)
                if not(((((_la - 1168)) & ~0x3f) == 0 and ((1 << (_la - 1168)) & 13) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [280]:
                self.state = 4122
                self.match(TSqlParser.DROP)
                self.state = 4129
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
                if la_ == 1:
                    self.state = 4123
                    localctx.stopword = self.match(TSqlParser.STRING)
                    self.state = 4124
                    self.match(TSqlParser.LANGUAGE)
                    self.state = 4125
                    _la = self._input.LA(1)
                    if not(((((_la - 1168)) & ~0x3f) == 0 and ((1 << (_la - 1168)) & 13) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass

                elif la_ == 2:
                    self.state = 4126
                    self.match(TSqlParser.ALL)
                    self.state = 4127
                    _la = self._input.LA(1)
                    if not(((((_la - 1168)) & ~0x3f) == 0 and ((1 << (_la - 1168)) & 13) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass

                elif la_ == 3:
                    self.state = 4128
                    self.match(TSqlParser.ALL)
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_fulltext_stoplistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.stoplist_name = None # Id_Context
            self.database_name = None # Id_Context
            self.source_stoplist_name = None # Id_Context
            self.owner_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def FULLTEXT(self):
            return self.getToken(TSqlParser.FULLTEXT, 0)

        def STOPLIST(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STOPLIST)
            else:
                return self.getToken(TSqlParser.STOPLIST, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def SYSTEM(self):
            return self.getToken(TSqlParser.SYSTEM, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_fulltext_stoplist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_fulltext_stoplist" ):
                listener.enterCreate_fulltext_stoplist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_fulltext_stoplist" ):
                listener.exitCreate_fulltext_stoplist(self)




    def create_fulltext_stoplist(self):

        localctx = TSqlParser.Create_fulltext_stoplistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_create_fulltext_stoplist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4133
            self.match(TSqlParser.CREATE)
            self.state = 4134
            self.match(TSqlParser.FULLTEXT)
            self.state = 4135
            self.match(TSqlParser.STOPLIST)
            self.state = 4136
            localctx.stoplist_name = self.id_()
            self.state = 4148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==378:
                self.state = 4137
                self.match(TSqlParser.FROM)
                self.state = 4146
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,390,self._ctx)
                if la_ == 1:
                    self.state = 4141
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,389,self._ctx)
                    if la_ == 1:
                        self.state = 4138
                        localctx.database_name = self.id_()
                        self.state = 4139
                        self.match(TSqlParser.DOT)


                    self.state = 4143
                    localctx.source_stoplist_name = self.id_()
                    pass

                elif la_ == 2:
                    self.state = 4144
                    self.match(TSqlParser.SYSTEM)
                    self.state = 4145
                    self.match(TSqlParser.STOPLIST)
                    pass




            self.state = 4152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 4150
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 4151
                localctx.owner_name = self.id_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_login_sql_serverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.login_name = None # Id_Context
            self.password = None # Token
            self.password_hash = None # Token
            self.old_password = None # Token
            self.default_database = None # Id_Context
            self.default_laguage = None # Id_Context
            self.credential_name = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def CREDENTIAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CREDENTIAL)
            else:
                return self.getToken(TSqlParser.CREDENTIAL, i)

        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def OLD_PASSWORD(self):
            return self.getToken(TSqlParser.OLD_PASSWORD, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def DEFAULT_DATABASE(self):
            return self.getToken(TSqlParser.DEFAULT_DATABASE, 0)

        def DEFAULT_LANGUAGE(self):
            return self.getToken(TSqlParser.DEFAULT_LANGUAGE, 0)

        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def CHECK_POLICY(self):
            return self.getToken(TSqlParser.CHECK_POLICY, 0)

        def CHECK_EXPIRATION(self):
            return self.getToken(TSqlParser.CHECK_EXPIRATION, 0)

        def NO(self):
            return self.getToken(TSqlParser.NO, 0)

        def ENABLE(self):
            return self.getToken(TSqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(TSqlParser.DISABLE, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def OFF(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OFF)
            else:
                return self.getToken(TSqlParser.OFF, i)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def HASHED(self):
            return self.getToken(TSqlParser.HASHED, 0)

        def MUST_CHANGE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MUST_CHANGE)
            else:
                return self.getToken(TSqlParser.MUST_CHANGE, i)

        def UNLOCK(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.UNLOCK)
            else:
                return self.getToken(TSqlParser.UNLOCK, i)

        def BINARY(self):
            return self.getToken(TSqlParser.BINARY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_login_sql_server

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_login_sql_server" ):
                listener.enterAlter_login_sql_server(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_login_sql_server" ):
                listener.exitAlter_login_sql_server(self)




    def alter_login_sql_server(self):

        localctx = TSqlParser.Alter_login_sql_serverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_alter_login_sql_server)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4154
            self.match(TSqlParser.ALTER)
            self.state = 4155
            self.match(TSqlParser.LOGIN)
            self.state = 4156
            localctx.login_name = self.id_()
            self.state = 4224
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,406,self._ctx)
            if la_ == 1:
                self.state = 4158
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,393,self._ctx)
                if la_ == 1:
                    self.state = 4157
                    _la = self._input.LA(1)
                    if not(_la==268 or _la==290):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 2:
                self.state = 4160
                self.match(TSqlParser.WITH)
                self.state = 4174
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,396,self._ctx)
                if la_ == 1:
                    self.state = 4161
                    self.match(TSqlParser.PASSWORD)
                    self.state = 4162
                    self.match(TSqlParser.EQUAL)
                    self.state = 4166
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1170]:
                        self.state = 4163
                        localctx.password = self.match(TSqlParser.STRING)
                        pass
                    elif token in [1171]:
                        self.state = 4164
                        localctx.password_hash = self.match(TSqlParser.BINARY)
                        self.state = 4165
                        self.match(TSqlParser.HASHED)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 4171
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,395,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 4168
                            _la = self._input.LA(1)
                            if not(_la==583 or _la==1023):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 4173
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,395,self._ctx)



                self.state = 4185
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,398,self._ctx)
                if la_ == 1:
                    self.state = 4176
                    self.match(TSqlParser.OLD_PASSWORD)
                    self.state = 4177
                    self.match(TSqlParser.EQUAL)
                    self.state = 4178
                    localctx.old_password = self.match(TSqlParser.STRING)
                    self.state = 4182
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,397,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 4179
                            _la = self._input.LA(1)
                            if not(_la==583 or _la==1023):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 4184
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,397,self._ctx)



                self.state = 4190
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,399,self._ctx)
                if la_ == 1:
                    self.state = 4187
                    self.match(TSqlParser.DEFAULT_DATABASE)
                    self.state = 4188
                    self.match(TSqlParser.EQUAL)
                    self.state = 4189
                    localctx.default_database = self.id_()


                self.state = 4195
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,400,self._ctx)
                if la_ == 1:
                    self.state = 4192
                    self.match(TSqlParser.DEFAULT_LANGUAGE)
                    self.state = 4193
                    self.match(TSqlParser.EQUAL)
                    self.state = 4194
                    localctx.default_laguage = self.id_()


                self.state = 4200
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,401,self._ctx)
                if la_ == 1:
                    self.state = 4197
                    self.match(TSqlParser.NAME)
                    self.state = 4198
                    self.match(TSqlParser.EQUAL)
                    self.state = 4199
                    localctx.login_name = self.id_()


                self.state = 4205
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,402,self._ctx)
                if la_ == 1:
                    self.state = 4202
                    self.match(TSqlParser.CHECK_POLICY)
                    self.state = 4203
                    self.match(TSqlParser.EQUAL)
                    self.state = 4204
                    _la = self._input.LA(1)
                    if not(_la==643 or _la==649):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4210
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,403,self._ctx)
                if la_ == 1:
                    self.state = 4207
                    self.match(TSqlParser.CHECK_EXPIRATION)
                    self.state = 4208
                    self.match(TSqlParser.EQUAL)
                    self.state = 4209
                    _la = self._input.LA(1)
                    if not(_la==643 or _la==649):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4215
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,404,self._ctx)
                if la_ == 1:
                    self.state = 4212
                    self.match(TSqlParser.CREDENTIAL)
                    self.state = 4213
                    self.match(TSqlParser.EQUAL)
                    self.state = 4214
                    localctx.credential_name = self.id_()


                self.state = 4219
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,405,self._ctx)
                if la_ == 1:
                    self.state = 4217
                    self.match(TSqlParser.NO)
                    self.state = 4218
                    self.match(TSqlParser.CREDENTIAL)


                pass

            elif la_ == 3:
                self.state = 4221
                _la = self._input.LA(1)
                if not(_la==11 or _la==280):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4222
                self.match(TSqlParser.CREDENTIAL)
                self.state = 4223
                localctx.credential_name = self.id_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_login_sql_serverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.login_name = None # Id_Context
            self.password = None # Token
            self.password_hash = None # Token
            self.sid = None # Token
            self.default_database = None # Id_Context
            self.default_laguage = None # Id_Context
            self.credential_name = None # Id_Context
            self.default_language = None # Token
            self.certname = None # Id_Context
            self.asym_key_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def SID(self):
            return self.getToken(TSqlParser.SID, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def DEFAULT_DATABASE(self):
            return self.getToken(TSqlParser.DEFAULT_DATABASE, 0)

        def DEFAULT_LANGUAGE(self):
            return self.getToken(TSqlParser.DEFAULT_LANGUAGE, 0)

        def CHECK_EXPIRATION(self):
            return self.getToken(TSqlParser.CHECK_EXPIRATION, 0)

        def CHECK_POLICY(self):
            return self.getToken(TSqlParser.CHECK_POLICY, 0)

        def CREDENTIAL(self):
            return self.getToken(TSqlParser.CREDENTIAL, 0)

        def BINARY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BINARY)
            else:
                return self.getToken(TSqlParser.BINARY, i)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def OFF(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OFF)
            else:
                return self.getToken(TSqlParser.OFF, i)

        def WINDOWS(self):
            return self.getToken(TSqlParser.WINDOWS, 0)

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def HASHED(self):
            return self.getToken(TSqlParser.HASHED, 0)

        def MUST_CHANGE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MUST_CHANGE)
            else:
                return self.getToken(TSqlParser.MUST_CHANGE, i)

        def UNLOCK(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.UNLOCK)
            else:
                return self.getToken(TSqlParser.UNLOCK, i)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_login_sql_server

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_login_sql_server" ):
                listener.enterCreate_login_sql_server(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_login_sql_server" ):
                listener.exitCreate_login_sql_server(self)




    def create_login_sql_server(self):

        localctx = TSqlParser.Create_login_sql_serverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_create_login_sql_server)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4226
            self.match(TSqlParser.CREATE)
            self.state = 4227
            self.match(TSqlParser.LOGIN)
            self.state = 4228
            localctx.login_name = self.id_()
            self.state = 4319
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1063]:
                self.state = 4229
                self.match(TSqlParser.WITH)
                self.state = 4243
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,409,self._ctx)
                if la_ == 1:
                    self.state = 4230
                    self.match(TSqlParser.PASSWORD)
                    self.state = 4231
                    self.match(TSqlParser.EQUAL)
                    self.state = 4235
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1170]:
                        self.state = 4232
                        localctx.password = self.match(TSqlParser.STRING)
                        pass
                    elif token in [1171]:
                        self.state = 4233
                        localctx.password_hash = self.match(TSqlParser.BINARY)
                        self.state = 4234
                        self.match(TSqlParser.HASHED)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 4240
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,408,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 4237
                            _la = self._input.LA(1)
                            if not(_la==583 or _la==1023):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 4242
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,408,self._ctx)



                self.state = 4251
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,411,self._ctx)
                if la_ == 1:
                    self.state = 4246
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 4245
                        self.match(TSqlParser.COMMA)


                    self.state = 4248
                    self.match(TSqlParser.SID)
                    self.state = 4249
                    self.match(TSqlParser.EQUAL)
                    self.state = 4250
                    localctx.sid = self.match(TSqlParser.BINARY)


                self.state = 4259
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,413,self._ctx)
                if la_ == 1:
                    self.state = 4254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 4253
                        self.match(TSqlParser.COMMA)


                    self.state = 4256
                    self.match(TSqlParser.DEFAULT_DATABASE)
                    self.state = 4257
                    self.match(TSqlParser.EQUAL)
                    self.state = 4258
                    localctx.default_database = self.id_()


                self.state = 4267
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
                if la_ == 1:
                    self.state = 4262
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 4261
                        self.match(TSqlParser.COMMA)


                    self.state = 4264
                    self.match(TSqlParser.DEFAULT_LANGUAGE)
                    self.state = 4265
                    self.match(TSqlParser.EQUAL)
                    self.state = 4266
                    localctx.default_laguage = self.id_()


                self.state = 4275
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,417,self._ctx)
                if la_ == 1:
                    self.state = 4270
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 4269
                        self.match(TSqlParser.COMMA)


                    self.state = 4272
                    self.match(TSqlParser.CHECK_EXPIRATION)
                    self.state = 4273
                    self.match(TSqlParser.EQUAL)
                    self.state = 4274
                    _la = self._input.LA(1)
                    if not(_la==643 or _la==649):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4283
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,419,self._ctx)
                if la_ == 1:
                    self.state = 4278
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 4277
                        self.match(TSqlParser.COMMA)


                    self.state = 4280
                    self.match(TSqlParser.CHECK_POLICY)
                    self.state = 4281
                    self.match(TSqlParser.EQUAL)
                    self.state = 4282
                    _la = self._input.LA(1)
                    if not(_la==643 or _la==649):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4291
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,421,self._ctx)
                if la_ == 1:
                    self.state = 4286
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 4285
                        self.match(TSqlParser.COMMA)


                    self.state = 4288
                    self.match(TSqlParser.CREDENTIAL)
                    self.state = 4289
                    self.match(TSqlParser.EQUAL)
                    self.state = 4290
                    localctx.credential_name = self.id_()


                pass
            elif token in [378]:
                self.state = 4293
                self.match(TSqlParser.FROM)
                self.state = 4317
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1062]:
                    self.state = 4294
                    self.match(TSqlParser.WINDOWS)

                    self.state = 4295
                    self.match(TSqlParser.WITH)
                    self.state = 4302
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,423,self._ctx)
                    if la_ == 1:
                        self.state = 4297
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 4296
                            self.match(TSqlParser.COMMA)


                        self.state = 4299
                        self.match(TSqlParser.DEFAULT_DATABASE)
                        self.state = 4300
                        self.match(TSqlParser.EQUAL)
                        self.state = 4301
                        localctx.default_database = self.id_()


                    self.state = 4310
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,425,self._ctx)
                    if la_ == 1:
                        self.state = 4305
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 4304
                            self.match(TSqlParser.COMMA)


                        self.state = 4307
                        self.match(TSqlParser.DEFAULT_LANGUAGE)
                        self.state = 4308
                        self.match(TSqlParser.EQUAL)
                        self.state = 4309
                        localctx.default_language = self.match(TSqlParser.STRING)


                    pass
                elif token in [121]:
                    self.state = 4312
                    self.match(TSqlParser.CERTIFICATE)
                    self.state = 4313
                    localctx.certname = self.id_()
                    pass
                elif token in [61]:
                    self.state = 4314
                    self.match(TSqlParser.ASYMMETRIC)
                    self.state = 4315
                    self.match(TSqlParser.KEY)
                    self.state = 4316
                    localctx.asym_key_name = self.id_()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_login_azure_sqlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.login_name = None # Id_Context
            self.password = None # Token
            self.old_password = None # Token

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def ENABLE(self):
            return self.getToken(TSqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(TSqlParser.DISABLE, 0)

        def OLD_PASSWORD(self):
            return self.getToken(TSqlParser.OLD_PASSWORD, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_login_azure_sql

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_login_azure_sql" ):
                listener.enterAlter_login_azure_sql(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_login_azure_sql" ):
                listener.exitAlter_login_azure_sql(self)




    def alter_login_azure_sql(self):

        localctx = TSqlParser.Alter_login_azure_sqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_alter_login_azure_sql)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4321
            self.match(TSqlParser.ALTER)
            self.state = 4322
            self.match(TSqlParser.LOGIN)
            self.state = 4323
            localctx.login_name = self.id_()
            self.state = 4341
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,431,self._ctx)
            if la_ == 1:
                self.state = 4325
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,428,self._ctx)
                if la_ == 1:
                    self.state = 4324
                    _la = self._input.LA(1)
                    if not(_la==268 or _la==290):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 2:
                self.state = 4327
                self.match(TSqlParser.WITH)
                self.state = 4339
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [690]:
                    self.state = 4328
                    self.match(TSqlParser.PASSWORD)
                    self.state = 4329
                    self.match(TSqlParser.EQUAL)
                    self.state = 4330
                    localctx.password = self.match(TSqlParser.STRING)
                    self.state = 4334
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,429,self._ctx)
                    if la_ == 1:
                        self.state = 4331
                        self.match(TSqlParser.OLD_PASSWORD)
                        self.state = 4332
                        self.match(TSqlParser.EQUAL)
                        self.state = 4333
                        localctx.old_password = self.match(TSqlParser.STRING)


                    pass
                elif token in [584]:
                    self.state = 4336
                    self.match(TSqlParser.NAME)
                    self.state = 4337
                    self.match(TSqlParser.EQUAL)
                    self.state = 4338
                    localctx.login_name = self.id_()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_login_azure_sqlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.login_name = None # Id_Context
            self.sid = None # Token

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def SID(self):
            return self.getToken(TSqlParser.SID, 0)

        def BINARY(self):
            return self.getToken(TSqlParser.BINARY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_login_azure_sql

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_login_azure_sql" ):
                listener.enterCreate_login_azure_sql(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_login_azure_sql" ):
                listener.exitCreate_login_azure_sql(self)




    def create_login_azure_sql(self):

        localctx = TSqlParser.Create_login_azure_sqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_create_login_azure_sql)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4343
            self.match(TSqlParser.CREATE)
            self.state = 4344
            self.match(TSqlParser.LOGIN)
            self.state = 4345
            localctx.login_name = self.id_()
            self.state = 4346
            self.match(TSqlParser.WITH)
            self.state = 4347
            self.match(TSqlParser.PASSWORD)
            self.state = 4348
            self.match(TSqlParser.EQUAL)
            self.state = 4349
            self.match(TSqlParser.STRING)
            self.state = 4353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
            if la_ == 1:
                self.state = 4350
                self.match(TSqlParser.SID)
                self.state = 4351
                self.match(TSqlParser.EQUAL)
                self.state = 4352
                localctx.sid = self.match(TSqlParser.BINARY)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_login_azure_sql_dw_and_pdwContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.login_name = None # Id_Context
            self.password = None # Token
            self.old_password = None # Token

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def ENABLE(self):
            return self.getToken(TSqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(TSqlParser.DISABLE, 0)

        def OLD_PASSWORD(self):
            return self.getToken(TSqlParser.OLD_PASSWORD, 0)

        def MUST_CHANGE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MUST_CHANGE)
            else:
                return self.getToken(TSqlParser.MUST_CHANGE, i)

        def UNLOCK(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.UNLOCK)
            else:
                return self.getToken(TSqlParser.UNLOCK, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_login_azure_sql_dw_and_pdw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_login_azure_sql_dw_and_pdw" ):
                listener.enterAlter_login_azure_sql_dw_and_pdw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_login_azure_sql_dw_and_pdw" ):
                listener.exitAlter_login_azure_sql_dw_and_pdw(self)




    def alter_login_azure_sql_dw_and_pdw(self):

        localctx = TSqlParser.Alter_login_azure_sql_dw_and_pdwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_alter_login_azure_sql_dw_and_pdw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4355
            self.match(TSqlParser.ALTER)
            self.state = 4356
            self.match(TSqlParser.LOGIN)
            self.state = 4357
            localctx.login_name = self.id_()
            self.state = 4381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,437,self._ctx)
            if la_ == 1:
                self.state = 4359
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,433,self._ctx)
                if la_ == 1:
                    self.state = 4358
                    _la = self._input.LA(1)
                    if not(_la==268 or _la==290):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 2:
                self.state = 4361
                self.match(TSqlParser.WITH)
                self.state = 4379
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [690]:
                    self.state = 4362
                    self.match(TSqlParser.PASSWORD)
                    self.state = 4363
                    self.match(TSqlParser.EQUAL)
                    self.state = 4364
                    localctx.password = self.match(TSqlParser.STRING)
                    self.state = 4374
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,435,self._ctx)
                    if la_ == 1:
                        self.state = 4365
                        self.match(TSqlParser.OLD_PASSWORD)
                        self.state = 4366
                        self.match(TSqlParser.EQUAL)
                        self.state = 4367
                        localctx.old_password = self.match(TSqlParser.STRING)
                        self.state = 4371
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,434,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 4368
                                _la = self._input.LA(1)
                                if not(_la==583 or _la==1023):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 4373
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,434,self._ctx)



                    pass
                elif token in [584]:
                    self.state = 4376
                    self.match(TSqlParser.NAME)
                    self.state = 4377
                    self.match(TSqlParser.EQUAL)
                    self.state = 4378
                    localctx.login_name = self.id_()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_login_pdwContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.loginName = None # Id_Context
            self.password = None # Token

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def WINDOWS(self):
            return self.getToken(TSqlParser.WINDOWS, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def MUST_CHANGE(self):
            return self.getToken(TSqlParser.MUST_CHANGE, 0)

        def CHECK_POLICY(self):
            return self.getToken(TSqlParser.CHECK_POLICY, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_login_pdw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_login_pdw" ):
                listener.enterCreate_login_pdw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_login_pdw" ):
                listener.exitCreate_login_pdw(self)




    def create_login_pdw(self):

        localctx = TSqlParser.Create_login_pdwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_create_login_pdw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4383
            self.match(TSqlParser.CREATE)
            self.state = 4384
            self.match(TSqlParser.LOGIN)
            self.state = 4385
            localctx.loginName = self.id_()
            self.state = 4402
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1063]:
                self.state = 4386
                self.match(TSqlParser.WITH)

                self.state = 4387
                self.match(TSqlParser.PASSWORD)
                self.state = 4388
                self.match(TSqlParser.EQUAL)
                self.state = 4389
                localctx.password = self.match(TSqlParser.STRING)
                self.state = 4391
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,438,self._ctx)
                if la_ == 1:
                    self.state = 4390
                    self.match(TSqlParser.MUST_CHANGE)


                self.state = 4398
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,440,self._ctx)
                if la_ == 1:
                    self.state = 4393
                    self.match(TSqlParser.CHECK_POLICY)
                    self.state = 4394
                    self.match(TSqlParser.EQUAL)
                    self.state = 4396
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==643 or _la==649:
                        self.state = 4395
                        _la = self._input.LA(1)
                        if not(_la==643 or _la==649):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()




                pass
            elif token in [378]:
                self.state = 4400
                self.match(TSqlParser.FROM)
                self.state = 4401
                self.match(TSqlParser.WINDOWS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_master_key_sql_serverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.password = None # Token
            self.encryption_password = None # Token

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def MASTER(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MASTER)
            else:
                return self.getToken(TSqlParser.MASTER, i)

        def KEY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.KEY)
            else:
                return self.getToken(TSqlParser.KEY, i)

        def REGENERATE(self):
            return self.getToken(TSqlParser.REGENERATE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def SERVICE(self):
            return self.getToken(TSqlParser.SERVICE, 0)

        def FORCE(self):
            return self.getToken(TSqlParser.FORCE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_master_key_sql_server

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_master_key_sql_server" ):
                listener.enterAlter_master_key_sql_server(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_master_key_sql_server" ):
                listener.exitAlter_master_key_sql_server(self)




    def alter_master_key_sql_server(self):

        localctx = TSqlParser.Alter_master_key_sql_serverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_alter_master_key_sql_server)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4404
            self.match(TSqlParser.ALTER)
            self.state = 4405
            self.match(TSqlParser.MASTER)
            self.state = 4406
            self.match(TSqlParser.KEY)
            self.state = 4428
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [364, 774]:
                self.state = 4408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==364:
                    self.state = 4407
                    self.match(TSqlParser.FORCE)


                self.state = 4410
                self.match(TSqlParser.REGENERATE)
                self.state = 4411
                self.match(TSqlParser.WITH)
                self.state = 4412
                self.match(TSqlParser.ENCRYPTION)
                self.state = 4413
                self.match(TSqlParser.BY)
                self.state = 4414
                self.match(TSqlParser.PASSWORD)
                self.state = 4415
                self.match(TSqlParser.EQUAL)
                self.state = 4416
                localctx.password = self.match(TSqlParser.STRING)
                pass
            elif token in [11, 280]:
                self.state = 4417
                _la = self._input.LA(1)
                if not(_la==11 or _la==280):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4418
                self.match(TSqlParser.ENCRYPTION)
                self.state = 4419
                self.match(TSqlParser.BY)
                self.state = 4426
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [878]:
                    self.state = 4420
                    self.match(TSqlParser.SERVICE)
                    self.state = 4421
                    self.match(TSqlParser.MASTER)
                    self.state = 4422
                    self.match(TSqlParser.KEY)
                    pass
                elif token in [690]:
                    self.state = 4423
                    self.match(TSqlParser.PASSWORD)
                    self.state = 4424
                    self.match(TSqlParser.EQUAL)
                    self.state = 4425
                    localctx.encryption_password = self.match(TSqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_master_key_sql_serverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.password = None # Token

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_master_key_sql_server

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_master_key_sql_server" ):
                listener.enterCreate_master_key_sql_server(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_master_key_sql_server" ):
                listener.exitCreate_master_key_sql_server(self)




    def create_master_key_sql_server(self):

        localctx = TSqlParser.Create_master_key_sql_serverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_create_master_key_sql_server)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4430
            self.match(TSqlParser.CREATE)
            self.state = 4431
            self.match(TSqlParser.MASTER)
            self.state = 4432
            self.match(TSqlParser.KEY)
            self.state = 4433
            self.match(TSqlParser.ENCRYPTION)
            self.state = 4434
            self.match(TSqlParser.BY)
            self.state = 4435
            self.match(TSqlParser.PASSWORD)
            self.state = 4436
            self.match(TSqlParser.EQUAL)
            self.state = 4437
            localctx.password = self.match(TSqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_master_key_azure_sqlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.password = None # Token
            self.encryption_password = None # Token

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def MASTER(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MASTER)
            else:
                return self.getToken(TSqlParser.MASTER, i)

        def KEY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.KEY)
            else:
                return self.getToken(TSqlParser.KEY, i)

        def REGENERATE(self):
            return self.getToken(TSqlParser.REGENERATE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def SERVICE(self):
            return self.getToken(TSqlParser.SERVICE, 0)

        def FORCE(self):
            return self.getToken(TSqlParser.FORCE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_master_key_azure_sql

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_master_key_azure_sql" ):
                listener.enterAlter_master_key_azure_sql(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_master_key_azure_sql" ):
                listener.exitAlter_master_key_azure_sql(self)




    def alter_master_key_azure_sql(self):

        localctx = TSqlParser.Alter_master_key_azure_sqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_alter_master_key_azure_sql)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4439
            self.match(TSqlParser.ALTER)
            self.state = 4440
            self.match(TSqlParser.MASTER)
            self.state = 4441
            self.match(TSqlParser.KEY)
            self.state = 4469
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [364, 774]:
                self.state = 4443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==364:
                    self.state = 4442
                    self.match(TSqlParser.FORCE)


                self.state = 4445
                self.match(TSqlParser.REGENERATE)
                self.state = 4446
                self.match(TSqlParser.WITH)
                self.state = 4447
                self.match(TSqlParser.ENCRYPTION)
                self.state = 4448
                self.match(TSqlParser.BY)
                self.state = 4449
                self.match(TSqlParser.PASSWORD)
                self.state = 4450
                self.match(TSqlParser.EQUAL)
                self.state = 4451
                localctx.password = self.match(TSqlParser.STRING)
                pass
            elif token in [11]:
                self.state = 4452
                self.match(TSqlParser.ADD)
                self.state = 4453
                self.match(TSqlParser.ENCRYPTION)
                self.state = 4454
                self.match(TSqlParser.BY)
                self.state = 4461
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [878]:
                    self.state = 4455
                    self.match(TSqlParser.SERVICE)
                    self.state = 4456
                    self.match(TSqlParser.MASTER)
                    self.state = 4457
                    self.match(TSqlParser.KEY)
                    pass
                elif token in [690]:
                    self.state = 4458
                    self.match(TSqlParser.PASSWORD)
                    self.state = 4459
                    self.match(TSqlParser.EQUAL)
                    self.state = 4460
                    localctx.encryption_password = self.match(TSqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [280]:
                self.state = 4463
                self.match(TSqlParser.DROP)
                self.state = 4464
                self.match(TSqlParser.ENCRYPTION)
                self.state = 4465
                self.match(TSqlParser.BY)
                self.state = 4466
                self.match(TSqlParser.PASSWORD)
                self.state = 4467
                self.match(TSqlParser.EQUAL)
                self.state = 4468
                localctx.encryption_password = self.match(TSqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_master_key_azure_sqlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.password = None # Token

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_master_key_azure_sql

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_master_key_azure_sql" ):
                listener.enterCreate_master_key_azure_sql(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_master_key_azure_sql" ):
                listener.exitCreate_master_key_azure_sql(self)




    def create_master_key_azure_sql(self):

        localctx = TSqlParser.Create_master_key_azure_sqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_create_master_key_azure_sql)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4471
            self.match(TSqlParser.CREATE)
            self.state = 4472
            self.match(TSqlParser.MASTER)
            self.state = 4473
            self.match(TSqlParser.KEY)
            self.state = 4479
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,448,self._ctx)
            if la_ == 1:
                self.state = 4474
                self.match(TSqlParser.ENCRYPTION)
                self.state = 4475
                self.match(TSqlParser.BY)
                self.state = 4476
                self.match(TSqlParser.PASSWORD)
                self.state = 4477
                self.match(TSqlParser.EQUAL)
                self.state = 4478
                localctx.password = self.match(TSqlParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_message_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.message_type_name = None # Id_Context
            self.schema_collection_name = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def MESSAGE(self):
            return self.getToken(TSqlParser.MESSAGE, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def VALIDATION(self):
            return self.getToken(TSqlParser.VALIDATION, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def EMPTY(self):
            return self.getToken(TSqlParser.EMPTY, 0)

        def WELL_FORMED_XML(self):
            return self.getToken(TSqlParser.WELL_FORMED_XML, 0)

        def VALID_XML(self):
            return self.getToken(TSqlParser.VALID_XML, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def COLLECTION(self):
            return self.getToken(TSqlParser.COLLECTION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_message_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_message_type" ):
                listener.enterAlter_message_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_message_type" ):
                listener.exitAlter_message_type(self)




    def alter_message_type(self):

        localctx = TSqlParser.Alter_message_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_alter_message_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4481
            self.match(TSqlParser.ALTER)
            self.state = 4482
            self.match(TSqlParser.MESSAGE)
            self.state = 4483
            self.match(TSqlParser.TYPE)
            self.state = 4484
            localctx.message_type_name = self.id_()
            self.state = 4485
            self.match(TSqlParser.VALIDATION)
            self.state = 4486
            self.match(TSqlParser.EQUAL)
            self.state = 4495
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [608]:
                self.state = 4487
                self.match(TSqlParser.NONE)
                pass
            elif token in [289]:
                self.state = 4488
                self.match(TSqlParser.EMPTY)
                pass
            elif token in [1058]:
                self.state = 4489
                self.match(TSqlParser.WELL_FORMED_XML)
                pass
            elif token in [1040]:
                self.state = 4490
                self.match(TSqlParser.VALID_XML)
                self.state = 4491
                self.match(TSqlParser.WITH)
                self.state = 4492
                self.match(TSqlParser.SCHEMA)
                self.state = 4493
                self.match(TSqlParser.COLLECTION)
                self.state = 4494
                localctx.schema_collection_name = self.id_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_partition_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.partition_function_name = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def PARTITION(self):
            return self.getToken(TSqlParser.PARTITION, 0)

        def FUNCTION(self):
            return self.getToken(TSqlParser.FUNCTION, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def RANGE(self):
            return self.getToken(TSqlParser.RANGE, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def SPLIT(self):
            return self.getToken(TSqlParser.SPLIT, 0)

        def MERGE(self):
            return self.getToken(TSqlParser.MERGE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_partition_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_partition_function" ):
                listener.enterAlter_partition_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_partition_function" ):
                listener.exitAlter_partition_function(self)




    def alter_partition_function(self):

        localctx = TSqlParser.Alter_partition_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_alter_partition_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4497
            self.match(TSqlParser.ALTER)
            self.state = 4498
            self.match(TSqlParser.PARTITION)
            self.state = 4499
            self.match(TSqlParser.FUNCTION)
            self.state = 4500
            localctx.partition_function_name = self.id_()
            self.state = 4501
            self.match(TSqlParser.LR_BRACKET)
            self.state = 4502
            self.match(TSqlParser.RR_BRACKET)
            self.state = 4503
            _la = self._input.LA(1)
            if not(_la==564 or _la==918):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4504
            self.match(TSqlParser.RANGE)
            self.state = 4505
            self.match(TSqlParser.LR_BRACKET)
            self.state = 4506
            self.match(TSqlParser.DECIMAL)
            self.state = 4507
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_partition_schemeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.partition_scheme_name = None # Id_Context
            self.file_group_name = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def PARTITION(self):
            return self.getToken(TSqlParser.PARTITION, 0)

        def SCHEME(self):
            return self.getToken(TSqlParser.SCHEME, 0)

        def NEXT(self):
            return self.getToken(TSqlParser.NEXT, 0)

        def USED(self):
            return self.getToken(TSqlParser.USED, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_partition_scheme

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_partition_scheme" ):
                listener.enterAlter_partition_scheme(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_partition_scheme" ):
                listener.exitAlter_partition_scheme(self)




    def alter_partition_scheme(self):

        localctx = TSqlParser.Alter_partition_schemeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_alter_partition_scheme)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4509
            self.match(TSqlParser.ALTER)
            self.state = 4510
            self.match(TSqlParser.PARTITION)
            self.state = 4511
            self.match(TSqlParser.SCHEME)
            self.state = 4512
            localctx.partition_scheme_name = self.id_()
            self.state = 4513
            self.match(TSqlParser.NEXT)
            self.state = 4514
            self.match(TSqlParser.USED)
            self.state = 4516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,450,self._ctx)
            if la_ == 1:
                self.state = 4515
                localctx.file_group_name = self.id_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_remote_service_bindingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.binding_name = None # Id_Context
            self.user_name = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def REMOTE(self):
            return self.getToken(TSqlParser.REMOTE, 0)

        def SERVICE(self):
            return self.getToken(TSqlParser.SERVICE, 0)

        def BINDING(self):
            return self.getToken(TSqlParser.BINDING, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def USER(self):
            return self.getToken(TSqlParser.USER, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def ANONYMOUS(self):
            return self.getToken(TSqlParser.ANONYMOUS, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_remote_service_binding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_remote_service_binding" ):
                listener.enterAlter_remote_service_binding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_remote_service_binding" ):
                listener.exitAlter_remote_service_binding(self)




    def alter_remote_service_binding(self):

        localctx = TSqlParser.Alter_remote_service_bindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_alter_remote_service_binding)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4518
            self.match(TSqlParser.ALTER)
            self.state = 4519
            self.match(TSqlParser.REMOTE)
            self.state = 4520
            self.match(TSqlParser.SERVICE)
            self.state = 4521
            self.match(TSqlParser.BINDING)
            self.state = 4522
            localctx.binding_name = self.id_()
            self.state = 4523
            self.match(TSqlParser.WITH)
            self.state = 4527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1035:
                self.state = 4524
                self.match(TSqlParser.USER)
                self.state = 4525
                self.match(TSqlParser.EQUAL)
                self.state = 4526
                localctx.user_name = self.id_()


            self.state = 4533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1194:
                self.state = 4529
                self.match(TSqlParser.COMMA)
                self.state = 4530
                self.match(TSqlParser.ANONYMOUS)
                self.state = 4531
                self.match(TSqlParser.EQUAL)
                self.state = 4532
                _la = self._input.LA(1)
                if not(_la==643 or _la==649):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_remote_service_bindingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.binding_name = None # Id_Context
            self.owner_name = None # Id_Context
            self.remote_service_name = None # Token
            self.user_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def REMOTE(self):
            return self.getToken(TSqlParser.REMOTE, 0)

        def SERVICE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SERVICE)
            else:
                return self.getToken(TSqlParser.SERVICE, i)

        def BINDING(self):
            return self.getToken(TSqlParser.BINDING, 0)

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def USER(self):
            return self.getToken(TSqlParser.USER, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def ANONYMOUS(self):
            return self.getToken(TSqlParser.ANONYMOUS, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_remote_service_binding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_remote_service_binding" ):
                listener.enterCreate_remote_service_binding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_remote_service_binding" ):
                listener.exitCreate_remote_service_binding(self)




    def create_remote_service_binding(self):

        localctx = TSqlParser.Create_remote_service_bindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_create_remote_service_binding)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4535
            self.match(TSqlParser.CREATE)
            self.state = 4536
            self.match(TSqlParser.REMOTE)
            self.state = 4537
            self.match(TSqlParser.SERVICE)
            self.state = 4538
            self.match(TSqlParser.BINDING)
            self.state = 4539
            localctx.binding_name = self.id_()
            self.state = 4542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 4540
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 4541
                localctx.owner_name = self.id_()


            self.state = 4544
            self.match(TSqlParser.TO)
            self.state = 4545
            self.match(TSqlParser.SERVICE)
            self.state = 4546
            localctx.remote_service_name = self.match(TSqlParser.STRING)
            self.state = 4547
            self.match(TSqlParser.WITH)
            self.state = 4551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1035:
                self.state = 4548
                self.match(TSqlParser.USER)
                self.state = 4549
                self.match(TSqlParser.EQUAL)
                self.state = 4550
                localctx.user_name = self.id_()


            self.state = 4557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1194:
                self.state = 4553
                self.match(TSqlParser.COMMA)
                self.state = 4554
                self.match(TSqlParser.ANONYMOUS)
                self.state = 4555
                self.match(TSqlParser.EQUAL)
                self.state = 4556
                _la = self._input.LA(1)
                if not(_la==643 or _la==649):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_resource_poolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pool_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def RESOURCE(self):
            return self.getToken(TSqlParser.RESOURCE, 0)

        def POOL(self):
            return self.getToken(TSqlParser.POOL, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def MIN_CPU_PERCENT(self):
            return self.getToken(TSqlParser.MIN_CPU_PERCENT, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def MAX_CPU_PERCENT(self):
            return self.getToken(TSqlParser.MAX_CPU_PERCENT, 0)

        def CAP_CPU_PERCENT(self):
            return self.getToken(TSqlParser.CAP_CPU_PERCENT, 0)

        def AFFINITY(self):
            return self.getToken(TSqlParser.AFFINITY, 0)

        def SCHEDULER(self):
            return self.getToken(TSqlParser.SCHEDULER, 0)

        def MIN_MEMORY_PERCENT(self):
            return self.getToken(TSqlParser.MIN_MEMORY_PERCENT, 0)

        def MAX_MEMORY_PERCENT(self):
            return self.getToken(TSqlParser.MAX_MEMORY_PERCENT, 0)

        def MIN_IOPS_PER_VOLUME(self):
            return self.getToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0)

        def MAX_IOPS_PER_VOLUME(self):
            return self.getToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0)

        def AUTO(self):
            return self.getToken(TSqlParser.AUTO, 0)

        def NUMANODE(self):
            return self.getToken(TSqlParser.NUMANODE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TO)
            else:
                return self.getToken(TSqlParser.TO, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_resource_pool

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_resource_pool" ):
                listener.enterCreate_resource_pool(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_resource_pool" ):
                listener.exitCreate_resource_pool(self)




    def create_resource_pool(self):

        localctx = TSqlParser.Create_resource_poolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_create_resource_pool)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4559
            self.match(TSqlParser.CREATE)
            self.state = 4560
            self.match(TSqlParser.RESOURCE)
            self.state = 4561
            self.match(TSqlParser.POOL)
            self.state = 4562
            localctx.pool_name = self.id_()
            self.state = 4665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,479,self._ctx)
            if la_ == 1:
                self.state = 4563
                self.match(TSqlParser.WITH)
                self.state = 4564
                self.match(TSqlParser.LR_BRACKET)
                self.state = 4571
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,457,self._ctx)
                if la_ == 1:
                    self.state = 4566
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 4565
                        self.match(TSqlParser.COMMA)


                    self.state = 4568
                    self.match(TSqlParser.MIN_CPU_PERCENT)
                    self.state = 4569
                    self.match(TSqlParser.EQUAL)
                    self.state = 4570
                    self.match(TSqlParser.DECIMAL)


                self.state = 4579
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,459,self._ctx)
                if la_ == 1:
                    self.state = 4574
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 4573
                        self.match(TSqlParser.COMMA)


                    self.state = 4576
                    self.match(TSqlParser.MAX_CPU_PERCENT)
                    self.state = 4577
                    self.match(TSqlParser.EQUAL)
                    self.state = 4578
                    self.match(TSqlParser.DECIMAL)


                self.state = 4587
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,461,self._ctx)
                if la_ == 1:
                    self.state = 4582
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 4581
                        self.match(TSqlParser.COMMA)


                    self.state = 4584
                    self.match(TSqlParser.CAP_CPU_PERCENT)
                    self.state = 4585
                    self.match(TSqlParser.EQUAL)
                    self.state = 4586
                    self.match(TSqlParser.DECIMAL)


                self.state = 4630
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,470,self._ctx)
                if la_ == 1:
                    self.state = 4590
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 4589
                        self.match(TSqlParser.COMMA)


                    self.state = 4592
                    self.match(TSqlParser.AFFINITY)
                    self.state = 4593
                    self.match(TSqlParser.SCHEDULER)
                    self.state = 4594
                    self.match(TSqlParser.EQUAL)
                    self.state = 4628
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [69]:
                        self.state = 4595
                        self.match(TSqlParser.AUTO)
                        pass
                    elif token in [1192]:
                        self.state = 4596
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 4606 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 4598
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 4597
                                self.match(TSqlParser.COMMA)


                            self.state = 4604
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,464,self._ctx)
                            if la_ == 1:
                                self.state = 4600
                                self.match(TSqlParser.DECIMAL)
                                pass

                            elif la_ == 2:
                                self.state = 4601
                                self.match(TSqlParser.DECIMAL)
                                self.state = 4602
                                self.match(TSqlParser.TO)
                                self.state = 4603
                                self.match(TSqlParser.DECIMAL)
                                pass


                            self.state = 4608 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1168 or _la==1194):
                                break

                        self.state = 4610
                        self.match(TSqlParser.RR_BRACKET)
                        pass
                    elif token in [632]:
                        self.state = 4611
                        self.match(TSqlParser.NUMANODE)
                        self.state = 4612
                        self.match(TSqlParser.EQUAL)
                        self.state = 4613
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 4623 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 4615
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 4614
                                self.match(TSqlParser.COMMA)


                            self.state = 4621
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,467,self._ctx)
                            if la_ == 1:
                                self.state = 4617
                                self.match(TSqlParser.DECIMAL)
                                pass

                            elif la_ == 2:
                                self.state = 4618
                                self.match(TSqlParser.DECIMAL)
                                self.state = 4619
                                self.match(TSqlParser.TO)
                                self.state = 4620
                                self.match(TSqlParser.DECIMAL)
                                pass


                            self.state = 4625 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1168 or _la==1194):
                                break

                        self.state = 4627
                        self.match(TSqlParser.RR_BRACKET)
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4638
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,472,self._ctx)
                if la_ == 1:
                    self.state = 4633
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 4632
                        self.match(TSqlParser.COMMA)


                    self.state = 4635
                    self.match(TSqlParser.MIN_MEMORY_PERCENT)
                    self.state = 4636
                    self.match(TSqlParser.EQUAL)
                    self.state = 4637
                    self.match(TSqlParser.DECIMAL)


                self.state = 4646
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,474,self._ctx)
                if la_ == 1:
                    self.state = 4641
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 4640
                        self.match(TSqlParser.COMMA)


                    self.state = 4643
                    self.match(TSqlParser.MAX_MEMORY_PERCENT)
                    self.state = 4644
                    self.match(TSqlParser.EQUAL)
                    self.state = 4645
                    self.match(TSqlParser.DECIMAL)


                self.state = 4654
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,476,self._ctx)
                if la_ == 1:
                    self.state = 4649
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 4648
                        self.match(TSqlParser.COMMA)


                    self.state = 4651
                    self.match(TSqlParser.MIN_IOPS_PER_VOLUME)
                    self.state = 4652
                    self.match(TSqlParser.EQUAL)
                    self.state = 4653
                    self.match(TSqlParser.DECIMAL)


                self.state = 4662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==549 or _la==1194:
                    self.state = 4657
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 4656
                        self.match(TSqlParser.COMMA)


                    self.state = 4659
                    self.match(TSqlParser.MAX_IOPS_PER_VOLUME)
                    self.state = 4660
                    self.match(TSqlParser.EQUAL)
                    self.state = 4661
                    self.match(TSqlParser.DECIMAL)


                self.state = 4664
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_resource_governorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # Id_Context
            self.function_name = None # Id_Context
            self.max_outstanding_io_per_volume = None # Token

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def RESOURCE(self):
            return self.getToken(TSqlParser.RESOURCE, 0)

        def GOVERNOR(self):
            return self.getToken(TSqlParser.GOVERNOR, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def CLASSIFIER_FUNCTION(self):
            return self.getToken(TSqlParser.CLASSIFIER_FUNCTION, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def RESET(self):
            return self.getToken(TSqlParser.RESET, 0)

        def STATISTICS(self):
            return self.getToken(TSqlParser.STATISTICS, 0)

        def MAX_OUTSTANDING_IO_PER_VOLUME(self):
            return self.getToken(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0)

        def DISABLE(self):
            return self.getToken(TSqlParser.DISABLE, 0)

        def RECONFIGURE(self):
            return self.getToken(TSqlParser.RECONFIGURE, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def NULL_(self):
            return self.getToken(TSqlParser.NULL_, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_resource_governor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_resource_governor" ):
                listener.enterAlter_resource_governor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_resource_governor" ):
                listener.exitAlter_resource_governor(self)




    def alter_resource_governor(self):

        localctx = TSqlParser.Alter_resource_governorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_alter_resource_governor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4667
            self.match(TSqlParser.ALTER)
            self.state = 4668
            self.match(TSqlParser.RESOURCE)
            self.state = 4669
            self.match(TSqlParser.GOVERNOR)
            self.state = 4691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,481,self._ctx)
            if la_ == 1:
                self.state = 4670
                _la = self._input.LA(1)
                if not(_la==268 or _la==770):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.state = 4671
                self.match(TSqlParser.WITH)
                self.state = 4672
                self.match(TSqlParser.LR_BRACKET)
                self.state = 4673
                self.match(TSqlParser.CLASSIFIER_FUNCTION)
                self.state = 4674
                self.match(TSqlParser.EQUAL)
                self.state = 4680
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                    self.state = 4675
                    localctx.schema_name = self.id_()
                    self.state = 4676
                    self.match(TSqlParser.DOT)
                    self.state = 4677
                    localctx.function_name = self.id_()
                    pass
                elif token in [630]:
                    self.state = 4679
                    self.match(TSqlParser.NULL_)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4682
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.state = 4683
                self.match(TSqlParser.RESET)
                self.state = 4684
                self.match(TSqlParser.STATISTICS)
                pass

            elif la_ == 4:
                self.state = 4685
                self.match(TSqlParser.WITH)
                self.state = 4686
                self.match(TSqlParser.LR_BRACKET)
                self.state = 4687
                self.match(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME)
                self.state = 4688
                self.match(TSqlParser.EQUAL)
                self.state = 4689
                localctx.max_outstanding_io_per_volume = self.match(TSqlParser.DECIMAL)
                self.state = 4690
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_database_audit_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.audit_specification_name = None # Id_Context
            self.audit_name = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def AUDIT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AUDIT)
            else:
                return self.getToken(TSqlParser.AUDIT, i)

        def SPECIFICATION(self):
            return self.getToken(TSqlParser.SPECIFICATION, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def audit_action_spec_group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Audit_action_spec_groupContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Audit_action_spec_groupContext,i)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def STATE(self):
            return self.getToken(TSqlParser.STATE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_database_audit_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_database_audit_specification" ):
                listener.enterAlter_database_audit_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_database_audit_specification" ):
                listener.exitAlter_database_audit_specification(self)




    def alter_database_audit_specification(self):

        localctx = TSqlParser.Alter_database_audit_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_alter_database_audit_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4693
            self.match(TSqlParser.ALTER)
            self.state = 4694
            self.match(TSqlParser.DATABASE)
            self.state = 4695
            self.match(TSqlParser.AUDIT)
            self.state = 4696
            self.match(TSqlParser.SPECIFICATION)
            self.state = 4697
            localctx.audit_specification_name = self.id_()
            self.state = 4702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==363:
                self.state = 4698
                self.match(TSqlParser.FOR)
                self.state = 4699
                self.match(TSqlParser.SERVER)
                self.state = 4700
                self.match(TSqlParser.AUDIT)
                self.state = 4701
                localctx.audit_name = self.id_()


            self.state = 4712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,484,self._ctx)
            if la_ == 1:
                self.state = 4704
                self.audit_action_spec_group()
                self.state = 4709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 4705
                    self.match(TSqlParser.COMMA)
                    self.state = 4706
                    self.audit_action_spec_group()
                    self.state = 4711
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 4720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,485,self._ctx)
            if la_ == 1:
                self.state = 4714
                self.match(TSqlParser.WITH)
                self.state = 4715
                self.match(TSqlParser.LR_BRACKET)
                self.state = 4716
                self.match(TSqlParser.STATE)
                self.state = 4717
                self.match(TSqlParser.EQUAL)
                self.state = 4718
                _la = self._input.LA(1)
                if not(_la==643 or _la==649):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4719
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Audit_action_spec_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.audit_action_group_name = None # Id_Context

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def audit_action_specification(self):
            return self.getTypedRuleContext(TSqlParser.Audit_action_specificationContext,0)


        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_audit_action_spec_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAudit_action_spec_group" ):
                listener.enterAudit_action_spec_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAudit_action_spec_group" ):
                listener.exitAudit_action_spec_group(self)




    def audit_action_spec_group(self):

        localctx = TSqlParser.Audit_action_spec_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_audit_action_spec_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4722
            _la = self._input.LA(1)
            if not(_la==11 or _la==280):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4723
            self.match(TSqlParser.LR_BRACKET)
            self.state = 4726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,486,self._ctx)
            if la_ == 1:
                self.state = 4724
                self.audit_action_specification()
                pass

            elif la_ == 2:
                self.state = 4725
                localctx.audit_action_group_name = self.id_()
                pass


            self.state = 4728
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Audit_action_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def action_specification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Action_specificationContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Action_specificationContext,i)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def audit_securable(self):
            return self.getTypedRuleContext(TSqlParser.Audit_securableContext,0)


        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def principal_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Principal_idContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Principal_idContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def audit_class_name(self):
            return self.getTypedRuleContext(TSqlParser.Audit_class_nameContext,0)


        def DOUBLE_COLON(self):
            return self.getToken(TSqlParser.DOUBLE_COLON, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_audit_action_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAudit_action_specification" ):
                listener.enterAudit_action_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAudit_action_specification" ):
                listener.exitAudit_action_specification(self)




    def audit_action_specification(self):

        localctx = TSqlParser.Audit_action_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_audit_action_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4730
            self.action_specification()
            self.state = 4735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 4731
                self.match(TSqlParser.COMMA)
                self.state = 4732
                self.action_specification()
                self.state = 4737
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4738
            self.match(TSqlParser.ON)
            self.state = 4742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,488,self._ctx)
            if la_ == 1:
                self.state = 4739
                self.audit_class_name()
                self.state = 4740
                self.match(TSqlParser.DOUBLE_COLON)


            self.state = 4744
            self.audit_securable()
            self.state = 4745
            self.match(TSqlParser.BY)
            self.state = 4746
            self.principal_id()
            self.state = 4751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 4747
                self.match(TSqlParser.COMMA)
                self.state = 4748
                self.principal_id()
                self.state = 4753
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Action_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(TSqlParser.SELECT, 0)

        def INSERT(self):
            return self.getToken(TSqlParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(TSqlParser.UPDATE, 0)

        def DELETE(self):
            return self.getToken(TSqlParser.DELETE, 0)

        def EXECUTE(self):
            return self.getToken(TSqlParser.EXECUTE, 0)

        def RECEIVE(self):
            return self.getToken(TSqlParser.RECEIVE, 0)

        def REFERENCES(self):
            return self.getToken(TSqlParser.REFERENCES, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_action_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAction_specification" ):
                listener.enterAction_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAction_specification" ):
                listener.exitAction_specification(self)




    def action_specification(self):

        localctx = TSqlParser.Action_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_action_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4754
            _la = self._input.LA(1)
            if not(_la==252 or _la==318 or _la==457 or _la==768 or _la==773 or _la==865 or _la==1028):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Audit_class_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(TSqlParser.OBJECT, 0)

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def TABLE(self):
            return self.getToken(TSqlParser.TABLE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_audit_class_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAudit_class_name" ):
                listener.enterAudit_class_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAudit_class_name" ):
                listener.exitAudit_class_name(self)




    def audit_class_name(self):

        localctx = TSqlParser.Audit_class_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_audit_class_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4756
            _la = self._input.LA(1)
            if not(_la==635 or _la==844 or _la==966):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Audit_securableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_audit_securable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAudit_securable" ):
                listener.enterAudit_securable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAudit_securable" ):
                listener.exitAudit_securable(self)




    def audit_securable(self):

        localctx = TSqlParser.Audit_securableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_audit_securable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4766
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,491,self._ctx)
            if la_ == 1:
                self.state = 4761
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,490,self._ctx)
                if la_ == 1:
                    self.state = 4758
                    self.id_()
                    self.state = 4759
                    self.match(TSqlParser.DOT)


                self.state = 4763
                self.id_()
                self.state = 4764
                self.match(TSqlParser.DOT)


            self.state = 4768
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_db_roleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.role_name = None # Id_Context
            self.database_principal = None # Id_Context
            self.new_role_name = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def MEMBER(self):
            return self.getToken(TSqlParser.MEMBER, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_db_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_db_role" ):
                listener.enterAlter_db_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_db_role" ):
                listener.exitAlter_db_role(self)




    def alter_db_role(self):

        localctx = TSqlParser.Alter_db_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_alter_db_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4770
            self.match(TSqlParser.ALTER)
            self.state = 4771
            self.match(TSqlParser.ROLE)
            self.state = 4772
            localctx.role_name = self.id_()
            self.state = 4780
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11, 280]:
                self.state = 4773
                _la = self._input.LA(1)
                if not(_la==11 or _la==280):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4774
                self.match(TSqlParser.MEMBER)
                self.state = 4775
                localctx.database_principal = self.id_()
                pass
            elif token in [1063]:
                self.state = 4776
                self.match(TSqlParser.WITH)
                self.state = 4777
                self.match(TSqlParser.NAME)
                self.state = 4778
                self.match(TSqlParser.EQUAL)
                self.state = 4779
                localctx.new_role_name = self.id_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_database_audit_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.audit_specification_name = None # Id_Context
            self.audit_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def AUDIT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AUDIT)
            else:
                return self.getToken(TSqlParser.AUDIT, i)

        def SPECIFICATION(self):
            return self.getToken(TSqlParser.SPECIFICATION, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def audit_action_spec_group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Audit_action_spec_groupContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Audit_action_spec_groupContext,i)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def STATE(self):
            return self.getToken(TSqlParser.STATE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_database_audit_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_database_audit_specification" ):
                listener.enterCreate_database_audit_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_database_audit_specification" ):
                listener.exitCreate_database_audit_specification(self)




    def create_database_audit_specification(self):

        localctx = TSqlParser.Create_database_audit_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_create_database_audit_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4782
            self.match(TSqlParser.CREATE)
            self.state = 4783
            self.match(TSqlParser.DATABASE)
            self.state = 4784
            self.match(TSqlParser.AUDIT)
            self.state = 4785
            self.match(TSqlParser.SPECIFICATION)
            self.state = 4786
            localctx.audit_specification_name = self.id_()
            self.state = 4791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==363:
                self.state = 4787
                self.match(TSqlParser.FOR)
                self.state = 4788
                self.match(TSqlParser.SERVER)
                self.state = 4789
                self.match(TSqlParser.AUDIT)
                self.state = 4790
                localctx.audit_name = self.id_()


            self.state = 4801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,495,self._ctx)
            if la_ == 1:
                self.state = 4793
                self.audit_action_spec_group()
                self.state = 4798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 4794
                    self.match(TSqlParser.COMMA)
                    self.state = 4795
                    self.audit_action_spec_group()
                    self.state = 4800
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 4809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,496,self._ctx)
            if la_ == 1:
                self.state = 4803
                self.match(TSqlParser.WITH)
                self.state = 4804
                self.match(TSqlParser.LR_BRACKET)
                self.state = 4805
                self.match(TSqlParser.STATE)
                self.state = 4806
                self.match(TSqlParser.EQUAL)
                self.state = 4807
                _la = self._input.LA(1)
                if not(_la==643 or _la==649):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4808
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_db_roleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.role_name = None # Id_Context
            self.owner_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_db_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_db_role" ):
                listener.enterCreate_db_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_db_role" ):
                listener.exitCreate_db_role(self)




    def create_db_role(self):

        localctx = TSqlParser.Create_db_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_create_db_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4811
            self.match(TSqlParser.CREATE)
            self.state = 4812
            self.match(TSqlParser.ROLE)
            self.state = 4813
            localctx.role_name = self.id_()
            self.state = 4816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 4814
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 4815
                localctx.owner_name = self.id_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_routeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.route_name = None # Id_Context
            self.owner_name = None # Id_Context
            self.route_service_name = None # Token
            self.broker_instance_identifier = None # Token

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def ROUTE(self):
            return self.getToken(TSqlParser.ROUTE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def ADDRESS(self):
            return self.getToken(TSqlParser.ADDRESS, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def SERVICE_NAME(self):
            return self.getToken(TSqlParser.SERVICE_NAME, 0)

        def BROKER_INSTANCE(self):
            return self.getToken(TSqlParser.BROKER_INSTANCE, 0)

        def LIFETIME(self):
            return self.getToken(TSqlParser.LIFETIME, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def MIRROR_ADDRESS(self):
            return self.getToken(TSqlParser.MIRROR_ADDRESS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_route

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_route" ):
                listener.enterCreate_route(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_route" ):
                listener.exitCreate_route(self)




    def create_route(self):

        localctx = TSqlParser.Create_routeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_create_route)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4818
            self.match(TSqlParser.CREATE)
            self.state = 4819
            self.match(TSqlParser.ROUTE)
            self.state = 4820
            localctx.route_name = self.id_()
            self.state = 4823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 4821
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 4822
                localctx.owner_name = self.id_()


            self.state = 4825
            self.match(TSqlParser.WITH)
            self.state = 4832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,500,self._ctx)
            if la_ == 1:
                self.state = 4827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 4826
                    self.match(TSqlParser.COMMA)


                self.state = 4829
                self.match(TSqlParser.SERVICE_NAME)
                self.state = 4830
                self.match(TSqlParser.EQUAL)
                self.state = 4831
                localctx.route_service_name = self.match(TSqlParser.STRING)


            self.state = 4840
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,502,self._ctx)
            if la_ == 1:
                self.state = 4835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 4834
                    self.match(TSqlParser.COMMA)


                self.state = 4837
                self.match(TSqlParser.BROKER_INSTANCE)
                self.state = 4838
                self.match(TSqlParser.EQUAL)
                self.state = 4839
                localctx.broker_instance_identifier = self.match(TSqlParser.STRING)


            self.state = 4848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,504,self._ctx)
            if la_ == 1:
                self.state = 4843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 4842
                    self.match(TSqlParser.COMMA)


                self.state = 4845
                self.match(TSqlParser.LIFETIME)
                self.state = 4846
                self.match(TSqlParser.EQUAL)
                self.state = 4847
                self.match(TSqlParser.DECIMAL)


            self.state = 4851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1194:
                self.state = 4850
                self.match(TSqlParser.COMMA)


            self.state = 4853
            self.match(TSqlParser.ADDRESS)
            self.state = 4854
            self.match(TSqlParser.EQUAL)
            self.state = 4855
            self.match(TSqlParser.STRING)
            self.state = 4860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1194:
                self.state = 4856
                self.match(TSqlParser.COMMA)
                self.state = 4857
                self.match(TSqlParser.MIRROR_ADDRESS)
                self.state = 4858
                self.match(TSqlParser.EQUAL)
                self.state = 4859
                self.match(TSqlParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # Id_Context
            self.rule_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def RULE(self):
            return self.getToken(TSqlParser.RULE, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_rule" ):
                listener.enterCreate_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_rule" ):
                listener.exitCreate_rule(self)




    def create_rule(self):

        localctx = TSqlParser.Create_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_create_rule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4862
            self.match(TSqlParser.CREATE)
            self.state = 4863
            self.match(TSqlParser.RULE)
            self.state = 4867
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,507,self._ctx)
            if la_ == 1:
                self.state = 4864
                localctx.schema_name = self.id_()
                self.state = 4865
                self.match(TSqlParser.DOT)


            self.state = 4869
            localctx.rule_name = self.id_()
            self.state = 4870
            self.match(TSqlParser.AS)
            self.state = 4871
            self.search_condition(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_schema_sqlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def SCHEMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SCHEMA)
            else:
                return self.getToken(TSqlParser.SCHEMA, i)

        def TRANSFER(self):
            return self.getToken(TSqlParser.TRANSFER, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def DOUBLE_COLON(self):
            return self.getToken(TSqlParser.DOUBLE_COLON, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def OBJECT(self):
            return self.getToken(TSqlParser.OBJECT, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def XML(self):
            return self.getToken(TSqlParser.XML, 0)

        def COLLECTION(self):
            return self.getToken(TSqlParser.COLLECTION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_schema_sql

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_schema_sql" ):
                listener.enterAlter_schema_sql(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_schema_sql" ):
                listener.exitAlter_schema_sql(self)




    def alter_schema_sql(self):

        localctx = TSqlParser.Alter_schema_sqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_alter_schema_sql)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4873
            self.match(TSqlParser.ALTER)
            self.state = 4874
            self.match(TSqlParser.SCHEMA)
            self.state = 4875
            localctx.schema_name = self.id_()
            self.state = 4876
            self.match(TSqlParser.TRANSFER)
            self.state = 4885
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,509,self._ctx)
            if la_ == 1:
                self.state = 4882
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [635]:
                    self.state = 4877
                    self.match(TSqlParser.OBJECT)
                    pass
                elif token in [1010]:
                    self.state = 4878
                    self.match(TSqlParser.TYPE)
                    pass
                elif token in [1074]:
                    self.state = 4879
                    self.match(TSqlParser.XML)
                    self.state = 4880
                    self.match(TSqlParser.SCHEMA)
                    self.state = 4881
                    self.match(TSqlParser.COLLECTION)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4884
                self.match(TSqlParser.DOUBLE_COLON)


            self.state = 4887
            self.id_()
            self.state = 4890
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,510,self._ctx)
            if la_ == 1:
                self.state = 4888
                self.match(TSqlParser.DOT)
                self.state = 4889
                self.id_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # Id_Context
            self.owner_name = None # Id_Context
            self.object_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def SCHEMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SCHEMA)
            else:
                return self.getToken(TSqlParser.SCHEMA, i)

        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def create_table(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Create_tableContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Create_tableContext,i)


        def create_view(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Create_viewContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Create_viewContext,i)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TO)
            else:
                return self.getToken(TSqlParser.TO, i)

        def REVOKE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.REVOKE)
            else:
                return self.getToken(TSqlParser.REVOKE, i)

        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FROM)
            else:
                return self.getToken(TSqlParser.FROM, i)

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.GRANT)
            else:
                return self.getToken(TSqlParser.GRANT, i)

        def DENY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DENY)
            else:
                return self.getToken(TSqlParser.DENY, i)

        def SELECT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SELECT)
            else:
                return self.getToken(TSqlParser.SELECT, i)

        def INSERT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.INSERT)
            else:
                return self.getToken(TSqlParser.INSERT, i)

        def DELETE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DELETE)
            else:
                return self.getToken(TSqlParser.DELETE, i)

        def UPDATE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.UPDATE)
            else:
                return self.getToken(TSqlParser.UPDATE, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOUBLE_COLON)
            else:
                return self.getToken(TSqlParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_schema" ):
                listener.enterCreate_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_schema" ):
                listener.exitCreate_schema(self)




    def create_schema(self):

        localctx = TSqlParser.Create_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_create_schema)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4892
            self.match(TSqlParser.CREATE)
            self.state = 4893
            self.match(TSqlParser.SCHEMA)
            self.state = 4901
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,511,self._ctx)
            if la_ == 1:
                self.state = 4894
                localctx.schema_name = self.id_()
                pass

            elif la_ == 2:
                self.state = 4895
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 4896
                localctx.owner_name = self.id_()
                pass

            elif la_ == 3:
                self.state = 4897
                localctx.schema_name = self.id_()
                self.state = 4898
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 4899
                localctx.owner_name = self.id_()
                pass


            self.state = 4929
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,515,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4927
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,514,self._ctx)
                    if la_ == 1:
                        self.state = 4903
                        self.create_table()
                        pass

                    elif la_ == 2:
                        self.state = 4904
                        self.create_view()
                        pass

                    elif la_ == 3:
                        self.state = 4905
                        _la = self._input.LA(1)
                        if not(_la==255 or _la==401):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 4906
                        _la = self._input.LA(1)
                        if not(_la==252 or _la==457 or _la==865 or _la==1028):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 4907
                        self.match(TSqlParser.ON)
                        self.state = 4910
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==844:
                            self.state = 4908
                            self.match(TSqlParser.SCHEMA)
                            self.state = 4909
                            self.match(TSqlParser.DOUBLE_COLON)


                        self.state = 4912
                        localctx.object_name = self.id_()
                        self.state = 4913
                        self.match(TSqlParser.TO)
                        self.state = 4914
                        localctx.owner_name = self.id_()
                        pass

                    elif la_ == 4:
                        self.state = 4916
                        self.match(TSqlParser.REVOKE)
                        self.state = 4917
                        _la = self._input.LA(1)
                        if not(_la==252 or _la==457 or _la==865 or _la==1028):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 4918
                        self.match(TSqlParser.ON)
                        self.state = 4921
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==844:
                            self.state = 4919
                            self.match(TSqlParser.SCHEMA)
                            self.state = 4920
                            self.match(TSqlParser.DOUBLE_COLON)


                        self.state = 4923
                        localctx.object_name = self.id_()
                        self.state = 4924
                        self.match(TSqlParser.FROM)
                        self.state = 4925
                        localctx.owner_name = self.id_()
                        pass

             
                self.state = 4931
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,515,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_schema_azure_sql_dw_and_pdwContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # Id_Context
            self.owner_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_schema_azure_sql_dw_and_pdw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_schema_azure_sql_dw_and_pdw" ):
                listener.enterCreate_schema_azure_sql_dw_and_pdw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_schema_azure_sql_dw_and_pdw" ):
                listener.exitCreate_schema_azure_sql_dw_and_pdw(self)




    def create_schema_azure_sql_dw_and_pdw(self):

        localctx = TSqlParser.Create_schema_azure_sql_dw_and_pdwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_create_schema_azure_sql_dw_and_pdw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4932
            self.match(TSqlParser.CREATE)
            self.state = 4933
            self.match(TSqlParser.SCHEMA)
            self.state = 4934
            localctx.schema_name = self.id_()
            self.state = 4937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 4935
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 4936
                localctx.owner_name = self.id_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_schema_azure_sql_dw_and_pdwContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def TRANSFER(self):
            return self.getToken(TSqlParser.TRANSFER, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def OBJECT(self):
            return self.getToken(TSqlParser.OBJECT, 0)

        def DOUBLE_COLON(self):
            return self.getToken(TSqlParser.DOUBLE_COLON, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def ID(self):
            return self.getToken(TSqlParser.ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_schema_azure_sql_dw_and_pdw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_schema_azure_sql_dw_and_pdw" ):
                listener.enterAlter_schema_azure_sql_dw_and_pdw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_schema_azure_sql_dw_and_pdw" ):
                listener.exitAlter_schema_azure_sql_dw_and_pdw(self)




    def alter_schema_azure_sql_dw_and_pdw(self):

        localctx = TSqlParser.Alter_schema_azure_sql_dw_and_pdwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_alter_schema_azure_sql_dw_and_pdw)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4939
            self.match(TSqlParser.ALTER)
            self.state = 4940
            self.match(TSqlParser.SCHEMA)
            self.state = 4941
            localctx.schema_name = self.id_()
            self.state = 4942
            self.match(TSqlParser.TRANSFER)
            self.state = 4945
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,517,self._ctx)
            if la_ == 1:
                self.state = 4943
                self.match(TSqlParser.OBJECT)
                self.state = 4944
                self.match(TSqlParser.DOUBLE_COLON)


            self.state = 4947
            self.id_()
            self.state = 4950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,518,self._ctx)
            if la_ == 1:
                self.state = 4948
                self.match(TSqlParser.DOT)
                self.state = 4949
                self.match(TSqlParser.ID)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_search_property_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.new_list_name = None # Id_Context
            self.database_name = None # Id_Context
            self.source_list_name = None # Id_Context
            self.owner_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def SEARCH(self):
            return self.getToken(TSqlParser.SEARCH, 0)

        def PROPERTY(self):
            return self.getToken(TSqlParser.PROPERTY, 0)

        def LIST(self):
            return self.getToken(TSqlParser.LIST, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_search_property_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_search_property_list" ):
                listener.enterCreate_search_property_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_search_property_list" ):
                listener.exitCreate_search_property_list(self)




    def create_search_property_list(self):

        localctx = TSqlParser.Create_search_property_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_create_search_property_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4952
            self.match(TSqlParser.CREATE)
            self.state = 4953
            self.match(TSqlParser.SEARCH)
            self.state = 4954
            self.match(TSqlParser.PROPERTY)
            self.state = 4955
            self.match(TSqlParser.LIST)
            self.state = 4956
            localctx.new_list_name = self.id_()
            self.state = 4964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==378:
                self.state = 4957
                self.match(TSqlParser.FROM)
                self.state = 4961
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,519,self._ctx)
                if la_ == 1:
                    self.state = 4958
                    localctx.database_name = self.id_()
                    self.state = 4959
                    self.match(TSqlParser.DOT)


                self.state = 4963
                localctx.source_list_name = self.id_()


            self.state = 4968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 4966
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 4967
                localctx.owner_name = self.id_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_security_policyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # Id_Context
            self.security_policy_name = None # Id_Context
            self.tvf_schema_name = None # Id_Context
            self.security_predicate_function_name = None # Id_Context
            self.column_name_or_arguments = None # Id_Context
            self.table_schema_name = None # Id_Context
            self.name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def SECURITY(self):
            return self.getToken(TSqlParser.SECURITY, 0)

        def POLICY(self):
            return self.getToken(TSqlParser.POLICY, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def ADD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ADD)
            else:
                return self.getToken(TSqlParser.ADD, i)

        def PREDICATE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.PREDICATE)
            else:
                return self.getToken(TSqlParser.PREDICATE, i)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def STATE(self):
            return self.getToken(TSqlParser.STATE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(TSqlParser.REPLICATION, 0)

        def OFF(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OFF)
            else:
                return self.getToken(TSqlParser.OFF, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def AFTER(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AFTER)
            else:
                return self.getToken(TSqlParser.AFTER, i)

        def BEFORE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BEFORE)
            else:
                return self.getToken(TSqlParser.BEFORE, i)

        def SCHEMABINDING(self):
            return self.getToken(TSqlParser.SCHEMABINDING, 0)

        def FILTER(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FILTER)
            else:
                return self.getToken(TSqlParser.FILTER, i)

        def BLOCK(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BLOCK)
            else:
                return self.getToken(TSqlParser.BLOCK, i)

        def INSERT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.INSERT)
            else:
                return self.getToken(TSqlParser.INSERT, i)

        def UPDATE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.UPDATE)
            else:
                return self.getToken(TSqlParser.UPDATE, i)

        def DELETE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DELETE)
            else:
                return self.getToken(TSqlParser.DELETE, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_security_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_security_policy" ):
                listener.enterCreate_security_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_security_policy" ):
                listener.exitCreate_security_policy(self)




    def create_security_policy(self):

        localctx = TSqlParser.Create_security_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_create_security_policy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4970
            self.match(TSqlParser.CREATE)
            self.state = 4971
            self.match(TSqlParser.SECURITY)
            self.state = 4972
            self.match(TSqlParser.POLICY)
            self.state = 4976
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,522,self._ctx)
            if la_ == 1:
                self.state = 4973
                localctx.schema_name = self.id_()
                self.state = 4974
                self.match(TSqlParser.DOT)


            self.state = 4978
            localctx.security_policy_name = self.id_()
            self.state = 5019 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4980
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 4979
                        self.match(TSqlParser.COMMA)


                    self.state = 4982
                    self.match(TSqlParser.ADD)
                    self.state = 4984
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==98 or _la==358:
                        self.state = 4983
                        _la = self._input.LA(1)
                        if not(_la==98 or _la==358):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 4986
                    self.match(TSqlParser.PREDICATE)
                    self.state = 4987
                    localctx.tvf_schema_name = self.id_()
                    self.state = 4988
                    self.match(TSqlParser.DOT)
                    self.state = 4989
                    localctx.security_predicate_function_name = self.id_()
                    self.state = 4990
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 4995 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4992
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 4991
                            self.match(TSqlParser.COMMA)


                        self.state = 4994
                        localctx.column_name_or_arguments = self.id_()
                        self.state = 4997 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6845834611130385) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4691064178111676937) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8067776519934725599) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387491794949) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714895912701) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755875440852549633) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873769796032868641) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510937462965505) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799299309863) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -651161675377934355) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -387309693044787745) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689521) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906573) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 4294967467) != 0)):
                            break

                    self.state = 4999
                    self.match(TSqlParser.RR_BRACKET)
                    self.state = 5000
                    self.match(TSqlParser.ON)
                    self.state = 5001
                    localctx.table_schema_name = self.id_()
                    self.state = 5002
                    self.match(TSqlParser.DOT)
                    self.state = 5003
                    localctx.name = self.id_()
                    self.state = 5016
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,530,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 5014
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,529,self._ctx)
                            if la_ == 1:
                                self.state = 5005
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 5004
                                    self.match(TSqlParser.COMMA)


                                self.state = 5007
                                self.match(TSqlParser.AFTER)
                                self.state = 5008
                                _la = self._input.LA(1)
                                if not(_la==457 or _la==1028):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                pass

                            elif la_ == 2:
                                self.state = 5010
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 5009
                                    self.match(TSqlParser.COMMA)


                                self.state = 5012
                                self.match(TSqlParser.BEFORE)
                                self.state = 5013
                                _la = self._input.LA(1)
                                if not(_la==252 or _la==1028):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                pass

                     
                        self.state = 5018
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,530,self._ctx)


                else:
                    raise NoViableAltException(self)
                self.state = 5021 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,531,self._ctx)

            self.state = 5033
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,533,self._ctx)
            if la_ == 1:
                self.state = 5023
                self.match(TSqlParser.WITH)
                self.state = 5024
                self.match(TSqlParser.LR_BRACKET)
                self.state = 5025
                self.match(TSqlParser.STATE)
                self.state = 5026
                self.match(TSqlParser.EQUAL)
                self.state = 5027
                _la = self._input.LA(1)
                if not(_la==643 or _la==649):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5030
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==845:
                    self.state = 5028
                    self.match(TSqlParser.SCHEMABINDING)
                    self.state = 5029
                    _la = self._input.LA(1)
                    if not(_la==643 or _la==649):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5032
                self.match(TSqlParser.RR_BRACKET)


            self.state = 5038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==614:
                self.state = 5035
                self.match(TSqlParser.NOT)
                self.state = 5036
                self.match(TSqlParser.FOR)
                self.state = 5037
                self.match(TSqlParser.REPLICATION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_sequenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # Id_Context
            self.sequence_name = None # Id_Context
            self.sequnce_increment = None # Token

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def SEQUENCE(self):
            return self.getToken(TSqlParser.SEQUENCE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def RESTART(self):
            return self.getToken(TSqlParser.RESTART, 0)

        def INCREMENT(self):
            return self.getToken(TSqlParser.INCREMENT, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def MINVALUE(self):
            return self.getToken(TSqlParser.MINVALUE, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NO)
            else:
                return self.getToken(TSqlParser.NO, i)

        def MAXVALUE(self):
            return self.getToken(TSqlParser.MAXVALUE, 0)

        def CYCLE(self):
            return self.getToken(TSqlParser.CYCLE, 0)

        def CACHE(self):
            return self.getToken(TSqlParser.CACHE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_sequence" ):
                listener.enterAlter_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_sequence" ):
                listener.exitAlter_sequence(self)




    def alter_sequence(self):

        localctx = TSqlParser.Alter_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_alter_sequence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5040
            self.match(TSqlParser.ALTER)
            self.state = 5041
            self.match(TSqlParser.SEQUENCE)
            self.state = 5045
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,535,self._ctx)
            if la_ == 1:
                self.state = 5042
                localctx.schema_name = self.id_()
                self.state = 5043
                self.match(TSqlParser.DOT)


            self.state = 5047
            localctx.sequence_name = self.id_()
            self.state = 5053
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,537,self._ctx)
            if la_ == 1:
                self.state = 5048
                self.match(TSqlParser.RESTART)
                self.state = 5051
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,536,self._ctx)
                if la_ == 1:
                    self.state = 5049
                    self.match(TSqlParser.WITH)
                    self.state = 5050
                    self.match(TSqlParser.DECIMAL)




            self.state = 5058
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,538,self._ctx)
            if la_ == 1:
                self.state = 5055
                self.match(TSqlParser.INCREMENT)
                self.state = 5056
                self.match(TSqlParser.BY)
                self.state = 5057
                localctx.sequnce_increment = self.match(TSqlParser.DECIMAL)


            self.state = 5064
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,539,self._ctx)
            if la_ == 1:
                self.state = 5060
                self.match(TSqlParser.MINVALUE)
                self.state = 5061
                self.match(TSqlParser.DECIMAL)

            elif la_ == 2:
                self.state = 5062
                self.match(TSqlParser.NO)
                self.state = 5063
                self.match(TSqlParser.MINVALUE)


            self.state = 5070
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,540,self._ctx)
            if la_ == 1:
                self.state = 5066
                self.match(TSqlParser.MAXVALUE)
                self.state = 5067
                self.match(TSqlParser.DECIMAL)

            elif la_ == 2:
                self.state = 5068
                self.match(TSqlParser.NO)
                self.state = 5069
                self.match(TSqlParser.MAXVALUE)


            self.state = 5075
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,541,self._ctx)
            if la_ == 1:
                self.state = 5072
                self.match(TSqlParser.CYCLE)

            elif la_ == 2:
                self.state = 5073
                self.match(TSqlParser.NO)
                self.state = 5074
                self.match(TSqlParser.CYCLE)


            self.state = 5081
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,542,self._ctx)
            if la_ == 1:
                self.state = 5077
                self.match(TSqlParser.CACHE)
                self.state = 5078
                self.match(TSqlParser.DECIMAL)

            elif la_ == 2:
                self.state = 5079
                self.match(TSqlParser.NO)
                self.state = 5080
                self.match(TSqlParser.CACHE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_sequenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # Id_Context
            self.sequence_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def SEQUENCE(self):
            return self.getToken(TSqlParser.SEQUENCE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)


        def START(self):
            return self.getToken(TSqlParser.START, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def INCREMENT(self):
            return self.getToken(TSqlParser.INCREMENT, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def MINVALUE(self):
            return self.getToken(TSqlParser.MINVALUE, 0)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NO)
            else:
                return self.getToken(TSqlParser.NO, i)

        def MAXVALUE(self):
            return self.getToken(TSqlParser.MAXVALUE, 0)

        def CYCLE(self):
            return self.getToken(TSqlParser.CYCLE, 0)

        def CACHE(self):
            return self.getToken(TSqlParser.CACHE, 0)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MINUS)
            else:
                return self.getToken(TSqlParser.MINUS, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_sequence" ):
                listener.enterCreate_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_sequence" ):
                listener.exitCreate_sequence(self)




    def create_sequence(self):

        localctx = TSqlParser.Create_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_create_sequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5083
            self.match(TSqlParser.CREATE)
            self.state = 5084
            self.match(TSqlParser.SEQUENCE)
            self.state = 5088
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,543,self._ctx)
            if la_ == 1:
                self.state = 5085
                localctx.schema_name = self.id_()
                self.state = 5086
                self.match(TSqlParser.DOT)


            self.state = 5090
            localctx.sequence_name = self.id_()
            self.state = 5093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 5091
                self.match(TSqlParser.AS)
                self.state = 5092
                self.data_type()


            self.state = 5098
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,545,self._ctx)
            if la_ == 1:
                self.state = 5095
                self.match(TSqlParser.START)
                self.state = 5096
                self.match(TSqlParser.WITH)
                self.state = 5097
                self.match(TSqlParser.DECIMAL)


            self.state = 5106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,547,self._ctx)
            if la_ == 1:
                self.state = 5100
                self.match(TSqlParser.INCREMENT)
                self.state = 5101
                self.match(TSqlParser.BY)
                self.state = 5103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1202:
                    self.state = 5102
                    self.match(TSqlParser.MINUS)


                self.state = 5105
                self.match(TSqlParser.DECIMAL)


            self.state = 5117
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,550,self._ctx)
            if la_ == 1:
                self.state = 5108
                self.match(TSqlParser.MINVALUE)
                self.state = 5113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1168 or _la==1202:
                    self.state = 5110
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1202:
                        self.state = 5109
                        self.match(TSqlParser.MINUS)


                    self.state = 5112
                    self.match(TSqlParser.DECIMAL)



            elif la_ == 2:
                self.state = 5115
                self.match(TSqlParser.NO)
                self.state = 5116
                self.match(TSqlParser.MINVALUE)


            self.state = 5128
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,553,self._ctx)
            if la_ == 1:
                self.state = 5119
                self.match(TSqlParser.MAXVALUE)
                self.state = 5124
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1168 or _la==1202:
                    self.state = 5121
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1202:
                        self.state = 5120
                        self.match(TSqlParser.MINUS)


                    self.state = 5123
                    self.match(TSqlParser.DECIMAL)



            elif la_ == 2:
                self.state = 5126
                self.match(TSqlParser.NO)
                self.state = 5127
                self.match(TSqlParser.MAXVALUE)


            self.state = 5133
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,554,self._ctx)
            if la_ == 1:
                self.state = 5130
                self.match(TSqlParser.CYCLE)

            elif la_ == 2:
                self.state = 5131
                self.match(TSqlParser.NO)
                self.state = 5132
                self.match(TSqlParser.CYCLE)


            self.state = 5141
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,556,self._ctx)
            if la_ == 1:
                self.state = 5135
                self.match(TSqlParser.CACHE)
                self.state = 5137
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1168:
                    self.state = 5136
                    self.match(TSqlParser.DECIMAL)



            elif la_ == 2:
                self.state = 5139
                self.match(TSqlParser.NO)
                self.state = 5140
                self.match(TSqlParser.CACHE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_server_auditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.audit_name = None # Id_Context
            self.filepath = None # Token
            self.max_rollover_files = None # Token
            self.max_files = None # Token
            self.queue_delay = None # Token
            self.event_field_name = None # Id_Context
            self.new_audit_name = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def AUDIT(self):
            return self.getToken(TSqlParser.AUDIT, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def REMOVE(self):
            return self.getToken(TSqlParser.REMOVE, 0)

        def WHERE(self):
            return self.getToken(TSqlParser.WHERE, 0)

        def MODIFY(self):
            return self.getToken(TSqlParser.MODIFY, 0)

        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def APPLICATION_LOG(self):
            return self.getToken(TSqlParser.APPLICATION_LOG, 0)

        def SECURITY_LOG(self):
            return self.getToken(TSqlParser.SECURITY_LOG, 0)

        def QUEUE_DELAY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.QUEUE_DELAY)
            else:
                return self.getToken(TSqlParser.QUEUE_DELAY, i)

        def ON_FAILURE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON_FAILURE)
            else:
                return self.getToken(TSqlParser.ON_FAILURE, i)

        def STATE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STATE)
            else:
                return self.getToken(TSqlParser.STATE, i)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def AND(self):
            return self.getToken(TSqlParser.AND, 0)

        def OR(self):
            return self.getToken(TSqlParser.OR, 0)

        def CONTINUE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CONTINUE)
            else:
                return self.getToken(TSqlParser.CONTINUE, i)

        def SHUTDOWN(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SHUTDOWN)
            else:
                return self.getToken(TSqlParser.SHUTDOWN, i)

        def FAIL_OPERATION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FAIL_OPERATION)
            else:
                return self.getToken(TSqlParser.FAIL_OPERATION, i)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def OFF(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OFF)
            else:
                return self.getToken(TSqlParser.OFF, i)

        def GREATER(self):
            return self.getToken(TSqlParser.GREATER, 0)

        def LESS(self):
            return self.getToken(TSqlParser.LESS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def EXCLAMATION(self):
            return self.getToken(TSqlParser.EXCLAMATION, 0)

        def FILEPATH(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FILEPATH)
            else:
                return self.getToken(TSqlParser.FILEPATH, i)

        def MAXSIZE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MAXSIZE)
            else:
                return self.getToken(TSqlParser.MAXSIZE, i)

        def MAX_ROLLOVER_FILES(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MAX_ROLLOVER_FILES)
            else:
                return self.getToken(TSqlParser.MAX_ROLLOVER_FILES, i)

        def MAX_FILES(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MAX_FILES)
            else:
                return self.getToken(TSqlParser.MAX_FILES, i)

        def RESERVE_DISK_SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RESERVE_DISK_SPACE)
            else:
                return self.getToken(TSqlParser.RESERVE_DISK_SPACE, i)

        def UNLIMITED(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.UNLIMITED)
            else:
                return self.getToken(TSqlParser.UNLIMITED, i)

        def MB(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MB)
            else:
                return self.getToken(TSqlParser.MB, i)

        def GB(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.GB)
            else:
                return self.getToken(TSqlParser.GB, i)

        def TB(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TB)
            else:
                return self.getToken(TSqlParser.TB, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_server_audit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_server_audit" ):
                listener.enterAlter_server_audit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_server_audit" ):
                listener.exitAlter_server_audit(self)




    def alter_server_audit(self):

        localctx = TSqlParser.Alter_server_auditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_alter_server_audit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5143
            self.match(TSqlParser.ALTER)
            self.state = 5144
            self.match(TSqlParser.SERVER)
            self.state = 5145
            self.match(TSqlParser.AUDIT)
            self.state = 5146
            localctx.audit_name = self.id_()
            self.state = 5278
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,581,self._ctx)
            if la_ == 1:
                self.state = 5194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==986:
                    self.state = 5147
                    self.match(TSqlParser.TO)
                    self.state = 5192
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [341]:
                        self.state = 5148
                        self.match(TSqlParser.FILE)

                        self.state = 5149
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 5186
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==348 or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & 33025) != 0) or _la==798 or _la==1194:
                            self.state = 5184
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,563,self._ctx)
                            if la_ == 1:
                                self.state = 5151
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 5150
                                    self.match(TSqlParser.COMMA)


                                self.state = 5153
                                self.match(TSqlParser.FILEPATH)
                                self.state = 5154
                                self.match(TSqlParser.EQUAL)
                                self.state = 5155
                                localctx.filepath = self.match(TSqlParser.STRING)
                                pass

                            elif la_ == 2:
                                self.state = 5157
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 5156
                                    self.match(TSqlParser.COMMA)


                                self.state = 5159
                                self.match(TSqlParser.MAXSIZE)
                                self.state = 5160
                                self.match(TSqlParser.EQUAL)
                                self.state = 5164
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [1168]:
                                    self.state = 5161
                                    self.match(TSqlParser.DECIMAL)
                                    self.state = 5162
                                    _la = self._input.LA(1)
                                    if not(_la==385 or _la==557 or _la==975):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    pass
                                elif token in [1022]:
                                    self.state = 5163
                                    self.match(TSqlParser.UNLIMITED)
                                    pass
                                else:
                                    raise NoViableAltException(self)

                                pass

                            elif la_ == 3:
                                self.state = 5167
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 5166
                                    self.match(TSqlParser.COMMA)


                                self.state = 5169
                                self.match(TSqlParser.MAX_ROLLOVER_FILES)
                                self.state = 5170
                                self.match(TSqlParser.EQUAL)
                                self.state = 5171
                                localctx.max_rollover_files = self._input.LT(1)
                                _la = self._input.LA(1)
                                if not(_la==1022 or _la==1168):
                                    localctx.max_rollover_files = self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                pass

                            elif la_ == 4:
                                self.state = 5173
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 5172
                                    self.match(TSqlParser.COMMA)


                                self.state = 5175
                                self.match(TSqlParser.MAX_FILES)
                                self.state = 5176
                                self.match(TSqlParser.EQUAL)
                                self.state = 5177
                                localctx.max_files = self.match(TSqlParser.DECIMAL)
                                pass

                            elif la_ == 5:
                                self.state = 5179
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 5178
                                    self.match(TSqlParser.COMMA)


                                self.state = 5181
                                self.match(TSqlParser.RESERVE_DISK_SPACE)
                                self.state = 5182
                                self.match(TSqlParser.EQUAL)
                                self.state = 5183
                                _la = self._input.LA(1)
                                if not(_la==643 or _la==649):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                pass


                            self.state = 5188
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 5189
                        self.match(TSqlParser.RR_BRACKET)
                        pass
                    elif token in [49]:
                        self.state = 5190
                        self.match(TSqlParser.APPLICATION_LOG)
                        pass
                    elif token in [863]:
                        self.state = 5191
                        self.match(TSqlParser.SECURITY_LOG)
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 5222
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,572,self._ctx)
                if la_ == 1:
                    self.state = 5196
                    self.match(TSqlParser.WITH)
                    self.state = 5197
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 5218
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==652 or _la==742 or _la==929 or _la==1194:
                        self.state = 5216
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,570,self._ctx)
                        if la_ == 1:
                            self.state = 5199
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 5198
                                self.match(TSqlParser.COMMA)


                            self.state = 5201
                            self.match(TSqlParser.QUEUE_DELAY)
                            self.state = 5202
                            self.match(TSqlParser.EQUAL)
                            self.state = 5203
                            localctx.queue_delay = self.match(TSqlParser.DECIMAL)
                            pass

                        elif la_ == 2:
                            self.state = 5205
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 5204
                                self.match(TSqlParser.COMMA)


                            self.state = 5207
                            self.match(TSqlParser.ON_FAILURE)
                            self.state = 5208
                            self.match(TSqlParser.EQUAL)
                            self.state = 5209
                            _la = self._input.LA(1)
                            if not(_la==184 or _la==336 or _la==900):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 3:
                            self.state = 5211
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 5210
                                self.match(TSqlParser.COMMA)


                            self.state = 5213
                            self.match(TSqlParser.STATE)
                            self.state = 5214
                            self.match(TSqlParser.EQUAL)
                            self.state = 5215
                            _la = self._input.LA(1)
                            if not(_la==643 or _la==649):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass


                        self.state = 5220
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 5221
                    self.match(TSqlParser.RR_BRACKET)


                self.state = 5270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1060:
                    self.state = 5224
                    self.match(TSqlParser.WHERE)
                    self.state = 5268
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,579,self._ctx)
                    if la_ == 1:
                        self.state = 5226
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 5225
                            self.match(TSqlParser.COMMA)


                        self.state = 5229
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==614:
                            self.state = 5228
                            self.match(TSqlParser.NOT)


                        self.state = 5231
                        localctx.event_field_name = self.id_()
                        self.state = 5243
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,575,self._ctx)
                        if la_ == 1:
                            self.state = 5232
                            self.match(TSqlParser.EQUAL)
                            pass

                        elif la_ == 2:
                            self.state = 5233
                            self.match(TSqlParser.LESS)
                            self.state = 5234
                            self.match(TSqlParser.GREATER)
                            pass

                        elif la_ == 3:
                            self.state = 5235
                            self.match(TSqlParser.EXCLAMATION)
                            self.state = 5236
                            self.match(TSqlParser.EQUAL)
                            pass

                        elif la_ == 4:
                            self.state = 5237
                            self.match(TSqlParser.GREATER)
                            pass

                        elif la_ == 5:
                            self.state = 5238
                            self.match(TSqlParser.GREATER)
                            self.state = 5239
                            self.match(TSqlParser.EQUAL)
                            pass

                        elif la_ == 6:
                            self.state = 5240
                            self.match(TSqlParser.LESS)
                            pass

                        elif la_ == 7:
                            self.state = 5241
                            self.match(TSqlParser.LESS)
                            self.state = 5242
                            self.match(TSqlParser.EQUAL)
                            pass


                        self.state = 5245
                        _la = self._input.LA(1)
                        if not(_la==1168 or _la==1170):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 2:
                        self.state = 5248
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 5247
                            self.match(TSqlParser.COMMA)


                        self.state = 5250
                        _la = self._input.LA(1)
                        if not(_la==37 or _la==665):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5252
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==614:
                            self.state = 5251
                            self.match(TSqlParser.NOT)


                        self.state = 5265
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,578,self._ctx)
                        if la_ == 1:
                            self.state = 5254
                            self.match(TSqlParser.EQUAL)
                            pass

                        elif la_ == 2:
                            self.state = 5255
                            self.match(TSqlParser.LESS)
                            self.state = 5256
                            self.match(TSqlParser.GREATER)
                            pass

                        elif la_ == 3:
                            self.state = 5257
                            self.match(TSqlParser.EXCLAMATION)
                            self.state = 5258
                            self.match(TSqlParser.EQUAL)
                            pass

                        elif la_ == 4:
                            self.state = 5259
                            self.match(TSqlParser.GREATER)
                            pass

                        elif la_ == 5:
                            self.state = 5260
                            self.match(TSqlParser.GREATER)
                            self.state = 5261
                            self.match(TSqlParser.EQUAL)
                            pass

                        elif la_ == 6:
                            self.state = 5262
                            self.match(TSqlParser.LESS)
                            pass

                        elif la_ == 7:
                            self.state = 5263
                            self.match(TSqlParser.LESS)
                            self.state = 5264
                            self.match(TSqlParser.EQUAL)
                            pass


                        self.state = 5267
                        _la = self._input.LA(1)
                        if not(_la==1168 or _la==1170):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass




                pass

            elif la_ == 2:
                self.state = 5272
                self.match(TSqlParser.REMOVE)
                self.state = 5273
                self.match(TSqlParser.WHERE)
                pass

            elif la_ == 3:
                self.state = 5274
                self.match(TSqlParser.MODIFY)
                self.state = 5275
                self.match(TSqlParser.NAME)
                self.state = 5276
                self.match(TSqlParser.EQUAL)
                self.state = 5277
                localctx.new_audit_name = self.id_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_server_auditContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.audit_name = None # Id_Context
            self.filepath = None # Token
            self.max_rollover_files = None # Token
            self.max_files = None # Token
            self.queue_delay = None # Token
            self.audit_guid = None # Id_Context
            self.event_field_name = None # Id_Context
            self.new_audit_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def AUDIT(self):
            return self.getToken(TSqlParser.AUDIT, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def REMOVE(self):
            return self.getToken(TSqlParser.REMOVE, 0)

        def WHERE(self):
            return self.getToken(TSqlParser.WHERE, 0)

        def MODIFY(self):
            return self.getToken(TSqlParser.MODIFY, 0)

        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def APPLICATION_LOG(self):
            return self.getToken(TSqlParser.APPLICATION_LOG, 0)

        def SECURITY_LOG(self):
            return self.getToken(TSqlParser.SECURITY_LOG, 0)

        def QUEUE_DELAY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.QUEUE_DELAY)
            else:
                return self.getToken(TSqlParser.QUEUE_DELAY, i)

        def ON_FAILURE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON_FAILURE)
            else:
                return self.getToken(TSqlParser.ON_FAILURE, i)

        def STATE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STATE)
            else:
                return self.getToken(TSqlParser.STATE, i)

        def AUDIT_GUID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AUDIT_GUID)
            else:
                return self.getToken(TSqlParser.AUDIT_GUID, i)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def AND(self):
            return self.getToken(TSqlParser.AND, 0)

        def OR(self):
            return self.getToken(TSqlParser.OR, 0)

        def CONTINUE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CONTINUE)
            else:
                return self.getToken(TSqlParser.CONTINUE, i)

        def SHUTDOWN(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SHUTDOWN)
            else:
                return self.getToken(TSqlParser.SHUTDOWN, i)

        def FAIL_OPERATION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FAIL_OPERATION)
            else:
                return self.getToken(TSqlParser.FAIL_OPERATION, i)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def OFF(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OFF)
            else:
                return self.getToken(TSqlParser.OFF, i)

        def GREATER(self):
            return self.getToken(TSqlParser.GREATER, 0)

        def LESS(self):
            return self.getToken(TSqlParser.LESS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def EXCLAMATION(self):
            return self.getToken(TSqlParser.EXCLAMATION, 0)

        def FILEPATH(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FILEPATH)
            else:
                return self.getToken(TSqlParser.FILEPATH, i)

        def MAXSIZE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MAXSIZE)
            else:
                return self.getToken(TSqlParser.MAXSIZE, i)

        def MAX_ROLLOVER_FILES(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MAX_ROLLOVER_FILES)
            else:
                return self.getToken(TSqlParser.MAX_ROLLOVER_FILES, i)

        def MAX_FILES(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MAX_FILES)
            else:
                return self.getToken(TSqlParser.MAX_FILES, i)

        def RESERVE_DISK_SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RESERVE_DISK_SPACE)
            else:
                return self.getToken(TSqlParser.RESERVE_DISK_SPACE, i)

        def UNLIMITED(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.UNLIMITED)
            else:
                return self.getToken(TSqlParser.UNLIMITED, i)

        def MB(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MB)
            else:
                return self.getToken(TSqlParser.MB, i)

        def GB(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.GB)
            else:
                return self.getToken(TSqlParser.GB, i)

        def TB(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TB)
            else:
                return self.getToken(TSqlParser.TB, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_server_audit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_server_audit" ):
                listener.enterCreate_server_audit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_server_audit" ):
                listener.exitCreate_server_audit(self)




    def create_server_audit(self):

        localctx = TSqlParser.Create_server_auditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_create_server_audit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5280
            self.match(TSqlParser.CREATE)
            self.state = 5281
            self.match(TSqlParser.SERVER)
            self.state = 5282
            self.match(TSqlParser.AUDIT)
            self.state = 5283
            localctx.audit_name = self.id_()
            self.state = 5421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,607,self._ctx)
            if la_ == 1:
                self.state = 5331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==986:
                    self.state = 5284
                    self.match(TSqlParser.TO)
                    self.state = 5329
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [341]:
                        self.state = 5285
                        self.match(TSqlParser.FILE)

                        self.state = 5286
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 5323
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==348 or ((((_la - 540)) & ~0x3f) == 0 and ((1 << (_la - 540)) & 33025) != 0) or _la==798 or _la==1194:
                            self.state = 5321
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,588,self._ctx)
                            if la_ == 1:
                                self.state = 5288
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 5287
                                    self.match(TSqlParser.COMMA)


                                self.state = 5290
                                self.match(TSqlParser.FILEPATH)
                                self.state = 5291
                                self.match(TSqlParser.EQUAL)
                                self.state = 5292
                                localctx.filepath = self.match(TSqlParser.STRING)
                                pass

                            elif la_ == 2:
                                self.state = 5294
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 5293
                                    self.match(TSqlParser.COMMA)


                                self.state = 5296
                                self.match(TSqlParser.MAXSIZE)
                                self.state = 5297
                                self.match(TSqlParser.EQUAL)
                                self.state = 5301
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [1168]:
                                    self.state = 5298
                                    self.match(TSqlParser.DECIMAL)
                                    self.state = 5299
                                    _la = self._input.LA(1)
                                    if not(_la==385 or _la==557 or _la==975):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    pass
                                elif token in [1022]:
                                    self.state = 5300
                                    self.match(TSqlParser.UNLIMITED)
                                    pass
                                else:
                                    raise NoViableAltException(self)

                                pass

                            elif la_ == 3:
                                self.state = 5304
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 5303
                                    self.match(TSqlParser.COMMA)


                                self.state = 5306
                                self.match(TSqlParser.MAX_ROLLOVER_FILES)
                                self.state = 5307
                                self.match(TSqlParser.EQUAL)
                                self.state = 5308
                                localctx.max_rollover_files = self._input.LT(1)
                                _la = self._input.LA(1)
                                if not(_la==1022 or _la==1168):
                                    localctx.max_rollover_files = self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                pass

                            elif la_ == 4:
                                self.state = 5310
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 5309
                                    self.match(TSqlParser.COMMA)


                                self.state = 5312
                                self.match(TSqlParser.MAX_FILES)
                                self.state = 5313
                                self.match(TSqlParser.EQUAL)
                                self.state = 5314
                                localctx.max_files = self.match(TSqlParser.DECIMAL)
                                pass

                            elif la_ == 5:
                                self.state = 5316
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 5315
                                    self.match(TSqlParser.COMMA)


                                self.state = 5318
                                self.match(TSqlParser.RESERVE_DISK_SPACE)
                                self.state = 5319
                                self.match(TSqlParser.EQUAL)
                                self.state = 5320
                                _la = self._input.LA(1)
                                if not(_la==643 or _la==649):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                pass


                            self.state = 5325
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 5326
                        self.match(TSqlParser.RR_BRACKET)
                        pass
                    elif token in [49]:
                        self.state = 5327
                        self.match(TSqlParser.APPLICATION_LOG)
                        pass
                    elif token in [863]:
                        self.state = 5328
                        self.match(TSqlParser.SECURITY_LOG)
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 5365
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,598,self._ctx)
                if la_ == 1:
                    self.state = 5333
                    self.match(TSqlParser.WITH)
                    self.state = 5334
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 5361
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==65 or _la==652 or _la==742 or _la==929 or _la==1194:
                        self.state = 5359
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,596,self._ctx)
                        if la_ == 1:
                            self.state = 5336
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 5335
                                self.match(TSqlParser.COMMA)


                            self.state = 5338
                            self.match(TSqlParser.QUEUE_DELAY)
                            self.state = 5339
                            self.match(TSqlParser.EQUAL)
                            self.state = 5340
                            localctx.queue_delay = self.match(TSqlParser.DECIMAL)
                            pass

                        elif la_ == 2:
                            self.state = 5342
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 5341
                                self.match(TSqlParser.COMMA)


                            self.state = 5344
                            self.match(TSqlParser.ON_FAILURE)
                            self.state = 5345
                            self.match(TSqlParser.EQUAL)
                            self.state = 5346
                            _la = self._input.LA(1)
                            if not(_la==184 or _la==336 or _la==900):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 3:
                            self.state = 5348
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 5347
                                self.match(TSqlParser.COMMA)


                            self.state = 5350
                            self.match(TSqlParser.STATE)
                            self.state = 5351
                            self.match(TSqlParser.EQUAL)
                            self.state = 5352
                            _la = self._input.LA(1)
                            if not(_la==643 or _la==649):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 4:
                            self.state = 5354
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 5353
                                self.match(TSqlParser.COMMA)


                            self.state = 5356
                            self.match(TSqlParser.AUDIT_GUID)
                            self.state = 5357
                            self.match(TSqlParser.EQUAL)
                            self.state = 5358
                            localctx.audit_guid = self.id_()
                            pass


                        self.state = 5363
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 5364
                    self.match(TSqlParser.RR_BRACKET)


                self.state = 5413
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1060:
                    self.state = 5367
                    self.match(TSqlParser.WHERE)
                    self.state = 5411
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,605,self._ctx)
                    if la_ == 1:
                        self.state = 5369
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 5368
                            self.match(TSqlParser.COMMA)


                        self.state = 5372
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==614:
                            self.state = 5371
                            self.match(TSqlParser.NOT)


                        self.state = 5374
                        localctx.event_field_name = self.id_()
                        self.state = 5386
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,601,self._ctx)
                        if la_ == 1:
                            self.state = 5375
                            self.match(TSqlParser.EQUAL)
                            pass

                        elif la_ == 2:
                            self.state = 5376
                            self.match(TSqlParser.LESS)
                            self.state = 5377
                            self.match(TSqlParser.GREATER)
                            pass

                        elif la_ == 3:
                            self.state = 5378
                            self.match(TSqlParser.EXCLAMATION)
                            self.state = 5379
                            self.match(TSqlParser.EQUAL)
                            pass

                        elif la_ == 4:
                            self.state = 5380
                            self.match(TSqlParser.GREATER)
                            pass

                        elif la_ == 5:
                            self.state = 5381
                            self.match(TSqlParser.GREATER)
                            self.state = 5382
                            self.match(TSqlParser.EQUAL)
                            pass

                        elif la_ == 6:
                            self.state = 5383
                            self.match(TSqlParser.LESS)
                            pass

                        elif la_ == 7:
                            self.state = 5384
                            self.match(TSqlParser.LESS)
                            self.state = 5385
                            self.match(TSqlParser.EQUAL)
                            pass


                        self.state = 5388
                        _la = self._input.LA(1)
                        if not(_la==1168 or _la==1170):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 2:
                        self.state = 5391
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 5390
                            self.match(TSqlParser.COMMA)


                        self.state = 5393
                        _la = self._input.LA(1)
                        if not(_la==37 or _la==665):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5395
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==614:
                            self.state = 5394
                            self.match(TSqlParser.NOT)


                        self.state = 5408
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,604,self._ctx)
                        if la_ == 1:
                            self.state = 5397
                            self.match(TSqlParser.EQUAL)
                            pass

                        elif la_ == 2:
                            self.state = 5398
                            self.match(TSqlParser.LESS)
                            self.state = 5399
                            self.match(TSqlParser.GREATER)
                            pass

                        elif la_ == 3:
                            self.state = 5400
                            self.match(TSqlParser.EXCLAMATION)
                            self.state = 5401
                            self.match(TSqlParser.EQUAL)
                            pass

                        elif la_ == 4:
                            self.state = 5402
                            self.match(TSqlParser.GREATER)
                            pass

                        elif la_ == 5:
                            self.state = 5403
                            self.match(TSqlParser.GREATER)
                            self.state = 5404
                            self.match(TSqlParser.EQUAL)
                            pass

                        elif la_ == 6:
                            self.state = 5405
                            self.match(TSqlParser.LESS)
                            pass

                        elif la_ == 7:
                            self.state = 5406
                            self.match(TSqlParser.LESS)
                            self.state = 5407
                            self.match(TSqlParser.EQUAL)
                            pass


                        self.state = 5410
                        _la = self._input.LA(1)
                        if not(_la==1168 or _la==1170):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass




                pass

            elif la_ == 2:
                self.state = 5415
                self.match(TSqlParser.REMOVE)
                self.state = 5416
                self.match(TSqlParser.WHERE)
                pass

            elif la_ == 3:
                self.state = 5417
                self.match(TSqlParser.MODIFY)
                self.state = 5418
                self.match(TSqlParser.NAME)
                self.state = 5419
                self.match(TSqlParser.EQUAL)
                self.state = 5420
                localctx.new_audit_name = self.id_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_server_audit_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.audit_specification_name = None # Id_Context
            self.audit_name = None # Id_Context
            self.audit_action_group_name = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def SERVER(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SERVER)
            else:
                return self.getToken(TSqlParser.SERVER, i)

        def AUDIT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AUDIT)
            else:
                return self.getToken(TSqlParser.AUDIT, i)

        def SPECIFICATION(self):
            return self.getToken(TSqlParser.SPECIFICATION, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def STATE(self):
            return self.getToken(TSqlParser.STATE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def ADD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ADD)
            else:
                return self.getToken(TSqlParser.ADD, i)

        def DROP(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DROP)
            else:
                return self.getToken(TSqlParser.DROP, i)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_server_audit_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_server_audit_specification" ):
                listener.enterAlter_server_audit_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_server_audit_specification" ):
                listener.exitAlter_server_audit_specification(self)




    def alter_server_audit_specification(self):

        localctx = TSqlParser.Alter_server_audit_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_alter_server_audit_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5423
            self.match(TSqlParser.ALTER)
            self.state = 5424
            self.match(TSqlParser.SERVER)
            self.state = 5425
            self.match(TSqlParser.AUDIT)
            self.state = 5426
            self.match(TSqlParser.SPECIFICATION)
            self.state = 5427
            localctx.audit_specification_name = self.id_()
            self.state = 5432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==363:
                self.state = 5428
                self.match(TSqlParser.FOR)
                self.state = 5429
                self.match(TSqlParser.SERVER)
                self.state = 5430
                self.match(TSqlParser.AUDIT)
                self.state = 5431
                localctx.audit_name = self.id_()


            self.state = 5441
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,609,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5434
                    _la = self._input.LA(1)
                    if not(_la==11 or _la==280):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5435
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 5436
                    localctx.audit_action_group_name = self.id_()
                    self.state = 5437
                    self.match(TSqlParser.RR_BRACKET) 
                self.state = 5443
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,609,self._ctx)

            self.state = 5450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,610,self._ctx)
            if la_ == 1:
                self.state = 5444
                self.match(TSqlParser.WITH)
                self.state = 5445
                self.match(TSqlParser.LR_BRACKET)
                self.state = 5446
                self.match(TSqlParser.STATE)
                self.state = 5447
                self.match(TSqlParser.EQUAL)
                self.state = 5448
                _la = self._input.LA(1)
                if not(_la==643 or _la==649):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5449
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_server_audit_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.audit_specification_name = None # Id_Context
            self.audit_name = None # Id_Context
            self.audit_action_group_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def SERVER(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SERVER)
            else:
                return self.getToken(TSqlParser.SERVER, i)

        def AUDIT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AUDIT)
            else:
                return self.getToken(TSqlParser.AUDIT, i)

        def SPECIFICATION(self):
            return self.getToken(TSqlParser.SPECIFICATION, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def ADD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ADD)
            else:
                return self.getToken(TSqlParser.ADD, i)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def STATE(self):
            return self.getToken(TSqlParser.STATE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_server_audit_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_server_audit_specification" ):
                listener.enterCreate_server_audit_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_server_audit_specification" ):
                listener.exitCreate_server_audit_specification(self)




    def create_server_audit_specification(self):

        localctx = TSqlParser.Create_server_audit_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_create_server_audit_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5452
            self.match(TSqlParser.CREATE)
            self.state = 5453
            self.match(TSqlParser.SERVER)
            self.state = 5454
            self.match(TSqlParser.AUDIT)
            self.state = 5455
            self.match(TSqlParser.SPECIFICATION)
            self.state = 5456
            localctx.audit_specification_name = self.id_()
            self.state = 5461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==363:
                self.state = 5457
                self.match(TSqlParser.FOR)
                self.state = 5458
                self.match(TSqlParser.SERVER)
                self.state = 5459
                self.match(TSqlParser.AUDIT)
                self.state = 5460
                localctx.audit_name = self.id_()


            self.state = 5470
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,612,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5463
                    self.match(TSqlParser.ADD)
                    self.state = 5464
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 5465
                    localctx.audit_action_group_name = self.id_()
                    self.state = 5466
                    self.match(TSqlParser.RR_BRACKET) 
                self.state = 5472
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,612,self._ctx)

            self.state = 5479
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,613,self._ctx)
            if la_ == 1:
                self.state = 5473
                self.match(TSqlParser.WITH)
                self.state = 5474
                self.match(TSqlParser.LR_BRACKET)
                self.state = 5475
                self.match(TSqlParser.STATE)
                self.state = 5476
                self.match(TSqlParser.EQUAL)
                self.state = 5477
                _la = self._input.LA(1)
                if not(_la==643 or _la==649):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5478
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_server_configurationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def CONFIGURATION(self):
            return self.getToken(TSqlParser.CONFIGURATION, 0)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SET)
            else:
                return self.getToken(TSqlParser.SET, i)

        def PROCESS(self):
            return self.getToken(TSqlParser.PROCESS, 0)

        def AFFINITY(self):
            return self.getToken(TSqlParser.AFFINITY, 0)

        def DIAGNOSTICS(self):
            return self.getToken(TSqlParser.DIAGNOSTICS, 0)

        def LOG(self):
            return self.getToken(TSqlParser.LOG, 0)

        def FAILOVER(self):
            return self.getToken(TSqlParser.FAILOVER, 0)

        def CLUSTER(self):
            return self.getToken(TSqlParser.CLUSTER, 0)

        def PROPERTY(self):
            return self.getToken(TSqlParser.PROPERTY, 0)

        def HADR(self):
            return self.getToken(TSqlParser.HADR, 0)

        def CONTEXT(self):
            return self.getToken(TSqlParser.CONTEXT, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def BUFFER(self):
            return self.getToken(TSqlParser.BUFFER, 0)

        def POOL(self):
            return self.getToken(TSqlParser.POOL, 0)

        def EXTENSION(self):
            return self.getToken(TSqlParser.EXTENSION, 0)

        def SOFTNUMA(self):
            return self.getToken(TSqlParser.SOFTNUMA, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def LOCAL(self):
            return self.getToken(TSqlParser.LOCAL, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def CPU(self):
            return self.getToken(TSqlParser.CPU, 0)

        def NUMANODE(self):
            return self.getToken(TSqlParser.NUMANODE, 0)

        def PATH(self):
            return self.getToken(TSqlParser.PATH, 0)

        def MAX_SIZE(self):
            return self.getToken(TSqlParser.MAX_SIZE, 0)

        def MAX_FILES(self):
            return self.getToken(TSqlParser.MAX_FILES, 0)

        def VERBOSELOGGING(self):
            return self.getToken(TSqlParser.VERBOSELOGGING, 0)

        def SQLDUMPERFLAGS(self):
            return self.getToken(TSqlParser.SQLDUMPERFLAGS, 0)

        def SQLDUMPERPATH(self):
            return self.getToken(TSqlParser.SQLDUMPERPATH, 0)

        def SQLDUMPERTIMEOUT(self):
            return self.getToken(TSqlParser.SQLDUMPERTIMEOUT, 0)

        def FAILURECONDITIONLEVEL(self):
            return self.getToken(TSqlParser.FAILURECONDITIONLEVEL, 0)

        def HEALTHCHECKTIMEOUT(self):
            return self.getToken(TSqlParser.HEALTHCHECKTIMEOUT, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def FILENAME(self):
            return self.getToken(TSqlParser.FILENAME, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def SIZE(self):
            return self.getToken(TSqlParser.SIZE, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def KB(self):
            return self.getToken(TSqlParser.KB, 0)

        def MB(self):
            return self.getToken(TSqlParser.MB, 0)

        def GB(self):
            return self.getToken(TSqlParser.GB, 0)

        def AUTO(self):
            return self.getToken(TSqlParser.AUTO, 0)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TO)
            else:
                return self.getToken(TSqlParser.TO, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_server_configuration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_server_configuration" ):
                listener.enterAlter_server_configuration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_server_configuration" ):
                listener.exitAlter_server_configuration(self)




    def alter_server_configuration(self):

        localctx = TSqlParser.Alter_server_configurationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_alter_server_configuration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5481
            self.match(TSqlParser.ALTER)
            self.state = 5482
            self.match(TSqlParser.SERVER)
            self.state = 5483
            self.match(TSqlParser.CONFIGURATION)
            self.state = 5484
            self.match(TSqlParser.SET)

            self.state = 5590
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [730]:
                self.state = 5485
                self.match(TSqlParser.PROCESS)
                self.state = 5486
                self.match(TSqlParser.AFFINITY)
                self.state = 5522
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [196]:
                    self.state = 5487
                    self.match(TSqlParser.CPU)
                    self.state = 5488
                    self.match(TSqlParser.EQUAL)
                    self.state = 5504
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [69]:
                        self.state = 5489
                        self.match(TSqlParser.AUTO)
                        pass
                    elif token in [1168, 1194]:
                        self.state = 5500 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 5500
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,616,self._ctx)
                            if la_ == 1:
                                self.state = 5491
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 5490
                                    self.match(TSqlParser.COMMA)


                                self.state = 5493
                                self.match(TSqlParser.DECIMAL)
                                pass

                            elif la_ == 2:
                                self.state = 5495
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 5494
                                    self.match(TSqlParser.COMMA)


                                self.state = 5497
                                self.match(TSqlParser.DECIMAL)
                                self.state = 5498
                                self.match(TSqlParser.TO)
                                self.state = 5499
                                self.match(TSqlParser.DECIMAL)
                                pass


                            self.state = 5502 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1168 or _la==1194):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [632]:
                    self.state = 5506
                    self.match(TSqlParser.NUMANODE)
                    self.state = 5507
                    self.match(TSqlParser.EQUAL)
                    self.state = 5518 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 5518
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,621,self._ctx)
                        if la_ == 1:
                            self.state = 5509
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 5508
                                self.match(TSqlParser.COMMA)


                            self.state = 5511
                            self.match(TSqlParser.DECIMAL)
                            pass

                        elif la_ == 2:
                            self.state = 5513
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 5512
                                self.match(TSqlParser.COMMA)


                            self.state = 5515
                            self.match(TSqlParser.DECIMAL)
                            self.state = 5516
                            self.match(TSqlParser.TO)
                            self.state = 5517
                            self.match(TSqlParser.DECIMAL)
                            pass


                        self.state = 5520 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1168 or _la==1194):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [263]:
                self.state = 5524
                self.match(TSqlParser.DIAGNOSTICS)
                self.state = 5525
                self.match(TSqlParser.LOG)
                self.state = 5541
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [649]:
                    self.state = 5526
                    self.match(TSqlParser.ON)
                    pass
                elif token in [643]:
                    self.state = 5527
                    self.match(TSqlParser.OFF)
                    pass
                elif token in [691]:
                    self.state = 5528
                    self.match(TSqlParser.PATH)
                    self.state = 5529
                    self.match(TSqlParser.EQUAL)
                    self.state = 5530
                    _la = self._input.LA(1)
                    if not(_la==243 or _la==1170):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [556]:
                    self.state = 5531
                    self.match(TSqlParser.MAX_SIZE)
                    self.state = 5532
                    self.match(TSqlParser.EQUAL)
                    self.state = 5536
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1168]:
                        self.state = 5533
                        self.match(TSqlParser.DECIMAL)
                        self.state = 5534
                        self.match(TSqlParser.MB)
                        pass
                    elif token in [243]:
                        self.state = 5535
                        self.match(TSqlParser.DEFAULT)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [548]:
                    self.state = 5538
                    self.match(TSqlParser.MAX_FILES)
                    self.state = 5539
                    self.match(TSqlParser.EQUAL)
                    self.state = 5540
                    _la = self._input.LA(1)
                    if not(_la==243 or _la==1168):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [331]:
                self.state = 5543
                self.match(TSqlParser.FAILOVER)
                self.state = 5544
                self.match(TSqlParser.CLUSTER)
                self.state = 5545
                self.match(TSqlParser.PROPERTY)
                self.state = 5563
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1048]:
                    self.state = 5546
                    self.match(TSqlParser.VERBOSELOGGING)
                    self.state = 5547
                    self.match(TSqlParser.EQUAL)
                    self.state = 5548
                    _la = self._input.LA(1)
                    if not(_la==243 or _la==1170):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [920]:
                    self.state = 5549
                    self.match(TSqlParser.SQLDUMPERFLAGS)
                    self.state = 5550
                    self.match(TSqlParser.EQUAL)
                    self.state = 5551
                    _la = self._input.LA(1)
                    if not(_la==243 or _la==1170):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [921]:
                    self.state = 5552
                    self.match(TSqlParser.SQLDUMPERPATH)
                    self.state = 5553
                    self.match(TSqlParser.EQUAL)
                    self.state = 5554
                    _la = self._input.LA(1)
                    if not(_la==243 or _la==1170):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [922]:
                    self.state = 5555
                    self.match(TSqlParser.SQLDUMPERTIMEOUT)
                    self.state = 5556
                    _la = self._input.LA(1)
                    if not(_la==243 or _la==1170):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [334]:
                    self.state = 5557
                    self.match(TSqlParser.FAILURECONDITIONLEVEL)
                    self.state = 5558
                    self.match(TSqlParser.EQUAL)
                    self.state = 5559
                    _la = self._input.LA(1)
                    if not(_la==243 or _la==1170):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [413]:
                    self.state = 5560
                    self.match(TSqlParser.HEALTHCHECKTIMEOUT)
                    self.state = 5561
                    self.match(TSqlParser.EQUAL)
                    self.state = 5562
                    _la = self._input.LA(1)
                    if not(_la==243 or _la==1168):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [407]:
                self.state = 5565
                self.match(TSqlParser.HADR)
                self.state = 5566
                self.match(TSqlParser.CLUSTER)
                self.state = 5567
                self.match(TSqlParser.CONTEXT)
                self.state = 5568
                self.match(TSqlParser.EQUAL)
                self.state = 5569
                _la = self._input.LA(1)
                if not(_la==518 or _la==1170):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [106]:
                self.state = 5570
                self.match(TSqlParser.BUFFER)
                self.state = 5571
                self.match(TSqlParser.POOL)
                self.state = 5572
                self.match(TSqlParser.EXTENSION)
                self.state = 5585
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [649]:
                    self.state = 5573
                    self.match(TSqlParser.ON)
                    self.state = 5574
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 5575
                    self.match(TSqlParser.FILENAME)
                    self.state = 5576
                    self.match(TSqlParser.EQUAL)
                    self.state = 5577
                    self.match(TSqlParser.STRING)
                    self.state = 5578
                    self.match(TSqlParser.COMMA)
                    self.state = 5579
                    self.match(TSqlParser.SIZE)
                    self.state = 5580
                    self.match(TSqlParser.EQUAL)
                    self.state = 5581
                    self.match(TSqlParser.DECIMAL)
                    self.state = 5582
                    _la = self._input.LA(1)
                    if not(_la==385 or _la==483 or _la==557):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5583
                    self.match(TSqlParser.RR_BRACKET)
                    pass
                elif token in [643]:
                    self.state = 5584
                    self.match(TSqlParser.OFF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [887]:
                self.state = 5587
                self.match(TSqlParser.SET)
                self.state = 5588
                self.match(TSqlParser.SOFTNUMA)
                self.state = 5589
                _la = self._input.LA(1)
                if not(_la==643 or _la==649):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_server_roleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.server_role_name = None # Id_Context
            self.server_principal = None # Id_Context
            self.new_server_role_name = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def MEMBER(self):
            return self.getToken(TSqlParser.MEMBER, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_server_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_server_role" ):
                listener.enterAlter_server_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_server_role" ):
                listener.exitAlter_server_role(self)




    def alter_server_role(self):

        localctx = TSqlParser.Alter_server_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_alter_server_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5592
            self.match(TSqlParser.ALTER)
            self.state = 5593
            self.match(TSqlParser.SERVER)
            self.state = 5594
            self.match(TSqlParser.ROLE)
            self.state = 5595
            localctx.server_role_name = self.id_()
            self.state = 5603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11, 280]:
                self.state = 5596
                _la = self._input.LA(1)
                if not(_la==11 or _la==280):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5597
                self.match(TSqlParser.MEMBER)
                self.state = 5598
                localctx.server_principal = self.id_()
                pass
            elif token in [1063]:
                self.state = 5599
                self.match(TSqlParser.WITH)
                self.state = 5600
                self.match(TSqlParser.NAME)
                self.state = 5601
                self.match(TSqlParser.EQUAL)
                self.state = 5602
                localctx.new_server_role_name = self.id_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_server_roleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.server_role = None # Id_Context
            self.server_principal = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_server_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_server_role" ):
                listener.enterCreate_server_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_server_role" ):
                listener.exitCreate_server_role(self)




    def create_server_role(self):

        localctx = TSqlParser.Create_server_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_create_server_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5605
            self.match(TSqlParser.CREATE)
            self.state = 5606
            self.match(TSqlParser.SERVER)
            self.state = 5607
            self.match(TSqlParser.ROLE)
            self.state = 5608
            localctx.server_role = self.id_()
            self.state = 5611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 5609
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 5610
                localctx.server_principal = self.id_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_server_role_pdwContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.server_role_name = None # Id_Context
            self.login = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def MEMBER(self):
            return self.getToken(TSqlParser.MEMBER, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_server_role_pdw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_server_role_pdw" ):
                listener.enterAlter_server_role_pdw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_server_role_pdw" ):
                listener.exitAlter_server_role_pdw(self)




    def alter_server_role_pdw(self):

        localctx = TSqlParser.Alter_server_role_pdwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_alter_server_role_pdw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5613
            self.match(TSqlParser.ALTER)
            self.state = 5614
            self.match(TSqlParser.SERVER)
            self.state = 5615
            self.match(TSqlParser.ROLE)
            self.state = 5616
            localctx.server_role_name = self.id_()
            self.state = 5617
            _la = self._input.LA(1)
            if not(_la==11 or _la==280):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5618
            self.match(TSqlParser.MEMBER)
            self.state = 5619
            localctx.login = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_serviceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.modified_service_name = None # Id_Context
            self.schema_name = None # Id_Context
            self.queue_name = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def SERVICE(self):
            return self.getToken(TSqlParser.SERVICE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def QUEUE(self):
            return self.getToken(TSqlParser.QUEUE, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def opt_arg_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Opt_arg_clauseContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Opt_arg_clauseContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_service

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_service" ):
                listener.enterAlter_service(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_service" ):
                listener.exitAlter_service(self)




    def alter_service(self):

        localctx = TSqlParser.Alter_serviceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_alter_service)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5621
            self.match(TSqlParser.ALTER)
            self.state = 5622
            self.match(TSqlParser.SERVICE)
            self.state = 5623
            localctx.modified_service_name = self.id_()
            self.state = 5632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==649:
                self.state = 5624
                self.match(TSqlParser.ON)
                self.state = 5625
                self.match(TSqlParser.QUEUE)
                self.state = 5629
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,631,self._ctx)
                if la_ == 1:
                    self.state = 5626
                    localctx.schema_name = self.id_()
                    self.state = 5627
                    self.match(TSqlParser.DOT)


                self.state = 5631
                localctx.queue_name = self.id_()


            self.state = 5645
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,634,self._ctx)
            if la_ == 1:
                self.state = 5634
                self.match(TSqlParser.LR_BRACKET)
                self.state = 5635
                self.opt_arg_clause()
                self.state = 5640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 5636
                    self.match(TSqlParser.COMMA)
                    self.state = 5637
                    self.opt_arg_clause()
                    self.state = 5642
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5643
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_arg_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.modified_contract_name = None # Id_Context

        def CONTRACT(self):
            return self.getToken(TSqlParser.CONTRACT, 0)

        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_opt_arg_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_arg_clause" ):
                listener.enterOpt_arg_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_arg_clause" ):
                listener.exitOpt_arg_clause(self)




    def opt_arg_clause(self):

        localctx = TSqlParser.Opt_arg_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_opt_arg_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5647
            _la = self._input.LA(1)
            if not(_la==11 or _la==280):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5648
            self.match(TSqlParser.CONTRACT)
            self.state = 5649
            localctx.modified_contract_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_serviceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.create_service_name = None # Id_Context
            self.owner_name = None # Id_Context
            self.schema_name = None # Id_Context
            self.queue_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def SERVICE(self):
            return self.getToken(TSqlParser.SERVICE, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def QUEUE(self):
            return self.getToken(TSqlParser.QUEUE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DEFAULT)
            else:
                return self.getToken(TSqlParser.DEFAULT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_service

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_service" ):
                listener.enterCreate_service(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_service" ):
                listener.exitCreate_service(self)




    def create_service(self):

        localctx = TSqlParser.Create_serviceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_create_service)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5651
            self.match(TSqlParser.CREATE)
            self.state = 5652
            self.match(TSqlParser.SERVICE)
            self.state = 5653
            localctx.create_service_name = self.id_()
            self.state = 5656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 5654
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 5655
                localctx.owner_name = self.id_()


            self.state = 5658
            self.match(TSqlParser.ON)
            self.state = 5659
            self.match(TSqlParser.QUEUE)
            self.state = 5663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,636,self._ctx)
            if la_ == 1:
                self.state = 5660
                localctx.schema_name = self.id_()
                self.state = 5661
                self.match(TSqlParser.DOT)


            self.state = 5665
            localctx.queue_name = self.id_()
            self.state = 5679
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,640,self._ctx)
            if la_ == 1:
                self.state = 5666
                self.match(TSqlParser.LR_BRACKET)
                self.state = 5674 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5668
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 5667
                        self.match(TSqlParser.COMMA)


                    self.state = 5672
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                        self.state = 5670
                        self.id_()
                        pass
                    elif token in [243]:
                        self.state = 5671
                        self.match(TSqlParser.DEFAULT)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 5676 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6845834611130385) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4691064178111676937) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8070028319748410847) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387491794949) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714895912701) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755875440852549633) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873769796032868641) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510937462965505) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799299309863) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -651161675377934355) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -387309693044787745) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689521) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906573) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 4294967467) != 0)):
                        break

                self.state = 5678
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_service_master_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.acold_account_name = None # Token
            self.old_password = None # Token
            self.new_account_name = None # Token
            self.new_password = None # Token

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def SERVICE(self):
            return self.getToken(TSqlParser.SERVICE, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def REGENERATE(self):
            return self.getToken(TSqlParser.REGENERATE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def FORCE(self):
            return self.getToken(TSqlParser.FORCE, 0)

        def OLD_ACCOUNT(self):
            return self.getToken(TSqlParser.OLD_ACCOUNT, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def OLD_PASSWORD(self):
            return self.getToken(TSqlParser.OLD_PASSWORD, 0)

        def NEW_ACCOUNT(self):
            return self.getToken(TSqlParser.NEW_ACCOUNT, 0)

        def NEW_PASSWORD(self):
            return self.getToken(TSqlParser.NEW_PASSWORD, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_service_master_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_service_master_key" ):
                listener.enterAlter_service_master_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_service_master_key" ):
                listener.exitAlter_service_master_key(self)




    def alter_service_master_key(self):

        localctx = TSqlParser.Alter_service_master_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_alter_service_master_key)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5681
            self.match(TSqlParser.ALTER)
            self.state = 5682
            self.match(TSqlParser.SERVICE)
            self.state = 5683
            self.match(TSqlParser.MASTER)
            self.state = 5684
            self.match(TSqlParser.KEY)
            self.state = 5706
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [364, 774]:
                self.state = 5686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==364:
                    self.state = 5685
                    self.match(TSqlParser.FORCE)


                self.state = 5688
                self.match(TSqlParser.REGENERATE)
                pass
            elif token in [1063]:
                self.state = 5689
                self.match(TSqlParser.WITH)
                self.state = 5704
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,642,self._ctx)
                if la_ == 1:
                    self.state = 5690
                    self.match(TSqlParser.OLD_ACCOUNT)
                    self.state = 5691
                    self.match(TSqlParser.EQUAL)
                    self.state = 5692
                    localctx.acold_account_name = self.match(TSqlParser.STRING)
                    self.state = 5693
                    self.match(TSqlParser.COMMA)
                    self.state = 5694
                    self.match(TSqlParser.OLD_PASSWORD)
                    self.state = 5695
                    self.match(TSqlParser.EQUAL)
                    self.state = 5696
                    localctx.old_password = self.match(TSqlParser.STRING)

                elif la_ == 2:
                    self.state = 5697
                    self.match(TSqlParser.NEW_ACCOUNT)
                    self.state = 5698
                    self.match(TSqlParser.EQUAL)
                    self.state = 5699
                    localctx.new_account_name = self.match(TSqlParser.STRING)
                    self.state = 5700
                    self.match(TSqlParser.COMMA)
                    self.state = 5701
                    self.match(TSqlParser.NEW_PASSWORD)
                    self.state = 5702
                    self.match(TSqlParser.EQUAL)
                    self.state = 5703
                    localctx.new_password = self.match(TSqlParser.STRING)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_symmetric_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key_name = None # Id_Context
            self.certificate_name = None # Id_Context
            self.password = None # Token
            self.symmetric_key_name = None # Id_Context
            self.Asym_key_name = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def SYMMETRIC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SYMMETRIC)
            else:
                return self.getToken(TSqlParser.SYMMETRIC, i)

        def KEY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.KEY)
            else:
                return self.getToken(TSqlParser.KEY, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_symmetric_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_symmetric_key" ):
                listener.enterAlter_symmetric_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_symmetric_key" ):
                listener.exitAlter_symmetric_key(self)




    def alter_symmetric_key(self):

        localctx = TSqlParser.Alter_symmetric_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_alter_symmetric_key)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5708
            self.match(TSqlParser.ALTER)
            self.state = 5709
            self.match(TSqlParser.SYMMETRIC)
            self.state = 5710
            self.match(TSqlParser.KEY)
            self.state = 5711
            localctx.key_name = self.id_()

            self.state = 5712
            _la = self._input.LA(1)
            if not(_la==11 or _la==280):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5713
            self.match(TSqlParser.ENCRYPTION)
            self.state = 5714
            self.match(TSqlParser.BY)
            self.state = 5726
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [121]:
                self.state = 5715
                self.match(TSqlParser.CERTIFICATE)
                self.state = 5716
                localctx.certificate_name = self.id_()
                pass
            elif token in [690]:
                self.state = 5717
                self.match(TSqlParser.PASSWORD)
                self.state = 5718
                self.match(TSqlParser.EQUAL)
                self.state = 5719
                localctx.password = self.match(TSqlParser.STRING)
                pass
            elif token in [961]:
                self.state = 5720
                self.match(TSqlParser.SYMMETRIC)
                self.state = 5721
                self.match(TSqlParser.KEY)
                self.state = 5722
                localctx.symmetric_key_name = self.id_()
                pass
            elif token in [61]:
                self.state = 5723
                self.match(TSqlParser.ASYMMETRIC)
                self.state = 5724
                self.match(TSqlParser.KEY)
                self.state = 5725
                localctx.Asym_key_name = self.id_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_synonymContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name_1 = None # Id_Context
            self.synonym_name = None # Id_Context
            self.server_name = None # Id_Context
            self.database_name = None # Id_Context
            self.schema_name_2 = None # Id_Context
            self.object_name = None # Id_Context
            self.database_or_schema2 = None # Id_Context
            self.schema_id_2_or_object_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def SYNONYM(self):
            return self.getToken(TSqlParser.SYNONYM, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_synonym

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_synonym" ):
                listener.enterCreate_synonym(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_synonym" ):
                listener.exitCreate_synonym(self)




    def create_synonym(self):

        localctx = TSqlParser.Create_synonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_create_synonym)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5728
            self.match(TSqlParser.CREATE)
            self.state = 5729
            self.match(TSqlParser.SYNONYM)
            self.state = 5733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,645,self._ctx)
            if la_ == 1:
                self.state = 5730
                localctx.schema_name_1 = self.id_()
                self.state = 5731
                self.match(TSqlParser.DOT)


            self.state = 5735
            localctx.synonym_name = self.id_()
            self.state = 5736
            self.match(TSqlParser.FOR)
            self.state = 5763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,651,self._ctx)
            if la_ == 1:
                self.state = 5740
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,646,self._ctx)
                if la_ == 1:
                    self.state = 5737
                    localctx.server_name = self.id_()
                    self.state = 5738
                    self.match(TSqlParser.DOT)


                self.state = 5745
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,647,self._ctx)
                if la_ == 1:
                    self.state = 5742
                    localctx.database_name = self.id_()
                    self.state = 5743
                    self.match(TSqlParser.DOT)


                self.state = 5750
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,648,self._ctx)
                if la_ == 1:
                    self.state = 5747
                    localctx.schema_name_2 = self.id_()
                    self.state = 5748
                    self.match(TSqlParser.DOT)


                self.state = 5752
                localctx.object_name = self.id_()
                pass

            elif la_ == 2:
                self.state = 5756
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,649,self._ctx)
                if la_ == 1:
                    self.state = 5753
                    localctx.database_or_schema2 = self.id_()
                    self.state = 5754
                    self.match(TSqlParser.DOT)


                self.state = 5761
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,650,self._ctx)
                if la_ == 1:
                    self.state = 5758
                    localctx.schema_id_2_or_object_name = self.id_()
                    self.state = 5759
                    self.match(TSqlParser.DOT)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_userContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.username = None # Id_Context
            self.newusername = None # Id_Context
            self.schema_name = None # Id_Context
            self.loginame = None # Id_Context
            self.lcid = None # Token
            self.language_name_or_alias = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def USER(self):
            return self.getToken(TSqlParser.USER, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NAME)
            else:
                return self.getToken(TSqlParser.NAME, i)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def DEFAULT_SCHEMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DEFAULT_SCHEMA)
            else:
                return self.getToken(TSqlParser.DEFAULT_SCHEMA, i)

        def LOGIN(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOGIN)
            else:
                return self.getToken(TSqlParser.LOGIN, i)

        def PASSWORD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.PASSWORD)
            else:
                return self.getToken(TSqlParser.PASSWORD, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def DEFAULT_LANGUAGE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DEFAULT_LANGUAGE)
            else:
                return self.getToken(TSqlParser.DEFAULT_LANGUAGE, i)

        def ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
            else:
                return self.getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def OFF(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OFF)
            else:
                return self.getToken(TSqlParser.OFF, i)

        def NULL_(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NULL_)
            else:
                return self.getToken(TSqlParser.NULL_, i)

        def NONE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NONE)
            else:
                return self.getToken(TSqlParser.NONE, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def OLD_PASSWORD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OLD_PASSWORD)
            else:
                return self.getToken(TSqlParser.OLD_PASSWORD, i)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_user

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_user" ):
                listener.enterAlter_user(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_user" ):
                listener.exitAlter_user(self)




    def alter_user(self):

        localctx = TSqlParser.Alter_userContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_alter_user)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5765
            self.match(TSqlParser.ALTER)
            self.state = 5766
            self.match(TSqlParser.USER)
            self.state = 5767
            localctx.username = self.id_()
            self.state = 5768
            self.match(TSqlParser.WITH)
            self.state = 5819 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5819
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,661,self._ctx)
                    if la_ == 1:
                        self.state = 5770
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 5769
                            self.match(TSqlParser.COMMA)


                        self.state = 5772
                        self.match(TSqlParser.NAME)
                        self.state = 5773
                        self.match(TSqlParser.EQUAL)
                        self.state = 5774
                        localctx.newusername = self.id_()
                        pass

                    elif la_ == 2:
                        self.state = 5776
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 5775
                            self.match(TSqlParser.COMMA)


                        self.state = 5778
                        self.match(TSqlParser.DEFAULT_SCHEMA)
                        self.state = 5779
                        self.match(TSqlParser.EQUAL)
                        self.state = 5782
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                            self.state = 5780
                            localctx.schema_name = self.id_()
                            pass
                        elif token in [630]:
                            self.state = 5781
                            self.match(TSqlParser.NULL_)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 3:
                        self.state = 5785
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 5784
                            self.match(TSqlParser.COMMA)


                        self.state = 5787
                        self.match(TSqlParser.LOGIN)
                        self.state = 5788
                        self.match(TSqlParser.EQUAL)
                        self.state = 5789
                        localctx.loginame = self.id_()
                        pass

                    elif la_ == 4:
                        self.state = 5791
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 5790
                            self.match(TSqlParser.COMMA)


                        self.state = 5793
                        self.match(TSqlParser.PASSWORD)
                        self.state = 5794
                        self.match(TSqlParser.EQUAL)
                        self.state = 5795
                        self.match(TSqlParser.STRING)
                        self.state = 5799 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 5796
                                self.match(TSqlParser.OLD_PASSWORD)
                                self.state = 5797
                                self.match(TSqlParser.EQUAL)
                                self.state = 5798
                                self.match(TSqlParser.STRING)

                            else:
                                raise NoViableAltException(self)
                            self.state = 5801 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,657,self._ctx)

                        pass

                    elif la_ == 5:
                        self.state = 5804
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 5803
                            self.match(TSqlParser.COMMA)


                        self.state = 5806
                        self.match(TSqlParser.DEFAULT_LANGUAGE)
                        self.state = 5807
                        self.match(TSqlParser.EQUAL)
                        self.state = 5811
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,659,self._ctx)
                        if la_ == 1:
                            self.state = 5808
                            self.match(TSqlParser.NONE)
                            pass

                        elif la_ == 2:
                            self.state = 5809
                            localctx.lcid = self.match(TSqlParser.DECIMAL)
                            pass

                        elif la_ == 3:
                            self.state = 5810
                            localctx.language_name_or_alias = self.id_()
                            pass


                        pass

                    elif la_ == 6:
                        self.state = 5814
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 5813
                            self.match(TSqlParser.COMMA)


                        self.state = 5816
                        self.match(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
                        self.state = 5817
                        self.match(TSqlParser.EQUAL)
                        self.state = 5818
                        _la = self._input.LA(1)
                        if not(_la==643 or _la==649):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 5821 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,662,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_userContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.user_name = None # Id_Context
            self.login_name = None # Id_Context
            self.schema_name = None # Id_Context
            self.windows_principal = None # Id_Context
            self.language_name_or_alias = None # Id_Context
            self.password = None # Token
            self.Azure_Active_Directory_principal = None # Id_Context
            self.cert_name = None # Id_Context
            self.asym_key_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def USER(self):
            return self.getToken(TSqlParser.USER, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def DEFAULT_SCHEMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DEFAULT_SCHEMA)
            else:
                return self.getToken(TSqlParser.DEFAULT_SCHEMA, i)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
            else:
                return self.getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def OFF(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OFF)
            else:
                return self.getToken(TSqlParser.OFF, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def DEFAULT_LANGUAGE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DEFAULT_LANGUAGE)
            else:
                return self.getToken(TSqlParser.DEFAULT_LANGUAGE, i)

        def SID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SID)
            else:
                return self.getToken(TSqlParser.SID, i)

        def BINARY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BINARY)
            else:
                return self.getToken(TSqlParser.BINARY, i)

        def NONE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NONE)
            else:
                return self.getToken(TSqlParser.NONE, i)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def WITHOUT(self):
            return self.getToken(TSqlParser.WITHOUT, 0)

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_user

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_user" ):
                listener.enterCreate_user(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_user" ):
                listener.exitCreate_user(self)




    def create_user(self):

        localctx = TSqlParser.Create_userContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_create_user)
        self._la = 0 # Token type
        try:
            self.state = 5969
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,690,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5823
                self.match(TSqlParser.CREATE)
                self.state = 5824
                self.match(TSqlParser.USER)
                self.state = 5825
                localctx.user_name = self.id_()
                self.state = 5829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==363 or _la==378:
                    self.state = 5826
                    _la = self._input.LA(1)
                    if not(_la==363 or _la==378):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5827
                    self.match(TSqlParser.LOGIN)
                    self.state = 5828
                    localctx.login_name = self.id_()


                self.state = 5849
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,668,self._ctx)
                if la_ == 1:
                    self.state = 5831
                    self.match(TSqlParser.WITH)
                    self.state = 5846
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,667,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 5844
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,666,self._ctx)
                            if la_ == 1:
                                self.state = 5833
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 5832
                                    self.match(TSqlParser.COMMA)


                                self.state = 5835
                                self.match(TSqlParser.DEFAULT_SCHEMA)
                                self.state = 5836
                                self.match(TSqlParser.EQUAL)
                                self.state = 5837
                                localctx.schema_name = self.id_()
                                pass

                            elif la_ == 2:
                                self.state = 5839
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 5838
                                    self.match(TSqlParser.COMMA)


                                self.state = 5841
                                self.match(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
                                self.state = 5842
                                self.match(TSqlParser.EQUAL)
                                self.state = 5843
                                _la = self._input.LA(1)
                                if not(_la==643 or _la==649):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                pass

                     
                        self.state = 5848
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,667,self._ctx)



                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5851
                self.match(TSqlParser.CREATE)
                self.state = 5852
                self.match(TSqlParser.USER)
                self.state = 5933
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,684,self._ctx)
                if la_ == 1:
                    self.state = 5853
                    localctx.windows_principal = self.id_()
                    self.state = 5888
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,676,self._ctx)
                    if la_ == 1:
                        self.state = 5854
                        self.match(TSqlParser.WITH)
                        self.state = 5885
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,675,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 5883
                                self._errHandler.sync(self)
                                la_ = self._interp.adaptivePredict(self._input,674,self._ctx)
                                if la_ == 1:
                                    self.state = 5856
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if _la==1194:
                                        self.state = 5855
                                        self.match(TSqlParser.COMMA)


                                    self.state = 5858
                                    self.match(TSqlParser.DEFAULT_SCHEMA)
                                    self.state = 5859
                                    self.match(TSqlParser.EQUAL)
                                    self.state = 5860
                                    localctx.schema_name = self.id_()
                                    pass

                                elif la_ == 2:
                                    self.state = 5862
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if _la==1194:
                                        self.state = 5861
                                        self.match(TSqlParser.COMMA)


                                    self.state = 5864
                                    self.match(TSqlParser.DEFAULT_LANGUAGE)
                                    self.state = 5865
                                    self.match(TSqlParser.EQUAL)
                                    self.state = 5869
                                    self._errHandler.sync(self)
                                    la_ = self._interp.adaptivePredict(self._input,671,self._ctx)
                                    if la_ == 1:
                                        self.state = 5866
                                        self.match(TSqlParser.NONE)
                                        pass

                                    elif la_ == 2:
                                        self.state = 5867
                                        self.match(TSqlParser.DECIMAL)
                                        pass

                                    elif la_ == 3:
                                        self.state = 5868
                                        localctx.language_name_or_alias = self.id_()
                                        pass


                                    pass

                                elif la_ == 3:
                                    self.state = 5872
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if _la==1194:
                                        self.state = 5871
                                        self.match(TSqlParser.COMMA)


                                    self.state = 5874
                                    self.match(TSqlParser.SID)
                                    self.state = 5875
                                    self.match(TSqlParser.EQUAL)
                                    self.state = 5876
                                    self.match(TSqlParser.BINARY)
                                    pass

                                elif la_ == 4:
                                    self.state = 5878
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if _la==1194:
                                        self.state = 5877
                                        self.match(TSqlParser.COMMA)


                                    self.state = 5880
                                    self.match(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
                                    self.state = 5881
                                    self.match(TSqlParser.EQUAL)
                                    self.state = 5882
                                    _la = self._input.LA(1)
                                    if not(_la==643 or _la==649):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    pass

                         
                            self.state = 5887
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,675,self._ctx)



                    pass

                elif la_ == 2:
                    self.state = 5890
                    localctx.user_name = self.id_()
                    self.state = 5891
                    self.match(TSqlParser.WITH)
                    self.state = 5892
                    self.match(TSqlParser.PASSWORD)
                    self.state = 5893
                    self.match(TSqlParser.EQUAL)
                    self.state = 5894
                    localctx.password = self.match(TSqlParser.STRING)
                    self.state = 5925
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,683,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 5923
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,682,self._ctx)
                            if la_ == 1:
                                self.state = 5896
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 5895
                                    self.match(TSqlParser.COMMA)


                                self.state = 5898
                                self.match(TSqlParser.DEFAULT_SCHEMA)
                                self.state = 5899
                                self.match(TSqlParser.EQUAL)
                                self.state = 5900
                                localctx.schema_name = self.id_()
                                pass

                            elif la_ == 2:
                                self.state = 5902
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 5901
                                    self.match(TSqlParser.COMMA)


                                self.state = 5904
                                self.match(TSqlParser.DEFAULT_LANGUAGE)
                                self.state = 5905
                                self.match(TSqlParser.EQUAL)
                                self.state = 5909
                                self._errHandler.sync(self)
                                la_ = self._interp.adaptivePredict(self._input,679,self._ctx)
                                if la_ == 1:
                                    self.state = 5906
                                    self.match(TSqlParser.NONE)
                                    pass

                                elif la_ == 2:
                                    self.state = 5907
                                    self.match(TSqlParser.DECIMAL)
                                    pass

                                elif la_ == 3:
                                    self.state = 5908
                                    localctx.language_name_or_alias = self.id_()
                                    pass


                                pass

                            elif la_ == 3:
                                self.state = 5912
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 5911
                                    self.match(TSqlParser.COMMA)


                                self.state = 5914
                                self.match(TSqlParser.SID)
                                self.state = 5915
                                self.match(TSqlParser.EQUAL)
                                self.state = 5916
                                self.match(TSqlParser.BINARY)
                                pass

                            elif la_ == 4:
                                self.state = 5918
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 5917
                                    self.match(TSqlParser.COMMA)


                                self.state = 5920
                                self.match(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
                                self.state = 5921
                                self.match(TSqlParser.EQUAL)
                                self.state = 5922
                                _la = self._input.LA(1)
                                if not(_la==643 or _la==649):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                pass

                     
                        self.state = 5927
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,683,self._ctx)

                    pass

                elif la_ == 3:
                    self.state = 5928
                    localctx.Azure_Active_Directory_principal = self.id_()
                    self.state = 5929
                    self.match(TSqlParser.FROM)
                    self.state = 5930
                    self.match(TSqlParser.EXTERNAL)
                    self.state = 5931
                    self.match(TSqlParser.PROVIDER)
                    pass


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5935
                self.match(TSqlParser.CREATE)
                self.state = 5936
                self.match(TSqlParser.USER)
                self.state = 5937
                localctx.user_name = self.id_()
                self.state = 5964
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,689,self._ctx)
                if la_ == 1:
                    self.state = 5938
                    self.match(TSqlParser.WITHOUT)
                    self.state = 5939
                    self.match(TSqlParser.LOGIN)
                    self.state = 5954
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,688,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 5952
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,687,self._ctx)
                            if la_ == 1:
                                self.state = 5941
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 5940
                                    self.match(TSqlParser.COMMA)


                                self.state = 5943
                                self.match(TSqlParser.DEFAULT_SCHEMA)
                                self.state = 5944
                                self.match(TSqlParser.EQUAL)
                                self.state = 5945
                                localctx.schema_name = self.id_()
                                pass

                            elif la_ == 2:
                                self.state = 5947
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 5946
                                    self.match(TSqlParser.COMMA)


                                self.state = 5949
                                self.match(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
                                self.state = 5950
                                self.match(TSqlParser.EQUAL)
                                self.state = 5951
                                _la = self._input.LA(1)
                                if not(_la==643 or _la==649):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                pass

                     
                        self.state = 5956
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,688,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 5957
                    _la = self._input.LA(1)
                    if not(_la==363 or _la==378):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5958
                    self.match(TSqlParser.CERTIFICATE)
                    self.state = 5959
                    localctx.cert_name = self.id_()
                    pass

                elif la_ == 3:
                    self.state = 5960
                    _la = self._input.LA(1)
                    if not(_la==363 or _la==378):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5961
                    self.match(TSqlParser.ASYMMETRIC)
                    self.state = 5962
                    self.match(TSqlParser.KEY)
                    self.state = 5963
                    localctx.asym_key_name = self.id_()
                    pass


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5966
                self.match(TSqlParser.CREATE)
                self.state = 5967
                self.match(TSqlParser.USER)
                self.state = 5968
                localctx.user_name = self.id_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_user_azure_sql_dwContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.user_name = None # Id_Context
            self.login_name = None # Id_Context
            self.schema_name = None # Id_Context
            self.Azure_Active_Directory_principal = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def USER(self):
            return self.getToken(TSqlParser.USER, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def WITHOUT(self):
            return self.getToken(TSqlParser.WITHOUT, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def DEFAULT_SCHEMA(self):
            return self.getToken(TSqlParser.DEFAULT_SCHEMA, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_user_azure_sql_dw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_user_azure_sql_dw" ):
                listener.enterCreate_user_azure_sql_dw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_user_azure_sql_dw" ):
                listener.exitCreate_user_azure_sql_dw(self)




    def create_user_azure_sql_dw(self):

        localctx = TSqlParser.Create_user_azure_sql_dwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_create_user_azure_sql_dw)
        self._la = 0 # Token type
        try:
            self.state = 5999
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,694,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5971
                self.match(TSqlParser.CREATE)
                self.state = 5972
                self.match(TSqlParser.USER)
                self.state = 5973
                localctx.user_name = self.id_()
                self.state = 5979
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,691,self._ctx)
                if la_ == 1:
                    self.state = 5974
                    _la = self._input.LA(1)
                    if not(_la==363 or _la==378):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5975
                    self.match(TSqlParser.LOGIN)
                    self.state = 5976
                    localctx.login_name = self.id_()

                elif la_ == 2:
                    self.state = 5977
                    self.match(TSqlParser.WITHOUT)
                    self.state = 5978
                    self.match(TSqlParser.LOGIN)


                self.state = 5985
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,692,self._ctx)
                if la_ == 1:
                    self.state = 5981
                    self.match(TSqlParser.WITH)
                    self.state = 5982
                    self.match(TSqlParser.DEFAULT_SCHEMA)
                    self.state = 5983
                    self.match(TSqlParser.EQUAL)
                    self.state = 5984
                    localctx.schema_name = self.id_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5987
                self.match(TSqlParser.CREATE)
                self.state = 5988
                self.match(TSqlParser.USER)
                self.state = 5989
                localctx.Azure_Active_Directory_principal = self.id_()
                self.state = 5990
                self.match(TSqlParser.FROM)
                self.state = 5991
                self.match(TSqlParser.EXTERNAL)
                self.state = 5992
                self.match(TSqlParser.PROVIDER)
                self.state = 5997
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,693,self._ctx)
                if la_ == 1:
                    self.state = 5993
                    self.match(TSqlParser.WITH)
                    self.state = 5994
                    self.match(TSqlParser.DEFAULT_SCHEMA)
                    self.state = 5995
                    self.match(TSqlParser.EQUAL)
                    self.state = 5996
                    localctx.schema_name = self.id_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_user_azure_sqlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.username = None # Id_Context
            self.newusername = None # Id_Context
            self.schema_name = None # Id_Context
            self.loginame = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def USER(self):
            return self.getToken(TSqlParser.USER, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NAME)
            else:
                return self.getToken(TSqlParser.NAME, i)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def DEFAULT_SCHEMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DEFAULT_SCHEMA)
            else:
                return self.getToken(TSqlParser.DEFAULT_SCHEMA, i)

        def LOGIN(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOGIN)
            else:
                return self.getToken(TSqlParser.LOGIN, i)

        def ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
            else:
                return self.getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def OFF(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OFF)
            else:
                return self.getToken(TSqlParser.OFF, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_user_azure_sql

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_user_azure_sql" ):
                listener.enterAlter_user_azure_sql(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_user_azure_sql" ):
                listener.exitAlter_user_azure_sql(self)




    def alter_user_azure_sql(self):

        localctx = TSqlParser.Alter_user_azure_sqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_alter_user_azure_sql)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6001
            self.match(TSqlParser.ALTER)
            self.state = 6002
            self.match(TSqlParser.USER)
            self.state = 6003
            localctx.username = self.id_()
            self.state = 6004
            self.match(TSqlParser.WITH)
            self.state = 6029 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 6029
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,699,self._ctx)
                    if la_ == 1:
                        self.state = 6006
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 6005
                            self.match(TSqlParser.COMMA)


                        self.state = 6008
                        self.match(TSqlParser.NAME)
                        self.state = 6009
                        self.match(TSqlParser.EQUAL)
                        self.state = 6010
                        localctx.newusername = self.id_()
                        pass

                    elif la_ == 2:
                        self.state = 6012
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 6011
                            self.match(TSqlParser.COMMA)


                        self.state = 6014
                        self.match(TSqlParser.DEFAULT_SCHEMA)
                        self.state = 6015
                        self.match(TSqlParser.EQUAL)
                        self.state = 6016
                        localctx.schema_name = self.id_()
                        pass

                    elif la_ == 3:
                        self.state = 6018
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 6017
                            self.match(TSqlParser.COMMA)


                        self.state = 6020
                        self.match(TSqlParser.LOGIN)
                        self.state = 6021
                        self.match(TSqlParser.EQUAL)
                        self.state = 6022
                        localctx.loginame = self.id_()
                        pass

                    elif la_ == 4:
                        self.state = 6024
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 6023
                            self.match(TSqlParser.COMMA)


                        self.state = 6026
                        self.match(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
                        self.state = 6027
                        self.match(TSqlParser.EQUAL)
                        self.state = 6028
                        _la = self._input.LA(1)
                        if not(_la==643 or _la==649):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 6031 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,700,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_workload_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.workload_group_group_name = None # Id_Context
            self.request_max_memory_grant = None # Token
            self.request_max_cpu_time_sec = None # Token
            self.request_memory_grant_timeout_sec = None # Token
            self.max_dop = None # Token
            self.group_max_requests = None # Token
            self.workload_group_pool_name = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def WORKLOAD(self):
            return self.getToken(TSqlParser.WORKLOAD, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def DEFAULT_DOUBLE_QUOTE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE)
            else:
                return self.getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def USING(self):
            return self.getToken(TSqlParser.USING, 0)

        def IMPORTANCE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.IMPORTANCE)
            else:
                return self.getToken(TSqlParser.IMPORTANCE, i)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def REQUEST_MAX_MEMORY_GRANT_PERCENT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT)
            else:
                return self.getToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i)

        def REQUEST_MAX_CPU_TIME_SEC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC)
            else:
                return self.getToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i)

        def REQUEST_MEMORY_GRANT_TIMEOUT_SEC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC)
            else:
                return self.getToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i)

        def MAX_DOP(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MAX_DOP)
            else:
                return self.getToken(TSqlParser.MAX_DOP, i)

        def GROUP_MAX_REQUESTS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.GROUP_MAX_REQUESTS)
            else:
                return self.getToken(TSqlParser.GROUP_MAX_REQUESTS, i)

        def LOW(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOW)
            else:
                return self.getToken(TSqlParser.LOW, i)

        def MEDIUM(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MEDIUM)
            else:
                return self.getToken(TSqlParser.MEDIUM, i)

        def HIGH(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.HIGH)
            else:
                return self.getToken(TSqlParser.HIGH, i)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_workload_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_workload_group" ):
                listener.enterAlter_workload_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_workload_group" ):
                listener.exitAlter_workload_group(self)




    def alter_workload_group(self):

        localctx = TSqlParser.Alter_workload_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_alter_workload_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6033
            self.match(TSqlParser.ALTER)
            self.state = 6034
            self.match(TSqlParser.WORKLOAD)
            self.state = 6035
            self.match(TSqlParser.GROUP)
            self.state = 6038
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,701,self._ctx)
            if la_ == 1:
                self.state = 6036
                localctx.workload_group_group_name = self.id_()
                pass

            elif la_ == 2:
                self.state = 6037
                self.match(TSqlParser.DEFAULT_DOUBLE_QUOTE)
                pass


            self.state = 6071
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,706,self._ctx)
            if la_ == 1:
                self.state = 6040
                self.match(TSqlParser.WITH)
                self.state = 6041
                self.match(TSqlParser.LR_BRACKET)
                self.state = 6066 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 6066
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,704,self._ctx)
                    if la_ == 1:
                        self.state = 6042
                        self.match(TSqlParser.IMPORTANCE)
                        self.state = 6043
                        self.match(TSqlParser.EQUAL)
                        self.state = 6044
                        _la = self._input.LA(1)
                        if not(_la==418 or _la==527 or _la==560):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 2:
                        self.state = 6046
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 6045
                            self.match(TSqlParser.COMMA)


                        self.state = 6048
                        self.match(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT)
                        self.state = 6049
                        self.match(TSqlParser.EQUAL)
                        self.state = 6050
                        localctx.request_max_memory_grant = self.match(TSqlParser.DECIMAL)
                        pass

                    elif la_ == 3:
                        self.state = 6052
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 6051
                            self.match(TSqlParser.COMMA)


                        self.state = 6054
                        self.match(TSqlParser.REQUEST_MAX_CPU_TIME_SEC)
                        self.state = 6055
                        self.match(TSqlParser.EQUAL)
                        self.state = 6056
                        localctx.request_max_cpu_time_sec = self.match(TSqlParser.DECIMAL)
                        pass

                    elif la_ == 4:
                        self.state = 6057
                        self.match(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC)
                        self.state = 6058
                        self.match(TSqlParser.EQUAL)
                        self.state = 6059
                        localctx.request_memory_grant_timeout_sec = self.match(TSqlParser.DECIMAL)
                        pass

                    elif la_ == 5:
                        self.state = 6060
                        self.match(TSqlParser.MAX_DOP)
                        self.state = 6061
                        self.match(TSqlParser.EQUAL)
                        self.state = 6062
                        localctx.max_dop = self.match(TSqlParser.DECIMAL)
                        pass

                    elif la_ == 6:
                        self.state = 6063
                        self.match(TSqlParser.GROUP_MAX_REQUESTS)
                        self.state = 6064
                        self.match(TSqlParser.EQUAL)
                        self.state = 6065
                        localctx.group_max_requests = self.match(TSqlParser.DECIMAL)
                        pass


                    self.state = 6068 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==406 or _la==441 or _la==545 or ((((_la - 792)) & ~0x3f) == 0 and ((1 << (_la - 792)) & 7) != 0) or _la==1194):
                        break

                self.state = 6070
                self.match(TSqlParser.RR_BRACKET)


            self.state = 6078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,708,self._ctx)
            if la_ == 1:
                self.state = 6073
                self.match(TSqlParser.USING)
                self.state = 6076
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,707,self._ctx)
                if la_ == 1:
                    self.state = 6074
                    localctx.workload_group_pool_name = self.id_()
                    pass

                elif la_ == 2:
                    self.state = 6075
                    self.match(TSqlParser.DEFAULT_DOUBLE_QUOTE)
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_workload_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.workload_group_group_name = None # Id_Context
            self.request_max_memory_grant = None # Token
            self.request_max_cpu_time_sec = None # Token
            self.request_memory_grant_timeout_sec = None # Token
            self.max_dop = None # Token
            self.group_max_requests = None # Token
            self.workload_group_pool_name = None # Id_Context
            self.external_pool_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def WORKLOAD(self):
            return self.getToken(TSqlParser.WORKLOAD, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def USING(self):
            return self.getToken(TSqlParser.USING, 0)

        def IMPORTANCE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.IMPORTANCE)
            else:
                return self.getToken(TSqlParser.IMPORTANCE, i)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def REQUEST_MAX_MEMORY_GRANT_PERCENT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT)
            else:
                return self.getToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i)

        def REQUEST_MAX_CPU_TIME_SEC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC)
            else:
                return self.getToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i)

        def REQUEST_MEMORY_GRANT_TIMEOUT_SEC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC)
            else:
                return self.getToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i)

        def MAX_DOP(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MAX_DOP)
            else:
                return self.getToken(TSqlParser.MAX_DOP, i)

        def GROUP_MAX_REQUESTS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.GROUP_MAX_REQUESTS)
            else:
                return self.getToken(TSqlParser.GROUP_MAX_REQUESTS, i)

        def DEFAULT_DOUBLE_QUOTE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE)
            else:
                return self.getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def LOW(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOW)
            else:
                return self.getToken(TSqlParser.LOW, i)

        def MEDIUM(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MEDIUM)
            else:
                return self.getToken(TSqlParser.MEDIUM, i)

        def HIGH(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.HIGH)
            else:
                return self.getToken(TSqlParser.HIGH, i)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_workload_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_workload_group" ):
                listener.enterCreate_workload_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_workload_group" ):
                listener.exitCreate_workload_group(self)




    def create_workload_group(self):

        localctx = TSqlParser.Create_workload_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_create_workload_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6080
            self.match(TSqlParser.CREATE)
            self.state = 6081
            self.match(TSqlParser.WORKLOAD)
            self.state = 6082
            self.match(TSqlParser.GROUP)
            self.state = 6083
            localctx.workload_group_group_name = self.id_()
            self.state = 6115
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,713,self._ctx)
            if la_ == 1:
                self.state = 6084
                self.match(TSqlParser.WITH)
                self.state = 6085
                self.match(TSqlParser.LR_BRACKET)
                self.state = 6110 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 6110
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,711,self._ctx)
                    if la_ == 1:
                        self.state = 6086
                        self.match(TSqlParser.IMPORTANCE)
                        self.state = 6087
                        self.match(TSqlParser.EQUAL)
                        self.state = 6088
                        _la = self._input.LA(1)
                        if not(_la==418 or _la==527 or _la==560):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 2:
                        self.state = 6090
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 6089
                            self.match(TSqlParser.COMMA)


                        self.state = 6092
                        self.match(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT)
                        self.state = 6093
                        self.match(TSqlParser.EQUAL)
                        self.state = 6094
                        localctx.request_max_memory_grant = self.match(TSqlParser.DECIMAL)
                        pass

                    elif la_ == 3:
                        self.state = 6096
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 6095
                            self.match(TSqlParser.COMMA)


                        self.state = 6098
                        self.match(TSqlParser.REQUEST_MAX_CPU_TIME_SEC)
                        self.state = 6099
                        self.match(TSqlParser.EQUAL)
                        self.state = 6100
                        localctx.request_max_cpu_time_sec = self.match(TSqlParser.DECIMAL)
                        pass

                    elif la_ == 4:
                        self.state = 6101
                        self.match(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC)
                        self.state = 6102
                        self.match(TSqlParser.EQUAL)
                        self.state = 6103
                        localctx.request_memory_grant_timeout_sec = self.match(TSqlParser.DECIMAL)
                        pass

                    elif la_ == 5:
                        self.state = 6104
                        self.match(TSqlParser.MAX_DOP)
                        self.state = 6105
                        self.match(TSqlParser.EQUAL)
                        self.state = 6106
                        localctx.max_dop = self.match(TSqlParser.DECIMAL)
                        pass

                    elif la_ == 6:
                        self.state = 6107
                        self.match(TSqlParser.GROUP_MAX_REQUESTS)
                        self.state = 6108
                        self.match(TSqlParser.EQUAL)
                        self.state = 6109
                        localctx.group_max_requests = self.match(TSqlParser.DECIMAL)
                        pass


                    self.state = 6112 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==406 or _la==441 or _la==545 or ((((_la - 792)) & ~0x3f) == 0 and ((1 << (_la - 792)) & 7) != 0) or _la==1194):
                        break

                self.state = 6114
                self.match(TSqlParser.RR_BRACKET)


            self.state = 6130
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,717,self._ctx)
            if la_ == 1:
                self.state = 6117
                self.match(TSqlParser.USING)
                self.state = 6120
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,714,self._ctx)
                if la_ == 1:
                    self.state = 6118
                    localctx.workload_group_pool_name = self.id_()

                elif la_ == 2:
                    self.state = 6119
                    self.match(TSqlParser.DEFAULT_DOUBLE_QUOTE)


                self.state = 6128
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,716,self._ctx)
                if la_ == 1:
                    self.state = 6123
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 6122
                        self.match(TSqlParser.COMMA)


                    self.state = 6125
                    self.match(TSqlParser.EXTERNAL)
                    self.state = 6126
                    localctx.external_pool_name = self.id_()

                elif la_ == 2:
                    self.state = 6127
                    self.match(TSqlParser.DEFAULT_DOUBLE_QUOTE)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_xml_schema_collectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.relational_schema = None # Id_Context
            self.sql_identifier = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def XML(self):
            return self.getToken(TSqlParser.XML, 0)

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def COLLECTION(self):
            return self.getToken(TSqlParser.COLLECTION, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_xml_schema_collection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_xml_schema_collection" ):
                listener.enterCreate_xml_schema_collection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_xml_schema_collection" ):
                listener.exitCreate_xml_schema_collection(self)




    def create_xml_schema_collection(self):

        localctx = TSqlParser.Create_xml_schema_collectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_create_xml_schema_collection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6132
            self.match(TSqlParser.CREATE)
            self.state = 6133
            self.match(TSqlParser.XML)
            self.state = 6134
            self.match(TSqlParser.SCHEMA)
            self.state = 6135
            self.match(TSqlParser.COLLECTION)
            self.state = 6139
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,718,self._ctx)
            if la_ == 1:
                self.state = 6136
                localctx.relational_schema = self.id_()
                self.state = 6137
                self.match(TSqlParser.DOT)


            self.state = 6141
            localctx.sql_identifier = self.id_()
            self.state = 6142
            self.match(TSqlParser.AS)
            self.state = 6146
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1170]:
                self.state = 6143
                self.match(TSqlParser.STRING)
                pass
            elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                self.state = 6144
                self.id_()
                pass
            elif token in [1166]:
                self.state = 6145
                self.match(TSqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_partition_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.partition_function_name = None # Id_Context
            self.input_parameter_type = None # Data_typeContext
            self.boundary_values = None # Expression_list_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def PARTITION(self):
            return self.getToken(TSqlParser.PARTITION, 0)

        def FUNCTION(self):
            return self.getToken(TSqlParser.FUNCTION, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def RANGE(self):
            return self.getToken(TSqlParser.RANGE, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def VALUES(self):
            return self.getToken(TSqlParser.VALUES, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)


        def expression_list_(self):
            return self.getTypedRuleContext(TSqlParser.Expression_list_Context,0)


        def LEFT(self):
            return self.getToken(TSqlParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(TSqlParser.RIGHT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_partition_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_partition_function" ):
                listener.enterCreate_partition_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_partition_function" ):
                listener.exitCreate_partition_function(self)




    def create_partition_function(self):

        localctx = TSqlParser.Create_partition_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_create_partition_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6148
            self.match(TSqlParser.CREATE)
            self.state = 6149
            self.match(TSqlParser.PARTITION)
            self.state = 6150
            self.match(TSqlParser.FUNCTION)
            self.state = 6151
            localctx.partition_function_name = self.id_()
            self.state = 6152
            self.match(TSqlParser.LR_BRACKET)
            self.state = 6153
            localctx.input_parameter_type = self.data_type()
            self.state = 6154
            self.match(TSqlParser.RR_BRACKET)
            self.state = 6155
            self.match(TSqlParser.AS)
            self.state = 6156
            self.match(TSqlParser.RANGE)
            self.state = 6158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==502 or _la==817:
                self.state = 6157
                _la = self._input.LA(1)
                if not(_la==502 or _la==817):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 6160
            self.match(TSqlParser.FOR)
            self.state = 6161
            self.match(TSqlParser.VALUES)
            self.state = 6162
            self.match(TSqlParser.LR_BRACKET)
            self.state = 6163
            localctx.boundary_values = self.expression_list_()
            self.state = 6164
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_partition_schemeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.partition_scheme_name = None # Id_Context
            self.partition_function_name = None # Id_Context
            self._id_ = None # Id_Context
            self.file_group_names = list() # of Id_Contexts

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.PARTITION)
            else:
                return self.getToken(TSqlParser.PARTITION, i)

        def SCHEME(self):
            return self.getToken(TSqlParser.SCHEME, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_partition_scheme

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_partition_scheme" ):
                listener.enterCreate_partition_scheme(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_partition_scheme" ):
                listener.exitCreate_partition_scheme(self)




    def create_partition_scheme(self):

        localctx = TSqlParser.Create_partition_schemeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_create_partition_scheme)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6166
            self.match(TSqlParser.CREATE)
            self.state = 6167
            self.match(TSqlParser.PARTITION)
            self.state = 6168
            self.match(TSqlParser.SCHEME)
            self.state = 6169
            localctx.partition_scheme_name = self.id_()
            self.state = 6170
            self.match(TSqlParser.AS)
            self.state = 6171
            self.match(TSqlParser.PARTITION)
            self.state = 6172
            localctx.partition_function_name = self.id_()
            self.state = 6174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 6173
                self.match(TSqlParser.ALL)


            self.state = 6176
            self.match(TSqlParser.TO)
            self.state = 6177
            self.match(TSqlParser.LR_BRACKET)
            self.state = 6178
            localctx._id_ = self.id_()
            localctx.file_group_names.append(localctx._id_)
            self.state = 6183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 6179
                self.match(TSqlParser.COMMA)
                self.state = 6180
                localctx._id_ = self.id_()
                localctx.file_group_names.append(localctx._id_)
                self.state = 6185
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6186
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_queueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.queue_name = None # Id_Context
            self.filegroup = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def QUEUE(self):
            return self.getToken(TSqlParser.QUEUE, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_table_nameContext,0)


        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def queue_settings(self):
            return self.getTypedRuleContext(TSqlParser.Queue_settingsContext,0)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_queue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_queue" ):
                listener.enterCreate_queue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_queue" ):
                listener.exitCreate_queue(self)




    def create_queue(self):

        localctx = TSqlParser.Create_queueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_create_queue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6188
            self.match(TSqlParser.CREATE)
            self.state = 6189
            self.match(TSqlParser.QUEUE)
            self.state = 6192
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,723,self._ctx)
            if la_ == 1:
                self.state = 6190
                self.full_table_name()
                pass

            elif la_ == 2:
                self.state = 6191
                localctx.queue_name = self.id_()
                pass


            self.state = 6195
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,724,self._ctx)
            if la_ == 1:
                self.state = 6194
                self.queue_settings()


            self.state = 6200
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [649]:
                self.state = 6197
                self.match(TSqlParser.ON)
                self.state = 6198
                localctx.filegroup = self.id_()
                pass
            elif token in [243]:
                self.state = 6199
                self.match(TSqlParser.DEFAULT)
                pass
            elif token in [-1, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 653, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169, 1187, 1192, 1195]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Queue_settingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.max_readers = None # Token
            self.user_name = None # Token

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def STATUS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STATUS)
            else:
                return self.getToken(TSqlParser.STATUS, i)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def on_off(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.On_offContext)
            else:
                return self.getTypedRuleContext(TSqlParser.On_offContext,i)


        def RETENTION(self):
            return self.getToken(TSqlParser.RETENTION, 0)

        def ACTIVATION(self):
            return self.getToken(TSqlParser.ACTIVATION, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def POISON_MESSAGE_HANDLING(self):
            return self.getToken(TSqlParser.POISON_MESSAGE_HANDLING, 0)

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def PROCEDURE_NAME(self):
            return self.getToken(TSqlParser.PROCEDURE_NAME, 0)

        def func_proc_name_database_schema(self):
            return self.getTypedRuleContext(TSqlParser.Func_proc_name_database_schemaContext,0)


        def MAX_QUEUE_READERS(self):
            return self.getToken(TSqlParser.MAX_QUEUE_READERS, 0)

        def EXECUTE(self):
            return self.getToken(TSqlParser.EXECUTE, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def SELF(self):
            return self.getToken(TSqlParser.SELF, 0)

        def OWNER(self):
            return self.getToken(TSqlParser.OWNER, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_queue_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueue_settings" ):
                listener.enterQueue_settings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueue_settings" ):
                listener.exitQueue_settings(self)




    def queue_settings(self):

        localctx = TSqlParser.Queue_settingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_queue_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6202
            self.match(TSqlParser.WITH)
            self.state = 6209
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,727,self._ctx)
            if la_ == 1:
                self.state = 6203
                self.match(TSqlParser.STATUS)
                self.state = 6204
                self.match(TSqlParser.EQUAL)
                self.state = 6205
                self.on_off()
                self.state = 6207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 6206
                    self.match(TSqlParser.COMMA)




            self.state = 6217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,729,self._ctx)
            if la_ == 1:
                self.state = 6211
                self.match(TSqlParser.RETENTION)
                self.state = 6212
                self.match(TSqlParser.EQUAL)
                self.state = 6213
                self.on_off()
                self.state = 6215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 6214
                    self.match(TSqlParser.COMMA)




            self.state = 6264
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,741,self._ctx)
            if la_ == 1:
                self.state = 6219
                self.match(TSqlParser.ACTIVATION)
                self.state = 6220
                self.match(TSqlParser.LR_BRACKET)
                self.state = 6258
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [318, 554, 729, 937, 1193]:
                    self.state = 6227
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==937:
                        self.state = 6221
                        self.match(TSqlParser.STATUS)
                        self.state = 6222
                        self.match(TSqlParser.EQUAL)
                        self.state = 6223
                        self.on_off()
                        self.state = 6225
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 6224
                            self.match(TSqlParser.COMMA)




                    self.state = 6235
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==729:
                        self.state = 6229
                        self.match(TSqlParser.PROCEDURE_NAME)
                        self.state = 6230
                        self.match(TSqlParser.EQUAL)
                        self.state = 6231
                        self.func_proc_name_database_schema()
                        self.state = 6233
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 6232
                            self.match(TSqlParser.COMMA)




                    self.state = 6243
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==554:
                        self.state = 6237
                        self.match(TSqlParser.MAX_QUEUE_READERS)
                        self.state = 6238
                        self.match(TSqlParser.EQUAL)
                        self.state = 6239
                        localctx.max_readers = self.match(TSqlParser.DECIMAL)
                        self.state = 6241
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 6240
                            self.match(TSqlParser.COMMA)




                    self.state = 6255
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==318:
                        self.state = 6245
                        self.match(TSqlParser.EXECUTE)
                        self.state = 6246
                        self.match(TSqlParser.AS)
                        self.state = 6250
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [866]:
                            self.state = 6247
                            self.match(TSqlParser.SELF)
                            pass
                        elif token in [1170]:
                            self.state = 6248
                            localctx.user_name = self.match(TSqlParser.STRING)
                            pass
                        elif token in [674]:
                            self.state = 6249
                            self.match(TSqlParser.OWNER)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 6253
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 6252
                            self.match(TSqlParser.COMMA)




                    pass
                elif token in [280]:
                    self.state = 6257
                    self.match(TSqlParser.DROP)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6260
                self.match(TSqlParser.RR_BRACKET)
                self.state = 6262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 6261
                    self.match(TSqlParser.COMMA)




            self.state = 6274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,742,self._ctx)
            if la_ == 1:
                self.state = 6266
                self.match(TSqlParser.POISON_MESSAGE_HANDLING)
                self.state = 6267
                self.match(TSqlParser.LR_BRACKET)

                self.state = 6268
                self.match(TSqlParser.STATUS)
                self.state = 6269
                self.match(TSqlParser.EQUAL)
                self.state = 6270
                self.on_off()
                self.state = 6272
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_queueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.queue_name = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def QUEUE(self):
            return self.getToken(TSqlParser.QUEUE, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_table_nameContext,0)


        def queue_settings(self):
            return self.getTypedRuleContext(TSqlParser.Queue_settingsContext,0)


        def queue_action(self):
            return self.getTypedRuleContext(TSqlParser.Queue_actionContext,0)


        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_queue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_queue" ):
                listener.enterAlter_queue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_queue" ):
                listener.exitAlter_queue(self)




    def alter_queue(self):

        localctx = TSqlParser.Alter_queueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_alter_queue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6276
            self.match(TSqlParser.ALTER)
            self.state = 6277
            self.match(TSqlParser.QUEUE)
            self.state = 6280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,743,self._ctx)
            if la_ == 1:
                self.state = 6278
                self.full_table_name()
                pass

            elif la_ == 2:
                self.state = 6279
                localctx.queue_name = self.id_()
                pass


            self.state = 6284
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1063]:
                self.state = 6282
                self.queue_settings()
                pass
            elif token in [581, 767, 782]:
                self.state = 6283
                self.queue_action()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Queue_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REBUILD(self):
            return self.getToken(TSqlParser.REBUILD, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def queue_rebuild_options(self):
            return self.getTypedRuleContext(TSqlParser.Queue_rebuild_optionsContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def REORGANIZE(self):
            return self.getToken(TSqlParser.REORGANIZE, 0)

        def LOB_COMPACTION(self):
            return self.getToken(TSqlParser.LOB_COMPACTION, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def MOVE(self):
            return self.getToken(TSqlParser.MOVE, 0)

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_queue_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueue_action" ):
                listener.enterQueue_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueue_action" ):
                listener.exitQueue_action(self)




    def queue_action(self):

        localctx = TSqlParser.Queue_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_queue_action)
        try:
            self.state = 6307
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [767]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6286
                self.match(TSqlParser.REBUILD)
                self.state = 6292
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,745,self._ctx)
                if la_ == 1:
                    self.state = 6287
                    self.match(TSqlParser.WITH)
                    self.state = 6288
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 6289
                    self.queue_rebuild_options()
                    self.state = 6290
                    self.match(TSqlParser.RR_BRACKET)


                pass
            elif token in [782]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6294
                self.match(TSqlParser.REORGANIZE)
                self.state = 6299
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,746,self._ctx)
                if la_ == 1:
                    self.state = 6295
                    self.match(TSqlParser.WITH)
                    self.state = 6296
                    self.match(TSqlParser.LOB_COMPACTION)
                    self.state = 6297
                    self.match(TSqlParser.EQUAL)
                    self.state = 6298
                    self.on_off()


                pass
            elif token in [581]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6301
                self.match(TSqlParser.MOVE)
                self.state = 6302
                self.match(TSqlParser.TO)
                self.state = 6305
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                    self.state = 6303
                    self.id_()
                    pass
                elif token in [243]:
                    self.state = 6304
                    self.match(TSqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Queue_rebuild_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXDOP(self):
            return self.getToken(TSqlParser.MAXDOP, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_queue_rebuild_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueue_rebuild_options" ):
                listener.enterQueue_rebuild_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueue_rebuild_options" ):
                listener.exitQueue_rebuild_options(self)




    def queue_rebuild_options(self):

        localctx = TSqlParser.Queue_rebuild_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_queue_rebuild_options)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6309
            self.match(TSqlParser.MAXDOP)
            self.state = 6310
            self.match(TSqlParser.EQUAL)
            self.state = 6311
            self.match(TSqlParser.DECIMAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_contractContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.owner_name = None # Id_Context
            self.message_type_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def CONTRACT(self):
            return self.getToken(TSqlParser.CONTRACT, 0)

        def contract_name(self):
            return self.getTypedRuleContext(TSqlParser.Contract_nameContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def SENT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SENT)
            else:
                return self.getToken(TSqlParser.SENT, i)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BY)
            else:
                return self.getToken(TSqlParser.BY, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def INITIATOR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.INITIATOR)
            else:
                return self.getToken(TSqlParser.INITIATOR, i)

        def TARGET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TARGET)
            else:
                return self.getToken(TSqlParser.TARGET, i)

        def ANY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ANY)
            else:
                return self.getToken(TSqlParser.ANY, i)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DEFAULT)
            else:
                return self.getToken(TSqlParser.DEFAULT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_contract

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_contract" ):
                listener.enterCreate_contract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_contract" ):
                listener.exitCreate_contract(self)




    def create_contract(self):

        localctx = TSqlParser.Create_contractContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_create_contract)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6313
            self.match(TSqlParser.CREATE)
            self.state = 6314
            self.match(TSqlParser.CONTRACT)
            self.state = 6315
            self.contract_name()
            self.state = 6318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 6316
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 6317
                localctx.owner_name = self.id_()


            self.state = 6320
            self.match(TSqlParser.LR_BRACKET)
            self.state = 6331 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6323
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                    self.state = 6321
                    localctx.message_type_name = self.id_()
                    pass
                elif token in [243]:
                    self.state = 6322
                    self.match(TSqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6325
                self.match(TSqlParser.SENT)
                self.state = 6326
                self.match(TSqlParser.BY)
                self.state = 6327
                _la = self._input.LA(1)
                if not(_la==46 or _la==453 or _la==973):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 6328
                    self.match(TSqlParser.COMMA)


                self.state = 6333 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6845834611130385) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4691064178111676937) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8070028319748410847) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387491794949) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714895912701) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755875440852549633) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873769796032868641) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510937462965505) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799299309863) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -651161675377934355) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -387309693044787745) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689521) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906573) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 171) != 0)):
                    break

            self.state = 6335
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conversation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def begin_conversation_timer(self):
            return self.getTypedRuleContext(TSqlParser.Begin_conversation_timerContext,0)


        def begin_conversation_dialog(self):
            return self.getTypedRuleContext(TSqlParser.Begin_conversation_dialogContext,0)


        def end_conversation(self):
            return self.getTypedRuleContext(TSqlParser.End_conversationContext,0)


        def get_conversation(self):
            return self.getTypedRuleContext(TSqlParser.Get_conversationContext,0)


        def send_conversation(self):
            return self.getTypedRuleContext(TSqlParser.Send_conversationContext,0)


        def waitfor_conversation(self):
            return self.getTypedRuleContext(TSqlParser.Waitfor_conversationContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_conversation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversation_statement" ):
                listener.enterConversation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversation_statement" ):
                listener.exitConversation_statement(self)




    def conversation_statement(self):

        localctx = TSqlParser.Conversation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_conversation_statement)
        try:
            self.state = 6343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,753,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6337
                self.begin_conversation_timer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6338
                self.begin_conversation_dialog()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6339
                self.end_conversation()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6340
                self.get_conversation()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6341
                self.send_conversation()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6342
                self.waitfor_conversation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Message_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.message_type_name = None # Id_Context
            self.owner_name = None # Id_Context
            self.schema_collection_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def MESSAGE(self):
            return self.getToken(TSqlParser.MESSAGE, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def VALIDATION(self):
            return self.getToken(TSqlParser.VALIDATION, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def EMPTY(self):
            return self.getToken(TSqlParser.EMPTY, 0)

        def WELL_FORMED_XML(self):
            return self.getToken(TSqlParser.WELL_FORMED_XML, 0)

        def VALID_XML(self):
            return self.getToken(TSqlParser.VALID_XML, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def COLLECTION(self):
            return self.getToken(TSqlParser.COLLECTION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_message_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessage_statement" ):
                listener.enterMessage_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessage_statement" ):
                listener.exitMessage_statement(self)




    def message_statement(self):

        localctx = TSqlParser.Message_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_message_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6345
            self.match(TSqlParser.CREATE)
            self.state = 6346
            self.match(TSqlParser.MESSAGE)
            self.state = 6347
            self.match(TSqlParser.TYPE)
            self.state = 6348
            localctx.message_type_name = self.id_()
            self.state = 6351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 6349
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 6350
                localctx.owner_name = self.id_()


            self.state = 6353
            self.match(TSqlParser.VALIDATION)
            self.state = 6354
            self.match(TSqlParser.EQUAL)
            self.state = 6363
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [608]:
                self.state = 6355
                self.match(TSqlParser.NONE)
                pass
            elif token in [289]:
                self.state = 6356
                self.match(TSqlParser.EMPTY)
                pass
            elif token in [1058]:
                self.state = 6357
                self.match(TSqlParser.WELL_FORMED_XML)
                pass
            elif token in [1040]:
                self.state = 6358
                self.match(TSqlParser.VALID_XML)
                self.state = 6359
                self.match(TSqlParser.WITH)
                self.state = 6360
                self.match(TSqlParser.SCHEMA)
                self.state = 6361
                self.match(TSqlParser.COLLECTION)
                self.state = 6362
                localctx.schema_collection_name = self.id_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(TSqlParser.MERGE, 0)

        def ddl_object(self):
            return self.getTypedRuleContext(TSqlParser.Ddl_objectContext,0)


        def USING(self):
            return self.getToken(TSqlParser.USING, 0)

        def table_sources(self):
            return self.getTypedRuleContext(TSqlParser.Table_sourcesContext,0)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def with_expression(self):
            return self.getTypedRuleContext(TSqlParser.With_expressionContext,0)


        def TOP(self):
            return self.getToken(TSqlParser.TOP, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def INTO(self):
            return self.getToken(TSqlParser.INTO, 0)

        def with_table_hints(self):
            return self.getTypedRuleContext(TSqlParser.With_table_hintsContext,0)


        def as_table_alias(self):
            return self.getTypedRuleContext(TSqlParser.As_table_aliasContext,0)


        def when_matches(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.When_matchesContext)
            else:
                return self.getTypedRuleContext(TSqlParser.When_matchesContext,i)


        def output_clause(self):
            return self.getTypedRuleContext(TSqlParser.Output_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(TSqlParser.Option_clauseContext,0)


        def PERCENT(self):
            return self.getToken(TSqlParser.PERCENT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_merge_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_statement" ):
                listener.enterMerge_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_statement" ):
                listener.exitMerge_statement(self)




    def merge_statement(self):

        localctx = TSqlParser.Merge_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_merge_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1063:
                self.state = 6365
                self.with_expression()


            self.state = 6368
            self.match(TSqlParser.MERGE)
            self.state = 6376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==987:
                self.state = 6369
                self.match(TSqlParser.TOP)
                self.state = 6370
                self.match(TSqlParser.LR_BRACKET)
                self.state = 6371
                self.expression(0)
                self.state = 6372
                self.match(TSqlParser.RR_BRACKET)
                self.state = 6374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==695:
                    self.state = 6373
                    self.match(TSqlParser.PERCENT)




            self.state = 6379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==462:
                self.state = 6378
                self.match(TSqlParser.INTO)


            self.state = 6381
            self.ddl_object()
            self.state = 6383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1063:
                self.state = 6382
                self.with_table_hints()


            self.state = 6386
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,761,self._ctx)
            if la_ == 1:
                self.state = 6385
                self.as_table_alias()


            self.state = 6388
            self.match(TSqlParser.USING)
            self.state = 6389
            self.table_sources()
            self.state = 6390
            self.match(TSqlParser.ON)
            self.state = 6391
            self.search_condition(0)
            self.state = 6393 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6392
                self.when_matches()
                self.state = 6395 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==1059):
                    break

            self.state = 6398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==671:
                self.state = 6397
                self.output_clause()


            self.state = 6401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==664:
                self.state = 6400
                self.option_clause()


            self.state = 6403
            self.match(TSqlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_matchesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.WHEN)
            else:
                return self.getToken(TSqlParser.WHEN, i)

        def MATCHED(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MATCHED)
            else:
                return self.getToken(TSqlParser.MATCHED, i)

        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.THEN)
            else:
                return self.getToken(TSqlParser.THEN, i)

        def merge_matched(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Merge_matchedContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Merge_matchedContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AND)
            else:
                return self.getToken(TSqlParser.AND, i)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Search_conditionContext,i)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOT)
            else:
                return self.getToken(TSqlParser.NOT, i)

        def merge_not_matched(self):
            return self.getTypedRuleContext(TSqlParser.Merge_not_matchedContext,0)


        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BY)
            else:
                return self.getToken(TSqlParser.BY, i)

        def TARGET(self):
            return self.getToken(TSqlParser.TARGET, 0)

        def SOURCE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SOURCE)
            else:
                return self.getToken(TSqlParser.SOURCE, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_when_matches

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_matches" ):
                listener.enterWhen_matches(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_matches" ):
                listener.exitWhen_matches(self)




    def when_matches(self):

        localctx = TSqlParser.When_matchesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_when_matches)
        self._la = 0 # Token type
        try:
            self.state = 6445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,771,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6413 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 6405
                        self.match(TSqlParser.WHEN)
                        self.state = 6406
                        self.match(TSqlParser.MATCHED)
                        self.state = 6409
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==37:
                            self.state = 6407
                            self.match(TSqlParser.AND)
                            self.state = 6408
                            self.search_condition(0)


                        self.state = 6411
                        self.match(TSqlParser.THEN)
                        self.state = 6412
                        self.merge_matched()

                    else:
                        raise NoViableAltException(self)
                    self.state = 6415 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,766,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6417
                self.match(TSqlParser.WHEN)
                self.state = 6418
                self.match(TSqlParser.NOT)
                self.state = 6419
                self.match(TSqlParser.MATCHED)
                self.state = 6422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 6420
                    self.match(TSqlParser.BY)
                    self.state = 6421
                    self.match(TSqlParser.TARGET)


                self.state = 6426
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==37:
                    self.state = 6424
                    self.match(TSqlParser.AND)
                    self.state = 6425
                    self.search_condition(0)


                self.state = 6428
                self.match(TSqlParser.THEN)
                self.state = 6429
                self.merge_not_matched()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6441 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 6430
                        self.match(TSqlParser.WHEN)
                        self.state = 6431
                        self.match(TSqlParser.NOT)
                        self.state = 6432
                        self.match(TSqlParser.MATCHED)
                        self.state = 6433
                        self.match(TSqlParser.BY)
                        self.state = 6434
                        self.match(TSqlParser.SOURCE)
                        self.state = 6437
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==37:
                            self.state = 6435
                            self.match(TSqlParser.AND)
                            self.state = 6436
                            self.search_condition(0)


                        self.state = 6439
                        self.match(TSqlParser.THEN)
                        self.state = 6440
                        self.merge_matched()

                    else:
                        raise NoViableAltException(self)
                    self.state = 6443 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,770,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_matchedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(TSqlParser.UPDATE, 0)

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def update_elem_merge(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Update_elem_mergeContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Update_elem_mergeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def DELETE(self):
            return self.getToken(TSqlParser.DELETE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_merge_matched

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_matched" ):
                listener.enterMerge_matched(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_matched" ):
                listener.exitMerge_matched(self)




    def merge_matched(self):

        localctx = TSqlParser.Merge_matchedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_merge_matched)
        self._la = 0 # Token type
        try:
            self.state = 6458
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1028]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6447
                self.match(TSqlParser.UPDATE)
                self.state = 6448
                self.match(TSqlParser.SET)
                self.state = 6449
                self.update_elem_merge()
                self.state = 6454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 6450
                    self.match(TSqlParser.COMMA)
                    self.state = 6451
                    self.update_elem_merge()
                    self.state = 6456
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [252]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6457
                self.match(TSqlParser.DELETE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_not_matchedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(TSqlParser.INSERT, 0)

        def table_value_constructor(self):
            return self.getTypedRuleContext(TSqlParser.Table_value_constructorContext,0)


        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def VALUES(self):
            return self.getToken(TSqlParser.VALUES, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_merge_not_matched

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_not_matched" ):
                listener.enterMerge_not_matched(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_not_matched" ):
                listener.exitMerge_not_matched(self)




    def merge_not_matched(self):

        localctx = TSqlParser.Merge_not_matchedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_merge_not_matched)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6460
            self.match(TSqlParser.INSERT)
            self.state = 6465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1192:
                self.state = 6461
                self.match(TSqlParser.LR_BRACKET)
                self.state = 6462
                self.column_name_list()
                self.state = 6463
                self.match(TSqlParser.RR_BRACKET)


            self.state = 6470
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1042]:
                self.state = 6467
                self.table_value_constructor()
                pass
            elif token in [243]:
                self.state = 6468
                self.match(TSqlParser.DEFAULT)
                self.state = 6469
                self.match(TSqlParser.VALUES)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cursor_var = None # Token

        def DELETE(self):
            return self.getToken(TSqlParser.DELETE, 0)

        def delete_statement_from(self):
            return self.getTypedRuleContext(TSqlParser.Delete_statement_fromContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(TSqlParser.With_expressionContext,0)


        def TOP(self):
            return self.getToken(TSqlParser.TOP, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FROM)
            else:
                return self.getToken(TSqlParser.FROM, i)

        def with_table_hints(self):
            return self.getTypedRuleContext(TSqlParser.With_table_hintsContext,0)


        def output_clause(self):
            return self.getTypedRuleContext(TSqlParser.Output_clauseContext,0)


        def table_sources(self):
            return self.getTypedRuleContext(TSqlParser.Table_sourcesContext,0)


        def WHERE(self):
            return self.getToken(TSqlParser.WHERE, 0)

        def for_clause(self):
            return self.getTypedRuleContext(TSqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(TSqlParser.Option_clauseContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def CURRENT(self):
            return self.getToken(TSqlParser.CURRENT, 0)

        def OF(self):
            return self.getToken(TSqlParser.OF, 0)

        def PERCENT(self):
            return self.getToken(TSqlParser.PERCENT, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TSqlParser.Cursor_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def GLOBAL(self):
            return self.getToken(TSqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_delete_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement" ):
                listener.enterDelete_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement" ):
                listener.exitDelete_statement(self)




    def delete_statement(self):

        localctx = TSqlParser.Delete_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_delete_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1063:
                self.state = 6472
                self.with_expression()


            self.state = 6475
            self.match(TSqlParser.DELETE)
            self.state = 6485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,778,self._ctx)
            if la_ == 1:
                self.state = 6476
                self.match(TSqlParser.TOP)
                self.state = 6477
                self.match(TSqlParser.LR_BRACKET)
                self.state = 6478
                self.expression(0)
                self.state = 6479
                self.match(TSqlParser.RR_BRACKET)
                self.state = 6481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==695:
                    self.state = 6480
                    self.match(TSqlParser.PERCENT)



            elif la_ == 2:
                self.state = 6483
                self.match(TSqlParser.TOP)
                self.state = 6484
                self.match(TSqlParser.DECIMAL)


            self.state = 6488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==378:
                self.state = 6487
                self.match(TSqlParser.FROM)


            self.state = 6490
            self.delete_statement_from()
            self.state = 6492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,780,self._ctx)
            if la_ == 1:
                self.state = 6491
                self.with_table_hints()


            self.state = 6495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,781,self._ctx)
            if la_ == 1:
                self.state = 6494
                self.output_clause()


            self.state = 6499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==378:
                self.state = 6497
                self.match(TSqlParser.FROM)
                self.state = 6498
                self.table_sources()


            self.state = 6514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1060:
                self.state = 6501
                self.match(TSqlParser.WHERE)
                self.state = 6512
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 276, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 817, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1156, 1157, 1162, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1187, 1191, 1192, 1201, 1202, 1203, 1207]:
                    self.state = 6502
                    self.search_condition(0)
                    pass
                elif token in [204]:
                    self.state = 6503
                    self.match(TSqlParser.CURRENT)
                    self.state = 6504
                    self.match(TSqlParser.OF)
                    self.state = 6510
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,784,self._ctx)
                    if la_ == 1:
                        self.state = 6506
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,783,self._ctx)
                        if la_ == 1:
                            self.state = 6505
                            self.match(TSqlParser.GLOBAL)


                        self.state = 6508
                        self.cursor_name()
                        pass

                    elif la_ == 2:
                        self.state = 6509
                        localctx.cursor_var = self.match(TSqlParser.LOCAL_ID)
                        pass


                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 6517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==363:
                self.state = 6516
                self.for_clause()


            self.state = 6520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==664:
                self.state = 6519
                self.option_clause()


            self.state = 6523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,789,self._ctx)
            if la_ == 1:
                self.state = 6522
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_statement_fromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table_var = None # Token

        def ddl_object(self):
            return self.getTypedRuleContext(TSqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(TSqlParser.Rowset_function_limitedContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_delete_statement_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement_from" ):
                listener.enterDelete_statement_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement_from" ):
                listener.exitDelete_statement_from(self)




    def delete_statement_from(self):

        localctx = TSqlParser.Delete_statement_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_delete_statement_from)
        try:
            self.state = 6528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,790,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6525
                self.ddl_object()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6526
                self.rowset_function_limited()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6527
                localctx.table_var = self.match(TSqlParser.LOCAL_ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(TSqlParser.INSERT, 0)

        def insert_statement_value(self):
            return self.getTypedRuleContext(TSqlParser.Insert_statement_valueContext,0)


        def ddl_object(self):
            return self.getTypedRuleContext(TSqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(TSqlParser.Rowset_function_limitedContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(TSqlParser.With_expressionContext,0)


        def TOP(self):
            return self.getToken(TSqlParser.TOP, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def INTO(self):
            return self.getToken(TSqlParser.INTO, 0)

        def with_table_hints(self):
            return self.getTypedRuleContext(TSqlParser.With_table_hintsContext,0)


        def insert_column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Insert_column_name_listContext,0)


        def output_clause(self):
            return self.getTypedRuleContext(TSqlParser.Output_clauseContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(TSqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(TSqlParser.Option_clauseContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def PERCENT(self):
            return self.getToken(TSqlParser.PERCENT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_insert_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement" ):
                listener.enterInsert_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement" ):
                listener.exitInsert_statement(self)




    def insert_statement(self):

        localctx = TSqlParser.Insert_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_insert_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1063:
                self.state = 6530
                self.with_expression()


            self.state = 6533
            self.match(TSqlParser.INSERT)
            self.state = 6541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==987:
                self.state = 6534
                self.match(TSqlParser.TOP)
                self.state = 6535
                self.match(TSqlParser.LR_BRACKET)
                self.state = 6536
                self.expression(0)
                self.state = 6537
                self.match(TSqlParser.RR_BRACKET)
                self.state = 6539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==695:
                    self.state = 6538
                    self.match(TSqlParser.PERCENT)




            self.state = 6544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==462:
                self.state = 6543
                self.match(TSqlParser.INTO)


            self.state = 6548
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1166, 1167, 1169]:
                self.state = 6546
                self.ddl_object()
                pass
            elif token in [654, 656]:
                self.state = 6547
                self.rowset_function_limited()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 6551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1063:
                self.state = 6550
                self.with_table_hints()


            self.state = 6557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,797,self._ctx)
            if la_ == 1:
                self.state = 6553
                self.match(TSqlParser.LR_BRACKET)
                self.state = 6554
                self.insert_column_name_list()
                self.state = 6555
                self.match(TSqlParser.RR_BRACKET)


            self.state = 6560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==671:
                self.state = 6559
                self.output_clause()


            self.state = 6562
            self.insert_statement_value()
            self.state = 6564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==363:
                self.state = 6563
                self.for_clause()


            self.state = 6567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==664:
                self.state = 6566
                self.option_clause()


            self.state = 6570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,801,self._ctx)
            if la_ == 1:
                self.state = 6569
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_statement_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_value_constructor(self):
            return self.getTypedRuleContext(TSqlParser.Table_value_constructorContext,0)


        def derived_table(self):
            return self.getTypedRuleContext(TSqlParser.Derived_tableContext,0)


        def execute_statement(self):
            return self.getTypedRuleContext(TSqlParser.Execute_statementContext,0)


        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def VALUES(self):
            return self.getToken(TSqlParser.VALUES, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_insert_statement_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement_value" ):
                listener.enterInsert_statement_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement_value" ):
                listener.exitInsert_statement_value(self)




    def insert_statement_value(self):

        localctx = TSqlParser.Insert_statement_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_insert_statement_value)
        try:
            self.state = 6577
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,802,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6572
                self.table_value_constructor()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6573
                self.derived_table()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6574
                self.execute_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6575
                self.match(TSqlParser.DEFAULT)
                self.state = 6576
                self.match(TSqlParser.VALUES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Receive_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table_variable = None # Id_Context
            self.where = None # Search_conditionContext

        def RECEIVE(self):
            return self.getToken(TSqlParser.RECEIVE, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_table_nameContext,0)


        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(TSqlParser.DISTINCT, 0)

        def top_clause(self):
            return self.getTypedRuleContext(TSqlParser.Top_clauseContext,0)


        def STAR(self):
            return self.getToken(TSqlParser.STAR, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOCAL_ID)
            else:
                return self.getToken(TSqlParser.LOCAL_ID, i)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def INTO(self):
            return self.getToken(TSqlParser.INTO, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def WHERE(self):
            return self.getToken(TSqlParser.WHERE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_receive_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceive_statement" ):
                listener.enterReceive_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceive_statement" ):
                listener.exitReceive_statement(self)




    def receive_statement(self):

        localctx = TSqlParser.Receive_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_receive_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1192:
                self.state = 6579
                self.match(TSqlParser.LR_BRACKET)


            self.state = 6582
            self.match(TSqlParser.RECEIVE)
            self.state = 6587
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22]:
                self.state = 6583
                self.match(TSqlParser.ALL)
                pass
            elif token in [272]:
                self.state = 6584
                self.match(TSqlParser.DISTINCT)
                pass
            elif token in [987]:
                self.state = 6585
                self.top_clause()
                pass
            elif token in [1198]:
                self.state = 6586
                self.match(TSqlParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 6597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1166:
                self.state = 6589
                self.match(TSqlParser.LOCAL_ID)
                self.state = 6590
                self.match(TSqlParser.EQUAL)
                self.state = 6591
                self.expression(0)
                self.state = 6593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 6592
                    self.match(TSqlParser.COMMA)


                self.state = 6599
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6600
            self.match(TSqlParser.FROM)
            self.state = 6601
            self.full_table_name()
            self.state = 6607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==462:
                self.state = 6602
                self.match(TSqlParser.INTO)
                self.state = 6603
                localctx.table_variable = self.id_()

                self.state = 6604
                self.match(TSqlParser.WHERE)
                self.state = 6605
                localctx.where = self.search_condition(0)


            self.state = 6610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1193:
                self.state = 6609
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_statement_standaloneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(TSqlParser.Select_statementContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(TSqlParser.With_expressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_select_statement_standalone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_statement_standalone" ):
                listener.enterSelect_statement_standalone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_statement_standalone" ):
                listener.exitSelect_statement_standalone(self)




    def select_statement_standalone(self):

        localctx = TSqlParser.Select_statement_standaloneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_select_statement_standalone)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1063:
                self.state = 6612
                self.with_expression()


            self.state = 6615
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_expression(self):
            return self.getTypedRuleContext(TSqlParser.Query_expressionContext,0)


        def select_order_by_clause(self):
            return self.getTypedRuleContext(TSqlParser.Select_order_by_clauseContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(TSqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(TSqlParser.Option_clauseContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_select_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_statement" ):
                listener.enterSelect_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_statement" ):
                listener.exitSelect_statement(self)




    def select_statement(self):

        localctx = TSqlParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6617
            self.query_expression()
            self.state = 6619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==666:
                self.state = 6618
                self.select_order_by_clause()


            self.state = 6622
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,811,self._ctx)
            if la_ == 1:
                self.state = 6621
                self.for_clause()


            self.state = 6625
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,812,self._ctx)
            if la_ == 1:
                self.state = 6624
                self.option_clause()


            self.state = 6628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,813,self._ctx)
            if la_ == 1:
                self.state = 6627
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def constant(self):
            return self.getTypedRuleContext(TSqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_time

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTime" ):
                listener.enterTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTime" ):
                listener.exitTime(self)




    def time(self):

        localctx = TSqlParser.TimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_time)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6632
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1166]:
                self.state = 6630
                self.match(TSqlParser.LOCAL_ID)
                pass
            elif token in [1168, 1170, 1171, 1172, 1173, 1191, 1202, 1207]:
                self.state = 6631
                self.constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cursor_var = None # Token

        def UPDATE(self):
            return self.getToken(TSqlParser.UPDATE, 0)

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def update_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Update_elemContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Update_elemContext,i)


        def ddl_object(self):
            return self.getTypedRuleContext(TSqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(TSqlParser.Rowset_function_limitedContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(TSqlParser.With_expressionContext,0)


        def TOP(self):
            return self.getToken(TSqlParser.TOP, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def with_table_hints(self):
            return self.getTypedRuleContext(TSqlParser.With_table_hintsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def output_clause(self):
            return self.getTypedRuleContext(TSqlParser.Output_clauseContext,0)


        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def table_sources(self):
            return self.getTypedRuleContext(TSqlParser.Table_sourcesContext,0)


        def WHERE(self):
            return self.getToken(TSqlParser.WHERE, 0)

        def for_clause(self):
            return self.getTypedRuleContext(TSqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(TSqlParser.Option_clauseContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def CURRENT(self):
            return self.getToken(TSqlParser.CURRENT, 0)

        def OF(self):
            return self.getToken(TSqlParser.OF, 0)

        def PERCENT(self):
            return self.getToken(TSqlParser.PERCENT, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TSqlParser.Cursor_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def GLOBAL(self):
            return self.getToken(TSqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_update_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_statement" ):
                listener.enterUpdate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_statement" ):
                listener.exitUpdate_statement(self)




    def update_statement(self):

        localctx = TSqlParser.Update_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_update_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1063:
                self.state = 6634
                self.with_expression()


            self.state = 6637
            self.match(TSqlParser.UPDATE)
            self.state = 6645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==987:
                self.state = 6638
                self.match(TSqlParser.TOP)
                self.state = 6639
                self.match(TSqlParser.LR_BRACKET)
                self.state = 6640
                self.expression(0)
                self.state = 6641
                self.match(TSqlParser.RR_BRACKET)
                self.state = 6643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==695:
                    self.state = 6642
                    self.match(TSqlParser.PERCENT)




            self.state = 6649
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1166, 1167, 1169]:
                self.state = 6647
                self.ddl_object()
                pass
            elif token in [654, 656]:
                self.state = 6648
                self.rowset_function_limited()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 6652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1063:
                self.state = 6651
                self.with_table_hints()


            self.state = 6654
            self.match(TSqlParser.SET)
            self.state = 6655
            self.update_elem()
            self.state = 6660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 6656
                self.match(TSqlParser.COMMA)
                self.state = 6657
                self.update_elem()
                self.state = 6662
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,821,self._ctx)
            if la_ == 1:
                self.state = 6663
                self.output_clause()


            self.state = 6668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==378:
                self.state = 6666
                self.match(TSqlParser.FROM)
                self.state = 6667
                self.table_sources()


            self.state = 6683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1060:
                self.state = 6670
                self.match(TSqlParser.WHERE)
                self.state = 6681
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 276, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 817, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1156, 1157, 1162, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1187, 1191, 1192, 1201, 1202, 1203, 1207]:
                    self.state = 6671
                    self.search_condition(0)
                    pass
                elif token in [204]:
                    self.state = 6672
                    self.match(TSqlParser.CURRENT)
                    self.state = 6673
                    self.match(TSqlParser.OF)
                    self.state = 6679
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,824,self._ctx)
                    if la_ == 1:
                        self.state = 6675
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,823,self._ctx)
                        if la_ == 1:
                            self.state = 6674
                            self.match(TSqlParser.GLOBAL)


                        self.state = 6677
                        self.cursor_name()
                        pass

                    elif la_ == 2:
                        self.state = 6678
                        localctx.cursor_var = self.match(TSqlParser.LOCAL_ID)
                        pass


                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 6686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==363:
                self.state = 6685
                self.for_clause()


            self.state = 6689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==664:
                self.state = 6688
                self.option_clause()


            self.state = 6692
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,829,self._ctx)
            if la_ == 1:
                self.state = 6691
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT(self):
            return self.getToken(TSqlParser.OUTPUT, 0)

        def output_dml_list_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Output_dml_list_elemContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Output_dml_list_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def INTO(self):
            return self.getToken(TSqlParser.INTO, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_output_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_clause" ):
                listener.enterOutput_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_clause" ):
                listener.exitOutput_clause(self)




    def output_clause(self):

        localctx = TSqlParser.Output_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_output_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6694
            self.match(TSqlParser.OUTPUT)
            self.state = 6695
            self.output_dml_list_elem()
            self.state = 6700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 6696
                self.match(TSqlParser.COMMA)
                self.state = 6697
                self.output_dml_list_elem()
                self.state = 6702
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==462:
                self.state = 6703
                self.match(TSqlParser.INTO)
                self.state = 6706
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1166]:
                    self.state = 6704
                    self.match(TSqlParser.LOCAL_ID)
                    pass
                elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                    self.state = 6705
                    self.table_name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6712
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,832,self._ctx)
                if la_ == 1:
                    self.state = 6708
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 6709
                    self.column_name_list()
                    self.state = 6710
                    self.match(TSqlParser.RR_BRACKET)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_dml_list_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def asterisk(self):
            return self.getTypedRuleContext(TSqlParser.AsteriskContext,0)


        def as_column_alias(self):
            return self.getTypedRuleContext(TSqlParser.As_column_aliasContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_output_dml_list_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_dml_list_elem" ):
                listener.enterOutput_dml_list_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_dml_list_elem" ):
                listener.exitOutput_dml_list_elem(self)




    def output_dml_list_elem(self):

        localctx = TSqlParser.Output_dml_list_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_output_dml_list_elem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,834,self._ctx)
            if la_ == 1:
                self.state = 6716
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 6717
                self.asterisk()
                pass


            self.state = 6721
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,835,self._ctx)
            if la_ == 1:
                self.state = 6720
                self.as_column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bulk_insert_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BULK(self):
            return self.getToken(TSqlParser.BULK, 0)

        def INSERT(self):
            return self.getToken(TSqlParser.INSERT, 0)

        def ddl_object(self):
            return self.getTypedRuleContext(TSqlParser.Ddl_objectContext,0)


        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_bulk_insert_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBulk_insert_statement" ):
                listener.enterBulk_insert_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBulk_insert_statement" ):
                listener.exitBulk_insert_statement(self)




    def bulk_insert_statement(self):

        localctx = TSqlParser.Bulk_insert_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_bulk_insert_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6723
            self.match(TSqlParser.BULK)
            self.state = 6724
            self.match(TSqlParser.INSERT)
            self.state = 6725
            self.ddl_object()
            self.state = 6726
            self.match(TSqlParser.FROM)
            self.state = 6727
            self.match(TSqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_databaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # Id_Context
            self.collation_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def CONTAINMENT(self):
            return self.getToken(TSqlParser.CONTAINMENT, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def database_file_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Database_file_specContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Database_file_specContext,i)


        def LOG(self):
            return self.getToken(TSqlParser.LOG, 0)

        def COLLATE(self):
            return self.getToken(TSqlParser.COLLATE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def create_database_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Create_database_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Create_database_optionContext,i)


        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def PARTIAL(self):
            return self.getToken(TSqlParser.PARTIAL, 0)

        def PRIMARY(self):
            return self.getToken(TSqlParser.PRIMARY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_database" ):
                listener.enterCreate_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_database" ):
                listener.exitCreate_database(self)




    def create_database(self):

        localctx = TSqlParser.Create_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_create_database)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6729
            self.match(TSqlParser.CREATE)
            self.state = 6730
            self.match(TSqlParser.DATABASE)

            self.state = 6731
            localctx.database = self.id_()
            self.state = 6735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,836,self._ctx)
            if la_ == 1:
                self.state = 6732
                self.match(TSqlParser.CONTAINMENT)
                self.state = 6733
                self.match(TSqlParser.EQUAL)
                self.state = 6734
                _la = self._input.LA(1)
                if not(_la==608 or _la==686):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 6749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==649:
                self.state = 6737
                self.match(TSqlParser.ON)
                self.state = 6739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==717:
                    self.state = 6738
                    self.match(TSqlParser.PRIMARY)


                self.state = 6741
                self.database_file_spec()
                self.state = 6746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 6742
                    self.match(TSqlParser.COMMA)
                    self.state = 6743
                    self.database_file_spec()
                    self.state = 6748
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 6761
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,841,self._ctx)
            if la_ == 1:
                self.state = 6751
                self.match(TSqlParser.LOG)
                self.state = 6752
                self.match(TSqlParser.ON)
                self.state = 6753
                self.database_file_spec()
                self.state = 6758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 6754
                    self.match(TSqlParser.COMMA)
                    self.state = 6755
                    self.database_file_spec()
                    self.state = 6760
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 6765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 6763
                self.match(TSqlParser.COLLATE)
                self.state = 6764
                localctx.collation_name = self.id_()


            self.state = 6776
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,844,self._ctx)
            if la_ == 1:
                self.state = 6767
                self.match(TSqlParser.WITH)
                self.state = 6768
                self.create_database_option()
                self.state = 6773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 6769
                    self.match(TSqlParser.COMMA)
                    self.state = 6770
                    self.create_database_option()
                    self.state = 6775
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.where = None # Search_conditionContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(TSqlParser.INDEX, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def column_name_list_with_order(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_list_with_orderContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def UNIQUE(self):
            return self.getToken(TSqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(TSqlParser.ClusteredContext,0)


        def INCLUDE(self):
            return self.getToken(TSqlParser.INCLUDE, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def WHERE(self):
            return self.getToken(TSqlParser.WHERE, 0)

        def create_index_options(self):
            return self.getTypedRuleContext(TSqlParser.Create_index_optionsContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_create_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index" ):
                listener.enterCreate_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index" ):
                listener.exitCreate_index(self)




    def create_index(self):

        localctx = TSqlParser.Create_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_create_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6778
            self.match(TSqlParser.CREATE)
            self.state = 6780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1020:
                self.state = 6779
                self.match(TSqlParser.UNIQUE)


            self.state = 6783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149 or _la==607:
                self.state = 6782
                self.clustered()


            self.state = 6785
            self.match(TSqlParser.INDEX)
            self.state = 6786
            self.id_()
            self.state = 6787
            self.match(TSqlParser.ON)
            self.state = 6788
            self.table_name()
            self.state = 6789
            self.match(TSqlParser.LR_BRACKET)
            self.state = 6790
            self.column_name_list_with_order()
            self.state = 6791
            self.match(TSqlParser.RR_BRACKET)
            self.state = 6797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,847,self._ctx)
            if la_ == 1:
                self.state = 6792
                self.match(TSqlParser.INCLUDE)
                self.state = 6793
                self.match(TSqlParser.LR_BRACKET)
                self.state = 6794
                self.column_name_list()
                self.state = 6795
                self.match(TSqlParser.RR_BRACKET)


            self.state = 6801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1060:
                self.state = 6799
                self.match(TSqlParser.WHERE)
                self.state = 6800
                localctx.where = self.search_condition(0)


            self.state = 6804
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,849,self._ctx)
            if la_ == 1:
                self.state = 6803
                self.create_index_options()


            self.state = 6808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==649:
                self.state = 6806
                self.match(TSqlParser.ON)
                self.state = 6807
                self.id_()


            self.state = 6811
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,851,self._ctx)
            if la_ == 1:
                self.state = 6810
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_index_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def relational_index_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Relational_index_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Relational_index_optionContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_index_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index_options" ):
                listener.enterCreate_index_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index_options" ):
                listener.exitCreate_index_options(self)




    def create_index_options(self):

        localctx = TSqlParser.Create_index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_create_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6813
            self.match(TSqlParser.WITH)
            self.state = 6814
            self.match(TSqlParser.LR_BRACKET)
            self.state = 6815
            self.relational_index_option()
            self.state = 6820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 6816
                self.match(TSqlParser.COMMA)
                self.state = 6817
                self.relational_index_option()
                self.state = 6822
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6823
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relational_index_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rebuild_index_option(self):
            return self.getTypedRuleContext(TSqlParser.Rebuild_index_optionContext,0)


        def DROP_EXISTING(self):
            return self.getToken(TSqlParser.DROP_EXISTING, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def OPTIMIZE_FOR_SEQUENTIAL_KEY(self):
            return self.getToken(TSqlParser.OPTIMIZE_FOR_SEQUENTIAL_KEY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_relational_index_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_index_option" ):
                listener.enterRelational_index_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_index_option" ):
                listener.exitRelational_index_option(self)




    def relational_index_option(self):

        localctx = TSqlParser.Relational_index_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_relational_index_option)
        try:
            self.state = 6832
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27, 28, 223, 357, 433, 538, 546, 650, 676, 807, 911, 932, 933, 1078]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6825
                self.rebuild_index_option()
                pass
            elif token in [282]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6826
                self.match(TSqlParser.DROP_EXISTING)
                self.state = 6827
                self.match(TSqlParser.EQUAL)
                self.state = 6828
                self.on_off()
                pass
            elif token in [663]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6829
                self.match(TSqlParser.OPTIMIZE_FOR_SEQUENTIAL_KEY)
                self.state = 6830
                self.match(TSqlParser.EQUAL)
                self.state = 6831
                self.on_off()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def INDEX(self):
            return self.getToken(TSqlParser.INDEX, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def DISABLE(self):
            return self.getToken(TSqlParser.DISABLE, 0)

        def PAUSE(self):
            return self.getToken(TSqlParser.PAUSE, 0)

        def ABORT(self):
            return self.getToken(TSqlParser.ABORT, 0)

        def RESUME(self):
            return self.getToken(TSqlParser.RESUME, 0)

        def reorganize_partition(self):
            return self.getTypedRuleContext(TSqlParser.Reorganize_partitionContext,0)


        def set_index_options(self):
            return self.getTypedRuleContext(TSqlParser.Set_index_optionsContext,0)


        def rebuild_partition(self):
            return self.getTypedRuleContext(TSqlParser.Rebuild_partitionContext,0)


        def resumable_index_options(self):
            return self.getTypedRuleContext(TSqlParser.Resumable_index_optionsContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_index" ):
                listener.enterAlter_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_index" ):
                listener.exitAlter_index(self)




    def alter_index(self):

        localctx = TSqlParser.Alter_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_alter_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6834
            self.match(TSqlParser.ALTER)
            self.state = 6835
            self.match(TSqlParser.INDEX)
            self.state = 6838
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                self.state = 6836
                self.id_()
                pass
            elif token in [22]:
                self.state = 6837
                self.match(TSqlParser.ALL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 6840
            self.match(TSqlParser.ON)
            self.state = 6841
            self.table_name()
            self.state = 6852
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.state = 6842
                self.match(TSqlParser.DISABLE)
                pass
            elif token in [693]:
                self.state = 6843
                self.match(TSqlParser.PAUSE)
                pass
            elif token in [1]:
                self.state = 6844
                self.match(TSqlParser.ABORT)
                pass
            elif token in [808]:
                self.state = 6845
                self.match(TSqlParser.RESUME)
                self.state = 6847
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,855,self._ctx)
                if la_ == 1:
                    self.state = 6846
                    self.resumable_index_options()


                pass
            elif token in [782]:
                self.state = 6849
                self.reorganize_partition()
                pass
            elif token in [887]:
                self.state = 6850
                self.set_index_options()
                pass
            elif token in [767]:
                self.state = 6851
                self.rebuild_partition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Resumable_index_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def resumable_index_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Resumable_index_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Resumable_index_optionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_resumable_index_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResumable_index_options" ):
                listener.enterResumable_index_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResumable_index_options" ):
                listener.exitResumable_index_options(self)




    def resumable_index_options(self):

        localctx = TSqlParser.Resumable_index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_resumable_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6854
            self.match(TSqlParser.WITH)
            self.state = 6855
            self.match(TSqlParser.LR_BRACKET)

            self.state = 6856
            self.resumable_index_option()
            self.state = 6861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 6857
                self.match(TSqlParser.COMMA)
                self.state = 6858
                self.resumable_index_option()
                self.state = 6863
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6864
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Resumable_index_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.max_degree_of_parallelism = None # Token
            self.max_duration = None # Token

        def MAXDOP(self):
            return self.getToken(TSqlParser.MAXDOP, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def MAX_DURATION(self):
            return self.getToken(TSqlParser.MAX_DURATION, 0)

        def MINUTES(self):
            return self.getToken(TSqlParser.MINUTES, 0)

        def low_priority_lock_wait(self):
            return self.getTypedRuleContext(TSqlParser.Low_priority_lock_waitContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_resumable_index_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResumable_index_option" ):
                listener.enterResumable_index_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResumable_index_option" ):
                listener.exitResumable_index_option(self)




    def resumable_index_option(self):

        localctx = TSqlParser.Resumable_index_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_resumable_index_option)
        self._la = 0 # Token type
        try:
            self.state = 6876
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [538]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6866
                self.match(TSqlParser.MAXDOP)
                self.state = 6867
                self.match(TSqlParser.EQUAL)
                self.state = 6868
                localctx.max_degree_of_parallelism = self.match(TSqlParser.DECIMAL)
                pass
            elif token in [546]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6869
                self.match(TSqlParser.MAX_DURATION)
                self.state = 6870
                self.match(TSqlParser.EQUAL)
                self.state = 6871
                localctx.max_duration = self.match(TSqlParser.DECIMAL)
                self.state = 6873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==569:
                    self.state = 6872
                    self.match(TSqlParser.MINUTES)


                pass
            elif token in [1057]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6875
                self.low_priority_lock_wait()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reorganize_partitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REORGANIZE(self):
            return self.getToken(TSqlParser.REORGANIZE, 0)

        def PARTITION(self):
            return self.getToken(TSqlParser.PARTITION, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def reorganize_options(self):
            return self.getTypedRuleContext(TSqlParser.Reorganize_optionsContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_reorganize_partition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReorganize_partition" ):
                listener.enterReorganize_partition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReorganize_partition" ):
                listener.exitReorganize_partition(self)




    def reorganize_partition(self):

        localctx = TSqlParser.Reorganize_partitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_reorganize_partition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6878
            self.match(TSqlParser.REORGANIZE)
            self.state = 6882
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,860,self._ctx)
            if la_ == 1:
                self.state = 6879
                self.match(TSqlParser.PARTITION)
                self.state = 6880
                self.match(TSqlParser.EQUAL)
                self.state = 6881
                self.match(TSqlParser.DECIMAL)


            self.state = 6885
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,861,self._ctx)
            if la_ == 1:
                self.state = 6884
                self.reorganize_options()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reorganize_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def reorganize_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Reorganize_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Reorganize_optionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_reorganize_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReorganize_options" ):
                listener.enterReorganize_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReorganize_options" ):
                listener.exitReorganize_options(self)




    def reorganize_options(self):

        localctx = TSqlParser.Reorganize_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_reorganize_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6887
            self.match(TSqlParser.WITH)
            self.state = 6888
            self.match(TSqlParser.LR_BRACKET)

            self.state = 6889
            self.reorganize_option()
            self.state = 6894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 6890
                self.match(TSqlParser.COMMA)
                self.state = 6891
                self.reorganize_option()
                self.state = 6896
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6897
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reorganize_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOB_COMPACTION(self):
            return self.getToken(TSqlParser.LOB_COMPACTION, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def COMPRESS_ALL_ROW_GROUPS(self):
            return self.getToken(TSqlParser.COMPRESS_ALL_ROW_GROUPS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_reorganize_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReorganize_option" ):
                listener.enterReorganize_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReorganize_option" ):
                listener.exitReorganize_option(self)




    def reorganize_option(self):

        localctx = TSqlParser.Reorganize_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_reorganize_option)
        try:
            self.state = 6905
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [517]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6899
                self.match(TSqlParser.LOB_COMPACTION)
                self.state = 6900
                self.match(TSqlParser.EQUAL)
                self.state = 6901
                self.on_off()
                pass
            elif token in [168]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6902
                self.match(TSqlParser.COMPRESS_ALL_ROW_GROUPS)
                self.state = 6903
                self.match(TSqlParser.EQUAL)
                self.state = 6904
                self.on_off()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_index_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def set_index_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Set_index_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Set_index_optionContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_set_index_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_index_options" ):
                listener.enterSet_index_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_index_options" ):
                listener.exitSet_index_options(self)




    def set_index_options(self):

        localctx = TSqlParser.Set_index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_set_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6907
            self.match(TSqlParser.SET)
            self.state = 6908
            self.match(TSqlParser.LR_BRACKET)
            self.state = 6909
            self.set_index_option()
            self.state = 6914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 6910
                self.match(TSqlParser.COMMA)
                self.state = 6911
                self.set_index_option()
                self.state = 6916
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6917
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_index_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.delay = None # Token

        def ALLOW_ROW_LOCKS(self):
            return self.getToken(TSqlParser.ALLOW_ROW_LOCKS, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def ALLOW_PAGE_LOCKS(self):
            return self.getToken(TSqlParser.ALLOW_PAGE_LOCKS, 0)

        def OPTIMIZE_FOR_SEQUENTIAL_KEY(self):
            return self.getToken(TSqlParser.OPTIMIZE_FOR_SEQUENTIAL_KEY, 0)

        def IGNORE_DUP_KEY(self):
            return self.getToken(TSqlParser.IGNORE_DUP_KEY, 0)

        def STATISTICS_NORECOMPUTE(self):
            return self.getToken(TSqlParser.STATISTICS_NORECOMPUTE, 0)

        def COMPRESSION_DELAY(self):
            return self.getToken(TSqlParser.COMPRESSION_DELAY, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def MINUTES(self):
            return self.getToken(TSqlParser.MINUTES, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_set_index_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_index_option" ):
                listener.enterSet_index_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_index_option" ):
                listener.exitSet_index_option(self)




    def set_index_option(self):

        localctx = TSqlParser.Set_index_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_set_index_option)
        self._la = 0 # Token type
        try:
            self.state = 6940
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6919
                self.match(TSqlParser.ALLOW_ROW_LOCKS)
                self.state = 6920
                self.match(TSqlParser.EQUAL)
                self.state = 6921
                self.on_off()
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6922
                self.match(TSqlParser.ALLOW_PAGE_LOCKS)
                self.state = 6923
                self.match(TSqlParser.EQUAL)
                self.state = 6924
                self.on_off()
                pass
            elif token in [663]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6925
                self.match(TSqlParser.OPTIMIZE_FOR_SEQUENTIAL_KEY)
                self.state = 6926
                self.match(TSqlParser.EQUAL)
                self.state = 6927
                self.on_off()
                pass
            elif token in [433]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6928
                self.match(TSqlParser.IGNORE_DUP_KEY)
                self.state = 6929
                self.match(TSqlParser.EQUAL)
                self.state = 6930
                self.on_off()
                pass
            elif token in [933]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6931
                self.match(TSqlParser.STATISTICS_NORECOMPUTE)
                self.state = 6932
                self.match(TSqlParser.EQUAL)
                self.state = 6933
                self.on_off()
                pass
            elif token in [167]:
                self.enterOuterAlt(localctx, 6)
                self.state = 6934
                self.match(TSqlParser.COMPRESSION_DELAY)
                self.state = 6935
                self.match(TSqlParser.EQUAL)
                self.state = 6936
                localctx.delay = self.match(TSqlParser.DECIMAL)
                self.state = 6938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==569:
                    self.state = 6937
                    self.match(TSqlParser.MINUTES)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rebuild_partitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REBUILD(self):
            return self.getToken(TSqlParser.REBUILD, 0)

        def PARTITION(self):
            return self.getToken(TSqlParser.PARTITION, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def rebuild_index_options(self):
            return self.getTypedRuleContext(TSqlParser.Rebuild_index_optionsContext,0)


        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def single_partition_rebuild_index_options(self):
            return self.getTypedRuleContext(TSqlParser.Single_partition_rebuild_index_optionsContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_rebuild_partition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRebuild_partition" ):
                listener.enterRebuild_partition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRebuild_partition" ):
                listener.exitRebuild_partition(self)




    def rebuild_partition(self):

        localctx = TSqlParser.Rebuild_partitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_rebuild_partition)
        try:
            self.state = 6958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,870,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6942
                self.match(TSqlParser.REBUILD)
                self.state = 6946
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,867,self._ctx)
                if la_ == 1:
                    self.state = 6943
                    self.match(TSqlParser.PARTITION)
                    self.state = 6944
                    self.match(TSqlParser.EQUAL)
                    self.state = 6945
                    self.match(TSqlParser.ALL)


                self.state = 6949
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,868,self._ctx)
                if la_ == 1:
                    self.state = 6948
                    self.rebuild_index_options()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6951
                self.match(TSqlParser.REBUILD)
                self.state = 6952
                self.match(TSqlParser.PARTITION)
                self.state = 6953
                self.match(TSqlParser.EQUAL)
                self.state = 6954
                self.match(TSqlParser.DECIMAL)
                self.state = 6956
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,869,self._ctx)
                if la_ == 1:
                    self.state = 6955
                    self.single_partition_rebuild_index_options()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rebuild_index_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def rebuild_index_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Rebuild_index_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Rebuild_index_optionContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_rebuild_index_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRebuild_index_options" ):
                listener.enterRebuild_index_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRebuild_index_options" ):
                listener.exitRebuild_index_options(self)




    def rebuild_index_options(self):

        localctx = TSqlParser.Rebuild_index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_rebuild_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6960
            self.match(TSqlParser.WITH)
            self.state = 6961
            self.match(TSqlParser.LR_BRACKET)
            self.state = 6962
            self.rebuild_index_option()
            self.state = 6967
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 6963
                self.match(TSqlParser.COMMA)
                self.state = 6964
                self.rebuild_index_option()
                self.state = 6969
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6970
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rebuild_index_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.times = None # Token
            self.max_degree_of_parallelism = None # Token

        def PAD_INDEX(self):
            return self.getToken(TSqlParser.PAD_INDEX, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def FILLFACTOR(self):
            return self.getToken(TSqlParser.FILLFACTOR, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def SORT_IN_TEMPDB(self):
            return self.getToken(TSqlParser.SORT_IN_TEMPDB, 0)

        def IGNORE_DUP_KEY(self):
            return self.getToken(TSqlParser.IGNORE_DUP_KEY, 0)

        def STATISTICS_NORECOMPUTE(self):
            return self.getToken(TSqlParser.STATISTICS_NORECOMPUTE, 0)

        def STATISTICS_INCREMENTAL(self):
            return self.getToken(TSqlParser.STATISTICS_INCREMENTAL, 0)

        def ONLINE(self):
            return self.getToken(TSqlParser.ONLINE, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def low_priority_lock_wait(self):
            return self.getTypedRuleContext(TSqlParser.Low_priority_lock_waitContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def RESUMABLE(self):
            return self.getToken(TSqlParser.RESUMABLE, 0)

        def MAX_DURATION(self):
            return self.getToken(TSqlParser.MAX_DURATION, 0)

        def MINUTES(self):
            return self.getToken(TSqlParser.MINUTES, 0)

        def ALLOW_ROW_LOCKS(self):
            return self.getToken(TSqlParser.ALLOW_ROW_LOCKS, 0)

        def ALLOW_PAGE_LOCKS(self):
            return self.getToken(TSqlParser.ALLOW_PAGE_LOCKS, 0)

        def MAXDOP(self):
            return self.getToken(TSqlParser.MAXDOP, 0)

        def DATA_COMPRESSION(self):
            return self.getToken(TSqlParser.DATA_COMPRESSION, 0)

        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def ROW(self):
            return self.getToken(TSqlParser.ROW, 0)

        def PAGE(self):
            return self.getToken(TSqlParser.PAGE, 0)

        def COLUMNSTORE(self):
            return self.getToken(TSqlParser.COLUMNSTORE, 0)

        def COLUMNSTORE_ARCHIVE(self):
            return self.getToken(TSqlParser.COLUMNSTORE_ARCHIVE, 0)

        def on_partitions(self):
            return self.getTypedRuleContext(TSqlParser.On_partitionsContext,0)


        def XML_COMPRESSION(self):
            return self.getToken(TSqlParser.XML_COMPRESSION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_rebuild_index_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRebuild_index_option" ):
                listener.enterRebuild_index_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRebuild_index_option" ):
                listener.exitRebuild_index_option(self)




    def rebuild_index_option(self):

        localctx = TSqlParser.Rebuild_index_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_rebuild_index_option)
        self._la = 0 # Token type
        try:
            self.state = 7032
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [676]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6972
                self.match(TSqlParser.PAD_INDEX)
                self.state = 6973
                self.match(TSqlParser.EQUAL)
                self.state = 6974
                self.on_off()
                pass
            elif token in [357]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6975
                self.match(TSqlParser.FILLFACTOR)
                self.state = 6976
                self.match(TSqlParser.EQUAL)
                self.state = 6977
                self.match(TSqlParser.DECIMAL)
                pass
            elif token in [911]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6978
                self.match(TSqlParser.SORT_IN_TEMPDB)
                self.state = 6979
                self.match(TSqlParser.EQUAL)
                self.state = 6980
                self.on_off()
                pass
            elif token in [433]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6981
                self.match(TSqlParser.IGNORE_DUP_KEY)
                self.state = 6982
                self.match(TSqlParser.EQUAL)
                self.state = 6983
                self.on_off()
                pass
            elif token in [933]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6984
                self.match(TSqlParser.STATISTICS_NORECOMPUTE)
                self.state = 6985
                self.match(TSqlParser.EQUAL)
                self.state = 6986
                self.on_off()
                pass
            elif token in [932]:
                self.enterOuterAlt(localctx, 6)
                self.state = 6987
                self.match(TSqlParser.STATISTICS_INCREMENTAL)
                self.state = 6988
                self.match(TSqlParser.EQUAL)
                self.state = 6989
                self.on_off()
                pass
            elif token in [650]:
                self.enterOuterAlt(localctx, 7)
                self.state = 6990
                self.match(TSqlParser.ONLINE)
                self.state = 6991
                self.match(TSqlParser.EQUAL)
                self.state = 7000
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [649]:
                    self.state = 6992
                    self.match(TSqlParser.ON)
                    self.state = 6997
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1192:
                        self.state = 6993
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 6994
                        self.low_priority_lock_wait()
                        self.state = 6995
                        self.match(TSqlParser.RR_BRACKET)


                    pass
                elif token in [643]:
                    self.state = 6999
                    self.match(TSqlParser.OFF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [807]:
                self.enterOuterAlt(localctx, 8)
                self.state = 7002
                self.match(TSqlParser.RESUMABLE)
                self.state = 7003
                self.match(TSqlParser.EQUAL)
                self.state = 7004
                self.on_off()
                pass
            elif token in [546]:
                self.enterOuterAlt(localctx, 9)
                self.state = 7005
                self.match(TSqlParser.MAX_DURATION)
                self.state = 7006
                self.match(TSqlParser.EQUAL)
                self.state = 7007
                localctx.times = self.match(TSqlParser.DECIMAL)
                self.state = 7009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==569:
                    self.state = 7008
                    self.match(TSqlParser.MINUTES)


                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 10)
                self.state = 7011
                self.match(TSqlParser.ALLOW_ROW_LOCKS)
                self.state = 7012
                self.match(TSqlParser.EQUAL)
                self.state = 7013
                self.on_off()
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 11)
                self.state = 7014
                self.match(TSqlParser.ALLOW_PAGE_LOCKS)
                self.state = 7015
                self.match(TSqlParser.EQUAL)
                self.state = 7016
                self.on_off()
                pass
            elif token in [538]:
                self.enterOuterAlt(localctx, 12)
                self.state = 7017
                self.match(TSqlParser.MAXDOP)
                self.state = 7018
                self.match(TSqlParser.EQUAL)
                self.state = 7019
                localctx.max_degree_of_parallelism = self.match(TSqlParser.DECIMAL)
                pass
            elif token in [223]:
                self.enterOuterAlt(localctx, 13)
                self.state = 7020
                self.match(TSqlParser.DATA_COMPRESSION)
                self.state = 7021
                self.match(TSqlParser.EQUAL)
                self.state = 7022
                _la = self._input.LA(1)
                if not(_la==156 or _la==157 or _la==608 or _la==677 or _la==824):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==649:
                    self.state = 7023
                    self.on_partitions()


                pass
            elif token in [1078]:
                self.enterOuterAlt(localctx, 14)
                self.state = 7026
                self.match(TSqlParser.XML_COMPRESSION)
                self.state = 7027
                self.match(TSqlParser.EQUAL)
                self.state = 7028
                self.on_off()
                self.state = 7030
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==649:
                    self.state = 7029
                    self.on_partitions()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_partition_rebuild_index_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def single_partition_rebuild_index_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Single_partition_rebuild_index_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Single_partition_rebuild_index_optionContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_single_partition_rebuild_index_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_partition_rebuild_index_options" ):
                listener.enterSingle_partition_rebuild_index_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_partition_rebuild_index_options" ):
                listener.exitSingle_partition_rebuild_index_options(self)




    def single_partition_rebuild_index_options(self):

        localctx = TSqlParser.Single_partition_rebuild_index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_single_partition_rebuild_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7034
            self.match(TSqlParser.WITH)
            self.state = 7035
            self.match(TSqlParser.LR_BRACKET)
            self.state = 7036
            self.single_partition_rebuild_index_option()
            self.state = 7041
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 7037
                self.match(TSqlParser.COMMA)
                self.state = 7038
                self.single_partition_rebuild_index_option()
                self.state = 7043
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7044
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_partition_rebuild_index_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.max_degree_of_parallelism = None # Token

        def SORT_IN_TEMPDB(self):
            return self.getToken(TSqlParser.SORT_IN_TEMPDB, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def MAXDOP(self):
            return self.getToken(TSqlParser.MAXDOP, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def RESUMABLE(self):
            return self.getToken(TSqlParser.RESUMABLE, 0)

        def DATA_COMPRESSION(self):
            return self.getToken(TSqlParser.DATA_COMPRESSION, 0)

        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def ROW(self):
            return self.getToken(TSqlParser.ROW, 0)

        def PAGE(self):
            return self.getToken(TSqlParser.PAGE, 0)

        def COLUMNSTORE(self):
            return self.getToken(TSqlParser.COLUMNSTORE, 0)

        def COLUMNSTORE_ARCHIVE(self):
            return self.getToken(TSqlParser.COLUMNSTORE_ARCHIVE, 0)

        def on_partitions(self):
            return self.getTypedRuleContext(TSqlParser.On_partitionsContext,0)


        def XML_COMPRESSION(self):
            return self.getToken(TSqlParser.XML_COMPRESSION, 0)

        def ONLINE(self):
            return self.getToken(TSqlParser.ONLINE, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def low_priority_lock_wait(self):
            return self.getTypedRuleContext(TSqlParser.Low_priority_lock_waitContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_single_partition_rebuild_index_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_partition_rebuild_index_option" ):
                listener.enterSingle_partition_rebuild_index_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_partition_rebuild_index_option" ):
                listener.exitSingle_partition_rebuild_index_option(self)




    def single_partition_rebuild_index_option(self):

        localctx = TSqlParser.Single_partition_rebuild_index_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_single_partition_rebuild_index_option)
        self._la = 0 # Token type
        try:
            self.state = 7079
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [911]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7046
                self.match(TSqlParser.SORT_IN_TEMPDB)
                self.state = 7047
                self.match(TSqlParser.EQUAL)
                self.state = 7048
                self.on_off()
                pass
            elif token in [538]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7049
                self.match(TSqlParser.MAXDOP)
                self.state = 7050
                self.match(TSqlParser.EQUAL)
                self.state = 7051
                localctx.max_degree_of_parallelism = self.match(TSqlParser.DECIMAL)
                pass
            elif token in [807]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7052
                self.match(TSqlParser.RESUMABLE)
                self.state = 7053
                self.match(TSqlParser.EQUAL)
                self.state = 7054
                self.on_off()
                pass
            elif token in [223]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7055
                self.match(TSqlParser.DATA_COMPRESSION)
                self.state = 7056
                self.match(TSqlParser.EQUAL)
                self.state = 7057
                _la = self._input.LA(1)
                if not(_la==156 or _la==157 or _la==608 or _la==677 or _la==824):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==649:
                    self.state = 7058
                    self.on_partitions()


                pass
            elif token in [1078]:
                self.enterOuterAlt(localctx, 5)
                self.state = 7061
                self.match(TSqlParser.XML_COMPRESSION)
                self.state = 7062
                self.match(TSqlParser.EQUAL)
                self.state = 7063
                self.on_off()
                self.state = 7065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==649:
                    self.state = 7064
                    self.on_partitions()


                pass
            elif token in [650]:
                self.enterOuterAlt(localctx, 6)
                self.state = 7067
                self.match(TSqlParser.ONLINE)
                self.state = 7068
                self.match(TSqlParser.EQUAL)
                self.state = 7077
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [649]:
                    self.state = 7069
                    self.match(TSqlParser.ON)
                    self.state = 7074
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1192:
                        self.state = 7070
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 7071
                        self.low_priority_lock_wait()
                        self.state = 7072
                        self.match(TSqlParser.RR_BRACKET)


                    pass
                elif token in [643]:
                    self.state = 7076
                    self.match(TSqlParser.OFF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_partitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.partition_number = None # Token
            self.to_partition_number = None # Token

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def PARTITIONS(self):
            return self.getToken(TSqlParser.PARTITIONS, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TO)
            else:
                return self.getToken(TSqlParser.TO, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_on_partitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_partitions" ):
                listener.enterOn_partitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_partitions" ):
                listener.exitOn_partitions(self)




    def on_partitions(self):

        localctx = TSqlParser.On_partitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_on_partitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7081
            self.match(TSqlParser.ON)
            self.state = 7082
            self.match(TSqlParser.PARTITIONS)
            self.state = 7083
            self.match(TSqlParser.LR_BRACKET)
            self.state = 7084
            localctx.partition_number = self.match(TSqlParser.DECIMAL)
            self.state = 7087
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==986:
                self.state = 7085
                self.match(TSqlParser.TO)
                self.state = 7086
                localctx.to_partition_number = self.match(TSqlParser.DECIMAL)


            self.state = 7097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 7089
                self.match(TSqlParser.COMMA)
                self.state = 7090
                localctx.partition_number = self.match(TSqlParser.DECIMAL)
                self.state = 7093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==986:
                    self.state = 7091
                    self.match(TSqlParser.TO)
                    self.state = 7092
                    localctx.to_partition_number = self.match(TSqlParser.DECIMAL)


                self.state = 7099
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7100
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_columnstore_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def CLUSTERED(self):
            return self.getToken(TSqlParser.CLUSTERED, 0)

        def COLUMNSTORE(self):
            return self.getToken(TSqlParser.COLUMNSTORE, 0)

        def INDEX(self):
            return self.getToken(TSqlParser.INDEX, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def create_columnstore_index_options(self):
            return self.getTypedRuleContext(TSqlParser.Create_columnstore_index_optionsContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_columnstore_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_columnstore_index" ):
                listener.enterCreate_columnstore_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_columnstore_index" ):
                listener.exitCreate_columnstore_index(self)




    def create_columnstore_index(self):

        localctx = TSqlParser.Create_columnstore_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_create_columnstore_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7102
            self.match(TSqlParser.CREATE)
            self.state = 7103
            self.match(TSqlParser.CLUSTERED)
            self.state = 7104
            self.match(TSqlParser.COLUMNSTORE)
            self.state = 7105
            self.match(TSqlParser.INDEX)
            self.state = 7106
            self.id_()
            self.state = 7107
            self.match(TSqlParser.ON)
            self.state = 7108
            self.table_name()
            self.state = 7110
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,887,self._ctx)
            if la_ == 1:
                self.state = 7109
                self.create_columnstore_index_options()


            self.state = 7114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==649:
                self.state = 7112
                self.match(TSqlParser.ON)
                self.state = 7113
                self.id_()


            self.state = 7117
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,889,self._ctx)
            if la_ == 1:
                self.state = 7116
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_columnstore_index_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def columnstore_index_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Columnstore_index_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Columnstore_index_optionContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_columnstore_index_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_columnstore_index_options" ):
                listener.enterCreate_columnstore_index_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_columnstore_index_options" ):
                listener.exitCreate_columnstore_index_options(self)




    def create_columnstore_index_options(self):

        localctx = TSqlParser.Create_columnstore_index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_create_columnstore_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7119
            self.match(TSqlParser.WITH)
            self.state = 7120
            self.match(TSqlParser.LR_BRACKET)
            self.state = 7121
            self.columnstore_index_option()
            self.state = 7126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 7122
                self.match(TSqlParser.COMMA)
                self.state = 7123
                self.columnstore_index_option()
                self.state = 7128
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7129
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Columnstore_index_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.max_degree_of_parallelism = None # Token
            self.delay = None # Token

        def DROP_EXISTING(self):
            return self.getToken(TSqlParser.DROP_EXISTING, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def MAXDOP(self):
            return self.getToken(TSqlParser.MAXDOP, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def ONLINE(self):
            return self.getToken(TSqlParser.ONLINE, 0)

        def COMPRESSION_DELAY(self):
            return self.getToken(TSqlParser.COMPRESSION_DELAY, 0)

        def MINUTES(self):
            return self.getToken(TSqlParser.MINUTES, 0)

        def DATA_COMPRESSION(self):
            return self.getToken(TSqlParser.DATA_COMPRESSION, 0)

        def COLUMNSTORE(self):
            return self.getToken(TSqlParser.COLUMNSTORE, 0)

        def COLUMNSTORE_ARCHIVE(self):
            return self.getToken(TSqlParser.COLUMNSTORE_ARCHIVE, 0)

        def on_partitions(self):
            return self.getTypedRuleContext(TSqlParser.On_partitionsContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_columnstore_index_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnstore_index_option" ):
                listener.enterColumnstore_index_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnstore_index_option" ):
                listener.exitColumnstore_index_option(self)




    def columnstore_index_option(self):

        localctx = TSqlParser.Columnstore_index_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_columnstore_index_option)
        self._la = 0 # Token type
        try:
            self.state = 7152
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [282]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7131
                self.match(TSqlParser.DROP_EXISTING)
                self.state = 7132
                self.match(TSqlParser.EQUAL)
                self.state = 7133
                self.on_off()
                pass
            elif token in [538]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7134
                self.match(TSqlParser.MAXDOP)
                self.state = 7135
                self.match(TSqlParser.EQUAL)
                self.state = 7136
                localctx.max_degree_of_parallelism = self.match(TSqlParser.DECIMAL)
                pass
            elif token in [650]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7137
                self.match(TSqlParser.ONLINE)
                self.state = 7138
                self.match(TSqlParser.EQUAL)
                self.state = 7139
                self.on_off()
                pass
            elif token in [167]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7140
                self.match(TSqlParser.COMPRESSION_DELAY)
                self.state = 7141
                self.match(TSqlParser.EQUAL)
                self.state = 7142
                localctx.delay = self.match(TSqlParser.DECIMAL)
                self.state = 7144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==569:
                    self.state = 7143
                    self.match(TSqlParser.MINUTES)


                pass
            elif token in [223]:
                self.enterOuterAlt(localctx, 5)
                self.state = 7146
                self.match(TSqlParser.DATA_COMPRESSION)
                self.state = 7147
                self.match(TSqlParser.EQUAL)
                self.state = 7148
                _la = self._input.LA(1)
                if not(_la==156 or _la==157):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==649:
                    self.state = 7149
                    self.on_partitions()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_nonclustered_columnstore_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def COLUMNSTORE(self):
            return self.getToken(TSqlParser.COLUMNSTORE, 0)

        def INDEX(self):
            return self.getToken(TSqlParser.INDEX, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_name_list_with_order(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_list_with_orderContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def NONCLUSTERED(self):
            return self.getToken(TSqlParser.NONCLUSTERED, 0)

        def WHERE(self):
            return self.getToken(TSqlParser.WHERE, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def create_columnstore_index_options(self):
            return self.getTypedRuleContext(TSqlParser.Create_columnstore_index_optionsContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_nonclustered_columnstore_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_nonclustered_columnstore_index" ):
                listener.enterCreate_nonclustered_columnstore_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_nonclustered_columnstore_index" ):
                listener.exitCreate_nonclustered_columnstore_index(self)




    def create_nonclustered_columnstore_index(self):

        localctx = TSqlParser.Create_nonclustered_columnstore_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_create_nonclustered_columnstore_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7154
            self.match(TSqlParser.CREATE)
            self.state = 7156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==607:
                self.state = 7155
                self.match(TSqlParser.NONCLUSTERED)


            self.state = 7158
            self.match(TSqlParser.COLUMNSTORE)
            self.state = 7159
            self.match(TSqlParser.INDEX)
            self.state = 7160
            self.id_()
            self.state = 7161
            self.match(TSqlParser.ON)
            self.state = 7162
            self.table_name()
            self.state = 7163
            self.match(TSqlParser.LR_BRACKET)
            self.state = 7164
            self.column_name_list_with_order()
            self.state = 7165
            self.match(TSqlParser.RR_BRACKET)
            self.state = 7168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1060:
                self.state = 7166
                self.match(TSqlParser.WHERE)
                self.state = 7167
                self.search_condition(0)


            self.state = 7171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,896,self._ctx)
            if la_ == 1:
                self.state = 7170
                self.create_columnstore_index_options()


            self.state = 7175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==649:
                self.state = 7173
                self.match(TSqlParser.ON)
                self.state = 7174
                self.id_()


            self.state = 7178
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,898,self._ctx)
            if la_ == 1:
                self.state = 7177
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_xml_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def XML(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.XML)
            else:
                return self.getToken(TSqlParser.XML, i)

        def INDEX(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.INDEX)
            else:
                return self.getToken(TSqlParser.INDEX, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def PRIMARY(self):
            return self.getToken(TSqlParser.PRIMARY, 0)

        def USING(self):
            return self.getToken(TSqlParser.USING, 0)

        def xml_index_options(self):
            return self.getTypedRuleContext(TSqlParser.Xml_index_optionsContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def VALUE(self):
            return self.getToken(TSqlParser.VALUE, 0)

        def PATH(self):
            return self.getToken(TSqlParser.PATH, 0)

        def PROPERTY(self):
            return self.getToken(TSqlParser.PROPERTY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_xml_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_xml_index" ):
                listener.enterCreate_xml_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_xml_index" ):
                listener.exitCreate_xml_index(self)




    def create_xml_index(self):

        localctx = TSqlParser.Create_xml_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_create_xml_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7180
            self.match(TSqlParser.CREATE)
            self.state = 7182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==717:
                self.state = 7181
                self.match(TSqlParser.PRIMARY)


            self.state = 7184
            self.match(TSqlParser.XML)
            self.state = 7185
            self.match(TSqlParser.INDEX)
            self.state = 7186
            self.id_()
            self.state = 7187
            self.match(TSqlParser.ON)
            self.state = 7188
            self.table_name()
            self.state = 7189
            self.match(TSqlParser.LR_BRACKET)
            self.state = 7190
            self.id_()
            self.state = 7191
            self.match(TSqlParser.RR_BRACKET)
            self.state = 7202
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,902,self._ctx)
            if la_ == 1:
                self.state = 7192
                self.match(TSqlParser.USING)
                self.state = 7193
                self.match(TSqlParser.XML)
                self.state = 7194
                self.match(TSqlParser.INDEX)
                self.state = 7195
                self.id_()
                self.state = 7200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==363:
                    self.state = 7196
                    self.match(TSqlParser.FOR)
                    self.state = 7198
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,900,self._ctx)
                    if la_ == 1:
                        self.state = 7197
                        _la = self._input.LA(1)
                        if not(_la==691 or _la==732 or _la==1041):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()






            self.state = 7205
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,903,self._ctx)
            if la_ == 1:
                self.state = 7204
                self.xml_index_options()


            self.state = 7208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,904,self._ctx)
            if la_ == 1:
                self.state = 7207
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_index_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def xml_index_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Xml_index_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Xml_index_optionContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_xml_index_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_index_options" ):
                listener.enterXml_index_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_index_options" ):
                listener.exitXml_index_options(self)




    def xml_index_options(self):

        localctx = TSqlParser.Xml_index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_xml_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7210
            self.match(TSqlParser.WITH)
            self.state = 7211
            self.match(TSqlParser.LR_BRACKET)
            self.state = 7212
            self.xml_index_option()
            self.state = 7217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 7213
                self.match(TSqlParser.COMMA)
                self.state = 7214
                self.xml_index_option()
                self.state = 7219
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7220
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_index_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.max_degree_of_parallelism = None # Token

        def PAD_INDEX(self):
            return self.getToken(TSqlParser.PAD_INDEX, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def FILLFACTOR(self):
            return self.getToken(TSqlParser.FILLFACTOR, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def SORT_IN_TEMPDB(self):
            return self.getToken(TSqlParser.SORT_IN_TEMPDB, 0)

        def IGNORE_DUP_KEY(self):
            return self.getToken(TSqlParser.IGNORE_DUP_KEY, 0)

        def DROP_EXISTING(self):
            return self.getToken(TSqlParser.DROP_EXISTING, 0)

        def ONLINE(self):
            return self.getToken(TSqlParser.ONLINE, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def low_priority_lock_wait(self):
            return self.getTypedRuleContext(TSqlParser.Low_priority_lock_waitContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def ALLOW_ROW_LOCKS(self):
            return self.getToken(TSqlParser.ALLOW_ROW_LOCKS, 0)

        def ALLOW_PAGE_LOCKS(self):
            return self.getToken(TSqlParser.ALLOW_PAGE_LOCKS, 0)

        def MAXDOP(self):
            return self.getToken(TSqlParser.MAXDOP, 0)

        def XML_COMPRESSION(self):
            return self.getToken(TSqlParser.XML_COMPRESSION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_xml_index_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_index_option" ):
                listener.enterXml_index_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_index_option" ):
                listener.exitXml_index_option(self)




    def xml_index_option(self):

        localctx = TSqlParser.Xml_index_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_xml_index_option)
        self._la = 0 # Token type
        try:
            self.state = 7261
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [676]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7222
                self.match(TSqlParser.PAD_INDEX)
                self.state = 7223
                self.match(TSqlParser.EQUAL)
                self.state = 7224
                self.on_off()
                pass
            elif token in [357]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7225
                self.match(TSqlParser.FILLFACTOR)
                self.state = 7226
                self.match(TSqlParser.EQUAL)
                self.state = 7227
                self.match(TSqlParser.DECIMAL)
                pass
            elif token in [911]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7228
                self.match(TSqlParser.SORT_IN_TEMPDB)
                self.state = 7229
                self.match(TSqlParser.EQUAL)
                self.state = 7230
                self.on_off()
                pass
            elif token in [433]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7231
                self.match(TSqlParser.IGNORE_DUP_KEY)
                self.state = 7232
                self.match(TSqlParser.EQUAL)
                self.state = 7233
                self.on_off()
                pass
            elif token in [282]:
                self.enterOuterAlt(localctx, 5)
                self.state = 7234
                self.match(TSqlParser.DROP_EXISTING)
                self.state = 7235
                self.match(TSqlParser.EQUAL)
                self.state = 7236
                self.on_off()
                pass
            elif token in [650]:
                self.enterOuterAlt(localctx, 6)
                self.state = 7237
                self.match(TSqlParser.ONLINE)
                self.state = 7238
                self.match(TSqlParser.EQUAL)
                self.state = 7247
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [649]:
                    self.state = 7239
                    self.match(TSqlParser.ON)
                    self.state = 7244
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1192:
                        self.state = 7240
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 7241
                        self.low_priority_lock_wait()
                        self.state = 7242
                        self.match(TSqlParser.RR_BRACKET)


                    pass
                elif token in [643]:
                    self.state = 7246
                    self.match(TSqlParser.OFF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 7)
                self.state = 7249
                self.match(TSqlParser.ALLOW_ROW_LOCKS)
                self.state = 7250
                self.match(TSqlParser.EQUAL)
                self.state = 7251
                self.on_off()
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 8)
                self.state = 7252
                self.match(TSqlParser.ALLOW_PAGE_LOCKS)
                self.state = 7253
                self.match(TSqlParser.EQUAL)
                self.state = 7254
                self.on_off()
                pass
            elif token in [538]:
                self.enterOuterAlt(localctx, 9)
                self.state = 7255
                self.match(TSqlParser.MAXDOP)
                self.state = 7256
                self.match(TSqlParser.EQUAL)
                self.state = 7257
                localctx.max_degree_of_parallelism = self.match(TSqlParser.DECIMAL)
                pass
            elif token in [1078]:
                self.enterOuterAlt(localctx, 10)
                self.state = 7258
                self.match(TSqlParser.XML_COMPRESSION)
                self.state = 7259
                self.match(TSqlParser.EQUAL)
                self.state = 7260
                self.on_off()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_or_alter_procedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.proc = None # Token
            self.procName = None # Func_proc_name_schemaContext

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def func_proc_name_schema(self):
            return self.getTypedRuleContext(TSqlParser.Func_proc_name_schemaContext,0)


        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def PROC(self):
            return self.getToken(TSqlParser.PROC, 0)

        def PROCEDURE(self):
            return self.getToken(TSqlParser.PROCEDURE, 0)

        def as_external_name(self):
            return self.getTypedRuleContext(TSqlParser.As_external_nameContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def procedure_param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Procedure_paramContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Procedure_paramContext,i)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def procedure_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Procedure_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Procedure_optionContext,i)


        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(TSqlParser.REPLICATION, 0)

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def sql_clauses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Sql_clausesContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Sql_clausesContext,i)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def OR(self):
            return self.getToken(TSqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(TSqlParser.REPLACE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_or_alter_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_or_alter_procedure" ):
                listener.enterCreate_or_alter_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_or_alter_procedure" ):
                listener.exitCreate_or_alter_procedure(self)




    def create_or_alter_procedure(self):

        localctx = TSqlParser.Create_or_alter_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_create_or_alter_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7269
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [197]:
                self.state = 7263
                self.match(TSqlParser.CREATE)
                self.state = 7266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==665:
                    self.state = 7264
                    self.match(TSqlParser.OR)
                    self.state = 7265
                    _la = self._input.LA(1)
                    if not(_la==35 or _la==788):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [35]:
                self.state = 7268
                self.match(TSqlParser.ALTER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 7271
            localctx.proc = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==726 or _la==728):
                localctx.proc = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7272
            localctx.procName = self.func_proc_name_schema()
            self.state = 7275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1195:
                self.state = 7273
                self.match(TSqlParser.SEMI)
                self.state = 7274
                self.match(TSqlParser.DECIMAL)


            self.state = 7291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1166 or _la==1192:
                self.state = 7278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1192:
                    self.state = 7277
                    self.match(TSqlParser.LR_BRACKET)


                self.state = 7280
                self.procedure_param()
                self.state = 7285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 7281
                    self.match(TSqlParser.COMMA)
                    self.state = 7282
                    self.procedure_param()
                    self.state = 7287
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1193:
                    self.state = 7288
                    self.match(TSqlParser.RR_BRACKET)




            self.state = 7302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1063:
                self.state = 7293
                self.match(TSqlParser.WITH)
                self.state = 7294
                self.procedure_option()
                self.state = 7299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 7295
                    self.match(TSqlParser.COMMA)
                    self.state = 7296
                    self.procedure_option()
                    self.state = 7301
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 7306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==363:
                self.state = 7304
                self.match(TSqlParser.FOR)
                self.state = 7305
                self.match(TSqlParser.REPLICATION)


            self.state = 7308
            self.match(TSqlParser.AS)
            self.state = 7316
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [329]:
                self.state = 7309
                self.as_external_name()
                pass
            elif token in [-1, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 280, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 653, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169, 1187, 1192, 1195]:
                self.state = 7313
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,919,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 7310
                        self.sql_clauses() 
                    self.state = 7315
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,919,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_external_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assembly_name = None # Id_Context
            self.class_name = None # Id_Context
            self.method_name = None # Id_Context

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_as_external_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_external_name" ):
                listener.enterAs_external_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_external_name" ):
                listener.exitAs_external_name(self)




    def as_external_name(self):

        localctx = TSqlParser.As_external_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_as_external_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7318
            self.match(TSqlParser.EXTERNAL)
            self.state = 7319
            self.match(TSqlParser.NAME)
            self.state = 7320
            localctx.assembly_name = self.id_()
            self.state = 7321
            self.match(TSqlParser.DOT)
            self.state = 7322
            localctx.class_name = self.id_()
            self.state = 7323
            self.match(TSqlParser.DOT)
            self.state = 7324
            localctx.method_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_or_alter_triggerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_or_alter_dml_trigger(self):
            return self.getTypedRuleContext(TSqlParser.Create_or_alter_dml_triggerContext,0)


        def create_or_alter_ddl_trigger(self):
            return self.getTypedRuleContext(TSqlParser.Create_or_alter_ddl_triggerContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_create_or_alter_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_or_alter_trigger" ):
                listener.enterCreate_or_alter_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_or_alter_trigger" ):
                listener.exitCreate_or_alter_trigger(self)




    def create_or_alter_trigger(self):

        localctx = TSqlParser.Create_or_alter_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_create_or_alter_trigger)
        try:
            self.state = 7328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,921,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7326
                self.create_or_alter_dml_trigger()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7327
                self.create_or_alter_ddl_trigger()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_or_alter_dml_triggerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRIGGER(self):
            return self.getToken(TSqlParser.TRIGGER, 0)

        def simple_name(self):
            return self.getTypedRuleContext(TSqlParser.Simple_nameContext,0)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def dml_trigger_operation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Dml_trigger_operationContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Dml_trigger_operationContext,i)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FOR)
            else:
                return self.getToken(TSqlParser.FOR, i)

        def AFTER(self):
            return self.getToken(TSqlParser.AFTER, 0)

        def INSTEAD(self):
            return self.getToken(TSqlParser.INSTEAD, 0)

        def OF(self):
            return self.getToken(TSqlParser.OF, 0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.WITH)
            else:
                return self.getToken(TSqlParser.WITH, i)

        def dml_trigger_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Dml_trigger_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Dml_trigger_optionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def APPEND(self):
            return self.getToken(TSqlParser.APPEND, 0)

        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def REPLICATION(self):
            return self.getToken(TSqlParser.REPLICATION, 0)

        def sql_clauses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Sql_clausesContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Sql_clausesContext,i)


        def OR(self):
            return self.getToken(TSqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(TSqlParser.REPLACE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_or_alter_dml_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_or_alter_dml_trigger" ):
                listener.enterCreate_or_alter_dml_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_or_alter_dml_trigger" ):
                listener.exitCreate_or_alter_dml_trigger(self)




    def create_or_alter_dml_trigger(self):

        localctx = TSqlParser.Create_or_alter_dml_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_create_or_alter_dml_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7336
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [197]:
                self.state = 7330
                self.match(TSqlParser.CREATE)
                self.state = 7333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==665:
                    self.state = 7331
                    self.match(TSqlParser.OR)
                    self.state = 7332
                    _la = self._input.LA(1)
                    if not(_la==35 or _la==788):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [35]:
                self.state = 7335
                self.match(TSqlParser.ALTER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 7338
            self.match(TSqlParser.TRIGGER)
            self.state = 7339
            self.simple_name()
            self.state = 7340
            self.match(TSqlParser.ON)
            self.state = 7341
            self.table_name()
            self.state = 7351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1063:
                self.state = 7342
                self.match(TSqlParser.WITH)
                self.state = 7343
                self.dml_trigger_option()
                self.state = 7348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 7344
                    self.match(TSqlParser.COMMA)
                    self.state = 7345
                    self.dml_trigger_option()
                    self.state = 7350
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 7357
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [363]:
                self.state = 7353
                self.match(TSqlParser.FOR)
                pass
            elif token in [19]:
                self.state = 7354
                self.match(TSqlParser.AFTER)
                pass
            elif token in [459]:
                self.state = 7355
                self.match(TSqlParser.INSTEAD)
                self.state = 7356
                self.match(TSqlParser.OF)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 7359
            self.dml_trigger_operation()
            self.state = 7364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 7360
                self.match(TSqlParser.COMMA)
                self.state = 7361
                self.dml_trigger_operation()
                self.state = 7366
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1063:
                self.state = 7367
                self.match(TSqlParser.WITH)
                self.state = 7368
                self.match(TSqlParser.APPEND)


            self.state = 7374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==614:
                self.state = 7371
                self.match(TSqlParser.NOT)
                self.state = 7372
                self.match(TSqlParser.FOR)
                self.state = 7373
                self.match(TSqlParser.REPLICATION)


            self.state = 7376
            self.match(TSqlParser.AS)
            self.state = 7378 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 7377
                    self.sql_clauses()

                else:
                    raise NoViableAltException(self)
                self.state = 7380 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,930,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dml_trigger_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def execute_clause(self):
            return self.getTypedRuleContext(TSqlParser.Execute_clauseContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_dml_trigger_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_trigger_option" ):
                listener.enterDml_trigger_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_trigger_option" ):
                listener.exitDml_trigger_option(self)




    def dml_trigger_option(self):

        localctx = TSqlParser.Dml_trigger_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_dml_trigger_option)
        try:
            self.state = 7384
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [295]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7382
                self.match(TSqlParser.ENCRYPTION)
                pass
            elif token in [318]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7383
                self.execute_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dml_trigger_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(TSqlParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(TSqlParser.UPDATE, 0)

        def DELETE(self):
            return self.getToken(TSqlParser.DELETE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_dml_trigger_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_trigger_operation" ):
                listener.enterDml_trigger_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_trigger_operation" ):
                listener.exitDml_trigger_operation(self)




    def dml_trigger_operation(self):

        localctx = TSqlParser.Dml_trigger_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_dml_trigger_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7386
            _la = self._input.LA(1)
            if not(_la==252 or _la==457 or _la==1028):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_or_alter_ddl_triggerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRIGGER(self):
            return self.getToken(TSqlParser.TRIGGER, 0)

        def simple_name(self):
            return self.getTypedRuleContext(TSqlParser.Simple_nameContext,0)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def ddl_trigger_operation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Ddl_trigger_operationContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Ddl_trigger_operationContext,i)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def AFTER(self):
            return self.getToken(TSqlParser.AFTER, 0)

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def dml_trigger_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Dml_trigger_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Dml_trigger_optionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def sql_clauses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Sql_clausesContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Sql_clausesContext,i)


        def OR(self):
            return self.getToken(TSqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(TSqlParser.REPLACE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_or_alter_ddl_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_or_alter_ddl_trigger" ):
                listener.enterCreate_or_alter_ddl_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_or_alter_ddl_trigger" ):
                listener.exitCreate_or_alter_ddl_trigger(self)




    def create_or_alter_ddl_trigger(self):

        localctx = TSqlParser.Create_or_alter_ddl_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_create_or_alter_ddl_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7394
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [197]:
                self.state = 7388
                self.match(TSqlParser.CREATE)
                self.state = 7391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==665:
                    self.state = 7389
                    self.match(TSqlParser.OR)
                    self.state = 7390
                    _la = self._input.LA(1)
                    if not(_la==35 or _la==788):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [35]:
                self.state = 7393
                self.match(TSqlParser.ALTER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 7396
            self.match(TSqlParser.TRIGGER)
            self.state = 7397
            self.simple_name()
            self.state = 7398
            self.match(TSqlParser.ON)
            self.state = 7402
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22]:
                self.state = 7399
                self.match(TSqlParser.ALL)
                self.state = 7400
                self.match(TSqlParser.SERVER)
                pass
            elif token in [217]:
                self.state = 7401
                self.match(TSqlParser.DATABASE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 7413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1063:
                self.state = 7404
                self.match(TSqlParser.WITH)
                self.state = 7405
                self.dml_trigger_option()
                self.state = 7410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 7406
                    self.match(TSqlParser.COMMA)
                    self.state = 7407
                    self.dml_trigger_option()
                    self.state = 7412
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 7415
            _la = self._input.LA(1)
            if not(_la==19 or _la==363):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7416
            self.ddl_trigger_operation()
            self.state = 7421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 7417
                self.match(TSqlParser.COMMA)
                self.state = 7418
                self.ddl_trigger_operation()
                self.state = 7423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7424
            self.match(TSqlParser.AS)
            self.state = 7426 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 7425
                    self.sql_clauses()

                else:
                    raise NoViableAltException(self)
                self.state = 7428 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,938,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ddl_trigger_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_id(self):
            return self.getTypedRuleContext(TSqlParser.Simple_idContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_ddl_trigger_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdl_trigger_operation" ):
                listener.enterDdl_trigger_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdl_trigger_operation" ):
                listener.exitDdl_trigger_operation(self)




    def ddl_trigger_operation(self):

        localctx = TSqlParser.Ddl_trigger_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_ddl_trigger_operation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7430
            self.simple_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_or_alter_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.funcName = None # Func_proc_name_schemaContext

        def FUNCTION(self):
            return self.getToken(TSqlParser.FUNCTION, 0)

        def func_proc_name_schema(self):
            return self.getTypedRuleContext(TSqlParser.Func_proc_name_schemaContext,0)


        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def func_body_returns_select(self):
            return self.getTypedRuleContext(TSqlParser.Func_body_returns_selectContext,0)


        def func_body_returns_table(self):
            return self.getTypedRuleContext(TSqlParser.Func_body_returns_tableContext,0)


        def func_body_returns_scalar(self):
            return self.getTypedRuleContext(TSqlParser.Func_body_returns_scalarContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def procedure_param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Procedure_paramContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Procedure_paramContext,i)


        def OR(self):
            return self.getToken(TSqlParser.OR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_or_alter_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_or_alter_function" ):
                listener.enterCreate_or_alter_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_or_alter_function" ):
                listener.exitCreate_or_alter_function(self)




    def create_or_alter_function(self):

        localctx = TSqlParser.Create_or_alter_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_create_or_alter_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7438
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [197]:
                self.state = 7432
                self.match(TSqlParser.CREATE)
                self.state = 7435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==665:
                    self.state = 7433
                    self.match(TSqlParser.OR)
                    self.state = 7434
                    self.match(TSqlParser.ALTER)


                pass
            elif token in [35]:
                self.state = 7437
                self.match(TSqlParser.ALTER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 7440
            self.match(TSqlParser.FUNCTION)
            self.state = 7441
            localctx.funcName = self.func_proc_name_schema()
            self.state = 7455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,942,self._ctx)
            if la_ == 1:
                self.state = 7442
                self.match(TSqlParser.LR_BRACKET)
                self.state = 7443
                self.procedure_param()
                self.state = 7448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 7444
                    self.match(TSqlParser.COMMA)
                    self.state = 7445
                    self.procedure_param()
                    self.state = 7450
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7451
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.state = 7453
                self.match(TSqlParser.LR_BRACKET)
                self.state = 7454
                self.match(TSqlParser.RR_BRACKET)
                pass


            self.state = 7460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,943,self._ctx)
            if la_ == 1:
                self.state = 7457
                self.func_body_returns_select()
                pass

            elif la_ == 2:
                self.state = 7458
                self.func_body_returns_table()
                pass

            elif la_ == 3:
                self.state = 7459
                self.func_body_returns_scalar()
                pass


            self.state = 7463
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,944,self._ctx)
            if la_ == 1:
                self.state = 7462
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_body_returns_selectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(TSqlParser.RETURNS, 0)

        def TABLE(self):
            return self.getToken(TSqlParser.TABLE, 0)

        def as_external_name(self):
            return self.getTypedRuleContext(TSqlParser.As_external_nameContext,0)


        def RETURN(self):
            return self.getToken(TSqlParser.RETURN, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def function_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Function_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Function_optionContext,i)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def select_statement_standalone(self):
            return self.getTypedRuleContext(TSqlParser.Select_statement_standaloneContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_func_body_returns_select

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_body_returns_select" ):
                listener.enterFunc_body_returns_select(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_body_returns_select" ):
                listener.exitFunc_body_returns_select(self)




    def func_body_returns_select(self):

        localctx = TSqlParser.Func_body_returns_selectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_func_body_returns_select)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7465
            self.match(TSqlParser.RETURNS)
            self.state = 7466
            self.match(TSqlParser.TABLE)
            self.state = 7476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1063:
                self.state = 7467
                self.match(TSqlParser.WITH)
                self.state = 7468
                self.function_option()
                self.state = 7473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 7469
                    self.match(TSqlParser.COMMA)
                    self.state = 7470
                    self.function_option()
                    self.state = 7475
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 7479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 7478
                self.match(TSqlParser.AS)


            self.state = 7490
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [329]:
                self.state = 7481
                self.as_external_name()
                pass
            elif token in [811]:
                self.state = 7482
                self.match(TSqlParser.RETURN)
                self.state = 7488
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,948,self._ctx)
                if la_ == 1:
                    self.state = 7483
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 7484
                    self.select_statement_standalone()
                    self.state = 7485
                    self.match(TSqlParser.RR_BRACKET)
                    pass

                elif la_ == 2:
                    self.state = 7487
                    self.select_statement_standalone()
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_body_returns_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(TSqlParser.RETURNS, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def table_type_definition(self):
            return self.getTypedRuleContext(TSqlParser.Table_type_definitionContext,0)


        def as_external_name(self):
            return self.getTypedRuleContext(TSqlParser.As_external_nameContext,0)


        def BEGIN(self):
            return self.getToken(TSqlParser.BEGIN, 0)

        def RETURN(self):
            return self.getToken(TSqlParser.RETURN, 0)

        def END(self):
            return self.getToken(TSqlParser.END, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def function_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Function_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Function_optionContext,i)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def sql_clauses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Sql_clausesContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Sql_clausesContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SEMI)
            else:
                return self.getToken(TSqlParser.SEMI, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_func_body_returns_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_body_returns_table" ):
                listener.enterFunc_body_returns_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_body_returns_table" ):
                listener.exitFunc_body_returns_table(self)




    def func_body_returns_table(self):

        localctx = TSqlParser.Func_body_returns_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_func_body_returns_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7492
            self.match(TSqlParser.RETURNS)
            self.state = 7493
            self.match(TSqlParser.LOCAL_ID)
            self.state = 7494
            self.table_type_definition()
            self.state = 7504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1063:
                self.state = 7495
                self.match(TSqlParser.WITH)
                self.state = 7496
                self.function_option()
                self.state = 7501
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 7497
                    self.match(TSqlParser.COMMA)
                    self.state = 7498
                    self.function_option()
                    self.state = 7503
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 7507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 7506
                self.match(TSqlParser.AS)


            self.state = 7525
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [329]:
                self.state = 7509
                self.as_external_name()
                pass
            elif token in [90]:
                self.state = 7510
                self.match(TSqlParser.BEGIN)
                self.state = 7514
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,953,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 7511
                        self.sql_clauses() 
                    self.state = 7516
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,953,self._ctx)

                self.state = 7517
                self.match(TSqlParser.RETURN)
                self.state = 7519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1195:
                    self.state = 7518
                    self.match(TSqlParser.SEMI)


                self.state = 7521
                self.match(TSqlParser.END)
                self.state = 7523
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,955,self._ctx)
                if la_ == 1:
                    self.state = 7522
                    self.match(TSqlParser.SEMI)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_body_returns_scalarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ret = None # ExpressionContext

        def RETURNS(self):
            return self.getToken(TSqlParser.RETURNS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)


        def as_external_name(self):
            return self.getTypedRuleContext(TSqlParser.As_external_nameContext,0)


        def BEGIN(self):
            return self.getToken(TSqlParser.BEGIN, 0)

        def RETURN(self):
            return self.getToken(TSqlParser.RETURN, 0)

        def END(self):
            return self.getToken(TSqlParser.END, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def function_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Function_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Function_optionContext,i)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def sql_clauses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Sql_clausesContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Sql_clausesContext,i)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_func_body_returns_scalar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_body_returns_scalar" ):
                listener.enterFunc_body_returns_scalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_body_returns_scalar" ):
                listener.exitFunc_body_returns_scalar(self)




    def func_body_returns_scalar(self):

        localctx = TSqlParser.Func_body_returns_scalarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_func_body_returns_scalar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7527
            self.match(TSqlParser.RETURNS)
            self.state = 7528
            self.data_type()
            self.state = 7538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1063:
                self.state = 7529
                self.match(TSqlParser.WITH)
                self.state = 7530
                self.function_option()
                self.state = 7535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 7531
                    self.match(TSqlParser.COMMA)
                    self.state = 7532
                    self.function_option()
                    self.state = 7537
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 7541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 7540
                self.match(TSqlParser.AS)


            self.state = 7558
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [329]:
                self.state = 7543
                self.as_external_name()
                pass
            elif token in [90]:
                self.state = 7544
                self.match(TSqlParser.BEGIN)
                self.state = 7548
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,960,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 7545
                        self.sql_clauses() 
                    self.state = 7550
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,960,self._ctx)

                self.state = 7551
                self.match(TSqlParser.RETURN)
                self.state = 7552
                localctx.ret = self.expression(0)
                self.state = 7554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1195:
                    self.state = 7553
                    self.match(TSqlParser.SEMI)


                self.state = 7556
                self.match(TSqlParser.END)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_param_default_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_(self):
            return self.getToken(TSqlParser.NULL_, 0)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def constant(self):
            return self.getTypedRuleContext(TSqlParser.ConstantContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_procedure_param_default_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_param_default_value" ):
                listener.enterProcedure_param_default_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_param_default_value" ):
                listener.exitProcedure_param_default_value(self)




    def procedure_param_default_value(self):

        localctx = TSqlParser.Procedure_param_default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_procedure_param_default_value)
        try:
            self.state = 7564
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [630]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7560
                self.match(TSqlParser.NULL_)
                pass
            elif token in [243]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7561
                self.match(TSqlParser.DEFAULT)
                pass
            elif token in [1168, 1170, 1171, 1172, 1173, 1191, 1202, 1207]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7562
                self.constant()
                pass
            elif token in [1166]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7563
                self.match(TSqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_paramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_schema = None # Id_Context
            self.default_val = None # Procedure_param_default_valueContext

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def VARYING(self):
            return self.getToken(TSqlParser.VARYING, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def procedure_param_default_value(self):
            return self.getTypedRuleContext(TSqlParser.Procedure_param_default_valueContext,0)


        def OUT(self):
            return self.getToken(TSqlParser.OUT, 0)

        def OUTPUT(self):
            return self.getToken(TSqlParser.OUTPUT, 0)

        def READONLY(self):
            return self.getToken(TSqlParser.READONLY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_procedure_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_param" ):
                listener.enterProcedure_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_param" ):
                listener.exitProcedure_param(self)




    def procedure_param(self):

        localctx = TSqlParser.Procedure_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_procedure_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7566
            self.match(TSqlParser.LOCAL_ID)
            self.state = 7568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 7567
                self.match(TSqlParser.AS)


            self.state = 7573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,965,self._ctx)
            if la_ == 1:
                self.state = 7570
                localctx.type_schema = self.id_()
                self.state = 7571
                self.match(TSqlParser.DOT)


            self.state = 7575
            self.data_type()
            self.state = 7577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1047:
                self.state = 7576
                self.match(TSqlParser.VARYING)


            self.state = 7581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1174:
                self.state = 7579
                self.match(TSqlParser.EQUAL)
                self.state = 7580
                localctx.default_val = self.procedure_param_default_value()


            self.state = 7584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==669 or _la==671 or _la==757:
                self.state = 7583
                _la = self._input.LA(1)
                if not(_la==669 or _la==671 or _la==757):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def RECOMPILE(self):
            return self.getToken(TSqlParser.RECOMPILE, 0)

        def execute_clause(self):
            return self.getTypedRuleContext(TSqlParser.Execute_clauseContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_procedure_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_option" ):
                listener.enterProcedure_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_option" ):
                listener.exitProcedure_option(self)




    def procedure_option(self):

        localctx = TSqlParser.Procedure_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_procedure_option)
        try:
            self.state = 7589
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [295]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7586
                self.match(TSqlParser.ENCRYPTION)
                pass
            elif token in [769]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7587
                self.match(TSqlParser.RECOMPILE)
                pass
            elif token in [318]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7588
                self.execute_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def SCHEMABINDING(self):
            return self.getToken(TSqlParser.SCHEMABINDING, 0)

        def RETURNS(self):
            return self.getToken(TSqlParser.RETURNS, 0)

        def NULL_(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NULL_)
            else:
                return self.getToken(TSqlParser.NULL_, i)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def INPUT(self):
            return self.getToken(TSqlParser.INPUT, 0)

        def CALLED(self):
            return self.getToken(TSqlParser.CALLED, 0)

        def execute_clause(self):
            return self.getTypedRuleContext(TSqlParser.Execute_clauseContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_function_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_option" ):
                listener.enterFunction_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_option" ):
                listener.exitFunction_option(self)




    def function_option(self):

        localctx = TSqlParser.Function_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_function_option)
        try:
            self.state = 7603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [295]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7591
                self.match(TSqlParser.ENCRYPTION)
                pass
            elif token in [845]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7592
                self.match(TSqlParser.SCHEMABINDING)
                pass
            elif token in [812]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7593
                self.match(TSqlParser.RETURNS)
                self.state = 7594
                self.match(TSqlParser.NULL_)
                self.state = 7595
                self.match(TSqlParser.ON)
                self.state = 7596
                self.match(TSqlParser.NULL_)
                self.state = 7597
                self.match(TSqlParser.INPUT)
                pass
            elif token in [112]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7598
                self.match(TSqlParser.CALLED)
                self.state = 7599
                self.match(TSqlParser.ON)
                self.state = 7600
                self.match(TSqlParser.NULL_)
                self.state = 7601
                self.match(TSqlParser.INPUT)
                pass
            elif token in [318]:
                self.enterOuterAlt(localctx, 5)
                self.state = 7602
                self.execute_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_statisticsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def STATISTICS(self):
            return self.getToken(TSqlParser.STATISTICS, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def FULLSCAN(self):
            return self.getToken(TSqlParser.FULLSCAN, 0)

        def SAMPLE(self):
            return self.getToken(TSqlParser.SAMPLE, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def STATS_STREAM(self):
            return self.getToken(TSqlParser.STATS_STREAM, 0)

        def PERCENT(self):
            return self.getToken(TSqlParser.PERCENT, 0)

        def ROWS(self):
            return self.getToken(TSqlParser.ROWS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def NORECOMPUTE(self):
            return self.getToken(TSqlParser.NORECOMPUTE, 0)

        def INCREMENTAL(self):
            return self.getToken(TSqlParser.INCREMENTAL, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_create_statistics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_statistics" ):
                listener.enterCreate_statistics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_statistics" ):
                listener.exitCreate_statistics(self)




    def create_statistics(self):

        localctx = TSqlParser.Create_statisticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_create_statistics)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7605
            self.match(TSqlParser.CREATE)
            self.state = 7606
            self.match(TSqlParser.STATISTICS)
            self.state = 7607
            self.id_()
            self.state = 7608
            self.match(TSqlParser.ON)
            self.state = 7609
            self.table_name()
            self.state = 7610
            self.match(TSqlParser.LR_BRACKET)
            self.state = 7611
            self.column_name_list()
            self.state = 7612
            self.match(TSqlParser.RR_BRACKET)
            self.state = 7631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,974,self._ctx)
            if la_ == 1:
                self.state = 7613
                self.match(TSqlParser.WITH)
                self.state = 7619
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [380]:
                    self.state = 7614
                    self.match(TSqlParser.FULLSCAN)
                    pass
                elif token in [841]:
                    self.state = 7615
                    self.match(TSqlParser.SAMPLE)
                    self.state = 7616
                    self.match(TSqlParser.DECIMAL)
                    self.state = 7617
                    _la = self._input.LA(1)
                    if not(_la==695 or _la==830):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [936]:
                    self.state = 7618
                    self.match(TSqlParser.STATS_STREAM)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 7623
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,972,self._ctx)
                if la_ == 1:
                    self.state = 7621
                    self.match(TSqlParser.COMMA)
                    self.state = 7622
                    self.match(TSqlParser.NORECOMPUTE)


                self.state = 7629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 7625
                    self.match(TSqlParser.COMMA)
                    self.state = 7626
                    self.match(TSqlParser.INCREMENTAL)
                    self.state = 7627
                    self.match(TSqlParser.EQUAL)
                    self.state = 7628
                    self.on_off()




            self.state = 7634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,975,self._ctx)
            if la_ == 1:
                self.state = 7633
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_statisticsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(TSqlParser.UPDATE, 0)

        def STATISTICS(self):
            return self.getToken(TSqlParser.STATISTICS, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_table_nameContext,0)


        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def update_statistics_options(self):
            return self.getTypedRuleContext(TSqlParser.Update_statistics_optionsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_update_statistics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_statistics" ):
                listener.enterUpdate_statistics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_statistics" ):
                listener.exitUpdate_statistics(self)




    def update_statistics(self):

        localctx = TSqlParser.Update_statisticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_update_statistics)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7636
            self.match(TSqlParser.UPDATE)
            self.state = 7637
            self.match(TSqlParser.STATISTICS)
            self.state = 7638
            self.full_table_name()
            self.state = 7651
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,977,self._ctx)
            if la_ == 1:
                self.state = 7639
                self.id_()

            elif la_ == 2:
                self.state = 7640
                self.match(TSqlParser.LR_BRACKET)
                self.state = 7641
                self.id_()
                self.state = 7646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 7642
                    self.match(TSqlParser.COMMA)
                    self.state = 7643
                    self.id_()
                    self.state = 7648
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7649
                self.match(TSqlParser.RR_BRACKET)


            self.state = 7654
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,978,self._ctx)
            if la_ == 1:
                self.state = 7653
                self.update_statistics_options()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_statistics_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def update_statistics_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Update_statistics_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Update_statistics_optionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_update_statistics_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_statistics_options" ):
                listener.enterUpdate_statistics_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_statistics_options" ):
                listener.exitUpdate_statistics_options(self)




    def update_statistics_options(self):

        localctx = TSqlParser.Update_statistics_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_update_statistics_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7656
            self.match(TSqlParser.WITH)
            self.state = 7657
            self.update_statistics_option()
            self.state = 7662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 7658
                self.match(TSqlParser.COMMA)
                self.state = 7659
                self.update_statistics_option()
                self.state = 7664
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_statistics_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.number = None # Token
            self.stats_stream_ = None # ExpressionContext
            self.max_dregree_of_parallelism = None # Token

        def FULLSCAN(self):
            return self.getToken(TSqlParser.FULLSCAN, 0)

        def PERSIST_SAMPLE_PERCENT(self):
            return self.getToken(TSqlParser.PERSIST_SAMPLE_PERCENT, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def SAMPLE(self):
            return self.getToken(TSqlParser.SAMPLE, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def PERCENT(self):
            return self.getToken(TSqlParser.PERCENT, 0)

        def ROWS(self):
            return self.getToken(TSqlParser.ROWS, 0)

        def RESAMPLE(self):
            return self.getToken(TSqlParser.RESAMPLE, 0)

        def on_partitions(self):
            return self.getTypedRuleContext(TSqlParser.On_partitionsContext,0)


        def STATS_STREAM(self):
            return self.getToken(TSqlParser.STATS_STREAM, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def ROWCOUNT(self):
            return self.getToken(TSqlParser.ROWCOUNT, 0)

        def PAGECOUNT(self):
            return self.getToken(TSqlParser.PAGECOUNT, 0)

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def COLUMNS(self):
            return self.getToken(TSqlParser.COLUMNS, 0)

        def INDEX(self):
            return self.getToken(TSqlParser.INDEX, 0)

        def NORECOMPUTE(self):
            return self.getToken(TSqlParser.NORECOMPUTE, 0)

        def INCREMENTAL(self):
            return self.getToken(TSqlParser.INCREMENTAL, 0)

        def MAXDOP(self):
            return self.getToken(TSqlParser.MAXDOP, 0)

        def AUTO_DROP(self):
            return self.getToken(TSqlParser.AUTO_DROP, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_update_statistics_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_statistics_option" ):
                listener.enterUpdate_statistics_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_statistics_option" ):
                listener.exitUpdate_statistics_option(self)




    def update_statistics_option(self):

        localctx = TSqlParser.Update_statistics_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_update_statistics_option)
        self._la = 0 # Token type
        try:
            self.state = 7711
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [380]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7665
                self.match(TSqlParser.FULLSCAN)
                self.state = 7672
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,981,self._ctx)
                if la_ == 1:
                    self.state = 7667
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 7666
                        self.match(TSqlParser.COMMA)


                    self.state = 7669
                    self.match(TSqlParser.PERSIST_SAMPLE_PERCENT)
                    self.state = 7670
                    self.match(TSqlParser.EQUAL)
                    self.state = 7671
                    self.on_off()


                pass
            elif token in [841]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7674
                self.match(TSqlParser.SAMPLE)
                self.state = 7675
                localctx.number = self.match(TSqlParser.DECIMAL)
                self.state = 7676
                _la = self._input.LA(1)
                if not(_la==695 or _la==830):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7683
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,983,self._ctx)
                if la_ == 1:
                    self.state = 7678
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 7677
                        self.match(TSqlParser.COMMA)


                    self.state = 7680
                    self.match(TSqlParser.PERSIST_SAMPLE_PERCENT)
                    self.state = 7681
                    self.match(TSqlParser.EQUAL)
                    self.state = 7682
                    self.on_off()


                pass
            elif token in [797]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7685
                self.match(TSqlParser.RESAMPLE)
                self.state = 7687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==649:
                    self.state = 7686
                    self.on_partitions()


                pass
            elif token in [936]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7689
                self.match(TSqlParser.STATS_STREAM)
                self.state = 7690
                self.match(TSqlParser.EQUAL)
                self.state = 7691
                localctx.stats_stream_ = self.expression(0)
                pass
            elif token in [825]:
                self.enterOuterAlt(localctx, 5)
                self.state = 7692
                self.match(TSqlParser.ROWCOUNT)
                self.state = 7693
                self.match(TSqlParser.EQUAL)
                self.state = 7694
                self.match(TSqlParser.DECIMAL)
                pass
            elif token in [678]:
                self.enterOuterAlt(localctx, 6)
                self.state = 7695
                self.match(TSqlParser.PAGECOUNT)
                self.state = 7696
                self.match(TSqlParser.EQUAL)
                self.state = 7697
                self.match(TSqlParser.DECIMAL)
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 7)
                self.state = 7698
                self.match(TSqlParser.ALL)
                pass
            elif token in [155]:
                self.enterOuterAlt(localctx, 8)
                self.state = 7699
                self.match(TSqlParser.COLUMNS)
                pass
            elif token in [447]:
                self.enterOuterAlt(localctx, 9)
                self.state = 7700
                self.match(TSqlParser.INDEX)
                pass
            elif token in [610]:
                self.enterOuterAlt(localctx, 10)
                self.state = 7701
                self.match(TSqlParser.NORECOMPUTE)
                pass
            elif token in [446]:
                self.enterOuterAlt(localctx, 11)
                self.state = 7702
                self.match(TSqlParser.INCREMENTAL)
                self.state = 7703
                self.match(TSqlParser.EQUAL)
                self.state = 7704
                self.on_off()
                pass
            elif token in [538]:
                self.enterOuterAlt(localctx, 12)
                self.state = 7705
                self.match(TSqlParser.MAXDOP)
                self.state = 7706
                self.match(TSqlParser.EQUAL)
                self.state = 7707
                localctx.max_dregree_of_parallelism = self.match(TSqlParser.DECIMAL)
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 13)
                self.state = 7708
                self.match(TSqlParser.AUTO_DROP)
                self.state = 7709
                self.match(TSqlParser.EQUAL)
                self.state = 7710
                self.on_off()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(TSqlParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_def_table_constraints(self):
            return self.getTypedRuleContext(TSqlParser.Column_def_table_constraintsContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def table_indices(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Table_indicesContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Table_indicesContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def LOCK(self):
            return self.getToken(TSqlParser.LOCK, 0)

        def simple_id(self):
            return self.getTypedRuleContext(TSqlParser.Simple_idContext,0)


        def table_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Table_optionsContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Table_optionsContext,i)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DEFAULT)
            else:
                return self.getToken(TSqlParser.DEFAULT, i)

        def on_partition_or_filegroup(self):
            return self.getTypedRuleContext(TSqlParser.On_partition_or_filegroupContext,0)


        def TEXTIMAGE_ON(self):
            return self.getToken(TSqlParser.TEXTIMAGE_ON, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table" ):
                listener.enterCreate_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table" ):
                listener.exitCreate_table(self)




    def create_table(self):

        localctx = TSqlParser.Create_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_create_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7713
            self.match(TSqlParser.CREATE)
            self.state = 7714
            self.match(TSqlParser.TABLE)
            self.state = 7715
            self.table_name()
            self.state = 7716
            self.match(TSqlParser.LR_BRACKET)
            self.state = 7717
            self.column_def_table_constraints()
            self.state = 7724
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,987,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 7719
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 7718
                        self.match(TSqlParser.COMMA)


                    self.state = 7721
                    self.table_indices() 
                self.state = 7726
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,987,self._ctx)

            self.state = 7728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1194:
                self.state = 7727
                self.match(TSqlParser.COMMA)


            self.state = 7730
            self.match(TSqlParser.RR_BRACKET)
            self.state = 7733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,989,self._ctx)
            if la_ == 1:
                self.state = 7731
                self.match(TSqlParser.LOCK)
                self.state = 7732
                self.simple_id()


            self.state = 7738
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,990,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 7735
                    self.table_options() 
                self.state = 7740
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,990,self._ctx)

            self.state = 7745
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,991,self._ctx)
            if la_ == 1:
                self.state = 7741
                self.match(TSqlParser.ON)
                self.state = 7742
                self.id_()

            elif la_ == 2:
                self.state = 7743
                self.match(TSqlParser.DEFAULT)

            elif la_ == 3:
                self.state = 7744
                self.on_partition_or_filegroup()


            self.state = 7750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,992,self._ctx)
            if la_ == 1:
                self.state = 7747
                self.match(TSqlParser.TEXTIMAGE_ON)
                self.state = 7748
                self.id_()

            elif la_ == 2:
                self.state = 7749
                self.match(TSqlParser.DEFAULT)


            self.state = 7753
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,993,self._ctx)
            if la_ == 1:
                self.state = 7752
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_indicesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX(self):
            return self.getToken(TSqlParser.INDEX, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_name_list_with_order(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_list_with_orderContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def UNIQUE(self):
            return self.getToken(TSqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(TSqlParser.ClusteredContext,0)


        def CLUSTERED(self):
            return self.getToken(TSqlParser.CLUSTERED, 0)

        def COLUMNSTORE(self):
            return self.getToken(TSqlParser.COLUMNSTORE, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def NONCLUSTERED(self):
            return self.getToken(TSqlParser.NONCLUSTERED, 0)

        def create_table_index_options(self):
            return self.getTypedRuleContext(TSqlParser.Create_table_index_optionsContext,0)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_table_indices

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_indices" ):
                listener.enterTable_indices(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_indices" ):
                listener.exitTable_indices(self)




    def table_indices(self):

        localctx = TSqlParser.Table_indicesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_table_indices)
        self._la = 0 # Token type
        try:
            self.state = 7788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,999,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7755
                self.match(TSqlParser.INDEX)
                self.state = 7756
                self.id_()
                self.state = 7758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1020:
                    self.state = 7757
                    self.match(TSqlParser.UNIQUE)


                self.state = 7761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==149 or _la==607:
                    self.state = 7760
                    self.clustered()


                self.state = 7763
                self.match(TSqlParser.LR_BRACKET)
                self.state = 7764
                self.column_name_list_with_order()
                self.state = 7765
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7767
                self.match(TSqlParser.INDEX)
                self.state = 7768
                self.id_()
                self.state = 7769
                self.match(TSqlParser.CLUSTERED)
                self.state = 7770
                self.match(TSqlParser.COLUMNSTORE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7772
                self.match(TSqlParser.INDEX)
                self.state = 7773
                self.id_()
                self.state = 7775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==607:
                    self.state = 7774
                    self.match(TSqlParser.NONCLUSTERED)


                self.state = 7777
                self.match(TSqlParser.COLUMNSTORE)
                self.state = 7778
                self.match(TSqlParser.LR_BRACKET)
                self.state = 7779
                self.column_name_list()
                self.state = 7780
                self.match(TSqlParser.RR_BRACKET)
                self.state = 7782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1063:
                    self.state = 7781
                    self.create_table_index_options()


                self.state = 7786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==649:
                    self.state = 7784
                    self.match(TSqlParser.ON)
                    self.state = 7785
                    self.id_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def table_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Table_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Table_optionContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_table_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_options" ):
                listener.enterTable_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_options" ):
                listener.exitTable_options(self)




    def table_options(self):

        localctx = TSqlParser.Table_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_table_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7790
            self.match(TSqlParser.WITH)
            self.state = 7810
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1192]:
                self.state = 7791
                self.match(TSqlParser.LR_BRACKET)
                self.state = 7792
                self.table_option()
                self.state = 7797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 7793
                    self.match(TSqlParser.COMMA)
                    self.state = 7794
                    self.table_option()
                    self.state = 7799
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7800
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1169]:
                self.state = 7802
                self.table_option()
                self.state = 7807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 7803
                    self.match(TSqlParser.COMMA)
                    self.state = 7804
                    self.table_option()
                    self.state = 7809
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def simple_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Simple_idContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Simple_idContext,i)


        def keyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.KeywordContext)
            else:
                return self.getTypedRuleContext(TSqlParser.KeywordContext,i)


        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def CLUSTERED(self):
            return self.getToken(TSqlParser.CLUSTERED, 0)

        def COLUMNSTORE(self):
            return self.getToken(TSqlParser.COLUMNSTORE, 0)

        def INDEX(self):
            return self.getToken(TSqlParser.INDEX, 0)

        def HEAP(self):
            return self.getToken(TSqlParser.HEAP, 0)

        def FILLFACTOR(self):
            return self.getToken(TSqlParser.FILLFACTOR, 0)

        def DISTRIBUTION(self):
            return self.getToken(TSqlParser.DISTRIBUTION, 0)

        def HASH(self):
            return self.getToken(TSqlParser.HASH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def ASC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ASC)
            else:
                return self.getToken(TSqlParser.ASC, i)

        def DESC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DESC)
            else:
                return self.getToken(TSqlParser.DESC, i)

        def DATA_COMPRESSION(self):
            return self.getToken(TSqlParser.DATA_COMPRESSION, 0)

        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def ROW(self):
            return self.getToken(TSqlParser.ROW, 0)

        def PAGE(self):
            return self.getToken(TSqlParser.PAGE, 0)

        def on_partitions(self):
            return self.getTypedRuleContext(TSqlParser.On_partitionsContext,0)


        def XML_COMPRESSION(self):
            return self.getToken(TSqlParser.XML_COMPRESSION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_table_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_option" ):
                listener.enterTable_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_option" ):
                listener.exitTable_option(self)




    def table_option(self):

        localctx = TSqlParser.Table_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_table_option)
        self._la = 0 # Token type
        try:
            self.state = 7868
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1010,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7814
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1169]:
                    self.state = 7812
                    self.simple_id()
                    pass
                elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153]:
                    self.state = 7813
                    self.keyword()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 7816
                self.match(TSqlParser.EQUAL)
                self.state = 7821
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1169]:
                    self.state = 7817
                    self.simple_id()
                    pass
                elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153]:
                    self.state = 7818
                    self.keyword()
                    pass
                elif token in [643, 649]:
                    self.state = 7819
                    self.on_off()
                    pass
                elif token in [1168]:
                    self.state = 7820
                    self.match(TSqlParser.DECIMAL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7823
                self.match(TSqlParser.CLUSTERED)
                self.state = 7824
                self.match(TSqlParser.COLUMNSTORE)
                self.state = 7825
                self.match(TSqlParser.INDEX)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7826
                self.match(TSqlParser.HEAP)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7827
                self.match(TSqlParser.FILLFACTOR)
                self.state = 7828
                self.match(TSqlParser.EQUAL)
                self.state = 7829
                self.match(TSqlParser.DECIMAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7830
                self.match(TSqlParser.DISTRIBUTION)
                self.state = 7831
                self.match(TSqlParser.EQUAL)
                self.state = 7832
                self.match(TSqlParser.HASH)
                self.state = 7833
                self.match(TSqlParser.LR_BRACKET)
                self.state = 7834
                self.id_()
                self.state = 7835
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7837
                self.match(TSqlParser.CLUSTERED)
                self.state = 7838
                self.match(TSqlParser.INDEX)
                self.state = 7839
                self.match(TSqlParser.LR_BRACKET)
                self.state = 7840
                self.id_()
                self.state = 7842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57 or _la==258:
                    self.state = 7841
                    _la = self._input.LA(1)
                    if not(_la==57 or _la==258):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 7851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 7844
                    self.match(TSqlParser.COMMA)
                    self.state = 7845
                    self.id_()
                    self.state = 7847
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==57 or _la==258:
                        self.state = 7846
                        _la = self._input.LA(1)
                        if not(_la==57 or _la==258):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 7853
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7854
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7856
                self.match(TSqlParser.DATA_COMPRESSION)
                self.state = 7857
                self.match(TSqlParser.EQUAL)
                self.state = 7858
                _la = self._input.LA(1)
                if not(_la==608 or _la==677 or _la==824):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7860
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1008,self._ctx)
                if la_ == 1:
                    self.state = 7859
                    self.on_partitions()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7862
                self.match(TSqlParser.XML_COMPRESSION)
                self.state = 7863
                self.match(TSqlParser.EQUAL)
                self.state = 7864
                self.on_off()
                self.state = 7866
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1009,self._ctx)
                if la_ == 1:
                    self.state = 7865
                    self.on_partitions()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_index_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def create_table_index_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Create_table_index_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Create_table_index_optionContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_table_index_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_index_options" ):
                listener.enterCreate_table_index_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_index_options" ):
                listener.exitCreate_table_index_options(self)




    def create_table_index_options(self):

        localctx = TSqlParser.Create_table_index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_create_table_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7870
            self.match(TSqlParser.WITH)
            self.state = 7871
            self.match(TSqlParser.LR_BRACKET)
            self.state = 7872
            self.create_table_index_option()
            self.state = 7877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 7873
                self.match(TSqlParser.COMMA)
                self.state = 7874
                self.create_table_index_option()
                self.state = 7879
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7880
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_index_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAD_INDEX(self):
            return self.getToken(TSqlParser.PAD_INDEX, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def FILLFACTOR(self):
            return self.getToken(TSqlParser.FILLFACTOR, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def IGNORE_DUP_KEY(self):
            return self.getToken(TSqlParser.IGNORE_DUP_KEY, 0)

        def STATISTICS_NORECOMPUTE(self):
            return self.getToken(TSqlParser.STATISTICS_NORECOMPUTE, 0)

        def STATISTICS_INCREMENTAL(self):
            return self.getToken(TSqlParser.STATISTICS_INCREMENTAL, 0)

        def ALLOW_ROW_LOCKS(self):
            return self.getToken(TSqlParser.ALLOW_ROW_LOCKS, 0)

        def ALLOW_PAGE_LOCKS(self):
            return self.getToken(TSqlParser.ALLOW_PAGE_LOCKS, 0)

        def OPTIMIZE_FOR_SEQUENTIAL_KEY(self):
            return self.getToken(TSqlParser.OPTIMIZE_FOR_SEQUENTIAL_KEY, 0)

        def DATA_COMPRESSION(self):
            return self.getToken(TSqlParser.DATA_COMPRESSION, 0)

        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def ROW(self):
            return self.getToken(TSqlParser.ROW, 0)

        def PAGE(self):
            return self.getToken(TSqlParser.PAGE, 0)

        def COLUMNSTORE(self):
            return self.getToken(TSqlParser.COLUMNSTORE, 0)

        def COLUMNSTORE_ARCHIVE(self):
            return self.getToken(TSqlParser.COLUMNSTORE_ARCHIVE, 0)

        def on_partitions(self):
            return self.getTypedRuleContext(TSqlParser.On_partitionsContext,0)


        def XML_COMPRESSION(self):
            return self.getToken(TSqlParser.XML_COMPRESSION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_table_index_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_index_option" ):
                listener.enterCreate_table_index_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_index_option" ):
                listener.exitCreate_table_index_option(self)




    def create_table_index_option(self):

        localctx = TSqlParser.Create_table_index_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_create_table_index_option)
        self._la = 0 # Token type
        try:
            self.state = 7918
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [676]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7882
                self.match(TSqlParser.PAD_INDEX)
                self.state = 7883
                self.match(TSqlParser.EQUAL)
                self.state = 7884
                self.on_off()
                pass
            elif token in [357]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7885
                self.match(TSqlParser.FILLFACTOR)
                self.state = 7886
                self.match(TSqlParser.EQUAL)
                self.state = 7887
                self.match(TSqlParser.DECIMAL)
                pass
            elif token in [433]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7888
                self.match(TSqlParser.IGNORE_DUP_KEY)
                self.state = 7889
                self.match(TSqlParser.EQUAL)
                self.state = 7890
                self.on_off()
                pass
            elif token in [933]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7891
                self.match(TSqlParser.STATISTICS_NORECOMPUTE)
                self.state = 7892
                self.match(TSqlParser.EQUAL)
                self.state = 7893
                self.on_off()
                pass
            elif token in [932]:
                self.enterOuterAlt(localctx, 5)
                self.state = 7894
                self.match(TSqlParser.STATISTICS_INCREMENTAL)
                self.state = 7895
                self.match(TSqlParser.EQUAL)
                self.state = 7896
                self.on_off()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 6)
                self.state = 7897
                self.match(TSqlParser.ALLOW_ROW_LOCKS)
                self.state = 7898
                self.match(TSqlParser.EQUAL)
                self.state = 7899
                self.on_off()
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 7)
                self.state = 7900
                self.match(TSqlParser.ALLOW_PAGE_LOCKS)
                self.state = 7901
                self.match(TSqlParser.EQUAL)
                self.state = 7902
                self.on_off()
                pass
            elif token in [663]:
                self.enterOuterAlt(localctx, 8)
                self.state = 7903
                self.match(TSqlParser.OPTIMIZE_FOR_SEQUENTIAL_KEY)
                self.state = 7904
                self.match(TSqlParser.EQUAL)
                self.state = 7905
                self.on_off()
                pass
            elif token in [223]:
                self.enterOuterAlt(localctx, 9)
                self.state = 7906
                self.match(TSqlParser.DATA_COMPRESSION)
                self.state = 7907
                self.match(TSqlParser.EQUAL)
                self.state = 7908
                _la = self._input.LA(1)
                if not(_la==156 or _la==157 or _la==608 or _la==677 or _la==824):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==649:
                    self.state = 7909
                    self.on_partitions()


                pass
            elif token in [1078]:
                self.enterOuterAlt(localctx, 10)
                self.state = 7912
                self.match(TSqlParser.XML_COMPRESSION)
                self.state = 7913
                self.match(TSqlParser.EQUAL)
                self.state = 7914
                self.on_off()
                self.state = 7916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==649:
                    self.state = 7915
                    self.on_partitions()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_viewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VIEW(self):
            return self.getToken(TSqlParser.VIEW, 0)

        def simple_name(self):
            return self.getTypedRuleContext(TSqlParser.Simple_nameContext,0)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def select_statement_standalone(self):
            return self.getTypedRuleContext(TSqlParser.Select_statement_standaloneContext,0)


        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.WITH)
            else:
                return self.getToken(TSqlParser.WITH, i)

        def view_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.View_attributeContext)
            else:
                return self.getTypedRuleContext(TSqlParser.View_attributeContext,i)


        def CHECK(self):
            return self.getToken(TSqlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(TSqlParser.OPTION, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def OR(self):
            return self.getToken(TSqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(TSqlParser.REPLACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_view" ):
                listener.enterCreate_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_view" ):
                listener.exitCreate_view(self)




    def create_view(self):

        localctx = TSqlParser.Create_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_create_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7926
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [197]:
                self.state = 7920
                self.match(TSqlParser.CREATE)
                self.state = 7923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==665:
                    self.state = 7921
                    self.match(TSqlParser.OR)
                    self.state = 7922
                    _la = self._input.LA(1)
                    if not(_la==35 or _la==788):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [35]:
                self.state = 7925
                self.match(TSqlParser.ALTER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 7928
            self.match(TSqlParser.VIEW)
            self.state = 7929
            self.simple_name()
            self.state = 7934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1192:
                self.state = 7930
                self.match(TSqlParser.LR_BRACKET)
                self.state = 7931
                self.column_name_list()
                self.state = 7932
                self.match(TSqlParser.RR_BRACKET)


            self.state = 7945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1063:
                self.state = 7936
                self.match(TSqlParser.WITH)
                self.state = 7937
                self.view_attribute()
                self.state = 7942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 7938
                    self.match(TSqlParser.COMMA)
                    self.state = 7939
                    self.view_attribute()
                    self.state = 7944
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 7947
            self.match(TSqlParser.AS)
            self.state = 7948
            self.select_statement_standalone()
            self.state = 7952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1020,self._ctx)
            if la_ == 1:
                self.state = 7949
                self.match(TSqlParser.WITH)
                self.state = 7950
                self.match(TSqlParser.CHECK)
                self.state = 7951
                self.match(TSqlParser.OPTION)


            self.state = 7955
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1021,self._ctx)
            if la_ == 1:
                self.state = 7954
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class View_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def SCHEMABINDING(self):
            return self.getToken(TSqlParser.SCHEMABINDING, 0)

        def VIEW_METADATA(self):
            return self.getToken(TSqlParser.VIEW_METADATA, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_view_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_attribute" ):
                listener.enterView_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_attribute" ):
                listener.exitView_attribute(self)




    def view_attribute(self):

        localctx = TSqlParser.View_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_view_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7957
            _la = self._input.LA(1)
            if not(_la==295 or _la==845 or _la==1053):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint = None # Id_Context
            self.fk = None # Column_name_listContext
            self.pk = None # Column_name_listContext

        def ALTER(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ALTER)
            else:
                return self.getToken(TSqlParser.ALTER, i)

        def TABLE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TABLE)
            else:
                return self.getToken(TSqlParser.TABLE, i)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Table_nameContext,i)


        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def LOCK_ESCALATION(self):
            return self.getToken(TSqlParser.LOCK_ESCALATION, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def column_def_table_constraints(self):
            return self.getTypedRuleContext(TSqlParser.Column_def_table_constraintsContext,0)


        def COLUMN(self):
            return self.getToken(TSqlParser.COLUMN, 0)

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def CONSTRAINT(self):
            return self.getToken(TSqlParser.CONSTRAINT, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def TRIGGER(self):
            return self.getToken(TSqlParser.TRIGGER, 0)

        def REBUILD(self):
            return self.getToken(TSqlParser.REBUILD, 0)

        def table_options(self):
            return self.getTypedRuleContext(TSqlParser.Table_optionsContext,0)


        def SWITCH(self):
            return self.getToken(TSqlParser.SWITCH, 0)

        def switch_partition(self):
            return self.getTypedRuleContext(TSqlParser.Switch_partitionContext,0)


        def AUTO(self):
            return self.getToken(TSqlParser.AUTO, 0)

        def DISABLE(self):
            return self.getToken(TSqlParser.DISABLE, 0)

        def CHECK(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CHECK)
            else:
                return self.getToken(TSqlParser.CHECK, i)

        def NOCHECK(self):
            return self.getToken(TSqlParser.NOCHECK, 0)

        def ENABLE(self):
            return self.getToken(TSqlParser.ENABLE, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def column_definition(self):
            return self.getTypedRuleContext(TSqlParser.Column_definitionContext,0)


        def column_modifier(self):
            return self.getTypedRuleContext(TSqlParser.Column_modifierContext,0)


        def FOREIGN(self):
            return self.getToken(TSqlParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def REFERENCES(self):
            return self.getToken(TSqlParser.REFERENCES, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Column_name_listContext,i)


        def on_delete(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.On_deleteContext)
            else:
                return self.getTypedRuleContext(TSqlParser.On_deleteContext,i)


        def on_update(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.On_updateContext)
            else:
                return self.getTypedRuleContext(TSqlParser.On_updateContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table" ):
                listener.enterAlter_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table" ):
                listener.exitAlter_table(self)




    def alter_table(self):

        localctx = TSqlParser.Alter_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_alter_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7959
            self.match(TSqlParser.ALTER)
            self.state = 7960
            self.match(TSqlParser.TABLE)
            self.state = 7961
            self.table_name()
            self.state = 8035
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1030,self._ctx)
            if la_ == 1:
                self.state = 7962
                self.match(TSqlParser.SET)
                self.state = 7963
                self.match(TSqlParser.LR_BRACKET)
                self.state = 7964
                self.match(TSqlParser.LOCK_ESCALATION)
                self.state = 7965
                self.match(TSqlParser.EQUAL)
                self.state = 7966
                _la = self._input.LA(1)
                if not(_la==69 or _la==268 or _la==966):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7967
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.state = 7968
                self.match(TSqlParser.ADD)
                self.state = 7969
                self.column_def_table_constraints()
                pass

            elif la_ == 3:
                self.state = 7970
                self.match(TSqlParser.ALTER)
                self.state = 7971
                self.match(TSqlParser.COLUMN)
                self.state = 7974
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1022,self._ctx)
                if la_ == 1:
                    self.state = 7972
                    self.column_definition()
                    pass

                elif la_ == 2:
                    self.state = 7973
                    self.column_modifier()
                    pass


                pass

            elif la_ == 4:
                self.state = 7976
                self.match(TSqlParser.DROP)
                self.state = 7977
                self.match(TSqlParser.COLUMN)
                self.state = 7978
                self.id_()
                self.state = 7983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 7979
                    self.match(TSqlParser.COMMA)
                    self.state = 7980
                    self.id_()
                    self.state = 7985
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                self.state = 7986
                self.match(TSqlParser.DROP)
                self.state = 7987
                self.match(TSqlParser.CONSTRAINT)
                self.state = 7988
                localctx.constraint = self.id_()
                pass

            elif la_ == 6:
                self.state = 7989
                self.match(TSqlParser.WITH)
                self.state = 7990
                _la = self._input.LA(1)
                if not(_la==131 or _la==597):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7991
                self.match(TSqlParser.ADD)
                self.state = 7994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==177:
                    self.state = 7992
                    self.match(TSqlParser.CONSTRAINT)
                    self.state = 7993
                    localctx.constraint = self.id_()


                self.state = 8021
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [371]:
                    self.state = 7996
                    self.match(TSqlParser.FOREIGN)
                    self.state = 7997
                    self.match(TSqlParser.KEY)
                    self.state = 7998
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 7999
                    localctx.fk = self.column_name_list()
                    self.state = 8000
                    self.match(TSqlParser.RR_BRACKET)
                    self.state = 8001
                    self.match(TSqlParser.REFERENCES)
                    self.state = 8002
                    self.table_name()
                    self.state = 8007
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1025,self._ctx)
                    if la_ == 1:
                        self.state = 8003
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 8004
                        localctx.pk = self.column_name_list()
                        self.state = 8005
                        self.match(TSqlParser.RR_BRACKET)


                    self.state = 8013
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==649:
                        self.state = 8011
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1026,self._ctx)
                        if la_ == 1:
                            self.state = 8009
                            self.on_delete()
                            pass

                        elif la_ == 2:
                            self.state = 8010
                            self.on_update()
                            pass


                        self.state = 8015
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [131]:
                    self.state = 8016
                    self.match(TSqlParser.CHECK)
                    self.state = 8017
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 8018
                    self.search_condition(0)
                    self.state = 8019
                    self.match(TSqlParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 7:
                self.state = 8023
                _la = self._input.LA(1)
                if not(_la==131 or _la==597):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8024
                self.match(TSqlParser.CONSTRAINT)
                self.state = 8025
                localctx.constraint = self.id_()
                pass

            elif la_ == 8:
                self.state = 8026
                _la = self._input.LA(1)
                if not(_la==268 or _la==290):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8027
                self.match(TSqlParser.TRIGGER)
                self.state = 8029
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1029,self._ctx)
                if la_ == 1:
                    self.state = 8028
                    self.id_()


                pass

            elif la_ == 9:
                self.state = 8031
                self.match(TSqlParser.REBUILD)
                self.state = 8032
                self.table_options()
                pass

            elif la_ == 10:
                self.state = 8033
                self.match(TSqlParser.SWITCH)
                self.state = 8034
                self.switch_partition()
                pass


            self.state = 8038
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1031,self._ctx)
            if la_ == 1:
                self.state = 8037
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_partitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.source_partition_number_expression = None # ExpressionContext
            self.target_table = None # Table_nameContext
            self.target_partition_number_expression = None # ExpressionContext

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.PARTITION)
            else:
                return self.getToken(TSqlParser.PARTITION, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def low_priority_lock_wait(self):
            return self.getTypedRuleContext(TSqlParser.Low_priority_lock_waitContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_switch_partition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_partition" ):
                listener.enterSwitch_partition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_partition" ):
                listener.exitSwitch_partition(self)




    def switch_partition(self):

        localctx = TSqlParser.Switch_partitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_switch_partition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2342234983759889) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -74874560052724233) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8070028319748746719) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387490746373) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8753867308933840637) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755874891096735745) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -864762596778127649) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -138580854017) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18014399105315111) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -650880200401223699) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -378302373530962465) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689505) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906061) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1155)) & ~0x3f) == 0 and ((1 << (_la - 1155)) & 4996391290535303) != 0):
                self.state = 8041
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1032,self._ctx)
                if la_ == 1:
                    self.state = 8040
                    self.match(TSqlParser.PARTITION)


                self.state = 8043
                localctx.source_partition_number_expression = self.expression(0)


            self.state = 8046
            self.match(TSqlParser.TO)
            self.state = 8047
            localctx.target_table = self.table_name()
            self.state = 8050
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1034,self._ctx)
            if la_ == 1:
                self.state = 8048
                self.match(TSqlParser.PARTITION)
                self.state = 8049
                localctx.target_partition_number_expression = self.expression(0)


            self.state = 8054
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1035,self._ctx)
            if la_ == 1:
                self.state = 8052
                self.match(TSqlParser.WITH)
                self.state = 8053
                self.low_priority_lock_wait()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Low_priority_lock_waitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.max_duration = None # TimeContext
            self.abort_after_wait = None # Token

        def WAIT_AT_LOW_PRIORITY(self):
            return self.getToken(TSqlParser.WAIT_AT_LOW_PRIORITY, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def MAX_DURATION(self):
            return self.getToken(TSqlParser.MAX_DURATION, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def ABORT_AFTER_WAIT(self):
            return self.getToken(TSqlParser.ABORT_AFTER_WAIT, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def time(self):
            return self.getTypedRuleContext(TSqlParser.TimeContext,0)


        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def SELF(self):
            return self.getToken(TSqlParser.SELF, 0)

        def BLOCKERS(self):
            return self.getToken(TSqlParser.BLOCKERS, 0)

        def MINUTES(self):
            return self.getToken(TSqlParser.MINUTES, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_low_priority_lock_wait

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLow_priority_lock_wait" ):
                listener.enterLow_priority_lock_wait(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLow_priority_lock_wait" ):
                listener.exitLow_priority_lock_wait(self)




    def low_priority_lock_wait(self):

        localctx = TSqlParser.Low_priority_lock_waitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_low_priority_lock_wait)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8056
            self.match(TSqlParser.WAIT_AT_LOW_PRIORITY)
            self.state = 8057
            self.match(TSqlParser.LR_BRACKET)
            self.state = 8058
            self.match(TSqlParser.MAX_DURATION)
            self.state = 8059
            self.match(TSqlParser.EQUAL)
            self.state = 8060
            localctx.max_duration = self.time()
            self.state = 8062
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==569:
                self.state = 8061
                self.match(TSqlParser.MINUTES)


            self.state = 8064
            self.match(TSqlParser.COMMA)
            self.state = 8065
            self.match(TSqlParser.ABORT_AFTER_WAIT)
            self.state = 8066
            self.match(TSqlParser.EQUAL)
            self.state = 8067
            localctx.abort_after_wait = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==99 or _la==608 or _la==866):
                localctx.abort_after_wait = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 8068
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_databaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # Id_Context
            self.new_name = None # Id_Context
            self.collation = None # Id_Context

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def CURRENT(self):
            return self.getToken(TSqlParser.CURRENT, 0)

        def MODIFY(self):
            return self.getToken(TSqlParser.MODIFY, 0)

        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def COLLATE(self):
            return self.getToken(TSqlParser.COLLATE, 0)

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def database_optionspec(self):
            return self.getTypedRuleContext(TSqlParser.Database_optionspecContext,0)


        def add_or_modify_files(self):
            return self.getTypedRuleContext(TSqlParser.Add_or_modify_filesContext,0)


        def add_or_modify_filegroups(self):
            return self.getTypedRuleContext(TSqlParser.Add_or_modify_filegroupsContext,0)


        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def termination(self):
            return self.getTypedRuleContext(TSqlParser.TerminationContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_database" ):
                listener.enterAlter_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_database" ):
                listener.exitAlter_database(self)




    def alter_database(self):

        localctx = TSqlParser.Alter_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_alter_database)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8070
            self.match(TSqlParser.ALTER)
            self.state = 8071
            self.match(TSqlParser.DATABASE)
            self.state = 8074
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                self.state = 8072
                localctx.database = self.id_()
                pass
            elif token in [204]:
                self.state = 8073
                self.match(TSqlParser.CURRENT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 8090
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1039,self._ctx)
            if la_ == 1:
                self.state = 8076
                self.match(TSqlParser.MODIFY)
                self.state = 8077
                self.match(TSqlParser.NAME)
                self.state = 8078
                self.match(TSqlParser.EQUAL)
                self.state = 8079
                localctx.new_name = self.id_()
                pass

            elif la_ == 2:
                self.state = 8080
                self.match(TSqlParser.COLLATE)
                self.state = 8081
                localctx.collation = self.id_()
                pass

            elif la_ == 3:
                self.state = 8082
                self.match(TSqlParser.SET)
                self.state = 8083
                self.database_optionspec()
                self.state = 8086
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1038,self._ctx)
                if la_ == 1:
                    self.state = 8084
                    self.match(TSqlParser.WITH)
                    self.state = 8085
                    self.termination()


                pass

            elif la_ == 4:
                self.state = 8088
                self.add_or_modify_files()
                pass

            elif la_ == 5:
                self.state = 8089
                self.add_or_modify_filegroups()
                pass


            self.state = 8093
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1040,self._ctx)
            if la_ == 1:
                self.state = 8092
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_or_modify_filesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.filegroup_name = None # Id_Context
            self.logical_file_name = None # Id_Context

        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def filespec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.FilespecContext)
            else:
                return self.getTypedRuleContext(TSqlParser.FilespecContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def FILEGROUP(self):
            return self.getToken(TSqlParser.FILEGROUP, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def LOG(self):
            return self.getToken(TSqlParser.LOG, 0)

        def REMOVE(self):
            return self.getToken(TSqlParser.REMOVE, 0)

        def MODIFY(self):
            return self.getToken(TSqlParser.MODIFY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_add_or_modify_files

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_or_modify_files" ):
                listener.enterAdd_or_modify_files(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_or_modify_files" ):
                listener.exitAdd_or_modify_files(self)




    def add_or_modify_files(self):

        localctx = TSqlParser.Add_or_modify_filesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_add_or_modify_files)
        self._la = 0 # Token type
        try:
            self.state = 8127
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1044,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8095
                self.match(TSqlParser.ADD)
                self.state = 8096
                self.match(TSqlParser.FILE)
                self.state = 8097
                self.filespec()
                self.state = 8102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 8098
                    self.match(TSqlParser.COMMA)
                    self.state = 8099
                    self.filespec()
                    self.state = 8104
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 8108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==986:
                    self.state = 8105
                    self.match(TSqlParser.TO)
                    self.state = 8106
                    self.match(TSqlParser.FILEGROUP)
                    self.state = 8107
                    localctx.filegroup_name = self.id_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8110
                self.match(TSqlParser.ADD)
                self.state = 8111
                self.match(TSqlParser.LOG)
                self.state = 8112
                self.match(TSqlParser.FILE)
                self.state = 8113
                self.filespec()
                self.state = 8118
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 8114
                    self.match(TSqlParser.COMMA)
                    self.state = 8115
                    self.filespec()
                    self.state = 8120
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8121
                self.match(TSqlParser.REMOVE)
                self.state = 8122
                self.match(TSqlParser.FILE)
                self.state = 8123
                localctx.logical_file_name = self.id_()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8124
                self.match(TSqlParser.MODIFY)
                self.state = 8125
                self.match(TSqlParser.FILE)
                self.state = 8126
                self.filespec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilespecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Id_or_stringContext
            self.new_name = None # Id_or_stringContext
            self.file_name = None # Token
            self.size = None # File_sizeContext
            self.max_size = None # File_sizeContext
            self.growth_increment = None # File_sizeContext

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def id_or_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_or_stringContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_or_stringContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def NEWNAME(self):
            return self.getToken(TSqlParser.NEWNAME, 0)

        def FILENAME(self):
            return self.getToken(TSqlParser.FILENAME, 0)

        def SIZE(self):
            return self.getToken(TSqlParser.SIZE, 0)

        def MAXSIZE(self):
            return self.getToken(TSqlParser.MAXSIZE, 0)

        def UNLIMITED(self):
            return self.getToken(TSqlParser.UNLIMITED, 0)

        def FILEGROWTH(self):
            return self.getToken(TSqlParser.FILEGROWTH, 0)

        def OFFLINE(self):
            return self.getToken(TSqlParser.OFFLINE, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def file_size(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.File_sizeContext)
            else:
                return self.getTypedRuleContext(TSqlParser.File_sizeContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_filespec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilespec" ):
                listener.enterFilespec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilespec" ):
                listener.exitFilespec(self)




    def filespec(self):

        localctx = TSqlParser.FilespecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_filespec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8129
            self.match(TSqlParser.LR_BRACKET)
            self.state = 8130
            self.match(TSqlParser.NAME)
            self.state = 8131
            self.match(TSqlParser.EQUAL)
            self.state = 8132
            localctx.name = self.id_or_string()
            self.state = 8137
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1045,self._ctx)
            if la_ == 1:
                self.state = 8133
                self.match(TSqlParser.COMMA)
                self.state = 8134
                self.match(TSqlParser.NEWNAME)
                self.state = 8135
                self.match(TSqlParser.EQUAL)
                self.state = 8136
                localctx.new_name = self.id_or_string()


            self.state = 8143
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1046,self._ctx)
            if la_ == 1:
                self.state = 8139
                self.match(TSqlParser.COMMA)
                self.state = 8140
                self.match(TSqlParser.FILENAME)
                self.state = 8141
                self.match(TSqlParser.EQUAL)
                self.state = 8142
                localctx.file_name = self.match(TSqlParser.STRING)


            self.state = 8149
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1047,self._ctx)
            if la_ == 1:
                self.state = 8145
                self.match(TSqlParser.COMMA)
                self.state = 8146
                self.match(TSqlParser.SIZE)
                self.state = 8147
                self.match(TSqlParser.EQUAL)
                self.state = 8148
                localctx.size = self.file_size()


            self.state = 8156
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1048,self._ctx)
            if la_ == 1:
                self.state = 8151
                self.match(TSqlParser.COMMA)
                self.state = 8152
                self.match(TSqlParser.MAXSIZE)
                self.state = 8153
                self.match(TSqlParser.EQUAL)

                self.state = 8154
                localctx.max_size = self.file_size()

            elif la_ == 2:
                self.state = 8155
                self.match(TSqlParser.UNLIMITED)


            self.state = 8162
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1049,self._ctx)
            if la_ == 1:
                self.state = 8158
                self.match(TSqlParser.COMMA)
                self.state = 8159
                self.match(TSqlParser.FILEGROWTH)
                self.state = 8160
                self.match(TSqlParser.EQUAL)
                self.state = 8161
                localctx.growth_increment = self.file_size()


            self.state = 8166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1194:
                self.state = 8164
                self.match(TSqlParser.COMMA)
                self.state = 8165
                self.match(TSqlParser.OFFLINE)


            self.state = 8168
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_or_modify_filegroupsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.filegroup_name = None # Id_Context
            self.filegrou_name = None # Id_Context
            self.new_filegroup_name = None # Id_Context

        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def FILEGROUP(self):
            return self.getToken(TSqlParser.FILEGROUP, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def CONTAINS(self):
            return self.getToken(TSqlParser.CONTAINS, 0)

        def FILESTREAM(self):
            return self.getToken(TSqlParser.FILESTREAM, 0)

        def MEMORY_OPTIMIZED_DATA(self):
            return self.getToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0)

        def REMOVE(self):
            return self.getToken(TSqlParser.REMOVE, 0)

        def MODIFY(self):
            return self.getToken(TSqlParser.MODIFY, 0)

        def filegroup_updatability_option(self):
            return self.getTypedRuleContext(TSqlParser.Filegroup_updatability_optionContext,0)


        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def AUTOGROW_SINGLE_FILE(self):
            return self.getToken(TSqlParser.AUTOGROW_SINGLE_FILE, 0)

        def AUTOGROW_ALL_FILES(self):
            return self.getToken(TSqlParser.AUTOGROW_ALL_FILES, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_add_or_modify_filegroups

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_or_modify_filegroups" ):
                listener.enterAdd_or_modify_filegroups(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_or_modify_filegroups" ):
                listener.exitAdd_or_modify_filegroups(self)




    def add_or_modify_filegroups(self):

        localctx = TSqlParser.Add_or_modify_filegroupsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_add_or_modify_filegroups)
        try:
            self.state = 8194
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8170
                self.match(TSqlParser.ADD)
                self.state = 8171
                self.match(TSqlParser.FILEGROUP)
                self.state = 8172
                localctx.filegroup_name = self.id_()
                self.state = 8177
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1051,self._ctx)
                if la_ == 1:
                    self.state = 8173
                    self.match(TSqlParser.CONTAINS)
                    self.state = 8174
                    self.match(TSqlParser.FILESTREAM)

                elif la_ == 2:
                    self.state = 8175
                    self.match(TSqlParser.CONTAINS)
                    self.state = 8176
                    self.match(TSqlParser.MEMORY_OPTIMIZED_DATA)


                pass
            elif token in [781]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8179
                self.match(TSqlParser.REMOVE)
                self.state = 8180
                self.match(TSqlParser.FILEGROUP)
                self.state = 8181
                localctx.filegrou_name = self.id_()
                pass
            elif token in [579]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8182
                self.match(TSqlParser.MODIFY)
                self.state = 8183
                self.match(TSqlParser.FILEGROUP)
                self.state = 8184
                localctx.filegrou_name = self.id_()
                self.state = 8192
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [757, 761, 763, 765]:
                    self.state = 8185
                    self.filegroup_updatability_option()
                    pass
                elif token in [243]:
                    self.state = 8186
                    self.match(TSqlParser.DEFAULT)
                    pass
                elif token in [584]:
                    self.state = 8187
                    self.match(TSqlParser.NAME)
                    self.state = 8188
                    self.match(TSqlParser.EQUAL)
                    self.state = 8189
                    localctx.new_filegroup_name = self.id_()
                    pass
                elif token in [71]:
                    self.state = 8190
                    self.match(TSqlParser.AUTOGROW_SINGLE_FILE)
                    pass
                elif token in [70]:
                    self.state = 8191
                    self.match(TSqlParser.AUTOGROW_ALL_FILES)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Filegroup_updatability_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READONLY(self):
            return self.getToken(TSqlParser.READONLY, 0)

        def READWRITE(self):
            return self.getToken(TSqlParser.READWRITE, 0)

        def READ_ONLY(self):
            return self.getToken(TSqlParser.READ_ONLY, 0)

        def READ_WRITE(self):
            return self.getToken(TSqlParser.READ_WRITE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_filegroup_updatability_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilegroup_updatability_option" ):
                listener.enterFilegroup_updatability_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilegroup_updatability_option" ):
                listener.exitFilegroup_updatability_option(self)




    def filegroup_updatability_option(self):

        localctx = TSqlParser.Filegroup_updatability_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_filegroup_updatability_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8196
            _la = self._input.LA(1)
            if not(((((_la - 757)) & ~0x3f) == 0 and ((1 << (_la - 757)) & 337) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_optionspecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def auto_option(self):
            return self.getTypedRuleContext(TSqlParser.Auto_optionContext,0)


        def change_tracking_option(self):
            return self.getTypedRuleContext(TSqlParser.Change_tracking_optionContext,0)


        def containment_option(self):
            return self.getTypedRuleContext(TSqlParser.Containment_optionContext,0)


        def cursor_option(self):
            return self.getTypedRuleContext(TSqlParser.Cursor_optionContext,0)


        def database_mirroring_option(self):
            return self.getTypedRuleContext(TSqlParser.Database_mirroring_optionContext,0)


        def date_correlation_optimization_option(self):
            return self.getTypedRuleContext(TSqlParser.Date_correlation_optimization_optionContext,0)


        def db_encryption_option(self):
            return self.getTypedRuleContext(TSqlParser.Db_encryption_optionContext,0)


        def db_state_option(self):
            return self.getTypedRuleContext(TSqlParser.Db_state_optionContext,0)


        def db_update_option(self):
            return self.getTypedRuleContext(TSqlParser.Db_update_optionContext,0)


        def db_user_access_option(self):
            return self.getTypedRuleContext(TSqlParser.Db_user_access_optionContext,0)


        def delayed_durability_option(self):
            return self.getTypedRuleContext(TSqlParser.Delayed_durability_optionContext,0)


        def external_access_option(self):
            return self.getTypedRuleContext(TSqlParser.External_access_optionContext,0)


        def FILESTREAM(self):
            return self.getToken(TSqlParser.FILESTREAM, 0)

        def database_filestream_option(self):
            return self.getTypedRuleContext(TSqlParser.Database_filestream_optionContext,0)


        def hadr_options(self):
            return self.getTypedRuleContext(TSqlParser.Hadr_optionsContext,0)


        def mixed_page_allocation_option(self):
            return self.getTypedRuleContext(TSqlParser.Mixed_page_allocation_optionContext,0)


        def parameterization_option(self):
            return self.getTypedRuleContext(TSqlParser.Parameterization_optionContext,0)


        def recovery_option(self):
            return self.getTypedRuleContext(TSqlParser.Recovery_optionContext,0)


        def service_broker_option(self):
            return self.getTypedRuleContext(TSqlParser.Service_broker_optionContext,0)


        def snapshot_option(self):
            return self.getTypedRuleContext(TSqlParser.Snapshot_optionContext,0)


        def sql_option(self):
            return self.getTypedRuleContext(TSqlParser.Sql_optionContext,0)


        def target_recovery_time_option(self):
            return self.getTypedRuleContext(TSqlParser.Target_recovery_time_optionContext,0)


        def termination(self):
            return self.getTypedRuleContext(TSqlParser.TerminationContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_database_optionspec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_optionspec" ):
                listener.enterDatabase_optionspec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_optionspec" ):
                listener.exitDatabase_optionspec(self)




    def database_optionspec(self):

        localctx = TSqlParser.Database_optionspecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_database_optionspec)
        try:
            self.state = 8221
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1054,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8198
                self.auto_option()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8199
                self.change_tracking_option()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8200
                self.containment_option()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8201
                self.cursor_option()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8202
                self.database_mirroring_option()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8203
                self.date_correlation_optimization_option()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8204
                self.db_encryption_option()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 8205
                self.db_state_option()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 8206
                self.db_update_option()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 8207
                self.db_user_access_option()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 8208
                self.delayed_durability_option()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 8209
                self.external_access_option()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 8210
                self.match(TSqlParser.FILESTREAM)
                self.state = 8211
                self.database_filestream_option()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 8212
                self.hadr_options()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 8213
                self.mixed_page_allocation_option()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 8214
                self.parameterization_option()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 8215
                self.recovery_option()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 8216
                self.service_broker_option()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 8217
                self.snapshot_option()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 8218
                self.sql_option()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 8219
                self.target_recovery_time_option()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 8220
                self.termination()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Auto_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO_CLOSE(self):
            return self.getToken(TSqlParser.AUTO_CLOSE, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def AUTO_CREATE_STATISTICS(self):
            return self.getToken(TSqlParser.AUTO_CREATE_STATISTICS, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def INCREMENTAL(self):
            return self.getToken(TSqlParser.INCREMENTAL, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def AUTO_SHRINK(self):
            return self.getToken(TSqlParser.AUTO_SHRINK, 0)

        def AUTO_UPDATE_STATISTICS(self):
            return self.getToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0)

        def AUTO_UPDATE_STATISTICS_ASYNC(self):
            return self.getToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_auto_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuto_option" ):
                listener.enterAuto_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuto_option" ):
                listener.exitAuto_option(self)




    def auto_option(self):

        localctx = TSqlParser.Auto_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_auto_option)
        self._la = 0 # Token type
        try:
            self.state = 8240
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [75]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8223
                self.match(TSqlParser.AUTO_CLOSE)
                self.state = 8224
                self.on_off()
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8225
                self.match(TSqlParser.AUTO_CREATE_STATISTICS)
                self.state = 8226
                self.match(TSqlParser.OFF)
                pass
            elif token in [649]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8227
                self.match(TSqlParser.ON)
                self.state = 8232
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [446]:
                    self.state = 8228
                    self.match(TSqlParser.INCREMENTAL)
                    self.state = 8229
                    self.match(TSqlParser.EQUAL)
                    self.state = 8230
                    self.match(TSqlParser.ON)
                    pass
                elif token in [643]:
                    self.state = 8231
                    self.match(TSqlParser.OFF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8234
                self.match(TSqlParser.AUTO_SHRINK)
                self.state = 8235
                self.on_off()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8236
                self.match(TSqlParser.AUTO_UPDATE_STATISTICS)
                self.state = 8237
                self.on_off()
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 6)
                self.state = 8238
                self.match(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC)
                self.state = 8239
                _la = self._input.LA(1)
                if not(_la==643 or _la==649):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Change_tracking_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE_TRACKING(self):
            return self.getToken(TSqlParser.CHANGE_TRACKING, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def change_tracking_option_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Change_tracking_option_listContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Change_tracking_option_listContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_change_tracking_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_tracking_option" ):
                listener.enterChange_tracking_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_tracking_option" ):
                listener.exitChange_tracking_option(self)




    def change_tracking_option(self):

        localctx = TSqlParser.Change_tracking_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_change_tracking_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8242
            self.match(TSqlParser.CHANGE_TRACKING)
            self.state = 8243
            self.match(TSqlParser.EQUAL)
            self.state = 8261
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [643]:
                self.state = 8244
                self.match(TSqlParser.OFF)
                pass
            elif token in [649]:
                self.state = 8245
                self.match(TSqlParser.ON)
                self.state = 8246
                self.match(TSqlParser.LR_BRACKET)
                self.state = 8257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==74 or _la==127:
                    self.state = 8247
                    self.change_tracking_option_list()
                    self.state = 8252
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1194:
                        self.state = 8248
                        self.match(TSqlParser.COMMA)
                        self.state = 8249
                        self.change_tracking_option_list()
                        self.state = 8254
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 8259
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 8260
                self.match(TSqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Change_tracking_option_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO_CLEANUP(self):
            return self.getToken(TSqlParser.AUTO_CLEANUP, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def CHANGE_RETENTION(self):
            return self.getToken(TSqlParser.CHANGE_RETENTION, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def DAYS(self):
            return self.getToken(TSqlParser.DAYS, 0)

        def HOURS(self):
            return self.getToken(TSqlParser.HOURS, 0)

        def MINUTES(self):
            return self.getToken(TSqlParser.MINUTES, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_change_tracking_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_tracking_option_list" ):
                listener.enterChange_tracking_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_tracking_option_list" ):
                listener.exitChange_tracking_option_list(self)




    def change_tracking_option_list(self):

        localctx = TSqlParser.Change_tracking_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_change_tracking_option_list)
        self._la = 0 # Token type
        try:
            self.state = 8270
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [74]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8263
                self.match(TSqlParser.AUTO_CLEANUP)
                self.state = 8264
                self.match(TSqlParser.EQUAL)
                self.state = 8265
                self.on_off()
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8266
                self.match(TSqlParser.CHANGE_RETENTION)
                self.state = 8267
                self.match(TSqlParser.EQUAL)
                self.state = 8268
                self.match(TSqlParser.DECIMAL)
                self.state = 8269
                _la = self._input.LA(1)
                if not(_la==231 or _la==423 or _la==569):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Containment_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINMENT(self):
            return self.getToken(TSqlParser.CONTAINMENT, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def PARTIAL(self):
            return self.getToken(TSqlParser.PARTIAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_containment_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContainment_option" ):
                listener.enterContainment_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContainment_option" ):
                listener.exitContainment_option(self)




    def containment_option(self):

        localctx = TSqlParser.Containment_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_containment_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8272
            self.match(TSqlParser.CONTAINMENT)
            self.state = 8273
            self.match(TSqlParser.EQUAL)
            self.state = 8274
            _la = self._input.LA(1)
            if not(_la==608 or _la==686):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURSOR_CLOSE_ON_COMMIT(self):
            return self.getToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def CURSOR_DEFAULT(self):
            return self.getToken(TSqlParser.CURSOR_DEFAULT, 0)

        def LOCAL(self):
            return self.getToken(TSqlParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(TSqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_cursor_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_option" ):
                listener.enterCursor_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_option" ):
                listener.exitCursor_option(self)




    def cursor_option(self):

        localctx = TSqlParser.Cursor_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_cursor_option)
        self._la = 0 # Token type
        try:
            self.state = 8280
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [212]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8276
                self.match(TSqlParser.CURSOR_CLOSE_ON_COMMIT)
                self.state = 8277
                self.on_off()
                pass
            elif token in [213]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8278
                self.match(TSqlParser.CURSOR_DEFAULT)
                self.state = 8279
                _la = self._input.LA(1)
                if not(_la==397 or _la==518):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_endpointContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.endpointname = None # Id_Context
            self.login = None # Id_Context
            self.state = None # Token

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def ENDPOINT(self):
            return self.getToken(TSqlParser.ENDPOINT, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def TCP(self):
            return self.getToken(TSqlParser.TCP, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def endpoint_listener_clause(self):
            return self.getTypedRuleContext(TSqlParser.Endpoint_listener_clauseContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def TSQL(self):
            return self.getToken(TSqlParser.TSQL, 0)

        def SERVICE_BROKER(self):
            return self.getToken(TSqlParser.SERVICE_BROKER, 0)

        def endpoint_authentication_clause(self):
            return self.getTypedRuleContext(TSqlParser.Endpoint_authentication_clauseContext,0)


        def DATABASE_MIRRORING(self):
            return self.getToken(TSqlParser.DATABASE_MIRRORING, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def STATE(self):
            return self.getToken(TSqlParser.STATE, 0)

        def WITNESS(self):
            return self.getToken(TSqlParser.WITNESS, 0)

        def PARTNER(self):
            return self.getToken(TSqlParser.PARTNER, 0)

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def STARTED(self):
            return self.getToken(TSqlParser.STARTED, 0)

        def STOPPED(self):
            return self.getToken(TSqlParser.STOPPED, 0)

        def DISABLED(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DISABLED)
            else:
                return self.getToken(TSqlParser.DISABLED, i)

        def endpoint_encryption_alogorithm_clause(self):
            return self.getTypedRuleContext(TSqlParser.Endpoint_encryption_alogorithm_clauseContext,0)


        def MESSAGE_FORWARDING(self):
            return self.getToken(TSqlParser.MESSAGE_FORWARDING, 0)

        def MESSAGE_FORWARD_SIZE(self):
            return self.getToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def ENABLED(self):
            return self.getToken(TSqlParser.ENABLED, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_endpoint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_endpoint" ):
                listener.enterAlter_endpoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_endpoint" ):
                listener.exitAlter_endpoint(self)




    def alter_endpoint(self):

        localctx = TSqlParser.Alter_endpointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_alter_endpoint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8282
            self.match(TSqlParser.ALTER)
            self.state = 8283
            self.match(TSqlParser.ENDPOINT)
            self.state = 8284
            localctx.endpointname = self.id_()
            self.state = 8287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 8285
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 8286
                localctx.login = self.id_()


            self.state = 8292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==929:
                self.state = 8289
                self.match(TSqlParser.STATE)
                self.state = 8290
                self.match(TSqlParser.EQUAL)
                self.state = 8291
                localctx.state = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==269 or _la==926 or _la==943):
                    localctx.state = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 8294
            self.match(TSqlParser.AS)
            self.state = 8295
            self.match(TSqlParser.TCP)
            self.state = 8296
            self.match(TSqlParser.LR_BRACKET)
            self.state = 8297
            self.endpoint_listener_clause()
            self.state = 8298
            self.match(TSqlParser.RR_BRACKET)
            self.state = 8349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1073,self._ctx)
            if la_ == 1:
                self.state = 8299
                self.match(TSqlParser.FOR)
                self.state = 8300
                self.match(TSqlParser.TSQL)
                self.state = 8301
                self.match(TSqlParser.LR_BRACKET)
                self.state = 8302
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.state = 8303
                self.match(TSqlParser.FOR)
                self.state = 8304
                self.match(TSqlParser.SERVICE_BROKER)
                self.state = 8305
                self.match(TSqlParser.LR_BRACKET)
                self.state = 8306
                self.endpoint_authentication_clause()
                self.state = 8311
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1065,self._ctx)
                if la_ == 1:
                    self.state = 8308
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 8307
                        self.match(TSqlParser.COMMA)


                    self.state = 8310
                    self.endpoint_encryption_alogorithm_clause()


                self.state = 8319
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1067,self._ctx)
                if la_ == 1:
                    self.state = 8314
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 8313
                        self.match(TSqlParser.COMMA)


                    self.state = 8316
                    self.match(TSqlParser.MESSAGE_FORWARDING)
                    self.state = 8317
                    self.match(TSqlParser.EQUAL)
                    self.state = 8318
                    _la = self._input.LA(1)
                    if not(_la==269 or _la==291):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 8327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==567 or _la==1194:
                    self.state = 8322
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 8321
                        self.match(TSqlParser.COMMA)


                    self.state = 8324
                    self.match(TSqlParser.MESSAGE_FORWARD_SIZE)
                    self.state = 8325
                    self.match(TSqlParser.EQUAL)
                    self.state = 8326
                    self.match(TSqlParser.DECIMAL)


                self.state = 8329
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.state = 8331
                self.match(TSqlParser.FOR)
                self.state = 8332
                self.match(TSqlParser.DATABASE_MIRRORING)
                self.state = 8333
                self.match(TSqlParser.LR_BRACKET)
                self.state = 8334
                self.endpoint_authentication_clause()
                self.state = 8339
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1071,self._ctx)
                if la_ == 1:
                    self.state = 8336
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 8335
                        self.match(TSqlParser.COMMA)


                    self.state = 8338
                    self.endpoint_encryption_alogorithm_clause()


                self.state = 8342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 8341
                    self.match(TSqlParser.COMMA)


                self.state = 8344
                self.match(TSqlParser.ROLE)
                self.state = 8345
                self.match(TSqlParser.EQUAL)
                self.state = 8346
                _la = self._input.LA(1)
                if not(_la==22 or _la==689 or _la==1067):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8347
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_mirroring_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mirroring_set_option(self):
            return self.getTypedRuleContext(TSqlParser.Mirroring_set_optionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_database_mirroring_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_mirroring_option" ):
                listener.enterDatabase_mirroring_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_mirroring_option" ):
                listener.exitDatabase_mirroring_option(self)




    def database_mirroring_option(self):

        localctx = TSqlParser.Database_mirroring_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_database_mirroring_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8351
            self.mirroring_set_option()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mirroring_set_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mirroring_partner(self):
            return self.getTypedRuleContext(TSqlParser.Mirroring_partnerContext,0)


        def partner_option(self):
            return self.getTypedRuleContext(TSqlParser.Partner_optionContext,0)


        def mirroring_witness(self):
            return self.getTypedRuleContext(TSqlParser.Mirroring_witnessContext,0)


        def witness_option(self):
            return self.getTypedRuleContext(TSqlParser.Witness_optionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_mirroring_set_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMirroring_set_option" ):
                listener.enterMirroring_set_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMirroring_set_option" ):
                listener.exitMirroring_set_option(self)




    def mirroring_set_option(self):

        localctx = TSqlParser.Mirroring_set_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_mirroring_set_option)
        try:
            self.state = 8359
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [689]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8353
                self.mirroring_partner()
                self.state = 8354
                self.partner_option()
                pass
            elif token in [1067]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8356
                self.mirroring_witness()
                self.state = 8357
                self.witness_option()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mirroring_partnerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTNER(self):
            return self.getToken(TSqlParser.PARTNER, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_mirroring_partner

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMirroring_partner" ):
                listener.enterMirroring_partner(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMirroring_partner" ):
                listener.exitMirroring_partner(self)




    def mirroring_partner(self):

        localctx = TSqlParser.Mirroring_partnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_mirroring_partner)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8361
            self.match(TSqlParser.PARTNER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mirroring_witnessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITNESS(self):
            return self.getToken(TSqlParser.WITNESS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_mirroring_witness

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMirroring_witness" ):
                listener.enterMirroring_witness(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMirroring_witness" ):
                listener.exitMirroring_witness(self)




    def mirroring_witness(self):

        localctx = TSqlParser.Mirroring_witnessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_mirroring_witness)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8363
            self.match(TSqlParser.WITNESS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Witness_partner_equalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_witness_partner_equal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWitness_partner_equal" ):
                listener.enterWitness_partner_equal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWitness_partner_equal" ):
                listener.exitWitness_partner_equal(self)




    def witness_partner_equal(self):

        localctx = TSqlParser.Witness_partner_equalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_witness_partner_equal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8365
            self.match(TSqlParser.EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partner_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def witness_partner_equal(self):
            return self.getTypedRuleContext(TSqlParser.Witness_partner_equalContext,0)


        def partner_server(self):
            return self.getTypedRuleContext(TSqlParser.Partner_serverContext,0)


        def FAILOVER(self):
            return self.getToken(TSqlParser.FAILOVER, 0)

        def FORCE_SERVICE_ALLOW_DATA_LOSS(self):
            return self.getToken(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def RESUME(self):
            return self.getToken(TSqlParser.RESUME, 0)

        def SAFETY(self):
            return self.getToken(TSqlParser.SAFETY, 0)

        def FULL(self):
            return self.getToken(TSqlParser.FULL, 0)

        def SUSPEND(self):
            return self.getToken(TSqlParser.SUSPEND, 0)

        def TIMEOUT(self):
            return self.getToken(TSqlParser.TIMEOUT, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_partner_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartner_option" ):
                listener.enterPartner_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartner_option" ):
                listener.exitPartner_option(self)




    def partner_option(self):

        localctx = TSqlParser.Partner_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_partner_option)
        self._la = 0 # Token type
        try:
            self.state = 8379
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1174]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8367
                self.witness_partner_equal()
                self.state = 8368
                self.partner_server()
                pass
            elif token in [331]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8370
                self.match(TSqlParser.FAILOVER)
                pass
            elif token in [370]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8371
                self.match(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS)
                pass
            elif token in [643]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8372
                self.match(TSqlParser.OFF)
                pass
            elif token in [808]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8373
                self.match(TSqlParser.RESUME)
                pass
            elif token in [840]:
                self.enterOuterAlt(localctx, 6)
                self.state = 8374
                self.match(TSqlParser.SAFETY)
                self.state = 8375
                _la = self._input.LA(1)
                if not(_la==379 or _la==643):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [959]:
                self.enterOuterAlt(localctx, 7)
                self.state = 8376
                self.match(TSqlParser.SUSPEND)
                pass
            elif token in [983]:
                self.enterOuterAlt(localctx, 8)
                self.state = 8377
                self.match(TSqlParser.TIMEOUT)
                self.state = 8378
                self.match(TSqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Witness_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def witness_partner_equal(self):
            return self.getTypedRuleContext(TSqlParser.Witness_partner_equalContext,0)


        def witness_server(self):
            return self.getTypedRuleContext(TSqlParser.Witness_serverContext,0)


        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_witness_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWitness_option" ):
                listener.enterWitness_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWitness_option" ):
                listener.exitWitness_option(self)




    def witness_option(self):

        localctx = TSqlParser.Witness_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_witness_option)
        try:
            self.state = 8385
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1174]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8381
                self.witness_partner_equal()
                self.state = 8382
                self.witness_server()
                pass
            elif token in [643]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8384
                self.match(TSqlParser.OFF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Witness_serverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partner_server(self):
            return self.getTypedRuleContext(TSqlParser.Partner_serverContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_witness_server

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWitness_server" ):
                listener.enterWitness_server(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWitness_server" ):
                listener.exitWitness_server(self)




    def witness_server(self):

        localctx = TSqlParser.Witness_serverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_witness_server)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8387
            self.partner_server()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partner_serverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partner_server_tcp_prefix(self):
            return self.getTypedRuleContext(TSqlParser.Partner_server_tcp_prefixContext,0)


        def host(self):
            return self.getTypedRuleContext(TSqlParser.HostContext,0)


        def mirroring_host_port_seperator(self):
            return self.getTypedRuleContext(TSqlParser.Mirroring_host_port_seperatorContext,0)


        def port_number(self):
            return self.getTypedRuleContext(TSqlParser.Port_numberContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_partner_server

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartner_server" ):
                listener.enterPartner_server(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartner_server" ):
                listener.exitPartner_server(self)




    def partner_server(self):

        localctx = TSqlParser.Partner_serverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_partner_server)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8389
            self.partner_server_tcp_prefix()
            self.state = 8390
            self.host()
            self.state = 8391
            self.mirroring_host_port_seperator()
            self.state = 8392
            self.port_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mirroring_host_port_seperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(TSqlParser.COLON, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_mirroring_host_port_seperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMirroring_host_port_seperator" ):
                listener.enterMirroring_host_port_seperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMirroring_host_port_seperator" ):
                listener.exitMirroring_host_port_seperator(self)




    def mirroring_host_port_seperator(self):

        localctx = TSqlParser.Mirroring_host_port_seperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_mirroring_host_port_seperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8394
            self.match(TSqlParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partner_server_tcp_prefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TCP(self):
            return self.getToken(TSqlParser.TCP, 0)

        def COLON(self):
            return self.getToken(TSqlParser.COLON, 0)

        def DOUBLE_FORWARD_SLASH(self):
            return self.getToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_partner_server_tcp_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartner_server_tcp_prefix" ):
                listener.enterPartner_server_tcp_prefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartner_server_tcp_prefix" ):
                listener.exitPartner_server_tcp_prefix(self)




    def partner_server_tcp_prefix(self):

        localctx = TSqlParser.Partner_server_tcp_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_partner_server_tcp_prefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8396
            self.match(TSqlParser.TCP)
            self.state = 8397
            self.match(TSqlParser.COLON)
            self.state = 8398
            self.match(TSqlParser.DOUBLE_FORWARD_SLASH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Port_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.port = None # Token

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_port_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPort_number" ):
                listener.enterPort_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPort_number" ):
                listener.exitPort_number(self)




    def port_number(self):

        localctx = TSqlParser.Port_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_port_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8400
            localctx.port = self.match(TSqlParser.DECIMAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HostContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def host(self):
            return self.getTypedRuleContext(TSqlParser.HostContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_host

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHost" ):
                listener.enterHost(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHost" ):
                listener.exitHost(self)




    def host(self):

        localctx = TSqlParser.HostContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_host)
        try:
            self.state = 8412
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1078,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8402
                self.id_()
                self.state = 8403
                self.match(TSqlParser.DOT)
                self.state = 8404
                self.host()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8410
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1077,self._ctx)
                if la_ == 1:
                    self.state = 8406
                    self.id_()
                    self.state = 8407
                    self.match(TSqlParser.DOT)
                    pass

                elif la_ == 2:
                    self.state = 8409
                    self.id_()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_correlation_optimization_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_CORRELATION_OPTIMIZATION(self):
            return self.getToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_date_correlation_optimization_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_correlation_optimization_option" ):
                listener.enterDate_correlation_optimization_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_correlation_optimization_option" ):
                listener.exitDate_correlation_optimization_option(self)




    def date_correlation_optimization_option(self):

        localctx = TSqlParser.Date_correlation_optimization_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_date_correlation_optimization_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8414
            self.match(TSqlParser.DATE_CORRELATION_OPTIMIZATION)
            self.state = 8415
            self.on_off()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Db_encryption_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_db_encryption_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_encryption_option" ):
                listener.enterDb_encryption_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_encryption_option" ):
                listener.exitDb_encryption_option(self)




    def db_encryption_option(self):

        localctx = TSqlParser.Db_encryption_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_db_encryption_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8417
            self.match(TSqlParser.ENCRYPTION)
            self.state = 8418
            self.on_off()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Db_state_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONLINE(self):
            return self.getToken(TSqlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(TSqlParser.OFFLINE, 0)

        def EMERGENCY(self):
            return self.getToken(TSqlParser.EMERGENCY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_db_state_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_state_option" ):
                listener.enterDb_state_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_state_option" ):
                listener.exitDb_state_option(self)




    def db_state_option(self):

        localctx = TSqlParser.Db_state_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_db_state_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8420
            _la = self._input.LA(1)
            if not(_la==288 or _la==644 or _la==650):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Db_update_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ_ONLY(self):
            return self.getToken(TSqlParser.READ_ONLY, 0)

        def READ_WRITE(self):
            return self.getToken(TSqlParser.READ_WRITE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_db_update_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_update_option" ):
                listener.enterDb_update_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_update_option" ):
                listener.exitDb_update_option(self)




    def db_update_option(self):

        localctx = TSqlParser.Db_update_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_db_update_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8422
            _la = self._input.LA(1)
            if not(_la==763 or _la==765):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Db_user_access_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SINGLE_USER(self):
            return self.getToken(TSqlParser.SINGLE_USER, 0)

        def RESTRICTED_USER(self):
            return self.getToken(TSqlParser.RESTRICTED_USER, 0)

        def MULTI_USER(self):
            return self.getToken(TSqlParser.MULTI_USER, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_db_user_access_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_user_access_option" ):
                listener.enterDb_user_access_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_user_access_option" ):
                listener.exitDb_user_access_option(self)




    def db_user_access_option(self):

        localctx = TSqlParser.Db_user_access_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_db_user_access_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8424
            _la = self._input.LA(1)
            if not(_la==582 or _la==806 or _la==904):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delayed_durability_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELAYED_DURABILITY(self):
            return self.getToken(TSqlParser.DELAYED_DURABILITY, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def DISABLED(self):
            return self.getToken(TSqlParser.DISABLED, 0)

        def ALLOWED(self):
            return self.getToken(TSqlParser.ALLOWED, 0)

        def FORCED(self):
            return self.getToken(TSqlParser.FORCED, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_delayed_durability_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelayed_durability_option" ):
                listener.enterDelayed_durability_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelayed_durability_option" ):
                listener.exitDelayed_durability_option(self)




    def delayed_durability_option(self):

        localctx = TSqlParser.Delayed_durability_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_delayed_durability_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8426
            self.match(TSqlParser.DELAYED_DURABILITY)
            self.state = 8427
            self.match(TSqlParser.EQUAL)
            self.state = 8428
            _la = self._input.LA(1)
            if not(_la==23 or _la==269 or _la==365):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_access_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DB_CHAINING(self):
            return self.getToken(TSqlParser.DB_CHAINING, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def TRUSTWORTHY(self):
            return self.getToken(TSqlParser.TRUSTWORTHY, 0)

        def DEFAULT_LANGUAGE(self):
            return self.getToken(TSqlParser.DEFAULT_LANGUAGE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def DEFAULT_FULLTEXT_LANGUAGE(self):
            return self.getToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0)

        def NESTED_TRIGGERS(self):
            return self.getToken(TSqlParser.NESTED_TRIGGERS, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def TRANSFORM_NOISE_WORDS(self):
            return self.getToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0)

        def TWO_DIGIT_YEAR_CUTOFF(self):
            return self.getToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_external_access_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_access_option" ):
                listener.enterExternal_access_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_access_option" ):
                listener.exitExternal_access_option(self)




    def external_access_option(self):

        localctx = TSqlParser.External_access_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_external_access_option)
        self._la = 0 # Token type
        try:
            self.state = 8455
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [234]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8430
                self.match(TSqlParser.DB_CHAINING)
                self.state = 8431
                self.on_off()
                pass
            elif token in [1004]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8432
                self.match(TSqlParser.TRUSTWORTHY)
                self.state = 8433
                self.on_off()
                pass
            elif token in [247]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8434
                self.match(TSqlParser.DEFAULT_LANGUAGE)
                self.state = 8435
                self.match(TSqlParser.EQUAL)
                self.state = 8438
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                    self.state = 8436
                    self.id_()
                    pass
                elif token in [1170]:
                    self.state = 8437
                    self.match(TSqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [246]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8440
                self.match(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE)
                self.state = 8441
                self.match(TSqlParser.EQUAL)
                self.state = 8444
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                    self.state = 8442
                    self.id_()
                    pass
                elif token in [1170]:
                    self.state = 8443
                    self.match(TSqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [588]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8446
                self.match(TSqlParser.NESTED_TRIGGERS)
                self.state = 8447
                self.match(TSqlParser.EQUAL)
                self.state = 8448
                _la = self._input.LA(1)
                if not(_la==643 or _la==649):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [997]:
                self.enterOuterAlt(localctx, 6)
                self.state = 8449
                self.match(TSqlParser.TRANSFORM_NOISE_WORDS)
                self.state = 8450
                self.match(TSqlParser.EQUAL)
                self.state = 8451
                _la = self._input.LA(1)
                if not(_la==643 or _la==649):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [1009]:
                self.enterOuterAlt(localctx, 7)
                self.state = 8452
                self.match(TSqlParser.TWO_DIGIT_YEAR_CUTOFF)
                self.state = 8453
                self.match(TSqlParser.EQUAL)
                self.state = 8454
                self.match(TSqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hadr_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.availability_group_name = None # Id_Context

        def HADR(self):
            return self.getToken(TSqlParser.HADR, 0)

        def SUSPEND(self):
            return self.getToken(TSqlParser.SUSPEND, 0)

        def RESUME(self):
            return self.getToken(TSqlParser.RESUME, 0)

        def AVAILABILITY(self):
            return self.getToken(TSqlParser.AVAILABILITY, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_hadr_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHadr_options" ):
                listener.enterHadr_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHadr_options" ):
                listener.exitHadr_options(self)




    def hadr_options(self):

        localctx = TSqlParser.Hadr_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_hadr_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8457
            self.match(TSqlParser.HADR)
            self.state = 8466
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [81, 643]:
                self.state = 8463
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [81]:
                    self.state = 8458
                    self.match(TSqlParser.AVAILABILITY)
                    self.state = 8459
                    self.match(TSqlParser.GROUP)
                    self.state = 8460
                    self.match(TSqlParser.EQUAL)
                    self.state = 8461
                    localctx.availability_group_name = self.id_()
                    pass
                elif token in [643]:
                    self.state = 8462
                    self.match(TSqlParser.OFF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [808, 959]:
                self.state = 8465
                _la = self._input.LA(1)
                if not(_la==808 or _la==959):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mixed_page_allocation_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MIXED_PAGE_ALLOCATION(self):
            return self.getToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_mixed_page_allocation_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMixed_page_allocation_option" ):
                listener.enterMixed_page_allocation_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMixed_page_allocation_option" ):
                listener.exitMixed_page_allocation_option(self)




    def mixed_page_allocation_option(self):

        localctx = TSqlParser.Mixed_page_allocation_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_mixed_page_allocation_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8468
            self.match(TSqlParser.MIXED_PAGE_ALLOCATION)
            self.state = 8469
            _la = self._input.LA(1)
            if not(_la==643 or _la==649):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameterization_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMETERIZATION(self):
            return self.getToken(TSqlParser.PARAMETERIZATION, 0)

        def SIMPLE(self):
            return self.getToken(TSqlParser.SIMPLE, 0)

        def FORCED(self):
            return self.getToken(TSqlParser.FORCED, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_parameterization_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterization_option" ):
                listener.enterParameterization_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterization_option" ):
                listener.exitParameterization_option(self)




    def parameterization_option(self):

        localctx = TSqlParser.Parameterization_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_parameterization_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8471
            self.match(TSqlParser.PARAMETERIZATION)
            self.state = 8472
            _la = self._input.LA(1)
            if not(_la==365 or _la==903):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recovery_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECOVERY(self):
            return self.getToken(TSqlParser.RECOVERY, 0)

        def FULL(self):
            return self.getToken(TSqlParser.FULL, 0)

        def BULK_LOGGED(self):
            return self.getToken(TSqlParser.BULK_LOGGED, 0)

        def SIMPLE(self):
            return self.getToken(TSqlParser.SIMPLE, 0)

        def TORN_PAGE_DETECTION(self):
            return self.getToken(TSqlParser.TORN_PAGE_DETECTION, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def ACCELERATED_DATABASE_RECOVERY(self):
            return self.getToken(TSqlParser.ACCELERATED_DATABASE_RECOVERY, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def PAGE_VERIFY(self):
            return self.getToken(TSqlParser.PAGE_VERIFY, 0)

        def CHECKSUM(self):
            return self.getToken(TSqlParser.CHECKSUM, 0)

        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_recovery_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecovery_option" ):
                listener.enterRecovery_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecovery_option" ):
                listener.exitRecovery_option(self)




    def recovery_option(self):

        localctx = TSqlParser.Recovery_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_recovery_option)
        self._la = 0 # Token type
        try:
            self.state = 8483
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [771]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8474
                self.match(TSqlParser.RECOVERY)
                self.state = 8475
                _la = self._input.LA(1)
                if not(_la==109 or _la==379 or _la==903):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [988]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8476
                self.match(TSqlParser.TORN_PAGE_DETECTION)
                self.state = 8477
                self.on_off()
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8478
                self.match(TSqlParser.ACCELERATED_DATABASE_RECOVERY)
                self.state = 8479
                self.match(TSqlParser.EQUAL)
                self.state = 8480
                self.on_off()
                pass
            elif token in [679]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8481
                self.match(TSqlParser.PAGE_VERIFY)
                self.state = 8482
                _la = self._input.LA(1)
                if not(_la==138 or _la==608 or _la==988):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Service_broker_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE_BROKER(self):
            return self.getToken(TSqlParser.ENABLE_BROKER, 0)

        def DISABLE_BROKER(self):
            return self.getToken(TSqlParser.DISABLE_BROKER, 0)

        def NEW_BROKER(self):
            return self.getToken(TSqlParser.NEW_BROKER, 0)

        def ERROR_BROKER_CONVERSATIONS(self):
            return self.getToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0)

        def HONOR_BROKER_PRIORITY(self):
            return self.getToken(TSqlParser.HONOR_BROKER_PRIORITY, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_service_broker_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterService_broker_option" ):
                listener.enterService_broker_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitService_broker_option" ):
                listener.exitService_broker_option(self)




    def service_broker_option(self):

        localctx = TSqlParser.Service_broker_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_service_broker_option)
        try:
            self.state = 8491
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [292]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8485
                self.match(TSqlParser.ENABLE_BROKER)
                pass
            elif token in [270]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8486
                self.match(TSqlParser.DISABLE_BROKER)
                pass
            elif token in [593]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8487
                self.match(TSqlParser.NEW_BROKER)
                pass
            elif token in [302]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8488
                self.match(TSqlParser.ERROR_BROKER_CONVERSATIONS)
                pass
            elif token in [420]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8489
                self.match(TSqlParser.HONOR_BROKER_PRIORITY)
                self.state = 8490
                self.on_off()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Snapshot_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = None # Token

        def ALLOW_SNAPSHOT_ISOLATION(self):
            return self.getToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def READ_COMMITTED_SNAPSHOT(self):
            return self.getToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_snapshot_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSnapshot_option" ):
                listener.enterSnapshot_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSnapshot_option" ):
                listener.exitSnapshot_option(self)




    def snapshot_option(self):

        localctx = TSqlParser.Snapshot_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_snapshot_option)
        self._la = 0 # Token type
        try:
            self.state = 8498
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8493
                self.match(TSqlParser.ALLOW_SNAPSHOT_ISOLATION)
                self.state = 8494
                self.on_off()
                pass
            elif token in [762]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8495
                self.match(TSqlParser.READ_COMMITTED_SNAPSHOT)
                self.state = 8496
                _la = self._input.LA(1)
                if not(_la==643 or _la==649):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [643, 649]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8497
                localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==643 or _la==649):
                    localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANSI_NULL_DEFAULT(self):
            return self.getToken(TSqlParser.ANSI_NULL_DEFAULT, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def ANSI_NULLS(self):
            return self.getToken(TSqlParser.ANSI_NULLS, 0)

        def ANSI_PADDING(self):
            return self.getToken(TSqlParser.ANSI_PADDING, 0)

        def ANSI_WARNINGS(self):
            return self.getToken(TSqlParser.ANSI_WARNINGS, 0)

        def ARITHABORT(self):
            return self.getToken(TSqlParser.ARITHABORT, 0)

        def COMPATIBILITY_LEVEL(self):
            return self.getToken(TSqlParser.COMPATIBILITY_LEVEL, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def CONCAT_NULL_YIELDS_NULL(self):
            return self.getToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0)

        def NUMERIC_ROUNDABORT(self):
            return self.getToken(TSqlParser.NUMERIC_ROUNDABORT, 0)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(TSqlParser.QUOTED_IDENTIFIER, 0)

        def RECURSIVE_TRIGGERS(self):
            return self.getToken(TSqlParser.RECURSIVE_TRIGGERS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_sql_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_option" ):
                listener.enterSql_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_option" ):
                listener.exitSql_option(self)




    def sql_option(self):

        localctx = TSqlParser.Sql_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_sql_option)
        try:
            self.state = 8521
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8500
                self.match(TSqlParser.ANSI_NULL_DEFAULT)
                self.state = 8501
                self.on_off()
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8502
                self.match(TSqlParser.ANSI_NULLS)
                self.state = 8503
                self.on_off()
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8504
                self.match(TSqlParser.ANSI_PADDING)
                self.state = 8505
                self.on_off()
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8506
                self.match(TSqlParser.ANSI_WARNINGS)
                self.state = 8507
                self.on_off()
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8508
                self.match(TSqlParser.ARITHABORT)
                self.state = 8509
                self.on_off()
                pass
            elif token in [164]:
                self.enterOuterAlt(localctx, 6)
                self.state = 8510
                self.match(TSqlParser.COMPATIBILITY_LEVEL)
                self.state = 8511
                self.match(TSqlParser.EQUAL)
                self.state = 8512
                self.match(TSqlParser.DECIMAL)
                pass
            elif token in [171]:
                self.enterOuterAlt(localctx, 7)
                self.state = 8513
                self.match(TSqlParser.CONCAT_NULL_YIELDS_NULL)
                self.state = 8514
                self.on_off()
                pass
            elif token in [634]:
                self.enterOuterAlt(localctx, 8)
                self.state = 8515
                self.match(TSqlParser.NUMERIC_ROUNDABORT)
                self.state = 8516
                self.on_off()
                pass
            elif token in [743]:
                self.enterOuterAlt(localctx, 9)
                self.state = 8517
                self.match(TSqlParser.QUOTED_IDENTIFIER)
                self.state = 8518
                self.on_off()
                pass
            elif token in [772]:
                self.enterOuterAlt(localctx, 10)
                self.state = 8519
                self.match(TSqlParser.RECURSIVE_TRIGGERS)
                self.state = 8520
                self.on_off()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_recovery_time_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TARGET_RECOVERY_TIME(self):
            return self.getToken(TSqlParser.TARGET_RECOVERY_TIME, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def SECONDS(self):
            return self.getToken(TSqlParser.SECONDS, 0)

        def MINUTES(self):
            return self.getToken(TSqlParser.MINUTES, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_target_recovery_time_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_recovery_time_option" ):
                listener.enterTarget_recovery_time_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_recovery_time_option" ):
                listener.exitTarget_recovery_time_option(self)




    def target_recovery_time_option(self):

        localctx = TSqlParser.Target_recovery_time_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_target_recovery_time_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8523
            self.match(TSqlParser.TARGET_RECOVERY_TIME)
            self.state = 8524
            self.match(TSqlParser.EQUAL)
            self.state = 8525
            self.match(TSqlParser.DECIMAL)
            self.state = 8526
            _la = self._input.LA(1)
            if not(_la==569 or _la==858):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TerminationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.seconds = None # Token

        def ROLLBACK(self):
            return self.getToken(TSqlParser.ROLLBACK, 0)

        def AFTER(self):
            return self.getToken(TSqlParser.AFTER, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def IMMEDIATE(self):
            return self.getToken(TSqlParser.IMMEDIATE, 0)

        def NO_WAIT(self):
            return self.getToken(TSqlParser.NO_WAIT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_termination

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTermination" ):
                listener.enterTermination(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTermination" ):
                listener.exitTermination(self)




    def termination(self):

        localctx = TSqlParser.TerminationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_termination)
        try:
            self.state = 8534
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1088,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8528
                self.match(TSqlParser.ROLLBACK)
                self.state = 8529
                self.match(TSqlParser.AFTER)
                self.state = 8530
                localctx.seconds = self.match(TSqlParser.DECIMAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8531
                self.match(TSqlParser.ROLLBACK)
                self.state = 8532
                self.match(TSqlParser.IMMEDIATE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8533
                self.match(TSqlParser.NO_WAIT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def INDEX(self):
            return self.getToken(TSqlParser.INDEX, 0)

        def drop_relational_or_xml_or_spatial_index(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Drop_relational_or_xml_or_spatial_indexContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Drop_relational_or_xml_or_spatial_indexContext,i)


        def drop_backward_compatible_index(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Drop_backward_compatible_indexContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Drop_backward_compatible_indexContext,i)


        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_index" ):
                listener.enterDrop_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_index" ):
                listener.exitDrop_index(self)




    def drop_index(self):

        localctx = TSqlParser.Drop_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_drop_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8536
            self.match(TSqlParser.DROP)
            self.state = 8537
            self.match(TSqlParser.INDEX)
            self.state = 8540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==431:
                self.state = 8538
                self.match(TSqlParser.IF)
                self.state = 8539
                self.match(TSqlParser.EXISTS)


            self.state = 8558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1092,self._ctx)
            if la_ == 1:
                self.state = 8542
                self.drop_relational_or_xml_or_spatial_index()
                self.state = 8547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 8543
                    self.match(TSqlParser.COMMA)
                    self.state = 8544
                    self.drop_relational_or_xml_or_spatial_index()
                    self.state = 8549
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 8550
                self.drop_backward_compatible_index()
                self.state = 8555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 8551
                    self.match(TSqlParser.COMMA)
                    self.state = 8552
                    self.drop_backward_compatible_index()
                    self.state = 8557
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 8561
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1093,self._ctx)
            if la_ == 1:
                self.state = 8560
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_relational_or_xml_or_spatial_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index_name = None # Id_Context

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_table_nameContext,0)


        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_relational_or_xml_or_spatial_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_relational_or_xml_or_spatial_index" ):
                listener.enterDrop_relational_or_xml_or_spatial_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_relational_or_xml_or_spatial_index" ):
                listener.exitDrop_relational_or_xml_or_spatial_index(self)




    def drop_relational_or_xml_or_spatial_index(self):

        localctx = TSqlParser.Drop_relational_or_xml_or_spatial_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_drop_relational_or_xml_or_spatial_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8563
            localctx.index_name = self.id_()
            self.state = 8564
            self.match(TSqlParser.ON)
            self.state = 8565
            self.full_table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_backward_compatible_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.owner_name = None # Id_Context
            self.table_or_view_name = None # Id_Context
            self.index_name = None # Id_Context

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_backward_compatible_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_backward_compatible_index" ):
                listener.enterDrop_backward_compatible_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_backward_compatible_index" ):
                listener.exitDrop_backward_compatible_index(self)




    def drop_backward_compatible_index(self):

        localctx = TSqlParser.Drop_backward_compatible_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_drop_backward_compatible_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1094,self._ctx)
            if la_ == 1:
                self.state = 8567
                localctx.owner_name = self.id_()
                self.state = 8568
                self.match(TSqlParser.DOT)


            self.state = 8572
            localctx.table_or_view_name = self.id_()
            self.state = 8573
            self.match(TSqlParser.DOT)
            self.state = 8574
            localctx.index_name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_procedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.proc = None # Token

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def func_proc_name_schema(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Func_proc_name_schemaContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Func_proc_name_schemaContext,i)


        def PROC(self):
            return self.getToken(TSqlParser.PROC, 0)

        def PROCEDURE(self):
            return self.getToken(TSqlParser.PROCEDURE, 0)

        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_procedure" ):
                listener.enterDrop_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_procedure" ):
                listener.exitDrop_procedure(self)




    def drop_procedure(self):

        localctx = TSqlParser.Drop_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_drop_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8576
            self.match(TSqlParser.DROP)
            self.state = 8577
            localctx.proc = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==726 or _la==728):
                localctx.proc = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 8580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==431:
                self.state = 8578
                self.match(TSqlParser.IF)
                self.state = 8579
                self.match(TSqlParser.EXISTS)


            self.state = 8582
            self.func_proc_name_schema()
            self.state = 8587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 8583
                self.match(TSqlParser.COMMA)
                self.state = 8584
                self.func_proc_name_schema()
                self.state = 8589
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 8591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1097,self._ctx)
            if la_ == 1:
                self.state = 8590
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_triggerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def drop_dml_trigger(self):
            return self.getTypedRuleContext(TSqlParser.Drop_dml_triggerContext,0)


        def drop_ddl_trigger(self):
            return self.getTypedRuleContext(TSqlParser.Drop_ddl_triggerContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_trigger" ):
                listener.enterDrop_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_trigger" ):
                listener.exitDrop_trigger(self)




    def drop_trigger(self):

        localctx = TSqlParser.Drop_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_drop_trigger)
        try:
            self.state = 8595
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1098,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8593
                self.drop_dml_trigger()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8594
                self.drop_ddl_trigger()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_dml_triggerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def TRIGGER(self):
            return self.getToken(TSqlParser.TRIGGER, 0)

        def simple_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Simple_nameContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Simple_nameContext,i)


        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_dml_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_dml_trigger" ):
                listener.enterDrop_dml_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_dml_trigger" ):
                listener.exitDrop_dml_trigger(self)




    def drop_dml_trigger(self):

        localctx = TSqlParser.Drop_dml_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_drop_dml_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8597
            self.match(TSqlParser.DROP)
            self.state = 8598
            self.match(TSqlParser.TRIGGER)
            self.state = 8601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==431:
                self.state = 8599
                self.match(TSqlParser.IF)
                self.state = 8600
                self.match(TSqlParser.EXISTS)


            self.state = 8603
            self.simple_name()
            self.state = 8608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 8604
                self.match(TSqlParser.COMMA)
                self.state = 8605
                self.simple_name()
                self.state = 8610
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 8612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1101,self._ctx)
            if la_ == 1:
                self.state = 8611
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_ddl_triggerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def TRIGGER(self):
            return self.getToken(TSqlParser.TRIGGER, 0)

        def simple_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Simple_nameContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Simple_nameContext,i)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_ddl_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_ddl_trigger" ):
                listener.enterDrop_ddl_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_ddl_trigger" ):
                listener.exitDrop_ddl_trigger(self)




    def drop_ddl_trigger(self):

        localctx = TSqlParser.Drop_ddl_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_drop_ddl_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8614
            self.match(TSqlParser.DROP)
            self.state = 8615
            self.match(TSqlParser.TRIGGER)
            self.state = 8618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==431:
                self.state = 8616
                self.match(TSqlParser.IF)
                self.state = 8617
                self.match(TSqlParser.EXISTS)


            self.state = 8620
            self.simple_name()
            self.state = 8625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 8621
                self.match(TSqlParser.COMMA)
                self.state = 8622
                self.simple_name()
                self.state = 8627
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 8628
            self.match(TSqlParser.ON)
            self.state = 8632
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [217]:
                self.state = 8629
                self.match(TSqlParser.DATABASE)
                pass
            elif token in [22]:
                self.state = 8630
                self.match(TSqlParser.ALL)
                self.state = 8631
                self.match(TSqlParser.SERVER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 8635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1105,self._ctx)
            if la_ == 1:
                self.state = 8634
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(TSqlParser.FUNCTION, 0)

        def func_proc_name_schema(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Func_proc_name_schemaContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Func_proc_name_schemaContext,i)


        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_function" ):
                listener.enterDrop_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_function" ):
                listener.exitDrop_function(self)




    def drop_function(self):

        localctx = TSqlParser.Drop_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_drop_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8637
            self.match(TSqlParser.DROP)
            self.state = 8638
            self.match(TSqlParser.FUNCTION)
            self.state = 8641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==431:
                self.state = 8639
                self.match(TSqlParser.IF)
                self.state = 8640
                self.match(TSqlParser.EXISTS)


            self.state = 8643
            self.func_proc_name_schema()
            self.state = 8648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 8644
                self.match(TSqlParser.COMMA)
                self.state = 8645
                self.func_proc_name_schema()
                self.state = 8650
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 8652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1108,self._ctx)
            if la_ == 1:
                self.state = 8651
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_statisticsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Id_Context

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def STATISTICS(self):
            return self.getToken(TSqlParser.STATISTICS, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Table_nameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_statistics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_statistics" ):
                listener.enterDrop_statistics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_statistics" ):
                listener.exitDrop_statistics(self)




    def drop_statistics(self):

        localctx = TSqlParser.Drop_statisticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_drop_statistics)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8654
            self.match(TSqlParser.DROP)
            self.state = 8655
            self.match(TSqlParser.STATISTICS)
            self.state = 8665 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 8657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 8656
                    self.match(TSqlParser.COMMA)


                self.state = 8662
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1110,self._ctx)
                if la_ == 1:
                    self.state = 8659
                    self.table_name()
                    self.state = 8660
                    self.match(TSqlParser.DOT)


                self.state = 8664
                localctx.name = self.id_()
                self.state = 8667 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6845834611130385) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4691064178111676937) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8067776519934725599) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387491794949) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714895912701) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755875440852549633) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873769796032868641) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510937462965505) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799299309863) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -651161675377934355) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -387309693044787745) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689521) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906573) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 4294967467) != 0)):
                    break

            self.state = 8669
            self.match(TSqlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def TABLE(self):
            return self.getToken(TSqlParser.TABLE, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Table_nameContext,i)


        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_table" ):
                listener.enterDrop_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_table" ):
                listener.exitDrop_table(self)




    def drop_table(self):

        localctx = TSqlParser.Drop_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_drop_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8671
            self.match(TSqlParser.DROP)
            self.state = 8672
            self.match(TSqlParser.TABLE)
            self.state = 8675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==431:
                self.state = 8673
                self.match(TSqlParser.IF)
                self.state = 8674
                self.match(TSqlParser.EXISTS)


            self.state = 8677
            self.table_name()
            self.state = 8682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 8678
                self.match(TSqlParser.COMMA)
                self.state = 8679
                self.table_name()
                self.state = 8684
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 8686
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1114,self._ctx)
            if la_ == 1:
                self.state = 8685
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_viewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def VIEW(self):
            return self.getToken(TSqlParser.VIEW, 0)

        def simple_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Simple_nameContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Simple_nameContext,i)


        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_view" ):
                listener.enterDrop_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_view" ):
                listener.exitDrop_view(self)




    def drop_view(self):

        localctx = TSqlParser.Drop_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_drop_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8688
            self.match(TSqlParser.DROP)
            self.state = 8689
            self.match(TSqlParser.VIEW)
            self.state = 8692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==431:
                self.state = 8690
                self.match(TSqlParser.IF)
                self.state = 8691
                self.match(TSqlParser.EXISTS)


            self.state = 8694
            self.simple_name()
            self.state = 8699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 8695
                self.match(TSqlParser.COMMA)
                self.state = 8696
                self.simple_name()
                self.state = 8701
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 8703
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1117,self._ctx)
            if la_ == 1:
                self.state = 8702
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Simple_nameContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def simple_name(self):
            return self.getTypedRuleContext(TSqlParser.Simple_nameContext,0)


        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def TABLE(self):
            return self.getToken(TSqlParser.TABLE, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_def_table_constraints(self):
            return self.getTypedRuleContext(TSqlParser.Column_def_table_constraintsContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def null_notnull(self):
            return self.getTypedRuleContext(TSqlParser.Null_notnullContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_create_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type" ):
                listener.enterCreate_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type" ):
                listener.exitCreate_type(self)




    def create_type(self):

        localctx = TSqlParser.Create_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_create_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8705
            self.match(TSqlParser.CREATE)
            self.state = 8706
            self.match(TSqlParser.TYPE)
            self.state = 8707
            localctx.name = self.simple_name()
            self.state = 8713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==378:
                self.state = 8708
                self.match(TSqlParser.FROM)
                self.state = 8709
                self.data_type()
                self.state = 8711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==614 or _la==630:
                    self.state = 8710
                    self.null_notnull()




            self.state = 8721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 8715
                self.match(TSqlParser.AS)
                self.state = 8716
                self.match(TSqlParser.TABLE)
                self.state = 8717
                self.match(TSqlParser.LR_BRACKET)
                self.state = 8718
                self.column_def_table_constraints()
                self.state = 8719
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Simple_nameContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def simple_name(self):
            return self.getTypedRuleContext(TSqlParser.Simple_nameContext,0)


        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_type" ):
                listener.enterDrop_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_type" ):
                listener.exitDrop_type(self)




    def drop_type(self):

        localctx = TSqlParser.Drop_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_drop_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8723
            self.match(TSqlParser.DROP)
            self.state = 8724
            self.match(TSqlParser.TYPE)
            self.state = 8727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==431:
                self.state = 8725
                self.match(TSqlParser.IF)
                self.state = 8726
                self.match(TSqlParser.EXISTS)


            self.state = 8729
            localctx.name = self.simple_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rowset_function_limitedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openquery(self):
            return self.getTypedRuleContext(TSqlParser.OpenqueryContext,0)


        def opendatasource(self):
            return self.getTypedRuleContext(TSqlParser.OpendatasourceContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_rowset_function_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowset_function_limited" ):
                listener.enterRowset_function_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowset_function_limited" ):
                listener.exitRowset_function_limited(self)




    def rowset_function_limited(self):

        localctx = TSqlParser.Rowset_function_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_rowset_function_limited)
        try:
            self.state = 8733
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [656]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8731
                self.openquery()
                pass
            elif token in [654]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8732
                self.opendatasource()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.linked_server = None # Id_Context
            self.query = None # Token

        def OPENQUERY(self):
            return self.getToken(TSqlParser.OPENQUERY, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_openquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenquery" ):
                listener.enterOpenquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenquery" ):
                listener.exitOpenquery(self)




    def openquery(self):

        localctx = TSqlParser.OpenqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_openquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8735
            self.match(TSqlParser.OPENQUERY)
            self.state = 8736
            self.match(TSqlParser.LR_BRACKET)
            self.state = 8737
            localctx.linked_server = self.id_()
            self.state = 8738
            self.match(TSqlParser.COMMA)
            self.state = 8739
            localctx.query = self.match(TSqlParser.STRING)
            self.state = 8740
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpendatasourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider = None # Token
            self.init = None # Token
            self.database = None # Id_Context
            self.scheme = None # Id_Context
            self.table = None # Id_Context

        def OPENDATASOURCE(self):
            return self.getToken(TSqlParser.OPENDATASOURCE, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_opendatasource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpendatasource" ):
                listener.enterOpendatasource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpendatasource" ):
                listener.exitOpendatasource(self)




    def opendatasource(self):

        localctx = TSqlParser.OpendatasourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_opendatasource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8742
            self.match(TSqlParser.OPENDATASOURCE)
            self.state = 8743
            self.match(TSqlParser.LR_BRACKET)
            self.state = 8744
            localctx.provider = self.match(TSqlParser.STRING)
            self.state = 8745
            self.match(TSqlParser.COMMA)
            self.state = 8746
            localctx.init = self.match(TSqlParser.STRING)
            self.state = 8747
            self.match(TSqlParser.RR_BRACKET)
            self.state = 8748
            self.match(TSqlParser.DOT)
            self.state = 8750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6845834611130385) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4691064178111676937) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8067776519934725599) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387491794949) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714895912701) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755875440852549633) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873769796032868641) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510937462965505) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799299309863) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -651161675377934355) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -387309693044787745) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689521) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906573) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 171) != 0):
                self.state = 8749
                localctx.database = self.id_()


            self.state = 8752
            self.match(TSqlParser.DOT)
            self.state = 8754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6845834611130385) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4691064178111676937) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8067776519934725599) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387491794949) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714895912701) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755875440852549633) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873769796032868641) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510937462965505) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799299309863) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -651161675377934355) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -387309693044787745) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689521) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906573) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 171) != 0):
                self.state = 8753
                localctx.scheme = self.id_()


            self.state = 8756
            self.match(TSqlParser.DOT)

            self.state = 8757
            localctx.table = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._declare_local = None # Declare_localContext
            self.loc = list() # of Declare_localContexts
            self._xml_declaration = None # Xml_declarationContext
            self.xml_dec = list() # of Xml_declarationContexts

        def DECLARE(self):
            return self.getToken(TSqlParser.DECLARE, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)


        def table_type_definition(self):
            return self.getTypedRuleContext(TSqlParser.Table_type_definitionContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def declare_local(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Declare_localContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Declare_localContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def xml_type_definition(self):
            return self.getTypedRuleContext(TSqlParser.Xml_type_definitionContext,0)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def XMLNAMESPACES(self):
            return self.getToken(TSqlParser.XMLNAMESPACES, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def xml_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Xml_declarationContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Xml_declarationContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_declare_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_statement" ):
                listener.enterDeclare_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_statement" ):
                listener.exitDeclare_statement(self)




    def declare_statement(self):

        localctx = TSqlParser.Declare_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_declare_statement)
        self._la = 0 # Token type
        try:
            self.state = 8797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1130,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8759
                self.match(TSqlParser.DECLARE)
                self.state = 8760
                self.match(TSqlParser.LOCAL_ID)
                self.state = 8762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 8761
                    self.match(TSqlParser.AS)


                self.state = 8767
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1126,self._ctx)
                if la_ == 1:
                    self.state = 8764
                    self.data_type()
                    pass

                elif la_ == 2:
                    self.state = 8765
                    self.table_type_definition()
                    pass

                elif la_ == 3:
                    self.state = 8766
                    self.table_name()
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8769
                self.match(TSqlParser.DECLARE)
                self.state = 8770
                localctx._declare_local = self.declare_local()
                localctx.loc.append(localctx._declare_local)
                self.state = 8775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 8771
                    self.match(TSqlParser.COMMA)
                    self.state = 8772
                    localctx._declare_local = self.declare_local()
                    localctx.loc.append(localctx._declare_local)
                    self.state = 8777
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8778
                self.match(TSqlParser.DECLARE)
                self.state = 8779
                self.match(TSqlParser.LOCAL_ID)
                self.state = 8781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 8780
                    self.match(TSqlParser.AS)


                self.state = 8783
                self.xml_type_definition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8784
                self.match(TSqlParser.WITH)
                self.state = 8785
                self.match(TSqlParser.XMLNAMESPACES)
                self.state = 8786
                self.match(TSqlParser.LR_BRACKET)
                self.state = 8787
                localctx._xml_declaration = self.xml_declaration()
                localctx.xml_dec.append(localctx._xml_declaration)
                self.state = 8792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 8788
                    self.match(TSqlParser.COMMA)
                    self.state = 8789
                    localctx._xml_declaration = self.xml_declaration()
                    localctx.xml_dec.append(localctx._xml_declaration)
                    self.state = 8794
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 8795
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_namespace_uri = None # Token

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_xml_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_declaration" ):
                listener.enterXml_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_declaration" ):
                listener.exitXml_declaration(self)




    def xml_declaration(self):

        localctx = TSqlParser.Xml_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_xml_declaration)
        try:
            self.state = 8804
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1170]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8799
                localctx.xml_namespace_uri = self.match(TSqlParser.STRING)
                self.state = 8800
                self.match(TSqlParser.AS)
                self.state = 8801
                self.id_()
                pass
            elif token in [243]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8802
                self.match(TSqlParser.DEFAULT)
                self.state = 8803
                self.match(TSqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(TSqlParser.CLOSE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TSqlParser.Cursor_nameContext,0)


        def GLOBAL(self):
            return self.getToken(TSqlParser.GLOBAL, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def DEALLOCATE(self):
            return self.getToken(TSqlParser.DEALLOCATE, 0)

        def CURSOR(self):
            return self.getToken(TSqlParser.CURSOR, 0)

        def declare_cursor(self):
            return self.getTypedRuleContext(TSqlParser.Declare_cursorContext,0)


        def fetch_cursor(self):
            return self.getTypedRuleContext(TSqlParser.Fetch_cursorContext,0)


        def OPEN(self):
            return self.getToken(TSqlParser.OPEN, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_cursor_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_statement" ):
                listener.enterCursor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_statement" ):
                listener.exitCursor_statement(self)




    def cursor_statement(self):

        localctx = TSqlParser.Cursor_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_cursor_statement)
        self._la = 0 # Token type
        try:
            self.state = 8835
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [147]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8806
                self.match(TSqlParser.CLOSE)
                self.state = 8808
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1132,self._ctx)
                if la_ == 1:
                    self.state = 8807
                    self.match(TSqlParser.GLOBAL)


                self.state = 8810
                self.cursor_name()
                self.state = 8812
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1133,self._ctx)
                if la_ == 1:
                    self.state = 8811
                    self.match(TSqlParser.SEMI)


                pass
            elif token in [239]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8814
                self.match(TSqlParser.DEALLOCATE)
                self.state = 8816
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1134,self._ctx)
                if la_ == 1:
                    self.state = 8815
                    self.match(TSqlParser.GLOBAL)


                self.state = 8819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==211:
                    self.state = 8818
                    self.match(TSqlParser.CURSOR)


                self.state = 8821
                self.cursor_name()
                self.state = 8823
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1136,self._ctx)
                if la_ == 1:
                    self.state = 8822
                    self.match(TSqlParser.SEMI)


                pass
            elif token in [240]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8825
                self.declare_cursor()
                pass
            elif token in [340]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8826
                self.fetch_cursor()
                pass
            elif token in [653]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8827
                self.match(TSqlParser.OPEN)
                self.state = 8829
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1137,self._ctx)
                if la_ == 1:
                    self.state = 8828
                    self.match(TSqlParser.GLOBAL)


                self.state = 8831
                self.cursor_name()
                self.state = 8833
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1138,self._ctx)
                if la_ == 1:
                    self.state = 8832
                    self.match(TSqlParser.SEMI)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Backup_databaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database_name = None # Id_Context
            self.file_or_filegroup = None # Token
            self.logical_device_name = None # Id_Context
            self.backup_set_name = None # Id_Context
            self.medianame = None # Token
            self.stats_percent = None # Token
            self.encryptor_name = None # Id_Context

        def BACKUP(self):
            return self.getToken(TSqlParser.BACKUP, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TO)
            else:
                return self.getToken(TSqlParser.TO, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def READ_WRITE_FILEGROUPS(self):
            return self.getToken(TSqlParser.READ_WRITE_FILEGROUPS, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def FILE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FILE)
            else:
                return self.getToken(TSqlParser.FILE, i)

        def FILEGROUP(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FILEGROUP)
            else:
                return self.getToken(TSqlParser.FILEGROUP, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def DISK(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DISK)
            else:
                return self.getToken(TSqlParser.DISK, i)

        def TAPE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TAPE)
            else:
                return self.getToken(TSqlParser.TAPE, i)

        def URL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.URL)
            else:
                return self.getToken(TSqlParser.URL, i)

        def MIRROR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MIRROR)
            else:
                return self.getToken(TSqlParser.MIRROR, i)

        def DIFFERENTIAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DIFFERENTIAL)
            else:
                return self.getToken(TSqlParser.DIFFERENTIAL, i)

        def COPY_ONLY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COPY_ONLY)
            else:
                return self.getToken(TSqlParser.COPY_ONLY, i)

        def DESCRIPTION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DESCRIPTION)
            else:
                return self.getToken(TSqlParser.DESCRIPTION, i)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NAME)
            else:
                return self.getToken(TSqlParser.NAME, i)

        def CREDENTIAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CREDENTIAL)
            else:
                return self.getToken(TSqlParser.CREDENTIAL, i)

        def FILE_SNAPSHOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FILE_SNAPSHOT)
            else:
                return self.getToken(TSqlParser.FILE_SNAPSHOT, i)

        def MEDIADESCRIPTION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MEDIADESCRIPTION)
            else:
                return self.getToken(TSqlParser.MEDIADESCRIPTION, i)

        def MEDIANAME(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MEDIANAME)
            else:
                return self.getToken(TSqlParser.MEDIANAME, i)

        def BLOCKSIZE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BLOCKSIZE)
            else:
                return self.getToken(TSqlParser.BLOCKSIZE, i)

        def BUFFERCOUNT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BUFFERCOUNT)
            else:
                return self.getToken(TSqlParser.BUFFERCOUNT, i)

        def MAXTRANSFER(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MAXTRANSFER)
            else:
                return self.getToken(TSqlParser.MAXTRANSFER, i)

        def RESTART(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RESTART)
            else:
                return self.getToken(TSqlParser.RESTART, i)

        def STATS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STATS)
            else:
                return self.getToken(TSqlParser.STATS, i)

        def ENCRYPTION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ENCRYPTION)
            else:
                return self.getToken(TSqlParser.ENCRYPTION, i)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def ALGORITHM(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ALGORITHM)
            else:
                return self.getToken(TSqlParser.ALGORITHM, i)

        def SERVER(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SERVER)
            else:
                return self.getToken(TSqlParser.SERVER, i)

        def CERTIFICATE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CERTIFICATE)
            else:
                return self.getToken(TSqlParser.CERTIFICATE, i)

        def COMPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMPRESSION)
            else:
                return self.getToken(TSqlParser.COMPRESSION, i)

        def NO_COMPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NO_COMPRESSION)
            else:
                return self.getToken(TSqlParser.NO_COMPRESSION, i)

        def NOINIT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOINIT)
            else:
                return self.getToken(TSqlParser.NOINIT, i)

        def INIT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.INIT)
            else:
                return self.getToken(TSqlParser.INIT, i)

        def NOSKIP(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOSKIP)
            else:
                return self.getToken(TSqlParser.NOSKIP, i)

        def SKIP_KEYWORD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SKIP_KEYWORD)
            else:
                return self.getToken(TSqlParser.SKIP_KEYWORD, i)

        def NOFORMAT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOFORMAT)
            else:
                return self.getToken(TSqlParser.NOFORMAT, i)

        def FORMAT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FORMAT)
            else:
                return self.getToken(TSqlParser.FORMAT, i)

        def NO_CHECKSUM(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NO_CHECKSUM)
            else:
                return self.getToken(TSqlParser.NO_CHECKSUM, i)

        def CHECKSUM(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CHECKSUM)
            else:
                return self.getToken(TSqlParser.CHECKSUM, i)

        def STOP_ON_ERROR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STOP_ON_ERROR)
            else:
                return self.getToken(TSqlParser.STOP_ON_ERROR, i)

        def CONTINUE_AFTER_ERROR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CONTINUE_AFTER_ERROR)
            else:
                return self.getToken(TSqlParser.CONTINUE_AFTER_ERROR, i)

        def REWIND(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.REWIND)
            else:
                return self.getToken(TSqlParser.REWIND, i)

        def NOREWIND(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOREWIND)
            else:
                return self.getToken(TSqlParser.NOREWIND, i)

        def LOAD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOAD)
            else:
                return self.getToken(TSqlParser.LOAD, i)

        def NOUNLOAD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOUNLOAD)
            else:
                return self.getToken(TSqlParser.NOUNLOAD, i)

        def AES_128(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AES_128)
            else:
                return self.getToken(TSqlParser.AES_128, i)

        def AES_192(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AES_192)
            else:
                return self.getToken(TSqlParser.AES_192, i)

        def AES_256(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AES_256)
            else:
                return self.getToken(TSqlParser.AES_256, i)

        def TRIPLE_DES_3KEY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TRIPLE_DES_3KEY)
            else:
                return self.getToken(TSqlParser.TRIPLE_DES_3KEY, i)

        def EXPIREDATE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EXPIREDATE)
            else:
                return self.getToken(TSqlParser.EXPIREDATE, i)

        def RETAINDAYS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RETAINDAYS)
            else:
                return self.getToken(TSqlParser.RETAINDAYS, i)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def ASYMMETRIC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ASYMMETRIC)
            else:
                return self.getToken(TSqlParser.ASYMMETRIC, i)

        def KEY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.KEY)
            else:
                return self.getToken(TSqlParser.KEY, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_backup_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackup_database" ):
                listener.enterBackup_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackup_database" ):
                listener.exitBackup_database(self)




    def backup_database(self):

        localctx = TSqlParser.Backup_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_backup_database)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8837
            self.match(TSqlParser.BACKUP)
            self.state = 8838
            self.match(TSqlParser.DATABASE)

            self.state = 8839
            localctx.database_name = self.id_()
            self.state = 8852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==766:
                self.state = 8840
                self.match(TSqlParser.READ_WRITE_FILEGROUPS)
                self.state = 8849
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1141,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 8842
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 8841
                            self.match(TSqlParser.COMMA)


                        self.state = 8844
                        _la = self._input.LA(1)
                        if not(_la==341 or _la==342):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 8845
                        self.match(TSqlParser.EQUAL)
                        self.state = 8846
                        localctx.file_or_filegroup = self.match(TSqlParser.STRING) 
                    self.state = 8851
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1141,self._ctx)



            self.state = 8862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==341 or _la==342 or _la==1194:
                self.state = 8855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 8854
                    self.match(TSqlParser.COMMA)


                self.state = 8857
                _la = self._input.LA(1)
                if not(_la==341 or _la==342):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8858
                self.match(TSqlParser.EQUAL)
                self.state = 8859
                localctx.file_or_filegroup = self.match(TSqlParser.STRING)
                self.state = 8864
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 8888
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1150,self._ctx)
            if la_ == 1:
                self.state = 8865
                self.match(TSqlParser.TO)
                self.state = 8870 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 8867
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 8866
                            self.match(TSqlParser.COMMA)


                        self.state = 8869
                        localctx.logical_device_name = self.id_()

                    else:
                        raise NoViableAltException(self)
                    self.state = 8872 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1146,self._ctx)

                pass

            elif la_ == 2:
                self.state = 8874
                self.match(TSqlParser.TO)
                self.state = 8884 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 8876
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 8875
                            self.match(TSqlParser.COMMA)


                        self.state = 8878
                        _la = self._input.LA(1)
                        if not(_la==271 or _la==972 or _la==1032):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 8879
                        self.match(TSqlParser.EQUAL)
                        self.state = 8882
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [1170]:
                            self.state = 8880
                            self.match(TSqlParser.STRING)
                            pass
                        elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                            self.state = 8881
                            self.id_()
                            pass
                        else:
                            raise NoViableAltException(self)


                    else:
                        raise NoViableAltException(self)
                    self.state = 8886 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1149,self._ctx)

                pass


            self.state = 8923
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1158,self._ctx)
            if la_ == 1:
                self.state = 8900 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 8890
                        self.match(TSqlParser.MIRROR)
                        self.state = 8891
                        self.match(TSqlParser.TO)
                        self.state = 8896 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 8893
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 8892
                                    self.match(TSqlParser.COMMA)


                                self.state = 8895
                                localctx.logical_device_name = self.id_()

                            else:
                                raise NoViableAltException(self)
                            self.state = 8898 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,1152,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 8902 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1153,self._ctx)


            elif la_ == 2:
                self.state = 8919 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 8904
                        self.match(TSqlParser.MIRROR)
                        self.state = 8905
                        self.match(TSqlParser.TO)
                        self.state = 8915 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 8907
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 8906
                                    self.match(TSqlParser.COMMA)


                                self.state = 8909
                                _la = self._input.LA(1)
                                if not(_la==271 or _la==972 or _la==1032):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 8910
                                self.match(TSqlParser.EQUAL)
                                self.state = 8913
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [1170]:
                                    self.state = 8911
                                    self.match(TSqlParser.STRING)
                                    pass
                                elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                                    self.state = 8912
                                    self.id_()
                                    pass
                                else:
                                    raise NoViableAltException(self)


                            else:
                                raise NoViableAltException(self)
                            self.state = 8917 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,1156,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 8921 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1157,self._ctx)



            self.state = 9085
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1194,self._ctx)
            if la_ == 1:
                self.state = 8925
                self.match(TSqlParser.WITH)
                self.state = 9082
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1193,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 9080
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1192,self._ctx)
                        if la_ == 1:
                            self.state = 8927
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 8926
                                self.match(TSqlParser.COMMA)


                            self.state = 8929
                            self.match(TSqlParser.DIFFERENTIAL)
                            pass

                        elif la_ == 2:
                            self.state = 8931
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 8930
                                self.match(TSqlParser.COMMA)


                            self.state = 8933
                            self.match(TSqlParser.COPY_ONLY)
                            pass

                        elif la_ == 3:
                            self.state = 8935
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 8934
                                self.match(TSqlParser.COMMA)


                            self.state = 8937
                            _la = self._input.LA(1)
                            if not(_la==166 or _la==620):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 4:
                            self.state = 8939
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 8938
                                self.match(TSqlParser.COMMA)


                            self.state = 8941
                            self.match(TSqlParser.DESCRIPTION)
                            self.state = 8942
                            self.match(TSqlParser.EQUAL)
                            self.state = 8945
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [1170]:
                                self.state = 8943
                                self.match(TSqlParser.STRING)
                                pass
                            elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                                self.state = 8944
                                self.id_()
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 5:
                            self.state = 8948
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 8947
                                self.match(TSqlParser.COMMA)


                            self.state = 8950
                            self.match(TSqlParser.NAME)
                            self.state = 8951
                            self.match(TSqlParser.EQUAL)
                            self.state = 8952
                            localctx.backup_set_name = self.id_()
                            pass

                        elif la_ == 6:
                            self.state = 8954
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 8953
                                self.match(TSqlParser.COMMA)


                            self.state = 8956
                            self.match(TSqlParser.CREDENTIAL)
                            pass

                        elif la_ == 7:
                            self.state = 8958
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 8957
                                self.match(TSqlParser.COMMA)


                            self.state = 8960
                            self.match(TSqlParser.FILE_SNAPSHOT)
                            pass

                        elif la_ == 8:
                            self.state = 8962
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 8961
                                self.match(TSqlParser.COMMA)


                            self.state = 8976
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [324]:
                                self.state = 8964
                                self.match(TSqlParser.EXPIREDATE)
                                self.state = 8965
                                self.match(TSqlParser.EQUAL)
                                self.state = 8968
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [1170]:
                                    self.state = 8966
                                    self.match(TSqlParser.STRING)
                                    pass
                                elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                                    self.state = 8967
                                    self.id_()
                                    pass
                                else:
                                    raise NoViableAltException(self)

                                pass
                            elif token in [809]:
                                self.state = 8970
                                self.match(TSqlParser.RETAINDAYS)
                                self.state = 8971
                                self.match(TSqlParser.EQUAL)
                                self.state = 8974
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [1168]:
                                    self.state = 8972
                                    self.match(TSqlParser.DECIMAL)
                                    pass
                                elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                                    self.state = 8973
                                    self.id_()
                                    pass
                                else:
                                    raise NoViableAltException(self)

                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 9:
                            self.state = 8979
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 8978
                                self.match(TSqlParser.COMMA)


                            self.state = 8981
                            _la = self._input.LA(1)
                            if not(_la==452 or _la==605):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 10:
                            self.state = 8983
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 8982
                                self.match(TSqlParser.COMMA)


                            self.state = 8985
                            _la = self._input.LA(1)
                            if not(_la==613 or _la==906):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 11:
                            self.state = 8987
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 8986
                                self.match(TSqlParser.COMMA)


                            self.state = 8989
                            _la = self._input.LA(1)
                            if not(_la==372 or _la==602):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 12:
                            self.state = 8991
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 8990
                                self.match(TSqlParser.COMMA)


                            self.state = 8993
                            self.match(TSqlParser.MEDIADESCRIPTION)
                            self.state = 8994
                            self.match(TSqlParser.EQUAL)
                            self.state = 8997
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [1170]:
                                self.state = 8995
                                self.match(TSqlParser.STRING)
                                pass
                            elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                                self.state = 8996
                                self.id_()
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 13:
                            self.state = 9000
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 8999
                                self.match(TSqlParser.COMMA)


                            self.state = 9002
                            self.match(TSqlParser.MEDIANAME)
                            self.state = 9003
                            self.match(TSqlParser.EQUAL)

                            self.state = 9004
                            localctx.medianame = self.match(TSqlParser.STRING)
                            pass

                        elif la_ == 14:
                            self.state = 9006
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9005
                                self.match(TSqlParser.COMMA)


                            self.state = 9008
                            self.match(TSqlParser.BLOCKSIZE)
                            self.state = 9009
                            self.match(TSqlParser.EQUAL)
                            self.state = 9012
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [1168]:
                                self.state = 9010
                                self.match(TSqlParser.DECIMAL)
                                pass
                            elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                                self.state = 9011
                                self.id_()
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 15:
                            self.state = 9015
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9014
                                self.match(TSqlParser.COMMA)


                            self.state = 9017
                            self.match(TSqlParser.BUFFERCOUNT)
                            self.state = 9018
                            self.match(TSqlParser.EQUAL)
                            self.state = 9021
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [1168]:
                                self.state = 9019
                                self.match(TSqlParser.DECIMAL)
                                pass
                            elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                                self.state = 9020
                                self.id_()
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 16:
                            self.state = 9024
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9023
                                self.match(TSqlParser.COMMA)


                            self.state = 9026
                            self.match(TSqlParser.MAXTRANSFER)
                            self.state = 9027
                            self.match(TSqlParser.EQUAL)
                            self.state = 9030
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [1168]:
                                self.state = 9028
                                self.match(TSqlParser.DECIMAL)
                                pass
                            elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                                self.state = 9029
                                self.id_()
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 17:
                            self.state = 9033
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9032
                                self.match(TSqlParser.COMMA)


                            self.state = 9035
                            _la = self._input.LA(1)
                            if not(_la==138 or _la==619):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 18:
                            self.state = 9037
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9036
                                self.match(TSqlParser.COMMA)


                            self.state = 9039
                            _la = self._input.LA(1)
                            if not(_la==185 or _la==944):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 19:
                            self.state = 9041
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9040
                                self.match(TSqlParser.COMMA)


                            self.state = 9043
                            self.match(TSqlParser.RESTART)
                            pass

                        elif la_ == 20:
                            self.state = 9045
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9044
                                self.match(TSqlParser.COMMA)


                            self.state = 9047
                            self.match(TSqlParser.STATS)
                            self.state = 9050
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1174:
                                self.state = 9048
                                self.match(TSqlParser.EQUAL)
                                self.state = 9049
                                localctx.stats_percent = self.match(TSqlParser.DECIMAL)


                            pass

                        elif la_ == 21:
                            self.state = 9053
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9052
                                self.match(TSqlParser.COMMA)


                            self.state = 9055
                            _la = self._input.LA(1)
                            if not(_la==612 or _la==816):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 22:
                            self.state = 9057
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9056
                                self.match(TSqlParser.COMMA)


                            self.state = 9059
                            _la = self._input.LA(1)
                            if not(_la==516 or _la==617):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 23:
                            self.state = 9061
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9060
                                self.match(TSqlParser.COMMA)


                            self.state = 9063
                            self.match(TSqlParser.ENCRYPTION)
                            self.state = 9064
                            self.match(TSqlParser.LR_BRACKET)
                            self.state = 9065
                            self.match(TSqlParser.ALGORITHM)
                            self.state = 9066
                            self.match(TSqlParser.EQUAL)
                            self.state = 9067
                            _la = self._input.LA(1)
                            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 229376) != 0) or _la==1002):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 9068
                            self.match(TSqlParser.COMMA)
                            self.state = 9069
                            self.match(TSqlParser.SERVER)
                            self.state = 9070
                            self.match(TSqlParser.CERTIFICATE)
                            self.state = 9071
                            self.match(TSqlParser.EQUAL)
                            self.state = 9078
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,1191,self._ctx)
                            if la_ == 1:
                                self.state = 9072
                                localctx.encryptor_name = self.id_()
                                pass

                            elif la_ == 2:
                                self.state = 9073
                                self.match(TSqlParser.SERVER)
                                self.state = 9074
                                self.match(TSqlParser.ASYMMETRIC)
                                self.state = 9075
                                self.match(TSqlParser.KEY)
                                self.state = 9076
                                self.match(TSqlParser.EQUAL)
                                self.state = 9077
                                localctx.encryptor_name = self.id_()
                                pass


                            pass

                 
                    self.state = 9084
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1193,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Backup_logContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database_name = None # Id_Context
            self.logical_device_name = None # Id_Context
            self.backup_set_name = None # Id_Context
            self.medianame = None # Token
            self.stats_percent = None # Token
            self.undo_file_name = None # Token
            self.encryptor_name = None # Id_Context

        def BACKUP(self):
            return self.getToken(TSqlParser.BACKUP, 0)

        def LOG(self):
            return self.getToken(TSqlParser.LOG, 0)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TO)
            else:
                return self.getToken(TSqlParser.TO, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def DISK(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DISK)
            else:
                return self.getToken(TSqlParser.DISK, i)

        def TAPE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TAPE)
            else:
                return self.getToken(TSqlParser.TAPE, i)

        def URL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.URL)
            else:
                return self.getToken(TSqlParser.URL, i)

        def MIRROR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MIRROR)
            else:
                return self.getToken(TSqlParser.MIRROR, i)

        def DIFFERENTIAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DIFFERENTIAL)
            else:
                return self.getToken(TSqlParser.DIFFERENTIAL, i)

        def COPY_ONLY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COPY_ONLY)
            else:
                return self.getToken(TSqlParser.COPY_ONLY, i)

        def DESCRIPTION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DESCRIPTION)
            else:
                return self.getToken(TSqlParser.DESCRIPTION, i)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NAME)
            else:
                return self.getToken(TSqlParser.NAME, i)

        def CREDENTIAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CREDENTIAL)
            else:
                return self.getToken(TSqlParser.CREDENTIAL, i)

        def FILE_SNAPSHOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FILE_SNAPSHOT)
            else:
                return self.getToken(TSqlParser.FILE_SNAPSHOT, i)

        def MEDIADESCRIPTION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MEDIADESCRIPTION)
            else:
                return self.getToken(TSqlParser.MEDIADESCRIPTION, i)

        def MEDIANAME(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MEDIANAME)
            else:
                return self.getToken(TSqlParser.MEDIANAME, i)

        def BLOCKSIZE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BLOCKSIZE)
            else:
                return self.getToken(TSqlParser.BLOCKSIZE, i)

        def BUFFERCOUNT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BUFFERCOUNT)
            else:
                return self.getToken(TSqlParser.BUFFERCOUNT, i)

        def MAXTRANSFER(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MAXTRANSFER)
            else:
                return self.getToken(TSqlParser.MAXTRANSFER, i)

        def RESTART(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RESTART)
            else:
                return self.getToken(TSqlParser.RESTART, i)

        def STATS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STATS)
            else:
                return self.getToken(TSqlParser.STATS, i)

        def NO_TRUNCATE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NO_TRUNCATE)
            else:
                return self.getToken(TSqlParser.NO_TRUNCATE, i)

        def ENCRYPTION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ENCRYPTION)
            else:
                return self.getToken(TSqlParser.ENCRYPTION, i)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def ALGORITHM(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ALGORITHM)
            else:
                return self.getToken(TSqlParser.ALGORITHM, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def SERVER(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SERVER)
            else:
                return self.getToken(TSqlParser.SERVER, i)

        def CERTIFICATE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CERTIFICATE)
            else:
                return self.getToken(TSqlParser.CERTIFICATE, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def COMPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMPRESSION)
            else:
                return self.getToken(TSqlParser.COMPRESSION, i)

        def NO_COMPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NO_COMPRESSION)
            else:
                return self.getToken(TSqlParser.NO_COMPRESSION, i)

        def NOINIT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOINIT)
            else:
                return self.getToken(TSqlParser.NOINIT, i)

        def INIT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.INIT)
            else:
                return self.getToken(TSqlParser.INIT, i)

        def NOSKIP(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOSKIP)
            else:
                return self.getToken(TSqlParser.NOSKIP, i)

        def SKIP_KEYWORD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SKIP_KEYWORD)
            else:
                return self.getToken(TSqlParser.SKIP_KEYWORD, i)

        def NOFORMAT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOFORMAT)
            else:
                return self.getToken(TSqlParser.NOFORMAT, i)

        def FORMAT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FORMAT)
            else:
                return self.getToken(TSqlParser.FORMAT, i)

        def NO_CHECKSUM(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NO_CHECKSUM)
            else:
                return self.getToken(TSqlParser.NO_CHECKSUM, i)

        def CHECKSUM(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CHECKSUM)
            else:
                return self.getToken(TSqlParser.CHECKSUM, i)

        def STOP_ON_ERROR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STOP_ON_ERROR)
            else:
                return self.getToken(TSqlParser.STOP_ON_ERROR, i)

        def CONTINUE_AFTER_ERROR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CONTINUE_AFTER_ERROR)
            else:
                return self.getToken(TSqlParser.CONTINUE_AFTER_ERROR, i)

        def REWIND(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.REWIND)
            else:
                return self.getToken(TSqlParser.REWIND, i)

        def NOREWIND(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOREWIND)
            else:
                return self.getToken(TSqlParser.NOREWIND, i)

        def LOAD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOAD)
            else:
                return self.getToken(TSqlParser.LOAD, i)

        def NOUNLOAD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOUNLOAD)
            else:
                return self.getToken(TSqlParser.NOUNLOAD, i)

        def AES_128(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AES_128)
            else:
                return self.getToken(TSqlParser.AES_128, i)

        def AES_192(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AES_192)
            else:
                return self.getToken(TSqlParser.AES_192, i)

        def AES_256(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AES_256)
            else:
                return self.getToken(TSqlParser.AES_256, i)

        def TRIPLE_DES_3KEY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TRIPLE_DES_3KEY)
            else:
                return self.getToken(TSqlParser.TRIPLE_DES_3KEY, i)

        def EXPIREDATE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EXPIREDATE)
            else:
                return self.getToken(TSqlParser.EXPIREDATE, i)

        def RETAINDAYS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RETAINDAYS)
            else:
                return self.getToken(TSqlParser.RETAINDAYS, i)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def NORECOVERY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NORECOVERY)
            else:
                return self.getToken(TSqlParser.NORECOVERY, i)

        def STANDBY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STANDBY)
            else:
                return self.getToken(TSqlParser.STANDBY, i)

        def ASYMMETRIC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ASYMMETRIC)
            else:
                return self.getToken(TSqlParser.ASYMMETRIC, i)

        def KEY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.KEY)
            else:
                return self.getToken(TSqlParser.KEY, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_backup_log

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackup_log" ):
                listener.enterBackup_log(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackup_log" ):
                listener.exitBackup_log(self)




    def backup_log(self):

        localctx = TSqlParser.Backup_logContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_backup_log)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9087
            self.match(TSqlParser.BACKUP)
            self.state = 9088
            self.match(TSqlParser.LOG)

            self.state = 9089
            localctx.database_name = self.id_()
            self.state = 9113
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1200,self._ctx)
            if la_ == 1:
                self.state = 9090
                self.match(TSqlParser.TO)
                self.state = 9095 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 9092
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 9091
                            self.match(TSqlParser.COMMA)


                        self.state = 9094
                        localctx.logical_device_name = self.id_()

                    else:
                        raise NoViableAltException(self)
                    self.state = 9097 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1196,self._ctx)

                pass

            elif la_ == 2:
                self.state = 9099
                self.match(TSqlParser.TO)
                self.state = 9109 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 9101
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 9100
                            self.match(TSqlParser.COMMA)


                        self.state = 9103
                        _la = self._input.LA(1)
                        if not(_la==271 or _la==972 or _la==1032):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 9104
                        self.match(TSqlParser.EQUAL)
                        self.state = 9107
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [1170]:
                            self.state = 9105
                            self.match(TSqlParser.STRING)
                            pass
                        elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                            self.state = 9106
                            self.id_()
                            pass
                        else:
                            raise NoViableAltException(self)


                    else:
                        raise NoViableAltException(self)
                    self.state = 9111 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1199,self._ctx)

                pass


            self.state = 9148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1208,self._ctx)
            if la_ == 1:
                self.state = 9125 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 9115
                        self.match(TSqlParser.MIRROR)
                        self.state = 9116
                        self.match(TSqlParser.TO)
                        self.state = 9121 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 9118
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 9117
                                    self.match(TSqlParser.COMMA)


                                self.state = 9120
                                localctx.logical_device_name = self.id_()

                            else:
                                raise NoViableAltException(self)
                            self.state = 9123 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,1202,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 9127 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1203,self._ctx)


            elif la_ == 2:
                self.state = 9144 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 9129
                        self.match(TSqlParser.MIRROR)
                        self.state = 9130
                        self.match(TSqlParser.TO)
                        self.state = 9140 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 9132
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==1194:
                                    self.state = 9131
                                    self.match(TSqlParser.COMMA)


                                self.state = 9134
                                _la = self._input.LA(1)
                                if not(_la==271 or _la==972 or _la==1032):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 9135
                                self.match(TSqlParser.EQUAL)
                                self.state = 9138
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [1170]:
                                    self.state = 9136
                                    self.match(TSqlParser.STRING)
                                    pass
                                elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                                    self.state = 9137
                                    self.id_()
                                    pass
                                else:
                                    raise NoViableAltException(self)


                            else:
                                raise NoViableAltException(self)
                            self.state = 9142 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,1206,self._ctx)


                    else:
                        raise NoViableAltException(self)
                    self.state = 9146 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1207,self._ctx)



            self.state = 9323
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1247,self._ctx)
            if la_ == 1:
                self.state = 9150
                self.match(TSqlParser.WITH)
                self.state = 9320
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1246,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 9318
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1245,self._ctx)
                        if la_ == 1:
                            self.state = 9152
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9151
                                self.match(TSqlParser.COMMA)


                            self.state = 9154
                            self.match(TSqlParser.DIFFERENTIAL)
                            pass

                        elif la_ == 2:
                            self.state = 9156
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9155
                                self.match(TSqlParser.COMMA)


                            self.state = 9158
                            self.match(TSqlParser.COPY_ONLY)
                            pass

                        elif la_ == 3:
                            self.state = 9160
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9159
                                self.match(TSqlParser.COMMA)


                            self.state = 9162
                            _la = self._input.LA(1)
                            if not(_la==166 or _la==620):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 4:
                            self.state = 9164
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9163
                                self.match(TSqlParser.COMMA)


                            self.state = 9166
                            self.match(TSqlParser.DESCRIPTION)
                            self.state = 9167
                            self.match(TSqlParser.EQUAL)
                            self.state = 9170
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [1170]:
                                self.state = 9168
                                self.match(TSqlParser.STRING)
                                pass
                            elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                                self.state = 9169
                                self.id_()
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 5:
                            self.state = 9173
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9172
                                self.match(TSqlParser.COMMA)


                            self.state = 9175
                            self.match(TSqlParser.NAME)
                            self.state = 9176
                            self.match(TSqlParser.EQUAL)
                            self.state = 9177
                            localctx.backup_set_name = self.id_()
                            pass

                        elif la_ == 6:
                            self.state = 9179
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9178
                                self.match(TSqlParser.COMMA)


                            self.state = 9181
                            self.match(TSqlParser.CREDENTIAL)
                            pass

                        elif la_ == 7:
                            self.state = 9183
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9182
                                self.match(TSqlParser.COMMA)


                            self.state = 9185
                            self.match(TSqlParser.FILE_SNAPSHOT)
                            pass

                        elif la_ == 8:
                            self.state = 9187
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9186
                                self.match(TSqlParser.COMMA)


                            self.state = 9201
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [324]:
                                self.state = 9189
                                self.match(TSqlParser.EXPIREDATE)
                                self.state = 9190
                                self.match(TSqlParser.EQUAL)
                                self.state = 9193
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [1170]:
                                    self.state = 9191
                                    self.match(TSqlParser.STRING)
                                    pass
                                elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                                    self.state = 9192
                                    self.id_()
                                    pass
                                else:
                                    raise NoViableAltException(self)

                                pass
                            elif token in [809]:
                                self.state = 9195
                                self.match(TSqlParser.RETAINDAYS)
                                self.state = 9196
                                self.match(TSqlParser.EQUAL)
                                self.state = 9199
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [1168]:
                                    self.state = 9197
                                    self.match(TSqlParser.DECIMAL)
                                    pass
                                elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                                    self.state = 9198
                                    self.id_()
                                    pass
                                else:
                                    raise NoViableAltException(self)

                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 9:
                            self.state = 9204
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9203
                                self.match(TSqlParser.COMMA)


                            self.state = 9206
                            _la = self._input.LA(1)
                            if not(_la==452 or _la==605):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 10:
                            self.state = 9208
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9207
                                self.match(TSqlParser.COMMA)


                            self.state = 9210
                            _la = self._input.LA(1)
                            if not(_la==613 or _la==906):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 11:
                            self.state = 9212
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9211
                                self.match(TSqlParser.COMMA)


                            self.state = 9214
                            _la = self._input.LA(1)
                            if not(_la==372 or _la==602):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 12:
                            self.state = 9216
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9215
                                self.match(TSqlParser.COMMA)


                            self.state = 9218
                            self.match(TSqlParser.MEDIADESCRIPTION)
                            self.state = 9219
                            self.match(TSqlParser.EQUAL)
                            self.state = 9222
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [1170]:
                                self.state = 9220
                                self.match(TSqlParser.STRING)
                                pass
                            elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                                self.state = 9221
                                self.id_()
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 13:
                            self.state = 9225
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9224
                                self.match(TSqlParser.COMMA)


                            self.state = 9227
                            self.match(TSqlParser.MEDIANAME)
                            self.state = 9228
                            self.match(TSqlParser.EQUAL)

                            self.state = 9229
                            localctx.medianame = self.match(TSqlParser.STRING)
                            pass

                        elif la_ == 14:
                            self.state = 9231
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9230
                                self.match(TSqlParser.COMMA)


                            self.state = 9233
                            self.match(TSqlParser.BLOCKSIZE)
                            self.state = 9234
                            self.match(TSqlParser.EQUAL)
                            self.state = 9237
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [1168]:
                                self.state = 9235
                                self.match(TSqlParser.DECIMAL)
                                pass
                            elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                                self.state = 9236
                                self.id_()
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 15:
                            self.state = 9240
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9239
                                self.match(TSqlParser.COMMA)


                            self.state = 9242
                            self.match(TSqlParser.BUFFERCOUNT)
                            self.state = 9243
                            self.match(TSqlParser.EQUAL)
                            self.state = 9246
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [1168]:
                                self.state = 9244
                                self.match(TSqlParser.DECIMAL)
                                pass
                            elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                                self.state = 9245
                                self.id_()
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 16:
                            self.state = 9249
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9248
                                self.match(TSqlParser.COMMA)


                            self.state = 9251
                            self.match(TSqlParser.MAXTRANSFER)
                            self.state = 9252
                            self.match(TSqlParser.EQUAL)
                            self.state = 9255
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [1168]:
                                self.state = 9253
                                self.match(TSqlParser.DECIMAL)
                                pass
                            elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                                self.state = 9254
                                self.id_()
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 17:
                            self.state = 9258
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9257
                                self.match(TSqlParser.COMMA)


                            self.state = 9260
                            _la = self._input.LA(1)
                            if not(_la==138 or _la==619):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 18:
                            self.state = 9262
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9261
                                self.match(TSqlParser.COMMA)


                            self.state = 9264
                            _la = self._input.LA(1)
                            if not(_la==185 or _la==944):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 19:
                            self.state = 9266
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9265
                                self.match(TSqlParser.COMMA)


                            self.state = 9268
                            self.match(TSqlParser.RESTART)
                            pass

                        elif la_ == 20:
                            self.state = 9270
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9269
                                self.match(TSqlParser.COMMA)


                            self.state = 9272
                            self.match(TSqlParser.STATS)
                            self.state = 9275
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1174:
                                self.state = 9273
                                self.match(TSqlParser.EQUAL)
                                self.state = 9274
                                localctx.stats_percent = self.match(TSqlParser.DECIMAL)


                            pass

                        elif la_ == 21:
                            self.state = 9278
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9277
                                self.match(TSqlParser.COMMA)


                            self.state = 9280
                            _la = self._input.LA(1)
                            if not(_la==612 or _la==816):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 22:
                            self.state = 9282
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9281
                                self.match(TSqlParser.COMMA)


                            self.state = 9284
                            _la = self._input.LA(1)
                            if not(_la==516 or _la==617):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 23:
                            self.state = 9286
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9285
                                self.match(TSqlParser.COMMA)


                            self.state = 9292
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [611]:
                                self.state = 9288
                                self.match(TSqlParser.NORECOVERY)
                                pass
                            elif token in [924]:
                                self.state = 9289
                                self.match(TSqlParser.STANDBY)
                                self.state = 9290
                                self.match(TSqlParser.EQUAL)
                                self.state = 9291
                                localctx.undo_file_name = self.match(TSqlParser.STRING)
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 24:
                            self.state = 9295
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9294
                                self.match(TSqlParser.COMMA)


                            self.state = 9297
                            self.match(TSqlParser.NO_TRUNCATE)
                            pass

                        elif la_ == 25:
                            self.state = 9299
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1194:
                                self.state = 9298
                                self.match(TSqlParser.COMMA)


                            self.state = 9301
                            self.match(TSqlParser.ENCRYPTION)
                            self.state = 9302
                            self.match(TSqlParser.LR_BRACKET)
                            self.state = 9303
                            self.match(TSqlParser.ALGORITHM)
                            self.state = 9304
                            self.match(TSqlParser.EQUAL)
                            self.state = 9305
                            _la = self._input.LA(1)
                            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 229376) != 0) or _la==1002):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 9306
                            self.match(TSqlParser.COMMA)
                            self.state = 9307
                            self.match(TSqlParser.SERVER)
                            self.state = 9308
                            self.match(TSqlParser.CERTIFICATE)
                            self.state = 9309
                            self.match(TSqlParser.EQUAL)
                            self.state = 9316
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,1244,self._ctx)
                            if la_ == 1:
                                self.state = 9310
                                localctx.encryptor_name = self.id_()
                                pass

                            elif la_ == 2:
                                self.state = 9311
                                self.match(TSqlParser.SERVER)
                                self.state = 9312
                                self.match(TSqlParser.ASYMMETRIC)
                                self.state = 9313
                                self.match(TSqlParser.KEY)
                                self.state = 9314
                                self.match(TSqlParser.EQUAL)
                                self.state = 9315
                                localctx.encryptor_name = self.id_()
                                pass


                            pass

                 
                    self.state = 9322
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1246,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Backup_certificateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.certname = None # Id_Context
            self.cert_file = None # Token
            self.private_key_file = None # Token
            self.encryption_password = None # Token
            self.decryption_pasword = None # Token

        def BACKUP(self):
            return self.getToken(TSqlParser.BACKUP, 0)

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def FILE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FILE)
            else:
                return self.getToken(TSqlParser.FILE, i)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def PRIVATE(self):
            return self.getToken(TSqlParser.PRIVATE, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def ENCRYPTION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ENCRYPTION)
            else:
                return self.getToken(TSqlParser.ENCRYPTION, i)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BY)
            else:
                return self.getToken(TSqlParser.BY, i)

        def PASSWORD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.PASSWORD)
            else:
                return self.getToken(TSqlParser.PASSWORD, i)

        def DECRYPTION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECRYPTION)
            else:
                return self.getToken(TSqlParser.DECRYPTION, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_backup_certificate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackup_certificate" ):
                listener.enterBackup_certificate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackup_certificate" ):
                listener.exitBackup_certificate(self)




    def backup_certificate(self):

        localctx = TSqlParser.Backup_certificateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_backup_certificate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9325
            self.match(TSqlParser.BACKUP)
            self.state = 9326
            self.match(TSqlParser.CERTIFICATE)
            self.state = 9327
            localctx.certname = self.id_()
            self.state = 9328
            self.match(TSqlParser.TO)
            self.state = 9329
            self.match(TSqlParser.FILE)
            self.state = 9330
            self.match(TSqlParser.EQUAL)
            self.state = 9331
            localctx.cert_file = self.match(TSqlParser.STRING)
            self.state = 9363
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1253,self._ctx)
            if la_ == 1:
                self.state = 9332
                self.match(TSqlParser.WITH)
                self.state = 9333
                self.match(TSqlParser.PRIVATE)
                self.state = 9334
                self.match(TSqlParser.KEY)
                self.state = 9335
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9358 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 9358
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1251,self._ctx)
                    if la_ == 1:
                        self.state = 9337
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 9336
                            self.match(TSqlParser.COMMA)


                        self.state = 9339
                        self.match(TSqlParser.FILE)
                        self.state = 9340
                        self.match(TSqlParser.EQUAL)
                        self.state = 9341
                        localctx.private_key_file = self.match(TSqlParser.STRING)
                        pass

                    elif la_ == 2:
                        self.state = 9343
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 9342
                            self.match(TSqlParser.COMMA)


                        self.state = 9345
                        self.match(TSqlParser.ENCRYPTION)
                        self.state = 9346
                        self.match(TSqlParser.BY)
                        self.state = 9347
                        self.match(TSqlParser.PASSWORD)
                        self.state = 9348
                        self.match(TSqlParser.EQUAL)
                        self.state = 9349
                        localctx.encryption_password = self.match(TSqlParser.STRING)
                        pass

                    elif la_ == 3:
                        self.state = 9351
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 9350
                            self.match(TSqlParser.COMMA)


                        self.state = 9353
                        self.match(TSqlParser.DECRYPTION)
                        self.state = 9354
                        self.match(TSqlParser.BY)
                        self.state = 9355
                        self.match(TSqlParser.PASSWORD)
                        self.state = 9356
                        self.match(TSqlParser.EQUAL)
                        self.state = 9357
                        localctx.decryption_pasword = self.match(TSqlParser.STRING)
                        pass


                    self.state = 9360 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==242 or _la==295 or _la==341 or _la==1194):
                        break

                self.state = 9362
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Backup_master_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.master_key_backup_file = None # Token
            self.encryption_password = None # Token

        def BACKUP(self):
            return self.getToken(TSqlParser.BACKUP, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_backup_master_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackup_master_key" ):
                listener.enterBackup_master_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackup_master_key" ):
                listener.exitBackup_master_key(self)




    def backup_master_key(self):

        localctx = TSqlParser.Backup_master_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_backup_master_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9365
            self.match(TSqlParser.BACKUP)
            self.state = 9366
            self.match(TSqlParser.MASTER)
            self.state = 9367
            self.match(TSqlParser.KEY)
            self.state = 9368
            self.match(TSqlParser.TO)
            self.state = 9369
            self.match(TSqlParser.FILE)
            self.state = 9370
            self.match(TSqlParser.EQUAL)
            self.state = 9371
            localctx.master_key_backup_file = self.match(TSqlParser.STRING)
            self.state = 9372
            self.match(TSqlParser.ENCRYPTION)
            self.state = 9373
            self.match(TSqlParser.BY)
            self.state = 9374
            self.match(TSqlParser.PASSWORD)
            self.state = 9375
            self.match(TSqlParser.EQUAL)
            self.state = 9376
            localctx.encryption_password = self.match(TSqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Backup_service_master_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.service_master_key_backup_file = None # Token
            self.encryption_password = None # Token

        def BACKUP(self):
            return self.getToken(TSqlParser.BACKUP, 0)

        def SERVICE(self):
            return self.getToken(TSqlParser.SERVICE, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_backup_service_master_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackup_service_master_key" ):
                listener.enterBackup_service_master_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackup_service_master_key" ):
                listener.exitBackup_service_master_key(self)




    def backup_service_master_key(self):

        localctx = TSqlParser.Backup_service_master_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_backup_service_master_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9378
            self.match(TSqlParser.BACKUP)
            self.state = 9379
            self.match(TSqlParser.SERVICE)
            self.state = 9380
            self.match(TSqlParser.MASTER)
            self.state = 9381
            self.match(TSqlParser.KEY)
            self.state = 9382
            self.match(TSqlParser.TO)
            self.state = 9383
            self.match(TSqlParser.FILE)
            self.state = 9384
            self.match(TSqlParser.EQUAL)
            self.state = 9385
            localctx.service_master_key_backup_file = self.match(TSqlParser.STRING)
            self.state = 9386
            self.match(TSqlParser.ENCRYPTION)
            self.state = 9387
            self.match(TSqlParser.BY)
            self.state = 9388
            self.match(TSqlParser.PASSWORD)
            self.state = 9389
            self.match(TSqlParser.EQUAL)
            self.state = 9390
            localctx.encryption_password = self.match(TSqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Kill_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KILL(self):
            return self.getToken(TSqlParser.KILL, 0)

        def kill_process(self):
            return self.getTypedRuleContext(TSqlParser.Kill_processContext,0)


        def kill_query_notification(self):
            return self.getTypedRuleContext(TSqlParser.Kill_query_notificationContext,0)


        def kill_stats_job(self):
            return self.getTypedRuleContext(TSqlParser.Kill_stats_jobContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_kill_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKill_statement" ):
                listener.enterKill_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKill_statement" ):
                listener.exitKill_statement(self)




    def kill_statement(self):

        localctx = TSqlParser.Kill_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_kill_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9392
            self.match(TSqlParser.KILL)
            self.state = 9396
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1027, 1168, 1170]:
                self.state = 9393
                self.kill_process()
                pass
            elif token in [739]:
                self.state = 9394
                self.kill_query_notification()
                pass
            elif token in [934]:
                self.state = 9395
                self.kill_stats_job()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Kill_processContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.session_id = None # Token

        def UOW(self):
            return self.getToken(TSqlParser.UOW, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def STATUSONLY(self):
            return self.getToken(TSqlParser.STATUSONLY, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_kill_process

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKill_process" ):
                listener.enterKill_process(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKill_process" ):
                listener.exitKill_process(self)




    def kill_process(self):

        localctx = TSqlParser.Kill_processContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_kill_process)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9400
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1168, 1170]:
                self.state = 9398
                localctx.session_id = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==1168 or _la==1170):
                    localctx.session_id = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [1027]:
                self.state = 9399
                self.match(TSqlParser.UOW)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 9404
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1256,self._ctx)
            if la_ == 1:
                self.state = 9402
                self.match(TSqlParser.WITH)
                self.state = 9403
                self.match(TSqlParser.STATUSONLY)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Kill_query_notificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.subscription_id = None # Token

        def QUERY(self):
            return self.getToken(TSqlParser.QUERY, 0)

        def NOTIFICATION(self):
            return self.getToken(TSqlParser.NOTIFICATION, 0)

        def SUBSCRIPTION(self):
            return self.getToken(TSqlParser.SUBSCRIPTION, 0)

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_kill_query_notification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKill_query_notification" ):
                listener.enterKill_query_notification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKill_query_notification" ):
                listener.exitKill_query_notification(self)




    def kill_query_notification(self):

        localctx = TSqlParser.Kill_query_notificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_kill_query_notification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9406
            self.match(TSqlParser.QUERY)
            self.state = 9407
            self.match(TSqlParser.NOTIFICATION)
            self.state = 9408
            self.match(TSqlParser.SUBSCRIPTION)
            self.state = 9411
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22]:
                self.state = 9409
                self.match(TSqlParser.ALL)
                pass
            elif token in [1168]:
                self.state = 9410
                localctx.subscription_id = self.match(TSqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Kill_stats_jobContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.job_id = None # Token

        def STATS(self):
            return self.getToken(TSqlParser.STATS, 0)

        def JOB(self):
            return self.getToken(TSqlParser.JOB, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_kill_stats_job

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKill_stats_job" ):
                listener.enterKill_stats_job(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKill_stats_job" ):
                listener.exitKill_stats_job(self)




    def kill_stats_job(self):

        localctx = TSqlParser.Kill_stats_jobContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_kill_stats_job)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9413
            self.match(TSqlParser.STATS)
            self.state = 9414
            self.match(TSqlParser.JOB)
            self.state = 9415
            localctx.job_id = self.match(TSqlParser.DECIMAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(TSqlParser.EXECUTE, 0)

        def execute_body(self):
            return self.getTypedRuleContext(TSqlParser.Execute_bodyContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_execute_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_statement" ):
                listener.enterExecute_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_statement" ):
                listener.exitExecute_statement(self)




    def execute_statement(self):

        localctx = TSqlParser.Execute_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_execute_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9417
            self.match(TSqlParser.EXECUTE)
            self.state = 9418
            self.execute_body()
            self.state = 9420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1258,self._ctx)
            if la_ == 1:
                self.state = 9419
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_body_batchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_proc_name_server_database_schema(self):
            return self.getTypedRuleContext(TSqlParser.Func_proc_name_server_database_schemaContext,0)


        def execute_statement_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Execute_statement_argContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Execute_statement_argContext,i)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_execute_body_batch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_body_batch" ):
                listener.enterExecute_body_batch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_body_batch" ):
                listener.exitExecute_body_batch(self)




    def execute_body_batch(self):

        localctx = TSqlParser.Execute_body_batchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_execute_body_batch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9422
            self.func_proc_name_server_database_schema()
            self.state = 9431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1260,self._ctx)
            if la_ == 1:
                self.state = 9423
                self.execute_statement_arg()
                self.state = 9428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 9424
                    self.match(TSqlParser.COMMA)
                    self.state = 9425
                    self.execute_statement_arg()
                    self.state = 9430
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 9434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1261,self._ctx)
            if la_ == 1:
                self.state = 9433
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.return_status = None # Token
            self.linkedServer = None # Id_Context

        def func_proc_name_server_database_schema(self):
            return self.getTypedRuleContext(TSqlParser.Func_proc_name_server_database_schemaContext,0)


        def execute_var_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Execute_var_stringContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Execute_var_stringContext,i)


        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def execute_statement_arg(self):
            return self.getTypedRuleContext(TSqlParser.Execute_statement_argContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def AT_KEYWORD(self):
            return self.getToken(TSqlParser.AT_KEYWORD, 0)

        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def USER(self):
            return self.getToken(TSqlParser.USER, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def CALLER(self):
            return self.getToken(TSqlParser.CALLER, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_execute_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_body" ):
                listener.enterExecute_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_body" ):
                listener.exitExecute_body(self)




    def execute_body(self):

        localctx = TSqlParser.Execute_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_execute_body)
        self._la = 0 # Token type
        try:
            self.state = 9474
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1166, 1167, 1169, 1170, 1187]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9438
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1262,self._ctx)
                if la_ == 1:
                    self.state = 9436
                    localctx.return_status = self.match(TSqlParser.LOCAL_ID)
                    self.state = 9437
                    self.match(TSqlParser.EQUAL)


                self.state = 9442
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169, 1187]:
                    self.state = 9440
                    self.func_proc_name_server_database_schema()
                    pass
                elif token in [1166, 1170]:
                    self.state = 9441
                    self.execute_var_string()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 9445
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1264,self._ctx)
                if la_ == 1:
                    self.state = 9444
                    self.execute_statement_arg()


                pass
            elif token in [1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9447
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9448
                self.execute_var_string()
                self.state = 9453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 9449
                    self.match(TSqlParser.COMMA)
                    self.state = 9450
                    self.execute_var_string()
                    self.state = 9455
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 9456
                self.match(TSqlParser.RR_BRACKET)
                self.state = 9461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 9457
                    self.match(TSqlParser.AS)
                    self.state = 9458
                    _la = self._input.LA(1)
                    if not(_la==524 or _la==1035):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 9459
                    self.match(TSqlParser.EQUAL)
                    self.state = 9460
                    self.match(TSqlParser.STRING)


                self.state = 9465
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1267,self._ctx)
                if la_ == 1:
                    self.state = 9463
                    self.match(TSqlParser.AT_KEYWORD)
                    self.state = 9464
                    localctx.linkedServer = self.id_()


                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 3)
                self.state = 9467
                self.match(TSqlParser.AS)
                self.state = 9472
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [524, 1035]:
                    self.state = 9468
                    _la = self._input.LA(1)
                    if not(_la==524 or _la==1035):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 9469
                    self.match(TSqlParser.EQUAL)
                    self.state = 9470
                    self.match(TSqlParser.STRING)
                    pass
                elif token in [113]:
                    self.state = 9471
                    self.match(TSqlParser.CALLER)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_statement_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def execute_statement_arg_unnamed(self):
            return self.getTypedRuleContext(TSqlParser.Execute_statement_arg_unnamedContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def execute_statement_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Execute_statement_argContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Execute_statement_argContext,i)


        def execute_statement_arg_named(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Execute_statement_arg_namedContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Execute_statement_arg_namedContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_execute_statement_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_statement_arg" ):
                listener.enterExecute_statement_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_statement_arg" ):
                listener.exitExecute_statement_arg(self)




    def execute_statement_arg(self):

        localctx = TSqlParser.Execute_statement_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_execute_statement_arg)
        try:
            self.state = 9492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1272,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9476
                self.execute_statement_arg_unnamed()
                self.state = 9481
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1270,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 9477
                        self.match(TSqlParser.COMMA)
                        self.state = 9478
                        self.execute_statement_arg() 
                    self.state = 9483
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1270,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9484
                self.execute_statement_arg_named()
                self.state = 9489
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1271,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 9485
                        self.match(TSqlParser.COMMA)
                        self.state = 9486
                        self.execute_statement_arg_named() 
                    self.state = 9491
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1271,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_statement_arg_namedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.value = None # Execute_parameterContext

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def execute_parameter(self):
            return self.getTypedRuleContext(TSqlParser.Execute_parameterContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_execute_statement_arg_named

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_statement_arg_named" ):
                listener.enterExecute_statement_arg_named(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_statement_arg_named" ):
                listener.exitExecute_statement_arg_named(self)




    def execute_statement_arg_named(self):

        localctx = TSqlParser.Execute_statement_arg_namedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_execute_statement_arg_named)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9494
            localctx.name = self.match(TSqlParser.LOCAL_ID)
            self.state = 9495
            self.match(TSqlParser.EQUAL)
            self.state = 9496
            localctx.value = self.execute_parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_statement_arg_unnamedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Execute_parameterContext

        def execute_parameter(self):
            return self.getTypedRuleContext(TSqlParser.Execute_parameterContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_execute_statement_arg_unnamed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_statement_arg_unnamed" ):
                listener.enterExecute_statement_arg_unnamed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_statement_arg_unnamed" ):
                listener.exitExecute_statement_arg_unnamed(self)




    def execute_statement_arg_unnamed(self):

        localctx = TSqlParser.Execute_statement_arg_unnamedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_execute_statement_arg_unnamed)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9498
            localctx.value = self.execute_parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(TSqlParser.ConstantContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def NULL_(self):
            return self.getToken(TSqlParser.NULL_, 0)

        def OUTPUT(self):
            return self.getToken(TSqlParser.OUTPUT, 0)

        def OUT(self):
            return self.getToken(TSqlParser.OUT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_execute_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_parameter" ):
                listener.enterExecute_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_parameter" ):
                listener.exitExecute_parameter(self)




    def execute_parameter(self):

        localctx = TSqlParser.Execute_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_execute_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9508
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1168, 1170, 1171, 1172, 1173, 1191, 1202, 1207]:
                self.state = 9500
                self.constant()
                pass
            elif token in [1166]:
                self.state = 9501
                self.match(TSqlParser.LOCAL_ID)
                self.state = 9503
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1273,self._ctx)
                if la_ == 1:
                    self.state = 9502
                    _la = self._input.LA(1)
                    if not(_la==669 or _la==671):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                self.state = 9505
                self.id_()
                pass
            elif token in [243]:
                self.state = 9506
                self.match(TSqlParser.DEFAULT)
                pass
            elif token in [630]:
                self.state = 9507
                self.match(TSqlParser.NULL_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_var_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOCAL_ID)
            else:
                return self.getToken(TSqlParser.LOCAL_ID, i)

        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.PLUS)
            else:
                return self.getToken(TSqlParser.PLUS, i)

        def OUTPUT(self):
            return self.getToken(TSqlParser.OUTPUT, 0)

        def OUT(self):
            return self.getToken(TSqlParser.OUT, 0)

        def execute_var_string(self):
            return self.getTypedRuleContext(TSqlParser.Execute_var_stringContext,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_execute_var_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_var_string" ):
                listener.enterExecute_var_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_var_string" ):
                listener.exitExecute_var_string(self)




    def execute_var_string(self):

        localctx = TSqlParser.Execute_var_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_execute_var_string)
        self._la = 0 # Token type
        try:
            self.state = 9531
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1166]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9510
                self.match(TSqlParser.LOCAL_ID)
                self.state = 9512
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1275,self._ctx)
                if la_ == 1:
                    self.state = 9511
                    _la = self._input.LA(1)
                    if not(_la==669 or _la==671):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 9520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1201:
                    self.state = 9514
                    self.match(TSqlParser.PLUS)
                    self.state = 9515
                    self.match(TSqlParser.LOCAL_ID)
                    self.state = 9518
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1201:
                        self.state = 9516
                        self.match(TSqlParser.PLUS)
                        self.state = 9517
                        self.execute_var_string()




                pass
            elif token in [1170]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9522
                self.match(TSqlParser.STRING)
                self.state = 9529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1201:
                    self.state = 9523
                    self.match(TSqlParser.PLUS)
                    self.state = 9524
                    self.match(TSqlParser.LOCAL_ID)
                    self.state = 9527
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1201:
                        self.state = 9525
                        self.match(TSqlParser.PLUS)
                        self.state = 9526
                        self.execute_var_string()




                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Security_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.on_id = None # Table_nameContext
            self._principal_id = None # Principal_idContext
            self.to_principal = list() # of Principal_idContexts
            self.as_principal = None # Principal_idContext

        def execute_clause(self):
            return self.getTypedRuleContext(TSqlParser.Execute_clauseContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.GRANT)
            else:
                return self.getToken(TSqlParser.GRANT, i)

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def principal_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Principal_idContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Principal_idContext,i)


        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def grant_permission(self):
            return self.getTypedRuleContext(TSqlParser.Grant_permissionContext,0)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def OPTION(self):
            return self.getToken(TSqlParser.OPTION, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def PRIVILEGES(self):
            return self.getToken(TSqlParser.PRIVILEGES, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def class_type_for_grant(self):
            return self.getTypedRuleContext(TSqlParser.Class_type_for_grantContext,0)


        def DOUBLE_COLON(self):
            return self.getToken(TSqlParser.DOUBLE_COLON, 0)

        def REVERT(self):
            return self.getToken(TSqlParser.REVERT, 0)

        def COOKIE(self):
            return self.getToken(TSqlParser.COOKIE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def open_key(self):
            return self.getTypedRuleContext(TSqlParser.Open_keyContext,0)


        def close_key(self):
            return self.getTypedRuleContext(TSqlParser.Close_keyContext,0)


        def create_key(self):
            return self.getTypedRuleContext(TSqlParser.Create_keyContext,0)


        def create_certificate(self):
            return self.getTypedRuleContext(TSqlParser.Create_certificateContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_security_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecurity_statement" ):
                listener.enterSecurity_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecurity_statement" ):
                listener.exitSecurity_statement(self)




    def security_statement(self):

        localctx = TSqlParser.Security_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_security_statement)
        self._la = 0 # Token type
        try:
            self.state = 9595
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1293,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9533
                self.execute_clause()
                self.state = 9535
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1281,self._ctx)
                if la_ == 1:
                    self.state = 9534
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9537
                self.match(TSqlParser.GRANT)
                self.state = 9549
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [22]:
                    self.state = 9538
                    self.match(TSqlParser.ALL)
                    self.state = 9540
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==725:
                        self.state = 9539
                        self.match(TSqlParser.PRIVILEGES)


                    pass
                elif token in [13, 35, 66, 85, 137, 174, 188, 197, 252, 318, 329, 439, 457, 495, 768, 773, 865, 871, 895, 900, 950, 971, 1024, 1026, 1028, 1051]:
                    self.state = 9542
                    self.grant_permission()
                    self.state = 9547
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1192:
                        self.state = 9543
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 9544
                        self.column_name_list()
                        self.state = 9545
                        self.match(TSqlParser.RR_BRACKET)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 9558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==649:
                    self.state = 9551
                    self.match(TSqlParser.ON)
                    self.state = 9555
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1285,self._ctx)
                    if la_ == 1:
                        self.state = 9552
                        self.class_type_for_grant()
                        self.state = 9553
                        self.match(TSqlParser.DOUBLE_COLON)


                    self.state = 9557
                    localctx.on_id = self.table_name()


                self.state = 9560
                self.match(TSqlParser.TO)
                self.state = 9561
                localctx._principal_id = self.principal_id()
                localctx.to_principal.append(localctx._principal_id)
                self.state = 9566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 9562
                    self.match(TSqlParser.COMMA)
                    self.state = 9563
                    localctx._principal_id = self.principal_id()
                    localctx.to_principal.append(localctx._principal_id)
                    self.state = 9568
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 9572
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1288,self._ctx)
                if la_ == 1:
                    self.state = 9569
                    self.match(TSqlParser.WITH)
                    self.state = 9570
                    self.match(TSqlParser.GRANT)
                    self.state = 9571
                    self.match(TSqlParser.OPTION)


                self.state = 9576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 9574
                    self.match(TSqlParser.AS)
                    self.state = 9575
                    localctx.as_principal = self.principal_id()


                self.state = 9579
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1290,self._ctx)
                if la_ == 1:
                    self.state = 9578
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9581
                self.match(TSqlParser.REVERT)
                self.state = 9586
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1291,self._ctx)
                if la_ == 1:
                    self.state = 9582
                    self.match(TSqlParser.WITH)
                    self.state = 9583
                    self.match(TSqlParser.COOKIE)
                    self.state = 9584
                    self.match(TSqlParser.EQUAL)
                    self.state = 9585
                    self.match(TSqlParser.LOCAL_ID)


                self.state = 9589
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1292,self._ctx)
                if la_ == 1:
                    self.state = 9588
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9591
                self.open_key()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 9592
                self.close_key()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 9593
                self.create_key()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 9594
                self.create_certificate()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Principal_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def PUBLIC(self):
            return self.getToken(TSqlParser.PUBLIC, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_principal_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrincipal_id" ):
                listener.enterPrincipal_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrincipal_id" ):
                listener.exitPrincipal_id(self)




    def principal_id(self):

        localctx = TSqlParser.Principal_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_principal_id)
        try:
            self.state = 9599
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9597
                self.id_()
                pass
            elif token in [735]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9598
                self.match(TSqlParser.PUBLIC)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_certificateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.certificate_name = None # Id_Context
            self.user_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def existing_keys(self):
            return self.getTypedRuleContext(TSqlParser.Existing_keysContext,0)


        def generate_new_keys(self):
            return self.getTypedRuleContext(TSqlParser.Generate_new_keysContext,0)


        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def ACTIVE(self):
            return self.getToken(TSqlParser.ACTIVE, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def BEGIN(self):
            return self.getToken(TSqlParser.BEGIN, 0)

        def DIALOG(self):
            return self.getToken(TSqlParser.DIALOG, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_create_certificate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_certificate" ):
                listener.enterCreate_certificate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_certificate" ):
                listener.exitCreate_certificate(self)




    def create_certificate(self):

        localctx = TSqlParser.Create_certificateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_create_certificate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9601
            self.match(TSqlParser.CREATE)
            self.state = 9602
            self.match(TSqlParser.CERTIFICATE)
            self.state = 9603
            localctx.certificate_name = self.id_()
            self.state = 9606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 9604
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 9605
                localctx.user_name = self.id_()


            self.state = 9611
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [378]:
                self.state = 9608
                self.match(TSqlParser.FROM)
                self.state = 9609
                self.existing_keys()
                pass
            elif token in [295, 1063]:
                self.state = 9610
                self.generate_new_keys()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 9619
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1297,self._ctx)
            if la_ == 1:
                self.state = 9613
                self.match(TSqlParser.ACTIVE)
                self.state = 9614
                self.match(TSqlParser.FOR)
                self.state = 9615
                self.match(TSqlParser.BEGIN)
                self.state = 9616
                self.match(TSqlParser.DIALOG)
                self.state = 9617
                self.match(TSqlParser.EQUAL)
                self.state = 9618
                self.on_off()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Existing_keysContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assembly_name = None # Id_Context
            self.path_to_file = None # Token

        def ASSEMBLY(self):
            return self.getToken(TSqlParser.ASSEMBLY, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def EXECUTABLE(self):
            return self.getToken(TSqlParser.EXECUTABLE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def PRIVATE(self):
            return self.getToken(TSqlParser.PRIVATE, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def private_key_options(self):
            return self.getTypedRuleContext(TSqlParser.Private_key_optionsContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_existing_keys

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExisting_keys" ):
                listener.enterExisting_keys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExisting_keys" ):
                listener.exitExisting_keys(self)




    def existing_keys(self):

        localctx = TSqlParser.Existing_keysContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_existing_keys)
        self._la = 0 # Token type
        try:
            self.state = 9638
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9621
                self.match(TSqlParser.ASSEMBLY)
                self.state = 9622
                localctx.assembly_name = self.id_()
                pass
            elif token in [316, 341]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==316:
                    self.state = 9623
                    self.match(TSqlParser.EXECUTABLE)


                self.state = 9626
                self.match(TSqlParser.FILE)
                self.state = 9627
                self.match(TSqlParser.EQUAL)
                self.state = 9628
                localctx.path_to_file = self.match(TSqlParser.STRING)
                self.state = 9636
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1299,self._ctx)
                if la_ == 1:
                    self.state = 9629
                    self.match(TSqlParser.WITH)
                    self.state = 9630
                    self.match(TSqlParser.PRIVATE)
                    self.state = 9631
                    self.match(TSqlParser.KEY)
                    self.state = 9632
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 9633
                    self.private_key_options()
                    self.state = 9634
                    self.match(TSqlParser.RR_BRACKET)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Private_key_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.path = None # Token
            self.password = None # Token

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def BINARY(self):
            return self.getToken(TSqlParser.BINARY, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def DECRYPTION(self):
            return self.getToken(TSqlParser.DECRYPTION, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_private_key_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivate_key_options" ):
                listener.enterPrivate_key_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivate_key_options" ):
                listener.exitPrivate_key_options(self)




    def private_key_options(self):

        localctx = TSqlParser.Private_key_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_private_key_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9640
            _la = self._input.LA(1)
            if not(_la==341 or _la==1171):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 9641
            self.match(TSqlParser.EQUAL)
            self.state = 9642
            localctx.path = self.match(TSqlParser.STRING)
            self.state = 9649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1194:
                self.state = 9643
                self.match(TSqlParser.COMMA)
                self.state = 9644
                _la = self._input.LA(1)
                if not(_la==242 or _la==295):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 9645
                self.match(TSqlParser.BY)
                self.state = 9646
                self.match(TSqlParser.PASSWORD)
                self.state = 9647
                self.match(TSqlParser.EQUAL)
                self.state = 9648
                localctx.password = self.match(TSqlParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generate_new_keysContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.password = None # Token
            self.certificate_subject_name = None # Token

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def SUBJECT(self):
            return self.getToken(TSqlParser.SUBJECT, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def date_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Date_optionsContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Date_optionsContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_generate_new_keys

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenerate_new_keys" ):
                listener.enterGenerate_new_keys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenerate_new_keys" ):
                listener.exitGenerate_new_keys(self)




    def generate_new_keys(self):

        localctx = TSqlParser.Generate_new_keysContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_generate_new_keys)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==295:
                self.state = 9651
                self.match(TSqlParser.ENCRYPTION)
                self.state = 9652
                self.match(TSqlParser.BY)
                self.state = 9653
                self.match(TSqlParser.PASSWORD)
                self.state = 9654
                self.match(TSqlParser.EQUAL)
                self.state = 9655
                localctx.password = self.match(TSqlParser.STRING)


            self.state = 9658
            self.match(TSqlParser.WITH)
            self.state = 9659
            self.match(TSqlParser.SUBJECT)
            self.state = 9660
            self.match(TSqlParser.EQUAL)
            self.state = 9661
            localctx.certificate_subject_name = self.match(TSqlParser.STRING)
            self.state = 9666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 9662
                self.match(TSqlParser.COMMA)
                self.state = 9663
                self.date_options()
                self.state = 9668
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def START_DATE(self):
            return self.getToken(TSqlParser.START_DATE, 0)

        def EXPIRY_DATE(self):
            return self.getToken(TSqlParser.EXPIRY_DATE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_date_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_options" ):
                listener.enterDate_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_options" ):
                listener.exitDate_options(self)




    def date_options(self):

        localctx = TSqlParser.Date_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_date_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9669
            _la = self._input.LA(1)
            if not(_la==325 or _la==928):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 9670
            self.match(TSqlParser.EQUAL)
            self.state = 9671
            self.match(TSqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Open_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key_name = None # Id_Context
            self.password = None # Token

        def OPEN(self):
            return self.getToken(TSqlParser.OPEN, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def DECRYPTION(self):
            return self.getToken(TSqlParser.DECRYPTION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def decryption_mechanism(self):
            return self.getTypedRuleContext(TSqlParser.Decryption_mechanismContext,0)


        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_open_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_key" ):
                listener.enterOpen_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_key" ):
                listener.exitOpen_key(self)




    def open_key(self):

        localctx = TSqlParser.Open_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_open_key)
        try:
            self.state = 9689
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1304,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9673
                self.match(TSqlParser.OPEN)
                self.state = 9674
                self.match(TSqlParser.SYMMETRIC)
                self.state = 9675
                self.match(TSqlParser.KEY)
                self.state = 9676
                localctx.key_name = self.id_()
                self.state = 9677
                self.match(TSqlParser.DECRYPTION)
                self.state = 9678
                self.match(TSqlParser.BY)
                self.state = 9679
                self.decryption_mechanism()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9681
                self.match(TSqlParser.OPEN)
                self.state = 9682
                self.match(TSqlParser.MASTER)
                self.state = 9683
                self.match(TSqlParser.KEY)
                self.state = 9684
                self.match(TSqlParser.DECRYPTION)
                self.state = 9685
                self.match(TSqlParser.BY)
                self.state = 9686
                self.match(TSqlParser.PASSWORD)
                self.state = 9687
                self.match(TSqlParser.EQUAL)
                self.state = 9688
                localctx.password = self.match(TSqlParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Close_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key_name = None # Id_Context

        def CLOSE(self):
            return self.getToken(TSqlParser.CLOSE, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def KEYS(self):
            return self.getToken(TSqlParser.KEYS, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_close_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClose_key" ):
                listener.enterClose_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClose_key" ):
                listener.exitClose_key(self)




    def close_key(self):

        localctx = TSqlParser.Close_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_close_key)
        try:
            self.state = 9702
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1305,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9691
                self.match(TSqlParser.CLOSE)
                self.state = 9692
                self.match(TSqlParser.SYMMETRIC)
                self.state = 9693
                self.match(TSqlParser.KEY)
                self.state = 9694
                localctx.key_name = self.id_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9695
                self.match(TSqlParser.CLOSE)
                self.state = 9696
                self.match(TSqlParser.ALL)
                self.state = 9697
                self.match(TSqlParser.SYMMETRIC)
                self.state = 9698
                self.match(TSqlParser.KEYS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9699
                self.match(TSqlParser.CLOSE)
                self.state = 9700
                self.match(TSqlParser.MASTER)
                self.state = 9701
                self.match(TSqlParser.KEY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.password = None # Token
            self.key_name = None # Id_Context
            self.user_name = None # Id_Context
            self.provider_name = None # Id_Context

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def ENCRYPTION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ENCRYPTION)
            else:
                return self.getToken(TSqlParser.ENCRYPTION, i)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BY)
            else:
                return self.getToken(TSqlParser.BY, i)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def key_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Key_optionsContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Key_optionsContext,i)


        def encryption_mechanism(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Encryption_mechanismContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Encryption_mechanismContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_key" ):
                listener.enterCreate_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_key" ):
                listener.exitCreate_key(self)




    def create_key(self):

        localctx = TSqlParser.Create_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_create_key)
        self._la = 0 # Token type
        try:
            self.state = 9739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1311,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9704
                self.match(TSqlParser.CREATE)
                self.state = 9705
                self.match(TSqlParser.MASTER)
                self.state = 9706
                self.match(TSqlParser.KEY)
                self.state = 9707
                self.match(TSqlParser.ENCRYPTION)
                self.state = 9708
                self.match(TSqlParser.BY)
                self.state = 9709
                self.match(TSqlParser.PASSWORD)
                self.state = 9710
                self.match(TSqlParser.EQUAL)
                self.state = 9711
                localctx.password = self.match(TSqlParser.STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9712
                self.match(TSqlParser.CREATE)
                self.state = 9713
                self.match(TSqlParser.SYMMETRIC)
                self.state = 9714
                self.match(TSqlParser.KEY)
                self.state = 9715
                localctx.key_name = self.id_()
                self.state = 9718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 9716
                    self.match(TSqlParser.AUTHORIZATION)
                    self.state = 9717
                    localctx.user_name = self.id_()


                self.state = 9723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==378:
                    self.state = 9720
                    self.match(TSqlParser.FROM)
                    self.state = 9721
                    self.match(TSqlParser.PROVIDER)
                    self.state = 9722
                    localctx.provider_name = self.id_()


                self.state = 9725
                self.match(TSqlParser.WITH)
                self.state = 9735 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 9730
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [21, 199, 427, 493, 734]:
                            self.state = 9726
                            self.key_options()
                            pass
                        elif token in [295]:
                            self.state = 9727
                            self.match(TSqlParser.ENCRYPTION)
                            self.state = 9728
                            self.match(TSqlParser.BY)
                            self.state = 9729
                            self.encryption_mechanism()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 9733
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 9732
                            self.match(TSqlParser.COMMA)



                    else:
                        raise NoViableAltException(self)
                    self.state = 9737 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1310,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pass_phrase = None # Token
            self.identity_phrase = None # Token
            self.key_name_in_provider = None # Token

        def KEY_SOURCE(self):
            return self.getToken(TSqlParser.KEY_SOURCE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def ALGORITHM(self):
            return self.getToken(TSqlParser.ALGORITHM, 0)

        def algorithm(self):
            return self.getTypedRuleContext(TSqlParser.AlgorithmContext,0)


        def IDENTITY_VALUE(self):
            return self.getToken(TSqlParser.IDENTITY_VALUE, 0)

        def PROVIDER_KEY_NAME(self):
            return self.getToken(TSqlParser.PROVIDER_KEY_NAME, 0)

        def CREATION_DISPOSITION(self):
            return self.getToken(TSqlParser.CREATION_DISPOSITION, 0)

        def CREATE_NEW(self):
            return self.getToken(TSqlParser.CREATE_NEW, 0)

        def OPEN_EXISTING(self):
            return self.getToken(TSqlParser.OPEN_EXISTING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_key_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_options" ):
                listener.enterKey_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_options" ):
                listener.exitKey_options(self)




    def key_options(self):

        localctx = TSqlParser.Key_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_key_options)
        self._la = 0 # Token type
        try:
            self.state = 9756
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [493]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9741
                self.match(TSqlParser.KEY_SOURCE)
                self.state = 9742
                self.match(TSqlParser.EQUAL)
                self.state = 9743
                localctx.pass_phrase = self.match(TSqlParser.STRING)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9744
                self.match(TSqlParser.ALGORITHM)
                self.state = 9745
                self.match(TSqlParser.EQUAL)
                self.state = 9746
                self.algorithm()
                pass
            elif token in [427]:
                self.enterOuterAlt(localctx, 3)
                self.state = 9747
                self.match(TSqlParser.IDENTITY_VALUE)
                self.state = 9748
                self.match(TSqlParser.EQUAL)
                self.state = 9749
                localctx.identity_phrase = self.match(TSqlParser.STRING)
                pass
            elif token in [734]:
                self.enterOuterAlt(localctx, 4)
                self.state = 9750
                self.match(TSqlParser.PROVIDER_KEY_NAME)
                self.state = 9751
                self.match(TSqlParser.EQUAL)
                self.state = 9752
                localctx.key_name_in_provider = self.match(TSqlParser.STRING)
                pass
            elif token in [199]:
                self.enterOuterAlt(localctx, 5)
                self.state = 9753
                self.match(TSqlParser.CREATION_DISPOSITION)
                self.state = 9754
                self.match(TSqlParser.EQUAL)
                self.state = 9755
                _la = self._input.LA(1)
                if not(_la==198 or _la==659):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlgorithmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DES(self):
            return self.getToken(TSqlParser.DES, 0)

        def TRIPLE_DES(self):
            return self.getToken(TSqlParser.TRIPLE_DES, 0)

        def TRIPLE_DES_3KEY(self):
            return self.getToken(TSqlParser.TRIPLE_DES_3KEY, 0)

        def RC2(self):
            return self.getToken(TSqlParser.RC2, 0)

        def RC4(self):
            return self.getToken(TSqlParser.RC4, 0)

        def RC4_128(self):
            return self.getToken(TSqlParser.RC4_128, 0)

        def DESX(self):
            return self.getToken(TSqlParser.DESX, 0)

        def AES_128(self):
            return self.getToken(TSqlParser.AES_128, 0)

        def AES_192(self):
            return self.getToken(TSqlParser.AES_192, 0)

        def AES_256(self):
            return self.getToken(TSqlParser.AES_256, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_algorithm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlgorithm" ):
                listener.enterAlgorithm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlgorithm" ):
                listener.exitAlgorithm(self)




    def algorithm(self):

        localctx = TSqlParser.AlgorithmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_algorithm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9758
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 229376) != 0) or _la==257 or _la==260 or ((((_la - 751)) & ~0x3f) == 0 and ((1 << (_la - 751)) & 7) != 0) or _la==1001 or _la==1002):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Encryption_mechanismContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.certificate_name = None # Id_Context
            self.asym_key_name = None # Id_Context
            self.decrypting_Key_name = None # Id_Context

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_encryption_mechanism

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEncryption_mechanism" ):
                listener.enterEncryption_mechanism(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEncryption_mechanism" ):
                listener.exitEncryption_mechanism(self)




    def encryption_mechanism(self):

        localctx = TSqlParser.Encryption_mechanismContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_encryption_mechanism)
        try:
            self.state = 9771
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [121]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9760
                self.match(TSqlParser.CERTIFICATE)
                self.state = 9761
                localctx.certificate_name = self.id_()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9762
                self.match(TSqlParser.ASYMMETRIC)
                self.state = 9763
                self.match(TSqlParser.KEY)
                self.state = 9764
                localctx.asym_key_name = self.id_()
                pass
            elif token in [961]:
                self.enterOuterAlt(localctx, 3)
                self.state = 9765
                self.match(TSqlParser.SYMMETRIC)
                self.state = 9766
                self.match(TSqlParser.KEY)
                self.state = 9767
                localctx.decrypting_Key_name = self.id_()
                pass
            elif token in [690]:
                self.enterOuterAlt(localctx, 4)
                self.state = 9768
                self.match(TSqlParser.PASSWORD)
                self.state = 9769
                self.match(TSqlParser.EQUAL)
                self.state = 9770
                self.match(TSqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Decryption_mechanismContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.certificate_name = None # Id_Context
            self.asym_key_name = None # Id_Context
            self.decrypting_Key_name = None # Id_Context

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_decryption_mechanism

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecryption_mechanism" ):
                listener.enterDecryption_mechanism(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecryption_mechanism" ):
                listener.exitDecryption_mechanism(self)




    def decryption_mechanism(self):

        localctx = TSqlParser.Decryption_mechanismContext(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_decryption_mechanism)
        try:
            self.state = 9796
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [121]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9773
                self.match(TSqlParser.CERTIFICATE)
                self.state = 9774
                localctx.certificate_name = self.id_()
                self.state = 9779
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1314,self._ctx)
                if la_ == 1:
                    self.state = 9775
                    self.match(TSqlParser.WITH)
                    self.state = 9776
                    self.match(TSqlParser.PASSWORD)
                    self.state = 9777
                    self.match(TSqlParser.EQUAL)
                    self.state = 9778
                    self.match(TSqlParser.STRING)


                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9781
                self.match(TSqlParser.ASYMMETRIC)
                self.state = 9782
                self.match(TSqlParser.KEY)
                self.state = 9783
                localctx.asym_key_name = self.id_()
                self.state = 9788
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1315,self._ctx)
                if la_ == 1:
                    self.state = 9784
                    self.match(TSqlParser.WITH)
                    self.state = 9785
                    self.match(TSqlParser.PASSWORD)
                    self.state = 9786
                    self.match(TSqlParser.EQUAL)
                    self.state = 9787
                    self.match(TSqlParser.STRING)


                pass
            elif token in [961]:
                self.enterOuterAlt(localctx, 3)
                self.state = 9790
                self.match(TSqlParser.SYMMETRIC)
                self.state = 9791
                self.match(TSqlParser.KEY)
                self.state = 9792
                localctx.decrypting_Key_name = self.id_()
                pass
            elif token in [690]:
                self.enterOuterAlt(localctx, 4)
                self.state = 9793
                self.match(TSqlParser.PASSWORD)
                self.state = 9794
                self.match(TSqlParser.EQUAL)
                self.state = 9795
                self.match(TSqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_permissionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADMINISTER(self):
            return self.getToken(TSqlParser.ADMINISTER, 0)

        def BULK(self):
            return self.getToken(TSqlParser.BULK, 0)

        def OPERATIONS(self):
            return self.getToken(TSqlParser.OPERATIONS, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def ANY(self):
            return self.getToken(TSqlParser.ANY, 0)

        def RESOURCES(self):
            return self.getToken(TSqlParser.RESOURCES, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def STATE(self):
            return self.getToken(TSqlParser.STATE, 0)

        def SETTINGS(self):
            return self.getToken(TSqlParser.SETTINGS, 0)

        def TRACE(self):
            return self.getToken(TSqlParser.TRACE, 0)

        def APPLICATION(self):
            return self.getToken(TSqlParser.APPLICATION, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def ASSEMBLY(self):
            return self.getToken(TSqlParser.ASSEMBLY, 0)

        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def AVAILABILITY(self):
            return self.getToken(TSqlParser.AVAILABILITY, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def COLUMN(self):
            return self.getToken(TSqlParser.COLUMN, 0)

        def CONNECTION(self):
            return self.getToken(TSqlParser.CONNECTION, 0)

        def CONTRACT(self):
            return self.getToken(TSqlParser.CONTRACT, 0)

        def CREDENTIAL(self):
            return self.getToken(TSqlParser.CREDENTIAL, 0)

        def DATASPACE(self):
            return self.getToken(TSqlParser.DATASPACE, 0)

        def ENDPOINT(self):
            return self.getToken(TSqlParser.ENDPOINT, 0)

        def EVENT(self):
            return self.getToken(TSqlParser.EVENT, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def FULLTEXT(self):
            return self.getToken(TSqlParser.FULLTEXT, 0)

        def CATALOG(self):
            return self.getToken(TSqlParser.CATALOG, 0)

        def LINKED(self):
            return self.getToken(TSqlParser.LINKED, 0)

        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def MASK(self):
            return self.getToken(TSqlParser.MASK, 0)

        def MESSAGE(self):
            return self.getToken(TSqlParser.MESSAGE, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def REMOTE(self):
            return self.getToken(TSqlParser.REMOTE, 0)

        def SERVICE(self):
            return self.getToken(TSqlParser.SERVICE, 0)

        def BINDING(self):
            return self.getToken(TSqlParser.BINDING, 0)

        def ROUTE(self):
            return self.getToken(TSqlParser.ROUTE, 0)

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def SECURITY(self):
            return self.getToken(TSqlParser.SECURITY, 0)

        def POLICY(self):
            return self.getToken(TSqlParser.POLICY, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def USER(self):
            return self.getToken(TSqlParser.USER, 0)

        def NOTIFICATION(self):
            return self.getToken(TSqlParser.NOTIFICATION, 0)

        def SESSION(self):
            return self.getToken(TSqlParser.SESSION, 0)

        def AUDIT(self):
            return self.getToken(TSqlParser.AUDIT, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def DATA(self):
            return self.getToken(TSqlParser.DATA, 0)

        def SOURCE(self):
            return self.getToken(TSqlParser.SOURCE, 0)

        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def FORMAT(self):
            return self.getToken(TSqlParser.FORMAT, 0)

        def LIBRARY(self):
            return self.getToken(TSqlParser.LIBRARY, 0)

        def DDL(self):
            return self.getToken(TSqlParser.DDL, 0)

        def TRIGGER(self):
            return self.getToken(TSqlParser.TRIGGER, 0)

        def SCOPED(self):
            return self.getToken(TSqlParser.SCOPED, 0)

        def CONFIGURATION(self):
            return self.getToken(TSqlParser.CONFIGURATION, 0)

        def AUTHENTICATE(self):
            return self.getToken(TSqlParser.AUTHENTICATE, 0)

        def BACKUP(self):
            return self.getToken(TSqlParser.BACKUP, 0)

        def LOG(self):
            return self.getToken(TSqlParser.LOG, 0)

        def CHECKPOINT(self):
            return self.getToken(TSqlParser.CHECKPOINT, 0)

        def CONNECT(self):
            return self.getToken(TSqlParser.CONNECT, 0)

        def REPLICATION(self):
            return self.getToken(TSqlParser.REPLICATION, 0)

        def SQL(self):
            return self.getToken(TSqlParser.SQL, 0)

        def CONTROL(self):
            return self.getToken(TSqlParser.CONTROL, 0)

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def AGGREGATE(self):
            return self.getToken(TSqlParser.AGGREGATE, 0)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def FUNCTION(self):
            return self.getToken(TSqlParser.FUNCTION, 0)

        def PROCEDURE(self):
            return self.getToken(TSqlParser.PROCEDURE, 0)

        def QUEUE(self):
            return self.getToken(TSqlParser.QUEUE, 0)

        def RULE(self):
            return self.getToken(TSqlParser.RULE, 0)

        def SEQUENCE(self):
            return self.getToken(TSqlParser.SEQUENCE, 0)

        def SYNONYM(self):
            return self.getToken(TSqlParser.SYNONYM, 0)

        def TABLE(self):
            return self.getToken(TSqlParser.TABLE, 0)

        def VIEW(self):
            return self.getToken(TSqlParser.VIEW, 0)

        def XML(self):
            return self.getToken(TSqlParser.XML, 0)

        def COLLECTION(self):
            return self.getToken(TSqlParser.COLLECTION, 0)

        def DELETE(self):
            return self.getToken(TSqlParser.DELETE, 0)

        def EXECUTE(self):
            return self.getToken(TSqlParser.EXECUTE, 0)

        def SCRIPT(self):
            return self.getToken(TSqlParser.SCRIPT, 0)

        def ACCESS(self):
            return self.getToken(TSqlParser.ACCESS, 0)

        def IMPERSONATE(self):
            return self.getToken(TSqlParser.IMPERSONATE, 0)

        def INSERT(self):
            return self.getToken(TSqlParser.INSERT, 0)

        def KILL(self):
            return self.getToken(TSqlParser.KILL, 0)

        def RECEIVE(self):
            return self.getToken(TSqlParser.RECEIVE, 0)

        def REFERENCES(self):
            return self.getToken(TSqlParser.REFERENCES, 0)

        def SELECT(self):
            return self.getToken(TSqlParser.SELECT, 0)

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def SECURABLES(self):
            return self.getToken(TSqlParser.SECURABLES, 0)

        def SEND(self):
            return self.getToken(TSqlParser.SEND, 0)

        def SHOWPLAN(self):
            return self.getToken(TSqlParser.SHOWPLAN, 0)

        def SHUTDOWN(self):
            return self.getToken(TSqlParser.SHUTDOWN, 0)

        def SUBSCRIBE(self):
            return self.getToken(TSqlParser.SUBSCRIBE, 0)

        def QUERY(self):
            return self.getToken(TSqlParser.QUERY, 0)

        def NOTIFICATIONS(self):
            return self.getToken(TSqlParser.NOTIFICATIONS, 0)

        def TAKE(self):
            return self.getToken(TSqlParser.TAKE, 0)

        def OWNERSHIP(self):
            return self.getToken(TSqlParser.OWNERSHIP, 0)

        def UNMASK(self):
            return self.getToken(TSqlParser.UNMASK, 0)

        def UNSAFE(self):
            return self.getToken(TSqlParser.UNSAFE, 0)

        def UPDATE(self):
            return self.getToken(TSqlParser.UPDATE, 0)

        def CHANGE(self):
            return self.getToken(TSqlParser.CHANGE, 0)

        def TRACKING(self):
            return self.getToken(TSqlParser.TRACKING, 0)

        def DEFINITION(self):
            return self.getToken(TSqlParser.DEFINITION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_grant_permission

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_permission" ):
                listener.enterGrant_permission(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_permission" ):
                listener.exitGrant_permission(self)




    def grant_permission(self):

        localctx = TSqlParser.Grant_permissionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_grant_permission)
        self._la = 0 # Token type
        try:
            self.state = 10011
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9798
                self.match(TSqlParser.ADMINISTER)
                self.state = 9804
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [108]:
                    self.state = 9799
                    self.match(TSqlParser.BULK)
                    self.state = 9800
                    self.match(TSqlParser.OPERATIONS)
                    pass
                elif token in [217]:
                    self.state = 9801
                    self.match(TSqlParser.DATABASE)
                    self.state = 9802
                    self.match(TSqlParser.BULK)
                    self.state = 9803
                    self.match(TSqlParser.OPERATIONS)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9806
                self.match(TSqlParser.ALTER)
                self.state = 9877
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [46]:
                    self.state = 9807
                    self.match(TSqlParser.ANY)
                    self.state = 9870
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [48]:
                        self.state = 9808
                        self.match(TSqlParser.APPLICATION)
                        self.state = 9809
                        self.match(TSqlParser.ROLE)
                        pass
                    elif token in [59]:
                        self.state = 9810
                        self.match(TSqlParser.ASSEMBLY)
                        pass
                    elif token in [61]:
                        self.state = 9811
                        self.match(TSqlParser.ASYMMETRIC)
                        self.state = 9812
                        self.match(TSqlParser.KEY)
                        pass
                    elif token in [81]:
                        self.state = 9813
                        self.match(TSqlParser.AVAILABILITY)
                        self.state = 9814
                        self.match(TSqlParser.GROUP)
                        pass
                    elif token in [121]:
                        self.state = 9815
                        self.match(TSqlParser.CERTIFICATE)
                        pass
                    elif token in [153]:
                        self.state = 9816
                        self.match(TSqlParser.COLUMN)
                        self.state = 9821
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [295]:
                            self.state = 9817
                            self.match(TSqlParser.ENCRYPTION)
                            self.state = 9818
                            self.match(TSqlParser.KEY)
                            pass
                        elif token in [534]:
                            self.state = 9819
                            self.match(TSqlParser.MASTER)
                            self.state = 9820
                            self.match(TSqlParser.KEY)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [175]:
                        self.state = 9823
                        self.match(TSqlParser.CONNECTION)
                        pass
                    elif token in [186]:
                        self.state = 9824
                        self.match(TSqlParser.CONTRACT)
                        pass
                    elif token in [200]:
                        self.state = 9825
                        self.match(TSqlParser.CREDENTIAL)
                        pass
                    elif token in [217]:
                        self.state = 9826
                        self.match(TSqlParser.DATABASE)
                        self.state = 9834
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [64]:
                            self.state = 9827
                            self.match(TSqlParser.AUDIT)
                            pass
                        elif token in [238]:
                            self.state = 9828
                            self.match(TSqlParser.DDL)
                            self.state = 9829
                            self.match(TSqlParser.TRIGGER)
                            pass
                        elif token in [311]:
                            self.state = 9830
                            self.match(TSqlParser.EVENT)
                            self.state = 9831
                            _la = self._input.LA(1)
                            if not(_la==615 or _la==882):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass
                        elif token in [849]:
                            self.state = 9832
                            self.match(TSqlParser.SCOPED)
                            self.state = 9833
                            self.match(TSqlParser.CONFIGURATION)
                            pass
                        elif token in [649, 986, 1192]:
                            pass
                        else:
                            pass
                        pass
                    elif token in [222]:
                        self.state = 9836
                        self.match(TSqlParser.DATASPACE)
                        pass
                    elif token in [298]:
                        self.state = 9837
                        self.match(TSqlParser.ENDPOINT)
                        pass
                    elif token in [311]:
                        self.state = 9838
                        self.match(TSqlParser.EVENT)
                        self.state = 9839
                        _la = self._input.LA(1)
                        if not(_la==615 or _la==882):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [329]:
                        self.state = 9840
                        self.match(TSqlParser.EXTERNAL)
                        self.state = 9846
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [216]:
                            self.state = 9841
                            self.match(TSqlParser.DATA)
                            self.state = 9842
                            self.match(TSqlParser.SOURCE)
                            pass
                        elif token in [341]:
                            self.state = 9843
                            self.match(TSqlParser.FILE)
                            self.state = 9844
                            self.match(TSqlParser.FORMAT)
                            pass
                        elif token in [505]:
                            self.state = 9845
                            self.match(TSqlParser.LIBRARY)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [381]:
                        self.state = 9848
                        self.match(TSqlParser.FULLTEXT)
                        self.state = 9849
                        self.match(TSqlParser.CATALOG)
                        pass
                    elif token in [509]:
                        self.state = 9850
                        self.match(TSqlParser.LINKED)
                        self.state = 9851
                        self.match(TSqlParser.SERVER)
                        pass
                    elif token in [524]:
                        self.state = 9852
                        self.match(TSqlParser.LOGIN)
                        pass
                    elif token in [532]:
                        self.state = 9853
                        self.match(TSqlParser.MASK)
                        pass
                    elif token in [565]:
                        self.state = 9854
                        self.match(TSqlParser.MESSAGE)
                        self.state = 9855
                        self.match(TSqlParser.TYPE)
                        pass
                    elif token in [778]:
                        self.state = 9856
                        self.match(TSqlParser.REMOTE)
                        self.state = 9857
                        self.match(TSqlParser.SERVICE)
                        self.state = 9858
                        self.match(TSqlParser.BINDING)
                        pass
                    elif token in [819]:
                        self.state = 9859
                        self.match(TSqlParser.ROLE)
                        pass
                    elif token in [823]:
                        self.state = 9860
                        self.match(TSqlParser.ROUTE)
                        pass
                    elif token in [844]:
                        self.state = 9861
                        self.match(TSqlParser.SCHEMA)
                        pass
                    elif token in [861]:
                        self.state = 9862
                        self.match(TSqlParser.SECURITY)
                        self.state = 9863
                        self.match(TSqlParser.POLICY)
                        pass
                    elif token in [876]:
                        self.state = 9864
                        self.match(TSqlParser.SERVER)
                        self.state = 9865
                        _la = self._input.LA(1)
                        if not(_la==64 or _la==819):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [878]:
                        self.state = 9866
                        self.match(TSqlParser.SERVICE)
                        pass
                    elif token in [961]:
                        self.state = 9867
                        self.match(TSqlParser.SYMMETRIC)
                        self.state = 9868
                        self.match(TSqlParser.KEY)
                        pass
                    elif token in [1035]:
                        self.state = 9869
                        self.match(TSqlParser.USER)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [801]:
                    self.state = 9872
                    self.match(TSqlParser.RESOURCES)
                    pass
                elif token in [876]:
                    self.state = 9873
                    self.match(TSqlParser.SERVER)
                    self.state = 9874
                    self.match(TSqlParser.STATE)
                    pass
                elif token in [890]:
                    self.state = 9875
                    self.match(TSqlParser.SETTINGS)
                    pass
                elif token in [990]:
                    self.state = 9876
                    self.match(TSqlParser.TRACE)
                    pass
                elif token in [649, 986, 1192]:
                    pass
                else:
                    pass
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 3)
                self.state = 9879
                self.match(TSqlParser.AUTHENTICATE)
                self.state = 9881
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==876:
                    self.state = 9880
                    self.match(TSqlParser.SERVER)


                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 4)
                self.state = 9883
                self.match(TSqlParser.BACKUP)
                self.state = 9884
                _la = self._input.LA(1)
                if not(_la==217 or _la==523):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 5)
                self.state = 9885
                self.match(TSqlParser.CHECKPOINT)
                pass
            elif token in [174]:
                self.enterOuterAlt(localctx, 6)
                self.state = 9886
                self.match(TSqlParser.CONNECT)
                self.state = 9891
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [46]:
                    self.state = 9887
                    self.match(TSqlParser.ANY)
                    self.state = 9888
                    self.match(TSqlParser.DATABASE)
                    pass
                elif token in [791]:
                    self.state = 9889
                    self.match(TSqlParser.REPLICATION)
                    pass
                elif token in [919]:
                    self.state = 9890
                    self.match(TSqlParser.SQL)
                    pass
                elif token in [649, 986, 1192]:
                    pass
                else:
                    pass
                pass
            elif token in [188]:
                self.enterOuterAlt(localctx, 7)
                self.state = 9893
                self.match(TSqlParser.CONTROL)
                self.state = 9895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==876:
                    self.state = 9894
                    self.match(TSqlParser.SERVER)


                pass
            elif token in [197]:
                self.enterOuterAlt(localctx, 8)
                self.state = 9897
                self.match(TSqlParser.CREATE)
                self.state = 9951
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20]:
                    self.state = 9898
                    self.match(TSqlParser.AGGREGATE)
                    pass
                elif token in [46]:
                    self.state = 9899
                    self.match(TSqlParser.ANY)
                    self.state = 9900
                    self.match(TSqlParser.DATABASE)
                    pass
                elif token in [59]:
                    self.state = 9901
                    self.match(TSqlParser.ASSEMBLY)
                    pass
                elif token in [61]:
                    self.state = 9902
                    self.match(TSqlParser.ASYMMETRIC)
                    self.state = 9903
                    self.match(TSqlParser.KEY)
                    pass
                elif token in [81]:
                    self.state = 9904
                    self.match(TSqlParser.AVAILABILITY)
                    self.state = 9905
                    self.match(TSqlParser.GROUP)
                    pass
                elif token in [121]:
                    self.state = 9906
                    self.match(TSqlParser.CERTIFICATE)
                    pass
                elif token in [186]:
                    self.state = 9907
                    self.match(TSqlParser.CONTRACT)
                    pass
                elif token in [217]:
                    self.state = 9908
                    self.match(TSqlParser.DATABASE)
                    self.state = 9912
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==238:
                        self.state = 9909
                        self.match(TSqlParser.DDL)
                        self.state = 9910
                        self.match(TSqlParser.EVENT)
                        self.state = 9911
                        self.match(TSqlParser.NOTIFICATION)


                    pass
                elif token in [238]:
                    self.state = 9914
                    self.match(TSqlParser.DDL)
                    self.state = 9915
                    self.match(TSqlParser.EVENT)
                    self.state = 9916
                    self.match(TSqlParser.NOTIFICATION)
                    pass
                elif token in [243]:
                    self.state = 9917
                    self.match(TSqlParser.DEFAULT)
                    pass
                elif token in [298]:
                    self.state = 9918
                    self.match(TSqlParser.ENDPOINT)
                    pass
                elif token in [329]:
                    self.state = 9919
                    self.match(TSqlParser.EXTERNAL)
                    self.state = 9920
                    self.match(TSqlParser.LIBRARY)
                    pass
                elif token in [381]:
                    self.state = 9921
                    self.match(TSqlParser.FULLTEXT)
                    self.state = 9922
                    self.match(TSqlParser.CATALOG)
                    pass
                elif token in [384]:
                    self.state = 9923
                    self.match(TSqlParser.FUNCTION)
                    pass
                elif token in [565]:
                    self.state = 9924
                    self.match(TSqlParser.MESSAGE)
                    self.state = 9925
                    self.match(TSqlParser.TYPE)
                    pass
                elif token in [728]:
                    self.state = 9926
                    self.match(TSqlParser.PROCEDURE)
                    pass
                elif token in [741]:
                    self.state = 9927
                    self.match(TSqlParser.QUEUE)
                    pass
                elif token in [778]:
                    self.state = 9928
                    self.match(TSqlParser.REMOTE)
                    self.state = 9929
                    self.match(TSqlParser.SERVICE)
                    self.state = 9930
                    self.match(TSqlParser.BINDING)
                    pass
                elif token in [819]:
                    self.state = 9931
                    self.match(TSqlParser.ROLE)
                    pass
                elif token in [823]:
                    self.state = 9932
                    self.match(TSqlParser.ROUTE)
                    pass
                elif token in [838]:
                    self.state = 9933
                    self.match(TSqlParser.RULE)
                    pass
                elif token in [844]:
                    self.state = 9934
                    self.match(TSqlParser.SCHEMA)
                    pass
                elif token in [873]:
                    self.state = 9935
                    self.match(TSqlParser.SEQUENCE)
                    pass
                elif token in [876]:
                    self.state = 9936
                    self.match(TSqlParser.SERVER)
                    self.state = 9937
                    self.match(TSqlParser.ROLE)
                    pass
                elif token in [878]:
                    self.state = 9938
                    self.match(TSqlParser.SERVICE)
                    pass
                elif token in [961]:
                    self.state = 9939
                    self.match(TSqlParser.SYMMETRIC)
                    self.state = 9940
                    self.match(TSqlParser.KEY)
                    pass
                elif token in [963]:
                    self.state = 9941
                    self.match(TSqlParser.SYNONYM)
                    pass
                elif token in [966]:
                    self.state = 9942
                    self.match(TSqlParser.TABLE)
                    pass
                elif token in [990]:
                    self.state = 9943
                    self.match(TSqlParser.TRACE)
                    self.state = 9944
                    self.match(TSqlParser.EVENT)
                    self.state = 9945
                    self.match(TSqlParser.NOTIFICATION)
                    pass
                elif token in [1010]:
                    self.state = 9946
                    self.match(TSqlParser.TYPE)
                    pass
                elif token in [1051]:
                    self.state = 9947
                    self.match(TSqlParser.VIEW)
                    pass
                elif token in [1074]:
                    self.state = 9948
                    self.match(TSqlParser.XML)
                    self.state = 9949
                    self.match(TSqlParser.SCHEMA)
                    self.state = 9950
                    self.match(TSqlParser.COLLECTION)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [252]:
                self.enterOuterAlt(localctx, 9)
                self.state = 9953
                self.match(TSqlParser.DELETE)
                pass
            elif token in [318]:
                self.enterOuterAlt(localctx, 10)
                self.state = 9954
                self.match(TSqlParser.EXECUTE)
                self.state = 9958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 9955
                    self.match(TSqlParser.ANY)
                    self.state = 9956
                    self.match(TSqlParser.EXTERNAL)
                    self.state = 9957
                    self.match(TSqlParser.SCRIPT)


                pass
            elif token in [329]:
                self.enterOuterAlt(localctx, 11)
                self.state = 9960
                self.match(TSqlParser.EXTERNAL)
                self.state = 9961
                self.match(TSqlParser.ACCESS)
                self.state = 9962
                self.match(TSqlParser.ASSEMBLY)
                pass
            elif token in [439]:
                self.enterOuterAlt(localctx, 12)
                self.state = 9963
                self.match(TSqlParser.IMPERSONATE)
                self.state = 9966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 9964
                    self.match(TSqlParser.ANY)
                    self.state = 9965
                    self.match(TSqlParser.LOGIN)


                pass
            elif token in [457]:
                self.enterOuterAlt(localctx, 13)
                self.state = 9968
                self.match(TSqlParser.INSERT)
                pass
            elif token in [495]:
                self.enterOuterAlt(localctx, 14)
                self.state = 9969
                self.match(TSqlParser.KILL)
                self.state = 9970
                self.match(TSqlParser.DATABASE)
                self.state = 9971
                self.match(TSqlParser.CONNECTION)
                pass
            elif token in [768]:
                self.enterOuterAlt(localctx, 15)
                self.state = 9972
                self.match(TSqlParser.RECEIVE)
                pass
            elif token in [773]:
                self.enterOuterAlt(localctx, 16)
                self.state = 9973
                self.match(TSqlParser.REFERENCES)
                pass
            elif token in [865]:
                self.enterOuterAlt(localctx, 17)
                self.state = 9974
                self.match(TSqlParser.SELECT)
                self.state = 9978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==22:
                    self.state = 9975
                    self.match(TSqlParser.ALL)
                    self.state = 9976
                    self.match(TSqlParser.USER)
                    self.state = 9977
                    self.match(TSqlParser.SECURABLES)


                pass
            elif token in [871]:
                self.enterOuterAlt(localctx, 18)
                self.state = 9980
                self.match(TSqlParser.SEND)
                pass
            elif token in [895]:
                self.enterOuterAlt(localctx, 19)
                self.state = 9981
                self.match(TSqlParser.SHOWPLAN)
                pass
            elif token in [900]:
                self.enterOuterAlt(localctx, 20)
                self.state = 9982
                self.match(TSqlParser.SHUTDOWN)
                pass
            elif token in [950]:
                self.enterOuterAlt(localctx, 21)
                self.state = 9983
                self.match(TSqlParser.SUBSCRIBE)
                self.state = 9984
                self.match(TSqlParser.QUERY)
                self.state = 9985
                self.match(TSqlParser.NOTIFICATIONS)
                pass
            elif token in [971]:
                self.enterOuterAlt(localctx, 22)
                self.state = 9986
                self.match(TSqlParser.TAKE)
                self.state = 9987
                self.match(TSqlParser.OWNERSHIP)
                pass
            elif token in [1024]:
                self.enterOuterAlt(localctx, 23)
                self.state = 9988
                self.match(TSqlParser.UNMASK)
                pass
            elif token in [1026]:
                self.enterOuterAlt(localctx, 24)
                self.state = 9989
                self.match(TSqlParser.UNSAFE)
                self.state = 9990
                self.match(TSqlParser.ASSEMBLY)
                pass
            elif token in [1028]:
                self.enterOuterAlt(localctx, 25)
                self.state = 9991
                self.match(TSqlParser.UPDATE)
                pass
            elif token in [1051]:
                self.enterOuterAlt(localctx, 26)
                self.state = 9992
                self.match(TSqlParser.VIEW)
                self.state = 10009
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [46]:
                    self.state = 9993
                    self.match(TSqlParser.ANY)
                    self.state = 10000
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [217]:
                        self.state = 9994
                        self.match(TSqlParser.DATABASE)
                        pass
                    elif token in [249]:
                        self.state = 9995
                        self.match(TSqlParser.DEFINITION)
                        pass
                    elif token in [153]:
                        self.state = 9996
                        self.match(TSqlParser.COLUMN)
                        self.state = 9997
                        _la = self._input.LA(1)
                        if not(_la==295 or _la==534):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 9998
                        self.match(TSqlParser.KEY)
                        self.state = 9999
                        self.match(TSqlParser.DEFINITION)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [124]:
                    self.state = 10002
                    self.match(TSqlParser.CHANGE)
                    self.state = 10003
                    self.match(TSqlParser.TRACKING)
                    pass
                elif token in [217]:
                    self.state = 10004
                    self.match(TSqlParser.DATABASE)
                    self.state = 10005
                    self.match(TSqlParser.STATE)
                    pass
                elif token in [249]:
                    self.state = 10006
                    self.match(TSqlParser.DEFINITION)
                    pass
                elif token in [876]:
                    self.state = 10007
                    self.match(TSqlParser.SERVER)
                    self.state = 10008
                    self.match(TSqlParser.STATE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.member_name = None # Id_Context

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(TSqlParser.Assignment_operatorContext,0)


        def CURSOR(self):
            return self.getToken(TSqlParser.CURSOR, 0)

        def declare_set_cursor_common(self):
            return self.getTypedRuleContext(TSqlParser.Declare_set_cursor_commonContext,0)


        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def READ(self):
            return self.getToken(TSqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(TSqlParser.ONLY, 0)

        def UPDATE(self):
            return self.getToken(TSqlParser.UPDATE, 0)

        def OF(self):
            return self.getToken(TSqlParser.OF, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def set_special(self):
            return self.getTypedRuleContext(TSqlParser.Set_specialContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_set_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_statement" ):
                listener.enterSet_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_statement" ):
                listener.exitSet_statement(self)




    def set_statement(self):

        localctx = TSqlParser.Set_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_set_statement)
        self._la = 0 # Token type
        try:
            self.state = 10044
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1338,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10013
                self.match(TSqlParser.SET)
                self.state = 10014
                self.match(TSqlParser.LOCAL_ID)
                self.state = 10017
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1187:
                    self.state = 10015
                    self.match(TSqlParser.DOT)
                    self.state = 10016
                    localctx.member_name = self.id_()


                self.state = 10019
                self.match(TSqlParser.EQUAL)
                self.state = 10020
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10021
                self.match(TSqlParser.SET)
                self.state = 10022
                self.match(TSqlParser.LOCAL_ID)
                self.state = 10023
                self.assignment_operator()
                self.state = 10024
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10026
                self.match(TSqlParser.SET)
                self.state = 10027
                self.match(TSqlParser.LOCAL_ID)
                self.state = 10028
                self.match(TSqlParser.EQUAL)
                self.state = 10029
                self.match(TSqlParser.CURSOR)
                self.state = 10030
                self.declare_set_cursor_common()
                self.state = 10041
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==363:
                    self.state = 10031
                    self.match(TSqlParser.FOR)
                    self.state = 10039
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [754]:
                        self.state = 10032
                        self.match(TSqlParser.READ)
                        self.state = 10033
                        self.match(TSqlParser.ONLY)
                        pass
                    elif token in [1028]:
                        self.state = 10034
                        self.match(TSqlParser.UPDATE)
                        self.state = 10037
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==642:
                            self.state = 10035
                            self.match(TSqlParser.OF)
                            self.state = 10036
                            self.column_name_list()


                        pass
                    else:
                        raise NoViableAltException(self)



                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10043
                self.set_special()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(TSqlParser.BEGIN, 0)

        def DISTRIBUTED(self):
            return self.getToken(TSqlParser.DISTRIBUTED, 0)

        def TRAN(self):
            return self.getToken(TSqlParser.TRAN, 0)

        def TRANSACTION(self):
            return self.getToken(TSqlParser.TRANSACTION, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def MARK(self):
            return self.getToken(TSqlParser.MARK, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def COMMIT(self):
            return self.getToken(TSqlParser.COMMIT, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def DELAYED_DURABILITY(self):
            return self.getToken(TSqlParser.DELAYED_DURABILITY, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def WORK(self):
            return self.getToken(TSqlParser.WORK, 0)

        def ROLLBACK(self):
            return self.getToken(TSqlParser.ROLLBACK, 0)

        def SAVE(self):
            return self.getToken(TSqlParser.SAVE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_transaction_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_statement" ):
                listener.enterTransaction_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_statement" ):
                listener.exitTransaction_statement(self)




    def transaction_statement(self):

        localctx = TSqlParser.Transaction_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_transaction_statement)
        self._la = 0 # Token type
        try:
            self.state = 10106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1350,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10046
                self.match(TSqlParser.BEGIN)
                self.state = 10047
                self.match(TSqlParser.DISTRIBUTED)
                self.state = 10048
                _la = self._input.LA(1)
                if not(_la==993 or _la==994):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 10051
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1339,self._ctx)
                if la_ == 1:
                    self.state = 10049
                    self.id_()

                elif la_ == 2:
                    self.state = 10050
                    self.match(TSqlParser.LOCAL_ID)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10053
                self.match(TSqlParser.BEGIN)
                self.state = 10054
                _la = self._input.LA(1)
                if not(_la==993 or _la==994):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 10064
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1342,self._ctx)
                if la_ == 1:
                    self.state = 10057
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                        self.state = 10055
                        self.id_()
                        pass
                    elif token in [1166]:
                        self.state = 10056
                        self.match(TSqlParser.LOCAL_ID)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 10062
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1341,self._ctx)
                    if la_ == 1:
                        self.state = 10059
                        self.match(TSqlParser.WITH)
                        self.state = 10060
                        self.match(TSqlParser.MARK)
                        self.state = 10061
                        self.match(TSqlParser.STRING)




                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10066
                self.match(TSqlParser.COMMIT)
                self.state = 10067
                _la = self._input.LA(1)
                if not(_la==993 or _la==994):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 10080
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1345,self._ctx)
                if la_ == 1:
                    self.state = 10070
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                        self.state = 10068
                        self.id_()
                        pass
                    elif token in [1166]:
                        self.state = 10069
                        self.match(TSqlParser.LOCAL_ID)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 10078
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1344,self._ctx)
                    if la_ == 1:
                        self.state = 10072
                        self.match(TSqlParser.WITH)
                        self.state = 10073
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 10074
                        self.match(TSqlParser.DELAYED_DURABILITY)
                        self.state = 10075
                        self.match(TSqlParser.EQUAL)
                        self.state = 10076
                        _la = self._input.LA(1)
                        if not(_la==643 or _la==649):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 10077
                        self.match(TSqlParser.RR_BRACKET)




                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10082
                self.match(TSqlParser.COMMIT)
                self.state = 10084
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1346,self._ctx)
                if la_ == 1:
                    self.state = 10083
                    self.match(TSqlParser.WORK)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 10086
                self.match(TSqlParser.COMMIT)
                self.state = 10087
                self.id_()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 10088
                self.match(TSqlParser.ROLLBACK)
                self.state = 10089
                self.id_()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 10090
                self.match(TSqlParser.ROLLBACK)
                self.state = 10091
                _la = self._input.LA(1)
                if not(_la==993 or _la==994):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 10094
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1347,self._ctx)
                if la_ == 1:
                    self.state = 10092
                    self.id_()

                elif la_ == 2:
                    self.state = 10093
                    self.match(TSqlParser.LOCAL_ID)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 10096
                self.match(TSqlParser.ROLLBACK)
                self.state = 10098
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1348,self._ctx)
                if la_ == 1:
                    self.state = 10097
                    self.match(TSqlParser.WORK)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 10100
                self.match(TSqlParser.SAVE)
                self.state = 10101
                _la = self._input.LA(1)
                if not(_la==993 or _la==994):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 10104
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1349,self._ctx)
                if la_ == 1:
                    self.state = 10102
                    self.id_()

                elif la_ == 2:
                    self.state = 10103
                    self.match(TSqlParser.LOCAL_ID)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Go_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.count = None # Token

        def GO(self):
            return self.getToken(TSqlParser.GO, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_go_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGo_statement" ):
                listener.enterGo_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGo_statement" ):
                listener.exitGo_statement(self)




    def go_statement(self):

        localctx = TSqlParser.Go_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_go_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10108
            self.match(TSqlParser.GO)
            self.state = 10110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1168:
                self.state = 10109
                localctx.count = self.match(TSqlParser.DECIMAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Use_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # Id_Context

        def USE(self):
            return self.getToken(TSqlParser.USE, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_use_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse_statement" ):
                listener.enterUse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse_statement" ):
                listener.exitUse_statement(self)




    def use_statement(self):

        localctx = TSqlParser.Use_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_use_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10112
            self.match(TSqlParser.USE)
            self.state = 10113
            localctx.database = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Setuser_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.user = None # Token

        def SETUSER(self):
            return self.getToken(TSqlParser.SETUSER, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_setuser_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetuser_statement" ):
                listener.enterSetuser_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetuser_statement" ):
                listener.exitSetuser_statement(self)




    def setuser_statement(self):

        localctx = TSqlParser.Setuser_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_setuser_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10115
            self.match(TSqlParser.SETUSER)
            self.state = 10117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1170:
                self.state = 10116
                localctx.user = self.match(TSqlParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reconfigure_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECONFIGURE(self):
            return self.getToken(TSqlParser.RECONFIGURE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def OVERRIDE(self):
            return self.getToken(TSqlParser.OVERRIDE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_reconfigure_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReconfigure_statement" ):
                listener.enterReconfigure_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReconfigure_statement" ):
                listener.exitReconfigure_statement(self)




    def reconfigure_statement(self):

        localctx = TSqlParser.Reconfigure_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_reconfigure_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10119
            self.match(TSqlParser.RECONFIGURE)
            self.state = 10122
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1353,self._ctx)
            if la_ == 1:
                self.state = 10120
                self.match(TSqlParser.WITH)
                self.state = 10121
                self.match(TSqlParser.OVERRIDE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shutdown_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHUTDOWN(self):
            return self.getToken(TSqlParser.SHUTDOWN, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def NOWAIT(self):
            return self.getToken(TSqlParser.NOWAIT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_shutdown_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShutdown_statement" ):
                listener.enterShutdown_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShutdown_statement" ):
                listener.exitShutdown_statement(self)




    def shutdown_statement(self):

        localctx = TSqlParser.Shutdown_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_shutdown_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10124
            self.match(TSqlParser.SHUTDOWN)
            self.state = 10127
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1354,self._ctx)
            if la_ == 1:
                self.state = 10125
                self.match(TSqlParser.WITH)
                self.state = 10126
                self.match(TSqlParser.NOWAIT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Checkpoint_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.checkPointDuration = None # Token

        def CHECKPOINT(self):
            return self.getToken(TSqlParser.CHECKPOINT, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_checkpoint_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckpoint_statement" ):
                listener.enterCheckpoint_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckpoint_statement" ):
                listener.exitCheckpoint_statement(self)




    def checkpoint_statement(self):

        localctx = TSqlParser.Checkpoint_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_checkpoint_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10129
            self.match(TSqlParser.CHECKPOINT)
            self.state = 10131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1168:
                self.state = 10130
                localctx.checkPointDuration = self.match(TSqlParser.DECIMAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dbcc_checkalloc_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL_ERRORMSGS(self):
            return self.getToken(TSqlParser.ALL_ERRORMSGS, 0)

        def NO_INFOMSGS(self):
            return self.getToken(TSqlParser.NO_INFOMSGS, 0)

        def TABLOCK(self):
            return self.getToken(TSqlParser.TABLOCK, 0)

        def ESTIMATEONLY(self):
            return self.getToken(TSqlParser.ESTIMATEONLY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_dbcc_checkalloc_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_checkalloc_option" ):
                listener.enterDbcc_checkalloc_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_checkalloc_option" ):
                listener.exitDbcc_checkalloc_option(self)




    def dbcc_checkalloc_option(self):

        localctx = TSqlParser.Dbcc_checkalloc_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 808, self.RULE_dbcc_checkalloc_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10133
            _la = self._input.LA(1)
            if not(_la==32 or _la==310 or _la==622 or _la==969):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dbcc_checkallocContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.database = None # Id_Context
            self.databaseid = None # Token
            self.dbcc_option = None # Dbcc_checkalloc_optionContext

        def CHECKALLOC(self):
            return self.getToken(TSqlParser.CHECKALLOC, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def NOINDEX(self):
            return self.getToken(TSqlParser.NOINDEX, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def REPAIR_ALLOW_DATA_LOSS(self):
            return self.getToken(TSqlParser.REPAIR_ALLOW_DATA_LOSS, 0)

        def REPAIR_FAST(self):
            return self.getToken(TSqlParser.REPAIR_FAST, 0)

        def REPAIR_REBUILD(self):
            return self.getToken(TSqlParser.REPAIR_REBUILD, 0)

        def dbcc_checkalloc_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Dbcc_checkalloc_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Dbcc_checkalloc_optionContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_dbcc_checkalloc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_checkalloc" ):
                listener.enterDbcc_checkalloc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_checkalloc" ):
                listener.exitDbcc_checkalloc(self)




    def dbcc_checkalloc(self):

        localctx = TSqlParser.Dbcc_checkallocContext(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_dbcc_checkalloc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10135
            localctx.name = self.match(TSqlParser.CHECKALLOC)
            self.state = 10160
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1360,self._ctx)
            if la_ == 1:
                self.state = 10136
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10140
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                    self.state = 10137
                    localctx.database = self.id_()
                    pass
                elif token in [1170]:
                    self.state = 10138
                    localctx.databaseid = self.match(TSqlParser.STRING)
                    pass
                elif token in [1168]:
                    self.state = 10139
                    self.match(TSqlParser.DECIMAL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 10146
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1357,self._ctx)
                if la_ == 1:
                    self.state = 10142
                    self.match(TSqlParser.COMMA)
                    self.state = 10143
                    self.match(TSqlParser.NOINDEX)

                elif la_ == 2:
                    self.state = 10144
                    self.match(TSqlParser.COMMA)
                    self.state = 10145
                    _la = self._input.LA(1)
                    if not(((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & 7) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10148
                self.match(TSqlParser.RR_BRACKET)
                self.state = 10158
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1359,self._ctx)
                if la_ == 1:
                    self.state = 10149
                    self.match(TSqlParser.WITH)
                    self.state = 10150
                    localctx.dbcc_option = self.dbcc_checkalloc_option()
                    self.state = 10155
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1194:
                        self.state = 10151
                        self.match(TSqlParser.COMMA)
                        self.state = 10152
                        localctx.dbcc_option = self.dbcc_checkalloc_option()
                        self.state = 10157
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)





        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dbcc_checkcatalogContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.database = None # Id_Context
            self.databasename = None # Token
            self.dbcc_option = None # Token

        def CHECKCATALOG(self):
            return self.getToken(TSqlParser.CHECKCATALOG, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def NO_INFOMSGS(self):
            return self.getToken(TSqlParser.NO_INFOMSGS, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_dbcc_checkcatalog

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_checkcatalog" ):
                listener.enterDbcc_checkcatalog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_checkcatalog" ):
                listener.exitDbcc_checkcatalog(self)




    def dbcc_checkcatalog(self):

        localctx = TSqlParser.Dbcc_checkcatalogContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_dbcc_checkcatalog)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10162
            localctx.name = self.match(TSqlParser.CHECKCATALOG)
            self.state = 10170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1362,self._ctx)
            if la_ == 1:
                self.state = 10163
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10167
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                    self.state = 10164
                    localctx.database = self.id_()
                    pass
                elif token in [1170]:
                    self.state = 10165
                    localctx.databasename = self.match(TSqlParser.STRING)
                    pass
                elif token in [1168]:
                    self.state = 10166
                    self.match(TSqlParser.DECIMAL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 10169
                self.match(TSqlParser.RR_BRACKET)


            self.state = 10174
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1363,self._ctx)
            if la_ == 1:
                self.state = 10172
                self.match(TSqlParser.WITH)
                self.state = 10173
                localctx.dbcc_option = self.match(TSqlParser.NO_INFOMSGS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dbcc_checkconstraints_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL_CONSTRAINTS(self):
            return self.getToken(TSqlParser.ALL_CONSTRAINTS, 0)

        def ALL_ERRORMSGS(self):
            return self.getToken(TSqlParser.ALL_ERRORMSGS, 0)

        def NO_INFOMSGS(self):
            return self.getToken(TSqlParser.NO_INFOMSGS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_dbcc_checkconstraints_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_checkconstraints_option" ):
                listener.enterDbcc_checkconstraints_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_checkconstraints_option" ):
                listener.exitDbcc_checkconstraints_option(self)




    def dbcc_checkconstraints_option(self):

        localctx = TSqlParser.Dbcc_checkconstraints_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 814, self.RULE_dbcc_checkconstraints_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10176
            _la = self._input.LA(1)
            if not(_la==31 or _la==32 or _la==622):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dbcc_checkconstraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.table_or_constraint = None # Id_Context
            self.table_or_constraint_name = None # Token
            self.dbcc_option = None # Dbcc_checkconstraints_optionContext

        def CHECKCONSTRAINTS(self):
            return self.getToken(TSqlParser.CHECKCONSTRAINTS, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def dbcc_checkconstraints_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Dbcc_checkconstraints_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Dbcc_checkconstraints_optionContext,i)


        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_dbcc_checkconstraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_checkconstraints" ):
                listener.enterDbcc_checkconstraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_checkconstraints" ):
                listener.exitDbcc_checkconstraints(self)




    def dbcc_checkconstraints(self):

        localctx = TSqlParser.Dbcc_checkconstraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 816, self.RULE_dbcc_checkconstraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10178
            localctx.name = self.match(TSqlParser.CHECKCONSTRAINTS)
            self.state = 10185
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1365,self._ctx)
            if la_ == 1:
                self.state = 10179
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10182
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                    self.state = 10180
                    localctx.table_or_constraint = self.id_()
                    pass
                elif token in [1170]:
                    self.state = 10181
                    localctx.table_or_constraint_name = self.match(TSqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 10184
                self.match(TSqlParser.RR_BRACKET)


            self.state = 10196
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1367,self._ctx)
            if la_ == 1:
                self.state = 10187
                self.match(TSqlParser.WITH)
                self.state = 10188
                localctx.dbcc_option = self.dbcc_checkconstraints_option()
                self.state = 10193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 10189
                    self.match(TSqlParser.COMMA)
                    self.state = 10190
                    localctx.dbcc_option = self.dbcc_checkconstraints_option()
                    self.state = 10195
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dbcc_checkdb_table_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.max_dregree_of_parallelism = None # Token

        def ALL_ERRORMSGS(self):
            return self.getToken(TSqlParser.ALL_ERRORMSGS, 0)

        def EXTENDED_LOGICAL_CHECKS(self):
            return self.getToken(TSqlParser.EXTENDED_LOGICAL_CHECKS, 0)

        def NO_INFOMSGS(self):
            return self.getToken(TSqlParser.NO_INFOMSGS, 0)

        def TABLOCK(self):
            return self.getToken(TSqlParser.TABLOCK, 0)

        def ESTIMATEONLY(self):
            return self.getToken(TSqlParser.ESTIMATEONLY, 0)

        def PHYSICAL_ONLY(self):
            return self.getToken(TSqlParser.PHYSICAL_ONLY, 0)

        def DATA_PURITY(self):
            return self.getToken(TSqlParser.DATA_PURITY, 0)

        def MAXDOP(self):
            return self.getToken(TSqlParser.MAXDOP, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_dbcc_checkdb_table_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_checkdb_table_option" ):
                listener.enterDbcc_checkdb_table_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_checkdb_table_option" ):
                listener.exitDbcc_checkdb_table_option(self)




    def dbcc_checkdb_table_option(self):

        localctx = TSqlParser.Dbcc_checkdb_table_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 818, self.RULE_dbcc_checkdb_table_option)
        try:
            self.state = 10208
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [32]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10198
                self.match(TSqlParser.ALL_ERRORMSGS)
                pass
            elif token in [327]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10199
                self.match(TSqlParser.EXTENDED_LOGICAL_CHECKS)
                pass
            elif token in [622]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10200
                self.match(TSqlParser.NO_INFOMSGS)
                pass
            elif token in [969]:
                self.enterOuterAlt(localctx, 4)
                self.state = 10201
                self.match(TSqlParser.TABLOCK)
                pass
            elif token in [310]:
                self.enterOuterAlt(localctx, 5)
                self.state = 10202
                self.match(TSqlParser.ESTIMATEONLY)
                pass
            elif token in [706]:
                self.enterOuterAlt(localctx, 6)
                self.state = 10203
                self.match(TSqlParser.PHYSICAL_ONLY)
                pass
            elif token in [224]:
                self.enterOuterAlt(localctx, 7)
                self.state = 10204
                self.match(TSqlParser.DATA_PURITY)
                pass
            elif token in [538]:
                self.enterOuterAlt(localctx, 8)
                self.state = 10205
                self.match(TSqlParser.MAXDOP)
                self.state = 10206
                self.match(TSqlParser.EQUAL)
                self.state = 10207
                localctx.max_dregree_of_parallelism = self.match(TSqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dbcc_checkdbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.database = None # Id_Context
            self.databasename = None # Token
            self.dbcc_option = None # Dbcc_checkdb_table_optionContext

        def CHECKDB(self):
            return self.getToken(TSqlParser.CHECKDB, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def dbcc_checkdb_table_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Dbcc_checkdb_table_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Dbcc_checkdb_table_optionContext,i)


        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def NOINDEX(self):
            return self.getToken(TSqlParser.NOINDEX, 0)

        def REPAIR_ALLOW_DATA_LOSS(self):
            return self.getToken(TSqlParser.REPAIR_ALLOW_DATA_LOSS, 0)

        def REPAIR_FAST(self):
            return self.getToken(TSqlParser.REPAIR_FAST, 0)

        def REPAIR_REBUILD(self):
            return self.getToken(TSqlParser.REPAIR_REBUILD, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_dbcc_checkdb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_checkdb" ):
                listener.enterDbcc_checkdb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_checkdb" ):
                listener.exitDbcc_checkdb(self)




    def dbcc_checkdb(self):

        localctx = TSqlParser.Dbcc_checkdbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 820, self.RULE_dbcc_checkdb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10210
            localctx.name = self.match(TSqlParser.CHECKDB)
            self.state = 10222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1371,self._ctx)
            if la_ == 1:
                self.state = 10211
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10215
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                    self.state = 10212
                    localctx.database = self.id_()
                    pass
                elif token in [1170]:
                    self.state = 10213
                    localctx.databasename = self.match(TSqlParser.STRING)
                    pass
                elif token in [1168]:
                    self.state = 10214
                    self.match(TSqlParser.DECIMAL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 10219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 10217
                    self.match(TSqlParser.COMMA)
                    self.state = 10218
                    _la = self._input.LA(1)
                    if not(_la==604 or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & 7) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10221
                self.match(TSqlParser.RR_BRACKET)


            self.state = 10233
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1373,self._ctx)
            if la_ == 1:
                self.state = 10224
                self.match(TSqlParser.WITH)
                self.state = 10225
                localctx.dbcc_option = self.dbcc_checkdb_table_option()
                self.state = 10230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 10226
                    self.match(TSqlParser.COMMA)
                    self.state = 10227
                    localctx.dbcc_option = self.dbcc_checkdb_table_option()
                    self.state = 10232
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dbcc_checkfilegroup_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.max_dregree_of_parallelism = None # Token

        def ALL_ERRORMSGS(self):
            return self.getToken(TSqlParser.ALL_ERRORMSGS, 0)

        def NO_INFOMSGS(self):
            return self.getToken(TSqlParser.NO_INFOMSGS, 0)

        def TABLOCK(self):
            return self.getToken(TSqlParser.TABLOCK, 0)

        def ESTIMATEONLY(self):
            return self.getToken(TSqlParser.ESTIMATEONLY, 0)

        def PHYSICAL_ONLY(self):
            return self.getToken(TSqlParser.PHYSICAL_ONLY, 0)

        def MAXDOP(self):
            return self.getToken(TSqlParser.MAXDOP, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_dbcc_checkfilegroup_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_checkfilegroup_option" ):
                listener.enterDbcc_checkfilegroup_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_checkfilegroup_option" ):
                listener.exitDbcc_checkfilegroup_option(self)




    def dbcc_checkfilegroup_option(self):

        localctx = TSqlParser.Dbcc_checkfilegroup_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 822, self.RULE_dbcc_checkfilegroup_option)
        try:
            self.state = 10243
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [32]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10235
                self.match(TSqlParser.ALL_ERRORMSGS)
                pass
            elif token in [622]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10236
                self.match(TSqlParser.NO_INFOMSGS)
                pass
            elif token in [969]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10237
                self.match(TSqlParser.TABLOCK)
                pass
            elif token in [310]:
                self.enterOuterAlt(localctx, 4)
                self.state = 10238
                self.match(TSqlParser.ESTIMATEONLY)
                pass
            elif token in [706]:
                self.enterOuterAlt(localctx, 5)
                self.state = 10239
                self.match(TSqlParser.PHYSICAL_ONLY)
                pass
            elif token in [538]:
                self.enterOuterAlt(localctx, 6)
                self.state = 10240
                self.match(TSqlParser.MAXDOP)
                self.state = 10241
                self.match(TSqlParser.EQUAL)
                self.state = 10242
                localctx.max_dregree_of_parallelism = self.match(TSqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dbcc_checkfilegroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.filegroup_id = None # Token
            self.filegroup_name = None # Token
            self.dbcc_option = None # Dbcc_checkfilegroup_optionContext

        def CHECKFILEGROUP(self):
            return self.getToken(TSqlParser.CHECKFILEGROUP, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def dbcc_checkfilegroup_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Dbcc_checkfilegroup_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Dbcc_checkfilegroup_optionContext,i)


        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def NOINDEX(self):
            return self.getToken(TSqlParser.NOINDEX, 0)

        def REPAIR_ALLOW_DATA_LOSS(self):
            return self.getToken(TSqlParser.REPAIR_ALLOW_DATA_LOSS, 0)

        def REPAIR_FAST(self):
            return self.getToken(TSqlParser.REPAIR_FAST, 0)

        def REPAIR_REBUILD(self):
            return self.getToken(TSqlParser.REPAIR_REBUILD, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_dbcc_checkfilegroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_checkfilegroup" ):
                listener.enterDbcc_checkfilegroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_checkfilegroup" ):
                listener.exitDbcc_checkfilegroup(self)




    def dbcc_checkfilegroup(self):

        localctx = TSqlParser.Dbcc_checkfilegroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 824, self.RULE_dbcc_checkfilegroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10245
            localctx.name = self.match(TSqlParser.CHECKFILEGROUP)
            self.state = 10256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1377,self._ctx)
            if la_ == 1:
                self.state = 10246
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10249
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1168]:
                    self.state = 10247
                    localctx.filegroup_id = self.match(TSqlParser.DECIMAL)
                    pass
                elif token in [1170]:
                    self.state = 10248
                    localctx.filegroup_name = self.match(TSqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 10253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 10251
                    self.match(TSqlParser.COMMA)
                    self.state = 10252
                    _la = self._input.LA(1)
                    if not(_la==604 or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & 7) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10255
                self.match(TSqlParser.RR_BRACKET)


            self.state = 10267
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1379,self._ctx)
            if la_ == 1:
                self.state = 10258
                self.match(TSqlParser.WITH)
                self.state = 10259
                localctx.dbcc_option = self.dbcc_checkfilegroup_option()
                self.state = 10264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 10260
                    self.match(TSqlParser.COMMA)
                    self.state = 10261
                    localctx.dbcc_option = self.dbcc_checkfilegroup_option()
                    self.state = 10266
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dbcc_checktableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.table_or_view_name = None # Token
            self.index_id = None # ExpressionContext
            self.dbcc_option = None # Dbcc_checkdb_table_optionContext

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def CHECKTABLE(self):
            return self.getToken(TSqlParser.CHECKTABLE, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def dbcc_checkdb_table_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Dbcc_checkdb_table_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Dbcc_checkdb_table_optionContext,i)


        def NOINDEX(self):
            return self.getToken(TSqlParser.NOINDEX, 0)

        def REPAIR_ALLOW_DATA_LOSS(self):
            return self.getToken(TSqlParser.REPAIR_ALLOW_DATA_LOSS, 0)

        def REPAIR_FAST(self):
            return self.getToken(TSqlParser.REPAIR_FAST, 0)

        def REPAIR_REBUILD(self):
            return self.getToken(TSqlParser.REPAIR_REBUILD, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_dbcc_checktable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_checktable" ):
                listener.enterDbcc_checktable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_checktable" ):
                listener.exitDbcc_checktable(self)




    def dbcc_checktable(self):

        localctx = TSqlParser.Dbcc_checktableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 826, self.RULE_dbcc_checktable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10269
            localctx.name = self.match(TSqlParser.CHECKTABLE)
            self.state = 10270
            self.match(TSqlParser.LR_BRACKET)
            self.state = 10271
            localctx.table_or_view_name = self.match(TSqlParser.STRING)
            self.state = 10280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1194:
                self.state = 10272
                self.match(TSqlParser.COMMA)
                self.state = 10278
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1380,self._ctx)
                if la_ == 1:
                    self.state = 10273
                    self.match(TSqlParser.NOINDEX)
                    pass

                elif la_ == 2:
                    self.state = 10274
                    localctx.index_id = self.expression(0)
                    pass

                elif la_ == 3:
                    self.state = 10275
                    self.match(TSqlParser.REPAIR_ALLOW_DATA_LOSS)
                    pass

                elif la_ == 4:
                    self.state = 10276
                    self.match(TSqlParser.REPAIR_FAST)
                    pass

                elif la_ == 5:
                    self.state = 10277
                    self.match(TSqlParser.REPAIR_REBUILD)
                    pass




            self.state = 10282
            self.match(TSqlParser.RR_BRACKET)
            self.state = 10292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1383,self._ctx)
            if la_ == 1:
                self.state = 10283
                self.match(TSqlParser.WITH)
                self.state = 10284
                localctx.dbcc_option = self.dbcc_checkdb_table_option()
                self.state = 10289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 10285
                    self.match(TSqlParser.COMMA)
                    self.state = 10286
                    localctx.dbcc_option = self.dbcc_checkdb_table_option()
                    self.state = 10291
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dbcc_cleantableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.database = None # Id_Context
            self.databasename = None # Token
            self.table_or_view = None # Id_Context
            self.table_or_view_name = None # Token
            self.batch_size = None # Token
            self.dbcc_option = None # Token

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def CLEANTABLE(self):
            return self.getToken(TSqlParser.CLEANTABLE, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def NO_INFOMSGS(self):
            return self.getToken(TSqlParser.NO_INFOMSGS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_dbcc_cleantable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_cleantable" ):
                listener.enterDbcc_cleantable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_cleantable" ):
                listener.exitDbcc_cleantable(self)




    def dbcc_cleantable(self):

        localctx = TSqlParser.Dbcc_cleantableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 828, self.RULE_dbcc_cleantable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10294
            localctx.name = self.match(TSqlParser.CLEANTABLE)
            self.state = 10295
            self.match(TSqlParser.LR_BRACKET)
            self.state = 10299
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                self.state = 10296
                localctx.database = self.id_()
                pass
            elif token in [1170]:
                self.state = 10297
                localctx.databasename = self.match(TSqlParser.STRING)
                pass
            elif token in [1168]:
                self.state = 10298
                self.match(TSqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 10301
            self.match(TSqlParser.COMMA)
            self.state = 10304
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                self.state = 10302
                localctx.table_or_view = self.id_()
                pass
            elif token in [1170]:
                self.state = 10303
                localctx.table_or_view_name = self.match(TSqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 10308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1194:
                self.state = 10306
                self.match(TSqlParser.COMMA)
                self.state = 10307
                localctx.batch_size = self.match(TSqlParser.DECIMAL)


            self.state = 10310
            self.match(TSqlParser.RR_BRACKET)
            self.state = 10313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1387,self._ctx)
            if la_ == 1:
                self.state = 10311
                self.match(TSqlParser.WITH)
                self.state = 10312
                localctx.dbcc_option = self.match(TSqlParser.NO_INFOMSGS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dbcc_clonedatabase_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO_STATISTICS(self):
            return self.getToken(TSqlParser.NO_STATISTICS, 0)

        def NO_QUERYSTORE(self):
            return self.getToken(TSqlParser.NO_QUERYSTORE, 0)

        def SERVICEBROKER(self):
            return self.getToken(TSqlParser.SERVICEBROKER, 0)

        def VERIFY_CLONEDB(self):
            return self.getToken(TSqlParser.VERIFY_CLONEDB, 0)

        def BACKUP_CLONEDB(self):
            return self.getToken(TSqlParser.BACKUP_CLONEDB, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_dbcc_clonedatabase_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_clonedatabase_option" ):
                listener.enterDbcc_clonedatabase_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_clonedatabase_option" ):
                listener.exitDbcc_clonedatabase_option(self)




    def dbcc_clonedatabase_option(self):

        localctx = TSqlParser.Dbcc_clonedatabase_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 830, self.RULE_dbcc_clonedatabase_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10315
            _la = self._input.LA(1)
            if not(_la==86 or _la==623 or _la==624 or _la==879 or _la==1049):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dbcc_clonedatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.source_database = None # Id_Context
            self.target_database = None # Id_Context
            self.dbcc_option = None # Dbcc_clonedatabase_optionContext

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def CLONEDATABASE(self):
            return self.getToken(TSqlParser.CLONEDATABASE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def dbcc_clonedatabase_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Dbcc_clonedatabase_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Dbcc_clonedatabase_optionContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_dbcc_clonedatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_clonedatabase" ):
                listener.enterDbcc_clonedatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_clonedatabase" ):
                listener.exitDbcc_clonedatabase(self)




    def dbcc_clonedatabase(self):

        localctx = TSqlParser.Dbcc_clonedatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 832, self.RULE_dbcc_clonedatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10317
            localctx.name = self.match(TSqlParser.CLONEDATABASE)
            self.state = 10318
            self.match(TSqlParser.LR_BRACKET)
            self.state = 10319
            localctx.source_database = self.id_()
            self.state = 10320
            self.match(TSqlParser.COMMA)
            self.state = 10321
            localctx.target_database = self.id_()
            self.state = 10322
            self.match(TSqlParser.RR_BRACKET)
            self.state = 10332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1389,self._ctx)
            if la_ == 1:
                self.state = 10323
                self.match(TSqlParser.WITH)
                self.state = 10324
                localctx.dbcc_option = self.dbcc_clonedatabase_option()
                self.state = 10329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 10325
                    self.match(TSqlParser.COMMA)
                    self.state = 10326
                    localctx.dbcc_option = self.dbcc_clonedatabase_option()
                    self.state = 10331
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dbcc_pdw_showspaceusedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.tablename = None # Id_Context
            self.dbcc_option = None # Token

        def PDW_SHOWSPACEUSED(self):
            return self.getToken(TSqlParser.PDW_SHOWSPACEUSED, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def IGNORE_REPLICATED_TABLE_CACHE(self):
            return self.getToken(TSqlParser.IGNORE_REPLICATED_TABLE_CACHE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_dbcc_pdw_showspaceused

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_pdw_showspaceused" ):
                listener.enterDbcc_pdw_showspaceused(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_pdw_showspaceused" ):
                listener.exitDbcc_pdw_showspaceused(self)




    def dbcc_pdw_showspaceused(self):

        localctx = TSqlParser.Dbcc_pdw_showspaceusedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 834, self.RULE_dbcc_pdw_showspaceused)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10334
            localctx.name = self.match(TSqlParser.PDW_SHOWSPACEUSED)
            self.state = 10339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1390,self._ctx)
            if la_ == 1:
                self.state = 10335
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10336
                localctx.tablename = self.id_()
                self.state = 10337
                self.match(TSqlParser.RR_BRACKET)


            self.state = 10343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1391,self._ctx)
            if la_ == 1:
                self.state = 10341
                self.match(TSqlParser.WITH)
                self.state = 10342
                localctx.dbcc_option = self.match(TSqlParser.IGNORE_REPLICATED_TABLE_CACHE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dbcc_proccacheContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.dbcc_option = None # Token

        def PROCCACHE(self):
            return self.getToken(TSqlParser.PROCCACHE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def NO_INFOMSGS(self):
            return self.getToken(TSqlParser.NO_INFOMSGS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_dbcc_proccache

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_proccache" ):
                listener.enterDbcc_proccache(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_proccache" ):
                listener.exitDbcc_proccache(self)




    def dbcc_proccache(self):

        localctx = TSqlParser.Dbcc_proccacheContext(self, self._ctx, self.state)
        self.enterRule(localctx, 836, self.RULE_dbcc_proccache)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10345
            localctx.name = self.match(TSqlParser.PROCCACHE)
            self.state = 10348
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1392,self._ctx)
            if la_ == 1:
                self.state = 10346
                self.match(TSqlParser.WITH)
                self.state = 10347
                localctx.dbcc_option = self.match(TSqlParser.NO_INFOMSGS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dbcc_showcontig_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL_INDEXES(self):
            return self.getToken(TSqlParser.ALL_INDEXES, 0)

        def TABLERESULTS(self):
            return self.getToken(TSqlParser.TABLERESULTS, 0)

        def FAST(self):
            return self.getToken(TSqlParser.FAST, 0)

        def ALL_LEVELS(self):
            return self.getToken(TSqlParser.ALL_LEVELS, 0)

        def NO_INFOMSGS(self):
            return self.getToken(TSqlParser.NO_INFOMSGS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_dbcc_showcontig_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_showcontig_option" ):
                listener.enterDbcc_showcontig_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_showcontig_option" ):
                listener.exitDbcc_showcontig_option(self)




    def dbcc_showcontig_option(self):

        localctx = TSqlParser.Dbcc_showcontig_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 838, self.RULE_dbcc_showcontig_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10350
            _la = self._input.LA(1)
            if not(_la==33 or _la==34 or _la==338 or _la==622 or _la==967):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dbcc_showcontigContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.table_or_view = None # ExpressionContext
            self.index = None # ExpressionContext
            self.dbcc_option = None # Dbcc_showcontig_optionContext

        def SHOWCONTIG(self):
            return self.getToken(TSqlParser.SHOWCONTIG, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def dbcc_showcontig_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Dbcc_showcontig_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Dbcc_showcontig_optionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_dbcc_showcontig

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_showcontig" ):
                listener.enterDbcc_showcontig(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_showcontig" ):
                listener.exitDbcc_showcontig(self)




    def dbcc_showcontig(self):

        localctx = TSqlParser.Dbcc_showcontigContext(self, self._ctx, self.state)
        self.enterRule(localctx, 840, self.RULE_dbcc_showcontig)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10352
            localctx.name = self.match(TSqlParser.SHOWCONTIG)
            self.state = 10361
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1394,self._ctx)
            if la_ == 1:
                self.state = 10353
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10354
                localctx.table_or_view = self.expression(0)
                self.state = 10357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 10355
                    self.match(TSqlParser.COMMA)
                    self.state = 10356
                    localctx.index = self.expression(0)


                self.state = 10359
                self.match(TSqlParser.RR_BRACKET)


            self.state = 10372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1396,self._ctx)
            if la_ == 1:
                self.state = 10363
                self.match(TSqlParser.WITH)
                self.state = 10364
                localctx.dbcc_option = self.dbcc_showcontig_option()
                self.state = 10369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 10365
                    self.match(TSqlParser.COMMA)
                    self.state = 10366
                    self.dbcc_showcontig_option()
                    self.state = 10371
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dbcc_shrinklogContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.dbcc_option = None # Token

        def SHRINKLOG(self):
            return self.getToken(TSqlParser.SHRINKLOG, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def SIZE(self):
            return self.getToken(TSqlParser.SIZE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def NO_INFOMSGS(self):
            return self.getToken(TSqlParser.NO_INFOMSGS, 0)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def MB(self):
            return self.getToken(TSqlParser.MB, 0)

        def GB(self):
            return self.getToken(TSqlParser.GB, 0)

        def TB(self):
            return self.getToken(TSqlParser.TB, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_dbcc_shrinklog

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_shrinklog" ):
                listener.enterDbcc_shrinklog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_shrinklog" ):
                listener.exitDbcc_shrinklog(self)




    def dbcc_shrinklog(self):

        localctx = TSqlParser.Dbcc_shrinklogContext(self, self._ctx, self.state)
        self.enterRule(localctx, 842, self.RULE_dbcc_shrinklog)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10374
            localctx.name = self.match(TSqlParser.SHRINKLOG)
            self.state = 10384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1398,self._ctx)
            if la_ == 1:
                self.state = 10375
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10376
                self.match(TSqlParser.SIZE)
                self.state = 10377
                self.match(TSqlParser.EQUAL)
                self.state = 10381
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1168]:
                    self.state = 10378
                    self.match(TSqlParser.DECIMAL)
                    self.state = 10379
                    _la = self._input.LA(1)
                    if not(_la==385 or _la==557 or _la==975):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [243]:
                    self.state = 10380
                    self.match(TSqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 10383
                self.match(TSqlParser.RR_BRACKET)


            self.state = 10388
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1399,self._ctx)
            if la_ == 1:
                self.state = 10386
                self.match(TSqlParser.WITH)
                self.state = 10387
                localctx.dbcc_option = self.match(TSqlParser.NO_INFOMSGS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dbcc_dbreindexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.table = None # Id_or_stringContext
            self.index_name = None # Id_or_stringContext
            self.fillfactor = None # ExpressionContext
            self.dbcc_option = None # Token

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def DBREINDEX(self):
            return self.getToken(TSqlParser.DBREINDEX, 0)

        def id_or_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_or_stringContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_or_stringContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def NO_INFOMSGS(self):
            return self.getToken(TSqlParser.NO_INFOMSGS, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_dbcc_dbreindex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_dbreindex" ):
                listener.enterDbcc_dbreindex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_dbreindex" ):
                listener.exitDbcc_dbreindex(self)




    def dbcc_dbreindex(self):

        localctx = TSqlParser.Dbcc_dbreindexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 844, self.RULE_dbcc_dbreindex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10390
            localctx.name = self.match(TSqlParser.DBREINDEX)
            self.state = 10391
            self.match(TSqlParser.LR_BRACKET)
            self.state = 10392
            localctx.table = self.id_or_string()
            self.state = 10399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1194:
                self.state = 10393
                self.match(TSqlParser.COMMA)
                self.state = 10394
                localctx.index_name = self.id_or_string()
                self.state = 10397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 10395
                    self.match(TSqlParser.COMMA)
                    self.state = 10396
                    localctx.fillfactor = self.expression(0)




            self.state = 10401
            self.match(TSqlParser.RR_BRACKET)
            self.state = 10404
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1402,self._ctx)
            if la_ == 1:
                self.state = 10402
                self.match(TSqlParser.WITH)
                self.state = 10403
                localctx.dbcc_option = self.match(TSqlParser.NO_INFOMSGS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dbcc_dll_freeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dllname = None # Id_Context
            self.name = None # Token
            self.dbcc_option = None # Token

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def FREE(self):
            return self.getToken(TSqlParser.FREE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def NO_INFOMSGS(self):
            return self.getToken(TSqlParser.NO_INFOMSGS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_dbcc_dll_free

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_dll_free" ):
                listener.enterDbcc_dll_free(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_dll_free" ):
                listener.exitDbcc_dll_free(self)




    def dbcc_dll_free(self):

        localctx = TSqlParser.Dbcc_dll_freeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 846, self.RULE_dbcc_dll_free)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10406
            localctx.dllname = self.id_()
            self.state = 10407
            self.match(TSqlParser.LR_BRACKET)
            self.state = 10408
            localctx.name = self.match(TSqlParser.FREE)
            self.state = 10409
            self.match(TSqlParser.RR_BRACKET)
            self.state = 10412
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1403,self._ctx)
            if la_ == 1:
                self.state = 10410
                self.match(TSqlParser.WITH)
                self.state = 10411
                localctx.dbcc_option = self.match(TSqlParser.NO_INFOMSGS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dbcc_dropcleanbuffersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.dbcc_option = None # Token

        def DROPCLEANBUFFERS(self):
            return self.getToken(TSqlParser.DROPCLEANBUFFERS, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def COMPUTE(self):
            return self.getToken(TSqlParser.COMPUTE, 0)

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def NO_INFOMSGS(self):
            return self.getToken(TSqlParser.NO_INFOMSGS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_dbcc_dropcleanbuffers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_dropcleanbuffers" ):
                listener.enterDbcc_dropcleanbuffers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_dropcleanbuffers" ):
                listener.exitDbcc_dropcleanbuffers(self)




    def dbcc_dropcleanbuffers(self):

        localctx = TSqlParser.Dbcc_dropcleanbuffersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 848, self.RULE_dbcc_dropcleanbuffers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10414
            localctx.name = self.match(TSqlParser.DROPCLEANBUFFERS)
            self.state = 10419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1404,self._ctx)
            if la_ == 1:
                self.state = 10415
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10416
                self.match(TSqlParser.COMPUTE)

            elif la_ == 2:
                self.state = 10417
                self.match(TSqlParser.ALL)
                self.state = 10418
                self.match(TSqlParser.RR_BRACKET)


            self.state = 10423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1405,self._ctx)
            if la_ == 1:
                self.state = 10421
                self.match(TSqlParser.WITH)
                self.state = 10422
                localctx.dbcc_option = self.match(TSqlParser.NO_INFOMSGS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dbcc_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DBCC(self):
            return self.getToken(TSqlParser.DBCC, 0)

        def dbcc_checkalloc(self):
            return self.getTypedRuleContext(TSqlParser.Dbcc_checkallocContext,0)


        def dbcc_checkcatalog(self):
            return self.getTypedRuleContext(TSqlParser.Dbcc_checkcatalogContext,0)


        def dbcc_checkconstraints(self):
            return self.getTypedRuleContext(TSqlParser.Dbcc_checkconstraintsContext,0)


        def dbcc_checkdb(self):
            return self.getTypedRuleContext(TSqlParser.Dbcc_checkdbContext,0)


        def dbcc_checkfilegroup(self):
            return self.getTypedRuleContext(TSqlParser.Dbcc_checkfilegroupContext,0)


        def dbcc_checktable(self):
            return self.getTypedRuleContext(TSqlParser.Dbcc_checktableContext,0)


        def dbcc_cleantable(self):
            return self.getTypedRuleContext(TSqlParser.Dbcc_cleantableContext,0)


        def dbcc_clonedatabase(self):
            return self.getTypedRuleContext(TSqlParser.Dbcc_clonedatabaseContext,0)


        def dbcc_dbreindex(self):
            return self.getTypedRuleContext(TSqlParser.Dbcc_dbreindexContext,0)


        def dbcc_dll_free(self):
            return self.getTypedRuleContext(TSqlParser.Dbcc_dll_freeContext,0)


        def dbcc_dropcleanbuffers(self):
            return self.getTypedRuleContext(TSqlParser.Dbcc_dropcleanbuffersContext,0)


        def dbcc_pdw_showspaceused(self):
            return self.getTypedRuleContext(TSqlParser.Dbcc_pdw_showspaceusedContext,0)


        def dbcc_proccache(self):
            return self.getTypedRuleContext(TSqlParser.Dbcc_proccacheContext,0)


        def dbcc_showcontig(self):
            return self.getTypedRuleContext(TSqlParser.Dbcc_showcontigContext,0)


        def dbcc_shrinklog(self):
            return self.getTypedRuleContext(TSqlParser.Dbcc_shrinklogContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_dbcc_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_clause" ):
                listener.enterDbcc_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_clause" ):
                listener.exitDbcc_clause(self)




    def dbcc_clause(self):

        localctx = TSqlParser.Dbcc_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 850, self.RULE_dbcc_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10425
            self.match(TSqlParser.DBCC)
            self.state = 10441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1406,self._ctx)
            if la_ == 1:
                self.state = 10426
                self.dbcc_checkalloc()
                pass

            elif la_ == 2:
                self.state = 10427
                self.dbcc_checkcatalog()
                pass

            elif la_ == 3:
                self.state = 10428
                self.dbcc_checkconstraints()
                pass

            elif la_ == 4:
                self.state = 10429
                self.dbcc_checkdb()
                pass

            elif la_ == 5:
                self.state = 10430
                self.dbcc_checkfilegroup()
                pass

            elif la_ == 6:
                self.state = 10431
                self.dbcc_checktable()
                pass

            elif la_ == 7:
                self.state = 10432
                self.dbcc_cleantable()
                pass

            elif la_ == 8:
                self.state = 10433
                self.dbcc_clonedatabase()
                pass

            elif la_ == 9:
                self.state = 10434
                self.dbcc_dbreindex()
                pass

            elif la_ == 10:
                self.state = 10435
                self.dbcc_dll_free()
                pass

            elif la_ == 11:
                self.state = 10436
                self.dbcc_dropcleanbuffers()
                pass

            elif la_ == 12:
                self.state = 10437
                self.dbcc_pdw_showspaceused()
                pass

            elif la_ == 13:
                self.state = 10438
                self.dbcc_proccache()
                pass

            elif la_ == 14:
                self.state = 10439
                self.dbcc_showcontig()
                pass

            elif la_ == 15:
                self.state = 10440
                self.dbcc_shrinklog()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.clause = None # Token

        def EXECUTE(self):
            return self.getToken(TSqlParser.EXECUTE, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def CALLER(self):
            return self.getToken(TSqlParser.CALLER, 0)

        def SELF(self):
            return self.getToken(TSqlParser.SELF, 0)

        def OWNER(self):
            return self.getToken(TSqlParser.OWNER, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_execute_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_clause" ):
                listener.enterExecute_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_clause" ):
                listener.exitExecute_clause(self)




    def execute_clause(self):

        localctx = TSqlParser.Execute_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 852, self.RULE_execute_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10443
            self.match(TSqlParser.EXECUTE)
            self.state = 10444
            self.match(TSqlParser.AS)
            self.state = 10445
            localctx.clause = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==113 or _la==674 or _la==866 or _la==1170):
                localctx.clause = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_localContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_declare_local

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_local" ):
                listener.enterDeclare_local(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_local" ):
                listener.exitDeclare_local(self)




    def declare_local(self):

        localctx = TSqlParser.Declare_localContext(self, self._ctx, self.state)
        self.enterRule(localctx, 854, self.RULE_declare_local)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10447
            self.match(TSqlParser.LOCAL_ID)
            self.state = 10449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 10448
                self.match(TSqlParser.AS)


            self.state = 10451
            self.data_type()
            self.state = 10454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1174:
                self.state = 10452
                self.match(TSqlParser.EQUAL)
                self.state = 10453
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_type_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(TSqlParser.TABLE, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_def_table_constraints(self):
            return self.getTypedRuleContext(TSqlParser.Column_def_table_constraintsContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def table_type_indices(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Table_type_indicesContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Table_type_indicesContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_table_type_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_type_definition" ):
                listener.enterTable_type_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_type_definition" ):
                listener.exitTable_type_definition(self)




    def table_type_definition(self):

        localctx = TSqlParser.Table_type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 856, self.RULE_table_type_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10456
            self.match(TSqlParser.TABLE)
            self.state = 10457
            self.match(TSqlParser.LR_BRACKET)
            self.state = 10458
            self.column_def_table_constraints()
            self.state = 10465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==131 or _la==447 or _la==717 or _la==1020 or _la==1194:
                self.state = 10460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 10459
                    self.match(TSqlParser.COMMA)


                self.state = 10462
                self.table_type_indices()
                self.state = 10467
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 10468
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_type_indicesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_name_list_with_order(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_list_with_orderContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def UNIQUE(self):
            return self.getToken(TSqlParser.UNIQUE, 0)

        def PRIMARY(self):
            return self.getToken(TSqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def INDEX(self):
            return self.getToken(TSqlParser.INDEX, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def CLUSTERED(self):
            return self.getToken(TSqlParser.CLUSTERED, 0)

        def NONCLUSTERED(self):
            return self.getToken(TSqlParser.NONCLUSTERED, 0)

        def CHECK(self):
            return self.getToken(TSqlParser.CHECK, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_table_type_indices

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_type_indices" ):
                listener.enterTable_type_indices(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_type_indices" ):
                listener.exitTable_type_indices(self)




    def table_type_indices(self):

        localctx = TSqlParser.Table_type_indicesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 858, self.RULE_table_type_indices)
        self._la = 0 # Token type
        try:
            self.state = 10491
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [447, 717, 1020]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10480
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [447, 717]:
                    self.state = 10474
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [717]:
                        self.state = 10470
                        self.match(TSqlParser.PRIMARY)
                        self.state = 10471
                        self.match(TSqlParser.KEY)
                        pass
                    elif token in [447]:
                        self.state = 10472
                        self.match(TSqlParser.INDEX)
                        self.state = 10473
                        self.id_()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 10477
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==149 or _la==607:
                        self.state = 10476
                        _la = self._input.LA(1)
                        if not(_la==149 or _la==607):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass
                elif token in [1020]:
                    self.state = 10479
                    self.match(TSqlParser.UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 10482
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10483
                self.column_name_list_with_order()
                self.state = 10484
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [131]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10486
                self.match(TSqlParser.CHECK)
                self.state = 10487
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10488
                self.search_condition(0)
                self.state = 10489
                self.match(TSqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_type_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XML(self):
            return self.getToken(TSqlParser.XML, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def xml_schema_collection(self):
            return self.getTypedRuleContext(TSqlParser.Xml_schema_collectionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def CONTENT(self):
            return self.getToken(TSqlParser.CONTENT, 0)

        def DOCUMENT(self):
            return self.getToken(TSqlParser.DOCUMENT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_xml_type_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_type_definition" ):
                listener.enterXml_type_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_type_definition" ):
                listener.exitXml_type_definition(self)




    def xml_type_definition(self):

        localctx = TSqlParser.Xml_type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 860, self.RULE_xml_type_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10493
            self.match(TSqlParser.XML)
            self.state = 10494
            self.match(TSqlParser.LR_BRACKET)
            self.state = 10496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==181 or _la==275:
                self.state = 10495
                _la = self._input.LA(1)
                if not(_la==181 or _la==275):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 10498
            self.xml_schema_collection()
            self.state = 10499
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_schema_collectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ID)
            else:
                return self.getToken(TSqlParser.ID, i)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_xml_schema_collection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_schema_collection" ):
                listener.enterXml_schema_collection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_schema_collection" ):
                listener.exitXml_schema_collection(self)




    def xml_schema_collection(self):

        localctx = TSqlParser.Xml_schema_collectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 862, self.RULE_xml_schema_collection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10501
            self.match(TSqlParser.ID)
            self.state = 10502
            self.match(TSqlParser.DOT)
            self.state = 10503
            self.match(TSqlParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_def_table_constraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_def_table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Column_def_table_constraintContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Column_def_table_constraintContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_column_def_table_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def_table_constraints" ):
                listener.enterColumn_def_table_constraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def_table_constraints" ):
                listener.exitColumn_def_table_constraints(self)




    def column_def_table_constraints(self):

        localctx = TSqlParser.Column_def_table_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 864, self.RULE_column_def_table_constraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10505
            self.column_def_table_constraint()
            self.state = 10512
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1417,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 10507
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 10506
                        self.match(TSqlParser.COMMA)


                    self.state = 10509
                    self.column_def_table_constraint() 
                self.state = 10514
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1417,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_def_table_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_definition(self):
            return self.getTypedRuleContext(TSqlParser.Column_definitionContext,0)


        def materialized_column_definition(self):
            return self.getTypedRuleContext(TSqlParser.Materialized_column_definitionContext,0)


        def table_constraint(self):
            return self.getTypedRuleContext(TSqlParser.Table_constraintContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_column_def_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def_table_constraint" ):
                listener.enterColumn_def_table_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def_table_constraint" ):
                listener.exitColumn_def_table_constraint(self)




    def column_def_table_constraint(self):

        localctx = TSqlParser.Column_def_table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 866, self.RULE_column_def_table_constraint)
        try:
            self.state = 10518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1418,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10515
                self.column_definition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10516
                self.materialized_column_definition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10517
                self.table_constraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def column_definition_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Column_definition_elementContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Column_definition_elementContext,i)


        def column_index(self):
            return self.getTypedRuleContext(TSqlParser.Column_indexContext,0)


        def PERSISTED(self):
            return self.getToken(TSqlParser.PERSISTED, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_definition" ):
                listener.enterColumn_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_definition" ):
                listener.exitColumn_definition(self)




    def column_definition(self):

        localctx = TSqlParser.Column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 868, self.RULE_column_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10520
            self.id_()
            self.state = 10527
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 277, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                self.state = 10521
                self.data_type()
                pass
            elif token in [56]:
                self.state = 10522
                self.match(TSqlParser.AS)
                self.state = 10523
                self.expression(0)
                self.state = 10525
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1419,self._ctx)
                if la_ == 1:
                    self.state = 10524
                    self.match(TSqlParser.PERSISTED)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 10532
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1421,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 10529
                    self.column_definition_element() 
                self.state = 10534
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1421,self._ctx)

            self.state = 10536
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1422,self._ctx)
            if la_ == 1:
                self.state = 10535
                self.column_index()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_definition_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.collation_name = None # Id_Context
            self.mask_function = None # Token
            self.constraint = None # Id_Context
            self.constant_expr = None # ExpressionContext
            self.seed = None # Token
            self.increment = None # Token
            self.key_name = None # Token
            self.algo = None # Token

        def FILESTREAM(self):
            return self.getToken(TSqlParser.FILESTREAM, 0)

        def COLLATE(self):
            return self.getToken(TSqlParser.COLLATE, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def SPARSE(self):
            return self.getToken(TSqlParser.SPARSE, 0)

        def MASKED(self):
            return self.getToken(TSqlParser.MASKED, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def FUNCTION(self):
            return self.getToken(TSqlParser.FUNCTION, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def CONSTRAINT(self):
            return self.getToken(TSqlParser.CONSTRAINT, 0)

        def IDENTITY(self):
            return self.getToken(TSqlParser.IDENTITY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(TSqlParser.REPLICATION, 0)

        def GENERATED(self):
            return self.getToken(TSqlParser.GENERATED, 0)

        def ALWAYS(self):
            return self.getToken(TSqlParser.ALWAYS, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def ROW(self):
            return self.getToken(TSqlParser.ROW, 0)

        def TRANSACTION_ID(self):
            return self.getToken(TSqlParser.TRANSACTION_ID, 0)

        def SEQUENCE_NUMBER(self):
            return self.getToken(TSqlParser.SEQUENCE_NUMBER, 0)

        def START(self):
            return self.getToken(TSqlParser.START, 0)

        def END(self):
            return self.getToken(TSqlParser.END, 0)

        def HIDDEN_KEYWORD(self):
            return self.getToken(TSqlParser.HIDDEN_KEYWORD, 0)

        def ROWGUIDCOL(self):
            return self.getToken(TSqlParser.ROWGUIDCOL, 0)

        def ENCRYPTED(self):
            return self.getToken(TSqlParser.ENCRYPTED, 0)

        def COLUMN_ENCRYPTION_KEY(self):
            return self.getToken(TSqlParser.COLUMN_ENCRYPTION_KEY, 0)

        def ENCRYPTION_TYPE(self):
            return self.getToken(TSqlParser.ENCRYPTION_TYPE, 0)

        def ALGORITHM(self):
            return self.getToken(TSqlParser.ALGORITHM, 0)

        def DETERMINISTIC(self):
            return self.getToken(TSqlParser.DETERMINISTIC, 0)

        def RANDOMIZED(self):
            return self.getToken(TSqlParser.RANDOMIZED, 0)

        def column_constraint(self):
            return self.getTypedRuleContext(TSqlParser.Column_constraintContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_column_definition_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_definition_element" ):
                listener.enterColumn_definition_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_definition_element" ):
                listener.exitColumn_definition_element(self)




    def column_definition_element(self):

        localctx = TSqlParser.Column_definition_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 870, self.RULE_column_definition_element)
        self._la = 0 # Token type
        try:
            self.state = 10591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1426,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10538
                self.match(TSqlParser.FILESTREAM)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10539
                self.match(TSqlParser.COLLATE)
                self.state = 10540
                localctx.collation_name = self.id_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10541
                self.match(TSqlParser.SPARSE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10542
                self.match(TSqlParser.MASKED)
                self.state = 10543
                self.match(TSqlParser.WITH)
                self.state = 10544
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10545
                self.match(TSqlParser.FUNCTION)
                self.state = 10546
                self.match(TSqlParser.EQUAL)
                self.state = 10547
                localctx.mask_function = self.match(TSqlParser.STRING)
                self.state = 10548
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 10551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==177:
                    self.state = 10549
                    self.match(TSqlParser.CONSTRAINT)
                    self.state = 10550
                    localctx.constraint = self.id_()


                self.state = 10553
                self.match(TSqlParser.DEFAULT)
                self.state = 10554
                localctx.constant_expr = self.expression(0)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 10555
                self.match(TSqlParser.IDENTITY)
                self.state = 10561
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1424,self._ctx)
                if la_ == 1:
                    self.state = 10556
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 10557
                    localctx.seed = self.match(TSqlParser.DECIMAL)
                    self.state = 10558
                    self.match(TSqlParser.COMMA)
                    self.state = 10559
                    localctx.increment = self.match(TSqlParser.DECIMAL)
                    self.state = 10560
                    self.match(TSqlParser.RR_BRACKET)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 10563
                self.match(TSqlParser.NOT)
                self.state = 10564
                self.match(TSqlParser.FOR)
                self.state = 10565
                self.match(TSqlParser.REPLICATION)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 10566
                self.match(TSqlParser.GENERATED)
                self.state = 10567
                self.match(TSqlParser.ALWAYS)
                self.state = 10568
                self.match(TSqlParser.AS)
                self.state = 10569
                _la = self._input.LA(1)
                if not(_la==824 or _la==874 or _la==995):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 10570
                _la = self._input.LA(1)
                if not(_la==297 or _la==925):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 10572
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1425,self._ctx)
                if la_ == 1:
                    self.state = 10571
                    self.match(TSqlParser.HIDDEN_KEYWORD)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 10574
                self.match(TSqlParser.ROWGUIDCOL)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 10575
                self.match(TSqlParser.ENCRYPTED)
                self.state = 10576
                self.match(TSqlParser.WITH)
                self.state = 10577
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10578
                self.match(TSqlParser.COLUMN_ENCRYPTION_KEY)
                self.state = 10579
                self.match(TSqlParser.EQUAL)
                self.state = 10580
                localctx.key_name = self.match(TSqlParser.STRING)
                self.state = 10581
                self.match(TSqlParser.COMMA)
                self.state = 10582
                self.match(TSqlParser.ENCRYPTION_TYPE)
                self.state = 10583
                self.match(TSqlParser.EQUAL)
                self.state = 10584
                _la = self._input.LA(1)
                if not(_la==261 or _la==747):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 10585
                self.match(TSqlParser.COMMA)
                self.state = 10586
                self.match(TSqlParser.ALGORITHM)
                self.state = 10587
                self.match(TSqlParser.EQUAL)
                self.state = 10588
                localctx.algo = self.match(TSqlParser.STRING)
                self.state = 10589
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 10590
                self.column_constraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def ROWGUIDCOL(self):
            return self.getToken(TSqlParser.ROWGUIDCOL, 0)

        def PERSISTED(self):
            return self.getToken(TSqlParser.PERSISTED, 0)

        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(TSqlParser.REPLICATION, 0)

        def SPARSE(self):
            return self.getToken(TSqlParser.SPARSE, 0)

        def HIDDEN_KEYWORD(self):
            return self.getToken(TSqlParser.HIDDEN_KEYWORD, 0)

        def MASKED(self):
            return self.getToken(TSqlParser.MASKED, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def FUNCTION(self):
            return self.getToken(TSqlParser.FUNCTION, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_column_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_modifier" ):
                listener.enterColumn_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_modifier" ):
                listener.exitColumn_modifier(self)




    def column_modifier(self):

        localctx = TSqlParser.Column_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 872, self.RULE_column_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10593
            self.id_()
            self.state = 10594
            _la = self._input.LA(1)
            if not(_la==11 or _la==280):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 10616
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [828]:
                self.state = 10595
                self.match(TSqlParser.ROWGUIDCOL)
                pass
            elif token in [701]:
                self.state = 10596
                self.match(TSqlParser.PERSISTED)
                pass
            elif token in [614]:
                self.state = 10597
                self.match(TSqlParser.NOT)
                self.state = 10598
                self.match(TSqlParser.FOR)
                self.state = 10599
                self.match(TSqlParser.REPLICATION)
                pass
            elif token in [915]:
                self.state = 10600
                self.match(TSqlParser.SPARSE)
                pass
            elif token in [416]:
                self.state = 10601
                self.match(TSqlParser.HIDDEN_KEYWORD)
                pass
            elif token in [533]:
                self.state = 10602
                self.match(TSqlParser.MASKED)
                self.state = 10614
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1428,self._ctx)
                if la_ == 1:
                    self.state = 10603
                    self.match(TSqlParser.WITH)
                    self.state = 10612
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [384]:
                        self.state = 10604
                        self.match(TSqlParser.FUNCTION)
                        self.state = 10605
                        self.match(TSqlParser.EQUAL)
                        self.state = 10606
                        self.match(TSqlParser.STRING)
                        pass
                    elif token in [1192]:
                        self.state = 10607
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 10608
                        self.match(TSqlParser.FUNCTION)
                        self.state = 10609
                        self.match(TSqlParser.EQUAL)
                        self.state = 10610
                        self.match(TSqlParser.STRING)
                        self.state = 10611
                        self.match(TSqlParser.RR_BRACKET)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Materialized_column_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def COMPUTE(self):
            return self.getToken(TSqlParser.COMPUTE, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def MATERIALIZED(self):
            return self.getToken(TSqlParser.MATERIALIZED, 0)

        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_materialized_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaterialized_column_definition" ):
                listener.enterMaterialized_column_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaterialized_column_definition" ):
                listener.exitMaterialized_column_definition(self)




    def materialized_column_definition(self):

        localctx = TSqlParser.Materialized_column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 874, self.RULE_materialized_column_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10618
            self.id_()
            self.state = 10619
            _la = self._input.LA(1)
            if not(_la==56 or _la==169):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 10620
            self.expression(0)
            self.state = 10624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1430,self._ctx)
            if la_ == 1:
                self.state = 10621
                self.match(TSqlParser.MATERIALIZED)

            elif la_ == 2:
                self.state = 10622
                self.match(TSqlParser.NOT)
                self.state = 10623
                self.match(TSqlParser.MATERIALIZED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint = None # Id_Context

        def null_notnull(self):
            return self.getTypedRuleContext(TSqlParser.Null_notnullContext,0)


        def check_constraint(self):
            return self.getTypedRuleContext(TSqlParser.Check_constraintContext,0)


        def CONSTRAINT(self):
            return self.getToken(TSqlParser.CONSTRAINT, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def primary_key_options(self):
            return self.getTypedRuleContext(TSqlParser.Primary_key_optionsContext,0)


        def foreign_key_options(self):
            return self.getTypedRuleContext(TSqlParser.Foreign_key_optionsContext,0)


        def PRIMARY(self):
            return self.getToken(TSqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(TSqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(TSqlParser.ClusteredContext,0)


        def FOREIGN(self):
            return self.getToken(TSqlParser.FOREIGN, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_column_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint" ):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint" ):
                listener.exitColumn_constraint(self)




    def column_constraint(self):

        localctx = TSqlParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 876, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 10626
                self.match(TSqlParser.CONSTRAINT)
                self.state = 10627
                localctx.constraint = self.id_()


            self.state = 10646
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [614, 630]:
                self.state = 10630
                self.null_notnull()
                pass
            elif token in [717, 1020]:
                self.state = 10634
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [717]:
                    self.state = 10631
                    self.match(TSqlParser.PRIMARY)
                    self.state = 10632
                    self.match(TSqlParser.KEY)
                    pass
                elif token in [1020]:
                    self.state = 10633
                    self.match(TSqlParser.UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 10637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==149 or _la==607:
                    self.state = 10636
                    self.clustered()


                self.state = 10639
                self.primary_key_options()
                pass
            elif token in [371, 773]:
                self.state = 10642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==371:
                    self.state = 10640
                    self.match(TSqlParser.FOREIGN)
                    self.state = 10641
                    self.match(TSqlParser.KEY)


                self.state = 10644
                self.foreign_key_options()
                pass
            elif token in [131]:
                self.state = 10645
                self.check_constraint()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index_name = None # Id_Context
            self.filestream_filegroup_or_partition_schema_name = None # Id_Context

        def INDEX(self):
            return self.getToken(TSqlParser.INDEX, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def clustered(self):
            return self.getTypedRuleContext(TSqlParser.ClusteredContext,0)


        def create_table_index_options(self):
            return self.getTypedRuleContext(TSqlParser.Create_table_index_optionsContext,0)


        def on_partition_or_filegroup(self):
            return self.getTypedRuleContext(TSqlParser.On_partition_or_filegroupContext,0)


        def FILESTREAM_ON(self):
            return self.getToken(TSqlParser.FILESTREAM_ON, 0)

        def NULL_DOUBLE_QUOTE(self):
            return self.getToken(TSqlParser.NULL_DOUBLE_QUOTE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_column_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_index" ):
                listener.enterColumn_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_index" ):
                listener.exitColumn_index(self)




    def column_index(self):

        localctx = TSqlParser.Column_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 878, self.RULE_column_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10648
            self.match(TSqlParser.INDEX)
            self.state = 10649
            localctx.index_name = self.id_()
            self.state = 10651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149 or _la==607:
                self.state = 10650
                self.clustered()


            self.state = 10654
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1437,self._ctx)
            if la_ == 1:
                self.state = 10653
                self.create_table_index_options()


            self.state = 10657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==649:
                self.state = 10656
                self.on_partition_or_filegroup()


            self.state = 10664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1440,self._ctx)
            if la_ == 1:
                self.state = 10659
                self.match(TSqlParser.FILESTREAM_ON)
                self.state = 10662
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1439,self._ctx)
                if la_ == 1:
                    self.state = 10660
                    localctx.filestream_filegroup_or_partition_schema_name = self.id_()
                    pass

                elif la_ == 2:
                    self.state = 10661
                    self.match(TSqlParser.NULL_DOUBLE_QUOTE)
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_partition_or_filegroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.partition_scheme_name = None # Id_Context
            self.partition_column_name = None # Id_Context
            self.filegroup = None # Id_Context

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def DEFAULT_DOUBLE_QUOTE(self):
            return self.getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_on_partition_or_filegroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_partition_or_filegroup" ):
                listener.enterOn_partition_or_filegroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_partition_or_filegroup" ):
                listener.exitOn_partition_or_filegroup(self)




    def on_partition_or_filegroup(self):

        localctx = TSqlParser.On_partition_or_filegroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 880, self.RULE_on_partition_or_filegroup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10666
            self.match(TSqlParser.ON)
            self.state = 10674
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1441,self._ctx)
            if la_ == 1:
                self.state = 10667
                localctx.partition_scheme_name = self.id_()
                self.state = 10668
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10669
                localctx.partition_column_name = self.id_()
                self.state = 10670
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.state = 10672
                localctx.filegroup = self.id_()
                pass

            elif la_ == 3:
                self.state = 10673
                self.match(TSqlParser.DEFAULT_DOUBLE_QUOTE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint = None # Id_Context
            self.fk = None # Column_name_listContext
            self.constant_expr = None # ExpressionContext
            self.column = None # Id_Context

        def check_constraint(self):
            return self.getTypedRuleContext(TSqlParser.Check_constraintContext,0)


        def CONSTRAINT(self):
            return self.getToken(TSqlParser.CONSTRAINT, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_name_list_with_order(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_list_with_orderContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def primary_key_options(self):
            return self.getTypedRuleContext(TSqlParser.Primary_key_optionsContext,0)


        def FOREIGN(self):
            return self.getToken(TSqlParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def foreign_key_options(self):
            return self.getTypedRuleContext(TSqlParser.Foreign_key_optionsContext,0)


        def CONNECTION(self):
            return self.getToken(TSqlParser.CONNECTION, 0)

        def connection_node(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Connection_nodeContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Connection_nodeContext,i)


        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def PRIMARY(self):
            return self.getToken(TSqlParser.PRIMARY, 0)

        def UNIQUE(self):
            return self.getToken(TSqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(TSqlParser.ClusteredContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def VALUES(self):
            return self.getToken(TSqlParser.VALUES, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)




    def table_constraint(self):

        localctx = TSqlParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 882, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 10676
                self.match(TSqlParser.CONSTRAINT)
                self.state = 10677
                localctx.constraint = self.id_()


            self.state = 10721
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [717, 1020]:
                self.state = 10683
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [717]:
                    self.state = 10680
                    self.match(TSqlParser.PRIMARY)
                    self.state = 10681
                    self.match(TSqlParser.KEY)
                    pass
                elif token in [1020]:
                    self.state = 10682
                    self.match(TSqlParser.UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 10686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==149 or _la==607:
                    self.state = 10685
                    self.clustered()


                self.state = 10688
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10689
                self.column_name_list_with_order()
                self.state = 10690
                self.match(TSqlParser.RR_BRACKET)
                self.state = 10691
                self.primary_key_options()
                pass
            elif token in [371]:
                self.state = 10693
                self.match(TSqlParser.FOREIGN)
                self.state = 10694
                self.match(TSqlParser.KEY)
                self.state = 10695
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10696
                localctx.fk = self.column_name_list()
                self.state = 10697
                self.match(TSqlParser.RR_BRACKET)
                self.state = 10698
                self.foreign_key_options()
                pass
            elif token in [175]:
                self.state = 10700
                self.match(TSqlParser.CONNECTION)
                self.state = 10701
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10702
                self.connection_node()
                self.state = 10707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 10703
                    self.match(TSqlParser.COMMA)
                    self.state = 10704
                    self.connection_node()
                    self.state = 10709
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 10710
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [243]:
                self.state = 10712
                self.match(TSqlParser.DEFAULT)
                self.state = 10713
                localctx.constant_expr = self.expression(0)
                self.state = 10714
                self.match(TSqlParser.FOR)
                self.state = 10715
                localctx.column = self.id_()
                self.state = 10718
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1446,self._ctx)
                if la_ == 1:
                    self.state = 10716
                    self.match(TSqlParser.WITH)
                    self.state = 10717
                    self.match(TSqlParser.VALUES)


                pass
            elif token in [131]:
                self.state = 10720
                self.check_constraint()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Connection_nodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.from_node_table = None # Id_Context
            self.to_node_table = None # Id_Context

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_connection_node

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConnection_node" ):
                listener.enterConnection_node(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConnection_node" ):
                listener.exitConnection_node(self)




    def connection_node(self):

        localctx = TSqlParser.Connection_nodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 884, self.RULE_connection_node)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10723
            localctx.from_node_table = self.id_()
            self.state = 10724
            self.match(TSqlParser.TO)
            self.state = 10725
            localctx.to_node_table = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_key_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def FILLFACTOR(self):
            return self.getToken(TSqlParser.FILLFACTOR, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def alter_table_index_options(self):
            return self.getTypedRuleContext(TSqlParser.Alter_table_index_optionsContext,0)


        def on_partition_or_filegroup(self):
            return self.getTypedRuleContext(TSqlParser.On_partition_or_filegroupContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_primary_key_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_key_options" ):
                listener.enterPrimary_key_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_key_options" ):
                listener.exitPrimary_key_options(self)




    def primary_key_options(self):

        localctx = TSqlParser.Primary_key_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 886, self.RULE_primary_key_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10731
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1448,self._ctx)
            if la_ == 1:
                self.state = 10727
                self.match(TSqlParser.WITH)
                self.state = 10728
                self.match(TSqlParser.FILLFACTOR)
                self.state = 10729
                self.match(TSqlParser.EQUAL)
                self.state = 10730
                self.match(TSqlParser.DECIMAL)


            self.state = 10734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1449,self._ctx)
            if la_ == 1:
                self.state = 10733
                self.alter_table_index_options()


            self.state = 10737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==649:
                self.state = 10736
                self.on_partition_or_filegroup()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_key_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pk = None # Column_name_listContext

        def REFERENCES(self):
            return self.getToken(TSqlParser.REFERENCES, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def on_delete(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.On_deleteContext)
            else:
                return self.getTypedRuleContext(TSqlParser.On_deleteContext,i)


        def on_update(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.On_updateContext)
            else:
                return self.getTypedRuleContext(TSqlParser.On_updateContext,i)


        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(TSqlParser.REPLICATION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_foreign_key_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_key_options" ):
                listener.enterForeign_key_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_key_options" ):
                listener.exitForeign_key_options(self)




    def foreign_key_options(self):

        localctx = TSqlParser.Foreign_key_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 888, self.RULE_foreign_key_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10739
            self.match(TSqlParser.REFERENCES)
            self.state = 10740
            self.table_name()
            self.state = 10741
            self.match(TSqlParser.LR_BRACKET)
            self.state = 10742
            localctx.pk = self.column_name_list()
            self.state = 10743
            self.match(TSqlParser.RR_BRACKET)
            self.state = 10748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==649:
                self.state = 10746
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1451,self._ctx)
                if la_ == 1:
                    self.state = 10744
                    self.on_delete()
                    pass

                elif la_ == 2:
                    self.state = 10745
                    self.on_update()
                    pass


                self.state = 10750
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 10754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1453,self._ctx)
            if la_ == 1:
                self.state = 10751
                self.match(TSqlParser.NOT)
                self.state = 10752
                self.match(TSqlParser.FOR)
                self.state = 10753
                self.match(TSqlParser.REPLICATION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Check_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(TSqlParser.CHECK, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(TSqlParser.REPLICATION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_check_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheck_constraint" ):
                listener.enterCheck_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheck_constraint" ):
                listener.exitCheck_constraint(self)




    def check_constraint(self):

        localctx = TSqlParser.Check_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 890, self.RULE_check_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10756
            self.match(TSqlParser.CHECK)
            self.state = 10760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==614:
                self.state = 10757
                self.match(TSqlParser.NOT)
                self.state = 10758
                self.match(TSqlParser.FOR)
                self.state = 10759
                self.match(TSqlParser.REPLICATION)


            self.state = 10762
            self.match(TSqlParser.LR_BRACKET)
            self.state = 10763
            self.search_condition(0)
            self.state = 10764
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_deleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def DELETE(self):
            return self.getToken(TSqlParser.DELETE, 0)

        def NO(self):
            return self.getToken(TSqlParser.NO, 0)

        def ACTION(self):
            return self.getToken(TSqlParser.ACTION, 0)

        def CASCADE(self):
            return self.getToken(TSqlParser.CASCADE, 0)

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def NULL_(self):
            return self.getToken(TSqlParser.NULL_, 0)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_on_delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_delete" ):
                listener.enterOn_delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_delete" ):
                listener.exitOn_delete(self)




    def on_delete(self):

        localctx = TSqlParser.On_deleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 892, self.RULE_on_delete)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10766
            self.match(TSqlParser.ON)
            self.state = 10767
            self.match(TSqlParser.DELETE)
            self.state = 10775
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1455,self._ctx)
            if la_ == 1:
                self.state = 10768
                self.match(TSqlParser.NO)
                self.state = 10769
                self.match(TSqlParser.ACTION)
                pass

            elif la_ == 2:
                self.state = 10770
                self.match(TSqlParser.CASCADE)
                pass

            elif la_ == 3:
                self.state = 10771
                self.match(TSqlParser.SET)
                self.state = 10772
                self.match(TSqlParser.NULL_)
                pass

            elif la_ == 4:
                self.state = 10773
                self.match(TSqlParser.SET)
                self.state = 10774
                self.match(TSqlParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_updateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def UPDATE(self):
            return self.getToken(TSqlParser.UPDATE, 0)

        def NO(self):
            return self.getToken(TSqlParser.NO, 0)

        def ACTION(self):
            return self.getToken(TSqlParser.ACTION, 0)

        def CASCADE(self):
            return self.getToken(TSqlParser.CASCADE, 0)

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def NULL_(self):
            return self.getToken(TSqlParser.NULL_, 0)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_on_update

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_update" ):
                listener.enterOn_update(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_update" ):
                listener.exitOn_update(self)




    def on_update(self):

        localctx = TSqlParser.On_updateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 894, self.RULE_on_update)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10777
            self.match(TSqlParser.ON)
            self.state = 10778
            self.match(TSqlParser.UPDATE)
            self.state = 10786
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1456,self._ctx)
            if la_ == 1:
                self.state = 10779
                self.match(TSqlParser.NO)
                self.state = 10780
                self.match(TSqlParser.ACTION)
                pass

            elif la_ == 2:
                self.state = 10781
                self.match(TSqlParser.CASCADE)
                pass

            elif la_ == 3:
                self.state = 10782
                self.match(TSqlParser.SET)
                self.state = 10783
                self.match(TSqlParser.NULL_)
                pass

            elif la_ == 4:
                self.state = 10784
                self.match(TSqlParser.SET)
                self.state = 10785
                self.match(TSqlParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_index_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def alter_table_index_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Alter_table_index_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Alter_table_index_optionContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_table_index_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_index_options" ):
                listener.enterAlter_table_index_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_index_options" ):
                listener.exitAlter_table_index_options(self)




    def alter_table_index_options(self):

        localctx = TSqlParser.Alter_table_index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 896, self.RULE_alter_table_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10788
            self.match(TSqlParser.WITH)
            self.state = 10789
            self.match(TSqlParser.LR_BRACKET)
            self.state = 10790
            self.alter_table_index_option()
            self.state = 10795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 10791
                self.match(TSqlParser.COMMA)
                self.state = 10792
                self.alter_table_index_option()
                self.state = 10797
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 10798
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_index_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.max_degree_of_parallelism = None # Token
            self.times = None # Token

        def PAD_INDEX(self):
            return self.getToken(TSqlParser.PAD_INDEX, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def FILLFACTOR(self):
            return self.getToken(TSqlParser.FILLFACTOR, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def IGNORE_DUP_KEY(self):
            return self.getToken(TSqlParser.IGNORE_DUP_KEY, 0)

        def STATISTICS_NORECOMPUTE(self):
            return self.getToken(TSqlParser.STATISTICS_NORECOMPUTE, 0)

        def ALLOW_ROW_LOCKS(self):
            return self.getToken(TSqlParser.ALLOW_ROW_LOCKS, 0)

        def ALLOW_PAGE_LOCKS(self):
            return self.getToken(TSqlParser.ALLOW_PAGE_LOCKS, 0)

        def OPTIMIZE_FOR_SEQUENTIAL_KEY(self):
            return self.getToken(TSqlParser.OPTIMIZE_FOR_SEQUENTIAL_KEY, 0)

        def SORT_IN_TEMPDB(self):
            return self.getToken(TSqlParser.SORT_IN_TEMPDB, 0)

        def MAXDOP(self):
            return self.getToken(TSqlParser.MAXDOP, 0)

        def DATA_COMPRESSION(self):
            return self.getToken(TSqlParser.DATA_COMPRESSION, 0)

        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def ROW(self):
            return self.getToken(TSqlParser.ROW, 0)

        def PAGE(self):
            return self.getToken(TSqlParser.PAGE, 0)

        def COLUMNSTORE(self):
            return self.getToken(TSqlParser.COLUMNSTORE, 0)

        def COLUMNSTORE_ARCHIVE(self):
            return self.getToken(TSqlParser.COLUMNSTORE_ARCHIVE, 0)

        def on_partitions(self):
            return self.getTypedRuleContext(TSqlParser.On_partitionsContext,0)


        def XML_COMPRESSION(self):
            return self.getToken(TSqlParser.XML_COMPRESSION, 0)

        def DISTRIBUTION(self):
            return self.getToken(TSqlParser.DISTRIBUTION, 0)

        def HASH(self):
            return self.getToken(TSqlParser.HASH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def CLUSTERED(self):
            return self.getToken(TSqlParser.CLUSTERED, 0)

        def INDEX(self):
            return self.getToken(TSqlParser.INDEX, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def ASC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ASC)
            else:
                return self.getToken(TSqlParser.ASC, i)

        def DESC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DESC)
            else:
                return self.getToken(TSqlParser.DESC, i)

        def ONLINE(self):
            return self.getToken(TSqlParser.ONLINE, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def low_priority_lock_wait(self):
            return self.getTypedRuleContext(TSqlParser.Low_priority_lock_waitContext,0)


        def RESUMABLE(self):
            return self.getToken(TSqlParser.RESUMABLE, 0)

        def MAX_DURATION(self):
            return self.getToken(TSqlParser.MAX_DURATION, 0)

        def MINUTES(self):
            return self.getToken(TSqlParser.MINUTES, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_table_index_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_index_option" ):
                listener.enterAlter_table_index_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_index_option" ):
                listener.exitAlter_table_index_option(self)




    def alter_table_index_option(self):

        localctx = TSqlParser.Alter_table_index_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 898, self.RULE_alter_table_index_option)
        self._la = 0 # Token type
        try:
            self.state = 10886
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [676]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10800
                self.match(TSqlParser.PAD_INDEX)
                self.state = 10801
                self.match(TSqlParser.EQUAL)
                self.state = 10802
                self.on_off()
                pass
            elif token in [357]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10803
                self.match(TSqlParser.FILLFACTOR)
                self.state = 10804
                self.match(TSqlParser.EQUAL)
                self.state = 10805
                self.match(TSqlParser.DECIMAL)
                pass
            elif token in [433]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10806
                self.match(TSqlParser.IGNORE_DUP_KEY)
                self.state = 10807
                self.match(TSqlParser.EQUAL)
                self.state = 10808
                self.on_off()
                pass
            elif token in [933]:
                self.enterOuterAlt(localctx, 4)
                self.state = 10809
                self.match(TSqlParser.STATISTICS_NORECOMPUTE)
                self.state = 10810
                self.match(TSqlParser.EQUAL)
                self.state = 10811
                self.on_off()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 5)
                self.state = 10812
                self.match(TSqlParser.ALLOW_ROW_LOCKS)
                self.state = 10813
                self.match(TSqlParser.EQUAL)
                self.state = 10814
                self.on_off()
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 6)
                self.state = 10815
                self.match(TSqlParser.ALLOW_PAGE_LOCKS)
                self.state = 10816
                self.match(TSqlParser.EQUAL)
                self.state = 10817
                self.on_off()
                pass
            elif token in [663]:
                self.enterOuterAlt(localctx, 7)
                self.state = 10818
                self.match(TSqlParser.OPTIMIZE_FOR_SEQUENTIAL_KEY)
                self.state = 10819
                self.match(TSqlParser.EQUAL)
                self.state = 10820
                self.on_off()
                pass
            elif token in [911]:
                self.enterOuterAlt(localctx, 8)
                self.state = 10821
                self.match(TSqlParser.SORT_IN_TEMPDB)
                self.state = 10822
                self.match(TSqlParser.EQUAL)
                self.state = 10823
                self.on_off()
                pass
            elif token in [538]:
                self.enterOuterAlt(localctx, 9)
                self.state = 10824
                self.match(TSqlParser.MAXDOP)
                self.state = 10825
                self.match(TSqlParser.EQUAL)
                self.state = 10826
                localctx.max_degree_of_parallelism = self.match(TSqlParser.DECIMAL)
                pass
            elif token in [223]:
                self.enterOuterAlt(localctx, 10)
                self.state = 10827
                self.match(TSqlParser.DATA_COMPRESSION)
                self.state = 10828
                self.match(TSqlParser.EQUAL)
                self.state = 10829
                _la = self._input.LA(1)
                if not(_la==156 or _la==157 or _la==608 or _la==677 or _la==824):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 10831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==649:
                    self.state = 10830
                    self.on_partitions()


                pass
            elif token in [1078]:
                self.enterOuterAlt(localctx, 11)
                self.state = 10833
                self.match(TSqlParser.XML_COMPRESSION)
                self.state = 10834
                self.match(TSqlParser.EQUAL)
                self.state = 10835
                self.on_off()
                self.state = 10837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==649:
                    self.state = 10836
                    self.on_partitions()


                pass
            elif token in [274]:
                self.enterOuterAlt(localctx, 12)
                self.state = 10839
                self.match(TSqlParser.DISTRIBUTION)
                self.state = 10840
                self.match(TSqlParser.EQUAL)
                self.state = 10841
                self.match(TSqlParser.HASH)
                self.state = 10842
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10843
                self.id_()
                self.state = 10844
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [149]:
                self.enterOuterAlt(localctx, 13)
                self.state = 10846
                self.match(TSqlParser.CLUSTERED)
                self.state = 10847
                self.match(TSqlParser.INDEX)
                self.state = 10848
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10849
                self.id_()
                self.state = 10851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57 or _la==258:
                    self.state = 10850
                    _la = self._input.LA(1)
                    if not(_la==57 or _la==258):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 10853
                    self.match(TSqlParser.COMMA)
                    self.state = 10854
                    self.id_()
                    self.state = 10856
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==57 or _la==258:
                        self.state = 10855
                        _la = self._input.LA(1)
                        if not(_la==57 or _la==258):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 10862
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 10863
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [650]:
                self.enterOuterAlt(localctx, 14)
                self.state = 10865
                self.match(TSqlParser.ONLINE)
                self.state = 10866
                self.match(TSqlParser.EQUAL)
                self.state = 10875
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [649]:
                    self.state = 10867
                    self.match(TSqlParser.ON)
                    self.state = 10872
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1192:
                        self.state = 10868
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 10869
                        self.low_priority_lock_wait()
                        self.state = 10870
                        self.match(TSqlParser.RR_BRACKET)


                    pass
                elif token in [643]:
                    self.state = 10874
                    self.match(TSqlParser.OFF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [807]:
                self.enterOuterAlt(localctx, 15)
                self.state = 10877
                self.match(TSqlParser.RESUMABLE)
                self.state = 10878
                self.match(TSqlParser.EQUAL)
                self.state = 10879
                self.on_off()
                pass
            elif token in [546]:
                self.enterOuterAlt(localctx, 16)
                self.state = 10880
                self.match(TSqlParser.MAX_DURATION)
                self.state = 10881
                self.match(TSqlParser.EQUAL)
                self.state = 10882
                localctx.times = self.match(TSqlParser.DECIMAL)
                self.state = 10884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==569:
                    self.state = 10883
                    self.match(TSqlParser.MINUTES)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_cursorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(TSqlParser.DECLARE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TSqlParser.Cursor_nameContext,0)


        def CURSOR(self):
            return self.getToken(TSqlParser.CURSOR, 0)

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FOR)
            else:
                return self.getToken(TSqlParser.FOR, i)

        def select_statement_standalone(self):
            return self.getTypedRuleContext(TSqlParser.Select_statement_standaloneContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def declare_set_cursor_common(self):
            return self.getTypedRuleContext(TSqlParser.Declare_set_cursor_commonContext,0)


        def SCROLL(self):
            return self.getToken(TSqlParser.SCROLL, 0)

        def SEMI_SENSITIVE(self):
            return self.getToken(TSqlParser.SEMI_SENSITIVE, 0)

        def INSENSITIVE(self):
            return self.getToken(TSqlParser.INSENSITIVE, 0)

        def READ(self):
            return self.getToken(TSqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(TSqlParser.ONLY, 0)

        def UPDATE(self):
            return self.getToken(TSqlParser.UPDATE, 0)

        def OF(self):
            return self.getToken(TSqlParser.OF, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_declare_cursor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_cursor" ):
                listener.enterDeclare_cursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_cursor" ):
                listener.exitDeclare_cursor(self)




    def declare_cursor(self):

        localctx = TSqlParser.Declare_cursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 900, self.RULE_declare_cursor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10888
            self.match(TSqlParser.DECLARE)
            self.state = 10889
            self.cursor_name()
            self.state = 10921
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1474,self._ctx)
            if la_ == 1:
                self.state = 10890
                self.match(TSqlParser.CURSOR)
                self.state = 10900
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1469,self._ctx)
                if la_ == 1:
                    self.state = 10891
                    self.declare_set_cursor_common()
                    self.state = 10898
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==363:
                        self.state = 10892
                        self.match(TSqlParser.FOR)
                        self.state = 10893
                        self.match(TSqlParser.UPDATE)
                        self.state = 10896
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==642:
                            self.state = 10894
                            self.match(TSqlParser.OF)
                            self.state = 10895
                            self.column_name_list()






                pass

            elif la_ == 2:
                self.state = 10903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==456 or _la==870:
                    self.state = 10902
                    _la = self._input.LA(1)
                    if not(_la==456 or _la==870):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==852:
                    self.state = 10905
                    self.match(TSqlParser.SCROLL)


                self.state = 10908
                self.match(TSqlParser.CURSOR)
                self.state = 10909
                self.match(TSqlParser.FOR)
                self.state = 10910
                self.select_statement_standalone()
                self.state = 10919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==363:
                    self.state = 10911
                    self.match(TSqlParser.FOR)
                    self.state = 10917
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [754]:
                        self.state = 10912
                        self.match(TSqlParser.READ)
                        self.state = 10913
                        self.match(TSqlParser.ONLY)
                        pass
                    elif token in [1028]:
                        self.state = 10914
                        self.match(TSqlParser.UPDATE)
                        pass
                    elif token in [642]:
                        self.state = 10915
                        self.match(TSqlParser.OF)
                        self.state = 10916
                        self.column_name_list()
                        pass
                    else:
                        raise NoViableAltException(self)



                pass


            self.state = 10924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1475,self._ctx)
            if la_ == 1:
                self.state = 10923
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_set_cursor_commonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def select_statement_standalone(self):
            return self.getTypedRuleContext(TSqlParser.Select_statement_standaloneContext,0)


        def declare_set_cursor_common_partial(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Declare_set_cursor_common_partialContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Declare_set_cursor_common_partialContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_declare_set_cursor_common

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_set_cursor_common" ):
                listener.enterDeclare_set_cursor_common(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_set_cursor_common" ):
                listener.exitDeclare_set_cursor_common(self)




    def declare_set_cursor_common(self):

        localctx = TSqlParser.Declare_set_cursor_commonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 902, self.RULE_declare_set_cursor_common)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==285 or _la==339 or _la==374 or _la==397 or _la==491 or _la==518 or _la==661 or _la==763 or _la==852 or _la==853 or _la==930 or _la==1014:
                self.state = 10926
                self.declare_set_cursor_common_partial()
                self.state = 10931
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 10932
            self.match(TSqlParser.FOR)
            self.state = 10933
            self.select_statement_standalone()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_set_cursor_common_partialContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(TSqlParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(TSqlParser.GLOBAL, 0)

        def FORWARD_ONLY(self):
            return self.getToken(TSqlParser.FORWARD_ONLY, 0)

        def SCROLL(self):
            return self.getToken(TSqlParser.SCROLL, 0)

        def STATIC(self):
            return self.getToken(TSqlParser.STATIC, 0)

        def KEYSET(self):
            return self.getToken(TSqlParser.KEYSET, 0)

        def DYNAMIC(self):
            return self.getToken(TSqlParser.DYNAMIC, 0)

        def FAST_FORWARD(self):
            return self.getToken(TSqlParser.FAST_FORWARD, 0)

        def READ_ONLY(self):
            return self.getToken(TSqlParser.READ_ONLY, 0)

        def SCROLL_LOCKS(self):
            return self.getToken(TSqlParser.SCROLL_LOCKS, 0)

        def OPTIMISTIC(self):
            return self.getToken(TSqlParser.OPTIMISTIC, 0)

        def TYPE_WARNING(self):
            return self.getToken(TSqlParser.TYPE_WARNING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_declare_set_cursor_common_partial

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_set_cursor_common_partial" ):
                listener.enterDeclare_set_cursor_common_partial(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_set_cursor_common_partial" ):
                listener.exitDeclare_set_cursor_common_partial(self)




    def declare_set_cursor_common_partial(self):

        localctx = TSqlParser.Declare_set_cursor_common_partialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 904, self.RULE_declare_set_cursor_common_partial)
        self._la = 0 # Token type
        try:
            self.state = 10940
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [397, 518]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10935
                _la = self._input.LA(1)
                if not(_la==397 or _la==518):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [374, 852]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10936
                _la = self._input.LA(1)
                if not(_la==374 or _la==852):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [285, 339, 491, 930]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10937
                _la = self._input.LA(1)
                if not(_la==285 or _la==339 or _la==491 or _la==930):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [661, 763, 853]:
                self.enterOuterAlt(localctx, 4)
                self.state = 10938
                _la = self._input.LA(1)
                if not(_la==661 or _la==763 or _la==853):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [1014]:
                self.enterOuterAlt(localctx, 5)
                self.state = 10939
                self.match(TSqlParser.TYPE_WARNING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fetch_cursorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FETCH(self):
            return self.getToken(TSqlParser.FETCH, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TSqlParser.Cursor_nameContext,0)


        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def GLOBAL(self):
            return self.getToken(TSqlParser.GLOBAL, 0)

        def INTO(self):
            return self.getToken(TSqlParser.INTO, 0)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOCAL_ID)
            else:
                return self.getToken(TSqlParser.LOCAL_ID, i)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def NEXT(self):
            return self.getToken(TSqlParser.NEXT, 0)

        def PRIOR(self):
            return self.getToken(TSqlParser.PRIOR, 0)

        def FIRST(self):
            return self.getToken(TSqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(TSqlParser.LAST, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def ABSOLUTE(self):
            return self.getToken(TSqlParser.ABSOLUTE, 0)

        def RELATIVE(self):
            return self.getToken(TSqlParser.RELATIVE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_fetch_cursor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetch_cursor" ):
                listener.enterFetch_cursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetch_cursor" ):
                listener.exitFetch_cursor(self)




    def fetch_cursor(self):

        localctx = TSqlParser.Fetch_cursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 906, self.RULE_fetch_cursor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10942
            self.match(TSqlParser.FETCH)
            self.state = 10952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1479,self._ctx)
            if la_ == 1:
                self.state = 10949
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [595]:
                    self.state = 10943
                    self.match(TSqlParser.NEXT)
                    pass
                elif token in [720]:
                    self.state = 10944
                    self.match(TSqlParser.PRIOR)
                    pass
                elif token in [359]:
                    self.state = 10945
                    self.match(TSqlParser.FIRST)
                    pass
                elif token in [498]:
                    self.state = 10946
                    self.match(TSqlParser.LAST)
                    pass
                elif token in [4, 777]:
                    self.state = 10947
                    _la = self._input.LA(1)
                    if not(_la==4 or _la==777):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 10948
                    self.expression(0)
                    pass
                elif token in [378]:
                    pass
                else:
                    pass
                self.state = 10951
                self.match(TSqlParser.FROM)


            self.state = 10955
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1480,self._ctx)
            if la_ == 1:
                self.state = 10954
                self.match(TSqlParser.GLOBAL)


            self.state = 10957
            self.cursor_name()
            self.state = 10967
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==462:
                self.state = 10958
                self.match(TSqlParser.INTO)
                self.state = 10959
                self.match(TSqlParser.LOCAL_ID)
                self.state = 10964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 10960
                    self.match(TSqlParser.COMMA)
                    self.state = 10961
                    self.match(TSqlParser.LOCAL_ID)
                    self.state = 10966
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 10970
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1483,self._ctx)
            if la_ == 1:
                self.state = 10969
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_specialContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def constant_LOCAL_ID(self):
            return self.getTypedRuleContext(TSqlParser.Constant_LOCAL_IDContext,0)


        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def STATISTICS(self):
            return self.getToken(TSqlParser.STATISTICS, 0)

        def IO(self):
            return self.getToken(TSqlParser.IO, 0)

        def TIME(self):
            return self.getToken(TSqlParser.TIME, 0)

        def XML(self):
            return self.getToken(TSqlParser.XML, 0)

        def PROFILE(self):
            return self.getToken(TSqlParser.PROFILE, 0)

        def ROWCOUNT(self):
            return self.getToken(TSqlParser.ROWCOUNT, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def TEXTSIZE(self):
            return self.getToken(TSqlParser.TEXTSIZE, 0)

        def TRANSACTION(self):
            return self.getToken(TSqlParser.TRANSACTION, 0)

        def ISOLATION(self):
            return self.getToken(TSqlParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(TSqlParser.LEVEL, 0)

        def READ(self):
            return self.getToken(TSqlParser.READ, 0)

        def UNCOMMITTED(self):
            return self.getToken(TSqlParser.UNCOMMITTED, 0)

        def COMMITTED(self):
            return self.getToken(TSqlParser.COMMITTED, 0)

        def REPEATABLE(self):
            return self.getToken(TSqlParser.REPEATABLE, 0)

        def SNAPSHOT(self):
            return self.getToken(TSqlParser.SNAPSHOT, 0)

        def SERIALIZABLE(self):
            return self.getToken(TSqlParser.SERIALIZABLE, 0)

        def IDENTITY_INSERT(self):
            return self.getToken(TSqlParser.IDENTITY_INSERT, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def special_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Special_listContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Special_listContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def modify_method(self):
            return self.getTypedRuleContext(TSqlParser.Modify_methodContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_set_special

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_special" ):
                listener.enterSet_special(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_special" ):
                listener.exitSet_special(self)




    def set_special(self):

        localctx = TSqlParser.Set_specialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 908, self.RULE_set_special)
        self._la = 0 # Token type
        try:
            self.state = 11039
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1493,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10972
                self.match(TSqlParser.SET)
                self.state = 10973
                self.id_()
                self.state = 10977
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                    self.state = 10974
                    self.id_()
                    pass
                elif token in [1166, 1168, 1170, 1171, 1172, 1173, 1191, 1202, 1207]:
                    self.state = 10975
                    self.constant_LOCAL_ID()
                    pass
                elif token in [643, 649]:
                    self.state = 10976
                    self.on_off()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 10980
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1485,self._ctx)
                if la_ == 1:
                    self.state = 10979
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10982
                self.match(TSqlParser.SET)
                self.state = 10983
                self.match(TSqlParser.STATISTICS)
                self.state = 10984
                _la = self._input.LA(1)
                if not(_la==463 or _la==731 or _la==982 or _la==1074):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 10985
                self.on_off()
                self.state = 10987
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1486,self._ctx)
                if la_ == 1:
                    self.state = 10986
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10989
                self.match(TSqlParser.SET)
                self.state = 10990
                self.match(TSqlParser.ROWCOUNT)
                self.state = 10991
                _la = self._input.LA(1)
                if not(_la==1166 or _la==1168):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 10993
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1487,self._ctx)
                if la_ == 1:
                    self.state = 10992
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10995
                self.match(TSqlParser.SET)
                self.state = 10996
                self.match(TSqlParser.TEXTSIZE)
                self.state = 10997
                self.match(TSqlParser.DECIMAL)
                self.state = 10999
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1488,self._ctx)
                if la_ == 1:
                    self.state = 10998
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 11001
                self.match(TSqlParser.SET)
                self.state = 11002
                self.match(TSqlParser.TRANSACTION)
                self.state = 11003
                self.match(TSqlParser.ISOLATION)
                self.state = 11004
                self.match(TSqlParser.LEVEL)
                self.state = 11014
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1489,self._ctx)
                if la_ == 1:
                    self.state = 11005
                    self.match(TSqlParser.READ)
                    self.state = 11006
                    self.match(TSqlParser.UNCOMMITTED)
                    pass

                elif la_ == 2:
                    self.state = 11007
                    self.match(TSqlParser.READ)
                    self.state = 11008
                    self.match(TSqlParser.COMMITTED)
                    pass

                elif la_ == 3:
                    self.state = 11009
                    self.match(TSqlParser.REPEATABLE)
                    self.state = 11010
                    self.match(TSqlParser.READ)
                    pass

                elif la_ == 4:
                    self.state = 11011
                    self.match(TSqlParser.SNAPSHOT)
                    pass

                elif la_ == 5:
                    self.state = 11012
                    self.match(TSqlParser.SERIALIZABLE)
                    pass

                elif la_ == 6:
                    self.state = 11013
                    self.match(TSqlParser.DECIMAL)
                    pass


                self.state = 11017
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1490,self._ctx)
                if la_ == 1:
                    self.state = 11016
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 11019
                self.match(TSqlParser.SET)
                self.state = 11020
                self.match(TSqlParser.IDENTITY_INSERT)
                self.state = 11021
                self.table_name()
                self.state = 11022
                self.on_off()
                self.state = 11024
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1491,self._ctx)
                if la_ == 1:
                    self.state = 11023
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 11026
                self.match(TSqlParser.SET)
                self.state = 11027
                self.special_list()
                self.state = 11032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 11028
                    self.match(TSqlParser.COMMA)
                    self.state = 11029
                    self.special_list()
                    self.state = 11034
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 11035
                self.on_off()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 11037
                self.match(TSqlParser.SET)
                self.state = 11038
                self.modify_method()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Special_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANSI_NULLS(self):
            return self.getToken(TSqlParser.ANSI_NULLS, 0)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(TSqlParser.QUOTED_IDENTIFIER, 0)

        def ANSI_PADDING(self):
            return self.getToken(TSqlParser.ANSI_PADDING, 0)

        def ANSI_WARNINGS(self):
            return self.getToken(TSqlParser.ANSI_WARNINGS, 0)

        def ANSI_DEFAULTS(self):
            return self.getToken(TSqlParser.ANSI_DEFAULTS, 0)

        def ANSI_NULL_DFLT_OFF(self):
            return self.getToken(TSqlParser.ANSI_NULL_DFLT_OFF, 0)

        def ANSI_NULL_DFLT_ON(self):
            return self.getToken(TSqlParser.ANSI_NULL_DFLT_ON, 0)

        def ARITHABORT(self):
            return self.getToken(TSqlParser.ARITHABORT, 0)

        def ARITHIGNORE(self):
            return self.getToken(TSqlParser.ARITHIGNORE, 0)

        def CONCAT_NULL_YIELDS_NULL(self):
            return self.getToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0)

        def CURSOR_CLOSE_ON_COMMIT(self):
            return self.getToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0)

        def FMTONLY(self):
            return self.getToken(TSqlParser.FMTONLY, 0)

        def FORCEPLAN(self):
            return self.getToken(TSqlParser.FORCEPLAN, 0)

        def IMPLICIT_TRANSACTIONS(self):
            return self.getToken(TSqlParser.IMPLICIT_TRANSACTIONS, 0)

        def NOCOUNT(self):
            return self.getToken(TSqlParser.NOCOUNT, 0)

        def NOEXEC(self):
            return self.getToken(TSqlParser.NOEXEC, 0)

        def NUMERIC_ROUNDABORT(self):
            return self.getToken(TSqlParser.NUMERIC_ROUNDABORT, 0)

        def PARSEONLY(self):
            return self.getToken(TSqlParser.PARSEONLY, 0)

        def REMOTE_PROC_TRANSACTIONS(self):
            return self.getToken(TSqlParser.REMOTE_PROC_TRANSACTIONS, 0)

        def SHOWPLAN_ALL(self):
            return self.getToken(TSqlParser.SHOWPLAN_ALL, 0)

        def SHOWPLAN_TEXT(self):
            return self.getToken(TSqlParser.SHOWPLAN_TEXT, 0)

        def SHOWPLAN_XML(self):
            return self.getToken(TSqlParser.SHOWPLAN_XML, 0)

        def XACT_ABORT(self):
            return self.getToken(TSqlParser.XACT_ABORT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_special_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecial_list" ):
                listener.enterSpecial_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecial_list" ):
                listener.exitSpecial_list(self)




    def special_list(self):

        localctx = TSqlParser.Special_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 910, self.RULE_special_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11041
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 54110815493554176) != 0) or _la==171 or _la==212 or _la==361 or _la==366 or _la==440 or ((((_la - 598)) & ~0x3f) == 0 and ((1 << (_la - 598)) & 68719476741) != 0) or _la==685 or _la==743 or _la==779 or ((((_la - 896)) & ~0x3f) == 0 and ((1 << (_la - 896)) & 7) != 0) or _la==1071):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_LOCAL_IDContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(TSqlParser.ConstantContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_constant_LOCAL_ID

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_LOCAL_ID" ):
                listener.enterConstant_LOCAL_ID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_LOCAL_ID" ):
                listener.exitConstant_LOCAL_ID(self)




    def constant_LOCAL_ID(self):

        localctx = TSqlParser.Constant_LOCAL_IDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 912, self.RULE_constant_LOCAL_ID)
        try:
            self.state = 11045
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1168, 1170, 1171, 1172, 1173, 1191, 1202, 1207]:
                self.enterOuterAlt(localctx, 1)
                self.state = 11043
                self.constant()
                pass
            elif token in [1166]:
                self.enterOuterAlt(localctx, 2)
                self.state = 11044
                self.match(TSqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def primitive_expression(self):
            return self.getTypedRuleContext(TSqlParser.Primitive_expressionContext,0)


        def function_call(self):
            return self.getTypedRuleContext(TSqlParser.Function_callContext,0)


        def case_expression(self):
            return self.getTypedRuleContext(TSqlParser.Case_expressionContext,0)


        def full_column_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_column_nameContext,0)


        def bracket_expression(self):
            return self.getTypedRuleContext(TSqlParser.Bracket_expressionContext,0)


        def unary_operator_expression(self):
            return self.getTypedRuleContext(TSqlParser.Unary_operator_expressionContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(TSqlParser.Over_clauseContext,0)


        def DOLLAR_ACTION(self):
            return self.getToken(TSqlParser.DOLLAR_ACTION, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def STAR(self):
            return self.getToken(TSqlParser.STAR, 0)

        def DIVIDE(self):
            return self.getToken(TSqlParser.DIVIDE, 0)

        def MODULE(self):
            return self.getToken(TSqlParser.MODULE, 0)

        def PLUS(self):
            return self.getToken(TSqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(TSqlParser.MINUS, 0)

        def BIT_AND(self):
            return self.getToken(TSqlParser.BIT_AND, 0)

        def BIT_XOR(self):
            return self.getToken(TSqlParser.BIT_XOR, 0)

        def BIT_OR(self):
            return self.getToken(TSqlParser.BIT_OR, 0)

        def DOUBLE_BAR(self):
            return self.getToken(TSqlParser.DOUBLE_BAR, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def value_call(self):
            return self.getTypedRuleContext(TSqlParser.Value_callContext,0)


        def query_call(self):
            return self.getTypedRuleContext(TSqlParser.Query_callContext,0)


        def exist_call(self):
            return self.getTypedRuleContext(TSqlParser.Exist_callContext,0)


        def modify_call(self):
            return self.getTypedRuleContext(TSqlParser.Modify_callContext,0)


        def hierarchyid_call(self):
            return self.getTypedRuleContext(TSqlParser.Hierarchyid_callContext,0)


        def COLLATE(self):
            return self.getToken(TSqlParser.COLLATE, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def time_zone(self):
            return self.getTypedRuleContext(TSqlParser.Time_zoneContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TSqlParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 914
        self.enterRecursionRule(localctx, 914, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11056
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1495,self._ctx)
            if la_ == 1:
                self.state = 11048
                self.primitive_expression()
                pass

            elif la_ == 2:
                self.state = 11049
                self.function_call()
                pass

            elif la_ == 3:
                self.state = 11050
                self.case_expression()
                pass

            elif la_ == 4:
                self.state = 11051
                self.full_column_name()
                pass

            elif la_ == 5:
                self.state = 11052
                self.bracket_expression()
                pass

            elif la_ == 6:
                self.state = 11053
                self.unary_operator_expression()
                pass

            elif la_ == 7:
                self.state = 11054
                self.over_clause()
                pass

            elif la_ == 8:
                self.state = 11055
                self.match(TSqlParser.DOLLAR_ACTION)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 11082
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1498,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 11080
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1497,self._ctx)
                    if la_ == 1:
                        localctx = TSqlParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 11058
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 11059
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 1198)) & ~0x3f) == 0 and ((1 << (_la - 1198)) & 7) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 11060
                        self.expression(6)
                        pass

                    elif la_ == 2:
                        localctx = TSqlParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 11061
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 11062
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 1186)) & ~0x3f) == 0 and ((1 << (_la - 1186)) & 1933313) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 11063
                        self.expression(5)
                        pass

                    elif la_ == 3:
                        localctx = TSqlParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 11064
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 11065
                        self.match(TSqlParser.DOT)
                        self.state = 11070
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [1041, 1043]:
                            self.state = 11066
                            self.value_call()
                            pass
                        elif token in [739, 740]:
                            self.state = 11067
                            self.query_call()
                            pass
                        elif token in [319, 321]:
                            self.state = 11068
                            self.exist_call()
                            pass
                        elif token in [579, 580]:
                            self.state = 11069
                            self.modify_call()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 4:
                        localctx = TSqlParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 11072
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 11073
                        self.match(TSqlParser.DOT)
                        self.state = 11074
                        self.hierarchyid_call()
                        pass

                    elif la_ == 5:
                        localctx = TSqlParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 11075
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 11076
                        self.match(TSqlParser.COLLATE)
                        self.state = 11077
                        self.id_()
                        pass

                    elif la_ == 6:
                        localctx = TSqlParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 11078
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 11079
                        self.time_zone()
                        pass

             
                self.state = 11084
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1498,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLACEHOLDER(self):
            return self.getToken(TSqlParser.PLACEHOLDER, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = TSqlParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 916, self.RULE_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11085
            self.match(TSqlParser.PLACEHOLDER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Time_zoneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_KEYWORD(self):
            return self.getToken(TSqlParser.AT_KEYWORD, 0)

        def TIME(self):
            return self.getToken(TSqlParser.TIME, 0)

        def ZONE(self):
            return self.getToken(TSqlParser.ZONE, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_time_zone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTime_zone" ):
                listener.enterTime_zone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTime_zone" ):
                listener.exitTime_zone(self)




    def time_zone(self):

        localctx = TSqlParser.Time_zoneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 918, self.RULE_time_zone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11087
            self.match(TSqlParser.AT_KEYWORD)
            self.state = 11088
            self.match(TSqlParser.TIME)
            self.state = 11089
            self.match(TSqlParser.ZONE)
            self.state = 11090
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primitive_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def NULL_(self):
            return self.getToken(TSqlParser.NULL_, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def primitive_constant(self):
            return self.getTypedRuleContext(TSqlParser.Primitive_constantContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_primitive_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitive_expression" ):
                listener.enterPrimitive_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitive_expression" ):
                listener.exitPrimitive_expression(self)




    def primitive_expression(self):

        localctx = TSqlParser.Primitive_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 920, self.RULE_primitive_expression)
        try:
            self.state = 11096
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [243]:
                self.enterOuterAlt(localctx, 1)
                self.state = 11092
                self.match(TSqlParser.DEFAULT)
                pass
            elif token in [630]:
                self.enterOuterAlt(localctx, 2)
                self.state = 11093
                self.match(TSqlParser.NULL_)
                pass
            elif token in [1166]:
                self.enterOuterAlt(localctx, 3)
                self.state = 11094
                self.match(TSqlParser.LOCAL_ID)
                pass
            elif token in [1168, 1170, 1171, 1172, 1173, 1191, 1207]:
                self.enterOuterAlt(localctx, 4)
                self.state = 11095
                self.primitive_constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.caseExpr = None # ExpressionContext
            self.elseExpr = None # ExpressionContext

        def CASE(self):
            return self.getToken(TSqlParser.CASE, 0)

        def END(self):
            return self.getToken(TSqlParser.END, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def switch_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Switch_sectionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Switch_sectionContext,i)


        def ELSE(self):
            return self.getToken(TSqlParser.ELSE, 0)

        def switch_search_condition_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Switch_search_condition_sectionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Switch_search_condition_sectionContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_case_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_expression" ):
                listener.enterCase_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_expression" ):
                listener.exitCase_expression(self)




    def case_expression(self):

        localctx = TSqlParser.Case_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 922, self.RULE_case_expression)
        self._la = 0 # Token type
        try:
            self.state = 11123
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1504,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11098
                self.match(TSqlParser.CASE)
                self.state = 11099
                localctx.caseExpr = self.expression(0)
                self.state = 11101 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 11100
                    self.switch_section()
                    self.state = 11103 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1059):
                        break

                self.state = 11107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==287:
                    self.state = 11105
                    self.match(TSqlParser.ELSE)
                    self.state = 11106
                    localctx.elseExpr = self.expression(0)


                self.state = 11109
                self.match(TSqlParser.END)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11111
                self.match(TSqlParser.CASE)
                self.state = 11113 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 11112
                    self.switch_search_condition_section()
                    self.state = 11115 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1059):
                        break

                self.state = 11119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==287:
                    self.state = 11117
                    self.match(TSqlParser.ELSE)
                    self.state = 11118
                    localctx.elseExpr = self.expression(0)


                self.state = 11121
                self.match(TSqlParser.END)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_operator_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def BIT_NOT(self):
            return self.getToken(TSqlParser.BIT_NOT, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def PLUS(self):
            return self.getToken(TSqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(TSqlParser.MINUS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_unary_operator_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator_expression" ):
                listener.enterUnary_operator_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator_expression" ):
                listener.exitUnary_operator_expression(self)




    def unary_operator_expression(self):

        localctx = TSqlParser.Unary_operator_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 924, self.RULE_unary_operator_expression)
        self._la = 0 # Token type
        try:
            self.state = 11129
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1203]:
                self.enterOuterAlt(localctx, 1)
                self.state = 11125
                self.match(TSqlParser.BIT_NOT)
                self.state = 11126
                self.expression(0)
                pass
            elif token in [1201, 1202]:
                self.enterOuterAlt(localctx, 2)
                self.state = 11127
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==1201 or _la==1202):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11128
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bracket_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def subquery(self):
            return self.getTypedRuleContext(TSqlParser.SubqueryContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_bracket_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_expression" ):
                listener.enterBracket_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_expression" ):
                listener.exitBracket_expression(self)




    def bracket_expression(self):

        localctx = TSqlParser.Bracket_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 926, self.RULE_bracket_expression)
        try:
            self.state = 11139
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1506,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11131
                self.match(TSqlParser.LR_BRACKET)
                self.state = 11132
                self.expression(0)
                self.state = 11133
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11135
                self.match(TSqlParser.LR_BRACKET)
                self.state = 11136
                self.subquery()
                self.state = 11137
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(TSqlParser.Select_statementContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)




    def subquery(self):

        localctx = TSqlParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 928, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11141
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._common_table_expression = None # Common_table_expressionContext
            self.ctes = list() # of Common_table_expressionContexts

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Common_table_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_with_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_expression" ):
                listener.enterWith_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_expression" ):
                listener.exitWith_expression(self)




    def with_expression(self):

        localctx = TSqlParser.With_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 930, self.RULE_with_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11143
            self.match(TSqlParser.WITH)
            self.state = 11144
            localctx._common_table_expression = self.common_table_expression()
            localctx.ctes.append(localctx._common_table_expression)
            self.state = 11149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 11145
                self.match(TSqlParser.COMMA)
                self.state = 11146
                localctx._common_table_expression = self.common_table_expression()
                localctx.ctes.append(localctx._common_table_expression)
                self.state = 11151
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expression_name = None # Id_Context
            self.columns = None # Column_name_listContext
            self.cte_query = None # Select_statementContext

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def select_statement(self):
            return self.getTypedRuleContext(TSqlParser.Select_statementContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_common_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expression" ):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expression" ):
                listener.exitCommon_table_expression(self)




    def common_table_expression(self):

        localctx = TSqlParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 932, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11152
            localctx.expression_name = self.id_()
            self.state = 11157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1192:
                self.state = 11153
                self.match(TSqlParser.LR_BRACKET)
                self.state = 11154
                localctx.columns = self.column_name_list()
                self.state = 11155
                self.match(TSqlParser.RR_BRACKET)


            self.state = 11159
            self.match(TSqlParser.AS)
            self.state = 11160
            self.match(TSqlParser.LR_BRACKET)
            self.state = 11161
            localctx.cte_query = self.select_statement()
            self.state = 11162
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.udt_column_name = None # Id_Context
            self.method_name = None # Id_Context

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def full_column_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_column_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(TSqlParser.Assignment_operatorContext,0)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def expression_list_(self):
            return self.getTypedRuleContext(TSqlParser.Expression_list_Context,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_update_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_elem" ):
                listener.enterUpdate_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_elem" ):
                listener.exitUpdate_elem(self)




    def update_elem(self):

        localctx = TSqlParser.Update_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 934, self.RULE_update_elem)
        try:
            self.state = 11189
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1512,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11164
                self.match(TSqlParser.LOCAL_ID)
                self.state = 11165
                self.match(TSqlParser.EQUAL)
                self.state = 11166
                self.full_column_name()
                self.state = 11169
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1174]:
                    self.state = 11167
                    self.match(TSqlParser.EQUAL)
                    pass
                elif token in [1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185]:
                    self.state = 11168
                    self.assignment_operator()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 11171
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11175
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169, 1191]:
                    self.state = 11173
                    self.full_column_name()
                    pass
                elif token in [1166]:
                    self.state = 11174
                    self.match(TSqlParser.LOCAL_ID)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 11179
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1174]:
                    self.state = 11177
                    self.match(TSqlParser.EQUAL)
                    pass
                elif token in [1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185]:
                    self.state = 11178
                    self.assignment_operator()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 11181
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11182
                localctx.udt_column_name = self.id_()
                self.state = 11183
                self.match(TSqlParser.DOT)
                self.state = 11184
                localctx.method_name = self.id_()
                self.state = 11185
                self.match(TSqlParser.LR_BRACKET)
                self.state = 11186
                self.expression_list_()
                self.state = 11187
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_elem_mergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.udt_column_name = None # Id_Context
            self.method_name = None # Id_Context

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def full_column_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_column_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def assignment_operator(self):
            return self.getTypedRuleContext(TSqlParser.Assignment_operatorContext,0)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def expression_list_(self):
            return self.getTypedRuleContext(TSqlParser.Expression_list_Context,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_update_elem_merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_elem_merge" ):
                listener.enterUpdate_elem_merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_elem_merge" ):
                listener.exitUpdate_elem_merge(self)




    def update_elem_merge(self):

        localctx = TSqlParser.Update_elem_mergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 936, self.RULE_update_elem_merge)
        try:
            self.state = 11207
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1515,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11193
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169, 1191]:
                    self.state = 11191
                    self.full_column_name()
                    pass
                elif token in [1166]:
                    self.state = 11192
                    self.match(TSqlParser.LOCAL_ID)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 11197
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1174]:
                    self.state = 11195
                    self.match(TSqlParser.EQUAL)
                    pass
                elif token in [1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185]:
                    self.state = 11196
                    self.assignment_operator()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 11199
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11200
                localctx.udt_column_name = self.id_()
                self.state = 11201
                self.match(TSqlParser.DOT)
                self.state = 11202
                localctx.method_name = self.id_()
                self.state = 11203
                self.match(TSqlParser.LR_BRACKET)
                self.state = 11204
                self.expression_list_()
                self.state = 11205
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Search_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self):
            return self.getTypedRuleContext(TSqlParser.PredicateContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Search_conditionContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOT)
            else:
                return self.getToken(TSqlParser.NOT, i)

        def AND(self):
            return self.getToken(TSqlParser.AND, 0)

        def OR(self):
            return self.getToken(TSqlParser.OR, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_search_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_condition" ):
                listener.enterSearch_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_condition" ):
                listener.exitSearch_condition(self)



    def search_condition(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TSqlParser.Search_conditionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 938
        self.enterRecursionRule(localctx, 938, self.RULE_search_condition, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==614:
                self.state = 11210
                self.match(TSqlParser.NOT)
                self.state = 11215
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 11221
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1517,self._ctx)
            if la_ == 1:
                self.state = 11216
                self.predicate()
                pass

            elif la_ == 2:
                self.state = 11217
                self.match(TSqlParser.LR_BRACKET)
                self.state = 11218
                self.search_condition(0)
                self.state = 11219
                self.match(TSqlParser.RR_BRACKET)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 11231
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1519,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 11229
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1518,self._ctx)
                    if la_ == 1:
                        localctx = TSqlParser.Search_conditionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_search_condition)
                        self.state = 11223
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 11224
                        self.match(TSqlParser.AND)
                        self.state = 11225
                        self.search_condition(3)
                        pass

                    elif la_ == 2:
                        localctx = TSqlParser.Search_conditionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_search_condition)
                        self.state = 11226
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 11227
                        self.match(TSqlParser.OR)
                        self.state = 11228
                        self.search_condition(2)
                        pass

             
                self.state = 11233
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1519,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def subquery(self):
            return self.getTypedRuleContext(TSqlParser.SubqueryContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def freetext_predicate(self):
            return self.getTypedRuleContext(TSqlParser.Freetext_predicateContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def comparison_operator(self):
            return self.getTypedRuleContext(TSqlParser.Comparison_operatorContext,0)


        def MULT_ASSIGN(self):
            return self.getToken(TSqlParser.MULT_ASSIGN, 0)

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def SOME(self):
            return self.getToken(TSqlParser.SOME, 0)

        def ANY(self):
            return self.getToken(TSqlParser.ANY, 0)

        def BETWEEN(self):
            return self.getToken(TSqlParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(TSqlParser.AND, 0)

        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOT)
            else:
                return self.getToken(TSqlParser.NOT, i)

        def IN(self):
            return self.getToken(TSqlParser.IN, 0)

        def expression_list_(self):
            return self.getTypedRuleContext(TSqlParser.Expression_list_Context,0)


        def LIKE(self):
            return self.getToken(TSqlParser.LIKE, 0)

        def ESCAPE(self):
            return self.getToken(TSqlParser.ESCAPE, 0)

        def IS(self):
            return self.getToken(TSqlParser.IS, 0)

        def null_notnull(self):
            return self.getTypedRuleContext(TSqlParser.Null_notnullContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)




    def predicate(self):

        localctx = TSqlParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 940, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 11299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1525,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11234
                self.match(TSqlParser.EXISTS)
                self.state = 11235
                self.match(TSqlParser.LR_BRACKET)
                self.state = 11236
                self.subquery()
                self.state = 11237
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11239
                self.freetext_predicate()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11240
                self.expression(0)
                self.state = 11241
                self.comparison_operator()
                self.state = 11242
                self.expression(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 11244
                self.expression(0)
                self.state = 11245
                self.match(TSqlParser.MULT_ASSIGN)
                self.state = 11246
                self.expression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 11248
                self.expression(0)
                self.state = 11249
                self.comparison_operator()
                self.state = 11250
                _la = self._input.LA(1)
                if not(_la==22 or _la==46 or _la==910):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11251
                self.match(TSqlParser.LR_BRACKET)
                self.state = 11252
                self.subquery()
                self.state = 11253
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 11255
                self.expression(0)
                self.state = 11259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==614:
                    self.state = 11256
                    self.match(TSqlParser.NOT)
                    self.state = 11261
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 11262
                self.match(TSqlParser.BETWEEN)
                self.state = 11263
                self.expression(0)
                self.state = 11264
                self.match(TSqlParser.AND)
                self.state = 11265
                self.expression(0)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 11267
                self.expression(0)
                self.state = 11271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==614:
                    self.state = 11268
                    self.match(TSqlParser.NOT)
                    self.state = 11273
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 11274
                self.match(TSqlParser.IN)
                self.state = 11275
                self.match(TSqlParser.LR_BRACKET)
                self.state = 11278
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1522,self._ctx)
                if la_ == 1:
                    self.state = 11276
                    self.subquery()
                    pass

                elif la_ == 2:
                    self.state = 11277
                    self.expression_list_()
                    pass


                self.state = 11280
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 11282
                self.expression(0)
                self.state = 11286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==614:
                    self.state = 11283
                    self.match(TSqlParser.NOT)
                    self.state = 11288
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 11289
                self.match(TSqlParser.LIKE)
                self.state = 11290
                self.expression(0)
                self.state = 11293
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1524,self._ctx)
                if la_ == 1:
                    self.state = 11291
                    self.match(TSqlParser.ESCAPE)
                    self.state = 11292
                    self.expression(0)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 11295
                self.expression(0)
                self.state = 11296
                self.match(TSqlParser.IS)
                self.state = 11297
                self.null_notnull()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._sql_union = None # Sql_unionContext
            self.unions = list() # of Sql_unionContexts

        def query_specification(self):
            return self.getTypedRuleContext(TSqlParser.Query_specificationContext,0)


        def select_order_by_clause(self):
            return self.getTypedRuleContext(TSqlParser.Select_order_by_clauseContext,0)


        def sql_union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Sql_unionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Sql_unionContext,i)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def query_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Query_expressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Query_expressionContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def UNION(self):
            return self.getToken(TSqlParser.UNION, 0)

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_query_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_expression" ):
                listener.enterQuery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_expression" ):
                listener.exitQuery_expression(self)




    def query_expression(self):

        localctx = TSqlParser.Query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 942, self.RULE_query_expression)
        self._la = 0 # Token type
        try:
            self.state = 11321
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [865]:
                self.enterOuterAlt(localctx, 1)
                self.state = 11301
                self.query_specification()
                self.state = 11303
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1526,self._ctx)
                if la_ == 1:
                    self.state = 11302
                    self.select_order_by_clause()


                self.state = 11308
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1527,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 11305
                        localctx._sql_union = self.sql_union()
                        localctx.unions.append(localctx._sql_union) 
                    self.state = 11310
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1527,self._ctx)

                pass
            elif token in [1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 11311
                self.match(TSqlParser.LR_BRACKET)
                self.state = 11312
                self.query_expression()
                self.state = 11313
                self.match(TSqlParser.RR_BRACKET)
                self.state = 11319
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1529,self._ctx)
                if la_ == 1:
                    self.state = 11314
                    self.match(TSqlParser.UNION)
                    self.state = 11316
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==22:
                        self.state = 11315
                        self.match(TSqlParser.ALL)


                    self.state = 11318
                    self.query_expression()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_unionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.spec = None # Query_specificationContext
            self.op = None # Query_expressionContext

        def UNION(self):
            return self.getToken(TSqlParser.UNION, 0)

        def EXCEPT(self):
            return self.getToken(TSqlParser.EXCEPT, 0)

        def INTERSECT(self):
            return self.getToken(TSqlParser.INTERSECT, 0)

        def query_specification(self):
            return self.getTypedRuleContext(TSqlParser.Query_specificationContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def query_expression(self):
            return self.getTypedRuleContext(TSqlParser.Query_expressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_sql_union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_union" ):
                listener.enterSql_union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_union" ):
                listener.exitSql_union(self)




    def sql_union(self):

        localctx = TSqlParser.Sql_unionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 944, self.RULE_sql_union)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11329
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1019]:
                self.state = 11323
                self.match(TSqlParser.UNION)
                self.state = 11325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==22:
                    self.state = 11324
                    self.match(TSqlParser.ALL)


                pass
            elif token in [314]:
                self.state = 11327
                self.match(TSqlParser.EXCEPT)
                pass
            elif token in [461]:
                self.state = 11328
                self.match(TSqlParser.INTERSECT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 11336
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [865]:
                self.state = 11331
                localctx.spec = self.query_specification()
                pass
            elif token in [1192]:
                self.state = 11332
                self.match(TSqlParser.LR_BRACKET)
                self.state = 11333
                localctx.op = self.query_expression()
                self.state = 11334
                self.match(TSqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.allOrDistinct = None # Token
            self.top = None # Top_clauseContext
            self.columns = None # Select_listContext
            self.into = None # Table_nameContext
            self.from_label = None # Table_sourcesContext
            self.where = None # Search_conditionContext
            self.groupByAll = None # Token
            self._group_by_item = None # Group_by_itemContext
            self.groupBys = list() # of Group_by_itemContexts
            self._grouping_sets_item = None # Grouping_sets_itemContext
            self.groupSets = list() # of Grouping_sets_itemContexts
            self.having = None # Search_conditionContext

        def SELECT(self):
            return self.getToken(TSqlParser.SELECT, 0)

        def select_list(self):
            return self.getTypedRuleContext(TSqlParser.Select_listContext,0)


        def INTO(self):
            return self.getToken(TSqlParser.INTO, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def WHERE(self):
            return self.getToken(TSqlParser.WHERE, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def HAVING(self):
            return self.getToken(TSqlParser.HAVING, 0)

        def top_clause(self):
            return self.getTypedRuleContext(TSqlParser.Top_clauseContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def table_sources(self):
            return self.getTypedRuleContext(TSqlParser.Table_sourcesContext,0)


        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Search_conditionContext,i)


        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ALL)
            else:
                return self.getToken(TSqlParser.ALL, i)

        def DISTINCT(self):
            return self.getToken(TSqlParser.DISTINCT, 0)

        def GROUPING(self):
            return self.getToken(TSqlParser.GROUPING, 0)

        def SETS(self):
            return self.getToken(TSqlParser.SETS, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def grouping_sets_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Grouping_sets_itemContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Grouping_sets_itemContext,i)


        def group_by_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Group_by_itemContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Group_by_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_query_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_specification" ):
                listener.enterQuery_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_specification" ):
                listener.exitQuery_specification(self)




    def query_specification(self):

        localctx = TSqlParser.Query_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 946, self.RULE_query_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11338
            self.match(TSqlParser.SELECT)
            self.state = 11340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22 or _la==272:
                self.state = 11339
                localctx.allOrDistinct = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==22 or _la==272):
                    localctx.allOrDistinct = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 11343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==987:
                self.state = 11342
                localctx.top = self.top_clause()


            self.state = 11345
            localctx.columns = self.select_list()
            self.state = 11348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==462:
                self.state = 11346
                self.match(TSqlParser.INTO)
                self.state = 11347
                localctx.into = self.table_name()


            self.state = 11352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==378:
                self.state = 11350
                self.match(TSqlParser.FROM)
                self.state = 11351
                localctx.from_label = self.table_sources()


            self.state = 11356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1060:
                self.state = 11354
                self.match(TSqlParser.WHERE)
                self.state = 11355
                localctx.where = self.search_condition(0)


            self.state = 11386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==403:
                self.state = 11358
                self.match(TSqlParser.GROUP)
                self.state = 11359
                self.match(TSqlParser.BY)
                self.state = 11384
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1542,self._ctx)
                if la_ == 1:
                    self.state = 11361
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==22:
                        self.state = 11360
                        localctx.groupByAll = self.match(TSqlParser.ALL)


                    self.state = 11363
                    localctx._group_by_item = self.group_by_item()
                    localctx.groupBys.append(localctx._group_by_item)
                    self.state = 11368
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1194:
                        self.state = 11364
                        self.match(TSqlParser.COMMA)
                        self.state = 11365
                        localctx._group_by_item = self.group_by_item()
                        localctx.groupBys.append(localctx._group_by_item)
                        self.state = 11370
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 11371
                    self.match(TSqlParser.GROUPING)
                    self.state = 11372
                    self.match(TSqlParser.SETS)
                    self.state = 11373
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 11374
                    localctx._grouping_sets_item = self.grouping_sets_item()
                    localctx.groupSets.append(localctx._grouping_sets_item)
                    self.state = 11379
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1194:
                        self.state = 11375
                        self.match(TSqlParser.COMMA)
                        self.state = 11376
                        localctx._grouping_sets_item = self.grouping_sets_item()
                        localctx.groupSets.append(localctx._grouping_sets_item)
                        self.state = 11381
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 11382
                    self.match(TSqlParser.RR_BRACKET)
                    pass




            self.state = 11390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==412:
                self.state = 11388
                self.match(TSqlParser.HAVING)
                self.state = 11389
                localctx.having = self.search_condition(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(TSqlParser.TOP, 0)

        def top_percent(self):
            return self.getTypedRuleContext(TSqlParser.Top_percentContext,0)


        def top_count(self):
            return self.getTypedRuleContext(TSqlParser.Top_countContext,0)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def TIES(self):
            return self.getToken(TSqlParser.TIES, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_top_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_clause" ):
                listener.enterTop_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_clause" ):
                listener.exitTop_clause(self)




    def top_clause(self):

        localctx = TSqlParser.Top_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 948, self.RULE_top_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11392
            self.match(TSqlParser.TOP)
            self.state = 11395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1545,self._ctx)
            if la_ == 1:
                self.state = 11393
                self.top_percent()
                pass

            elif la_ == 2:
                self.state = 11394
                self.top_count()
                pass


            self.state = 11399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1063:
                self.state = 11397
                self.match(TSqlParser.WITH)
                self.state = 11398
                self.match(TSqlParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_percentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.percent_constant = None # Token
            self.topper_expression = None # ExpressionContext

        def PERCENT(self):
            return self.getToken(TSqlParser.PERCENT, 0)

        def REAL(self):
            return self.getToken(TSqlParser.REAL, 0)

        def FLOAT(self):
            return self.getToken(TSqlParser.FLOAT, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_top_percent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_percent" ):
                listener.enterTop_percent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_percent" ):
                listener.exitTop_percent(self)




    def top_percent(self):

        localctx = TSqlParser.Top_percentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 950, self.RULE_top_percent)
        self._la = 0 # Token type
        try:
            self.state = 11408
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1168, 1172, 1173]:
                self.enterOuterAlt(localctx, 1)
                self.state = 11401
                localctx.percent_constant = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 1168)) & ~0x3f) == 0 and ((1 << (_la - 1168)) & 49) != 0)):
                    localctx.percent_constant = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11402
                self.match(TSqlParser.PERCENT)
                pass
            elif token in [1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 11403
                self.match(TSqlParser.LR_BRACKET)
                self.state = 11404
                localctx.topper_expression = self.expression(0)
                self.state = 11405
                self.match(TSqlParser.RR_BRACKET)
                self.state = 11406
                self.match(TSqlParser.PERCENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_countContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.count_constant = None # Token
            self.topcount_expression = None # ExpressionContext

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_top_count

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_count" ):
                listener.enterTop_count(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_count" ):
                listener.exitTop_count(self)




    def top_count(self):

        localctx = TSqlParser.Top_countContext(self, self._ctx, self.state)
        self.enterRule(localctx, 952, self.RULE_top_count)
        try:
            self.state = 11415
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1168]:
                self.enterOuterAlt(localctx, 1)
                self.state = 11410
                localctx.count_constant = self.match(TSqlParser.DECIMAL)
                pass
            elif token in [1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 11411
                self.match(TSqlParser.LR_BRACKET)
                self.state = 11412
                localctx.topcount_expression = self.expression(0)
                self.state = 11413
                self.match(TSqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._order_by_expression = None # Order_by_expressionContext
            self.order_bys = list() # of Order_by_expressionContexts

        def ORDER(self):
            return self.getToken(TSqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def order_by_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Order_by_expressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Order_by_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)




    def order_by_clause(self):

        localctx = TSqlParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 954, self.RULE_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11417
            self.match(TSqlParser.ORDER)
            self.state = 11418
            self.match(TSqlParser.BY)
            self.state = 11419
            localctx._order_by_expression = self.order_by_expression()
            localctx.order_bys.append(localctx._order_by_expression)
            self.state = 11424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 11420
                self.match(TSqlParser.COMMA)
                self.state = 11421
                localctx._order_by_expression = self.order_by_expression()
                localctx.order_bys.append(localctx._order_by_expression)
                self.state = 11426
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.offset_exp = None # ExpressionContext
            self.offset_rows = None # Token
            self.fetch_offset = None # Token
            self.fetch_exp = None # ExpressionContext
            self.fetch_rows = None # Token

        def order_by_clause(self):
            return self.getTypedRuleContext(TSqlParser.Order_by_clauseContext,0)


        def OFFSET(self):
            return self.getToken(TSqlParser.OFFSET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ROW)
            else:
                return self.getToken(TSqlParser.ROW, i)

        def ROWS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ROWS)
            else:
                return self.getToken(TSqlParser.ROWS, i)

        def FETCH(self):
            return self.getToken(TSqlParser.FETCH, 0)

        def ONLY(self):
            return self.getToken(TSqlParser.ONLY, 0)

        def FIRST(self):
            return self.getToken(TSqlParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(TSqlParser.NEXT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_select_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_order_by_clause" ):
                listener.enterSelect_order_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_order_by_clause" ):
                listener.exitSelect_order_by_clause(self)




    def select_order_by_clause(self):

        localctx = TSqlParser.Select_order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 956, self.RULE_select_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11427
            self.order_by_clause()
            self.state = 11439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1551,self._ctx)
            if la_ == 1:
                self.state = 11428
                self.match(TSqlParser.OFFSET)
                self.state = 11429
                localctx.offset_exp = self.expression(0)
                self.state = 11430
                localctx.offset_rows = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==824 or _la==830):
                    localctx.offset_rows = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11437
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1550,self._ctx)
                if la_ == 1:
                    self.state = 11431
                    self.match(TSqlParser.FETCH)
                    self.state = 11432
                    localctx.fetch_offset = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==359 or _la==595):
                        localctx.fetch_offset = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 11433
                    localctx.fetch_exp = self.expression(0)
                    self.state = 11434
                    localctx.fetch_rows = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==824 or _la==830):
                        localctx.fetch_rows = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 11435
                    self.match(TSqlParser.ONLY)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def BROWSE(self):
            return self.getToken(TSqlParser.BROWSE, 0)

        def XML(self):
            return self.getToken(TSqlParser.XML, 0)

        def RAW(self):
            return self.getToken(TSqlParser.RAW, 0)

        def AUTO(self):
            return self.getToken(TSqlParser.AUTO, 0)

        def xml_common_directives(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Xml_common_directivesContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Xml_common_directivesContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def ELEMENTS(self):
            return self.getToken(TSqlParser.ELEMENTS, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def XMLDATA(self):
            return self.getToken(TSqlParser.XMLDATA, 0)

        def XMLSCHEMA(self):
            return self.getToken(TSqlParser.XMLSCHEMA, 0)

        def XSINIL(self):
            return self.getToken(TSqlParser.XSINIL, 0)

        def ABSENT(self):
            return self.getToken(TSqlParser.ABSENT, 0)

        def EXPLICIT(self):
            return self.getToken(TSqlParser.EXPLICIT, 0)

        def PATH(self):
            return self.getToken(TSqlParser.PATH, 0)

        def JSON(self):
            return self.getToken(TSqlParser.JSON, 0)

        def ROOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ROOT)
            else:
                return self.getToken(TSqlParser.ROOT, i)

        def INCLUDE_NULL_VALUES(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.INCLUDE_NULL_VALUES)
            else:
                return self.getToken(TSqlParser.INCLUDE_NULL_VALUES, i)

        def WITHOUT_ARRAY_WRAPPER(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.WITHOUT_ARRAY_WRAPPER)
            else:
                return self.getToken(TSqlParser.WITHOUT_ARRAY_WRAPPER, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_for_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_clause" ):
                listener.enterFor_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_clause" ):
                listener.exitFor_clause(self)




    def for_clause(self):

        localctx = TSqlParser.For_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 958, self.RULE_for_clause)
        self._la = 0 # Token type
        try:
            self.state = 11530
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1568,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11441
                self.match(TSqlParser.FOR)
                self.state = 11442
                self.match(TSqlParser.BROWSE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11443
                self.match(TSqlParser.FOR)
                self.state = 11444
                self.match(TSqlParser.XML)
                self.state = 11452
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [750]:
                    self.state = 11445
                    self.match(TSqlParser.RAW)
                    self.state = 11449
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1552,self._ctx)
                    if la_ == 1:
                        self.state = 11446
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 11447
                        self.match(TSqlParser.STRING)
                        self.state = 11448
                        self.match(TSqlParser.RR_BRACKET)


                    pass
                elif token in [69]:
                    self.state = 11451
                    self.match(TSqlParser.AUTO)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 11457
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1554,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 11454
                        self.xml_common_directives() 
                    self.state = 11459
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1554,self._ctx)

                self.state = 11470
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1557,self._ctx)
                if la_ == 1:
                    self.state = 11460
                    self.match(TSqlParser.COMMA)
                    self.state = 11468
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1075]:
                        self.state = 11461
                        self.match(TSqlParser.XMLDATA)
                        pass
                    elif token in [1077]:
                        self.state = 11462
                        self.match(TSqlParser.XMLSCHEMA)
                        self.state = 11466
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1555,self._ctx)
                        if la_ == 1:
                            self.state = 11463
                            self.match(TSqlParser.LR_BRACKET)
                            self.state = 11464
                            self.match(TSqlParser.STRING)
                            self.state = 11465
                            self.match(TSqlParser.RR_BRACKET)


                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 11477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 11472
                    self.match(TSqlParser.COMMA)
                    self.state = 11473
                    self.match(TSqlParser.ELEMENTS)
                    self.state = 11475
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1558,self._ctx)
                    if la_ == 1:
                        self.state = 11474
                        _la = self._input.LA(1)
                        if not(_la==3 or _la==1079):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()




                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11479
                self.match(TSqlParser.FOR)
                self.state = 11480
                self.match(TSqlParser.XML)
                self.state = 11481
                self.match(TSqlParser.EXPLICIT)
                self.state = 11485
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1560,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 11482
                        self.xml_common_directives() 
                    self.state = 11487
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1560,self._ctx)

                self.state = 11490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 11488
                    self.match(TSqlParser.COMMA)
                    self.state = 11489
                    self.match(TSqlParser.XMLDATA)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 11492
                self.match(TSqlParser.FOR)
                self.state = 11493
                self.match(TSqlParser.XML)
                self.state = 11494
                self.match(TSqlParser.PATH)
                self.state = 11498
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1562,self._ctx)
                if la_ == 1:
                    self.state = 11495
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 11496
                    self.match(TSqlParser.STRING)
                    self.state = 11497
                    self.match(TSqlParser.RR_BRACKET)


                self.state = 11503
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1563,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 11500
                        self.xml_common_directives() 
                    self.state = 11505
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1563,self._ctx)

                self.state = 11511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 11506
                    self.match(TSqlParser.COMMA)
                    self.state = 11507
                    self.match(TSqlParser.ELEMENTS)
                    self.state = 11509
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1564,self._ctx)
                    if la_ == 1:
                        self.state = 11508
                        _la = self._input.LA(1)
                        if not(_la==3 or _la==1079):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()




                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 11513
                self.match(TSqlParser.FOR)
                self.state = 11514
                self.match(TSqlParser.JSON)
                self.state = 11515
                _la = self._input.LA(1)
                if not(_la==69 or _la==691):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 11516
                    self.match(TSqlParser.COMMA)
                    self.state = 11523
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [821]:
                        self.state = 11517
                        self.match(TSqlParser.ROOT)

                        self.state = 11518
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 11519
                        self.match(TSqlParser.STRING)
                        self.state = 11520
                        self.match(TSqlParser.RR_BRACKET)
                        pass
                    elif token in [444]:
                        self.state = 11521
                        self.match(TSqlParser.INCLUDE_NULL_VALUES)
                        pass
                    elif token in [1066]:
                        self.state = 11522
                        self.match(TSqlParser.WITHOUT_ARRAY_WRAPPER)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 11529
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_common_directivesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def BINARY_KEYWORD(self):
            return self.getToken(TSqlParser.BINARY_KEYWORD, 0)

        def BASE64(self):
            return self.getToken(TSqlParser.BASE64, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def ROOT(self):
            return self.getToken(TSqlParser.ROOT, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_xml_common_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_common_directives" ):
                listener.enterXml_common_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_common_directives" ):
                listener.exitXml_common_directives(self)




    def xml_common_directives(self):

        localctx = TSqlParser.Xml_common_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 960, self.RULE_xml_common_directives)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11532
            self.match(TSqlParser.COMMA)
            self.state = 11542
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [95]:
                self.state = 11533
                self.match(TSqlParser.BINARY_KEYWORD)
                self.state = 11534
                self.match(TSqlParser.BASE64)
                pass
            elif token in [1010]:
                self.state = 11535
                self.match(TSqlParser.TYPE)
                pass
            elif token in [821]:
                self.state = 11536
                self.match(TSqlParser.ROOT)
                self.state = 11540
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1569,self._ctx)
                if la_ == 1:
                    self.state = 11537
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 11538
                    self.match(TSqlParser.STRING)
                    self.state = 11539
                    self.match(TSqlParser.RR_BRACKET)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order_by = None # ExpressionContext
            self.ascending = None # Token
            self.descending = None # Token

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(TSqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(TSqlParser.DESC, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_order_by_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expression" ):
                listener.enterOrder_by_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expression" ):
                listener.exitOrder_by_expression(self)




    def order_by_expression(self):

        localctx = TSqlParser.Order_by_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 962, self.RULE_order_by_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11544
            localctx.order_by = self.expression(0)
            self.state = 11547
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.state = 11545
                localctx.ascending = self.match(TSqlParser.ASC)
                pass
            elif token in [258]:
                self.state = 11546
                localctx.descending = self.match(TSqlParser.DESC)
                pass
            elif token in [-1, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 653, 655, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169, 1187, 1192, 1193, 1194, 1195]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_sets_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._group_by_item = None # Group_by_itemContext
            self.groupSetItems = list() # of Group_by_itemContexts

        def group_by_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Group_by_itemContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Group_by_itemContext,i)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_grouping_sets_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_item" ):
                listener.enterGrouping_sets_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_item" ):
                listener.exitGrouping_sets_item(self)




    def grouping_sets_item(self):

        localctx = TSqlParser.Grouping_sets_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 964, self.RULE_grouping_sets_item)
        try:
            self.state = 11565
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1575,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11550
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1572,self._ctx)
                if la_ == 1:
                    self.state = 11549
                    self.match(TSqlParser.LR_BRACKET)


                self.state = 11552
                localctx._group_by_item = self.group_by_item()
                localctx.groupSetItems.append(localctx._group_by_item)
                self.state = 11557
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1573,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 11553
                        self.match(TSqlParser.COMMA)
                        self.state = 11554
                        localctx._group_by_item = self.group_by_item()
                        localctx.groupSetItems.append(localctx._group_by_item) 
                    self.state = 11559
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1573,self._ctx)

                self.state = 11561
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1574,self._ctx)
                if la_ == 1:
                    self.state = 11560
                    self.match(TSqlParser.RR_BRACKET)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11563
                self.match(TSqlParser.LR_BRACKET)
                self.state = 11564
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_group_by_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_item" ):
                listener.enterGroup_by_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_item" ):
                listener.exitGroup_by_item(self)




    def group_by_item(self):

        localctx = TSqlParser.Group_by_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 966, self.RULE_group_by_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11567
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Option_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._option = None # OptionContext
            self.options = list() # of OptionContexts

        def OPTION(self):
            return self.getToken(TSqlParser.OPTION, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.OptionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.OptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_option_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOption_clause" ):
                listener.enterOption_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOption_clause" ):
                listener.exitOption_clause(self)




    def option_clause(self):

        localctx = TSqlParser.Option_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 968, self.RULE_option_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11569
            self.match(TSqlParser.OPTION)
            self.state = 11570
            self.match(TSqlParser.LR_BRACKET)
            self.state = 11571
            localctx._option = self.option()
            localctx.options.append(localctx._option)
            self.state = 11576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 11572
                self.match(TSqlParser.COMMA)
                self.state = 11573
                localctx._option = self.option()
                localctx.options.append(localctx._option)
                self.state = 11578
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 11579
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.number_rows = None # Token
            self.number_of_processors = None # Token
            self.number_recursion = None # Token

        def FAST(self):
            return self.getToken(TSqlParser.FAST, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def HASH(self):
            return self.getToken(TSqlParser.HASH, 0)

        def ORDER(self):
            return self.getToken(TSqlParser.ORDER, 0)

        def UNION(self):
            return self.getToken(TSqlParser.UNION, 0)

        def MERGE(self):
            return self.getToken(TSqlParser.MERGE, 0)

        def CONCAT(self):
            return self.getToken(TSqlParser.CONCAT, 0)

        def JOIN(self):
            return self.getToken(TSqlParser.JOIN, 0)

        def LOOP(self):
            return self.getToken(TSqlParser.LOOP, 0)

        def EXPAND(self):
            return self.getToken(TSqlParser.EXPAND, 0)

        def VIEWS(self):
            return self.getToken(TSqlParser.VIEWS, 0)

        def FORCE(self):
            return self.getToken(TSqlParser.FORCE, 0)

        def IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX(self):
            return self.getToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)

        def KEEP(self):
            return self.getToken(TSqlParser.KEEP, 0)

        def PLAN(self):
            return self.getToken(TSqlParser.PLAN, 0)

        def KEEPFIXED(self):
            return self.getToken(TSqlParser.KEEPFIXED, 0)

        def MAXDOP(self):
            return self.getToken(TSqlParser.MAXDOP, 0)

        def MAXRECURSION(self):
            return self.getToken(TSqlParser.MAXRECURSION, 0)

        def OPTIMIZE(self):
            return self.getToken(TSqlParser.OPTIMIZE, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def optimize_for_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Optimize_for_argContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Optimize_for_argContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def UNKNOWN(self):
            return self.getToken(TSqlParser.UNKNOWN, 0)

        def PARAMETERIZATION(self):
            return self.getToken(TSqlParser.PARAMETERIZATION, 0)

        def SIMPLE(self):
            return self.getToken(TSqlParser.SIMPLE, 0)

        def FORCED(self):
            return self.getToken(TSqlParser.FORCED, 0)

        def RECOMPILE(self):
            return self.getToken(TSqlParser.RECOMPILE, 0)

        def ROBUST(self):
            return self.getToken(TSqlParser.ROBUST, 0)

        def USE(self):
            return self.getToken(TSqlParser.USE, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOption" ):
                listener.enterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOption" ):
                listener.exitOption(self)




    def option(self):

        localctx = TSqlParser.OptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 970, self.RULE_option)
        self._la = 0 # Token type
        try:
            self.state = 11626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1578,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11581
                self.match(TSqlParser.FAST)
                self.state = 11582
                localctx.number_rows = self.match(TSqlParser.DECIMAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11583
                _la = self._input.LA(1)
                if not(_la==408 or _la==666):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11584
                self.match(TSqlParser.GROUP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11585
                _la = self._input.LA(1)
                if not(_la==170 or _la==408 or _la==564):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11586
                self.match(TSqlParser.UNION)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 11587
                _la = self._input.LA(1)
                if not(_la==408 or _la==526 or _la==564):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11588
                self.match(TSqlParser.JOIN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 11589
                self.match(TSqlParser.EXPAND)
                self.state = 11590
                self.match(TSqlParser.VIEWS)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 11591
                self.match(TSqlParser.FORCE)
                self.state = 11592
                self.match(TSqlParser.ORDER)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 11593
                self.match(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 11594
                self.match(TSqlParser.KEEP)
                self.state = 11595
                self.match(TSqlParser.PLAN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 11596
                self.match(TSqlParser.KEEPFIXED)
                self.state = 11597
                self.match(TSqlParser.PLAN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 11598
                self.match(TSqlParser.MAXDOP)
                self.state = 11599
                localctx.number_of_processors = self.match(TSqlParser.DECIMAL)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 11600
                self.match(TSqlParser.MAXRECURSION)
                self.state = 11601
                localctx.number_recursion = self.match(TSqlParser.DECIMAL)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 11602
                self.match(TSqlParser.OPTIMIZE)
                self.state = 11603
                self.match(TSqlParser.FOR)
                self.state = 11604
                self.match(TSqlParser.LR_BRACKET)
                self.state = 11605
                self.optimize_for_arg()
                self.state = 11610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 11606
                    self.match(TSqlParser.COMMA)
                    self.state = 11607
                    self.optimize_for_arg()
                    self.state = 11612
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 11613
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 11615
                self.match(TSqlParser.OPTIMIZE)
                self.state = 11616
                self.match(TSqlParser.FOR)
                self.state = 11617
                self.match(TSqlParser.UNKNOWN)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 11618
                self.match(TSqlParser.PARAMETERIZATION)
                self.state = 11619
                _la = self._input.LA(1)
                if not(_la==365 or _la==903):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 11620
                self.match(TSqlParser.RECOMPILE)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 11621
                self.match(TSqlParser.ROBUST)
                self.state = 11622
                self.match(TSqlParser.PLAN)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 11623
                self.match(TSqlParser.USE)
                self.state = 11624
                self.match(TSqlParser.PLAN)
                self.state = 11625
                self.match(TSqlParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Optimize_for_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def UNKNOWN(self):
            return self.getToken(TSqlParser.UNKNOWN, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def constant(self):
            return self.getTypedRuleContext(TSqlParser.ConstantContext,0)


        def NULL_(self):
            return self.getToken(TSqlParser.NULL_, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_optimize_for_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptimize_for_arg" ):
                listener.enterOptimize_for_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptimize_for_arg" ):
                listener.exitOptimize_for_arg(self)




    def optimize_for_arg(self):

        localctx = TSqlParser.Optimize_for_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 972, self.RULE_optimize_for_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11628
            self.match(TSqlParser.LOCAL_ID)
            self.state = 11635
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1021]:
                self.state = 11629
                self.match(TSqlParser.UNKNOWN)
                pass
            elif token in [1174]:
                self.state = 11630
                self.match(TSqlParser.EQUAL)
                self.state = 11633
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1168, 1170, 1171, 1172, 1173, 1191, 1202, 1207]:
                    self.state = 11631
                    self.constant()
                    pass
                elif token in [630]:
                    self.state = 11632
                    self.match(TSqlParser.NULL_)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._select_list_elem = None # Select_list_elemContext
            self.selectElement = list() # of Select_list_elemContexts

        def select_list_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Select_list_elemContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Select_list_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)




    def select_list(self):

        localctx = TSqlParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 974, self.RULE_select_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11637
            localctx._select_list_elem = self.select_list_elem()
            localctx.selectElement.append(localctx._select_list_elem)
            self.state = 11642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 11638
                self.match(TSqlParser.COMMA)
                self.state = 11639
                localctx._select_list_elem = self.select_list_elem()
                localctx.selectElement.append(localctx._select_list_elem)
                self.state = 11644
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Udt_method_argumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._execute_var_string = None # Execute_var_stringContext
            self.argument = list() # of Execute_var_stringContexts

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def execute_var_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Execute_var_stringContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Execute_var_stringContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_udt_method_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdt_method_arguments" ):
                listener.enterUdt_method_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdt_method_arguments" ):
                listener.exitUdt_method_arguments(self)




    def udt_method_arguments(self):

        localctx = TSqlParser.Udt_method_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 976, self.RULE_udt_method_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11645
            self.match(TSqlParser.LR_BRACKET)
            self.state = 11646
            localctx._execute_var_string = self.execute_var_string()
            localctx.argument.append(localctx._execute_var_string)
            self.state = 11651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 11647
                self.match(TSqlParser.COMMA)
                self.state = 11648
                localctx._execute_var_string = self.execute_var_string()
                localctx.argument.append(localctx._execute_var_string)
                self.state = 11653
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 11654
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsteriskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(TSqlParser.STAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def INSERTED(self):
            return self.getToken(TSqlParser.INSERTED, 0)

        def DELETED(self):
            return self.getToken(TSqlParser.DELETED, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_asterisk

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsterisk" ):
                listener.enterAsterisk(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsterisk" ):
                listener.exitAsterisk(self)




    def asterisk(self):

        localctx = TSqlParser.AsteriskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 978, self.RULE_asterisk)
        self._la = 0 # Token type
        try:
            self.state = 11665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1584,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6845834611130385) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4691064178111676937) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8067776519934725599) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387491794949) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714895912701) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755875440852549633) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873769796032868641) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510937462965505) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799299309863) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -651161675377934355) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -387309693044787745) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689521) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906573) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 171) != 0):
                    self.state = 11656
                    self.table_name()
                    self.state = 11657
                    self.match(TSqlParser.DOT)


                self.state = 11661
                self.match(TSqlParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11662
                _la = self._input.LA(1)
                if not(_la==253 or _la==458):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11663
                self.match(TSqlParser.DOT)
                self.state = 11664
                self.match(TSqlParser.STAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Udt_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.udt_column_name = None # Id_Context
            self.non_static_attr = None # Id_Context
            self.static_attr = None # Id_Context

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def udt_method_arguments(self):
            return self.getTypedRuleContext(TSqlParser.Udt_method_argumentsContext,0)


        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def as_column_alias(self):
            return self.getTypedRuleContext(TSqlParser.As_column_aliasContext,0)


        def DOUBLE_COLON(self):
            return self.getToken(TSqlParser.DOUBLE_COLON, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_udt_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdt_elem" ):
                listener.enterUdt_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdt_elem" ):
                listener.exitUdt_elem(self)




    def udt_elem(self):

        localctx = TSqlParser.Udt_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 980, self.RULE_udt_elem)
        try:
            self.state = 11683
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1588,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11667
                localctx.udt_column_name = self.id_()
                self.state = 11668
                self.match(TSqlParser.DOT)
                self.state = 11669
                localctx.non_static_attr = self.id_()
                self.state = 11670
                self.udt_method_arguments()
                self.state = 11672
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1585,self._ctx)
                if la_ == 1:
                    self.state = 11671
                    self.as_column_alias()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11674
                localctx.udt_column_name = self.id_()
                self.state = 11675
                self.match(TSqlParser.DOUBLE_COLON)
                self.state = 11676
                localctx.static_attr = self.id_()
                self.state = 11678
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1586,self._ctx)
                if la_ == 1:
                    self.state = 11677
                    self.udt_method_arguments()


                self.state = 11681
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1587,self._ctx)
                if la_ == 1:
                    self.state = 11680
                    self.as_column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.leftAlias = None # Column_aliasContext
            self.eq = None # Token
            self.leftAssignment = None # ExpressionContext
            self.expressionAs = None # ExpressionContext

        def column_alias(self):
            return self.getTypedRuleContext(TSqlParser.Column_aliasContext,0)


        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def as_column_alias(self):
            return self.getTypedRuleContext(TSqlParser.As_column_aliasContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_expression_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_elem" ):
                listener.enterExpression_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_elem" ):
                listener.exitExpression_elem(self)




    def expression_elem(self):

        localctx = TSqlParser.Expression_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 982, self.RULE_expression_elem)
        try:
            self.state = 11693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1590,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11685
                localctx.leftAlias = self.column_alias()
                self.state = 11686
                localctx.eq = self.match(TSqlParser.EQUAL)
                self.state = 11687
                localctx.leftAssignment = self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11689
                localctx.expressionAs = self.expression(0)
                self.state = 11691
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1589,self._ctx)
                if la_ == 1:
                    self.state = 11690
                    self.as_column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_list_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def asterisk(self):
            return self.getTypedRuleContext(TSqlParser.AsteriskContext,0)


        def udt_elem(self):
            return self.getTypedRuleContext(TSqlParser.Udt_elemContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(TSqlParser.Assignment_operatorContext,0)


        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def expression_elem(self):
            return self.getTypedRuleContext(TSqlParser.Expression_elemContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_select_list_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list_elem" ):
                listener.enterSelect_list_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list_elem" ):
                listener.exitSelect_list_elem(self)




    def select_list_elem(self):

        localctx = TSqlParser.Select_list_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 984, self.RULE_select_list_elem)
        try:
            self.state = 11704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1592,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11695
                self.asterisk()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11696
                self.udt_elem()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11697
                self.match(TSqlParser.LOCAL_ID)
                self.state = 11700
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185]:
                    self.state = 11698
                    self.assignment_operator()
                    pass
                elif token in [1174]:
                    self.state = 11699
                    self.match(TSqlParser.EQUAL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 11702
                self.expression(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 11703
                self.expression_elem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_sourcesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._table_source = None # Table_sourceContext
            self.source = list() # of Table_sourceContexts

        def non_ansi_join(self):
            return self.getTypedRuleContext(TSqlParser.Non_ansi_joinContext,0)


        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Table_sourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_table_sources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_sources" ):
                listener.enterTable_sources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_sources" ):
                listener.exitTable_sources(self)




    def table_sources(self):

        localctx = TSqlParser.Table_sourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 986, self.RULE_table_sources)
        self._la = 0 # Token type
        try:
            self.state = 11715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1594,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11706
                self.non_ansi_join()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11707
                localctx._table_source = self.table_source()
                localctx.source.append(localctx._table_source)
                self.state = 11712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 11708
                    self.match(TSqlParser.COMMA)
                    self.state = 11709
                    localctx._table_source = self.table_source()
                    localctx.source.append(localctx._table_source)
                    self.state = 11714
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_ansi_joinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._table_source = None # Table_sourceContext
            self.source = list() # of Table_sourceContexts

        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Table_sourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_non_ansi_join

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_ansi_join" ):
                listener.enterNon_ansi_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_ansi_join" ):
                listener.exitNon_ansi_join(self)




    def non_ansi_join(self):

        localctx = TSqlParser.Non_ansi_joinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 988, self.RULE_non_ansi_join)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11717
            localctx._table_source = self.table_source()
            localctx.source.append(localctx._table_source)
            self.state = 11720 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 11718
                self.match(TSqlParser.COMMA)
                self.state = 11719
                localctx._table_source = self.table_source()
                localctx.source.append(localctx._table_source)
                self.state = 11722 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==1194):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._join_part = None # Join_partContext
            self.joins = list() # of Join_partContexts

        def table_source_item(self):
            return self.getTypedRuleContext(TSqlParser.Table_source_itemContext,0)


        def join_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Join_partContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Join_partContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_table_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source" ):
                listener.enterTable_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source" ):
                listener.exitTable_source(self)




    def table_source(self):

        localctx = TSqlParser.Table_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 990, self.RULE_table_source)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11724
            self.table_source_item()
            self.state = 11728
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1596,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 11725
                    localctx._join_part = self.join_part()
                    localctx.joins.append(localctx._join_part) 
                self.state = 11730
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1596,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_source_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.loc_id = None # Token
            self.loc_id_call = None # Token
            self.loc_fcall = None # Function_callContext
            self.oldstyle_fcall = None # Function_callContext

        def full_table_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_table_nameContext,0)


        def deprecated_table_hint(self):
            return self.getTypedRuleContext(TSqlParser.Deprecated_table_hintContext,0)


        def as_table_alias(self):
            return self.getTypedRuleContext(TSqlParser.As_table_aliasContext,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(TSqlParser.With_table_hintsContext,0)


        def sybase_legacy_hints(self):
            return self.getTypedRuleContext(TSqlParser.Sybase_legacy_hintsContext,0)


        def rowset_function(self):
            return self.getTypedRuleContext(TSqlParser.Rowset_functionContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def derived_table(self):
            return self.getTypedRuleContext(TSqlParser.Derived_tableContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def column_alias_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_alias_listContext,0)


        def change_table(self):
            return self.getTypedRuleContext(TSqlParser.Change_tableContext,0)


        def nodes_method(self):
            return self.getTypedRuleContext(TSqlParser.Nodes_methodContext,0)


        def function_call(self):
            return self.getTypedRuleContext(TSqlParser.Function_callContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def open_xml(self):
            return self.getTypedRuleContext(TSqlParser.Open_xmlContext,0)


        def open_json(self):
            return self.getTypedRuleContext(TSqlParser.Open_jsonContext,0)


        def DOUBLE_COLON(self):
            return self.getToken(TSqlParser.DOUBLE_COLON, 0)

        def table_source(self):
            return self.getTypedRuleContext(TSqlParser.Table_sourceContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_table_source_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source_item" ):
                listener.enterTable_source_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source_item" ):
                listener.exitTable_source_item(self)




    def table_source_item(self):

        localctx = TSqlParser.Table_source_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 992, self.RULE_table_source_item)
        try:
            self.state = 11799
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1611,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11731
                self.full_table_name()
                self.state = 11732
                self.deprecated_table_hint()
                self.state = 11733
                self.as_table_alias()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11735
                self.full_table_name()
                self.state = 11737
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1597,self._ctx)
                if la_ == 1:
                    self.state = 11736
                    self.as_table_alias()


                self.state = 11742
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1598,self._ctx)
                if la_ == 1:
                    self.state = 11739
                    self.with_table_hints()

                elif la_ == 2:
                    self.state = 11740
                    self.deprecated_table_hint()

                elif la_ == 3:
                    self.state = 11741
                    self.sybase_legacy_hints()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11744
                self.rowset_function()
                self.state = 11746
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1599,self._ctx)
                if la_ == 1:
                    self.state = 11745
                    self.as_table_alias()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 11748
                self.match(TSqlParser.LR_BRACKET)
                self.state = 11749
                self.derived_table()
                self.state = 11750
                self.match(TSqlParser.RR_BRACKET)
                self.state = 11755
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1601,self._ctx)
                if la_ == 1:
                    self.state = 11751
                    self.as_table_alias()
                    self.state = 11753
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1600,self._ctx)
                    if la_ == 1:
                        self.state = 11752
                        self.column_alias_list()




                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 11757
                self.change_table()
                self.state = 11759
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1602,self._ctx)
                if la_ == 1:
                    self.state = 11758
                    self.as_table_alias()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 11761
                self.nodes_method()
                self.state = 11766
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1604,self._ctx)
                if la_ == 1:
                    self.state = 11762
                    self.as_table_alias()
                    self.state = 11764
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1603,self._ctx)
                    if la_ == 1:
                        self.state = 11763
                        self.column_alias_list()




                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 11768
                self.function_call()
                self.state = 11773
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1606,self._ctx)
                if la_ == 1:
                    self.state = 11769
                    self.as_table_alias()
                    self.state = 11771
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1605,self._ctx)
                    if la_ == 1:
                        self.state = 11770
                        self.column_alias_list()




                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 11775
                localctx.loc_id = self.match(TSqlParser.LOCAL_ID)
                self.state = 11777
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1607,self._ctx)
                if la_ == 1:
                    self.state = 11776
                    self.as_table_alias()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 11779
                localctx.loc_id_call = self.match(TSqlParser.LOCAL_ID)
                self.state = 11780
                self.match(TSqlParser.DOT)
                self.state = 11781
                localctx.loc_fcall = self.function_call()
                self.state = 11786
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1609,self._ctx)
                if la_ == 1:
                    self.state = 11782
                    self.as_table_alias()
                    self.state = 11784
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1608,self._ctx)
                    if la_ == 1:
                        self.state = 11783
                        self.column_alias_list()




                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 11788
                self.open_xml()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 11789
                self.open_json()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 11790
                self.match(TSqlParser.DOUBLE_COLON)
                self.state = 11791
                localctx.oldstyle_fcall = self.function_call()
                self.state = 11793
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1610,self._ctx)
                if la_ == 1:
                    self.state = 11792
                    self.as_table_alias()


                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 11795
                self.match(TSqlParser.LR_BRACKET)
                self.state = 11796
                self.table_source()
                self.state = 11797
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Open_xmlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPENXML(self):
            return self.getToken(TSqlParser.OPENXML, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def schema_declaration(self):
            return self.getTypedRuleContext(TSqlParser.Schema_declarationContext,0)


        def as_table_alias(self):
            return self.getTypedRuleContext(TSqlParser.As_table_aliasContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_open_xml

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_xml" ):
                listener.enterOpen_xml(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_xml" ):
                listener.exitOpen_xml(self)




    def open_xml(self):

        localctx = TSqlParser.Open_xmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 994, self.RULE_open_xml)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11801
            self.match(TSqlParser.OPENXML)
            self.state = 11802
            self.match(TSqlParser.LR_BRACKET)
            self.state = 11803
            self.expression(0)
            self.state = 11804
            self.match(TSqlParser.COMMA)
            self.state = 11805
            self.expression(0)
            self.state = 11808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1194:
                self.state = 11806
                self.match(TSqlParser.COMMA)
                self.state = 11807
                self.expression(0)


            self.state = 11810
            self.match(TSqlParser.RR_BRACKET)
            self.state = 11816
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1613,self._ctx)
            if la_ == 1:
                self.state = 11811
                self.match(TSqlParser.WITH)
                self.state = 11812
                self.match(TSqlParser.LR_BRACKET)
                self.state = 11813
                self.schema_declaration()
                self.state = 11814
                self.match(TSqlParser.RR_BRACKET)


            self.state = 11819
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1614,self._ctx)
            if la_ == 1:
                self.state = 11818
                self.as_table_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Open_jsonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPENJSON(self):
            return self.getToken(TSqlParser.OPENJSON, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def json_declaration(self):
            return self.getTypedRuleContext(TSqlParser.Json_declarationContext,0)


        def as_table_alias(self):
            return self.getTypedRuleContext(TSqlParser.As_table_aliasContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_open_json

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_json" ):
                listener.enterOpen_json(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_json" ):
                listener.exitOpen_json(self)




    def open_json(self):

        localctx = TSqlParser.Open_jsonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 996, self.RULE_open_json)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11821
            self.match(TSqlParser.OPENJSON)
            self.state = 11822
            self.match(TSqlParser.LR_BRACKET)
            self.state = 11823
            self.expression(0)
            self.state = 11826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1194:
                self.state = 11824
                self.match(TSqlParser.COMMA)
                self.state = 11825
                self.expression(0)


            self.state = 11828
            self.match(TSqlParser.RR_BRACKET)
            self.state = 11834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1616,self._ctx)
            if la_ == 1:
                self.state = 11829
                self.match(TSqlParser.WITH)
                self.state = 11830
                self.match(TSqlParser.LR_BRACKET)
                self.state = 11831
                self.json_declaration()
                self.state = 11832
                self.match(TSqlParser.RR_BRACKET)


            self.state = 11837
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1617,self._ctx)
            if la_ == 1:
                self.state = 11836
                self.as_table_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._json_column_declaration = None # Json_column_declarationContext
            self.json_col = list() # of Json_column_declarationContexts

        def json_column_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Json_column_declarationContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Json_column_declarationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_json_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_declaration" ):
                listener.enterJson_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_declaration" ):
                listener.exitJson_declaration(self)




    def json_declaration(self):

        localctx = TSqlParser.Json_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 998, self.RULE_json_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11839
            localctx._json_column_declaration = self.json_column_declaration()
            localctx.json_col.append(localctx._json_column_declaration)
            self.state = 11844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 11840
                self.match(TSqlParser.COMMA)
                self.state = 11841
                localctx._json_column_declaration = self.json_column_declaration()
                localctx.json_col.append(localctx._json_column_declaration)
                self.state = 11846
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_column_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_declaration(self):
            return self.getTypedRuleContext(TSqlParser.Column_declarationContext,0)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def JSON(self):
            return self.getToken(TSqlParser.JSON, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_json_column_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_column_declaration" ):
                listener.enterJson_column_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_column_declaration" ):
                listener.exitJson_column_declaration(self)




    def json_column_declaration(self):

        localctx = TSqlParser.Json_column_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1000, self.RULE_json_column_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11847
            self.column_declaration()
            self.state = 11850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 11848
                self.match(TSqlParser.AS)
                self.state = 11849
                self.match(TSqlParser.JSON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._column_declaration = None # Column_declarationContext
            self.xml_col = list() # of Column_declarationContexts

        def column_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Column_declarationContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Column_declarationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_schema_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_declaration" ):
                listener.enterSchema_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_declaration" ):
                listener.exitSchema_declaration(self)




    def schema_declaration(self):

        localctx = TSqlParser.Schema_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1002, self.RULE_schema_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11852
            localctx._column_declaration = self.column_declaration()
            localctx.xml_col.append(localctx._column_declaration)
            self.state = 11857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 11853
                self.match(TSqlParser.COMMA)
                self.state = 11854
                localctx._column_declaration = self.column_declaration()
                localctx.xml_col.append(localctx._column_declaration)
                self.state = 11859
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_column_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_declaration" ):
                listener.enterColumn_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_declaration" ):
                listener.exitColumn_declaration(self)




    def column_declaration(self):

        localctx = TSqlParser.Column_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1004, self.RULE_column_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11860
            self.id_()
            self.state = 11861
            self.data_type()
            self.state = 11863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1170:
                self.state = 11862
                self.match(TSqlParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Change_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def change_table_changes(self):
            return self.getTypedRuleContext(TSqlParser.Change_table_changesContext,0)


        def change_table_version(self):
            return self.getTypedRuleContext(TSqlParser.Change_table_versionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_change_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_table" ):
                listener.enterChange_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_table" ):
                listener.exitChange_table(self)




    def change_table(self):

        localctx = TSqlParser.Change_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1006, self.RULE_change_table)
        try:
            self.state = 11867
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1622,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11865
                self.change_table_changes()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11866
                self.change_table_version()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Change_table_changesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.changetable = None # Table_nameContext
            self.changesid = None # Token

        def CHANGETABLE(self):
            return self.getToken(TSqlParser.CHANGETABLE, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def CHANGES(self):
            return self.getToken(TSqlParser.CHANGES, 0)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def NULL_(self):
            return self.getToken(TSqlParser.NULL_, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_change_table_changes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_table_changes" ):
                listener.enterChange_table_changes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_table_changes" ):
                listener.exitChange_table_changes(self)




    def change_table_changes(self):

        localctx = TSqlParser.Change_table_changesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1008, self.RULE_change_table_changes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11869
            self.match(TSqlParser.CHANGETABLE)
            self.state = 11870
            self.match(TSqlParser.LR_BRACKET)
            self.state = 11871
            self.match(TSqlParser.CHANGES)
            self.state = 11872
            localctx.changetable = self.table_name()
            self.state = 11873
            self.match(TSqlParser.COMMA)
            self.state = 11874
            localctx.changesid = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==630 or _la==1166 or _la==1168):
                localctx.changesid = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 11875
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Change_table_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.versiontable = None # Table_nameContext
            self.pk_columns = None # Full_column_name_listContext
            self.pk_values = None # Select_listContext

        def CHANGETABLE(self):
            return self.getToken(TSqlParser.CHANGETABLE, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def VERSION(self):
            return self.getToken(TSqlParser.VERSION, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def full_column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Full_column_name_listContext,0)


        def select_list(self):
            return self.getTypedRuleContext(TSqlParser.Select_listContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_change_table_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_table_version" ):
                listener.enterChange_table_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_table_version" ):
                listener.exitChange_table_version(self)




    def change_table_version(self):

        localctx = TSqlParser.Change_table_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1010, self.RULE_change_table_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11877
            self.match(TSqlParser.CHANGETABLE)
            self.state = 11878
            self.match(TSqlParser.LR_BRACKET)
            self.state = 11879
            self.match(TSqlParser.VERSION)
            self.state = 11880
            localctx.versiontable = self.table_name()
            self.state = 11881
            self.match(TSqlParser.COMMA)
            self.state = 11882
            localctx.pk_columns = self.full_column_name_list()
            self.state = 11883
            self.match(TSqlParser.COMMA)
            self.state = 11884
            localctx.pk_values = self.select_list()
            self.state = 11885
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def join_on(self):
            return self.getTypedRuleContext(TSqlParser.Join_onContext,0)


        def cross_join(self):
            return self.getTypedRuleContext(TSqlParser.Cross_joinContext,0)


        def apply_(self):
            return self.getTypedRuleContext(TSqlParser.Apply_Context,0)


        def pivot(self):
            return self.getTypedRuleContext(TSqlParser.PivotContext,0)


        def unpivot(self):
            return self.getTypedRuleContext(TSqlParser.UnpivotContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_join_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_part" ):
                listener.enterJoin_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_part" ):
                listener.exitJoin_part(self)




    def join_part(self):

        localctx = TSqlParser.Join_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1012, self.RULE_join_part)
        try:
            self.state = 11892
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1623,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11887
                self.join_on()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11888
                self.cross_join()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11889
                self.apply_()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 11890
                self.pivot()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 11891
                self.unpivot()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_onContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.inner = None # Token
            self.join_type = None # Token
            self.outer = None # Token
            self.join_hint = None # Token
            self.source = None # Table_sourceContext
            self.cond = None # Search_conditionContext

        def JOIN(self):
            return self.getToken(TSqlParser.JOIN, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def table_source(self):
            return self.getTypedRuleContext(TSqlParser.Table_sourceContext,0)


        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def LEFT(self):
            return self.getToken(TSqlParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(TSqlParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(TSqlParser.FULL, 0)

        def LOOP(self):
            return self.getToken(TSqlParser.LOOP, 0)

        def HASH(self):
            return self.getToken(TSqlParser.HASH, 0)

        def MERGE(self):
            return self.getToken(TSqlParser.MERGE, 0)

        def REMOTE(self):
            return self.getToken(TSqlParser.REMOTE, 0)

        def INNER(self):
            return self.getToken(TSqlParser.INNER, 0)

        def OUTER(self):
            return self.getToken(TSqlParser.OUTER, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_join_on

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_on" ):
                listener.enterJoin_on(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_on" ):
                listener.exitJoin_on(self)




    def join_on(self):

        localctx = TSqlParser.Join_onContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1014, self.RULE_join_on)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11901
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [408, 454, 475, 526, 564, 778]:
                self.state = 11895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==454:
                    self.state = 11894
                    localctx.inner = self.match(TSqlParser.INNER)


                pass
            elif token in [379, 502, 817]:
                self.state = 11897
                localctx.join_type = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==379 or _la==502 or _la==817):
                    localctx.join_type = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==670:
                    self.state = 11898
                    localctx.outer = self.match(TSqlParser.OUTER)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 11904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==408 or _la==526 or _la==564 or _la==778:
                self.state = 11903
                localctx.join_hint = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==408 or _la==526 or _la==564 or _la==778):
                    localctx.join_hint = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 11906
            self.match(TSqlParser.JOIN)
            self.state = 11907
            localctx.source = self.table_source()
            self.state = 11908
            self.match(TSqlParser.ON)
            self.state = 11909
            localctx.cond = self.search_condition(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cross_joinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CROSS(self):
            return self.getToken(TSqlParser.CROSS, 0)

        def JOIN(self):
            return self.getToken(TSqlParser.JOIN, 0)

        def table_source_item(self):
            return self.getTypedRuleContext(TSqlParser.Table_source_itemContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_cross_join

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCross_join" ):
                listener.enterCross_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCross_join" ):
                listener.exitCross_join(self)




    def cross_join(self):

        localctx = TSqlParser.Cross_joinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1016, self.RULE_cross_join)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11911
            self.match(TSqlParser.CROSS)
            self.state = 11912
            self.match(TSqlParser.JOIN)
            self.state = 11913
            self.table_source_item()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Apply_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.apply_style = None # Token
            self.source = None # Table_source_itemContext

        def APPLY(self):
            return self.getToken(TSqlParser.APPLY, 0)

        def table_source_item(self):
            return self.getTypedRuleContext(TSqlParser.Table_source_itemContext,0)


        def CROSS(self):
            return self.getToken(TSqlParser.CROSS, 0)

        def OUTER(self):
            return self.getToken(TSqlParser.OUTER, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_apply_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterApply_" ):
                listener.enterApply_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitApply_" ):
                listener.exitApply_(self)




    def apply_(self):

        localctx = TSqlParser.Apply_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1018, self.RULE_apply_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11915
            localctx.apply_style = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==201 or _la==670):
                localctx.apply_style = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 11916
            self.match(TSqlParser.APPLY)
            self.state = 11917
            localctx.source = self.table_source_item()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIVOT(self):
            return self.getToken(TSqlParser.PIVOT, 0)

        def pivot_clause(self):
            return self.getTypedRuleContext(TSqlParser.Pivot_clauseContext,0)


        def as_table_alias(self):
            return self.getTypedRuleContext(TSqlParser.As_table_aliasContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_pivot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot" ):
                listener.enterPivot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot" ):
                listener.exitPivot(self)




    def pivot(self):

        localctx = TSqlParser.PivotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1020, self.RULE_pivot)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11919
            self.match(TSqlParser.PIVOT)
            self.state = 11920
            self.pivot_clause()
            self.state = 11921
            self.as_table_alias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNPIVOT(self):
            return self.getToken(TSqlParser.UNPIVOT, 0)

        def unpivot_clause(self):
            return self.getTypedRuleContext(TSqlParser.Unpivot_clauseContext,0)


        def as_table_alias(self):
            return self.getTypedRuleContext(TSqlParser.As_table_aliasContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_unpivot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot" ):
                listener.enterUnpivot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot" ):
                listener.exitUnpivot(self)




    def unpivot(self):

        localctx = TSqlParser.UnpivotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1022, self.RULE_unpivot)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11923
            self.match(TSqlParser.UNPIVOT)
            self.state = 11924
            self.unpivot_clause()
            self.state = 11925
            self.as_table_alias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def aggregate_windowed_function(self):
            return self.getTypedRuleContext(TSqlParser.Aggregate_windowed_functionContext,0)


        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def full_column_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_column_nameContext,0)


        def IN(self):
            return self.getToken(TSqlParser.IN, 0)

        def column_alias_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_alias_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_pivot_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_clause" ):
                listener.enterPivot_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_clause" ):
                listener.exitPivot_clause(self)




    def pivot_clause(self):

        localctx = TSqlParser.Pivot_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1024, self.RULE_pivot_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11927
            self.match(TSqlParser.LR_BRACKET)
            self.state = 11928
            self.aggregate_windowed_function()
            self.state = 11929
            self.match(TSqlParser.FOR)
            self.state = 11930
            self.full_column_name()
            self.state = 11931
            self.match(TSqlParser.IN)
            self.state = 11932
            self.column_alias_list()
            self.state = 11933
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unpivot_exp = None # ExpressionContext

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def full_column_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_column_nameContext,0)


        def IN(self):
            return self.getToken(TSqlParser.IN, 0)

        def full_column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Full_column_name_listContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_unpivot_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_clause" ):
                listener.enterUnpivot_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_clause" ):
                listener.exitUnpivot_clause(self)




    def unpivot_clause(self):

        localctx = TSqlParser.Unpivot_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1026, self.RULE_unpivot_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11935
            self.match(TSqlParser.LR_BRACKET)
            self.state = 11936
            localctx.unpivot_exp = self.expression(0)
            self.state = 11937
            self.match(TSqlParser.FOR)
            self.state = 11938
            self.full_column_name()
            self.state = 11939
            self.match(TSqlParser.IN)
            self.state = 11940
            self.match(TSqlParser.LR_BRACKET)
            self.state = 11941
            self.full_column_name_list()
            self.state = 11942
            self.match(TSqlParser.RR_BRACKET)
            self.state = 11943
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_column_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._full_column_name = None # Full_column_nameContext
            self.column = list() # of Full_column_nameContexts

        def full_column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Full_column_nameContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Full_column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_full_column_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_column_name_list" ):
                listener.enterFull_column_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_column_name_list" ):
                listener.exitFull_column_name_list(self)




    def full_column_name_list(self):

        localctx = TSqlParser.Full_column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1028, self.RULE_full_column_name_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11945
            localctx._full_column_name = self.full_column_name()
            localctx.column.append(localctx._full_column_name)
            self.state = 11950
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1628,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 11946
                    self.match(TSqlParser.COMMA)
                    self.state = 11947
                    localctx._full_column_name = self.full_column_name()
                    localctx.column.append(localctx._full_column_name) 
                self.state = 11952
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1628,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rowset_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider_name = None # Token
            self.connectionString = None # Token
            self.sql = None # Token
            self.data_file = None # Token

        def OPENROWSET(self):
            return self.getToken(TSqlParser.OPENROWSET, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def BULK(self):
            return self.getToken(TSqlParser.BULK, 0)

        def bulk_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Bulk_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Bulk_optionContext,i)


        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_rowset_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowset_function" ):
                listener.enterRowset_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowset_function" ):
                listener.exitRowset_function(self)




    def rowset_function(self):

        localctx = TSqlParser.Rowset_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1030, self.RULE_rowset_function)
        self._la = 0 # Token type
        try:
            self.state = 11979
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1631,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11953
                self.match(TSqlParser.OPENROWSET)
                self.state = 11954
                self.match(TSqlParser.LR_BRACKET)
                self.state = 11955
                localctx.provider_name = self.match(TSqlParser.STRING)
                self.state = 11956
                self.match(TSqlParser.COMMA)
                self.state = 11957
                localctx.connectionString = self.match(TSqlParser.STRING)
                self.state = 11958
                self.match(TSqlParser.COMMA)
                self.state = 11959
                localctx.sql = self.match(TSqlParser.STRING)
                self.state = 11960
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11961
                self.match(TSqlParser.OPENROWSET)
                self.state = 11962
                self.match(TSqlParser.LR_BRACKET)
                self.state = 11963
                self.match(TSqlParser.BULK)
                self.state = 11964
                localctx.data_file = self.match(TSqlParser.STRING)
                self.state = 11965
                self.match(TSqlParser.COMMA)
                self.state = 11975
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1630,self._ctx)
                if la_ == 1:
                    self.state = 11966
                    self.bulk_option()
                    self.state = 11971
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1194:
                        self.state = 11967
                        self.match(TSqlParser.COMMA)
                        self.state = 11968
                        self.bulk_option()
                        self.state = 11973
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 11974
                    self.id_()
                    pass


                self.state = 11977
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bulk_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.bulk_option_value = None # Token

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_bulk_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBulk_option" ):
                listener.enterBulk_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBulk_option" ):
                listener.exitBulk_option(self)




    def bulk_option(self):

        localctx = TSqlParser.Bulk_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1032, self.RULE_bulk_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11981
            self.id_()
            self.state = 11982
            self.match(TSqlParser.EQUAL)
            self.state = 11983
            localctx.bulk_option_value = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==1168 or _la==1170):
                localctx.bulk_option_value = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Derived_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.SubqueryContext)
            else:
                return self.getTypedRuleContext(TSqlParser.SubqueryContext,i)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def UNION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.UNION)
            else:
                return self.getToken(TSqlParser.UNION, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ALL)
            else:
                return self.getToken(TSqlParser.ALL, i)

        def table_value_constructor(self):
            return self.getTypedRuleContext(TSqlParser.Table_value_constructorContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_derived_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerived_table" ):
                listener.enterDerived_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerived_table" ):
                listener.exitDerived_table(self)




    def derived_table(self):

        localctx = TSqlParser.Derived_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1034, self.RULE_derived_table)
        self._la = 0 # Token type
        try:
            self.state = 12003
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1633,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11985
                self.subquery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11986
                self.match(TSqlParser.LR_BRACKET)
                self.state = 11987
                self.subquery()
                self.state = 11993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1019:
                    self.state = 11988
                    self.match(TSqlParser.UNION)
                    self.state = 11989
                    self.match(TSqlParser.ALL)
                    self.state = 11990
                    self.subquery()
                    self.state = 11995
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 11996
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11998
                self.table_value_constructor()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 11999
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12000
                self.table_value_constructor()
                self.state = 12001
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TSqlParser.RULE_function_call

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RANKING_WINDOWED_FUNCContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ranking_windowed_function(self):
            return self.getTypedRuleContext(TSqlParser.Ranking_windowed_functionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRANKING_WINDOWED_FUNC" ):
                listener.enterRANKING_WINDOWED_FUNC(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRANKING_WINDOWED_FUNC" ):
                listener.exitRANKING_WINDOWED_FUNC(self)


    class BUILT_IN_FUNCContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def built_in_functions(self):
            return self.getTypedRuleContext(TSqlParser.Built_in_functionsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBUILT_IN_FUNC" ):
                listener.enterBUILT_IN_FUNC(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBUILT_IN_FUNC" ):
                listener.exitBUILT_IN_FUNC(self)


    class FREE_TEXTContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def freetext_function(self):
            return self.getTypedRuleContext(TSqlParser.Freetext_functionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFREE_TEXT" ):
                listener.enterFREE_TEXT(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFREE_TEXT" ):
                listener.exitFREE_TEXT(self)


    class ANALYTIC_WINDOWED_FUNCContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def analytic_windowed_function(self):
            return self.getTypedRuleContext(TSqlParser.Analytic_windowed_functionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterANALYTIC_WINDOWED_FUNC" ):
                listener.enterANALYTIC_WINDOWED_FUNC(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitANALYTIC_WINDOWED_FUNC" ):
                listener.exitANALYTIC_WINDOWED_FUNC(self)


    class SCALAR_FUNCTIONContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_function_name(self):
            return self.getTypedRuleContext(TSqlParser.Scalar_function_nameContext,0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression_list_(self):
            return self.getTypedRuleContext(TSqlParser.Expression_list_Context,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSCALAR_FUNCTION" ):
                listener.enterSCALAR_FUNCTION(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSCALAR_FUNCTION" ):
                listener.exitSCALAR_FUNCTION(self)


    class PARTITION_FUNCContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def partition_function(self):
            return self.getTypedRuleContext(TSqlParser.Partition_functionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPARTITION_FUNC" ):
                listener.enterPARTITION_FUNC(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPARTITION_FUNC" ):
                listener.exitPARTITION_FUNC(self)


    class AGGREGATE_WINDOWED_FUNCContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggregate_windowed_function(self):
            return self.getTypedRuleContext(TSqlParser.Aggregate_windowed_functionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAGGREGATE_WINDOWED_FUNC" ):
                listener.enterAGGREGATE_WINDOWED_FUNC(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAGGREGATE_WINDOWED_FUNC" ):
                listener.exitAGGREGATE_WINDOWED_FUNC(self)


    class HIERARCHYID_METHODContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def hierarchyid_static_method(self):
            return self.getTypedRuleContext(TSqlParser.Hierarchyid_static_methodContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHIERARCHYID_METHOD" ):
                listener.enterHIERARCHYID_METHOD(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHIERARCHYID_METHOD" ):
                listener.exitHIERARCHYID_METHOD(self)



    def function_call(self):

        localctx = TSqlParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1036, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.state = 12019
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1635,self._ctx)
            if la_ == 1:
                localctx = TSqlParser.RANKING_WINDOWED_FUNCContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 12005
                self.ranking_windowed_function()
                pass

            elif la_ == 2:
                localctx = TSqlParser.AGGREGATE_WINDOWED_FUNCContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 12006
                self.aggregate_windowed_function()
                pass

            elif la_ == 3:
                localctx = TSqlParser.ANALYTIC_WINDOWED_FUNCContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 12007
                self.analytic_windowed_function()
                pass

            elif la_ == 4:
                localctx = TSqlParser.BUILT_IN_FUNCContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 12008
                self.built_in_functions()
                pass

            elif la_ == 5:
                localctx = TSqlParser.SCALAR_FUNCTIONContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 12009
                self.scalar_function_name()
                self.state = 12010
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2342234983759889) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -74874560052724233) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8070028319748746719) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387490746373) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8753867308933840637) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755874891096735745) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -864762596778127649) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -138580854017) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18014399105315111) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -650880200401223699) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -378302373530962465) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689505) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906061) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1155)) & ~0x3f) == 0 and ((1 << (_la - 1155)) & 4996391290535303) != 0):
                    self.state = 12011
                    self.expression_list_()


                self.state = 12014
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                localctx = TSqlParser.FREE_TEXTContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 12016
                self.freetext_function()
                pass

            elif la_ == 7:
                localctx = TSqlParser.PARTITION_FUNCContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 12017
                self.partition_function()
                pass

            elif la_ == 8:
                localctx = TSqlParser.HIERARCHYID_METHODContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 12018
                self.hierarchyid_static_method()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # Id_Context
            self.func_name = None # Id_Context

        def DOLLAR_PARTITION(self):
            return self.getToken(TSqlParser.DOLLAR_PARTITION, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_partition_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_function" ):
                listener.enterPartition_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_function" ):
                listener.exitPartition_function(self)




    def partition_function(self):

        localctx = TSqlParser.Partition_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1038, self.RULE_partition_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6845834611130385) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4691064178111676937) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8067776519934725599) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387491794949) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714895912701) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755875440852549633) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873769796032868641) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510937462965505) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799299309863) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -651161675377934355) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -387309693044787745) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689521) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906573) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 171) != 0):
                self.state = 12021
                localctx.database = self.id_()
                self.state = 12022
                self.match(TSqlParser.DOT)


            self.state = 12026
            self.match(TSqlParser.DOLLAR_PARTITION)
            self.state = 12027
            self.match(TSqlParser.DOT)
            self.state = 12028
            localctx.func_name = self.id_()
            self.state = 12029
            self.match(TSqlParser.LR_BRACKET)
            self.state = 12030
            self.expression(0)
            self.state = 12031
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Freetext_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def CONTAINSTABLE(self):
            return self.getToken(TSqlParser.CONTAINSTABLE, 0)

        def FREETEXTTABLE(self):
            return self.getToken(TSqlParser.FREETEXTTABLE, 0)

        def full_column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Full_column_nameContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Full_column_nameContext,i)


        def STAR(self):
            return self.getToken(TSqlParser.STAR, 0)

        def LANGUAGE(self):
            return self.getToken(TSqlParser.LANGUAGE, 0)

        def SEMANTICSIMILARITYTABLE(self):
            return self.getToken(TSqlParser.SEMANTICSIMILARITYTABLE, 0)

        def SEMANTICKEYPHRASETABLE(self):
            return self.getToken(TSqlParser.SEMANTICKEYPHRASETABLE, 0)

        def SEMANTICSIMILARITYDETAILSTABLE(self):
            return self.getToken(TSqlParser.SEMANTICSIMILARITYDETAILSTABLE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_freetext_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFreetext_function" ):
                listener.enterFreetext_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFreetext_function" ):
                listener.exitFreetext_function(self)




    def freetext_function(self):

        localctx = TSqlParser.Freetext_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1040, self.RULE_freetext_function)
        self._la = 0 # Token type
        try:
            self.state = 12101
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [180, 377]:
                self.enterOuterAlt(localctx, 1)
                self.state = 12033
                _la = self._input.LA(1)
                if not(_la==180 or _la==377):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12034
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12035
                self.table_name()
                self.state = 12036
                self.match(TSqlParser.COMMA)
                self.state = 12050
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169, 1191]:
                    self.state = 12037
                    self.full_column_name()
                    pass
                elif token in [1192]:
                    self.state = 12038
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 12039
                    self.full_column_name()
                    self.state = 12044
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1194:
                        self.state = 12040
                        self.match(TSqlParser.COMMA)
                        self.state = 12041
                        self.full_column_name()
                        self.state = 12046
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 12047
                    self.match(TSqlParser.RR_BRACKET)
                    pass
                elif token in [1198]:
                    self.state = 12049
                    self.match(TSqlParser.STAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 12052
                self.match(TSqlParser.COMMA)
                self.state = 12053
                self.expression(0)
                self.state = 12057
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1639,self._ctx)
                if la_ == 1:
                    self.state = 12054
                    self.match(TSqlParser.COMMA)
                    self.state = 12055
                    self.match(TSqlParser.LANGUAGE)
                    self.state = 12056
                    self.expression(0)


                self.state = 12061
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 12059
                    self.match(TSqlParser.COMMA)
                    self.state = 12060
                    self.expression(0)


                self.state = 12063
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [867, 869]:
                self.enterOuterAlt(localctx, 2)
                self.state = 12065
                _la = self._input.LA(1)
                if not(_la==867 or _la==869):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12066
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12067
                self.table_name()
                self.state = 12068
                self.match(TSqlParser.COMMA)
                self.state = 12082
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169, 1191]:
                    self.state = 12069
                    self.full_column_name()
                    pass
                elif token in [1192]:
                    self.state = 12070
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 12071
                    self.full_column_name()
                    self.state = 12076
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1194:
                        self.state = 12072
                        self.match(TSqlParser.COMMA)
                        self.state = 12073
                        self.full_column_name()
                        self.state = 12078
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 12079
                    self.match(TSqlParser.RR_BRACKET)
                    pass
                elif token in [1198]:
                    self.state = 12081
                    self.match(TSqlParser.STAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 12084
                self.match(TSqlParser.COMMA)
                self.state = 12085
                self.expression(0)
                self.state = 12086
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [868]:
                self.enterOuterAlt(localctx, 3)
                self.state = 12088
                self.match(TSqlParser.SEMANTICSIMILARITYDETAILSTABLE)
                self.state = 12089
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12090
                self.table_name()
                self.state = 12091
                self.match(TSqlParser.COMMA)
                self.state = 12092
                self.full_column_name()
                self.state = 12093
                self.match(TSqlParser.COMMA)
                self.state = 12094
                self.expression(0)
                self.state = 12095
                self.match(TSqlParser.COMMA)
                self.state = 12096
                self.full_column_name()
                self.state = 12097
                self.match(TSqlParser.COMMA)
                self.state = 12098
                self.expression(0)
                self.state = 12099
                self.match(TSqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Freetext_predicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINS(self):
            return self.getToken(TSqlParser.CONTAINS, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def full_column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Full_column_nameContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Full_column_nameContext,i)


        def STAR(self):
            return self.getToken(TSqlParser.STAR, 0)

        def PROPERTY(self):
            return self.getToken(TSqlParser.PROPERTY, 0)

        def FREETEXT(self):
            return self.getToken(TSqlParser.FREETEXT, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def LANGUAGE(self):
            return self.getToken(TSqlParser.LANGUAGE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_freetext_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFreetext_predicate" ):
                listener.enterFreetext_predicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFreetext_predicate" ):
                listener.exitFreetext_predicate(self)




    def freetext_predicate(self):

        localctx = TSqlParser.Freetext_predicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1042, self.RULE_freetext_predicate)
        self._la = 0 # Token type
        try:
            self.state = 12159
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [179]:
                self.enterOuterAlt(localctx, 1)
                self.state = 12103
                self.match(TSqlParser.CONTAINS)
                self.state = 12104
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12125
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1645,self._ctx)
                if la_ == 1:
                    self.state = 12105
                    self.full_column_name()
                    pass

                elif la_ == 2:
                    self.state = 12106
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 12107
                    self.full_column_name()
                    self.state = 12112
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1194:
                        self.state = 12108
                        self.match(TSqlParser.COMMA)
                        self.state = 12109
                        self.full_column_name()
                        self.state = 12114
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 12115
                    self.match(TSqlParser.RR_BRACKET)
                    pass

                elif la_ == 3:
                    self.state = 12117
                    self.match(TSqlParser.STAR)
                    pass

                elif la_ == 4:
                    self.state = 12118
                    self.match(TSqlParser.PROPERTY)
                    self.state = 12119
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 12120
                    self.full_column_name()
                    self.state = 12121
                    self.match(TSqlParser.COMMA)
                    self.state = 12122
                    self.expression(0)
                    self.state = 12123
                    self.match(TSqlParser.RR_BRACKET)
                    pass


                self.state = 12127
                self.match(TSqlParser.COMMA)
                self.state = 12128
                self.expression(0)
                self.state = 12129
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [376]:
                self.enterOuterAlt(localctx, 2)
                self.state = 12131
                self.match(TSqlParser.FREETEXT)
                self.state = 12132
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12133
                self.table_name()
                self.state = 12134
                self.match(TSqlParser.COMMA)
                self.state = 12148
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169, 1191]:
                    self.state = 12135
                    self.full_column_name()
                    pass
                elif token in [1192]:
                    self.state = 12136
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 12137
                    self.full_column_name()
                    self.state = 12142
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1194:
                        self.state = 12138
                        self.match(TSqlParser.COMMA)
                        self.state = 12139
                        self.full_column_name()
                        self.state = 12144
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 12145
                    self.match(TSqlParser.RR_BRACKET)
                    pass
                elif token in [1198]:
                    self.state = 12147
                    self.match(TSqlParser.STAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 12150
                self.match(TSqlParser.COMMA)
                self.state = 12151
                self.expression(0)
                self.state = 12155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 12152
                    self.match(TSqlParser.COMMA)
                    self.state = 12153
                    self.match(TSqlParser.LANGUAGE)
                    self.state = 12154
                    self.expression(0)


                self.state = 12157
                self.match(TSqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_key_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.json_key_name = None # ExpressionContext
            self.value_expression = None # ExpressionContext

        def COLON(self):
            return self.getToken(TSqlParser.COLON, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_json_key_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_key_value" ):
                listener.enterJson_key_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_key_value" ):
                listener.exitJson_key_value(self)




    def json_key_value(self):

        localctx = TSqlParser.Json_key_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1044, self.RULE_json_key_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12161
            localctx.json_key_name = self.expression(0)
            self.state = 12162
            self.match(TSqlParser.COLON)
            self.state = 12163
            localctx.value_expression = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_null_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def NULL_(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NULL_)
            else:
                return self.getToken(TSqlParser.NULL_, i)

        def ABSENT(self):
            return self.getToken(TSqlParser.ABSENT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_json_null_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_null_clause" ):
                listener.enterJson_null_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_null_clause" ):
                listener.exitJson_null_clause(self)




    def json_null_clause(self):

        localctx = TSqlParser.Json_null_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1046, self.RULE_json_null_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12165
            _la = self._input.LA(1)
            if not(_la==3 or _la==630):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 12166
            self.match(TSqlParser.ON)
            self.state = 12167
            self.match(TSqlParser.NULL_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Built_in_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TSqlParser.RULE_built_in_functions

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class COL_NAMEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.table_id = None # ExpressionContext
            self.column_id = None # ExpressionContext
            self.copyFrom(ctx)

        def COL_NAME(self):
            return self.getToken(TSqlParser.COL_NAME, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCOL_NAME" ):
                listener.enterCOL_NAME(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCOL_NAME" ):
                listener.exitCOL_NAME(self)


    class CHECKSUMContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.star = None # Token
            self.copyFrom(ctx)

        def CHECKSUM(self):
            return self.getToken(TSqlParser.CHECKSUM, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def STAR(self):
            return self.getToken(TSqlParser.STAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCHECKSUM" ):
                listener.enterCHECKSUM(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCHECKSUM" ):
                listener.exitCHECKSUM(self)


    class DECOMPRESSContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.expr = None # ExpressionContext
            self.copyFrom(ctx)

        def DECOMPRESS(self):
            return self.getToken(TSqlParser.DECOMPRESS, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDECOMPRESS" ):
                listener.enterDECOMPRESS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDECOMPRESS" ):
                listener.exitDECOMPRESS(self)


    class CURRENT_TIMEZONE_IDContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_TIMEZONE_ID(self):
            return self.getToken(TSqlParser.CURRENT_TIMEZONE_ID, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCURRENT_TIMEZONE_ID" ):
                listener.enterCURRENT_TIMEZONE_ID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCURRENT_TIMEZONE_ID" ):
                listener.exitCURRENT_TIMEZONE_ID(self)


    class MONTHContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.date = None # ExpressionContext
            self.copyFrom(ctx)

        def MONTH(self):
            return self.getToken(TSqlParser.MONTH, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMONTH" ):
                listener.enterMONTH(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMONTH" ):
                listener.exitMONTH(self)


    class RANDContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.seed = None # ExpressionContext
            self.copyFrom(ctx)

        def RAND(self):
            return self.getToken(TSqlParser.RAND, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRAND" ):
                listener.enterRAND(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRAND" ):
                listener.exitRAND(self)


    class FORMATContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.value = None # ExpressionContext
            self.format_label = None # ExpressionContext
            self.culture = None # ExpressionContext
            self.copyFrom(ctx)

        def FORMAT(self):
            return self.getToken(TSqlParser.FORMAT, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFORMAT" ):
                listener.enterFORMAT(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFORMAT" ):
                listener.exitFORMAT(self)


    class TRIMContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.characters = None # ExpressionContext
            self.string_ = None # ExpressionContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(TSqlParser.TRIM, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTRIM" ):
                listener.enterTRIM(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTRIM" ):
                listener.exitTRIM(self)


    class LEASTContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEAST(self):
            return self.getToken(TSqlParser.LEAST, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def expression_list_(self):
            return self.getTypedRuleContext(TSqlParser.Expression_list_Context,0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLEAST" ):
                listener.enterLEAST(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLEAST" ):
                listener.exitLEAST(self)


    class APP_NAMEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def APP_NAME(self):
            return self.getToken(TSqlParser.APP_NAME, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAPP_NAME" ):
                listener.enterAPP_NAME(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAPP_NAME" ):
                listener.exitAPP_NAME(self)


    class USER_IDContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.user = None # ExpressionContext
            self.copyFrom(ctx)

        def USER_ID(self):
            return self.getToken(TSqlParser.USER_ID, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUSER_ID" ):
                listener.enterUSER_ID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUSER_ID" ):
                listener.exitUSER_ID(self)


    class FILE_NAMEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.file_id = None # ExpressionContext
            self.copyFrom(ctx)

        def FILE_NAME(self):
            return self.getToken(TSqlParser.FILE_NAME, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFILE_NAME" ):
                listener.enterFILE_NAME(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFILE_NAME" ):
                listener.exitFILE_NAME(self)


    class SESSION_CONTEXTContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.key = None # Token
            self.copyFrom(ctx)

        def SESSION_CONTEXT(self):
            return self.getToken(TSqlParser.SESSION_CONTEXT, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSESSION_CONTEXT" ):
                listener.enterSESSION_CONTEXT(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSESSION_CONTEXT" ):
                listener.exitSESSION_CONTEXT(self)


    class STRContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.float_expression = None # ExpressionContext
            self.length_expression = None # ExpressionContext
            self.decimal = None # ExpressionContext
            self.copyFrom(ctx)

        def STR(self):
            return self.getToken(TSqlParser.STR, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSTR" ):
                listener.enterSTR(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSTR" ):
                listener.exitSTR(self)


    class CONVERTContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.convert_data_type = None # Data_typeContext
            self.convert_expression = None # ExpressionContext
            self.style = None # ExpressionContext
            self.copyFrom(ctx)

        def CONVERT(self):
            return self.getToken(TSqlParser.CONVERT, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCONVERT" ):
                listener.enterCONVERT(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCONVERT" ):
                listener.exitCONVERT(self)


    class XML_DATA_TYPE_FUNCContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def xml_data_type_methods(self):
            return self.getTypedRuleContext(TSqlParser.Xml_data_type_methodsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXML_DATA_TYPE_FUNC" ):
                listener.enterXML_DATA_TYPE_FUNC(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXML_DATA_TYPE_FUNC" ):
                listener.exitXML_DATA_TYPE_FUNC(self)


    class LOG10Context(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.float_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def LOG10(self):
            return self.getToken(TSqlParser.LOG10, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLOG10" ):
                listener.enterLOG10(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLOG10" ):
                listener.exitLOG10(self)


    class FLOORContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.numeric_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def FLOOR(self):
            return self.getToken(TSqlParser.FLOOR, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFLOOR" ):
                listener.enterFLOOR(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFLOOR" ):
                listener.exitFLOOR(self)


    class YEARContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.date = None # ExpressionContext
            self.copyFrom(ctx)

        def YEAR(self):
            return self.getToken(TSqlParser.YEAR, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYEAR" ):
                listener.enterYEAR(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYEAR" ):
                listener.exitYEAR(self)


    class PARSEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.str_label = None # ExpressionContext
            self.culture = None # ExpressionContext
            self.copyFrom(ctx)

        def PARSE(self):
            return self.getToken(TSqlParser.PARSE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def AS(self):
            return self.getToken(TSqlParser.AS, 0)
        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def USING(self):
            return self.getToken(TSqlParser.USING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPARSE" ):
                listener.enterPARSE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPARSE" ):
                listener.exitPARSE(self)


    class ORIGINAL_LOGINContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ORIGINAL_LOGIN(self):
            return self.getToken(TSqlParser.ORIGINAL_LOGIN, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterORIGINAL_LOGIN" ):
                listener.enterORIGINAL_LOGIN(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitORIGINAL_LOGIN" ):
                listener.exitORIGINAL_LOGIN(self)


    class MATH_SIGNContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.numeric_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def SIGN(self):
            return self.getToken(TSqlParser.SIGN, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMATH_SIGN" ):
                listener.enterMATH_SIGN(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMATH_SIGN" ):
                listener.exitMATH_SIGN(self)


    class TIMEFROMPARTSContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.hour = None # ExpressionContext
            self.minute = None # ExpressionContext
            self.seconds = None # ExpressionContext
            self.fractions = None # ExpressionContext
            self.precision = None # Token
            self.copyFrom(ctx)

        def TIMEFROMPARTS(self):
            return self.getToken(TSqlParser.TIMEFROMPARTS, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTIMEFROMPARTS" ):
                listener.enterTIMEFROMPARTS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTIMEFROMPARTS" ):
                listener.exitTIMEFROMPARTS(self)


    class LEFTContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.character_expression = None # ExpressionContext
            self.integer_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def LEFT(self):
            return self.getToken(TSqlParser.LEFT, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLEFT" ):
                listener.enterLEFT(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLEFT" ):
                listener.exitLEFT(self)


    class GET_FILESTREAM_TRANSACTION_CONTEXTContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GET_FILESTREAM_TRANSACTION_CONTEXT(self):
            return self.getToken(TSqlParser.GET_FILESTREAM_TRANSACTION_CONTEXT, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGET_FILESTREAM_TRANSACTION_CONTEXT" ):
                listener.enterGET_FILESTREAM_TRANSACTION_CONTEXT(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGET_FILESTREAM_TRANSACTION_CONTEXT" ):
                listener.exitGET_FILESTREAM_TRANSACTION_CONTEXT(self)


    class FILEPROPERTYContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.file_name = None # ExpressionContext
            self.property_label = None # ExpressionContext
            self.copyFrom(ctx)

        def FILEPROPERTY(self):
            return self.getToken(TSqlParser.FILEPROPERTY, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFILEPROPERTY" ):
                listener.enterFILEPROPERTY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFILEPROPERTY" ):
                listener.exitFILEPROPERTY(self)


    class IDENT_SEEDContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.table_or_view = None # ExpressionContext
            self.copyFrom(ctx)

        def IDENT_SEED(self):
            return self.getToken(TSqlParser.IDENT_SEED, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIDENT_SEED" ):
                listener.enterIDENT_SEED(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIDENT_SEED" ):
                listener.exitIDENT_SEED(self)


    class IDENTITYContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.datatype = None # Data_typeContext
            self.seed = None # Token
            self.increment = None # Token
            self.copyFrom(ctx)

        def IDENTITY(self):
            return self.getToken(TSqlParser.IDENTITY, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIDENTITY" ):
                listener.enterIDENTITY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIDENTITY" ):
                listener.exitIDENTITY(self)


    class CURRENT_TRANSACTION_IDContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_TRANSACTION_ID(self):
            return self.getToken(TSqlParser.CURRENT_TRANSACTION_ID, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCURRENT_TRANSACTION_ID" ):
                listener.enterCURRENT_TRANSACTION_ID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCURRENT_TRANSACTION_ID" ):
                listener.exitCURRENT_TRANSACTION_ID(self)


    class LTRIMContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.character_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def LTRIM(self):
            return self.getToken(TSqlParser.LTRIM, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLTRIM" ):
                listener.enterLTRIM(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLTRIM" ):
                listener.exitLTRIM(self)


    class ROWCOUNT_BIGContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROWCOUNT_BIG(self):
            return self.getToken(TSqlParser.ROWCOUNT_BIG, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterROWCOUNT_BIG" ):
                listener.enterROWCOUNT_BIG(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitROWCOUNT_BIG" ):
                listener.exitROWCOUNT_BIG(self)


    class CERTENCODEDContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.certid = None # ExpressionContext
            self.copyFrom(ctx)

        def CERTENCODED(self):
            return self.getToken(TSqlParser.CERTENCODED, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCERTENCODED" ):
                listener.enterCERTENCODED(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCERTENCODED" ):
                listener.exitCERTENCODED(self)


    class JSON_VALUEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.expr = None # ExpressionContext
            self.path = None # ExpressionContext
            self.copyFrom(ctx)

        def JSON_VALUE(self):
            return self.getToken(TSqlParser.JSON_VALUE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJSON_VALUE" ):
                listener.enterJSON_VALUE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJSON_VALUE" ):
                listener.exitJSON_VALUE(self)


    class SYSDATETIMEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SYSDATETIME(self):
            return self.getToken(TSqlParser.SYSDATETIME, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSYSDATETIME" ):
                listener.enterSYSDATETIME(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSYSDATETIME" ):
                listener.exitSYSDATETIME(self)


    class CERTPRIVATEKEYContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.certid = None # ExpressionContext
            self.encryption_password = None # ExpressionContext
            self.decryption_pasword = None # ExpressionContext
            self.copyFrom(ctx)

        def CERTPRIVATEKEY(self):
            return self.getToken(TSqlParser.CERTPRIVATEKEY, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCERTPRIVATEKEY" ):
                listener.enterCERTPRIVATEKEY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCERTPRIVATEKEY" ):
                listener.exitCERTPRIVATEKEY(self)


    class SPACEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.integer_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def SPACE_KEYWORD(self):
            return self.getToken(TSqlParser.SPACE_KEYWORD, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSPACE" ):
                listener.enterSPACE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSPACE" ):
                listener.exitSPACE(self)


    class UPPERContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.character_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def UPPER(self):
            return self.getToken(TSqlParser.UPPER, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUPPER" ):
                listener.enterUPPER(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUPPER" ):
                listener.exitUPPER(self)


    class ABSContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.numeric_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def ABS(self):
            return self.getToken(TSqlParser.ABS, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterABS" ):
                listener.enterABS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitABS" ):
                listener.exitABS(self)


    class ISJSONContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.json_expr = None # ExpressionContext
            self.json_type_constraint = None # ExpressionContext
            self.copyFrom(ctx)

        def ISJSON(self):
            return self.getToken(TSqlParser.ISJSON, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterISJSON" ):
                listener.enterISJSON(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitISJSON" ):
                listener.exitISJSON(self)


    class HAS_PERMS_BY_NAMEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.securable = None # ExpressionContext
            self.securable_class = None # ExpressionContext
            self.permission = None # ExpressionContext
            self.sub_securable = None # ExpressionContext
            self.sub_securable_class = None # ExpressionContext
            self.copyFrom(ctx)

        def HAS_PERMS_BY_NAME(self):
            return self.getToken(TSqlParser.HAS_PERMS_BY_NAME, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHAS_PERMS_BY_NAME" ):
                listener.enterHAS_PERMS_BY_NAME(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHAS_PERMS_BY_NAME" ):
                listener.exitHAS_PERMS_BY_NAME(self)


    class SUSER_IDContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.login = None # ExpressionContext
            self.copyFrom(ctx)

        def SUSER_ID(self):
            return self.getToken(TSqlParser.SUSER_ID, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSUSER_ID" ):
                listener.enterSUSER_ID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSUSER_ID" ):
                listener.exitSUSER_ID(self)


    class SCOPE_IDENTITYContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SCOPE_IDENTITY(self):
            return self.getToken(TSqlParser.SCOPE_IDENTITY, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSCOPE_IDENTITY" ):
                listener.enterSCOPE_IDENTITY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSCOPE_IDENTITY" ):
                listener.exitSCOPE_IDENTITY(self)


    class JSON_QUERYContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.expr = None # ExpressionContext
            self.path = None # ExpressionContext
            self.copyFrom(ctx)

        def JSON_QUERY(self):
            return self.getToken(TSqlParser.JSON_QUERY, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJSON_QUERY" ):
                listener.enterJSON_QUERY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJSON_QUERY" ):
                listener.exitJSON_QUERY(self)


    class INDEX_COLContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.table_or_view_name = None # ExpressionContext
            self.index_id = None # ExpressionContext
            self.key_id = None # ExpressionContext
            self.copyFrom(ctx)

        def INDEX_COL(self):
            return self.getToken(TSqlParser.INDEX_COL, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterINDEX_COL" ):
                listener.enterINDEX_COL(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitINDEX_COL" ):
                listener.exitINDEX_COL(self)


    class DATABASE_PRINCIPAL_IDContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.principal_name = None # ExpressionContext
            self.copyFrom(ctx)

        def DATABASE_PRINCIPAL_ID(self):
            return self.getToken(TSqlParser.DATABASE_PRINCIPAL_ID, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDATABASE_PRINCIPAL_ID" ):
                listener.enterDATABASE_PRINCIPAL_ID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDATABASE_PRINCIPAL_ID" ):
                listener.exitDATABASE_PRINCIPAL_ID(self)


    class PATINDEXContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.pattern = None # ExpressionContext
            self.string_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def PATINDEX(self):
            return self.getToken(TSqlParser.PATINDEX, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPATINDEX" ):
                listener.enterPATINDEX(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPATINDEX" ):
                listener.exitPATINDEX(self)


    class FULLTEXTSERVICEPROPERTYContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.property_label = None # ExpressionContext
            self.copyFrom(ctx)

        def FULLTEXTSERVICEPROPERTY(self):
            return self.getToken(TSqlParser.FULLTEXTSERVICEPROPERTY, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFULLTEXTSERVICEPROPERTY" ):
                listener.enterFULLTEXTSERVICEPROPERTY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFULLTEXTSERVICEPROPERTY" ):
                listener.exitFULLTEXTSERVICEPROPERTY(self)


    class SMALLDATETIMEFROMPARTSContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.year = None # ExpressionContext
            self.month = None # ExpressionContext
            self.day = None # ExpressionContext
            self.hour = None # ExpressionContext
            self.minute = None # ExpressionContext
            self.copyFrom(ctx)

        def SMALLDATETIMEFROMPARTS(self):
            return self.getToken(TSqlParser.SMALLDATETIMEFROMPARTS, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSMALLDATETIMEFROMPARTS" ):
                listener.enterSMALLDATETIMEFROMPARTS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSMALLDATETIMEFROMPARTS" ):
                listener.exitSMALLDATETIMEFROMPARTS(self)


    class IDENT_CURRENTContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.table_or_view = None # ExpressionContext
            self.copyFrom(ctx)

        def IDENT_CURRENT(self):
            return self.getToken(TSqlParser.IDENT_CURRENT, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIDENT_CURRENT" ):
                listener.enterIDENT_CURRENT(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIDENT_CURRENT" ):
                listener.exitIDENT_CURRENT(self)


    class SESSIONPROPERTYContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.option_name = None # ExpressionContext
            self.copyFrom(ctx)

        def SESSIONPROPERTY(self):
            return self.getToken(TSqlParser.SESSIONPROPERTY, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSESSIONPROPERTY" ):
                listener.enterSESSIONPROPERTY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSESSIONPROPERTY" ):
                listener.exitSESSIONPROPERTY(self)


    class FETCH_STATUSContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FETCH_STATUS(self):
            return self.getToken(TSqlParser.FETCH_STATUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFETCH_STATUS" ):
                listener.enterFETCH_STATUS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFETCH_STATUS" ):
                listener.exitFETCH_STATUS(self)


    class POWERContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.float_expression = None # ExpressionContext
            self.y = None # ExpressionContext
            self.copyFrom(ctx)

        def POWER(self):
            return self.getToken(TSqlParser.POWER, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPOWER" ):
                listener.enterPOWER(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPOWER" ):
                listener.exitPOWER(self)


    class REPLICATEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.string_expression = None # ExpressionContext
            self.integer_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def REPLICATE(self):
            return self.getToken(TSqlParser.REPLICATE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterREPLICATE" ):
                listener.enterREPLICATE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitREPLICATE" ):
                listener.exitREPLICATE(self)


    class USER_NAMEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.id_label = None # ExpressionContext
            self.copyFrom(ctx)

        def USER_NAME(self):
            return self.getToken(TSqlParser.USER_NAME, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUSER_NAME" ):
                listener.enterUSER_NAME(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUSER_NAME" ):
                listener.exitUSER_NAME(self)


    class OBJECT_DEFINITIONContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.object_id = None # ExpressionContext
            self.copyFrom(ctx)

        def OBJECT_DEFINITION(self):
            return self.getToken(TSqlParser.OBJECT_DEFINITION, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOBJECT_DEFINITION" ):
                listener.enterOBJECT_DEFINITION(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOBJECT_DEFINITION" ):
                listener.exitOBJECT_DEFINITION(self)


    class IS_SRVROLEMEMBERContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.role = None # ExpressionContext
            self.login = None # ExpressionContext
            self.copyFrom(ctx)

        def IS_SRVROLEMEMBER(self):
            return self.getToken(TSqlParser.IS_SRVROLEMEMBER, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIS_SRVROLEMEMBER" ):
                listener.enterIS_SRVROLEMEMBER(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIS_SRVROLEMEMBER" ):
                listener.exitIS_SRVROLEMEMBER(self)


    class NEWSEQUENTIALIDContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEWSEQUENTIALID(self):
            return self.getToken(TSqlParser.NEWSEQUENTIALID, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNEWSEQUENTIALID" ):
                listener.enterNEWSEQUENTIALID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNEWSEQUENTIALID" ):
                listener.exitNEWSEQUENTIALID(self)


    class OBJECT_NAMEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.object_id = None # ExpressionContext
            self.database_id = None # ExpressionContext
            self.copyFrom(ctx)

        def OBJECT_NAME(self):
            return self.getToken(TSqlParser.OBJECT_NAME, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOBJECT_NAME" ):
                listener.enterOBJECT_NAME(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOBJECT_NAME" ):
                listener.exitOBJECT_NAME(self)


    class JSON_PATH_EXISTSContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.value_expression = None # ExpressionContext
            self.sql_json_path = None # ExpressionContext
            self.copyFrom(ctx)

        def JSON_PATH_EXISTS(self):
            return self.getToken(TSqlParser.JSON_PATH_EXISTS, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJSON_PATH_EXISTS" ):
                listener.enterJSON_PATH_EXISTS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJSON_PATH_EXISTS" ):
                listener.exitJSON_PATH_EXISTS(self)


    class PWDCOMPAREContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.clear_text_password = None # ExpressionContext
            self.password_hash = None # ExpressionContext
            self.version = None # ExpressionContext
            self.copyFrom(ctx)

        def PWDCOMPARE(self):
            return self.getToken(TSqlParser.PWDCOMPARE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPWDCOMPARE" ):
                listener.enterPWDCOMPARE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPWDCOMPARE" ):
                listener.exitPWDCOMPARE(self)


    class SCHEMA_IDContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.schema_name = None # ExpressionContext
            self.copyFrom(ctx)

        def SCHEMA_ID(self):
            return self.getToken(TSqlParser.SCHEMA_ID, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSCHEMA_ID" ):
                listener.enterSCHEMA_ID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSCHEMA_ID" ):
                listener.exitSCHEMA_ID(self)


    class OBJECT_SCHEMA_NAMEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.object_id = None # ExpressionContext
            self.database_id = None # ExpressionContext
            self.copyFrom(ctx)

        def OBJECT_SCHEMA_NAME(self):
            return self.getToken(TSqlParser.OBJECT_SCHEMA_NAME, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOBJECT_SCHEMA_NAME" ):
                listener.enterOBJECT_SCHEMA_NAME(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOBJECT_SCHEMA_NAME" ):
                listener.exitOBJECT_SCHEMA_NAME(self)


    class SUSER_SNAMEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.server_user_sid = None # ExpressionContext
            self.copyFrom(ctx)

        def SUSER_NAME(self):
            return self.getToken(TSqlParser.SUSER_NAME, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)

        def SUSER_SNAME(self):
            return self.getToken(TSqlParser.SUSER_SNAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSUSER_SNAME" ):
                listener.enterSUSER_SNAME(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSUSER_SNAME" ):
                listener.exitSUSER_SNAME(self)


    class DB_NAMEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.database_id = None # ExpressionContext
            self.copyFrom(ctx)

        def DB_NAME(self):
            return self.getToken(TSqlParser.DB_NAME, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDB_NAME" ):
                listener.enterDB_NAME(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDB_NAME" ):
                listener.exitDB_NAME(self)


    class SUSER_SIDContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.login = None # ExpressionContext
            self.param2 = None # ExpressionContext
            self.copyFrom(ctx)

        def SUSER_SID(self):
            return self.getToken(TSqlParser.SUSER_SID, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSUSER_SID" ):
                listener.enterSUSER_SID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSUSER_SID" ):
                listener.exitSUSER_SID(self)


    class ASCIIContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.character_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def ASCII(self):
            return self.getToken(TSqlParser.ASCII, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterASCII" ):
                listener.enterASCII(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitASCII" ):
                listener.exitASCII(self)


    class FILE_IDEXContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.file_name = None # ExpressionContext
            self.copyFrom(ctx)

        def FILE_IDEX(self):
            return self.getToken(TSqlParser.FILE_IDEX, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFILE_IDEX" ):
                listener.enterFILE_IDEX(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFILE_IDEX" ):
                listener.exitFILE_IDEX(self)


    class ERROR_SEVERITYContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ERROR_SEVERITY(self):
            return self.getToken(TSqlParser.ERROR_SEVERITY, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterERROR_SEVERITY" ):
                listener.enterERROR_SEVERITY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitERROR_SEVERITY" ):
                listener.exitERROR_SEVERITY(self)


    class REVERSEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.string_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def REVERSE(self):
            return self.getToken(TSqlParser.REVERSE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterREVERSE" ):
                listener.enterREVERSE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitREVERSE" ):
                listener.exitREVERSE(self)


    class ISDATEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ISDATE(self):
            return self.getToken(TSqlParser.ISDATE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterISDATE" ):
                listener.enterISDATE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitISDATE" ):
                listener.exitISDATE(self)


    class REPLACEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.input_label = None # ExpressionContext
            self.replacing = None # ExpressionContext
            self.with_label = None # ExpressionContext
            self.copyFrom(ctx)

        def REPLACE(self):
            return self.getToken(TSqlParser.REPLACE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterREPLACE" ):
                listener.enterREPLACE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitREPLACE" ):
                listener.exitREPLACE(self)


    class CURSOR_STATUSContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.scope = None # Token
            self.cursor = None # ExpressionContext
            self.copyFrom(ctx)

        def CURSOR_STATUS(self):
            return self.getToken(TSqlParser.CURSOR_STATUS, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCURSOR_STATUS" ):
                listener.enterCURSOR_STATUS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCURSOR_STATUS" ):
                listener.exitCURSOR_STATUS(self)


    class MIN_ACTIVE_ROWVERSIONContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MIN_ACTIVE_ROWVERSION(self):
            return self.getToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMIN_ACTIVE_ROWVERSION" ):
                listener.enterMIN_ACTIVE_ROWVERSION(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMIN_ACTIVE_ROWVERSION" ):
                listener.exitMIN_ACTIVE_ROWVERSION(self)


    class HAS_DBACCESSContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.database_name = None # ExpressionContext
            self.copyFrom(ctx)

        def HAS_DBACCESS(self):
            return self.getToken(TSqlParser.HAS_DBACCESS, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHAS_DBACCESS" ):
                listener.enterHAS_DBACCESS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHAS_DBACCESS" ):
                listener.exitHAS_DBACCESS(self)


    class NEXT_VALUE_FORContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.sequence_name = None # Table_nameContext
            self.copyFrom(ctx)

        def NEXT(self):
            return self.getToken(TSqlParser.NEXT, 0)
        def VALUE(self):
            return self.getToken(TSqlParser.VALUE, 0)
        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)
        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)

        def OVER(self):
            return self.getToken(TSqlParser.OVER, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def order_by_clause(self):
            return self.getTypedRuleContext(TSqlParser.Order_by_clauseContext,0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNEXT_VALUE_FOR" ):
                listener.enterNEXT_VALUE_FOR(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNEXT_VALUE_FOR" ):
                listener.exitNEXT_VALUE_FOR(self)


    class FILEGROUP_IDContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.filegroup_name = None # ExpressionContext
            self.copyFrom(ctx)

        def FILEGROUP_ID(self):
            return self.getToken(TSqlParser.FILEGROUP_ID, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFILEGROUP_ID" ):
                listener.enterFILEGROUP_ID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFILEGROUP_ID" ):
                listener.exitFILEGROUP_ID(self)


    class LOWERContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.character_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def LOWER(self):
            return self.getToken(TSqlParser.LOWER, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLOWER" ):
                listener.enterLOWER(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLOWER" ):
                listener.exitLOWER(self)


    class DATENAMEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.datepart = None # Dateparts_15Context
            self.date = None # ExpressionContext
            self.copyFrom(ctx)

        def DATENAME(self):
            return self.getToken(TSqlParser.DATENAME, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def dateparts_15(self):
            return self.getTypedRuleContext(TSqlParser.Dateparts_15Context,0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDATENAME" ):
                listener.enterDATENAME(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDATENAME" ):
                listener.exitDATENAME(self)


    class CEILINGContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.numeric_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def CEILING(self):
            return self.getToken(TSqlParser.CEILING, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCEILING" ):
                listener.enterCEILING(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCEILING" ):
                listener.exitCEILING(self)


    class APPLOCK_TESTContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.database_principal = None # ExpressionContext
            self.resource_name = None # ExpressionContext
            self.lock_mode = None # ExpressionContext
            self.lock_owner = None # ExpressionContext
            self.copyFrom(ctx)

        def APPLOCK_TEST(self):
            return self.getToken(TSqlParser.APPLOCK_TEST, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAPPLOCK_TEST" ):
                listener.enterAPPLOCK_TEST(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAPPLOCK_TEST" ):
                listener.exitAPPLOCK_TEST(self)


    class SINContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.float_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def SIN(self):
            return self.getToken(TSqlParser.SIN, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSIN" ):
                listener.enterSIN(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSIN" ):
                listener.exitSIN(self)


    class TYPE_NAMEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.type_id = None # ExpressionContext
            self.copyFrom(ctx)

        def TYPE_NAME(self):
            return self.getToken(TSqlParser.TYPE_NAME, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTYPE_NAME" ):
                listener.enterTYPE_NAME(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTYPE_NAME" ):
                listener.exitTYPE_NAME(self)


    class SYSUTCDATETIMEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SYSUTCDATETIME(self):
            return self.getToken(TSqlParser.SYSUTCDATETIME, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSYSUTCDATETIME" ):
                listener.enterSYSUTCDATETIME(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSYSUTCDATETIME" ):
                listener.exitSYSUTCDATETIME(self)


    class DATEADDContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.datepart = None # Dateparts_12Context
            self.number = None # ExpressionContext
            self.date = None # ExpressionContext
            self.copyFrom(ctx)

        def DATEADD(self):
            return self.getToken(TSqlParser.DATEADD, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def dateparts_12(self):
            return self.getTypedRuleContext(TSqlParser.Dateparts_12Context,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDATEADD" ):
                listener.enterDATEADD(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDATEADD" ):
                listener.exitDATEADD(self)


    class DATETIMEFROMPARTSContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.year = None # ExpressionContext
            self.month = None # ExpressionContext
            self.day = None # ExpressionContext
            self.hour = None # ExpressionContext
            self.minute = None # ExpressionContext
            self.seconds = None # ExpressionContext
            self.milliseconds = None # ExpressionContext
            self.copyFrom(ctx)

        def DATETIMEFROMPARTS(self):
            return self.getToken(TSqlParser.DATETIMEFROMPARTS, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDATETIMEFROMPARTS" ):
                listener.enterDATETIMEFROMPARTS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDATETIMEFROMPARTS" ):
                listener.exitDATETIMEFROMPARTS(self)


    class ERROR_MESSAGEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ERROR_MESSAGE(self):
            return self.getToken(TSqlParser.ERROR_MESSAGE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterERROR_MESSAGE" ):
                listener.enterERROR_MESSAGE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitERROR_MESSAGE" ):
                listener.exitERROR_MESSAGE(self)


    class FILEGROUPPROPERTYContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.filegroup_name = None # ExpressionContext
            self.property_label = None # ExpressionContext
            self.copyFrom(ctx)

        def FILEGROUPPROPERTY(self):
            return self.getToken(TSqlParser.FILEGROUPPROPERTY, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFILEGROUPPROPERTY" ):
                listener.enterFILEGROUPPROPERTY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFILEGROUPPROPERTY" ):
                listener.exitFILEGROUPPROPERTY(self)


    class EOMONTHContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.start_date = None # ExpressionContext
            self.month_to_add = None # ExpressionContext
            self.copyFrom(ctx)

        def EOMONTH(self):
            return self.getToken(TSqlParser.EOMONTH, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEOMONTH" ):
                listener.enterEOMONTH(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEOMONTH" ):
                listener.exitEOMONTH(self)


    class IDENT_INCRContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.table_or_view = None # ExpressionContext
            self.copyFrom(ctx)

        def IDENT_INCR(self):
            return self.getToken(TSqlParser.IDENT_INCR, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIDENT_INCR" ):
                listener.enterIDENT_INCR(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIDENT_INCR" ):
                listener.exitIDENT_INCR(self)


    class ASINContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.float_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def ASIN(self):
            return self.getToken(TSqlParser.ASIN, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterASIN" ):
                listener.enterASIN(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitASIN" ):
                listener.exitASIN(self)


    class NCHARContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.integer_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def NCHAR(self):
            return self.getToken(TSqlParser.NCHAR, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNCHAR" ):
                listener.enterNCHAR(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNCHAR" ):
                listener.exitNCHAR(self)


    class DIFFERENCEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.character_expression_1 = None # ExpressionContext
            self.character_expression_2 = None # ExpressionContext
            self.copyFrom(ctx)

        def DIFFERENCE(self):
            return self.getToken(TSqlParser.DIFFERENCE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDIFFERENCE" ):
                listener.enterDIFFERENCE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDIFFERENCE" ):
                listener.exitDIFFERENCE(self)


    class CHARINDEXContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.expressionToFind = None # ExpressionContext
            self.expressionToSearch = None # ExpressionContext
            self.start_location = None # ExpressionContext
            self.copyFrom(ctx)

        def CHARINDEX(self):
            return self.getToken(TSqlParser.CHARINDEX, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCHARINDEX" ):
                listener.enterCHARINDEX(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCHARINDEX" ):
                listener.exitCHARINDEX(self)


    class TODATETIMEOFFSETContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.datetime_expression = None # ExpressionContext
            self.timezoneoffset_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def TODATETIMEOFFSET(self):
            return self.getToken(TSqlParser.TODATETIMEOFFSET, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTODATETIMEOFFSET" ):
                listener.enterTODATETIMEOFFSET(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTODATETIMEOFFSET" ):
                listener.exitTODATETIMEOFFSET(self)


    class RADIANSContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.numeric_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def RADIANS(self):
            return self.getToken(TSqlParser.RADIANS, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRADIANS" ):
                listener.enterRADIANS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRADIANS" ):
                listener.exitRADIANS(self)


    class CURRENT_TIMEZONEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_TIMEZONE(self):
            return self.getToken(TSqlParser.CURRENT_TIMEZONE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCURRENT_TIMEZONE" ):
                listener.enterCURRENT_TIMEZONE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCURRENT_TIMEZONE" ):
                listener.exitCURRENT_TIMEZONE(self)


    class COL_LENGTHContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.table = None # ExpressionContext
            self.column = None # ExpressionContext
            self.copyFrom(ctx)

        def COL_LENGTH(self):
            return self.getToken(TSqlParser.COL_LENGTH, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCOL_LENGTH" ):
                listener.enterCOL_LENGTH(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCOL_LENGTH" ):
                listener.exitCOL_LENGTH(self)


    class DATEFROMPARTSContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.year = None # ExpressionContext
            self.month = None # ExpressionContext
            self.day = None # ExpressionContext
            self.copyFrom(ctx)

        def DATEFROMPARTS(self):
            return self.getToken(TSqlParser.DATEFROMPARTS, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDATEFROMPARTS" ):
                listener.enterDATEFROMPARTS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDATEFROMPARTS" ):
                listener.exitDATEFROMPARTS(self)


    class NEWIDContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEWID(self):
            return self.getToken(TSqlParser.NEWID, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNEWID" ):
                listener.enterNEWID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNEWID" ):
                listener.exitNEWID(self)


    class DATETRUNCContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.datepart = None # Dateparts_datetruncContext
            self.date = None # ExpressionContext
            self.copyFrom(ctx)

        def DATETRUNC(self):
            return self.getToken(TSqlParser.DATETRUNC, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def dateparts_datetrunc(self):
            return self.getTypedRuleContext(TSqlParser.Dateparts_datetruncContext,0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDATETRUNC" ):
                listener.enterDATETRUNC(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDATETRUNC" ):
                listener.exitDATETRUNC(self)


    class ISNULLContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def ISNULL(self):
            return self.getToken(TSqlParser.ISNULL, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterISNULL" ):
                listener.enterISNULL(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitISNULL" ):
                listener.exitISNULL(self)


    class JSON_MODIFYContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.expr = None # ExpressionContext
            self.path = None # ExpressionContext
            self.new_value = None # ExpressionContext
            self.copyFrom(ctx)

        def JSON_MODIFY(self):
            return self.getToken(TSqlParser.JSON_MODIFY, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJSON_MODIFY" ):
                listener.enterJSON_MODIFY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJSON_MODIFY" ):
                listener.exitJSON_MODIFY(self)


    class CURRENT_REQUEST_IDContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_REQUEST_ID(self):
            return self.getToken(TSqlParser.CURRENT_REQUEST_ID, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCURRENT_REQUEST_ID" ):
                listener.enterCURRENT_REQUEST_ID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCURRENT_REQUEST_ID" ):
                listener.exitCURRENT_REQUEST_ID(self)


    class IS_MEMBERContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.group_or_role = None # ExpressionContext
            self.copyFrom(ctx)

        def IS_MEMBER(self):
            return self.getToken(TSqlParser.IS_MEMBER, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIS_MEMBER" ):
                listener.enterIS_MEMBER(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIS_MEMBER" ):
                listener.exitIS_MEMBER(self)


    class SERVERPROPERTYContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.property_label = None # ExpressionContext
            self.copyFrom(ctx)

        def SERVERPROPERTY(self):
            return self.getToken(TSqlParser.SERVERPROPERTY, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSERVERPROPERTY" ):
                listener.enterSERVERPROPERTY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSERVERPROPERTY" ):
                listener.exitSERVERPROPERTY(self)


    class SQRTContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.float_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def SQRT(self):
            return self.getToken(TSqlParser.SQRT, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSQRT" ):
                listener.enterSQRT(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSQRT" ):
                listener.exitSQRT(self)


    class ATN2Context(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.float_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def ATN2(self):
            return self.getToken(TSqlParser.ATN2, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterATN2" ):
                listener.enterATN2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitATN2" ):
                listener.exitATN2(self)


    class UNICODEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.ncharacter_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def UNICODE(self):
            return self.getToken(TSqlParser.UNICODE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUNICODE" ):
                listener.enterUNICODE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUNICODE" ):
                listener.exitUNICODE(self)


    class NULLIFContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def NULLIF(self):
            return self.getToken(TSqlParser.NULLIF, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNULLIF" ):
                listener.enterNULLIF(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNULLIF" ):
                listener.exitNULLIF(self)


    class SESSION_USERContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SESSION_USER(self):
            return self.getToken(TSqlParser.SESSION_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSESSION_USER" ):
                listener.enterSESSION_USER(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSESSION_USER" ):
                listener.exitSESSION_USER(self)


    class CASTContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(TSqlParser.CAST, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)
        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCAST" ):
                listener.enterCAST(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCAST" ):
                listener.exitCAST(self)


    class DATETIME2FROMPARTSContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.year = None # ExpressionContext
            self.month = None # ExpressionContext
            self.day = None # ExpressionContext
            self.hour = None # ExpressionContext
            self.minute = None # ExpressionContext
            self.seconds = None # ExpressionContext
            self.fractions = None # ExpressionContext
            self.precision = None # ExpressionContext
            self.copyFrom(ctx)

        def DATETIME2FROMPARTS(self):
            return self.getToken(TSqlParser.DATETIME2FROMPARTS, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDATETIME2FROMPARTS" ):
                listener.enterDATETIME2FROMPARTS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDATETIME2FROMPARTS" ):
                listener.exitDATETIME2FROMPARTS(self)


    class SQUAREContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.float_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def SQUARE(self):
            return self.getToken(TSqlParser.SQUARE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSQUARE" ):
                listener.enterSQUARE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSQUARE" ):
                listener.exitSQUARE(self)


    class LOGContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.float_expression = None # ExpressionContext
            self.base = None # ExpressionContext
            self.copyFrom(ctx)

        def LOG(self):
            return self.getToken(TSqlParser.LOG, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLOG" ):
                listener.enterLOG(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLOG" ):
                listener.exitLOG(self)


    class IIFContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.cond = None # Search_conditionContext
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def IIF(self):
            return self.getToken(TSqlParser.IIF, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIIF" ):
                listener.enterIIF(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIIF" ):
                listener.exitIIF(self)


    class DATEPARTContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.datepart = None # Dateparts_15Context
            self.date = None # ExpressionContext
            self.copyFrom(ctx)

        def DATEPART(self):
            return self.getToken(TSqlParser.DATEPART, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def dateparts_15(self):
            return self.getTypedRuleContext(TSqlParser.Dateparts_15Context,0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDATEPART" ):
                listener.enterDATEPART(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDATEPART" ):
                listener.exitDATEPART(self)


    class CONTEXT_INFOContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTEXT_INFO(self):
            return self.getToken(TSqlParser.CONTEXT_INFO, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCONTEXT_INFO" ):
                listener.enterCONTEXT_INFO(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCONTEXT_INFO" ):
                listener.exitCONTEXT_INFO(self)


    class DATEDIFFContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.datepart = None # Dateparts_12Context
            self.date_first = None # ExpressionContext
            self.date_second = None # ExpressionContext
            self.copyFrom(ctx)

        def DATEDIFF(self):
            return self.getToken(TSqlParser.DATEDIFF, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def dateparts_12(self):
            return self.getTypedRuleContext(TSqlParser.Dateparts_12Context,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDATEDIFF" ):
                listener.enterDATEDIFF(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDATEDIFF" ):
                listener.exitDATEDIFF(self)


    class OBJECTPROPERTYContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.id_label = None # ExpressionContext
            self.property_label = None # ExpressionContext
            self.copyFrom(ctx)

        def OBJECTPROPERTY(self):
            return self.getToken(TSqlParser.OBJECTPROPERTY, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOBJECTPROPERTY" ):
                listener.enterOBJECTPROPERTY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOBJECTPROPERTY" ):
                listener.exitOBJECTPROPERTY(self)


    class CHARContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.integer_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def CHAR(self):
            return self.getToken(TSqlParser.CHAR, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCHAR" ):
                listener.enterCHAR(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCHAR" ):
                listener.exitCHAR(self)


    class STRING_ESCAPEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.text_ = None # ExpressionContext
            self.type_ = None # ExpressionContext
            self.copyFrom(ctx)

        def STRING_ESCAPE(self):
            return self.getToken(TSqlParser.STRING_ESCAPE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSTRING_ESCAPE" ):
                listener.enterSTRING_ESCAPE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSTRING_ESCAPE" ):
                listener.exitSTRING_ESCAPE(self)


    class GETANSINULLContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.database = None # Token
            self.copyFrom(ctx)

        def GETANSINULL(self):
            return self.getToken(TSqlParser.GETANSINULL, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGETANSINULL" ):
                listener.enterGETANSINULL(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGETANSINULL" ):
                listener.exitGETANSINULL(self)


    class SYSTEM_USERContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SYSTEM_USER(self):
            return self.getToken(TSqlParser.SYSTEM_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSYSTEM_USER" ):
                listener.enterSYSTEM_USER(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSYSTEM_USER" ):
                listener.exitSYSTEM_USER(self)


    class OBJECT_IDContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.object_name = None # ExpressionContext
            self.object_type = None # ExpressionContext
            self.copyFrom(ctx)

        def OBJECT_ID(self):
            return self.getToken(TSqlParser.OBJECT_ID, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOBJECT_ID" ):
                listener.enterOBJECT_ID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOBJECT_ID" ):
                listener.exitOBJECT_ID(self)


    class ERROR_PROCEDUREContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ERROR_PROCEDURE(self):
            return self.getToken(TSqlParser.ERROR_PROCEDURE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterERROR_PROCEDURE" ):
                listener.enterERROR_PROCEDURE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitERROR_PROCEDURE" ):
                listener.exitERROR_PROCEDURE(self)


    class QUOTENAMEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.character_string = None # ExpressionContext
            self.quote_character = None # ExpressionContext
            self.copyFrom(ctx)

        def QUOTENAME(self):
            return self.getToken(TSqlParser.QUOTENAME, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQUOTENAME" ):
                listener.enterQUOTENAME(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQUOTENAME" ):
                listener.exitQUOTENAME(self)


    class RIGHTContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.character_expression = None # ExpressionContext
            self.integer_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def RIGHT(self):
            return self.getToken(TSqlParser.RIGHT, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRIGHT" ):
                listener.enterRIGHT(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRIGHT" ):
                listener.exitRIGHT(self)


    class HOST_IDContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HOST_ID(self):
            return self.getToken(TSqlParser.HOST_ID, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHOST_ID" ):
                listener.enterHOST_ID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHOST_ID" ):
                listener.exitHOST_ID(self)


    class DATETIMEOFFSETFROMPARTSContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.year = None # ExpressionContext
            self.month = None # ExpressionContext
            self.day = None # ExpressionContext
            self.hour = None # ExpressionContext
            self.minute = None # ExpressionContext
            self.seconds = None # ExpressionContext
            self.fractions = None # ExpressionContext
            self.hour_offset = None # ExpressionContext
            self.minute_offset = None # ExpressionContext
            self.precision = None # Token
            self.copyFrom(ctx)

        def DATETIMEOFFSETFROMPARTS(self):
            return self.getToken(TSqlParser.DATETIMEOFFSETFROMPARTS, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDATETIMEOFFSETFROMPARTS" ):
                listener.enterDATETIMEOFFSETFROMPARTS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDATETIMEOFFSETFROMPARTS" ):
                listener.exitDATETIMEOFFSETFROMPARTS(self)


    class COSContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.float_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def COS(self):
            return self.getToken(TSqlParser.COS, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCOS" ):
                listener.enterCOS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCOS" ):
                listener.exitCOS(self)


    class COTContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.float_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def COT(self):
            return self.getToken(TSqlParser.COT, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCOT" ):
                listener.enterCOT(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCOT" ):
                listener.exitCOT(self)


    class FILE_IDContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.file_name = None # ExpressionContext
            self.copyFrom(ctx)

        def FILE_ID(self):
            return self.getToken(TSqlParser.FILE_ID, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFILE_ID" ):
                listener.enterFILE_ID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFILE_ID" ):
                listener.exitFILE_ID(self)


    class ASSEMBLYPROPERTYContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.assembly_name = None # ExpressionContext
            self.property_name = None # ExpressionContext
            self.copyFrom(ctx)

        def ASSEMBLYPROPERTY(self):
            return self.getToken(TSqlParser.ASSEMBLYPROPERTY, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterASSEMBLYPROPERTY" ):
                listener.enterASSEMBLYPROPERTY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitASSEMBLYPROPERTY" ):
                listener.exitASSEMBLYPROPERTY(self)


    class STUFFContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.str_label = None # ExpressionContext
            self.from_label = None # ExpressionContext
            self.to = None # ExpressionContext
            self.str_with = None # ExpressionContext
            self.copyFrom(ctx)

        def STUFF(self):
            return self.getToken(TSqlParser.STUFF, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSTUFF" ):
                listener.enterSTUFF(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSTUFF" ):
                listener.exitSTUFF(self)


    class IS_ROLEMEMBERContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.role = None # ExpressionContext
            self.database_principal = None # ExpressionContext
            self.copyFrom(ctx)

        def IS_ROLEMEMBER(self):
            return self.getToken(TSqlParser.IS_ROLEMEMBER, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIS_ROLEMEMBER" ):
                listener.enterIS_ROLEMEMBER(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIS_ROLEMEMBER" ):
                listener.exitIS_ROLEMEMBER(self)


    class SQL_VARIANT_PROPERTYContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.expr = None # ExpressionContext
            self.property_label = None # Token
            self.copyFrom(ctx)

        def SQL_VARIANT_PROPERTY(self):
            return self.getToken(TSqlParser.SQL_VARIANT_PROPERTY, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSQL_VARIANT_PROPERTY" ):
                listener.enterSQL_VARIANT_PROPERTY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSQL_VARIANT_PROPERTY" ):
                listener.exitSQL_VARIANT_PROPERTY(self)


    class GREATESTContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GREATEST(self):
            return self.getToken(TSqlParser.GREATEST, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def expression_list_(self):
            return self.getTypedRuleContext(TSqlParser.Expression_list_Context,0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGREATEST" ):
                listener.enterGREATEST(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGREATEST" ):
                listener.exitGREATEST(self)


    class GETUTCDATEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GETUTCDATE(self):
            return self.getToken(TSqlParser.GETUTCDATE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGETUTCDATE" ):
                listener.enterGETUTCDATE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGETUTCDATE" ):
                listener.exitGETUTCDATE(self)


    class LOGINPROPERTYContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.login_name = None # ExpressionContext
            self.property_name = None # ExpressionContext
            self.copyFrom(ctx)

        def LOGINPROPERTY(self):
            return self.getToken(TSqlParser.LOGINPROPERTY, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLOGINPROPERTY" ):
                listener.enterLOGINPROPERTY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLOGINPROPERTY" ):
                listener.exitLOGINPROPERTY(self)


    class CONCAT_WSContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.separator = None # ExpressionContext
            self.argument_1 = None # ExpressionContext
            self.argument_2 = None # ExpressionContext
            self._expression = None # ExpressionContext
            self.argument_n = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def CONCAT_WS(self):
            return self.getToken(TSqlParser.CONCAT_WS, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCONCAT_WS" ):
                listener.enterCONCAT_WS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCONCAT_WS" ):
                listener.exitCONCAT_WS(self)


    class ERROR_STATEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ERROR_STATE(self):
            return self.getToken(TSqlParser.ERROR_STATE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterERROR_STATE" ):
                listener.enterERROR_STATE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitERROR_STATE" ):
                listener.exitERROR_STATE(self)


    class DAYContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.date = None # ExpressionContext
            self.copyFrom(ctx)

        def DAY(self):
            return self.getToken(TSqlParser.DAY, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDAY" ):
                listener.enterDAY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDAY" ):
                listener.exitDAY(self)


    class PARSENAMEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.object_name = None # ExpressionContext
            self.object_piece = None # ExpressionContext
            self.copyFrom(ctx)

        def PARSENAME(self):
            return self.getToken(TSqlParser.PARSENAME, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPARSENAME" ):
                listener.enterPARSENAME(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPARSENAME" ):
                listener.exitPARSENAME(self)


    class TANContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.float_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def TAN(self):
            return self.getToken(TSqlParser.TAN, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTAN" ):
                listener.enterTAN(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTAN" ):
                listener.exitTAN(self)


    class CURRENT_USERContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_USER(self):
            return self.getToken(TSqlParser.CURRENT_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCURRENT_USER" ):
                listener.enterCURRENT_USER(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCURRENT_USER" ):
                listener.exitCURRENT_USER(self)


    class PERMISSIONSContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.object_id = None # ExpressionContext
            self.column = None # ExpressionContext
            self.copyFrom(ctx)

        def PERMISSIONS(self):
            return self.getToken(TSqlParser.PERMISSIONS, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPERMISSIONS" ):
                listener.enterPERMISSIONS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPERMISSIONS" ):
                listener.exitPERMISSIONS(self)


    class SYSDATETIMEOFFSETContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SYSDATETIMEOFFSET(self):
            return self.getToken(TSqlParser.SYSDATETIMEOFFSET, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSYSDATETIMEOFFSET" ):
                listener.enterSYSDATETIMEOFFSET(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSYSDATETIMEOFFSET" ):
                listener.exitSYSDATETIMEOFFSET(self)


    class INDEXPROPERTYContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.object_id = None # ExpressionContext
            self.index_or_statistics_name = None # ExpressionContext
            self.property_label = None # ExpressionContext
            self.copyFrom(ctx)

        def INDEXPROPERTY(self):
            return self.getToken(TSqlParser.INDEXPROPERTY, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterINDEXPROPERTY" ):
                listener.enterINDEXPROPERTY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitINDEXPROPERTY" ):
                listener.exitINDEXPROPERTY(self)


    class OBJECTPROPERTYEXContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.id_label = None # ExpressionContext
            self.property_label = None # ExpressionContext
            self.copyFrom(ctx)

        def OBJECTPROPERTYEX(self):
            return self.getToken(TSqlParser.OBJECTPROPERTYEX, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOBJECTPROPERTYEX" ):
                listener.enterOBJECTPROPERTYEX(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOBJECTPROPERTYEX" ):
                listener.exitOBJECTPROPERTYEX(self)


    class SUBSTRINGContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.string_expression = None # ExpressionContext
            self.start_ = None # ExpressionContext
            self.length = None # ExpressionContext
            self.copyFrom(ctx)

        def SUBSTRING(self):
            return self.getToken(TSqlParser.SUBSTRING, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSUBSTRING" ):
                listener.enterSUBSTRING(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSUBSTRING" ):
                listener.exitSUBSTRING(self)


    class BINARY_CHECKSUMContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.star = None # Token
            self.copyFrom(ctx)

        def BINARY_CHECKSUM(self):
            return self.getToken(TSqlParser.BINARY_CHECKSUM, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def STAR(self):
            return self.getToken(TSqlParser.STAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBINARY_CHECKSUM" ):
                listener.enterBINARY_CHECKSUM(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBINARY_CHECKSUM" ):
                listener.exitBINARY_CHECKSUM(self)


    class INDEXKEY_PROPERTYContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.object_id = None # ExpressionContext
            self.index_id = None # ExpressionContext
            self.key_id = None # ExpressionContext
            self.property_label = None # ExpressionContext
            self.copyFrom(ctx)

        def INDEXKEY_PROPERTY(self):
            return self.getToken(TSqlParser.INDEXKEY_PROPERTY, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterINDEXKEY_PROPERTY" ):
                listener.enterINDEXKEY_PROPERTY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitINDEXKEY_PROPERTY" ):
                listener.exitINDEXKEY_PROPERTY(self)


    class PWDENCRYPTContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.password = None # ExpressionContext
            self.copyFrom(ctx)

        def PWDENCRYPT(self):
            return self.getToken(TSqlParser.PWDENCRYPT, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPWDENCRYPT" ):
                listener.enterPWDENCRYPT(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPWDENCRYPT" ):
                listener.exitPWDENCRYPT(self)


    class COMPRESSContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.expr = None # ExpressionContext
            self.copyFrom(ctx)

        def COMPRESS(self):
            return self.getToken(TSqlParser.COMPRESS, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCOMPRESS" ):
                listener.enterCOMPRESS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCOMPRESS" ):
                listener.exitCOMPRESS(self)


    class COALESCEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COALESCE(self):
            return self.getToken(TSqlParser.COALESCE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def expression_list_(self):
            return self.getTypedRuleContext(TSqlParser.Expression_list_Context,0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCOALESCE" ):
                listener.enterCOALESCE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCOALESCE" ):
                listener.exitCOALESCE(self)


    class STATS_DATEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.object_id = None # ExpressionContext
            self.stats_id = None # ExpressionContext
            self.copyFrom(ctx)

        def STATS_DATE(self):
            return self.getToken(TSqlParser.STATS_DATE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSTATS_DATE" ):
                listener.enterSTATS_DATE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSTATS_DATE" ):
                listener.exitSTATS_DATE(self)


    class ISNUMERICContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ISNUMERIC(self):
            return self.getToken(TSqlParser.ISNUMERIC, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterISNUMERIC" ):
                listener.enterISNUMERIC(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitISNUMERIC" ):
                listener.exitISNUMERIC(self)


    class ACOSContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.float_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def ACOS(self):
            return self.getToken(TSqlParser.ACOS, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterACOS" ):
                listener.enterACOS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitACOS" ):
                listener.exitACOS(self)


    class FILEGROUP_NAMEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.filegroup_id = None # ExpressionContext
            self.copyFrom(ctx)

        def FILEGROUP_NAME(self):
            return self.getToken(TSqlParser.FILEGROUP_NAME, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFILEGROUP_NAME" ):
                listener.enterFILEGROUP_NAME(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFILEGROUP_NAME" ):
                listener.exitFILEGROUP_NAME(self)


    class COLUMNPROPERTYContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.id_label = None # ExpressionContext
            self.column = None # ExpressionContext
            self.property_label = None # ExpressionContext
            self.copyFrom(ctx)

        def COLUMNPROPERTY(self):
            return self.getToken(TSqlParser.COLUMNPROPERTY, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCOLUMNPROPERTY" ):
                listener.enterCOLUMNPROPERTY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCOLUMNPROPERTY" ):
                listener.exitCOLUMNPROPERTY(self)


    class DB_IDContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.database_name = None # ExpressionContext
            self.copyFrom(ctx)

        def DB_ID(self):
            return self.getToken(TSqlParser.DB_ID, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDB_ID" ):
                listener.enterDB_ID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDB_ID" ):
                listener.exitDB_ID(self)


    class SOUNDEXContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.character_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def SOUNDEX(self):
            return self.getToken(TSqlParser.SOUNDEX, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSOUNDEX" ):
                listener.enterSOUNDEX(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSOUNDEX" ):
                listener.exitSOUNDEX(self)


    class CURSOR_ROWSContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURSOR_ROWS(self):
            return self.getToken(TSqlParser.CURSOR_ROWS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCURSOR_ROWS" ):
                listener.enterCURSOR_ROWS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCURSOR_ROWS" ):
                listener.exitCURSOR_ROWS(self)


    class FULLTEXTCATALOGPROPERTYContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.catalog_name = None # ExpressionContext
            self.property_label = None # ExpressionContext
            self.copyFrom(ctx)

        def FULLTEXTCATALOGPROPERTY(self):
            return self.getToken(TSqlParser.FULLTEXTCATALOGPROPERTY, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFULLTEXTCATALOGPROPERTY" ):
                listener.enterFULLTEXTCATALOGPROPERTY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFULLTEXTCATALOGPROPERTY" ):
                listener.exitFULLTEXTCATALOGPROPERTY(self)


    class TYPEPROPERTYContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.type_label = None # ExpressionContext
            self.property_label = None # ExpressionContext
            self.copyFrom(ctx)

        def TYPEPROPERTY(self):
            return self.getToken(TSqlParser.TYPEPROPERTY, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTYPEPROPERTY" ):
                listener.enterTYPEPROPERTY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTYPEPROPERTY" ):
                listener.exitTYPEPROPERTY(self)


    class SCHEMA_NAMEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.schema_id = None # ExpressionContext
            self.copyFrom(ctx)

        def SCHEMA_NAME(self):
            return self.getToken(TSqlParser.SCHEMA_NAME, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSCHEMA_NAME" ):
                listener.enterSCHEMA_NAME(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSCHEMA_NAME" ):
                listener.exitSCHEMA_NAME(self)


    class TYPE_IDContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.type_name = None # ExpressionContext
            self.copyFrom(ctx)

        def TYPE_ID(self):
            return self.getToken(TSqlParser.TYPE_ID, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTYPE_ID" ):
                listener.enterTYPE_ID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTYPE_ID" ):
                listener.exitTYPE_ID(self)


    class TRY_CASTContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRY_CAST(self):
            return self.getToken(TSqlParser.TRY_CAST, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)
        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTRY_CAST" ):
                listener.enterTRY_CAST(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTRY_CAST" ):
                listener.exitTRY_CAST(self)


    class APPLOCK_MODEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.database_principal = None # ExpressionContext
            self.resource_name = None # ExpressionContext
            self.lock_owner = None # ExpressionContext
            self.copyFrom(ctx)

        def APPLOCK_MODE(self):
            return self.getToken(TSqlParser.APPLOCK_MODE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAPPLOCK_MODE" ):
                listener.enterAPPLOCK_MODE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAPPLOCK_MODE" ):
                listener.exitAPPLOCK_MODE(self)


    class CURRENT_DATEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(TSqlParser.CURRENT_DATE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCURRENT_DATE" ):
                listener.enterCURRENT_DATE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCURRENT_DATE" ):
                listener.exitCURRENT_DATE(self)


    class GETDATEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GETDATE(self):
            return self.getToken(TSqlParser.GETDATE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGETDATE" ):
                listener.enterGETDATE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGETDATE" ):
                listener.exitGETDATE(self)


    class CERT_IDContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.cert_name = None # ExpressionContext
            self.copyFrom(ctx)

        def CERT_ID(self):
            return self.getToken(TSqlParser.CERT_ID, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCERT_ID" ):
                listener.enterCERT_ID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCERT_ID" ):
                listener.exitCERT_ID(self)


    class ATANContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.float_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def ATAN(self):
            return self.getToken(TSqlParser.ATAN, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterATAN" ):
                listener.enterATAN(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitATAN" ):
                listener.exitATAN(self)


    class CONNECTIONPROPERTYContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.property_label = None # Token
            self.copyFrom(ctx)

        def CONNECTIONPROPERTY(self):
            return self.getToken(TSqlParser.CONNECTIONPROPERTY, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCONNECTIONPROPERTY" ):
                listener.enterCONNECTIONPROPERTY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCONNECTIONPROPERTY" ):
                listener.exitCONNECTIONPROPERTY(self)


    class ERROR_NUMBERContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ERROR_NUMBER(self):
            return self.getToken(TSqlParser.ERROR_NUMBER, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterERROR_NUMBER" ):
                listener.enterERROR_NUMBER(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitERROR_NUMBER" ):
                listener.exitERROR_NUMBER(self)


    class ERROR_LINEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ERROR_LINE(self):
            return self.getToken(TSqlParser.ERROR_LINE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterERROR_LINE" ):
                listener.enterERROR_LINE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitERROR_LINE" ):
                listener.exitERROR_LINE(self)


    class CURRENT_TIMESTAMPContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(TSqlParser.CURRENT_TIMESTAMP, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCURRENT_TIMESTAMP" ):
                listener.enterCURRENT_TIMESTAMP(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCURRENT_TIMESTAMP" ):
                listener.exitCURRENT_TIMESTAMP(self)


    class CONCATContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.string_value_1 = None # ExpressionContext
            self.string_value_2 = None # ExpressionContext
            self._expression = None # ExpressionContext
            self.string_value_n = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def CONCAT(self):
            return self.getToken(TSqlParser.CONCAT, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCONCAT" ):
                listener.enterCONCAT(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCONCAT" ):
                listener.exitCONCAT(self)


    class JSON_ARRAYContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JSON_ARRAY(self):
            return self.getToken(TSqlParser.JSON_ARRAY, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression_list_(self):
            return self.getTypedRuleContext(TSqlParser.Expression_list_Context,0)

        def json_null_clause(self):
            return self.getTypedRuleContext(TSqlParser.Json_null_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJSON_ARRAY" ):
                listener.enterJSON_ARRAY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJSON_ARRAY" ):
                listener.exitJSON_ARRAY(self)


    class ROUNDContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.numeric_expression = None # ExpressionContext
            self.length = None # ExpressionContext
            self.function = None # ExpressionContext
            self.copyFrom(ctx)

        def ROUND(self):
            return self.getToken(TSqlParser.ROUND, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterROUND" ):
                listener.enterROUND(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitROUND" ):
                listener.exitROUND(self)


    class DATALENGTHContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATALENGTH(self):
            return self.getToken(TSqlParser.DATALENGTH, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDATALENGTH" ):
                listener.enterDATALENGTH(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDATALENGTH" ):
                listener.exitDATALENGTH(self)


    class HOST_NAMEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HOST_NAME(self):
            return self.getToken(TSqlParser.HOST_NAME, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHOST_NAME" ):
                listener.enterHOST_NAME(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHOST_NAME" ):
                listener.exitHOST_NAME(self)


    class DATABASEPROPERTYEXContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.database = None # ExpressionContext
            self.property_label = None # ExpressionContext
            self.copyFrom(ctx)

        def DATABASEPROPERTYEX(self):
            return self.getToken(TSqlParser.DATABASEPROPERTYEX, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDATABASEPROPERTYEX" ):
                listener.enterDATABASEPROPERTYEX(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDATABASEPROPERTYEX" ):
                listener.exitDATABASEPROPERTYEX(self)


    class ORIGINAL_DB_NAMEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ORIGINAL_DB_NAME(self):
            return self.getToken(TSqlParser.ORIGINAL_DB_NAME, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterORIGINAL_DB_NAME" ):
                listener.enterORIGINAL_DB_NAME(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitORIGINAL_DB_NAME" ):
                listener.exitORIGINAL_DB_NAME(self)


    class FILEPROPERTYEXContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.name = None # ExpressionContext
            self.property_label = None # ExpressionContext
            self.copyFrom(ctx)

        def FILEPROPERTYEX(self):
            return self.getToken(TSqlParser.FILEPROPERTYEX, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFILEPROPERTYEX" ):
                listener.enterFILEPROPERTYEX(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFILEPROPERTYEX" ):
                listener.exitFILEPROPERTYEX(self)


    class RTRIMContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.character_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def RTRIM(self):
            return self.getToken(TSqlParser.RTRIM, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRTRIM" ):
                listener.enterRTRIM(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRTRIM" ):
                listener.exitRTRIM(self)


    class JSON_OBJECTContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.key_value = None # Json_key_valueContext
            self.copyFrom(ctx)

        def JSON_OBJECT(self):
            return self.getToken(TSqlParser.JSON_OBJECT, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def json_null_clause(self):
            return self.getTypedRuleContext(TSqlParser.Json_null_clauseContext,0)

        def json_key_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Json_key_valueContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Json_key_valueContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJSON_OBJECT" ):
                listener.enterJSON_OBJECT(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJSON_OBJECT" ):
                listener.exitJSON_OBJECT(self)


    class XACT_STATEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def XACT_STATE(self):
            return self.getToken(TSqlParser.XACT_STATE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXACT_STATE" ):
                listener.enterXACT_STATE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXACT_STATE" ):
                listener.exitXACT_STATE(self)


    class FORMATMESSAGEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.msg_number = None # Token
            self.msg_string = None # Token
            self.msg_variable = None # Token
            self.copyFrom(ctx)

        def FORMATMESSAGE(self):
            return self.getToken(TSqlParser.FORMATMESSAGE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)
        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)
        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFORMATMESSAGE" ):
                listener.enterFORMATMESSAGE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFORMATMESSAGE" ):
                listener.exitFORMATMESSAGE(self)


    class DATEDIFF_BIGContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.datepart = None # Dateparts_12Context
            self.startdate = None # ExpressionContext
            self.enddate = None # ExpressionContext
            self.copyFrom(ctx)

        def DATEDIFF_BIG(self):
            return self.getToken(TSqlParser.DATEDIFF_BIG, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def dateparts_12(self):
            return self.getTypedRuleContext(TSqlParser.Dateparts_12Context,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDATEDIFF_BIG" ):
                listener.enterDATEDIFF_BIG(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDATEDIFF_BIG" ):
                listener.exitDATEDIFF_BIG(self)


    class USERContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USER(self):
            return self.getToken(TSqlParser.USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUSER" ):
                listener.enterUSER(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUSER" ):
                listener.exitUSER(self)


    class DEGREESContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.numeric_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def DEGREES(self):
            return self.getToken(TSqlParser.DEGREES, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDEGREES" ):
                listener.enterDEGREES(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDEGREES" ):
                listener.exitDEGREES(self)


    class LENContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.string_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def LEN(self):
            return self.getToken(TSqlParser.LEN, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLEN" ):
                listener.enterLEN(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLEN" ):
                listener.exitLEN(self)


    class TRANSLATEContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.inputString = None # ExpressionContext
            self.characters = None # ExpressionContext
            self.translations = None # ExpressionContext
            self.copyFrom(ctx)

        def TRANSLATE(self):
            return self.getToken(TSqlParser.TRANSLATE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTRANSLATE" ):
                listener.enterTRANSLATE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTRANSLATE" ):
                listener.exitTRANSLATE(self)


    class SWITCHOFFSETContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.datetimeoffset_expression = None # ExpressionContext
            self.timezoneoffset_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def SWITCHOFFSET(self):
            return self.getToken(TSqlParser.SWITCHOFFSET, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSWITCHOFFSET" ):
                listener.enterSWITCHOFFSET(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSWITCHOFFSET" ):
                listener.exitSWITCHOFFSET(self)


    class PIContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PI(self):
            return self.getToken(TSqlParser.PI, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPI" ):
                listener.enterPI(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPI" ):
                listener.exitPI(self)


    class DATE_BUCKETContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.datepart = None # Dateparts_9Context
            self.number = None # ExpressionContext
            self.date = None # ExpressionContext
            self.origin = None # ExpressionContext
            self.copyFrom(ctx)

        def DATE_BUCKET(self):
            return self.getToken(TSqlParser.DATE_BUCKET, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def dateparts_9(self):
            return self.getTypedRuleContext(TSqlParser.Dateparts_9Context,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDATE_BUCKET" ):
                listener.enterDATE_BUCKET(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDATE_BUCKET" ):
                listener.exitDATE_BUCKET(self)


    class EXPContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.float_expression = None # ExpressionContext
            self.copyFrom(ctx)

        def EXP(self):
            return self.getToken(TSqlParser.EXP, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEXP" ):
                listener.enterEXP(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEXP" ):
                listener.exitEXP(self)


    class STRINGAGGContext(Built_in_functionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Built_in_functionsContext
            super().__init__(parser)
            self.expr = None # ExpressionContext
            self.separator = None # ExpressionContext
            self.copyFrom(ctx)

        def STRING_AGG(self):
            return self.getToken(TSqlParser.STRING_AGG, 0)
        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def WITHIN(self):
            return self.getToken(TSqlParser.WITHIN, 0)
        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)
        def order_by_clause(self):
            return self.getTypedRuleContext(TSqlParser.Order_by_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSTRINGAGG" ):
                listener.enterSTRINGAGG(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSTRINGAGG" ):
                listener.exitSTRINGAGG(self)



    def built_in_functions(self):

        localctx = TSqlParser.Built_in_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1048, self.RULE_built_in_functions)
        self._la = 0 # Token type
        try:
            self.state = 13515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1707,self._ctx)
            if la_ == 1:
                localctx = TSqlParser.APP_NAMEContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 12169
                self.match(TSqlParser.APP_NAME)
                self.state = 12170
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12171
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                localctx = TSqlParser.APPLOCK_MODEContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 12172
                self.match(TSqlParser.APPLOCK_MODE)
                self.state = 12173
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12174
                localctx.database_principal = self.expression(0)
                self.state = 12175
                self.match(TSqlParser.COMMA)
                self.state = 12176
                localctx.resource_name = self.expression(0)
                self.state = 12177
                self.match(TSqlParser.COMMA)
                self.state = 12178
                localctx.lock_owner = self.expression(0)
                self.state = 12179
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                localctx = TSqlParser.APPLOCK_TESTContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 12181
                self.match(TSqlParser.APPLOCK_TEST)
                self.state = 12182
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12183
                localctx.database_principal = self.expression(0)
                self.state = 12184
                self.match(TSqlParser.COMMA)
                self.state = 12185
                localctx.resource_name = self.expression(0)
                self.state = 12186
                self.match(TSqlParser.COMMA)
                self.state = 12187
                localctx.lock_mode = self.expression(0)
                self.state = 12188
                self.match(TSqlParser.COMMA)
                self.state = 12189
                localctx.lock_owner = self.expression(0)
                self.state = 12190
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                localctx = TSqlParser.ASSEMBLYPROPERTYContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 12192
                self.match(TSqlParser.ASSEMBLYPROPERTY)
                self.state = 12193
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12194
                localctx.assembly_name = self.expression(0)
                self.state = 12195
                self.match(TSqlParser.COMMA)
                self.state = 12196
                localctx.property_name = self.expression(0)
                self.state = 12197
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                localctx = TSqlParser.COL_LENGTHContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 12199
                self.match(TSqlParser.COL_LENGTH)
                self.state = 12200
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12201
                localctx.table = self.expression(0)
                self.state = 12202
                self.match(TSqlParser.COMMA)
                self.state = 12203
                localctx.column = self.expression(0)
                self.state = 12204
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                localctx = TSqlParser.COL_NAMEContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 12206
                self.match(TSqlParser.COL_NAME)
                self.state = 12207
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12208
                localctx.table_id = self.expression(0)
                self.state = 12209
                self.match(TSqlParser.COMMA)
                self.state = 12210
                localctx.column_id = self.expression(0)
                self.state = 12211
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 7:
                localctx = TSqlParser.COLUMNPROPERTYContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 12213
                self.match(TSqlParser.COLUMNPROPERTY)
                self.state = 12214
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12215
                localctx.id_label = self.expression(0)
                self.state = 12216
                self.match(TSqlParser.COMMA)
                self.state = 12217
                localctx.column = self.expression(0)
                self.state = 12218
                self.match(TSqlParser.COMMA)
                self.state = 12219
                localctx.property_label = self.expression(0)
                self.state = 12220
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 8:
                localctx = TSqlParser.DATABASEPROPERTYEXContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 12222
                self.match(TSqlParser.DATABASEPROPERTYEX)
                self.state = 12223
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12224
                localctx.database = self.expression(0)
                self.state = 12225
                self.match(TSqlParser.COMMA)
                self.state = 12226
                localctx.property_label = self.expression(0)
                self.state = 12227
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 9:
                localctx = TSqlParser.DB_IDContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 12229
                self.match(TSqlParser.DB_ID)
                self.state = 12230
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2342234983759889) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -74874560052724233) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8070028319748746719) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387490746373) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8753867308933840637) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755874891096735745) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -864762596778127649) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -138580854017) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18014399105315111) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -650880200401223699) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -378302373530962465) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689505) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906061) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1155)) & ~0x3f) == 0 and ((1 << (_la - 1155)) & 4996391290535303) != 0):
                    self.state = 12231
                    localctx.database_name = self.expression(0)


                self.state = 12234
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = TSqlParser.DB_NAMEContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 12235
                self.match(TSqlParser.DB_NAME)
                self.state = 12236
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2342234983759889) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -74874560052724233) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8070028319748746719) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387490746373) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8753867308933840637) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755874891096735745) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -864762596778127649) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -138580854017) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18014399105315111) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -650880200401223699) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -378302373530962465) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689505) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906061) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1155)) & ~0x3f) == 0 and ((1 << (_la - 1155)) & 4996391290535303) != 0):
                    self.state = 12237
                    localctx.database_id = self.expression(0)


                self.state = 12240
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 11:
                localctx = TSqlParser.FILE_IDContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 12241
                self.match(TSqlParser.FILE_ID)
                self.state = 12242
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12243
                localctx.file_name = self.expression(0)
                self.state = 12244
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 12:
                localctx = TSqlParser.FILE_IDEXContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 12246
                self.match(TSqlParser.FILE_IDEX)
                self.state = 12247
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12248
                localctx.file_name = self.expression(0)
                self.state = 12249
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                localctx = TSqlParser.FILE_NAMEContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 12251
                self.match(TSqlParser.FILE_NAME)
                self.state = 12252
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12253
                localctx.file_id = self.expression(0)
                self.state = 12254
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 14:
                localctx = TSqlParser.FILEGROUP_IDContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 12256
                self.match(TSqlParser.FILEGROUP_ID)
                self.state = 12257
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12258
                localctx.filegroup_name = self.expression(0)
                self.state = 12259
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 15:
                localctx = TSqlParser.FILEGROUP_NAMEContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 12261
                self.match(TSqlParser.FILEGROUP_NAME)
                self.state = 12262
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12263
                localctx.filegroup_id = self.expression(0)
                self.state = 12264
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 16:
                localctx = TSqlParser.FILEGROUPPROPERTYContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 12266
                self.match(TSqlParser.FILEGROUPPROPERTY)
                self.state = 12267
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12268
                localctx.filegroup_name = self.expression(0)
                self.state = 12269
                self.match(TSqlParser.COMMA)
                self.state = 12270
                localctx.property_label = self.expression(0)
                self.state = 12271
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 17:
                localctx = TSqlParser.FILEPROPERTYContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 12273
                self.match(TSqlParser.FILEPROPERTY)
                self.state = 12274
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12275
                localctx.file_name = self.expression(0)
                self.state = 12276
                self.match(TSqlParser.COMMA)
                self.state = 12277
                localctx.property_label = self.expression(0)
                self.state = 12278
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 18:
                localctx = TSqlParser.FILEPROPERTYEXContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 12280
                self.match(TSqlParser.FILEPROPERTYEX)
                self.state = 12281
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12282
                localctx.name = self.expression(0)
                self.state = 12283
                self.match(TSqlParser.COMMA)
                self.state = 12284
                localctx.property_label = self.expression(0)
                self.state = 12285
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 19:
                localctx = TSqlParser.FULLTEXTCATALOGPROPERTYContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 12287
                self.match(TSqlParser.FULLTEXTCATALOGPROPERTY)
                self.state = 12288
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12289
                localctx.catalog_name = self.expression(0)
                self.state = 12290
                self.match(TSqlParser.COMMA)
                self.state = 12291
                localctx.property_label = self.expression(0)
                self.state = 12292
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 20:
                localctx = TSqlParser.FULLTEXTSERVICEPROPERTYContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 12294
                self.match(TSqlParser.FULLTEXTSERVICEPROPERTY)
                self.state = 12295
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12296
                localctx.property_label = self.expression(0)
                self.state = 12297
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 21:
                localctx = TSqlParser.INDEX_COLContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 12299
                self.match(TSqlParser.INDEX_COL)
                self.state = 12300
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12301
                localctx.table_or_view_name = self.expression(0)
                self.state = 12302
                self.match(TSqlParser.COMMA)
                self.state = 12303
                localctx.index_id = self.expression(0)
                self.state = 12304
                self.match(TSqlParser.COMMA)
                self.state = 12305
                localctx.key_id = self.expression(0)
                self.state = 12306
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 22:
                localctx = TSqlParser.INDEXKEY_PROPERTYContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 12308
                self.match(TSqlParser.INDEXKEY_PROPERTY)
                self.state = 12309
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12310
                localctx.object_id = self.expression(0)
                self.state = 12311
                self.match(TSqlParser.COMMA)
                self.state = 12312
                localctx.index_id = self.expression(0)
                self.state = 12313
                self.match(TSqlParser.COMMA)
                self.state = 12314
                localctx.key_id = self.expression(0)
                self.state = 12315
                self.match(TSqlParser.COMMA)
                self.state = 12316
                localctx.property_label = self.expression(0)
                self.state = 12317
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 23:
                localctx = TSqlParser.INDEXPROPERTYContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 12319
                self.match(TSqlParser.INDEXPROPERTY)
                self.state = 12320
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12321
                localctx.object_id = self.expression(0)
                self.state = 12322
                self.match(TSqlParser.COMMA)
                self.state = 12323
                localctx.index_or_statistics_name = self.expression(0)
                self.state = 12324
                self.match(TSqlParser.COMMA)
                self.state = 12325
                localctx.property_label = self.expression(0)
                self.state = 12326
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 24:
                localctx = TSqlParser.NEXT_VALUE_FORContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 12328
                self.match(TSqlParser.NEXT)
                self.state = 12329
                self.match(TSqlParser.VALUE)
                self.state = 12330
                self.match(TSqlParser.FOR)
                self.state = 12331
                localctx.sequence_name = self.table_name()
                self.state = 12337
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1652,self._ctx)
                if la_ == 1:
                    self.state = 12332
                    self.match(TSqlParser.OVER)
                    self.state = 12333
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 12334
                    self.order_by_clause()
                    self.state = 12335
                    self.match(TSqlParser.RR_BRACKET)


                pass

            elif la_ == 25:
                localctx = TSqlParser.OBJECT_DEFINITIONContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 12339
                self.match(TSqlParser.OBJECT_DEFINITION)
                self.state = 12340
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12341
                localctx.object_id = self.expression(0)
                self.state = 12342
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 26:
                localctx = TSqlParser.OBJECT_IDContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 12344
                self.match(TSqlParser.OBJECT_ID)
                self.state = 12345
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12346
                localctx.object_name = self.expression(0)
                self.state = 12349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 12347
                    self.match(TSqlParser.COMMA)
                    self.state = 12348
                    localctx.object_type = self.expression(0)


                self.state = 12351
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 27:
                localctx = TSqlParser.OBJECT_NAMEContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 12353
                self.match(TSqlParser.OBJECT_NAME)
                self.state = 12354
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12355
                localctx.object_id = self.expression(0)
                self.state = 12358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 12356
                    self.match(TSqlParser.COMMA)
                    self.state = 12357
                    localctx.database_id = self.expression(0)


                self.state = 12360
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 28:
                localctx = TSqlParser.OBJECT_SCHEMA_NAMEContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 12362
                self.match(TSqlParser.OBJECT_SCHEMA_NAME)
                self.state = 12363
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12364
                localctx.object_id = self.expression(0)
                self.state = 12367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 12365
                    self.match(TSqlParser.COMMA)
                    self.state = 12366
                    localctx.database_id = self.expression(0)


                self.state = 12369
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 29:
                localctx = TSqlParser.OBJECTPROPERTYContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 12371
                self.match(TSqlParser.OBJECTPROPERTY)
                self.state = 12372
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12373
                localctx.id_label = self.expression(0)
                self.state = 12374
                self.match(TSqlParser.COMMA)
                self.state = 12375
                localctx.property_label = self.expression(0)
                self.state = 12376
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 30:
                localctx = TSqlParser.OBJECTPROPERTYEXContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 12378
                self.match(TSqlParser.OBJECTPROPERTYEX)
                self.state = 12379
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12380
                localctx.id_label = self.expression(0)
                self.state = 12381
                self.match(TSqlParser.COMMA)
                self.state = 12382
                localctx.property_label = self.expression(0)
                self.state = 12383
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 31:
                localctx = TSqlParser.ORIGINAL_DB_NAMEContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 12385
                self.match(TSqlParser.ORIGINAL_DB_NAME)
                self.state = 12386
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12387
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 32:
                localctx = TSqlParser.PARSENAMEContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 12388
                self.match(TSqlParser.PARSENAME)
                self.state = 12389
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12390
                localctx.object_name = self.expression(0)
                self.state = 12391
                self.match(TSqlParser.COMMA)
                self.state = 12392
                localctx.object_piece = self.expression(0)
                self.state = 12393
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 33:
                localctx = TSqlParser.SCHEMA_IDContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 12395
                self.match(TSqlParser.SCHEMA_ID)
                self.state = 12396
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2342234983759889) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -74874560052724233) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8070028319748746719) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387490746373) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8753867308933840637) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755874891096735745) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -864762596778127649) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -138580854017) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18014399105315111) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -650880200401223699) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -378302373530962465) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689505) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906061) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1155)) & ~0x3f) == 0 and ((1 << (_la - 1155)) & 4996391290535303) != 0):
                    self.state = 12397
                    localctx.schema_name = self.expression(0)


                self.state = 12400
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 34:
                localctx = TSqlParser.SCHEMA_NAMEContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 12401
                self.match(TSqlParser.SCHEMA_NAME)
                self.state = 12402
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2342234983759889) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -74874560052724233) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8070028319748746719) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387490746373) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8753867308933840637) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755874891096735745) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -864762596778127649) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -138580854017) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18014399105315111) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -650880200401223699) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -378302373530962465) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689505) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906061) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1155)) & ~0x3f) == 0 and ((1 << (_la - 1155)) & 4996391290535303) != 0):
                    self.state = 12403
                    localctx.schema_id = self.expression(0)


                self.state = 12406
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 35:
                localctx = TSqlParser.SCOPE_IDENTITYContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 12407
                self.match(TSqlParser.SCOPE_IDENTITY)
                self.state = 12408
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12409
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 36:
                localctx = TSqlParser.SERVERPROPERTYContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 12410
                self.match(TSqlParser.SERVERPROPERTY)
                self.state = 12411
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12412
                localctx.property_label = self.expression(0)
                self.state = 12413
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 37:
                localctx = TSqlParser.STATS_DATEContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 12415
                self.match(TSqlParser.STATS_DATE)
                self.state = 12416
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12417
                localctx.object_id = self.expression(0)
                self.state = 12418
                self.match(TSqlParser.COMMA)
                self.state = 12419
                localctx.stats_id = self.expression(0)
                self.state = 12420
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 38:
                localctx = TSqlParser.TYPE_IDContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 12422
                self.match(TSqlParser.TYPE_ID)
                self.state = 12423
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12424
                localctx.type_name = self.expression(0)
                self.state = 12425
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 39:
                localctx = TSqlParser.TYPE_NAMEContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 12427
                self.match(TSqlParser.TYPE_NAME)
                self.state = 12428
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12429
                localctx.type_id = self.expression(0)
                self.state = 12430
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 40:
                localctx = TSqlParser.TYPEPROPERTYContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 12432
                self.match(TSqlParser.TYPEPROPERTY)
                self.state = 12433
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12434
                localctx.type_label = self.expression(0)
                self.state = 12435
                self.match(TSqlParser.COMMA)
                self.state = 12436
                localctx.property_label = self.expression(0)
                self.state = 12437
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 41:
                localctx = TSqlParser.ASCIIContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 12439
                self.match(TSqlParser.ASCII)
                self.state = 12440
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12441
                localctx.character_expression = self.expression(0)
                self.state = 12442
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 42:
                localctx = TSqlParser.CHARContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 12444
                self.match(TSqlParser.CHAR)
                self.state = 12445
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12446
                localctx.integer_expression = self.expression(0)
                self.state = 12447
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 43:
                localctx = TSqlParser.CHARINDEXContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 12449
                self.match(TSqlParser.CHARINDEX)
                self.state = 12450
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12451
                localctx.expressionToFind = self.expression(0)
                self.state = 12452
                self.match(TSqlParser.COMMA)
                self.state = 12453
                localctx.expressionToSearch = self.expression(0)
                self.state = 12456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 12454
                    self.match(TSqlParser.COMMA)
                    self.state = 12455
                    localctx.start_location = self.expression(0)


                self.state = 12458
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 44:
                localctx = TSqlParser.CONCATContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 12460
                self.match(TSqlParser.CONCAT)
                self.state = 12461
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12462
                localctx.string_value_1 = self.expression(0)
                self.state = 12463
                self.match(TSqlParser.COMMA)
                self.state = 12464
                localctx.string_value_2 = self.expression(0)
                self.state = 12469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 12465
                    self.match(TSqlParser.COMMA)
                    self.state = 12466
                    localctx._expression = self.expression(0)
                    localctx.string_value_n.append(localctx._expression)
                    self.state = 12471
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 12472
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 45:
                localctx = TSqlParser.CONCAT_WSContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 12474
                self.match(TSqlParser.CONCAT_WS)
                self.state = 12475
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12476
                localctx.separator = self.expression(0)
                self.state = 12477
                self.match(TSqlParser.COMMA)
                self.state = 12478
                localctx.argument_1 = self.expression(0)
                self.state = 12479
                self.match(TSqlParser.COMMA)
                self.state = 12480
                localctx.argument_2 = self.expression(0)
                self.state = 12485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 12481
                    self.match(TSqlParser.COMMA)
                    self.state = 12482
                    localctx._expression = self.expression(0)
                    localctx.argument_n.append(localctx._expression)
                    self.state = 12487
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 12488
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 46:
                localctx = TSqlParser.DIFFERENCEContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 12490
                self.match(TSqlParser.DIFFERENCE)
                self.state = 12491
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12492
                localctx.character_expression_1 = self.expression(0)
                self.state = 12493
                self.match(TSqlParser.COMMA)
                self.state = 12494
                localctx.character_expression_2 = self.expression(0)
                self.state = 12495
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 47:
                localctx = TSqlParser.FORMATContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 12497
                self.match(TSqlParser.FORMAT)
                self.state = 12498
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12499
                localctx.value = self.expression(0)
                self.state = 12500
                self.match(TSqlParser.COMMA)
                self.state = 12501
                localctx.format_label = self.expression(0)
                self.state = 12504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 12502
                    self.match(TSqlParser.COMMA)
                    self.state = 12503
                    localctx.culture = self.expression(0)


                self.state = 12506
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 48:
                localctx = TSqlParser.LEFTContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 12508
                self.match(TSqlParser.LEFT)
                self.state = 12509
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12510
                localctx.character_expression = self.expression(0)
                self.state = 12511
                self.match(TSqlParser.COMMA)
                self.state = 12512
                localctx.integer_expression = self.expression(0)
                self.state = 12513
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 49:
                localctx = TSqlParser.LENContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 12515
                self.match(TSqlParser.LEN)
                self.state = 12516
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12517
                localctx.string_expression = self.expression(0)
                self.state = 12518
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 50:
                localctx = TSqlParser.LOWERContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 12520
                self.match(TSqlParser.LOWER)
                self.state = 12521
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12522
                localctx.character_expression = self.expression(0)
                self.state = 12523
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 51:
                localctx = TSqlParser.LTRIMContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 12525
                self.match(TSqlParser.LTRIM)
                self.state = 12526
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12527
                localctx.character_expression = self.expression(0)
                self.state = 12528
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 52:
                localctx = TSqlParser.NCHARContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 12530
                self.match(TSqlParser.NCHAR)
                self.state = 12531
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12532
                localctx.integer_expression = self.expression(0)
                self.state = 12533
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 53:
                localctx = TSqlParser.PATINDEXContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 12535
                self.match(TSqlParser.PATINDEX)
                self.state = 12536
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12537
                localctx.pattern = self.expression(0)
                self.state = 12538
                self.match(TSqlParser.COMMA)
                self.state = 12539
                localctx.string_expression = self.expression(0)
                self.state = 12540
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 54:
                localctx = TSqlParser.QUOTENAMEContext(self, localctx)
                self.enterOuterAlt(localctx, 54)
                self.state = 12542
                self.match(TSqlParser.QUOTENAME)
                self.state = 12543
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12544
                localctx.character_string = self.expression(0)
                self.state = 12547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 12545
                    self.match(TSqlParser.COMMA)
                    self.state = 12546
                    localctx.quote_character = self.expression(0)


                self.state = 12549
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 55:
                localctx = TSqlParser.REPLACEContext(self, localctx)
                self.enterOuterAlt(localctx, 55)
                self.state = 12551
                self.match(TSqlParser.REPLACE)
                self.state = 12552
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12553
                localctx.input_label = self.expression(0)
                self.state = 12554
                self.match(TSqlParser.COMMA)
                self.state = 12555
                localctx.replacing = self.expression(0)
                self.state = 12556
                self.match(TSqlParser.COMMA)
                self.state = 12557
                localctx.with_label = self.expression(0)
                self.state = 12558
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 56:
                localctx = TSqlParser.REPLICATEContext(self, localctx)
                self.enterOuterAlt(localctx, 56)
                self.state = 12560
                self.match(TSqlParser.REPLICATE)
                self.state = 12561
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12562
                localctx.string_expression = self.expression(0)
                self.state = 12563
                self.match(TSqlParser.COMMA)
                self.state = 12564
                localctx.integer_expression = self.expression(0)
                self.state = 12565
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 57:
                localctx = TSqlParser.REVERSEContext(self, localctx)
                self.enterOuterAlt(localctx, 57)
                self.state = 12567
                self.match(TSqlParser.REVERSE)
                self.state = 12568
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12569
                localctx.string_expression = self.expression(0)
                self.state = 12570
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 58:
                localctx = TSqlParser.RIGHTContext(self, localctx)
                self.enterOuterAlt(localctx, 58)
                self.state = 12572
                self.match(TSqlParser.RIGHT)
                self.state = 12573
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12574
                localctx.character_expression = self.expression(0)
                self.state = 12575
                self.match(TSqlParser.COMMA)
                self.state = 12576
                localctx.integer_expression = self.expression(0)
                self.state = 12577
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 59:
                localctx = TSqlParser.RTRIMContext(self, localctx)
                self.enterOuterAlt(localctx, 59)
                self.state = 12579
                self.match(TSqlParser.RTRIM)
                self.state = 12580
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12581
                localctx.character_expression = self.expression(0)
                self.state = 12582
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 60:
                localctx = TSqlParser.SOUNDEXContext(self, localctx)
                self.enterOuterAlt(localctx, 60)
                self.state = 12584
                self.match(TSqlParser.SOUNDEX)
                self.state = 12585
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12586
                localctx.character_expression = self.expression(0)
                self.state = 12587
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 61:
                localctx = TSqlParser.SPACEContext(self, localctx)
                self.enterOuterAlt(localctx, 61)
                self.state = 12589
                self.match(TSqlParser.SPACE_KEYWORD)
                self.state = 12590
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12591
                localctx.integer_expression = self.expression(0)
                self.state = 12592
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 62:
                localctx = TSqlParser.STRContext(self, localctx)
                self.enterOuterAlt(localctx, 62)
                self.state = 12594
                self.match(TSqlParser.STR)
                self.state = 12595
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12596
                localctx.float_expression = self.expression(0)
                self.state = 12603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 12597
                    self.match(TSqlParser.COMMA)
                    self.state = 12598
                    localctx.length_expression = self.expression(0)
                    self.state = 12601
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 12599
                        self.match(TSqlParser.COMMA)
                        self.state = 12600
                        localctx.decimal = self.expression(0)




                self.state = 12605
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 63:
                localctx = TSqlParser.STRINGAGGContext(self, localctx)
                self.enterOuterAlt(localctx, 63)
                self.state = 12607
                self.match(TSqlParser.STRING_AGG)
                self.state = 12608
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12609
                localctx.expr = self.expression(0)
                self.state = 12610
                self.match(TSqlParser.COMMA)
                self.state = 12611
                localctx.separator = self.expression(0)
                self.state = 12612
                self.match(TSqlParser.RR_BRACKET)
                self.state = 12619
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1665,self._ctx)
                if la_ == 1:
                    self.state = 12613
                    self.match(TSqlParser.WITHIN)
                    self.state = 12614
                    self.match(TSqlParser.GROUP)
                    self.state = 12615
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 12616
                    self.order_by_clause()
                    self.state = 12617
                    self.match(TSqlParser.RR_BRACKET)


                pass

            elif la_ == 64:
                localctx = TSqlParser.STRING_ESCAPEContext(self, localctx)
                self.enterOuterAlt(localctx, 64)
                self.state = 12621
                self.match(TSqlParser.STRING_ESCAPE)
                self.state = 12622
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12623
                localctx.text_ = self.expression(0)
                self.state = 12624
                self.match(TSqlParser.COMMA)
                self.state = 12625
                localctx.type_ = self.expression(0)
                self.state = 12626
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 65:
                localctx = TSqlParser.STUFFContext(self, localctx)
                self.enterOuterAlt(localctx, 65)
                self.state = 12628
                self.match(TSqlParser.STUFF)
                self.state = 12629
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12630
                localctx.str_label = self.expression(0)
                self.state = 12631
                self.match(TSqlParser.COMMA)
                self.state = 12632
                localctx.from_label = self.expression(0)
                self.state = 12633
                self.match(TSqlParser.COMMA)
                self.state = 12634
                localctx.to = self.expression(0)
                self.state = 12635
                self.match(TSqlParser.COMMA)
                self.state = 12636
                localctx.str_with = self.expression(0)
                self.state = 12637
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 66:
                localctx = TSqlParser.SUBSTRINGContext(self, localctx)
                self.enterOuterAlt(localctx, 66)
                self.state = 12639
                self.match(TSqlParser.SUBSTRING)
                self.state = 12640
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12641
                localctx.string_expression = self.expression(0)
                self.state = 12642
                self.match(TSqlParser.COMMA)
                self.state = 12643
                localctx.start_ = self.expression(0)
                self.state = 12644
                self.match(TSqlParser.COMMA)
                self.state = 12645
                localctx.length = self.expression(0)
                self.state = 12646
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 67:
                localctx = TSqlParser.TRANSLATEContext(self, localctx)
                self.enterOuterAlt(localctx, 67)
                self.state = 12648
                self.match(TSqlParser.TRANSLATE)
                self.state = 12649
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12650
                localctx.inputString = self.expression(0)
                self.state = 12651
                self.match(TSqlParser.COMMA)
                self.state = 12652
                localctx.characters = self.expression(0)
                self.state = 12653
                self.match(TSqlParser.COMMA)
                self.state = 12654
                localctx.translations = self.expression(0)
                self.state = 12655
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 68:
                localctx = TSqlParser.TRIMContext(self, localctx)
                self.enterOuterAlt(localctx, 68)
                self.state = 12657
                self.match(TSqlParser.TRIM)
                self.state = 12658
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12662
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1666,self._ctx)
                if la_ == 1:
                    self.state = 12659
                    localctx.characters = self.expression(0)
                    self.state = 12660
                    self.match(TSqlParser.FROM)


                self.state = 12664
                localctx.string_ = self.expression(0)
                self.state = 12665
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 69:
                localctx = TSqlParser.UNICODEContext(self, localctx)
                self.enterOuterAlt(localctx, 69)
                self.state = 12667
                self.match(TSqlParser.UNICODE)
                self.state = 12668
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12669
                localctx.ncharacter_expression = self.expression(0)
                self.state = 12670
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 70:
                localctx = TSqlParser.UPPERContext(self, localctx)
                self.enterOuterAlt(localctx, 70)
                self.state = 12672
                self.match(TSqlParser.UPPER)
                self.state = 12673
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12674
                localctx.character_expression = self.expression(0)
                self.state = 12675
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 71:
                localctx = TSqlParser.BINARY_CHECKSUMContext(self, localctx)
                self.enterOuterAlt(localctx, 71)
                self.state = 12677
                self.match(TSqlParser.BINARY_CHECKSUM)
                self.state = 12678
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12688
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1198]:
                    self.state = 12679
                    localctx.star = self.match(TSqlParser.STAR)
                    pass
                elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 276, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 377, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 817, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1156, 1157, 1162, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1187, 1191, 1192, 1201, 1202, 1203, 1207]:
                    self.state = 12680
                    self.expression(0)
                    self.state = 12685
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1194:
                        self.state = 12681
                        self.match(TSqlParser.COMMA)
                        self.state = 12682
                        self.expression(0)
                        self.state = 12687
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 12690
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 72:
                localctx = TSqlParser.CHECKSUMContext(self, localctx)
                self.enterOuterAlt(localctx, 72)
                self.state = 12691
                self.match(TSqlParser.CHECKSUM)
                self.state = 12692
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12702
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1198]:
                    self.state = 12693
                    localctx.star = self.match(TSqlParser.STAR)
                    pass
                elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 276, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 377, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 817, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1156, 1157, 1162, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1187, 1191, 1192, 1201, 1202, 1203, 1207]:
                    self.state = 12694
                    self.expression(0)
                    self.state = 12699
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1194:
                        self.state = 12695
                        self.match(TSqlParser.COMMA)
                        self.state = 12696
                        self.expression(0)
                        self.state = 12701
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 12704
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 73:
                localctx = TSqlParser.COMPRESSContext(self, localctx)
                self.enterOuterAlt(localctx, 73)
                self.state = 12705
                self.match(TSqlParser.COMPRESS)
                self.state = 12706
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12707
                localctx.expr = self.expression(0)
                self.state = 12708
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 74:
                localctx = TSqlParser.CONNECTIONPROPERTYContext(self, localctx)
                self.enterOuterAlt(localctx, 74)
                self.state = 12710
                self.match(TSqlParser.CONNECTIONPROPERTY)
                self.state = 12711
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12712
                localctx.property_label = self.match(TSqlParser.STRING)
                self.state = 12713
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 75:
                localctx = TSqlParser.CONTEXT_INFOContext(self, localctx)
                self.enterOuterAlt(localctx, 75)
                self.state = 12714
                self.match(TSqlParser.CONTEXT_INFO)
                self.state = 12715
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12716
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 76:
                localctx = TSqlParser.CURRENT_REQUEST_IDContext(self, localctx)
                self.enterOuterAlt(localctx, 76)
                self.state = 12717
                self.match(TSqlParser.CURRENT_REQUEST_ID)
                self.state = 12718
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12719
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 77:
                localctx = TSqlParser.CURRENT_TRANSACTION_IDContext(self, localctx)
                self.enterOuterAlt(localctx, 77)
                self.state = 12720
                self.match(TSqlParser.CURRENT_TRANSACTION_ID)
                self.state = 12721
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12722
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 78:
                localctx = TSqlParser.DECOMPRESSContext(self, localctx)
                self.enterOuterAlt(localctx, 78)
                self.state = 12723
                self.match(TSqlParser.DECOMPRESS)
                self.state = 12724
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12725
                localctx.expr = self.expression(0)
                self.state = 12726
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 79:
                localctx = TSqlParser.ERROR_LINEContext(self, localctx)
                self.enterOuterAlt(localctx, 79)
                self.state = 12728
                self.match(TSqlParser.ERROR_LINE)
                self.state = 12729
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12730
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 80:
                localctx = TSqlParser.ERROR_MESSAGEContext(self, localctx)
                self.enterOuterAlt(localctx, 80)
                self.state = 12731
                self.match(TSqlParser.ERROR_MESSAGE)
                self.state = 12732
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12733
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 81:
                localctx = TSqlParser.ERROR_NUMBERContext(self, localctx)
                self.enterOuterAlt(localctx, 81)
                self.state = 12734
                self.match(TSqlParser.ERROR_NUMBER)
                self.state = 12735
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12736
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 82:
                localctx = TSqlParser.ERROR_PROCEDUREContext(self, localctx)
                self.enterOuterAlt(localctx, 82)
                self.state = 12737
                self.match(TSqlParser.ERROR_PROCEDURE)
                self.state = 12738
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12739
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 83:
                localctx = TSqlParser.ERROR_SEVERITYContext(self, localctx)
                self.enterOuterAlt(localctx, 83)
                self.state = 12740
                self.match(TSqlParser.ERROR_SEVERITY)
                self.state = 12741
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12742
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 84:
                localctx = TSqlParser.ERROR_STATEContext(self, localctx)
                self.enterOuterAlt(localctx, 84)
                self.state = 12743
                self.match(TSqlParser.ERROR_STATE)
                self.state = 12744
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12745
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 85:
                localctx = TSqlParser.FORMATMESSAGEContext(self, localctx)
                self.enterOuterAlt(localctx, 85)
                self.state = 12746
                self.match(TSqlParser.FORMATMESSAGE)
                self.state = 12747
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12751
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1168]:
                    self.state = 12748
                    localctx.msg_number = self.match(TSqlParser.DECIMAL)
                    pass
                elif token in [1170]:
                    self.state = 12749
                    localctx.msg_string = self.match(TSqlParser.STRING)
                    pass
                elif token in [1166]:
                    self.state = 12750
                    localctx.msg_variable = self.match(TSqlParser.LOCAL_ID)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 12753
                self.match(TSqlParser.COMMA)
                self.state = 12754
                self.expression(0)
                self.state = 12759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1194:
                    self.state = 12755
                    self.match(TSqlParser.COMMA)
                    self.state = 12756
                    self.expression(0)
                    self.state = 12761
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 12762
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 86:
                localctx = TSqlParser.GET_FILESTREAM_TRANSACTION_CONTEXTContext(self, localctx)
                self.enterOuterAlt(localctx, 86)
                self.state = 12764
                self.match(TSqlParser.GET_FILESTREAM_TRANSACTION_CONTEXT)
                self.state = 12765
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12766
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 87:
                localctx = TSqlParser.GETANSINULLContext(self, localctx)
                self.enterOuterAlt(localctx, 87)
                self.state = 12767
                self.match(TSqlParser.GETANSINULL)
                self.state = 12768
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1170:
                    self.state = 12769
                    localctx.database = self.match(TSqlParser.STRING)


                self.state = 12772
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 88:
                localctx = TSqlParser.HOST_IDContext(self, localctx)
                self.enterOuterAlt(localctx, 88)
                self.state = 12773
                self.match(TSqlParser.HOST_ID)
                self.state = 12774
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12775
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 89:
                localctx = TSqlParser.HOST_NAMEContext(self, localctx)
                self.enterOuterAlt(localctx, 89)
                self.state = 12776
                self.match(TSqlParser.HOST_NAME)
                self.state = 12777
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12778
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 90:
                localctx = TSqlParser.ISNULLContext(self, localctx)
                self.enterOuterAlt(localctx, 90)
                self.state = 12779
                self.match(TSqlParser.ISNULL)
                self.state = 12780
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12781
                localctx.left = self.expression(0)
                self.state = 12782
                self.match(TSqlParser.COMMA)
                self.state = 12783
                localctx.right = self.expression(0)
                self.state = 12784
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 91:
                localctx = TSqlParser.ISNUMERICContext(self, localctx)
                self.enterOuterAlt(localctx, 91)
                self.state = 12786
                self.match(TSqlParser.ISNUMERIC)
                self.state = 12787
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12788
                self.expression(0)
                self.state = 12789
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 92:
                localctx = TSqlParser.MIN_ACTIVE_ROWVERSIONContext(self, localctx)
                self.enterOuterAlt(localctx, 92)
                self.state = 12791
                self.match(TSqlParser.MIN_ACTIVE_ROWVERSION)
                self.state = 12792
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12793
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 93:
                localctx = TSqlParser.NEWIDContext(self, localctx)
                self.enterOuterAlt(localctx, 93)
                self.state = 12794
                self.match(TSqlParser.NEWID)
                self.state = 12795
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12796
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 94:
                localctx = TSqlParser.NEWSEQUENTIALIDContext(self, localctx)
                self.enterOuterAlt(localctx, 94)
                self.state = 12797
                self.match(TSqlParser.NEWSEQUENTIALID)
                self.state = 12798
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12799
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 95:
                localctx = TSqlParser.ROWCOUNT_BIGContext(self, localctx)
                self.enterOuterAlt(localctx, 95)
                self.state = 12800
                self.match(TSqlParser.ROWCOUNT_BIG)
                self.state = 12801
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12802
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 96:
                localctx = TSqlParser.SESSION_CONTEXTContext(self, localctx)
                self.enterOuterAlt(localctx, 96)
                self.state = 12803
                self.match(TSqlParser.SESSION_CONTEXT)
                self.state = 12804
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12805
                localctx.key = self.match(TSqlParser.STRING)
                self.state = 12806
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 97:
                localctx = TSqlParser.XACT_STATEContext(self, localctx)
                self.enterOuterAlt(localctx, 97)
                self.state = 12807
                self.match(TSqlParser.XACT_STATE)
                self.state = 12808
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12809
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 98:
                localctx = TSqlParser.CASTContext(self, localctx)
                self.enterOuterAlt(localctx, 98)
                self.state = 12810
                self.match(TSqlParser.CAST)
                self.state = 12811
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12812
                self.expression(0)
                self.state = 12813
                self.match(TSqlParser.AS)
                self.state = 12814
                self.data_type()
                self.state = 12815
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 99:
                localctx = TSqlParser.TRY_CASTContext(self, localctx)
                self.enterOuterAlt(localctx, 99)
                self.state = 12817
                self.match(TSqlParser.TRY_CAST)
                self.state = 12818
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12819
                self.expression(0)
                self.state = 12820
                self.match(TSqlParser.AS)
                self.state = 12821
                self.data_type()
                self.state = 12822
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 100:
                localctx = TSqlParser.CONVERTContext(self, localctx)
                self.enterOuterAlt(localctx, 100)
                self.state = 12824
                self.match(TSqlParser.CONVERT)
                self.state = 12825
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12826
                localctx.convert_data_type = self.data_type()
                self.state = 12827
                self.match(TSqlParser.COMMA)
                self.state = 12828
                localctx.convert_expression = self.expression(0)
                self.state = 12831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 12829
                    self.match(TSqlParser.COMMA)
                    self.state = 12830
                    localctx.style = self.expression(0)


                self.state = 12833
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 101:
                localctx = TSqlParser.COALESCEContext(self, localctx)
                self.enterOuterAlt(localctx, 101)
                self.state = 12835
                self.match(TSqlParser.COALESCE)
                self.state = 12836
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12837
                self.expression_list_()
                self.state = 12838
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 102:
                localctx = TSqlParser.CURSOR_ROWSContext(self, localctx)
                self.enterOuterAlt(localctx, 102)
                self.state = 12840
                self.match(TSqlParser.CURSOR_ROWS)
                pass

            elif la_ == 103:
                localctx = TSqlParser.FETCH_STATUSContext(self, localctx)
                self.enterOuterAlt(localctx, 103)
                self.state = 12841
                self.match(TSqlParser.FETCH_STATUS)
                pass

            elif la_ == 104:
                localctx = TSqlParser.CURSOR_STATUSContext(self, localctx)
                self.enterOuterAlt(localctx, 104)
                self.state = 12842
                self.match(TSqlParser.CURSOR_STATUS)
                self.state = 12843
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12844
                localctx.scope = self.match(TSqlParser.STRING)
                self.state = 12845
                self.match(TSqlParser.COMMA)
                self.state = 12846
                localctx.cursor = self.expression(0)
                self.state = 12847
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 105:
                localctx = TSqlParser.CERT_IDContext(self, localctx)
                self.enterOuterAlt(localctx, 105)
                self.state = 12849
                self.match(TSqlParser.CERT_ID)
                self.state = 12850
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12851
                localctx.cert_name = self.expression(0)
                self.state = 12852
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 106:
                localctx = TSqlParser.DATALENGTHContext(self, localctx)
                self.enterOuterAlt(localctx, 106)
                self.state = 12854
                self.match(TSqlParser.DATALENGTH)
                self.state = 12855
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12856
                self.expression(0)
                self.state = 12857
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 107:
                localctx = TSqlParser.IDENT_CURRENTContext(self, localctx)
                self.enterOuterAlt(localctx, 107)
                self.state = 12859
                self.match(TSqlParser.IDENT_CURRENT)
                self.state = 12860
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12861
                localctx.table_or_view = self.expression(0)
                self.state = 12862
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 108:
                localctx = TSqlParser.IDENT_INCRContext(self, localctx)
                self.enterOuterAlt(localctx, 108)
                self.state = 12864
                self.match(TSqlParser.IDENT_INCR)
                self.state = 12865
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12866
                localctx.table_or_view = self.expression(0)
                self.state = 12867
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 109:
                localctx = TSqlParser.IDENT_SEEDContext(self, localctx)
                self.enterOuterAlt(localctx, 109)
                self.state = 12869
                self.match(TSqlParser.IDENT_SEED)
                self.state = 12870
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12871
                localctx.table_or_view = self.expression(0)
                self.state = 12872
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 110:
                localctx = TSqlParser.IDENTITYContext(self, localctx)
                self.enterOuterAlt(localctx, 110)
                self.state = 12874
                self.match(TSqlParser.IDENTITY)
                self.state = 12875
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12876
                localctx.datatype = self.data_type()
                self.state = 12881
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 12877
                    self.match(TSqlParser.COMMA)
                    self.state = 12878
                    localctx.seed = self.match(TSqlParser.DECIMAL)
                    self.state = 12879
                    self.match(TSqlParser.COMMA)
                    self.state = 12880
                    localctx.increment = self.match(TSqlParser.DECIMAL)


                self.state = 12883
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 111:
                localctx = TSqlParser.SQL_VARIANT_PROPERTYContext(self, localctx)
                self.enterOuterAlt(localctx, 111)
                self.state = 12885
                self.match(TSqlParser.SQL_VARIANT_PROPERTY)
                self.state = 12886
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12887
                localctx.expr = self.expression(0)
                self.state = 12888
                self.match(TSqlParser.COMMA)
                self.state = 12889
                localctx.property_label = self.match(TSqlParser.STRING)
                self.state = 12890
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 112:
                localctx = TSqlParser.CURRENT_DATEContext(self, localctx)
                self.enterOuterAlt(localctx, 112)
                self.state = 12892
                self.match(TSqlParser.CURRENT_DATE)
                self.state = 12893
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12894
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 113:
                localctx = TSqlParser.CURRENT_TIMESTAMPContext(self, localctx)
                self.enterOuterAlt(localctx, 113)
                self.state = 12895
                self.match(TSqlParser.CURRENT_TIMESTAMP)
                pass

            elif la_ == 114:
                localctx = TSqlParser.CURRENT_TIMEZONEContext(self, localctx)
                self.enterOuterAlt(localctx, 114)
                self.state = 12896
                self.match(TSqlParser.CURRENT_TIMEZONE)
                self.state = 12897
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12898
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 115:
                localctx = TSqlParser.CURRENT_TIMEZONE_IDContext(self, localctx)
                self.enterOuterAlt(localctx, 115)
                self.state = 12899
                self.match(TSqlParser.CURRENT_TIMEZONE_ID)
                self.state = 12900
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12901
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 116:
                localctx = TSqlParser.DATE_BUCKETContext(self, localctx)
                self.enterOuterAlt(localctx, 116)
                self.state = 12902
                self.match(TSqlParser.DATE_BUCKET)
                self.state = 12903
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12904
                localctx.datepart = self.dateparts_9()
                self.state = 12905
                self.match(TSqlParser.COMMA)
                self.state = 12906
                localctx.number = self.expression(0)
                self.state = 12907
                self.match(TSqlParser.COMMA)
                self.state = 12908
                localctx.date = self.expression(0)
                self.state = 12911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 12909
                    self.match(TSqlParser.COMMA)
                    self.state = 12910
                    localctx.origin = self.expression(0)


                self.state = 12913
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 117:
                localctx = TSqlParser.DATEADDContext(self, localctx)
                self.enterOuterAlt(localctx, 117)
                self.state = 12915
                self.match(TSqlParser.DATEADD)
                self.state = 12916
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12917
                localctx.datepart = self.dateparts_12()
                self.state = 12918
                self.match(TSqlParser.COMMA)
                self.state = 12919
                localctx.number = self.expression(0)
                self.state = 12920
                self.match(TSqlParser.COMMA)
                self.state = 12921
                localctx.date = self.expression(0)
                self.state = 12922
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 118:
                localctx = TSqlParser.DATEDIFFContext(self, localctx)
                self.enterOuterAlt(localctx, 118)
                self.state = 12924
                self.match(TSqlParser.DATEDIFF)
                self.state = 12925
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12926
                localctx.datepart = self.dateparts_12()
                self.state = 12927
                self.match(TSqlParser.COMMA)
                self.state = 12928
                localctx.date_first = self.expression(0)
                self.state = 12929
                self.match(TSqlParser.COMMA)
                self.state = 12930
                localctx.date_second = self.expression(0)
                self.state = 12931
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 119:
                localctx = TSqlParser.DATEDIFF_BIGContext(self, localctx)
                self.enterOuterAlt(localctx, 119)
                self.state = 12933
                self.match(TSqlParser.DATEDIFF_BIG)
                self.state = 12934
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12935
                localctx.datepart = self.dateparts_12()
                self.state = 12936
                self.match(TSqlParser.COMMA)
                self.state = 12937
                localctx.startdate = self.expression(0)
                self.state = 12938
                self.match(TSqlParser.COMMA)
                self.state = 12939
                localctx.enddate = self.expression(0)
                self.state = 12940
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 120:
                localctx = TSqlParser.DATEFROMPARTSContext(self, localctx)
                self.enterOuterAlt(localctx, 120)
                self.state = 12942
                self.match(TSqlParser.DATEFROMPARTS)
                self.state = 12943
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12944
                localctx.year = self.expression(0)
                self.state = 12945
                self.match(TSqlParser.COMMA)
                self.state = 12946
                localctx.month = self.expression(0)
                self.state = 12947
                self.match(TSqlParser.COMMA)
                self.state = 12948
                localctx.day = self.expression(0)
                self.state = 12949
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 121:
                localctx = TSqlParser.DATENAMEContext(self, localctx)
                self.enterOuterAlt(localctx, 121)
                self.state = 12951
                self.match(TSqlParser.DATENAME)
                self.state = 12952
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12953
                localctx.datepart = self.dateparts_15()
                self.state = 12954
                self.match(TSqlParser.COMMA)
                self.state = 12955
                localctx.date = self.expression(0)
                self.state = 12956
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 122:
                localctx = TSqlParser.DATEPARTContext(self, localctx)
                self.enterOuterAlt(localctx, 122)
                self.state = 12958
                self.match(TSqlParser.DATEPART)
                self.state = 12959
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12960
                localctx.datepart = self.dateparts_15()
                self.state = 12961
                self.match(TSqlParser.COMMA)
                self.state = 12962
                localctx.date = self.expression(0)
                self.state = 12963
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 123:
                localctx = TSqlParser.DATETIME2FROMPARTSContext(self, localctx)
                self.enterOuterAlt(localctx, 123)
                self.state = 12965
                self.match(TSqlParser.DATETIME2FROMPARTS)
                self.state = 12966
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12967
                localctx.year = self.expression(0)
                self.state = 12968
                self.match(TSqlParser.COMMA)
                self.state = 12969
                localctx.month = self.expression(0)
                self.state = 12970
                self.match(TSqlParser.COMMA)
                self.state = 12971
                localctx.day = self.expression(0)
                self.state = 12972
                self.match(TSqlParser.COMMA)
                self.state = 12973
                localctx.hour = self.expression(0)
                self.state = 12974
                self.match(TSqlParser.COMMA)
                self.state = 12975
                localctx.minute = self.expression(0)
                self.state = 12976
                self.match(TSqlParser.COMMA)
                self.state = 12977
                localctx.seconds = self.expression(0)
                self.state = 12978
                self.match(TSqlParser.COMMA)
                self.state = 12979
                localctx.fractions = self.expression(0)
                self.state = 12980
                self.match(TSqlParser.COMMA)
                self.state = 12981
                localctx.precision = self.expression(0)
                self.state = 12982
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 124:
                localctx = TSqlParser.DATETIMEFROMPARTSContext(self, localctx)
                self.enterOuterAlt(localctx, 124)
                self.state = 12984
                self.match(TSqlParser.DATETIMEFROMPARTS)
                self.state = 12985
                self.match(TSqlParser.LR_BRACKET)
                self.state = 12986
                localctx.year = self.expression(0)
                self.state = 12987
                self.match(TSqlParser.COMMA)
                self.state = 12988
                localctx.month = self.expression(0)
                self.state = 12989
                self.match(TSqlParser.COMMA)
                self.state = 12990
                localctx.day = self.expression(0)
                self.state = 12991
                self.match(TSqlParser.COMMA)
                self.state = 12992
                localctx.hour = self.expression(0)
                self.state = 12993
                self.match(TSqlParser.COMMA)
                self.state = 12994
                localctx.minute = self.expression(0)
                self.state = 12995
                self.match(TSqlParser.COMMA)
                self.state = 12996
                localctx.seconds = self.expression(0)
                self.state = 12997
                self.match(TSqlParser.COMMA)
                self.state = 12998
                localctx.milliseconds = self.expression(0)
                self.state = 12999
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 125:
                localctx = TSqlParser.DATETIMEOFFSETFROMPARTSContext(self, localctx)
                self.enterOuterAlt(localctx, 125)
                self.state = 13001
                self.match(TSqlParser.DATETIMEOFFSETFROMPARTS)
                self.state = 13002
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13003
                localctx.year = self.expression(0)
                self.state = 13004
                self.match(TSqlParser.COMMA)
                self.state = 13005
                localctx.month = self.expression(0)
                self.state = 13006
                self.match(TSqlParser.COMMA)
                self.state = 13007
                localctx.day = self.expression(0)
                self.state = 13008
                self.match(TSqlParser.COMMA)
                self.state = 13009
                localctx.hour = self.expression(0)
                self.state = 13010
                self.match(TSqlParser.COMMA)
                self.state = 13011
                localctx.minute = self.expression(0)
                self.state = 13012
                self.match(TSqlParser.COMMA)
                self.state = 13013
                localctx.seconds = self.expression(0)
                self.state = 13014
                self.match(TSqlParser.COMMA)
                self.state = 13015
                localctx.fractions = self.expression(0)
                self.state = 13016
                self.match(TSqlParser.COMMA)
                self.state = 13017
                localctx.hour_offset = self.expression(0)
                self.state = 13018
                self.match(TSqlParser.COMMA)
                self.state = 13019
                localctx.minute_offset = self.expression(0)
                self.state = 13020
                self.match(TSqlParser.COMMA)
                self.state = 13021
                localctx.precision = self.match(TSqlParser.DECIMAL)
                self.state = 13022
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 126:
                localctx = TSqlParser.DATETRUNCContext(self, localctx)
                self.enterOuterAlt(localctx, 126)
                self.state = 13024
                self.match(TSqlParser.DATETRUNC)
                self.state = 13025
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13026
                localctx.datepart = self.dateparts_datetrunc()
                self.state = 13027
                self.match(TSqlParser.COMMA)
                self.state = 13028
                localctx.date = self.expression(0)
                self.state = 13029
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 127:
                localctx = TSqlParser.DAYContext(self, localctx)
                self.enterOuterAlt(localctx, 127)
                self.state = 13031
                self.match(TSqlParser.DAY)
                self.state = 13032
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13033
                localctx.date = self.expression(0)
                self.state = 13034
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 128:
                localctx = TSqlParser.EOMONTHContext(self, localctx)
                self.enterOuterAlt(localctx, 128)
                self.state = 13036
                self.match(TSqlParser.EOMONTH)
                self.state = 13037
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13038
                localctx.start_date = self.expression(0)
                self.state = 13041
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 13039
                    self.match(TSqlParser.COMMA)
                    self.state = 13040
                    localctx.month_to_add = self.expression(0)


                self.state = 13043
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 129:
                localctx = TSqlParser.GETDATEContext(self, localctx)
                self.enterOuterAlt(localctx, 129)
                self.state = 13045
                self.match(TSqlParser.GETDATE)
                self.state = 13046
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13047
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 130:
                localctx = TSqlParser.GETUTCDATEContext(self, localctx)
                self.enterOuterAlt(localctx, 130)
                self.state = 13048
                self.match(TSqlParser.GETUTCDATE)
                self.state = 13049
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13050
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 131:
                localctx = TSqlParser.ISDATEContext(self, localctx)
                self.enterOuterAlt(localctx, 131)
                self.state = 13051
                self.match(TSqlParser.ISDATE)
                self.state = 13052
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13053
                self.expression(0)
                self.state = 13054
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 132:
                localctx = TSqlParser.MONTHContext(self, localctx)
                self.enterOuterAlt(localctx, 132)
                self.state = 13056
                self.match(TSqlParser.MONTH)
                self.state = 13057
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13058
                localctx.date = self.expression(0)
                self.state = 13059
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 133:
                localctx = TSqlParser.SMALLDATETIMEFROMPARTSContext(self, localctx)
                self.enterOuterAlt(localctx, 133)
                self.state = 13061
                self.match(TSqlParser.SMALLDATETIMEFROMPARTS)
                self.state = 13062
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13063
                localctx.year = self.expression(0)
                self.state = 13064
                self.match(TSqlParser.COMMA)
                self.state = 13065
                localctx.month = self.expression(0)
                self.state = 13066
                self.match(TSqlParser.COMMA)
                self.state = 13067
                localctx.day = self.expression(0)
                self.state = 13068
                self.match(TSqlParser.COMMA)
                self.state = 13069
                localctx.hour = self.expression(0)
                self.state = 13070
                self.match(TSqlParser.COMMA)
                self.state = 13071
                localctx.minute = self.expression(0)
                self.state = 13072
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 134:
                localctx = TSqlParser.SWITCHOFFSETContext(self, localctx)
                self.enterOuterAlt(localctx, 134)
                self.state = 13074
                self.match(TSqlParser.SWITCHOFFSET)
                self.state = 13075
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13076
                localctx.datetimeoffset_expression = self.expression(0)
                self.state = 13077
                self.match(TSqlParser.COMMA)
                self.state = 13078
                localctx.timezoneoffset_expression = self.expression(0)
                self.state = 13079
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 135:
                localctx = TSqlParser.SYSDATETIMEContext(self, localctx)
                self.enterOuterAlt(localctx, 135)
                self.state = 13081
                self.match(TSqlParser.SYSDATETIME)
                self.state = 13082
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13083
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 136:
                localctx = TSqlParser.SYSDATETIMEOFFSETContext(self, localctx)
                self.enterOuterAlt(localctx, 136)
                self.state = 13084
                self.match(TSqlParser.SYSDATETIMEOFFSET)
                self.state = 13085
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13086
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 137:
                localctx = TSqlParser.SYSUTCDATETIMEContext(self, localctx)
                self.enterOuterAlt(localctx, 137)
                self.state = 13087
                self.match(TSqlParser.SYSUTCDATETIME)
                self.state = 13088
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13089
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 138:
                localctx = TSqlParser.TIMEFROMPARTSContext(self, localctx)
                self.enterOuterAlt(localctx, 138)
                self.state = 13090
                self.match(TSqlParser.TIMEFROMPARTS)
                self.state = 13091
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13092
                localctx.hour = self.expression(0)
                self.state = 13093
                self.match(TSqlParser.COMMA)
                self.state = 13094
                localctx.minute = self.expression(0)
                self.state = 13095
                self.match(TSqlParser.COMMA)
                self.state = 13096
                localctx.seconds = self.expression(0)
                self.state = 13097
                self.match(TSqlParser.COMMA)
                self.state = 13098
                localctx.fractions = self.expression(0)
                self.state = 13099
                self.match(TSqlParser.COMMA)
                self.state = 13100
                localctx.precision = self.match(TSqlParser.DECIMAL)
                self.state = 13101
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 139:
                localctx = TSqlParser.TODATETIMEOFFSETContext(self, localctx)
                self.enterOuterAlt(localctx, 139)
                self.state = 13103
                self.match(TSqlParser.TODATETIMEOFFSET)
                self.state = 13104
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13105
                localctx.datetime_expression = self.expression(0)
                self.state = 13106
                self.match(TSqlParser.COMMA)
                self.state = 13107
                localctx.timezoneoffset_expression = self.expression(0)
                self.state = 13108
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 140:
                localctx = TSqlParser.YEARContext(self, localctx)
                self.enterOuterAlt(localctx, 140)
                self.state = 13110
                self.match(TSqlParser.YEAR)
                self.state = 13111
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13112
                localctx.date = self.expression(0)
                self.state = 13113
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 141:
                localctx = TSqlParser.IDENTITYContext(self, localctx)
                self.enterOuterAlt(localctx, 141)
                self.state = 13115
                self.match(TSqlParser.IDENTITY)
                self.state = 13116
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13117
                self.data_type()
                self.state = 13120
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1678,self._ctx)
                if la_ == 1:
                    self.state = 13118
                    self.match(TSqlParser.COMMA)
                    self.state = 13119
                    localctx.seed = self.match(TSqlParser.DECIMAL)


                self.state = 13124
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 13122
                    self.match(TSqlParser.COMMA)
                    self.state = 13123
                    localctx.increment = self.match(TSqlParser.DECIMAL)


                self.state = 13126
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 142:
                localctx = TSqlParser.MIN_ACTIVE_ROWVERSIONContext(self, localctx)
                self.enterOuterAlt(localctx, 142)
                self.state = 13128
                self.match(TSqlParser.MIN_ACTIVE_ROWVERSION)
                self.state = 13129
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13130
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 143:
                localctx = TSqlParser.NULLIFContext(self, localctx)
                self.enterOuterAlt(localctx, 143)
                self.state = 13131
                self.match(TSqlParser.NULLIF)
                self.state = 13132
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13133
                localctx.left = self.expression(0)
                self.state = 13134
                self.match(TSqlParser.COMMA)
                self.state = 13135
                localctx.right = self.expression(0)
                self.state = 13136
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 144:
                localctx = TSqlParser.PARSEContext(self, localctx)
                self.enterOuterAlt(localctx, 144)
                self.state = 13138
                self.match(TSqlParser.PARSE)
                self.state = 13139
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13140
                localctx.str_label = self.expression(0)
                self.state = 13141
                self.match(TSqlParser.AS)
                self.state = 13142
                self.data_type()
                self.state = 13145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1038:
                    self.state = 13143
                    self.match(TSqlParser.USING)
                    self.state = 13144
                    localctx.culture = self.expression(0)


                self.state = 13147
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 145:
                localctx = TSqlParser.XML_DATA_TYPE_FUNCContext(self, localctx)
                self.enterOuterAlt(localctx, 145)
                self.state = 13149
                self.xml_data_type_methods()
                pass

            elif la_ == 146:
                localctx = TSqlParser.IIFContext(self, localctx)
                self.enterOuterAlt(localctx, 146)
                self.state = 13150
                self.match(TSqlParser.IIF)
                self.state = 13151
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13152
                localctx.cond = self.search_condition(0)
                self.state = 13153
                self.match(TSqlParser.COMMA)
                self.state = 13154
                localctx.left = self.expression(0)
                self.state = 13155
                self.match(TSqlParser.COMMA)
                self.state = 13156
                localctx.right = self.expression(0)
                self.state = 13157
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 147:
                localctx = TSqlParser.ISJSONContext(self, localctx)
                self.enterOuterAlt(localctx, 147)
                self.state = 13159
                self.match(TSqlParser.ISJSON)
                self.state = 13160
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13161
                localctx.json_expr = self.expression(0)
                self.state = 13164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 13162
                    self.match(TSqlParser.COMMA)
                    self.state = 13163
                    localctx.json_type_constraint = self.expression(0)


                self.state = 13166
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 148:
                localctx = TSqlParser.JSON_OBJECTContext(self, localctx)
                self.enterOuterAlt(localctx, 148)
                self.state = 13168
                self.match(TSqlParser.JSON_OBJECT)
                self.state = 13169
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13178
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1683,self._ctx)
                if la_ == 1:
                    self.state = 13170
                    localctx.key_value = self.json_key_value()
                    self.state = 13175
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1194:
                        self.state = 13171
                        self.match(TSqlParser.COMMA)
                        self.state = 13172
                        localctx.key_value = self.json_key_value()
                        self.state = 13177
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 13181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==630:
                    self.state = 13180
                    self.json_null_clause()


                self.state = 13183
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 149:
                localctx = TSqlParser.JSON_ARRAYContext(self, localctx)
                self.enterOuterAlt(localctx, 149)
                self.state = 13184
                self.match(TSqlParser.JSON_ARRAY)
                self.state = 13185
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13187
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1685,self._ctx)
                if la_ == 1:
                    self.state = 13186
                    self.expression_list_()


                self.state = 13190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==630:
                    self.state = 13189
                    self.json_null_clause()


                self.state = 13192
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 150:
                localctx = TSqlParser.JSON_VALUEContext(self, localctx)
                self.enterOuterAlt(localctx, 150)
                self.state = 13193
                self.match(TSqlParser.JSON_VALUE)
                self.state = 13194
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13195
                localctx.expr = self.expression(0)
                self.state = 13196
                self.match(TSqlParser.COMMA)
                self.state = 13197
                localctx.path = self.expression(0)
                self.state = 13198
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 151:
                localctx = TSqlParser.JSON_QUERYContext(self, localctx)
                self.enterOuterAlt(localctx, 151)
                self.state = 13200
                self.match(TSqlParser.JSON_QUERY)
                self.state = 13201
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13202
                localctx.expr = self.expression(0)
                self.state = 13205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 13203
                    self.match(TSqlParser.COMMA)
                    self.state = 13204
                    localctx.path = self.expression(0)


                self.state = 13207
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 152:
                localctx = TSqlParser.JSON_MODIFYContext(self, localctx)
                self.enterOuterAlt(localctx, 152)
                self.state = 13209
                self.match(TSqlParser.JSON_MODIFY)
                self.state = 13210
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13211
                localctx.expr = self.expression(0)
                self.state = 13212
                self.match(TSqlParser.COMMA)
                self.state = 13213
                localctx.path = self.expression(0)
                self.state = 13214
                self.match(TSqlParser.COMMA)
                self.state = 13215
                localctx.new_value = self.expression(0)
                self.state = 13216
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 153:
                localctx = TSqlParser.JSON_PATH_EXISTSContext(self, localctx)
                self.enterOuterAlt(localctx, 153)
                self.state = 13218
                self.match(TSqlParser.JSON_PATH_EXISTS)
                self.state = 13219
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13220
                localctx.value_expression = self.expression(0)
                self.state = 13221
                self.match(TSqlParser.COMMA)
                self.state = 13222
                localctx.sql_json_path = self.expression(0)
                self.state = 13223
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 154:
                localctx = TSqlParser.ABSContext(self, localctx)
                self.enterOuterAlt(localctx, 154)
                self.state = 13225
                self.match(TSqlParser.ABS)
                self.state = 13226
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13227
                localctx.numeric_expression = self.expression(0)
                self.state = 13228
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 155:
                localctx = TSqlParser.ACOSContext(self, localctx)
                self.enterOuterAlt(localctx, 155)
                self.state = 13230
                self.match(TSqlParser.ACOS)
                self.state = 13231
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13232
                localctx.float_expression = self.expression(0)
                self.state = 13233
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 156:
                localctx = TSqlParser.ASINContext(self, localctx)
                self.enterOuterAlt(localctx, 156)
                self.state = 13235
                self.match(TSqlParser.ASIN)
                self.state = 13236
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13237
                localctx.float_expression = self.expression(0)
                self.state = 13238
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 157:
                localctx = TSqlParser.ATANContext(self, localctx)
                self.enterOuterAlt(localctx, 157)
                self.state = 13240
                self.match(TSqlParser.ATAN)
                self.state = 13241
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13242
                localctx.float_expression = self.expression(0)
                self.state = 13243
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 158:
                localctx = TSqlParser.ATN2Context(self, localctx)
                self.enterOuterAlt(localctx, 158)
                self.state = 13245
                self.match(TSqlParser.ATN2)
                self.state = 13246
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13247
                localctx.float_expression = self.expression(0)
                self.state = 13248
                self.match(TSqlParser.COMMA)
                self.state = 13249
                localctx.float_expression = self.expression(0)
                self.state = 13250
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 159:
                localctx = TSqlParser.CEILINGContext(self, localctx)
                self.enterOuterAlt(localctx, 159)
                self.state = 13252
                self.match(TSqlParser.CEILING)
                self.state = 13253
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13254
                localctx.numeric_expression = self.expression(0)
                self.state = 13255
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 160:
                localctx = TSqlParser.COSContext(self, localctx)
                self.enterOuterAlt(localctx, 160)
                self.state = 13257
                self.match(TSqlParser.COS)
                self.state = 13258
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13259
                localctx.float_expression = self.expression(0)
                self.state = 13260
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 161:
                localctx = TSqlParser.COTContext(self, localctx)
                self.enterOuterAlt(localctx, 161)
                self.state = 13262
                self.match(TSqlParser.COT)
                self.state = 13263
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13264
                localctx.float_expression = self.expression(0)
                self.state = 13265
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 162:
                localctx = TSqlParser.DEGREESContext(self, localctx)
                self.enterOuterAlt(localctx, 162)
                self.state = 13267
                self.match(TSqlParser.DEGREES)
                self.state = 13268
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13269
                localctx.numeric_expression = self.expression(0)
                self.state = 13270
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 163:
                localctx = TSqlParser.EXPContext(self, localctx)
                self.enterOuterAlt(localctx, 163)
                self.state = 13272
                self.match(TSqlParser.EXP)
                self.state = 13273
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13274
                localctx.float_expression = self.expression(0)
                self.state = 13275
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 164:
                localctx = TSqlParser.FLOORContext(self, localctx)
                self.enterOuterAlt(localctx, 164)
                self.state = 13277
                self.match(TSqlParser.FLOOR)
                self.state = 13278
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13279
                localctx.numeric_expression = self.expression(0)
                self.state = 13280
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 165:
                localctx = TSqlParser.LOGContext(self, localctx)
                self.enterOuterAlt(localctx, 165)
                self.state = 13282
                self.match(TSqlParser.LOG)
                self.state = 13283
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13284
                localctx.float_expression = self.expression(0)
                self.state = 13287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 13285
                    self.match(TSqlParser.COMMA)
                    self.state = 13286
                    localctx.base = self.expression(0)


                self.state = 13289
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 166:
                localctx = TSqlParser.LOG10Context(self, localctx)
                self.enterOuterAlt(localctx, 166)
                self.state = 13291
                self.match(TSqlParser.LOG10)
                self.state = 13292
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13293
                localctx.float_expression = self.expression(0)
                self.state = 13294
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 167:
                localctx = TSqlParser.PIContext(self, localctx)
                self.enterOuterAlt(localctx, 167)
                self.state = 13296
                self.match(TSqlParser.PI)
                self.state = 13297
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13298
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 168:
                localctx = TSqlParser.POWERContext(self, localctx)
                self.enterOuterAlt(localctx, 168)
                self.state = 13299
                self.match(TSqlParser.POWER)
                self.state = 13300
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13301
                localctx.float_expression = self.expression(0)
                self.state = 13302
                self.match(TSqlParser.COMMA)
                self.state = 13303
                localctx.y = self.expression(0)
                self.state = 13304
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 169:
                localctx = TSqlParser.RADIANSContext(self, localctx)
                self.enterOuterAlt(localctx, 169)
                self.state = 13306
                self.match(TSqlParser.RADIANS)
                self.state = 13307
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13308
                localctx.numeric_expression = self.expression(0)
                self.state = 13309
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 170:
                localctx = TSqlParser.RANDContext(self, localctx)
                self.enterOuterAlt(localctx, 170)
                self.state = 13311
                self.match(TSqlParser.RAND)
                self.state = 13312
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2342234983759889) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -74874560052724233) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8070028319748746719) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387490746373) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8753867308933840637) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755874891096735745) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -864762596778127649) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -138580854017) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18014399105315111) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -650880200401223699) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -378302373530962465) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689505) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906061) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1155)) & ~0x3f) == 0 and ((1 << (_la - 1155)) & 4996391290535303) != 0):
                    self.state = 13313
                    localctx.seed = self.expression(0)


                self.state = 13316
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 171:
                localctx = TSqlParser.ROUNDContext(self, localctx)
                self.enterOuterAlt(localctx, 171)
                self.state = 13317
                self.match(TSqlParser.ROUND)
                self.state = 13318
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13319
                localctx.numeric_expression = self.expression(0)
                self.state = 13320
                self.match(TSqlParser.COMMA)
                self.state = 13321
                localctx.length = self.expression(0)
                self.state = 13324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 13322
                    self.match(TSqlParser.COMMA)
                    self.state = 13323
                    localctx.function = self.expression(0)


                self.state = 13326
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 172:
                localctx = TSqlParser.MATH_SIGNContext(self, localctx)
                self.enterOuterAlt(localctx, 172)
                self.state = 13328
                self.match(TSqlParser.SIGN)
                self.state = 13329
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13330
                localctx.numeric_expression = self.expression(0)
                self.state = 13331
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 173:
                localctx = TSqlParser.SINContext(self, localctx)
                self.enterOuterAlt(localctx, 173)
                self.state = 13333
                self.match(TSqlParser.SIN)
                self.state = 13334
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13335
                localctx.float_expression = self.expression(0)
                self.state = 13336
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 174:
                localctx = TSqlParser.SQRTContext(self, localctx)
                self.enterOuterAlt(localctx, 174)
                self.state = 13338
                self.match(TSqlParser.SQRT)
                self.state = 13339
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13340
                localctx.float_expression = self.expression(0)
                self.state = 13341
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 175:
                localctx = TSqlParser.SQUAREContext(self, localctx)
                self.enterOuterAlt(localctx, 175)
                self.state = 13343
                self.match(TSqlParser.SQUARE)
                self.state = 13344
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13345
                localctx.float_expression = self.expression(0)
                self.state = 13346
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 176:
                localctx = TSqlParser.TANContext(self, localctx)
                self.enterOuterAlt(localctx, 176)
                self.state = 13348
                self.match(TSqlParser.TAN)
                self.state = 13349
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13350
                localctx.float_expression = self.expression(0)
                self.state = 13351
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 177:
                localctx = TSqlParser.GREATESTContext(self, localctx)
                self.enterOuterAlt(localctx, 177)
                self.state = 13353
                self.match(TSqlParser.GREATEST)
                self.state = 13354
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13355
                self.expression_list_()
                self.state = 13356
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 178:
                localctx = TSqlParser.LEASTContext(self, localctx)
                self.enterOuterAlt(localctx, 178)
                self.state = 13358
                self.match(TSqlParser.LEAST)
                self.state = 13359
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13360
                self.expression_list_()
                self.state = 13361
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 179:
                localctx = TSqlParser.CERTENCODEDContext(self, localctx)
                self.enterOuterAlt(localctx, 179)
                self.state = 13363
                self.match(TSqlParser.CERTENCODED)
                self.state = 13364
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13365
                localctx.certid = self.expression(0)
                self.state = 13366
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 180:
                localctx = TSqlParser.CERTPRIVATEKEYContext(self, localctx)
                self.enterOuterAlt(localctx, 180)
                self.state = 13368
                self.match(TSqlParser.CERTPRIVATEKEY)
                self.state = 13369
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13370
                localctx.certid = self.expression(0)
                self.state = 13371
                self.match(TSqlParser.COMMA)
                self.state = 13372
                localctx.encryption_password = self.expression(0)
                self.state = 13375
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 13373
                    self.match(TSqlParser.COMMA)
                    self.state = 13374
                    localctx.decryption_pasword = self.expression(0)


                self.state = 13377
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 181:
                localctx = TSqlParser.CURRENT_USERContext(self, localctx)
                self.enterOuterAlt(localctx, 181)
                self.state = 13379
                self.match(TSqlParser.CURRENT_USER)
                pass

            elif la_ == 182:
                localctx = TSqlParser.DATABASE_PRINCIPAL_IDContext(self, localctx)
                self.enterOuterAlt(localctx, 182)
                self.state = 13380
                self.match(TSqlParser.DATABASE_PRINCIPAL_ID)
                self.state = 13381
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2342234983759889) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -74874560052724233) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8070028319748746719) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387490746373) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8753867308933840637) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755874891096735745) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -864762596778127649) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -138580854017) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18014399105315111) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -650880200401223699) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -378302373530962465) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689505) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906061) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1155)) & ~0x3f) == 0 and ((1 << (_la - 1155)) & 4996391290535303) != 0):
                    self.state = 13382
                    localctx.principal_name = self.expression(0)


                self.state = 13385
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 183:
                localctx = TSqlParser.HAS_DBACCESSContext(self, localctx)
                self.enterOuterAlt(localctx, 183)
                self.state = 13386
                self.match(TSqlParser.HAS_DBACCESS)
                self.state = 13387
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13388
                localctx.database_name = self.expression(0)
                self.state = 13389
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 184:
                localctx = TSqlParser.HAS_PERMS_BY_NAMEContext(self, localctx)
                self.enterOuterAlt(localctx, 184)
                self.state = 13391
                self.match(TSqlParser.HAS_PERMS_BY_NAME)
                self.state = 13392
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13393
                localctx.securable = self.expression(0)
                self.state = 13394
                self.match(TSqlParser.COMMA)
                self.state = 13395
                localctx.securable_class = self.expression(0)
                self.state = 13396
                self.match(TSqlParser.COMMA)
                self.state = 13397
                localctx.permission = self.expression(0)
                self.state = 13404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 13398
                    self.match(TSqlParser.COMMA)
                    self.state = 13399
                    localctx.sub_securable = self.expression(0)
                    self.state = 13402
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 13400
                        self.match(TSqlParser.COMMA)
                        self.state = 13401
                        localctx.sub_securable_class = self.expression(0)




                self.state = 13406
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 185:
                localctx = TSqlParser.IS_MEMBERContext(self, localctx)
                self.enterOuterAlt(localctx, 185)
                self.state = 13408
                self.match(TSqlParser.IS_MEMBER)
                self.state = 13409
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13410
                localctx.group_or_role = self.expression(0)
                self.state = 13411
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 186:
                localctx = TSqlParser.IS_ROLEMEMBERContext(self, localctx)
                self.enterOuterAlt(localctx, 186)
                self.state = 13413
                self.match(TSqlParser.IS_ROLEMEMBER)
                self.state = 13414
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13415
                localctx.role = self.expression(0)
                self.state = 13418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 13416
                    self.match(TSqlParser.COMMA)
                    self.state = 13417
                    localctx.database_principal = self.expression(0)


                self.state = 13420
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 187:
                localctx = TSqlParser.IS_SRVROLEMEMBERContext(self, localctx)
                self.enterOuterAlt(localctx, 187)
                self.state = 13422
                self.match(TSqlParser.IS_SRVROLEMEMBER)
                self.state = 13423
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13424
                localctx.role = self.expression(0)
                self.state = 13427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 13425
                    self.match(TSqlParser.COMMA)
                    self.state = 13426
                    localctx.login = self.expression(0)


                self.state = 13429
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 188:
                localctx = TSqlParser.LOGINPROPERTYContext(self, localctx)
                self.enterOuterAlt(localctx, 188)
                self.state = 13431
                self.match(TSqlParser.LOGINPROPERTY)
                self.state = 13432
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13433
                localctx.login_name = self.expression(0)
                self.state = 13434
                self.match(TSqlParser.COMMA)
                self.state = 13435
                localctx.property_name = self.expression(0)
                self.state = 13436
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 189:
                localctx = TSqlParser.ORIGINAL_LOGINContext(self, localctx)
                self.enterOuterAlt(localctx, 189)
                self.state = 13438
                self.match(TSqlParser.ORIGINAL_LOGIN)
                self.state = 13439
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13440
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 190:
                localctx = TSqlParser.PERMISSIONSContext(self, localctx)
                self.enterOuterAlt(localctx, 190)
                self.state = 13441
                self.match(TSqlParser.PERMISSIONS)
                self.state = 13442
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2342234983759889) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -74874560052724233) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8070028319748746719) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387490746373) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8753867308933840637) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755874891096735745) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -864762596778127649) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -138580854017) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18014399105315111) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -650880200401223699) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -378302373530962465) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689505) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906061) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1155)) & ~0x3f) == 0 and ((1 << (_la - 1155)) & 4996391290535303) != 0):
                    self.state = 13443
                    localctx.object_id = self.expression(0)
                    self.state = 13446
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 13444
                        self.match(TSqlParser.COMMA)
                        self.state = 13445
                        localctx.column = self.expression(0)




                self.state = 13450
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 191:
                localctx = TSqlParser.PWDENCRYPTContext(self, localctx)
                self.enterOuterAlt(localctx, 191)
                self.state = 13451
                self.match(TSqlParser.PWDENCRYPT)
                self.state = 13452
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13453
                localctx.password = self.expression(0)
                self.state = 13454
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 192:
                localctx = TSqlParser.PWDCOMPAREContext(self, localctx)
                self.enterOuterAlt(localctx, 192)
                self.state = 13456
                self.match(TSqlParser.PWDCOMPARE)
                self.state = 13457
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13458
                localctx.clear_text_password = self.expression(0)
                self.state = 13459
                self.match(TSqlParser.COMMA)
                self.state = 13460
                localctx.password_hash = self.expression(0)
                self.state = 13463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 13461
                    self.match(TSqlParser.COMMA)
                    self.state = 13462
                    localctx.version = self.expression(0)


                self.state = 13465
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 193:
                localctx = TSqlParser.SESSION_USERContext(self, localctx)
                self.enterOuterAlt(localctx, 193)
                self.state = 13467
                self.match(TSqlParser.SESSION_USER)
                pass

            elif la_ == 194:
                localctx = TSqlParser.SESSIONPROPERTYContext(self, localctx)
                self.enterOuterAlt(localctx, 194)
                self.state = 13468
                self.match(TSqlParser.SESSIONPROPERTY)
                self.state = 13469
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13470
                localctx.option_name = self.expression(0)
                self.state = 13471
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 195:
                localctx = TSqlParser.SUSER_IDContext(self, localctx)
                self.enterOuterAlt(localctx, 195)
                self.state = 13473
                self.match(TSqlParser.SUSER_ID)
                self.state = 13474
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2342234983759889) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -74874560052724233) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8070028319748746719) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387490746373) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8753867308933840637) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755874891096735745) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -864762596778127649) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -138580854017) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18014399105315111) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -650880200401223699) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -378302373530962465) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689505) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906061) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1155)) & ~0x3f) == 0 and ((1 << (_la - 1155)) & 4996391290535303) != 0):
                    self.state = 13475
                    localctx.login = self.expression(0)


                self.state = 13478
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 196:
                localctx = TSqlParser.SUSER_SNAMEContext(self, localctx)
                self.enterOuterAlt(localctx, 196)
                self.state = 13479
                self.match(TSqlParser.SUSER_NAME)
                self.state = 13480
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2342234983759889) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -74874560052724233) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8070028319748746719) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387490746373) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8753867308933840637) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755874891096735745) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -864762596778127649) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -138580854017) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18014399105315111) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -650880200401223699) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -378302373530962465) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689505) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906061) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1155)) & ~0x3f) == 0 and ((1 << (_la - 1155)) & 4996391290535303) != 0):
                    self.state = 13481
                    localctx.server_user_sid = self.expression(0)


                self.state = 13484
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 197:
                localctx = TSqlParser.SUSER_SIDContext(self, localctx)
                self.enterOuterAlt(localctx, 197)
                self.state = 13485
                self.match(TSqlParser.SUSER_SID)
                self.state = 13486
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2342234983759889) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -74874560052724233) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8070028319748746719) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387490746373) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8753867308933840637) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755874891096735745) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -864762596778127649) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -138580854017) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18014399105315111) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -650880200401223699) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -378302373530962465) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689505) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906061) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1155)) & ~0x3f) == 0 and ((1 << (_la - 1155)) & 4996391290535303) != 0):
                    self.state = 13487
                    localctx.login = self.expression(0)
                    self.state = 13490
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 13488
                        self.match(TSqlParser.COMMA)
                        self.state = 13489
                        localctx.param2 = self.expression(0)




                self.state = 13494
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 198:
                localctx = TSqlParser.SUSER_SNAMEContext(self, localctx)
                self.enterOuterAlt(localctx, 198)
                self.state = 13495
                self.match(TSqlParser.SUSER_SNAME)
                self.state = 13496
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2342234983759889) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -74874560052724233) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8070028319748746719) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387490746373) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8753867308933840637) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755874891096735745) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -864762596778127649) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -138580854017) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18014399105315111) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -650880200401223699) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -378302373530962465) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689505) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906061) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1155)) & ~0x3f) == 0 and ((1 << (_la - 1155)) & 4996391290535303) != 0):
                    self.state = 13497
                    localctx.server_user_sid = self.expression(0)


                self.state = 13500
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 199:
                localctx = TSqlParser.SYSTEM_USERContext(self, localctx)
                self.enterOuterAlt(localctx, 199)
                self.state = 13501
                self.match(TSqlParser.SYSTEM_USER)
                pass

            elif la_ == 200:
                localctx = TSqlParser.USERContext(self, localctx)
                self.enterOuterAlt(localctx, 200)
                self.state = 13502
                self.match(TSqlParser.USER)
                pass

            elif la_ == 201:
                localctx = TSqlParser.USER_IDContext(self, localctx)
                self.enterOuterAlt(localctx, 201)
                self.state = 13503
                self.match(TSqlParser.USER_ID)
                self.state = 13504
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2342234983759889) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -74874560052724233) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8070028319748746719) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387490746373) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8753867308933840637) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755874891096735745) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -864762596778127649) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -138580854017) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18014399105315111) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -650880200401223699) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -378302373530962465) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689505) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906061) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1155)) & ~0x3f) == 0 and ((1 << (_la - 1155)) & 4996391290535303) != 0):
                    self.state = 13505
                    localctx.user = self.expression(0)


                self.state = 13508
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 202:
                localctx = TSqlParser.USER_NAMEContext(self, localctx)
                self.enterOuterAlt(localctx, 202)
                self.state = 13509
                self.match(TSqlParser.USER_NAME)
                self.state = 13510
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2342234983759889) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -74874560052724233) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8070028319748746719) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387490746373) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8753867308933840637) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755874891096735745) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -864762596778127649) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -138580854017) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18014399105315111) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -650880200401223699) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -378302373530962465) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689505) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906061) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1155)) & ~0x3f) == 0 and ((1 << (_la - 1155)) & 4996391290535303) != 0):
                    self.state = 13511
                    localctx.id_label = self.expression(0)


                self.state = 13514
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_data_type_methodsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_method(self):
            return self.getTypedRuleContext(TSqlParser.Value_methodContext,0)


        def query_method(self):
            return self.getTypedRuleContext(TSqlParser.Query_methodContext,0)


        def exist_method(self):
            return self.getTypedRuleContext(TSqlParser.Exist_methodContext,0)


        def modify_method(self):
            return self.getTypedRuleContext(TSqlParser.Modify_methodContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_xml_data_type_methods

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_data_type_methods" ):
                listener.enterXml_data_type_methods(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_data_type_methods" ):
                listener.exitXml_data_type_methods(self)




    def xml_data_type_methods(self):

        localctx = TSqlParser.Xml_data_type_methodsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1050, self.RULE_xml_data_type_methods)
        try:
            self.state = 13521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1708,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 13517
                self.value_method()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 13518
                self.query_method()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 13519
                self.exist_method()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 13520
                self.modify_method()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dateparts_9Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YEAR(self):
            return self.getToken(TSqlParser.YEAR, 0)

        def YEAR_ABBR(self):
            return self.getToken(TSqlParser.YEAR_ABBR, 0)

        def QUARTER(self):
            return self.getToken(TSqlParser.QUARTER, 0)

        def QUARTER_ABBR(self):
            return self.getToken(TSqlParser.QUARTER_ABBR, 0)

        def MONTH(self):
            return self.getToken(TSqlParser.MONTH, 0)

        def MONTH_ABBR(self):
            return self.getToken(TSqlParser.MONTH_ABBR, 0)

        def DAY(self):
            return self.getToken(TSqlParser.DAY, 0)

        def DAY_ABBR(self):
            return self.getToken(TSqlParser.DAY_ABBR, 0)

        def WEEK(self):
            return self.getToken(TSqlParser.WEEK, 0)

        def WEEK_ABBR(self):
            return self.getToken(TSqlParser.WEEK_ABBR, 0)

        def HOUR(self):
            return self.getToken(TSqlParser.HOUR, 0)

        def HOUR_ABBR(self):
            return self.getToken(TSqlParser.HOUR_ABBR, 0)

        def MINUTE(self):
            return self.getToken(TSqlParser.MINUTE, 0)

        def MINUTE_ABBR(self):
            return self.getToken(TSqlParser.MINUTE_ABBR, 0)

        def SECOND(self):
            return self.getToken(TSqlParser.SECOND, 0)

        def SECOND_ABBR(self):
            return self.getToken(TSqlParser.SECOND_ABBR, 0)

        def MILLISECOND(self):
            return self.getToken(TSqlParser.MILLISECOND, 0)

        def MILLISECOND_ABBR(self):
            return self.getToken(TSqlParser.MILLISECOND_ABBR, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_dateparts_9

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateparts_9" ):
                listener.enterDateparts_9(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateparts_9" ):
                listener.exitDateparts_9(self)




    def dateparts_9(self):

        localctx = TSqlParser.Dateparts_9Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1052, self.RULE_dateparts_9)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13523
            _la = self._input.LA(1)
            if not(((((_la - 1112)) & ~0x3f) == 0 and ((1 << (_la - 1112)) & 17029388297) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dateparts_12Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dateparts_9(self):
            return self.getTypedRuleContext(TSqlParser.Dateparts_9Context,0)


        def DAYOFYEAR(self):
            return self.getToken(TSqlParser.DAYOFYEAR, 0)

        def DAYOFYEAR_ABBR(self):
            return self.getToken(TSqlParser.DAYOFYEAR_ABBR, 0)

        def MICROSECOND(self):
            return self.getToken(TSqlParser.MICROSECOND, 0)

        def MICROSECOND_ABBR(self):
            return self.getToken(TSqlParser.MICROSECOND_ABBR, 0)

        def NANOSECOND(self):
            return self.getToken(TSqlParser.NANOSECOND, 0)

        def NANOSECOND_ABBR(self):
            return self.getToken(TSqlParser.NANOSECOND_ABBR, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_dateparts_12

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateparts_12" ):
                listener.enterDateparts_12(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateparts_12" ):
                listener.exitDateparts_12(self)




    def dateparts_12(self):

        localctx = TSqlParser.Dateparts_12Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1054, self.RULE_dateparts_12)
        try:
            self.state = 13532
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1112, 1115, 1123, 1124, 1126, 1127, 1128, 1129, 1130, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13525
                self.dateparts_9()
                pass
            elif token in [1125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13526
                self.match(TSqlParser.DAYOFYEAR)
                pass
            elif token in [1139]:
                self.enterOuterAlt(localctx, 3)
                self.state = 13527
                self.match(TSqlParser.DAYOFYEAR_ABBR)
                pass
            elif token in [1131]:
                self.enterOuterAlt(localctx, 4)
                self.state = 13528
                self.match(TSqlParser.MICROSECOND)
                pass
            elif token in [1146]:
                self.enterOuterAlt(localctx, 5)
                self.state = 13529
                self.match(TSqlParser.MICROSECOND_ABBR)
                pass
            elif token in [1132]:
                self.enterOuterAlt(localctx, 6)
                self.state = 13530
                self.match(TSqlParser.NANOSECOND)
                pass
            elif token in [1147]:
                self.enterOuterAlt(localctx, 7)
                self.state = 13531
                self.match(TSqlParser.NANOSECOND_ABBR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dateparts_15Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dateparts_12(self):
            return self.getTypedRuleContext(TSqlParser.Dateparts_12Context,0)


        def WEEKDAY(self):
            return self.getToken(TSqlParser.WEEKDAY, 0)

        def WEEKDAY_ABBR(self):
            return self.getToken(TSqlParser.WEEKDAY_ABBR, 0)

        def TZOFFSET(self):
            return self.getToken(TSqlParser.TZOFFSET, 0)

        def TZOFFSET_ABBR(self):
            return self.getToken(TSqlParser.TZOFFSET_ABBR, 0)

        def ISO_WEEK(self):
            return self.getToken(TSqlParser.ISO_WEEK, 0)

        def ISO_WEEK_ABBR(self):
            return self.getToken(TSqlParser.ISO_WEEK_ABBR, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_dateparts_15

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateparts_15" ):
                listener.enterDateparts_15(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateparts_15" ):
                listener.exitDateparts_15(self)




    def dateparts_15(self):

        localctx = TSqlParser.Dateparts_15Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1056, self.RULE_dateparts_15)
        try:
            self.state = 13541
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1112, 1115, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13534
                self.dateparts_12()
                pass
            elif token in [1135]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13535
                self.match(TSqlParser.WEEKDAY)
                pass
            elif token in [1150]:
                self.enterOuterAlt(localctx, 3)
                self.state = 13536
                self.match(TSqlParser.WEEKDAY_ABBR)
                pass
            elif token in [1133]:
                self.enterOuterAlt(localctx, 4)
                self.state = 13537
                self.match(TSqlParser.TZOFFSET)
                pass
            elif token in [1148]:
                self.enterOuterAlt(localctx, 5)
                self.state = 13538
                self.match(TSqlParser.TZOFFSET_ABBR)
                pass
            elif token in [1134]:
                self.enterOuterAlt(localctx, 6)
                self.state = 13539
                self.match(TSqlParser.ISO_WEEK)
                pass
            elif token in [1149]:
                self.enterOuterAlt(localctx, 7)
                self.state = 13540
                self.match(TSqlParser.ISO_WEEK_ABBR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dateparts_datetruncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dateparts_9(self):
            return self.getTypedRuleContext(TSqlParser.Dateparts_9Context,0)


        def DAYOFYEAR(self):
            return self.getToken(TSqlParser.DAYOFYEAR, 0)

        def DAYOFYEAR_ABBR(self):
            return self.getToken(TSqlParser.DAYOFYEAR_ABBR, 0)

        def MICROSECOND(self):
            return self.getToken(TSqlParser.MICROSECOND, 0)

        def MICROSECOND_ABBR(self):
            return self.getToken(TSqlParser.MICROSECOND_ABBR, 0)

        def ISO_WEEK(self):
            return self.getToken(TSqlParser.ISO_WEEK, 0)

        def ISO_WEEK_ABBR(self):
            return self.getToken(TSqlParser.ISO_WEEK_ABBR, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_dateparts_datetrunc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateparts_datetrunc" ):
                listener.enterDateparts_datetrunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateparts_datetrunc" ):
                listener.exitDateparts_datetrunc(self)




    def dateparts_datetrunc(self):

        localctx = TSqlParser.Dateparts_datetruncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1058, self.RULE_dateparts_datetrunc)
        try:
            self.state = 13550
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1112, 1115, 1123, 1124, 1126, 1127, 1128, 1129, 1130, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13543
                self.dateparts_9()
                pass
            elif token in [1125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13544
                self.match(TSqlParser.DAYOFYEAR)
                pass
            elif token in [1139]:
                self.enterOuterAlt(localctx, 3)
                self.state = 13545
                self.match(TSqlParser.DAYOFYEAR_ABBR)
                pass
            elif token in [1131]:
                self.enterOuterAlt(localctx, 4)
                self.state = 13546
                self.match(TSqlParser.MICROSECOND)
                pass
            elif token in [1146]:
                self.enterOuterAlt(localctx, 5)
                self.state = 13547
                self.match(TSqlParser.MICROSECOND_ABBR)
                pass
            elif token in [1134]:
                self.enterOuterAlt(localctx, 6)
                self.state = 13548
                self.match(TSqlParser.ISO_WEEK)
                pass
            elif token in [1149]:
                self.enterOuterAlt(localctx, 7)
                self.state = 13549
                self.match(TSqlParser.ISO_WEEK_ABBR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_methodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.loc_id = None # Token
            self.value_id = None # Full_column_nameContext
            self.eventdata = None # Token
            self.query = None # Query_methodContext
            self.call = None # Value_callContext

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def value_call(self):
            return self.getTypedRuleContext(TSqlParser.Value_callContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def subquery(self):
            return self.getTypedRuleContext(TSqlParser.SubqueryContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def full_column_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_column_nameContext,0)


        def EVENTDATA(self):
            return self.getToken(TSqlParser.EVENTDATA, 0)

        def query_method(self):
            return self.getTypedRuleContext(TSqlParser.Query_methodContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_value_method

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_method" ):
                listener.enterValue_method(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_method" ):
                listener.exitValue_method(self)




    def value_method(self):

        localctx = TSqlParser.Value_methodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1060, self.RULE_value_method)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13562
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1712,self._ctx)
            if la_ == 1:
                self.state = 13552
                localctx.loc_id = self.match(TSqlParser.LOCAL_ID)
                pass

            elif la_ == 2:
                self.state = 13553
                localctx.value_id = self.full_column_name()
                pass

            elif la_ == 3:
                self.state = 13554
                localctx.eventdata = self.match(TSqlParser.EVENTDATA)
                self.state = 13555
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13556
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                self.state = 13557
                localctx.query = self.query_method()
                pass

            elif la_ == 5:
                self.state = 13558
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13559
                self.subquery()
                self.state = 13560
                self.match(TSqlParser.RR_BRACKET)
                pass


            self.state = 13564
            self.match(TSqlParser.DOT)
            self.state = 13565
            localctx.call = self.value_call()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xquery = None # Token
            self.sqltype = None # Token

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def VALUE(self):
            return self.getToken(TSqlParser.VALUE, 0)

        def VALUE_SQUARE_BRACKET(self):
            return self.getToken(TSqlParser.VALUE_SQUARE_BRACKET, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_value_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_call" ):
                listener.enterValue_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_call" ):
                listener.exitValue_call(self)




    def value_call(self):

        localctx = TSqlParser.Value_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1062, self.RULE_value_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13567
            _la = self._input.LA(1)
            if not(_la==1041 or _la==1043):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 13568
            self.match(TSqlParser.LR_BRACKET)
            self.state = 13569
            localctx.xquery = self.match(TSqlParser.STRING)
            self.state = 13570
            self.match(TSqlParser.COMMA)
            self.state = 13571
            localctx.sqltype = self.match(TSqlParser.STRING)
            self.state = 13572
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_methodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.loc_id = None # Token
            self.value_id = None # Full_column_nameContext
            self.call = None # Query_callContext

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def query_call(self):
            return self.getTypedRuleContext(TSqlParser.Query_callContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def subquery(self):
            return self.getTypedRuleContext(TSqlParser.SubqueryContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def full_column_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_column_nameContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_query_method

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_method" ):
                listener.enterQuery_method(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_method" ):
                listener.exitQuery_method(self)




    def query_method(self):

        localctx = TSqlParser.Query_methodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1064, self.RULE_query_method)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13580
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1166]:
                self.state = 13574
                localctx.loc_id = self.match(TSqlParser.LOCAL_ID)
                pass
            elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169, 1191]:
                self.state = 13575
                localctx.value_id = self.full_column_name()
                pass
            elif token in [1192]:
                self.state = 13576
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13577
                self.subquery()
                self.state = 13578
                self.match(TSqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 13582
            self.match(TSqlParser.DOT)
            self.state = 13583
            localctx.call = self.query_call()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xquery = None # Token

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def QUERY(self):
            return self.getToken(TSqlParser.QUERY, 0)

        def QUERY_SQUARE_BRACKET(self):
            return self.getToken(TSqlParser.QUERY_SQUARE_BRACKET, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_query_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_call" ):
                listener.enterQuery_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_call" ):
                listener.exitQuery_call(self)




    def query_call(self):

        localctx = TSqlParser.Query_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1066, self.RULE_query_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13585
            _la = self._input.LA(1)
            if not(_la==739 or _la==740):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 13586
            self.match(TSqlParser.LR_BRACKET)
            self.state = 13587
            localctx.xquery = self.match(TSqlParser.STRING)
            self.state = 13588
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exist_methodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.loc_id = None # Token
            self.value_id = None # Full_column_nameContext
            self.call = None # Exist_callContext

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def exist_call(self):
            return self.getTypedRuleContext(TSqlParser.Exist_callContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def subquery(self):
            return self.getTypedRuleContext(TSqlParser.SubqueryContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def full_column_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_column_nameContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_exist_method

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExist_method" ):
                listener.enterExist_method(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExist_method" ):
                listener.exitExist_method(self)




    def exist_method(self):

        localctx = TSqlParser.Exist_methodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1068, self.RULE_exist_method)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13596
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1166]:
                self.state = 13590
                localctx.loc_id = self.match(TSqlParser.LOCAL_ID)
                pass
            elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169, 1191]:
                self.state = 13591
                localctx.value_id = self.full_column_name()
                pass
            elif token in [1192]:
                self.state = 13592
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13593
                self.subquery()
                self.state = 13594
                self.match(TSqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 13598
            self.match(TSqlParser.DOT)
            self.state = 13599
            localctx.call = self.exist_call()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exist_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xquery = None # Token

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def EXIST(self):
            return self.getToken(TSqlParser.EXIST, 0)

        def EXIST_SQUARE_BRACKET(self):
            return self.getToken(TSqlParser.EXIST_SQUARE_BRACKET, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_exist_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExist_call" ):
                listener.enterExist_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExist_call" ):
                listener.exitExist_call(self)




    def exist_call(self):

        localctx = TSqlParser.Exist_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1070, self.RULE_exist_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13601
            _la = self._input.LA(1)
            if not(_la==319 or _la==321):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 13602
            self.match(TSqlParser.LR_BRACKET)
            self.state = 13603
            localctx.xquery = self.match(TSqlParser.STRING)
            self.state = 13604
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_methodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.loc_id = None # Token
            self.value_id = None # Full_column_nameContext
            self.call = None # Modify_callContext

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def modify_call(self):
            return self.getTypedRuleContext(TSqlParser.Modify_callContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def subquery(self):
            return self.getTypedRuleContext(TSqlParser.SubqueryContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def full_column_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_column_nameContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_modify_method

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_method" ):
                listener.enterModify_method(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_method" ):
                listener.exitModify_method(self)




    def modify_method(self):

        localctx = TSqlParser.Modify_methodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1072, self.RULE_modify_method)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13612
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1166]:
                self.state = 13606
                localctx.loc_id = self.match(TSqlParser.LOCAL_ID)
                pass
            elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169, 1191]:
                self.state = 13607
                localctx.value_id = self.full_column_name()
                pass
            elif token in [1192]:
                self.state = 13608
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13609
                self.subquery()
                self.state = 13610
                self.match(TSqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 13614
            self.match(TSqlParser.DOT)
            self.state = 13615
            localctx.call = self.modify_call()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_dml = None # Token

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def MODIFY(self):
            return self.getToken(TSqlParser.MODIFY, 0)

        def MODIFY_SQUARE_BRACKET(self):
            return self.getToken(TSqlParser.MODIFY_SQUARE_BRACKET, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_modify_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_call" ):
                listener.enterModify_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_call" ):
                listener.exitModify_call(self)




    def modify_call(self):

        localctx = TSqlParser.Modify_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1074, self.RULE_modify_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13617
            _la = self._input.LA(1)
            if not(_la==579 or _la==580):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 13618
            self.match(TSqlParser.LR_BRACKET)
            self.state = 13619
            localctx.xml_dml = self.match(TSqlParser.STRING)
            self.state = 13620
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hierarchyid_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.n = None # ExpressionContext
            self.child1 = None # ExpressionContext
            self.child2 = None # ExpressionContext
            self.parent_ = None # ExpressionContext
            self.oldroot = None # ExpressionContext
            self.newroot = None # ExpressionContext

        def GETANCESTOR(self):
            return self.getToken(TSqlParser.GETANCESTOR, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def GETDESCENDANT(self):
            return self.getToken(TSqlParser.GETDESCENDANT, 0)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def GETLEVEL(self):
            return self.getToken(TSqlParser.GETLEVEL, 0)

        def ISDESCENDANTOF(self):
            return self.getToken(TSqlParser.ISDESCENDANTOF, 0)

        def GETREPARENTEDVALUE(self):
            return self.getToken(TSqlParser.GETREPARENTEDVALUE, 0)

        def TOSTRING(self):
            return self.getToken(TSqlParser.TOSTRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_hierarchyid_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHierarchyid_call" ):
                listener.enterHierarchyid_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHierarchyid_call" ):
                listener.exitHierarchyid_call(self)




    def hierarchyid_call(self):

        localctx = TSqlParser.Hierarchyid_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1076, self.RULE_hierarchyid_call)
        try:
            self.state = 13652
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [388]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13622
                self.match(TSqlParser.GETANCESTOR)
                self.state = 13623
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13624
                localctx.n = self.expression(0)
                self.state = 13625
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [391]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13627
                self.match(TSqlParser.GETDESCENDANT)
                self.state = 13628
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13629
                localctx.child1 = self.expression(0)
                self.state = 13630
                self.match(TSqlParser.COMMA)
                self.state = 13631
                localctx.child2 = self.expression(0)
                self.state = 13632
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [392]:
                self.enterOuterAlt(localctx, 3)
                self.state = 13634
                self.match(TSqlParser.GETLEVEL)
                self.state = 13635
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13636
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [466]:
                self.enterOuterAlt(localctx, 4)
                self.state = 13637
                self.match(TSqlParser.ISDESCENDANTOF)
                self.state = 13638
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13639
                localctx.parent_ = self.expression(0)
                self.state = 13640
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [393]:
                self.enterOuterAlt(localctx, 5)
                self.state = 13642
                self.match(TSqlParser.GETREPARENTEDVALUE)
                self.state = 13643
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13644
                localctx.oldroot = self.expression(0)
                self.state = 13645
                self.match(TSqlParser.COMMA)
                self.state = 13646
                localctx.newroot = self.expression(0)
                self.state = 13647
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [989]:
                self.enterOuterAlt(localctx, 6)
                self.state = 13649
                self.match(TSqlParser.TOSTRING)
                self.state = 13650
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13651
                self.match(TSqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hierarchyid_static_methodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.input_label = None # ExpressionContext

        def HIERARCHYID(self):
            return self.getToken(TSqlParser.HIERARCHYID, 0)

        def DOUBLE_COLON(self):
            return self.getToken(TSqlParser.DOUBLE_COLON, 0)

        def GETROOT(self):
            return self.getToken(TSqlParser.GETROOT, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def PARSE(self):
            return self.getToken(TSqlParser.PARSE, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_hierarchyid_static_method

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHierarchyid_static_method" ):
                listener.enterHierarchyid_static_method(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHierarchyid_static_method" ):
                listener.exitHierarchyid_static_method(self)




    def hierarchyid_static_method(self):

        localctx = TSqlParser.Hierarchyid_static_methodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1078, self.RULE_hierarchyid_static_method)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13654
            self.match(TSqlParser.HIERARCHYID)
            self.state = 13655
            self.match(TSqlParser.DOUBLE_COLON)
            self.state = 13664
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [394]:
                self.state = 13656
                self.match(TSqlParser.GETROOT)
                self.state = 13657
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13658
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [683]:
                self.state = 13659
                self.match(TSqlParser.PARSE)
                self.state = 13660
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13661
                localctx.input_label = self.expression(0)
                self.state = 13662
                self.match(TSqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nodes_methodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.loc_id = None # Token
            self.value_id = None # Full_column_nameContext
            self.xquery = None # Token

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def NODES(self):
            return self.getToken(TSqlParser.NODES, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def subquery(self):
            return self.getTypedRuleContext(TSqlParser.SubqueryContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def full_column_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_column_nameContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_nodes_method

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNodes_method" ):
                listener.enterNodes_method(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNodes_method" ):
                listener.exitNodes_method(self)




    def nodes_method(self):

        localctx = TSqlParser.Nodes_methodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1080, self.RULE_nodes_method)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13672
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1166]:
                self.state = 13666
                localctx.loc_id = self.match(TSqlParser.LOCAL_ID)
                pass
            elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169, 1191]:
                self.state = 13667
                localctx.value_id = self.full_column_name()
                pass
            elif token in [1192]:
                self.state = 13668
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13669
                self.subquery()
                self.state = 13670
                self.match(TSqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 13674
            self.match(TSqlParser.DOT)
            self.state = 13675
            self.match(TSqlParser.NODES)
            self.state = 13676
            self.match(TSqlParser.LR_BRACKET)
            self.state = 13677
            localctx.xquery = self.match(TSqlParser.STRING)
            self.state = 13678
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(TSqlParser.WHEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def THEN(self):
            return self.getToken(TSqlParser.THEN, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_switch_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_section" ):
                listener.enterSwitch_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_section" ):
                listener.exitSwitch_section(self)




    def switch_section(self):

        localctx = TSqlParser.Switch_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1082, self.RULE_switch_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13680
            self.match(TSqlParser.WHEN)
            self.state = 13681
            self.expression(0)
            self.state = 13682
            self.match(TSqlParser.THEN)
            self.state = 13683
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_search_condition_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(TSqlParser.WHEN, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def THEN(self):
            return self.getToken(TSqlParser.THEN, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_switch_search_condition_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_search_condition_section" ):
                listener.enterSwitch_search_condition_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_search_condition_section" ):
                listener.exitSwitch_search_condition_section(self)




    def switch_search_condition_section(self):

        localctx = TSqlParser.Switch_search_condition_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1084, self.RULE_switch_search_condition_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13685
            self.match(TSqlParser.WHEN)
            self.state = 13686
            self.search_condition(0)
            self.state = 13687
            self.match(TSqlParser.THEN)
            self.state = 13688
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_column_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_alias(self):
            return self.getTypedRuleContext(TSqlParser.Column_aliasContext,0)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_as_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_column_alias" ):
                listener.enterAs_column_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_column_alias" ):
                listener.exitAs_column_alias(self)




    def as_column_alias(self):

        localctx = TSqlParser.As_column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1086, self.RULE_as_column_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 13690
                self.match(TSqlParser.AS)


            self.state = 13693
            self.column_alias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_table_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_alias(self):
            return self.getTypedRuleContext(TSqlParser.Table_aliasContext,0)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_as_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_table_alias" ):
                listener.enterAs_table_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_table_alias" ):
                listener.exitAs_table_alias(self)




    def as_table_alias(self):

        localctx = TSqlParser.As_table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1088, self.RULE_as_table_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 13695
                self.match(TSqlParser.AS)


            self.state = 13698
            self.table_alias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)




    def table_alias(self):

        localctx = TSqlParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1090, self.RULE_table_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13700
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_table_hintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._table_hint = None # Table_hintContext
            self.hint = list() # of Table_hintContexts

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def table_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Table_hintContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Table_hintContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_with_table_hints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_table_hints" ):
                listener.enterWith_table_hints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_table_hints" ):
                listener.exitWith_table_hints(self)




    def with_table_hints(self):

        localctx = TSqlParser.With_table_hintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1092, self.RULE_with_table_hints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13702
            self.match(TSqlParser.WITH)
            self.state = 13703
            self.match(TSqlParser.LR_BRACKET)
            self.state = 13704
            localctx._table_hint = self.table_hint()
            localctx.hint.append(localctx._table_hint)
            self.state = 13711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 367)) & ~0x3f) == 0 and ((1 << (_la - 367)) & 4503599627370499) != 0) or ((((_la - 432)) & ~0x3f) == 0 and ((1 << (_la - 432)) & 45035996273737745) != 0) or ((((_la - 601)) & ~0x3f) == 0 and ((1 << (_la - 601)) & 131105) != 0) or _la==680 or ((((_la - 755)) & ~0x3f) == 0 and ((1 << (_la - 755)) & 4294967339) != 0) or _la==829 or _la==875 or ((((_la - 908)) & ~0x3f) == 0 and ((1 << (_la - 908)) & 6917529027641082113) != 0) or _la==1030 or _la==1073 or _la==1194:
                self.state = 13706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 13705
                    self.match(TSqlParser.COMMA)


                self.state = 13708
                localctx._table_hint = self.table_hint()
                localctx.hint.append(localctx._table_hint)
                self.state = 13713
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 13714
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deprecated_table_hintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def table_hint(self):
            return self.getTypedRuleContext(TSqlParser.Table_hintContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_deprecated_table_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeprecated_table_hint" ):
                listener.enterDeprecated_table_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeprecated_table_hint" ):
                listener.exitDeprecated_table_hint(self)




    def deprecated_table_hint(self):

        localctx = TSqlParser.Deprecated_table_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1094, self.RULE_deprecated_table_hint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13716
            self.match(TSqlParser.LR_BRACKET)
            self.state = 13717
            self.table_hint()
            self.state = 13718
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sybase_legacy_hintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sybase_legacy_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Sybase_legacy_hintContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Sybase_legacy_hintContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_sybase_legacy_hints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSybase_legacy_hints" ):
                listener.enterSybase_legacy_hints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSybase_legacy_hints" ):
                listener.exitSybase_legacy_hints(self)




    def sybase_legacy_hints(self):

        localctx = TSqlParser.Sybase_legacy_hintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1096, self.RULE_sybase_legacy_hints)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13721 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 13720
                    self.sybase_legacy_hint()

                else:
                    raise NoViableAltException(self)
                self.state = 13723 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1723,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sybase_legacy_hintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HOLDLOCK(self):
            return self.getToken(TSqlParser.HOLDLOCK, 0)

        def NOHOLDLOCK(self):
            return self.getToken(TSqlParser.NOHOLDLOCK, 0)

        def READPAST(self):
            return self.getToken(TSqlParser.READPAST, 0)

        def SHARED(self):
            return self.getToken(TSqlParser.SHARED, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_sybase_legacy_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSybase_legacy_hint" ):
                listener.enterSybase_legacy_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSybase_legacy_hint" ):
                listener.exitSybase_legacy_hint(self)




    def sybase_legacy_hint(self):

        localctx = TSqlParser.Sybase_legacy_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1098, self.RULE_sybase_legacy_hint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13725
            _la = self._input.LA(1)
            if not(_la==419 or _la==603 or _la==758 or _la==893):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_hintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOEXPAND(self):
            return self.getToken(TSqlParser.NOEXPAND, 0)

        def INDEX(self):
            return self.getToken(TSqlParser.INDEX, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def index_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Index_valueContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Index_valueContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def FORCESEEK(self):
            return self.getToken(TSqlParser.FORCESEEK, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def FORCESCAN(self):
            return self.getToken(TSqlParser.FORCESCAN, 0)

        def HOLDLOCK(self):
            return self.getToken(TSqlParser.HOLDLOCK, 0)

        def NOLOCK(self):
            return self.getToken(TSqlParser.NOLOCK, 0)

        def NOWAIT(self):
            return self.getToken(TSqlParser.NOWAIT, 0)

        def PAGLOCK(self):
            return self.getToken(TSqlParser.PAGLOCK, 0)

        def READCOMMITTED(self):
            return self.getToken(TSqlParser.READCOMMITTED, 0)

        def READCOMMITTEDLOCK(self):
            return self.getToken(TSqlParser.READCOMMITTEDLOCK, 0)

        def READPAST(self):
            return self.getToken(TSqlParser.READPAST, 0)

        def READUNCOMMITTED(self):
            return self.getToken(TSqlParser.READUNCOMMITTED, 0)

        def REPEATABLEREAD(self):
            return self.getToken(TSqlParser.REPEATABLEREAD, 0)

        def ROWLOCK(self):
            return self.getToken(TSqlParser.ROWLOCK, 0)

        def SERIALIZABLE(self):
            return self.getToken(TSqlParser.SERIALIZABLE, 0)

        def SNAPSHOT(self):
            return self.getToken(TSqlParser.SNAPSHOT, 0)

        def SPATIAL_WINDOW_MAX_CELLS(self):
            return self.getToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def TABLOCK(self):
            return self.getToken(TSqlParser.TABLOCK, 0)

        def TABLOCKX(self):
            return self.getToken(TSqlParser.TABLOCKX, 0)

        def UPDLOCK(self):
            return self.getToken(TSqlParser.UPDLOCK, 0)

        def XLOCK(self):
            return self.getToken(TSqlParser.XLOCK, 0)

        def KEEPIDENTITY(self):
            return self.getToken(TSqlParser.KEEPIDENTITY, 0)

        def KEEPDEFAULTS(self):
            return self.getToken(TSqlParser.KEEPDEFAULTS, 0)

        def IGNORE_CONSTRAINTS(self):
            return self.getToken(TSqlParser.IGNORE_CONSTRAINTS, 0)

        def IGNORE_TRIGGERS(self):
            return self.getToken(TSqlParser.IGNORE_TRIGGERS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_table_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_hint" ):
                listener.enterTable_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_hint" ):
                listener.exitTable_hint(self)




    def table_hint(self):

        localctx = TSqlParser.Table_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1100, self.RULE_table_hint)
        self._la = 0 # Token type
        try:
            self.state = 13783
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [601]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13727
                self.match(TSqlParser.NOEXPAND)
                pass
            elif token in [447]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13728
                self.match(TSqlParser.INDEX)
                self.state = 13747
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1725,self._ctx)
                if la_ == 1:
                    self.state = 13729
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 13730
                    self.index_value()
                    self.state = 13735
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1194:
                        self.state = 13731
                        self.match(TSqlParser.COMMA)
                        self.state = 13732
                        self.index_value()
                        self.state = 13737
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 13738
                    self.match(TSqlParser.RR_BRACKET)
                    pass

                elif la_ == 2:
                    self.state = 13740
                    self.match(TSqlParser.EQUAL)
                    self.state = 13741
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 13742
                    self.index_value()
                    self.state = 13743
                    self.match(TSqlParser.RR_BRACKET)
                    pass

                elif la_ == 3:
                    self.state = 13745
                    self.match(TSqlParser.EQUAL)
                    self.state = 13746
                    self.index_value()
                    pass


                pass
            elif token in [368]:
                self.enterOuterAlt(localctx, 3)
                self.state = 13749
                self.match(TSqlParser.FORCESEEK)
                self.state = 13757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1192:
                    self.state = 13750
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 13751
                    self.index_value()
                    self.state = 13752
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 13753
                    self.column_name_list()
                    self.state = 13754
                    self.match(TSqlParser.RR_BRACKET)
                    self.state = 13755
                    self.match(TSqlParser.RR_BRACKET)


                pass
            elif token in [367]:
                self.enterOuterAlt(localctx, 4)
                self.state = 13759
                self.match(TSqlParser.FORCESCAN)
                pass
            elif token in [419]:
                self.enterOuterAlt(localctx, 5)
                self.state = 13760
                self.match(TSqlParser.HOLDLOCK)
                pass
            elif token in [606]:
                self.enterOuterAlt(localctx, 6)
                self.state = 13761
                self.match(TSqlParser.NOLOCK)
                pass
            elif token in [618]:
                self.enterOuterAlt(localctx, 7)
                self.state = 13762
                self.match(TSqlParser.NOWAIT)
                pass
            elif token in [680]:
                self.enterOuterAlt(localctx, 8)
                self.state = 13763
                self.match(TSqlParser.PAGLOCK)
                pass
            elif token in [755]:
                self.enterOuterAlt(localctx, 9)
                self.state = 13764
                self.match(TSqlParser.READCOMMITTED)
                pass
            elif token in [756]:
                self.enterOuterAlt(localctx, 10)
                self.state = 13765
                self.match(TSqlParser.READCOMMITTEDLOCK)
                pass
            elif token in [758]:
                self.enterOuterAlt(localctx, 11)
                self.state = 13766
                self.match(TSqlParser.READPAST)
                pass
            elif token in [760]:
                self.enterOuterAlt(localctx, 12)
                self.state = 13767
                self.match(TSqlParser.READUNCOMMITTED)
                pass
            elif token in [787]:
                self.enterOuterAlt(localctx, 13)
                self.state = 13768
                self.match(TSqlParser.REPEATABLEREAD)
                pass
            elif token in [829]:
                self.enterOuterAlt(localctx, 14)
                self.state = 13769
                self.match(TSqlParser.ROWLOCK)
                pass
            elif token in [875]:
                self.enterOuterAlt(localctx, 15)
                self.state = 13770
                self.match(TSqlParser.SERIALIZABLE)
                pass
            elif token in [908]:
                self.enterOuterAlt(localctx, 16)
                self.state = 13771
                self.match(TSqlParser.SNAPSHOT)
                pass
            elif token in [916]:
                self.enterOuterAlt(localctx, 17)
                self.state = 13772
                self.match(TSqlParser.SPATIAL_WINDOW_MAX_CELLS)
                self.state = 13773
                self.match(TSqlParser.EQUAL)
                self.state = 13774
                self.match(TSqlParser.DECIMAL)
                pass
            elif token in [969]:
                self.enterOuterAlt(localctx, 18)
                self.state = 13775
                self.match(TSqlParser.TABLOCK)
                pass
            elif token in [970]:
                self.enterOuterAlt(localctx, 19)
                self.state = 13776
                self.match(TSqlParser.TABLOCKX)
                pass
            elif token in [1030]:
                self.enterOuterAlt(localctx, 20)
                self.state = 13777
                self.match(TSqlParser.UPDLOCK)
                pass
            elif token in [1073]:
                self.enterOuterAlt(localctx, 21)
                self.state = 13778
                self.match(TSqlParser.XLOCK)
                pass
            elif token in [487]:
                self.enterOuterAlt(localctx, 22)
                self.state = 13779
                self.match(TSqlParser.KEEPIDENTITY)
                pass
            elif token in [485]:
                self.enterOuterAlt(localctx, 23)
                self.state = 13780
                self.match(TSqlParser.KEEPDEFAULTS)
                pass
            elif token in [432]:
                self.enterOuterAlt(localctx, 24)
                self.state = 13781
                self.match(TSqlParser.IGNORE_CONSTRAINTS)
                pass
            elif token in [436]:
                self.enterOuterAlt(localctx, 25)
                self.state = 13782
                self.match(TSqlParser.IGNORE_TRIGGERS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_index_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_value" ):
                listener.enterIndex_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_value" ):
                listener.exitIndex_value(self)




    def index_value(self):

        localctx = TSqlParser.Index_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1102, self.RULE_index_value)
        try:
            self.state = 13787
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13785
                self.id_()
                pass
            elif token in [1168]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13786
                self.match(TSqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_alias_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._column_alias = None # Column_aliasContext
            self.alias = list() # of Column_aliasContexts

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Column_aliasContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_column_alias_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias_list" ):
                listener.enterColumn_alias_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias_list" ):
                listener.exitColumn_alias_list(self)




    def column_alias_list(self):

        localctx = TSqlParser.Column_alias_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1104, self.RULE_column_alias_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13789
            self.match(TSqlParser.LR_BRACKET)
            self.state = 13790
            localctx._column_alias = self.column_alias()
            localctx.alias.append(localctx._column_alias)
            self.state = 13795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 13791
                self.match(TSqlParser.COMMA)
                self.state = 13792
                localctx._column_alias = self.column_alias()
                localctx.alias.append(localctx._column_alias)
                self.state = 13797
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 13798
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)




    def column_alias(self):

        localctx = TSqlParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1106, self.RULE_column_alias)
        try:
            self.state = 13802
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13800
                self.id_()
                pass
            elif token in [1170]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13801
                self.match(TSqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_value_constructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expression_list_ = None # Expression_list_Context
            self.exps = list() # of Expression_list_Contexts

        def VALUES(self):
            return self.getToken(TSqlParser.VALUES, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def expression_list_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Expression_list_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Expression_list_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_table_value_constructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_value_constructor" ):
                listener.enterTable_value_constructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_value_constructor" ):
                listener.exitTable_value_constructor(self)




    def table_value_constructor(self):

        localctx = TSqlParser.Table_value_constructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1108, self.RULE_table_value_constructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13804
            self.match(TSqlParser.VALUES)
            self.state = 13805
            self.match(TSqlParser.LR_BRACKET)
            self.state = 13806
            localctx._expression_list_ = self.expression_list_()
            localctx.exps.append(localctx._expression_list_)
            self.state = 13807
            self.match(TSqlParser.RR_BRACKET)
            self.state = 13815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 13808
                self.match(TSqlParser.COMMA)
                self.state = 13809
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13810
                localctx._expression_list_ = self.expression_list_()
                localctx.exps.append(localctx._expression_list_)
                self.state = 13811
                self.match(TSqlParser.RR_BRACKET)
                self.state = 13817
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_list_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expression = None # ExpressionContext
            self.exp = list() # of ExpressionContexts

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_expression_list_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list_" ):
                listener.enterExpression_list_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list_" ):
                listener.exitExpression_list_(self)




    def expression_list_(self):

        localctx = TSqlParser.Expression_list_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1110, self.RULE_expression_list_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13818
            localctx._expression = self.expression(0)
            localctx.exp.append(localctx._expression)
            self.state = 13823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 13819
                self.match(TSqlParser.COMMA)
                self.state = 13820
                localctx._expression = self.expression(0)
                localctx.exp.append(localctx._expression)
                self.state = 13825
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ranking_windowed_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def over_clause(self):
            return self.getTypedRuleContext(TSqlParser.Over_clauseContext,0)


        def RANK(self):
            return self.getToken(TSqlParser.RANK, 0)

        def DENSE_RANK(self):
            return self.getToken(TSqlParser.DENSE_RANK, 0)

        def ROW_NUMBER(self):
            return self.getToken(TSqlParser.ROW_NUMBER, 0)

        def NTILE(self):
            return self.getToken(TSqlParser.NTILE, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_ranking_windowed_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRanking_windowed_function" ):
                listener.enterRanking_windowed_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRanking_windowed_function" ):
                listener.exitRanking_windowed_function(self)




    def ranking_windowed_function(self):

        localctx = TSqlParser.Ranking_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1112, self.RULE_ranking_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 13836
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [254, 749, 831]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13826
                _la = self._input.LA(1)
                if not(_la==254 or _la==749 or _la==831):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 13827
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13828
                self.match(TSqlParser.RR_BRACKET)
                self.state = 13829
                self.over_clause()
                pass
            elif token in [627]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13830
                self.match(TSqlParser.NTILE)
                self.state = 13831
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13832
                self.expression(0)
                self.state = 13833
                self.match(TSqlParser.RR_BRACKET)
                self.state = 13834
                self.over_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_windowed_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.agg_func = None # Token
            self.cnt = None # Token

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def all_distinct_expression(self):
            return self.getTypedRuleContext(TSqlParser.All_distinct_expressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def AVG(self):
            return self.getToken(TSqlParser.AVG, 0)

        def MAX(self):
            return self.getToken(TSqlParser.MAX, 0)

        def MIN(self):
            return self.getToken(TSqlParser.MIN, 0)

        def SUM(self):
            return self.getToken(TSqlParser.SUM, 0)

        def STDEV(self):
            return self.getToken(TSqlParser.STDEV, 0)

        def STDEVP(self):
            return self.getToken(TSqlParser.STDEVP, 0)

        def VAR(self):
            return self.getToken(TSqlParser.VAR, 0)

        def VARP(self):
            return self.getToken(TSqlParser.VARP, 0)

        def over_clause(self):
            return self.getTypedRuleContext(TSqlParser.Over_clauseContext,0)


        def COUNT(self):
            return self.getToken(TSqlParser.COUNT, 0)

        def COUNT_BIG(self):
            return self.getToken(TSqlParser.COUNT_BIG, 0)

        def STAR(self):
            return self.getToken(TSqlParser.STAR, 0)

        def CHECKSUM_AGG(self):
            return self.getToken(TSqlParser.CHECKSUM_AGG, 0)

        def GROUPING(self):
            return self.getToken(TSqlParser.GROUPING, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def GROUPING_ID(self):
            return self.getToken(TSqlParser.GROUPING_ID, 0)

        def expression_list_(self):
            return self.getTypedRuleContext(TSqlParser.Expression_list_Context,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_aggregate_windowed_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_windowed_function" ):
                listener.enterAggregate_windowed_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_windowed_function" ):
                listener.exitAggregate_windowed_function(self)




    def aggregate_windowed_function(self):

        localctx = TSqlParser.Aggregate_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1114, self.RULE_aggregate_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 13870
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83, 537, 568, 939, 940, 953, 1044, 1046]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13838
                localctx.agg_func = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==83 or _la==537 or _la==568 or ((((_la - 939)) & ~0x3f) == 0 and ((1 << (_la - 939)) & 16387) != 0) or _la==1044 or _la==1046):
                    localctx.agg_func = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 13839
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13840
                self.all_distinct_expression()
                self.state = 13841
                self.match(TSqlParser.RR_BRACKET)
                self.state = 13843
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1734,self._ctx)
                if la_ == 1:
                    self.state = 13842
                    self.over_clause()


                pass
            elif token in [193, 195]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13845
                localctx.cnt = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==193 or _la==195):
                    localctx.cnt = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 13846
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13849
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1198]:
                    self.state = 13847
                    self.match(TSqlParser.STAR)
                    pass
                elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 274, 275, 276, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 377, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 817, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1156, 1157, 1162, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1187, 1191, 1192, 1201, 1202, 1203, 1207]:
                    self.state = 13848
                    self.all_distinct_expression()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 13851
                self.match(TSqlParser.RR_BRACKET)
                self.state = 13853
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1736,self._ctx)
                if la_ == 1:
                    self.state = 13852
                    self.over_clause()


                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 3)
                self.state = 13855
                self.match(TSqlParser.CHECKSUM_AGG)
                self.state = 13856
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13857
                self.all_distinct_expression()
                self.state = 13858
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [404]:
                self.enterOuterAlt(localctx, 4)
                self.state = 13860
                self.match(TSqlParser.GROUPING)
                self.state = 13861
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13862
                self.expression(0)
                self.state = 13863
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [405]:
                self.enterOuterAlt(localctx, 5)
                self.state = 13865
                self.match(TSqlParser.GROUPING_ID)
                self.state = 13866
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13867
                self.expression_list_()
                self.state = 13868
                self.match(TSqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analytic_windowed_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def over_clause(self):
            return self.getTypedRuleContext(TSqlParser.Over_clauseContext,0)


        def FIRST_VALUE(self):
            return self.getToken(TSqlParser.FIRST_VALUE, 0)

        def LAST_VALUE(self):
            return self.getToken(TSqlParser.LAST_VALUE, 0)

        def LAG(self):
            return self.getToken(TSqlParser.LAG, 0)

        def LEAD(self):
            return self.getToken(TSqlParser.LEAD, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def OVER(self):
            return self.getToken(TSqlParser.OVER, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(TSqlParser.Order_by_clauseContext,0)


        def CUME_DIST(self):
            return self.getToken(TSqlParser.CUME_DIST, 0)

        def PERCENT_RANK(self):
            return self.getToken(TSqlParser.PERCENT_RANK, 0)

        def PARTITION(self):
            return self.getToken(TSqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def expression_list_(self):
            return self.getTypedRuleContext(TSqlParser.Expression_list_Context,0)


        def WITHIN(self):
            return self.getToken(TSqlParser.WITHIN, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(TSqlParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(TSqlParser.PERCENTILE_DISC, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_analytic_windowed_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalytic_windowed_function" ):
                listener.enterAnalytic_windowed_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalytic_windowed_function" ):
                listener.exitAnalytic_windowed_function(self)




    def analytic_windowed_function(self):

        localctx = TSqlParser.Analytic_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1116, self.RULE_analytic_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 13923
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [360, 499]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13872
                _la = self._input.LA(1)
                if not(_la==360 or _la==499):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 13873
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13874
                self.expression(0)
                self.state = 13875
                self.match(TSqlParser.RR_BRACKET)
                self.state = 13876
                self.over_clause()
                pass
            elif token in [496, 500]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13878
                _la = self._input.LA(1)
                if not(_la==496 or _la==500):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 13879
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13880
                self.expression(0)
                self.state = 13887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 13881
                    self.match(TSqlParser.COMMA)
                    self.state = 13882
                    self.expression(0)
                    self.state = 13885
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 13883
                        self.match(TSqlParser.COMMA)
                        self.state = 13884
                        self.expression(0)




                self.state = 13889
                self.match(TSqlParser.RR_BRACKET)
                self.state = 13890
                self.over_clause()
                pass
            elif token in [203, 698]:
                self.enterOuterAlt(localctx, 3)
                self.state = 13892
                _la = self._input.LA(1)
                if not(_la==203 or _la==698):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 13893
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13894
                self.match(TSqlParser.RR_BRACKET)
                self.state = 13895
                self.match(TSqlParser.OVER)
                self.state = 13896
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==687:
                    self.state = 13897
                    self.match(TSqlParser.PARTITION)
                    self.state = 13898
                    self.match(TSqlParser.BY)
                    self.state = 13899
                    self.expression_list_()


                self.state = 13902
                self.order_by_clause()
                self.state = 13903
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [696, 697]:
                self.enterOuterAlt(localctx, 4)
                self.state = 13905
                _la = self._input.LA(1)
                if not(_la==696 or _la==697):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 13906
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13907
                self.expression(0)
                self.state = 13908
                self.match(TSqlParser.RR_BRACKET)
                self.state = 13909
                self.match(TSqlParser.WITHIN)
                self.state = 13910
                self.match(TSqlParser.GROUP)
                self.state = 13911
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13912
                self.order_by_clause()
                self.state = 13913
                self.match(TSqlParser.RR_BRACKET)
                self.state = 13914
                self.match(TSqlParser.OVER)
                self.state = 13915
                self.match(TSqlParser.LR_BRACKET)
                self.state = 13919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==687:
                    self.state = 13916
                    self.match(TSqlParser.PARTITION)
                    self.state = 13917
                    self.match(TSqlParser.BY)
                    self.state = 13918
                    self.expression_list_()


                self.state = 13921
                self.match(TSqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_distinct_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(TSqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_all_distinct_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_distinct_expression" ):
                listener.enterAll_distinct_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_distinct_expression" ):
                listener.exitAll_distinct_expression(self)




    def all_distinct_expression(self):

        localctx = TSqlParser.All_distinct_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1118, self.RULE_all_distinct_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22 or _la==272:
                self.state = 13925
                _la = self._input.LA(1)
                if not(_la==22 or _la==272):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 13928
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Over_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(TSqlParser.OVER, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def PARTITION(self):
            return self.getToken(TSqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def expression_list_(self):
            return self.getTypedRuleContext(TSqlParser.Expression_list_Context,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(TSqlParser.Order_by_clauseContext,0)


        def row_or_range_clause(self):
            return self.getTypedRuleContext(TSqlParser.Row_or_range_clauseContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)




    def over_clause(self):

        localctx = TSqlParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1120, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13930
            self.match(TSqlParser.OVER)
            self.state = 13931
            self.match(TSqlParser.LR_BRACKET)
            self.state = 13935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==687:
                self.state = 13932
                self.match(TSqlParser.PARTITION)
                self.state = 13933
                self.match(TSqlParser.BY)
                self.state = 13934
                self.expression_list_()


            self.state = 13938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==666:
                self.state = 13937
                self.order_by_clause()


            self.state = 13941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==748 or _la==830:
                self.state = 13940
                self.row_or_range_clause()


            self.state = 13943
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_or_range_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_extent(self):
            return self.getTypedRuleContext(TSqlParser.Window_frame_extentContext,0)


        def ROWS(self):
            return self.getToken(TSqlParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(TSqlParser.RANGE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_row_or_range_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_or_range_clause" ):
                listener.enterRow_or_range_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_or_range_clause" ):
                listener.exitRow_or_range_clause(self)




    def row_or_range_clause(self):

        localctx = TSqlParser.Row_or_range_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1122, self.RULE_row_or_range_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13945
            _la = self._input.LA(1)
            if not(_la==748 or _la==830):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 13946
            self.window_frame_extent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_extentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_preceding(self):
            return self.getTypedRuleContext(TSqlParser.Window_frame_precedingContext,0)


        def BETWEEN(self):
            return self.getToken(TSqlParser.BETWEEN, 0)

        def window_frame_bound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Window_frame_boundContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Window_frame_boundContext,i)


        def AND(self):
            return self.getToken(TSqlParser.AND, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_window_frame_extent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_extent" ):
                listener.enterWindow_frame_extent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_extent" ):
                listener.exitWindow_frame_extent(self)




    def window_frame_extent(self):

        localctx = TSqlParser.Window_frame_extentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1124, self.RULE_window_frame_extent)
        try:
            self.state = 13954
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [204, 1015, 1168]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13948
                self.window_frame_preceding()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13949
                self.match(TSqlParser.BETWEEN)
                self.state = 13950
                self.window_frame_bound()
                self.state = 13951
                self.match(TSqlParser.AND)
                self.state = 13952
                self.window_frame_bound()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_boundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_preceding(self):
            return self.getTypedRuleContext(TSqlParser.Window_frame_precedingContext,0)


        def window_frame_following(self):
            return self.getTypedRuleContext(TSqlParser.Window_frame_followingContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_window_frame_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_bound" ):
                listener.enterWindow_frame_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_bound" ):
                listener.exitWindow_frame_bound(self)




    def window_frame_bound(self):

        localctx = TSqlParser.Window_frame_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1126, self.RULE_window_frame_bound)
        try:
            self.state = 13958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1748,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 13956
                self.window_frame_preceding()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 13957
                self.window_frame_following()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_precedingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(TSqlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(TSqlParser.PRECEDING, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def CURRENT(self):
            return self.getToken(TSqlParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(TSqlParser.ROW, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_window_frame_preceding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_preceding" ):
                listener.enterWindow_frame_preceding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_preceding" ):
                listener.exitWindow_frame_preceding(self)




    def window_frame_preceding(self):

        localctx = TSqlParser.Window_frame_precedingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1128, self.RULE_window_frame_preceding)
        try:
            self.state = 13966
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1015]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13960
                self.match(TSqlParser.UNBOUNDED)
                self.state = 13961
                self.match(TSqlParser.PRECEDING)
                pass
            elif token in [1168]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13962
                self.match(TSqlParser.DECIMAL)
                self.state = 13963
                self.match(TSqlParser.PRECEDING)
                pass
            elif token in [204]:
                self.enterOuterAlt(localctx, 3)
                self.state = 13964
                self.match(TSqlParser.CURRENT)
                self.state = 13965
                self.match(TSqlParser.ROW)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_followingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(TSqlParser.UNBOUNDED, 0)

        def FOLLOWING(self):
            return self.getToken(TSqlParser.FOLLOWING, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_window_frame_following

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_following" ):
                listener.enterWindow_frame_following(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_following" ):
                listener.exitWindow_frame_following(self)




    def window_frame_following(self):

        localctx = TSqlParser.Window_frame_followingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1130, self.RULE_window_frame_following)
        try:
            self.state = 13972
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1015]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13968
                self.match(TSqlParser.UNBOUNDED)
                self.state = 13969
                self.match(TSqlParser.FOLLOWING)
                pass
            elif token in [1168]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13970
                self.match(TSqlParser.DECIMAL)
                self.state = 13971
                self.match(TSqlParser.FOLLOWING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_database_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILESTREAM(self):
            return self.getToken(TSqlParser.FILESTREAM, 0)

        def database_filestream_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Database_filestream_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Database_filestream_optionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def DEFAULT_LANGUAGE(self):
            return self.getToken(TSqlParser.DEFAULT_LANGUAGE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def DEFAULT_FULLTEXT_LANGUAGE(self):
            return self.getToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0)

        def NESTED_TRIGGERS(self):
            return self.getToken(TSqlParser.NESTED_TRIGGERS, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def TRANSFORM_NOISE_WORDS(self):
            return self.getToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0)

        def TWO_DIGIT_YEAR_CUTOFF(self):
            return self.getToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def DB_CHAINING(self):
            return self.getToken(TSqlParser.DB_CHAINING, 0)

        def TRUSTWORTHY(self):
            return self.getToken(TSqlParser.TRUSTWORTHY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_database_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_database_option" ):
                listener.enterCreate_database_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_database_option" ):
                listener.exitCreate_database_option(self)




    def create_database_option(self):

        localctx = TSqlParser.Create_database_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1132, self.RULE_create_database_option)
        self._la = 0 # Token type
        try:
            self.state = 14008
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [351]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13974
                self.match(TSqlParser.FILESTREAM)

                self.state = 13975
                self.database_filestream_option()
                self.state = 13980
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1751,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 13976
                        self.match(TSqlParser.COMMA)
                        self.state = 13977
                        self.database_filestream_option() 
                    self.state = 13982
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1751,self._ctx)

                pass
            elif token in [247]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13983
                self.match(TSqlParser.DEFAULT_LANGUAGE)
                self.state = 13984
                self.match(TSqlParser.EQUAL)
                self.state = 13987
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                    self.state = 13985
                    self.id_()
                    pass
                elif token in [1170]:
                    self.state = 13986
                    self.match(TSqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [246]:
                self.enterOuterAlt(localctx, 3)
                self.state = 13989
                self.match(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE)
                self.state = 13990
                self.match(TSqlParser.EQUAL)
                self.state = 13993
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                    self.state = 13991
                    self.id_()
                    pass
                elif token in [1170]:
                    self.state = 13992
                    self.match(TSqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [588]:
                self.enterOuterAlt(localctx, 4)
                self.state = 13995
                self.match(TSqlParser.NESTED_TRIGGERS)
                self.state = 13996
                self.match(TSqlParser.EQUAL)
                self.state = 13997
                _la = self._input.LA(1)
                if not(_la==643 or _la==649):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [997]:
                self.enterOuterAlt(localctx, 5)
                self.state = 13998
                self.match(TSqlParser.TRANSFORM_NOISE_WORDS)
                self.state = 13999
                self.match(TSqlParser.EQUAL)
                self.state = 14000
                _la = self._input.LA(1)
                if not(_la==643 or _la==649):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [1009]:
                self.enterOuterAlt(localctx, 6)
                self.state = 14001
                self.match(TSqlParser.TWO_DIGIT_YEAR_CUTOFF)
                self.state = 14002
                self.match(TSqlParser.EQUAL)
                self.state = 14003
                self.match(TSqlParser.DECIMAL)
                pass
            elif token in [234]:
                self.enterOuterAlt(localctx, 7)
                self.state = 14004
                self.match(TSqlParser.DB_CHAINING)
                self.state = 14005
                _la = self._input.LA(1)
                if not(_la==643 or _la==649):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [1004]:
                self.enterOuterAlt(localctx, 8)
                self.state = 14006
                self.match(TSqlParser.TRUSTWORTHY)
                self.state = 14007
                _la = self._input.LA(1)
                if not(_la==643 or _la==649):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_filestream_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def NON_TRANSACTED_ACCESS(self):
            return self.getToken(TSqlParser.NON_TRANSACTED_ACCESS, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def DIRECTORY_NAME(self):
            return self.getToken(TSqlParser.DIRECTORY_NAME, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def READ_ONLY(self):
            return self.getToken(TSqlParser.READ_ONLY, 0)

        def FULL(self):
            return self.getToken(TSqlParser.FULL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_database_filestream_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_filestream_option" ):
                listener.enterDatabase_filestream_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_filestream_option" ):
                listener.exitDatabase_filestream_option(self)




    def database_filestream_option(self):

        localctx = TSqlParser.Database_filestream_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1134, self.RULE_database_filestream_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14010
            self.match(TSqlParser.LR_BRACKET)
            self.state = 14017
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [609]:
                self.state = 14011
                self.match(TSqlParser.NON_TRANSACTED_ACCESS)
                self.state = 14012
                self.match(TSqlParser.EQUAL)
                self.state = 14013
                _la = self._input.LA(1)
                if not(_la==379 or _la==643 or _la==763):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [267]:
                self.state = 14014
                self.match(TSqlParser.DIRECTORY_NAME)
                self.state = 14015
                self.match(TSqlParser.EQUAL)
                self.state = 14016
                self.match(TSqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 14019
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_file_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def file_group(self):
            return self.getTypedRuleContext(TSqlParser.File_groupContext,0)


        def file_spec(self):
            return self.getTypedRuleContext(TSqlParser.File_specContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_database_file_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_file_spec" ):
                listener.enterDatabase_file_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_file_spec" ):
                listener.exitDatabase_file_spec(self)




    def database_file_spec(self):

        localctx = TSqlParser.Database_file_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1136, self.RULE_database_file_spec)
        try:
            self.state = 14023
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [342]:
                self.enterOuterAlt(localctx, 1)
                self.state = 14021
                self.file_group()
                pass
            elif token in [1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 14022
                self.file_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILEGROUP(self):
            return self.getToken(TSqlParser.FILEGROUP, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def file_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.File_specContext)
            else:
                return self.getTypedRuleContext(TSqlParser.File_specContext,i)


        def CONTAINS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CONTAINS)
            else:
                return self.getToken(TSqlParser.CONTAINS, i)

        def FILESTREAM(self):
            return self.getToken(TSqlParser.FILESTREAM, 0)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def MEMORY_OPTIMIZED_DATA(self):
            return self.getToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_file_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_group" ):
                listener.enterFile_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_group" ):
                listener.exitFile_group(self)




    def file_group(self):

        localctx = TSqlParser.File_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1138, self.RULE_file_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14025
            self.match(TSqlParser.FILEGROUP)
            self.state = 14026
            self.id_()
            self.state = 14029
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1757,self._ctx)
            if la_ == 1:
                self.state = 14027
                self.match(TSqlParser.CONTAINS)
                self.state = 14028
                self.match(TSqlParser.FILESTREAM)


            self.state = 14032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==243:
                self.state = 14031
                self.match(TSqlParser.DEFAULT)


            self.state = 14036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==179:
                self.state = 14034
                self.match(TSqlParser.CONTAINS)
                self.state = 14035
                self.match(TSqlParser.MEMORY_OPTIMIZED_DATA)


            self.state = 14038
            self.file_spec()
            self.state = 14043
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1760,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 14039
                    self.match(TSqlParser.COMMA)
                    self.state = 14040
                    self.file_spec() 
                self.state = 14045
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1760,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.file_label = None # Token

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def FILENAME(self):
            return self.getToken(TSqlParser.FILENAME, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def SIZE(self):
            return self.getToken(TSqlParser.SIZE, 0)

        def file_size(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.File_sizeContext)
            else:
                return self.getTypedRuleContext(TSqlParser.File_sizeContext,i)


        def MAXSIZE(self):
            return self.getToken(TSqlParser.MAXSIZE, 0)

        def FILEGROWTH(self):
            return self.getToken(TSqlParser.FILEGROWTH, 0)

        def UNLIMITED(self):
            return self.getToken(TSqlParser.UNLIMITED, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_file_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_spec" ):
                listener.enterFile_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_spec" ):
                listener.exitFile_spec(self)




    def file_spec(self):

        localctx = TSqlParser.File_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1140, self.RULE_file_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14046
            self.match(TSqlParser.LR_BRACKET)
            self.state = 14047
            self.match(TSqlParser.NAME)
            self.state = 14048
            self.match(TSqlParser.EQUAL)
            self.state = 14051
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                self.state = 14049
                self.id_()
                pass
            elif token in [1170]:
                self.state = 14050
                self.match(TSqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 14054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1194:
                self.state = 14053
                self.match(TSqlParser.COMMA)


            self.state = 14056
            self.match(TSqlParser.FILENAME)
            self.state = 14057
            self.match(TSqlParser.EQUAL)
            self.state = 14058
            localctx.file_label = self.match(TSqlParser.STRING)
            self.state = 14060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1194:
                self.state = 14059
                self.match(TSqlParser.COMMA)


            self.state = 14068
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==905:
                self.state = 14062
                self.match(TSqlParser.SIZE)
                self.state = 14063
                self.match(TSqlParser.EQUAL)
                self.state = 14064
                self.file_size()
                self.state = 14066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 14065
                    self.match(TSqlParser.COMMA)




            self.state = 14079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==540:
                self.state = 14070
                self.match(TSqlParser.MAXSIZE)
                self.state = 14071
                self.match(TSqlParser.EQUAL)
                self.state = 14074
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1168]:
                    self.state = 14072
                    self.file_size()
                    pass
                elif token in [1022]:
                    self.state = 14073
                    self.match(TSqlParser.UNLIMITED)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 14077
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 14076
                    self.match(TSqlParser.COMMA)




            self.state = 14087
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==346:
                self.state = 14081
                self.match(TSqlParser.FILEGROWTH)
                self.state = 14082
                self.match(TSqlParser.EQUAL)
                self.state = 14083
                self.file_size()
                self.state = 14085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 14084
                    self.match(TSqlParser.COMMA)




            self.state = 14089
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Entity_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.server = None # Id_Context
            self.database = None # Id_Context
            self.schema = None # Id_Context
            self.table = None # Id_Context

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_entity_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntity_name" ):
                listener.enterEntity_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntity_name" ):
                listener.exitEntity_name(self)




    def entity_name(self):

        localctx = TSqlParser.Entity_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1142, self.RULE_entity_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14108
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1772,self._ctx)
            if la_ == 1:
                self.state = 14091
                localctx.server = self.id_()
                self.state = 14092
                self.match(TSqlParser.DOT)
                self.state = 14093
                localctx.database = self.id_()
                self.state = 14094
                self.match(TSqlParser.DOT)
                self.state = 14095
                localctx.schema = self.id_()
                self.state = 14096
                self.match(TSqlParser.DOT)

            elif la_ == 2:
                self.state = 14098
                localctx.database = self.id_()
                self.state = 14099
                self.match(TSqlParser.DOT)
                self.state = 14101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6845834611130385) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4691064178111676937) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8067776519934725599) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387491794949) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714895912701) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755875440852549633) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873769796032868641) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510937462965505) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799299309863) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -651161675377934355) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -387309693044787745) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689521) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906573) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 171) != 0):
                    self.state = 14100
                    localctx.schema = self.id_()


                self.state = 14103
                self.match(TSqlParser.DOT)

            elif la_ == 3:
                self.state = 14105
                localctx.schema = self.id_()
                self.state = 14106
                self.match(TSqlParser.DOT)


            self.state = 14110
            localctx.table = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Entity_name_for_azure_dwContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # Id_Context
            self.object_name = None # Id_Context

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_entity_name_for_azure_dw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntity_name_for_azure_dw" ):
                listener.enterEntity_name_for_azure_dw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntity_name_for_azure_dw" ):
                listener.exitEntity_name_for_azure_dw(self)




    def entity_name_for_azure_dw(self):

        localctx = TSqlParser.Entity_name_for_azure_dwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1144, self.RULE_entity_name_for_azure_dw)
        try:
            self.state = 14117
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1773,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 14112
                localctx.schema = self.id_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 14113
                localctx.schema = self.id_()
                self.state = 14114
                self.match(TSqlParser.DOT)
                self.state = 14115
                localctx.object_name = self.id_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Entity_name_for_parallel_dwContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_database = None # Id_Context
            self.schema = None # Id_Context
            self.object_name = None # Id_Context

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_entity_name_for_parallel_dw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntity_name_for_parallel_dw" ):
                listener.enterEntity_name_for_parallel_dw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntity_name_for_parallel_dw" ):
                listener.exitEntity_name_for_parallel_dw(self)




    def entity_name_for_parallel_dw(self):

        localctx = TSqlParser.Entity_name_for_parallel_dwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1146, self.RULE_entity_name_for_parallel_dw)
        try:
            self.state = 14124
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1774,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 14119
                localctx.schema_database = self.id_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 14120
                localctx.schema = self.id_()
                self.state = 14121
                self.match(TSqlParser.DOT)
                self.state = 14122
                localctx.object_name = self.id_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.linkedServer = None # Id_Context
            self.schema = None # Id_Context
            self.server = None # Id_Context
            self.database = None # Id_Context
            self.table = None # Id_Context

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_full_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_table_name" ):
                listener.enterFull_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_table_name" ):
                listener.exitFull_table_name(self)




    def full_table_name(self):

        localctx = TSqlParser.Full_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1148, self.RULE_full_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14149
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1776,self._ctx)
            if la_ == 1:
                self.state = 14126
                localctx.linkedServer = self.id_()
                self.state = 14127
                self.match(TSqlParser.DOT)
                self.state = 14128
                self.match(TSqlParser.DOT)
                self.state = 14129
                localctx.schema = self.id_()
                self.state = 14130
                self.match(TSqlParser.DOT)

            elif la_ == 2:
                self.state = 14132
                localctx.server = self.id_()
                self.state = 14133
                self.match(TSqlParser.DOT)
                self.state = 14134
                localctx.database = self.id_()
                self.state = 14135
                self.match(TSqlParser.DOT)
                self.state = 14136
                localctx.schema = self.id_()
                self.state = 14137
                self.match(TSqlParser.DOT)

            elif la_ == 3:
                self.state = 14139
                localctx.database = self.id_()
                self.state = 14140
                self.match(TSqlParser.DOT)
                self.state = 14142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6845834611130385) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4691064178111676937) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8067776519934725599) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387491794949) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714895912701) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755875440852549633) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873769796032868641) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510937462965505) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799299309863) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -651161675377934355) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -387309693044787745) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689521) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906573) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 171) != 0):
                    self.state = 14141
                    localctx.schema = self.id_()


                self.state = 14144
                self.match(TSqlParser.DOT)

            elif la_ == 4:
                self.state = 14146
                localctx.schema = self.id_()
                self.state = 14147
                self.match(TSqlParser.DOT)


            self.state = 14151
            localctx.table = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # Id_Context
            self.schema = None # Id_Context
            self.table = None # Id_Context
            self.blocking_hierarchy = None # Token

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def BLOCKING_HIERARCHY(self):
            return self.getToken(TSqlParser.BLOCKING_HIERARCHY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = TSqlParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1150, self.RULE_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14163
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1778,self._ctx)
            if la_ == 1:
                self.state = 14153
                localctx.database = self.id_()
                self.state = 14154
                self.match(TSqlParser.DOT)
                self.state = 14156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6845834611130385) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4691064178111676937) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8067776519934725599) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387491794949) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714895912701) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755875440852549633) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873769796032868641) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510937462965505) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799299309863) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -651161675377934355) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -387309693044787745) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689521) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906573) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 171) != 0):
                    self.state = 14155
                    localctx.schema = self.id_()


                self.state = 14158
                self.match(TSqlParser.DOT)

            elif la_ == 2:
                self.state = 14160
                localctx.schema = self.id_()
                self.state = 14161
                self.match(TSqlParser.DOT)


            self.state = 14167
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1779,self._ctx)
            if la_ == 1:
                self.state = 14165
                localctx.table = self.id_()
                pass

            elif la_ == 2:
                self.state = 14166
                localctx.blocking_hierarchy = self.match(TSqlParser.BLOCKING_HIERARCHY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # Id_Context
            self.name = None # Id_Context

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_simple_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_name" ):
                listener.enterSimple_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_name" ):
                listener.exitSimple_name(self)




    def simple_name(self):

        localctx = TSqlParser.Simple_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1152, self.RULE_simple_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14172
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1780,self._ctx)
            if la_ == 1:
                self.state = 14169
                localctx.schema = self.id_()
                self.state = 14170
                self.match(TSqlParser.DOT)


            self.state = 14174
            localctx.name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_proc_name_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # Id_Context
            self.procedure = None # Id_Context

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_func_proc_name_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_proc_name_schema" ):
                listener.enterFunc_proc_name_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_proc_name_schema" ):
                listener.exitFunc_proc_name_schema(self)




    def func_proc_name_schema(self):

        localctx = TSqlParser.Func_proc_name_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1154, self.RULE_func_proc_name_schema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1781,self._ctx)
            if la_ == 1:
                self.state = 14176
                localctx.schema = self.id_()
                self.state = 14177
                self.match(TSqlParser.DOT)


            self.state = 14181
            localctx.procedure = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_proc_name_database_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # Id_Context
            self.schema = None # Id_Context
            self.procedure = None # Id_Context

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def func_proc_name_schema(self):
            return self.getTypedRuleContext(TSqlParser.Func_proc_name_schemaContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_func_proc_name_database_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_proc_name_database_schema" ):
                listener.enterFunc_proc_name_database_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_proc_name_database_schema" ):
                listener.exitFunc_proc_name_database_schema(self)




    def func_proc_name_database_schema(self):

        localctx = TSqlParser.Func_proc_name_database_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1156, self.RULE_func_proc_name_database_schema)
        self._la = 0 # Token type
        try:
            self.state = 14193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1784,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 14184
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6845834611130385) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4691064178111676937) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8067776519934725599) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387491794949) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714895912701) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755875440852549633) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873769796032868641) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510937462965505) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799299309863) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -651161675377934355) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -387309693044787745) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689521) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906573) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 171) != 0):
                    self.state = 14183
                    localctx.database = self.id_()


                self.state = 14186
                self.match(TSqlParser.DOT)
                self.state = 14188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6845834611130385) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4691064178111676937) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8067776519934725599) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387491794949) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714895912701) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755875440852549633) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873769796032868641) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510937462965505) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799299309863) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -651161675377934355) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -387309693044787745) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689521) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906573) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 171) != 0):
                    self.state = 14187
                    localctx.schema = self.id_()


                self.state = 14190
                self.match(TSqlParser.DOT)
                self.state = 14191
                localctx.procedure = self.id_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 14192
                self.func_proc_name_schema()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_proc_name_server_database_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.server = None # Id_Context
            self.database = None # Id_Context
            self.schema = None # Id_Context
            self.procedure = None # Id_Context

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def func_proc_name_database_schema(self):
            return self.getTypedRuleContext(TSqlParser.Func_proc_name_database_schemaContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_func_proc_name_server_database_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_proc_name_server_database_schema" ):
                listener.enterFunc_proc_name_server_database_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_proc_name_server_database_schema" ):
                listener.exitFunc_proc_name_server_database_schema(self)




    def func_proc_name_server_database_schema(self):

        localctx = TSqlParser.Func_proc_name_server_database_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1158, self.RULE_func_proc_name_server_database_schema)
        self._la = 0 # Token type
        try:
            self.state = 14209
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1788,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 14196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6845834611130385) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4691064178111676937) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8067776519934725599) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387491794949) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714895912701) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755875440852549633) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873769796032868641) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510937462965505) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799299309863) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -651161675377934355) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -387309693044787745) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689521) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906573) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 171) != 0):
                    self.state = 14195
                    localctx.server = self.id_()


                self.state = 14198
                self.match(TSqlParser.DOT)
                self.state = 14200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6845834611130385) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4691064178111676937) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8067776519934725599) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387491794949) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714895912701) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755875440852549633) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873769796032868641) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510937462965505) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799299309863) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -651161675377934355) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -387309693044787745) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689521) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906573) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 171) != 0):
                    self.state = 14199
                    localctx.database = self.id_()


                self.state = 14202
                self.match(TSqlParser.DOT)
                self.state = 14204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6845834611130385) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4691064178111676937) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8067776519934725599) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387491794949) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714895912701) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755875440852549633) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873769796032868641) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510937462965505) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799299309863) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -651161675377934355) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -387309693044787745) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689521) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906573) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 171) != 0):
                    self.state = 14203
                    localctx.schema = self.id_()


                self.state = 14206
                self.match(TSqlParser.DOT)
                self.state = 14207
                localctx.procedure = self.id_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 14208
                self.func_proc_name_database_schema()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ddl_objectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def full_table_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_table_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_ddl_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdl_object" ):
                listener.enterDdl_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdl_object" ):
                listener.exitDdl_object(self)




    def ddl_object(self):

        localctx = TSqlParser.Ddl_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1160, self.RULE_ddl_object)
        try:
            self.state = 14213
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                self.enterOuterAlt(localctx, 1)
                self.state = 14211
                self.full_table_name()
                pass
            elif token in [1166]:
                self.enterOuterAlt(localctx, 2)
                self.state = 14212
                self.match(TSqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.column_name = None # Id_Context

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def DOLLAR(self):
            return self.getToken(TSqlParser.DOLLAR, 0)

        def DELETED(self):
            return self.getToken(TSqlParser.DELETED, 0)

        def INSERTED(self):
            return self.getToken(TSqlParser.INSERTED, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_table_nameContext,0)


        def IDENTITY(self):
            return self.getToken(TSqlParser.IDENTITY, 0)

        def ROWGUID(self):
            return self.getToken(TSqlParser.ROWGUID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_full_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_column_name" ):
                listener.enterFull_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_column_name" ):
                listener.exitFull_column_name(self)




    def full_column_name(self):

        localctx = TSqlParser.Full_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1162, self.RULE_full_column_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14221
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1791,self._ctx)
            if la_ == 1:
                self.state = 14218
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1790,self._ctx)
                if la_ == 1:
                    self.state = 14215
                    self.match(TSqlParser.DELETED)
                    pass

                elif la_ == 2:
                    self.state = 14216
                    self.match(TSqlParser.INSERTED)
                    pass

                elif la_ == 3:
                    self.state = 14217
                    self.full_table_name()
                    pass


                self.state = 14220
                self.match(TSqlParser.DOT)


            self.state = 14226
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                self.state = 14223
                localctx.column_name = self.id_()
                pass
            elif token in [1191]:
                self.state = 14224
                self.match(TSqlParser.DOLLAR)
                self.state = 14225
                _la = self._input.LA(1)
                if not(_la==424 or _la==827):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_name_list_with_orderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def ASC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ASC)
            else:
                return self.getToken(TSqlParser.ASC, i)

        def DESC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DESC)
            else:
                return self.getToken(TSqlParser.DESC, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_column_name_list_with_order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_list_with_order" ):
                listener.enterColumn_name_list_with_order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_list_with_order" ):
                listener.exitColumn_name_list_with_order(self)




    def column_name_list_with_order(self):

        localctx = TSqlParser.Column_name_list_with_orderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1164, self.RULE_column_name_list_with_order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14228
            self.id_()
            self.state = 14230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57 or _la==258:
                self.state = 14229
                _la = self._input.LA(1)
                if not(_la==57 or _la==258):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 14239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 14232
                self.match(TSqlParser.COMMA)
                self.state = 14233
                self.id_()
                self.state = 14235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57 or _la==258:
                    self.state = 14234
                    _la = self._input.LA(1)
                    if not(_la==57 or _la==258):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 14241
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_column_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._insert_column_id = None # Insert_column_idContext
            self.col = list() # of Insert_column_idContexts

        def insert_column_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Insert_column_idContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Insert_column_idContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_insert_column_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_column_name_list" ):
                listener.enterInsert_column_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_column_name_list" ):
                listener.exitInsert_column_name_list(self)




    def insert_column_name_list(self):

        localctx = TSqlParser.Insert_column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1166, self.RULE_insert_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14242
            localctx._insert_column_id = self.insert_column_id()
            localctx.col.append(localctx._insert_column_id)
            self.state = 14247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 14243
                self.match(TSqlParser.COMMA)
                self.state = 14244
                localctx._insert_column_id = self.insert_column_id()
                localctx.col.append(localctx._insert_column_id)
                self.state = 14249
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_column_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._id_ = None # Id_Context
            self.ignore = list() # of Id_Contexts

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_insert_column_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_column_id" ):
                listener.enterInsert_column_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_column_id" ):
                listener.exitInsert_column_id(self)




    def insert_column_id(self):

        localctx = TSqlParser.Insert_column_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1168, self.RULE_insert_column_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14256
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1798,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 14251
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6845834611130385) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4691064178111676937) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8067776519934725599) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387491794949) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714895912701) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755875440852549633) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873769796032868641) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510937462965505) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799299309863) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18579548570406925) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -651161675377934355) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -387309693044787745) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689521) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906573) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0) or ((((_la - 1162)) & ~0x3f) == 0 and ((1 << (_la - 1162)) & 171) != 0):
                        self.state = 14250
                        localctx._id_ = self.id_()
                        localctx.ignore.append(localctx._id_)


                    self.state = 14253
                    self.match(TSqlParser.DOT) 
                self.state = 14258
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1798,self._ctx)

            self.state = 14259
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._id_ = None # Id_Context
            self.col = list() # of Id_Contexts

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_column_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_list" ):
                listener.enterColumn_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_list" ):
                listener.exitColumn_name_list(self)




    def column_name_list(self):

        localctx = TSqlParser.Column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1170, self.RULE_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14261
            localctx._id_ = self.id_()
            localctx.col.append(localctx._id_)
            self.state = 14266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1194:
                self.state = 14262
                self.match(TSqlParser.COMMA)
                self.state = 14263
                localctx._id_ = self.id_()
                localctx.col.append(localctx._id_)
                self.state = 14268
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_cursor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_name" ):
                listener.enterCursor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_name" ):
                listener.exitCursor_name(self)




    def cursor_name(self):

        localctx = TSqlParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1172, self.RULE_cursor_name)
        try:
            self.state = 14271
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                self.enterOuterAlt(localctx, 1)
                self.state = 14269
                self.id_()
                pass
            elif token in [1166]:
                self.enterOuterAlt(localctx, 2)
                self.state = 14270
                self.match(TSqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_offContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_on_off

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_off" ):
                listener.enterOn_off(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_off" ):
                listener.exitOn_off(self)




    def on_off(self):

        localctx = TSqlParser.On_offContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1174, self.RULE_on_off)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14273
            _la = self._input.LA(1)
            if not(_la==643 or _la==649):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClusteredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTERED(self):
            return self.getToken(TSqlParser.CLUSTERED, 0)

        def NONCLUSTERED(self):
            return self.getToken(TSqlParser.NONCLUSTERED, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_clustered

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClustered" ):
                listener.enterClustered(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClustered" ):
                listener.exitClustered(self)




    def clustered(self):

        localctx = TSqlParser.ClusteredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1176, self.RULE_clustered)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14275
            _la = self._input.LA(1)
            if not(_la==149 or _la==607):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_notnullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_(self):
            return self.getToken(TSqlParser.NULL_, 0)

        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_null_notnull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_notnull" ):
                listener.enterNull_notnull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_notnull" ):
                listener.exitNull_notnull(self)




    def null_notnull(self):

        localctx = TSqlParser.Null_notnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1178, self.RULE_null_notnull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==614:
                self.state = 14277
                self.match(TSqlParser.NOT)


            self.state = 14280
            self.match(TSqlParser.NULL_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scalar_function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_proc_name_server_database_schema(self):
            return self.getTypedRuleContext(TSqlParser.Func_proc_name_server_database_schemaContext,0)


        def RIGHT(self):
            return self.getToken(TSqlParser.RIGHT, 0)

        def LEFT(self):
            return self.getToken(TSqlParser.LEFT, 0)

        def BINARY_CHECKSUM(self):
            return self.getToken(TSqlParser.BINARY_CHECKSUM, 0)

        def CHECKSUM(self):
            return self.getToken(TSqlParser.CHECKSUM, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_scalar_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_function_name" ):
                listener.enterScalar_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_function_name" ):
                listener.exitScalar_function_name(self)




    def scalar_function_name(self):

        localctx = TSqlParser.Scalar_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1180, self.RULE_scalar_function_name)
        try:
            self.state = 14287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1802,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 14282
                self.func_proc_name_server_database_schema()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 14283
                self.match(TSqlParser.RIGHT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 14284
                self.match(TSqlParser.LEFT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 14285
                self.match(TSqlParser.BINARY_CHECKSUM)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 14286
                self.match(TSqlParser.CHECKSUM)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_conversation_timerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(TSqlParser.BEGIN, 0)

        def CONVERSATION(self):
            return self.getToken(TSqlParser.CONVERSATION, 0)

        def TIMER(self):
            return self.getToken(TSqlParser.TIMER, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def TIMEOUT(self):
            return self.getToken(TSqlParser.TIMEOUT, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def time(self):
            return self.getTypedRuleContext(TSqlParser.TimeContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_begin_conversation_timer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_conversation_timer" ):
                listener.enterBegin_conversation_timer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_conversation_timer" ):
                listener.exitBegin_conversation_timer(self)




    def begin_conversation_timer(self):

        localctx = TSqlParser.Begin_conversation_timerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1182, self.RULE_begin_conversation_timer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14289
            self.match(TSqlParser.BEGIN)
            self.state = 14290
            self.match(TSqlParser.CONVERSATION)
            self.state = 14291
            self.match(TSqlParser.TIMER)
            self.state = 14292
            self.match(TSqlParser.LR_BRACKET)
            self.state = 14293
            self.match(TSqlParser.LOCAL_ID)
            self.state = 14294
            self.match(TSqlParser.RR_BRACKET)
            self.state = 14295
            self.match(TSqlParser.TIMEOUT)
            self.state = 14296
            self.match(TSqlParser.EQUAL)
            self.state = 14297
            self.time()
            self.state = 14299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1803,self._ctx)
            if la_ == 1:
                self.state = 14298
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_conversation_dialogContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dialog_handle = None # Token
            self.initiator_service_name = None # Service_nameContext
            self.target_service_name = None # Service_nameContext
            self.service_broker_guid = None # Token

        def BEGIN(self):
            return self.getToken(TSqlParser.BEGIN, 0)

        def DIALOG(self):
            return self.getToken(TSqlParser.DIALOG, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def SERVICE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SERVICE)
            else:
                return self.getToken(TSqlParser.SERVICE, i)

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def CONTRACT(self):
            return self.getToken(TSqlParser.CONTRACT, 0)

        def contract_name(self):
            return self.getTypedRuleContext(TSqlParser.Contract_nameContext,0)


        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOCAL_ID)
            else:
                return self.getToken(TSqlParser.LOCAL_ID, i)

        def service_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Service_nameContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Service_nameContext,i)


        def CONVERSATION(self):
            return self.getToken(TSqlParser.CONVERSATION, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def LIFETIME(self):
            return self.getToken(TSqlParser.LIFETIME, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def RELATED_CONVERSATION(self):
            return self.getToken(TSqlParser.RELATED_CONVERSATION, 0)

        def RELATED_CONVERSATION_GROUP(self):
            return self.getToken(TSqlParser.RELATED_CONVERSATION_GROUP, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_begin_conversation_dialog

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_conversation_dialog" ):
                listener.enterBegin_conversation_dialog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_conversation_dialog" ):
                listener.exitBegin_conversation_dialog(self)




    def begin_conversation_dialog(self):

        localctx = TSqlParser.Begin_conversation_dialogContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1184, self.RULE_begin_conversation_dialog)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14301
            self.match(TSqlParser.BEGIN)
            self.state = 14302
            self.match(TSqlParser.DIALOG)
            self.state = 14304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==189:
                self.state = 14303
                self.match(TSqlParser.CONVERSATION)


            self.state = 14306
            localctx.dialog_handle = self.match(TSqlParser.LOCAL_ID)
            self.state = 14307
            self.match(TSqlParser.FROM)
            self.state = 14308
            self.match(TSqlParser.SERVICE)
            self.state = 14309
            localctx.initiator_service_name = self.service_name()
            self.state = 14310
            self.match(TSqlParser.TO)
            self.state = 14311
            self.match(TSqlParser.SERVICE)
            self.state = 14312
            localctx.target_service_name = self.service_name()
            self.state = 14315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1194:
                self.state = 14313
                self.match(TSqlParser.COMMA)
                self.state = 14314
                localctx.service_broker_guid = self.match(TSqlParser.STRING)


            self.state = 14317
            self.match(TSqlParser.ON)
            self.state = 14318
            self.match(TSqlParser.CONTRACT)
            self.state = 14319
            self.contract_name()
            self.state = 14342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1811,self._ctx)
            if la_ == 1:
                self.state = 14320
                self.match(TSqlParser.WITH)
                self.state = 14327
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1807,self._ctx)
                if la_ == 1:
                    self.state = 14321
                    _la = self._input.LA(1)
                    if not(_la==775 or _la==776):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 14322
                    self.match(TSqlParser.EQUAL)
                    self.state = 14323
                    self.match(TSqlParser.LOCAL_ID)
                    self.state = 14325
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 14324
                        self.match(TSqlParser.COMMA)




                self.state = 14335
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1809,self._ctx)
                if la_ == 1:
                    self.state = 14329
                    self.match(TSqlParser.LIFETIME)
                    self.state = 14330
                    self.match(TSqlParser.EQUAL)
                    self.state = 14331
                    _la = self._input.LA(1)
                    if not(_la==1166 or _la==1168):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 14333
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 14332
                        self.match(TSqlParser.COMMA)




                self.state = 14340
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1810,self._ctx)
                if la_ == 1:
                    self.state = 14337
                    self.match(TSqlParser.ENCRYPTION)
                    self.state = 14338
                    self.match(TSqlParser.EQUAL)
                    self.state = 14339
                    self.on_off()




            self.state = 14345
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1812,self._ctx)
            if la_ == 1:
                self.state = 14344
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Contract_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_contract_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContract_name" ):
                listener.enterContract_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContract_name" ):
                listener.exitContract_name(self)




    def contract_name(self):

        localctx = TSqlParser.Contract_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1186, self.RULE_contract_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1813,self._ctx)
            if la_ == 1:
                self.state = 14347
                self.id_()
                pass

            elif la_ == 2:
                self.state = 14348
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Service_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_service_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterService_name" ):
                listener.enterService_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitService_name" ):
                listener.exitService_name(self)




    def service_name(self):

        localctx = TSqlParser.Service_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1188, self.RULE_service_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1814,self._ctx)
            if la_ == 1:
                self.state = 14351
                self.id_()
                pass

            elif la_ == 2:
                self.state = 14352
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_conversationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.conversation_handle = None # Token
            self.faliure_code = None # Token
            self.failure_text = None # Token

        def END(self):
            return self.getToken(TSqlParser.END, 0)

        def CONVERSATION(self):
            return self.getToken(TSqlParser.CONVERSATION, 0)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOCAL_ID)
            else:
                return self.getToken(TSqlParser.LOCAL_ID, i)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def ERROR(self):
            return self.getToken(TSqlParser.ERROR, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def DESCRIPTION(self):
            return self.getToken(TSqlParser.DESCRIPTION, 0)

        def CLEANUP(self):
            return self.getToken(TSqlParser.CLEANUP, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_end_conversation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_conversation" ):
                listener.enterEnd_conversation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_conversation" ):
                listener.exitEnd_conversation(self)




    def end_conversation(self):

        localctx = TSqlParser.End_conversationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1190, self.RULE_end_conversation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14355
            self.match(TSqlParser.END)
            self.state = 14356
            self.match(TSqlParser.CONVERSATION)
            self.state = 14357
            localctx.conversation_handle = self.match(TSqlParser.LOCAL_ID)
            self.state = 14359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1815,self._ctx)
            if la_ == 1:
                self.state = 14358
                self.match(TSqlParser.SEMI)


            self.state = 14373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1818,self._ctx)
            if la_ == 1:
                self.state = 14361
                self.match(TSqlParser.WITH)
                self.state = 14368
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1816,self._ctx)
                if la_ == 1:
                    self.state = 14362
                    self.match(TSqlParser.ERROR)
                    self.state = 14363
                    self.match(TSqlParser.EQUAL)
                    self.state = 14364
                    localctx.faliure_code = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==1166 or _la==1170):
                        localctx.faliure_code = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 14365
                    self.match(TSqlParser.DESCRIPTION)
                    self.state = 14366
                    self.match(TSqlParser.EQUAL)
                    self.state = 14367
                    localctx.failure_text = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==1166 or _la==1170):
                        localctx.failure_text = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 14371
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1817,self._ctx)
                if la_ == 1:
                    self.state = 14370
                    self.match(TSqlParser.CLEANUP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Waitfor_conversationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.timeout = None # TimeContext

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def get_conversation(self):
            return self.getTypedRuleContext(TSqlParser.Get_conversationContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def WAITFOR(self):
            return self.getToken(TSqlParser.WAITFOR, 0)

        def TIMEOUT(self):
            return self.getToken(TSqlParser.TIMEOUT, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def time(self):
            return self.getTypedRuleContext(TSqlParser.TimeContext,0)


        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_waitfor_conversation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaitfor_conversation" ):
                listener.enterWaitfor_conversation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaitfor_conversation" ):
                listener.exitWaitfor_conversation(self)




    def waitfor_conversation(self):

        localctx = TSqlParser.Waitfor_conversationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1192, self.RULE_waitfor_conversation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1056:
                self.state = 14375
                self.match(TSqlParser.WAITFOR)


            self.state = 14378
            self.match(TSqlParser.LR_BRACKET)
            self.state = 14379
            self.get_conversation()
            self.state = 14380
            self.match(TSqlParser.RR_BRACKET)
            self.state = 14386
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1821,self._ctx)
            if la_ == 1:
                self.state = 14382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1194:
                    self.state = 14381
                    self.match(TSqlParser.COMMA)


                self.state = 14384
                self.match(TSqlParser.TIMEOUT)
                self.state = 14385
                localctx.timeout = self.time()


            self.state = 14389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1822,self._ctx)
            if la_ == 1:
                self.state = 14388
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_conversationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.conversation_group_id = None # Token
            self.queue = None # Queue_idContext

        def GET(self):
            return self.getToken(TSqlParser.GET, 0)

        def CONVERSATION(self):
            return self.getToken(TSqlParser.CONVERSATION, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def queue_id(self):
            return self.getTypedRuleContext(TSqlParser.Queue_idContext,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_get_conversation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_conversation" ):
                listener.enterGet_conversation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_conversation" ):
                listener.exitGet_conversation(self)




    def get_conversation(self):

        localctx = TSqlParser.Get_conversationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1194, self.RULE_get_conversation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14391
            self.match(TSqlParser.GET)
            self.state = 14392
            self.match(TSqlParser.CONVERSATION)
            self.state = 14393
            self.match(TSqlParser.GROUP)
            self.state = 14394
            localctx.conversation_group_id = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==1166 or _la==1170):
                localctx.conversation_group_id = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 14395
            self.match(TSqlParser.FROM)
            self.state = 14396
            localctx.queue = self.queue_id()
            self.state = 14398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1823,self._ctx)
            if la_ == 1:
                self.state = 14397
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Queue_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database_name = None # Id_Context
            self.schema_name = None # Id_Context
            self.name = None # Id_Context

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(TSqlParser.Id_Context,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_queue_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueue_id" ):
                listener.enterQueue_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueue_id" ):
                listener.exitQueue_id(self)




    def queue_id(self):

        localctx = TSqlParser.Queue_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1196, self.RULE_queue_id)
        try:
            self.state = 14407
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1824,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 14400
                localctx.database_name = self.id_()
                self.state = 14401
                self.match(TSqlParser.DOT)
                self.state = 14402
                localctx.schema_name = self.id_()
                self.state = 14403
                self.match(TSqlParser.DOT)
                self.state = 14404
                localctx.name = self.id_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 14406
                self.id_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Send_conversationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.conversation_handle = None # Token
            self.message_type_name = None # ExpressionContext
            self.message_body_expression = None # Token

        def SEND(self):
            return self.getToken(TSqlParser.SEND, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def CONVERSATION(self):
            return self.getToken(TSqlParser.CONVERSATION, 0)

        def MESSAGE(self):
            return self.getToken(TSqlParser.MESSAGE, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOCAL_ID)
            else:
                return self.getToken(TSqlParser.LOCAL_ID, i)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_send_conversation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSend_conversation" ):
                listener.enterSend_conversation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSend_conversation" ):
                listener.exitSend_conversation(self)




    def send_conversation(self):

        localctx = TSqlParser.Send_conversationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1198, self.RULE_send_conversation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14409
            self.match(TSqlParser.SEND)
            self.state = 14410
            self.match(TSqlParser.ON)
            self.state = 14411
            self.match(TSqlParser.CONVERSATION)
            self.state = 14412
            localctx.conversation_handle = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==1166 or _la==1170):
                localctx.conversation_handle = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 14413
            self.match(TSqlParser.MESSAGE)
            self.state = 14414
            self.match(TSqlParser.TYPE)
            self.state = 14415
            localctx.message_type_name = self.expression(0)
            self.state = 14419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1825,self._ctx)
            if la_ == 1:
                self.state = 14416
                self.match(TSqlParser.LR_BRACKET)
                self.state = 14417
                localctx.message_body_expression = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==1166 or _la==1170):
                    localctx.message_body_expression = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 14418
                self.match(TSqlParser.RR_BRACKET)


            self.state = 14422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1826,self._ctx)
            if la_ == 1:
                self.state = 14421
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.scaled = None # Token
            self.ext_type = None # Id_Context
            self.scale = None # Token
            self.prec = None # Token
            self.seed = None # Token
            self.inc = None # Token
            self.double_prec = None # Token
            self.unscaled_type = None # Id_Context

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def MAX(self):
            return self.getToken(TSqlParser.MAX, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def VARCHAR(self):
            return self.getToken(TSqlParser.VARCHAR, 0)

        def NVARCHAR(self):
            return self.getToken(TSqlParser.NVARCHAR, 0)

        def BINARY_KEYWORD(self):
            return self.getToken(TSqlParser.BINARY_KEYWORD, 0)

        def VARBINARY_KEYWORD(self):
            return self.getToken(TSqlParser.VARBINARY_KEYWORD, 0)

        def SQUARE_BRACKET_ID(self):
            return self.getToken(TSqlParser.SQUARE_BRACKET_ID, 0)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def IDENTITY(self):
            return self.getToken(TSqlParser.IDENTITY, 0)

        def DOUBLE(self):
            return self.getToken(TSqlParser.DOUBLE, 0)

        def PRECISION(self):
            return self.getToken(TSqlParser.PRECISION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type" ):
                listener.enterData_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type" ):
                listener.exitData_type(self)




    def data_type(self):

        localctx = TSqlParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1200, self.RULE_data_type)
        self._la = 0 # Token type
        try:
            self.state = 14454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1829,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 14424
                localctx.scaled = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==95 or _la==1045 or ((((_la - 1152)) & ~0x3f) == 0 and ((1 << (_la - 1152)) & 8195) != 0)):
                    localctx.scaled = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 14425
                self.match(TSqlParser.LR_BRACKET)
                self.state = 14426
                self.match(TSqlParser.MAX)
                self.state = 14427
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 14428
                localctx.ext_type = self.id_()
                self.state = 14429
                self.match(TSqlParser.LR_BRACKET)
                self.state = 14430
                localctx.scale = self.match(TSqlParser.DECIMAL)
                self.state = 14431
                self.match(TSqlParser.COMMA)
                self.state = 14432
                localctx.prec = self.match(TSqlParser.DECIMAL)
                self.state = 14433
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 14435
                localctx.ext_type = self.id_()
                self.state = 14436
                self.match(TSqlParser.LR_BRACKET)
                self.state = 14437
                localctx.scale = self.match(TSqlParser.DECIMAL)
                self.state = 14438
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 14440
                localctx.ext_type = self.id_()
                self.state = 14441
                self.match(TSqlParser.IDENTITY)
                self.state = 14447
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1827,self._ctx)
                if la_ == 1:
                    self.state = 14442
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 14443
                    localctx.seed = self.match(TSqlParser.DECIMAL)
                    self.state = 14444
                    self.match(TSqlParser.COMMA)
                    self.state = 14445
                    localctx.inc = self.match(TSqlParser.DECIMAL)
                    self.state = 14446
                    self.match(TSqlParser.RR_BRACKET)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 14449
                localctx.double_prec = self.match(TSqlParser.DOUBLE)
                self.state = 14451
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1828,self._ctx)
                if la_ == 1:
                    self.state = 14450
                    self.match(TSqlParser.PRECISION)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 14453
                localctx.unscaled_type = self.id_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dollar = None # Token

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def BINARY(self):
            return self.getToken(TSqlParser.BINARY, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def REAL(self):
            return self.getToken(TSqlParser.REAL, 0)

        def FLOAT(self):
            return self.getToken(TSqlParser.FLOAT, 0)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MINUS)
            else:
                return self.getToken(TSqlParser.MINUS, i)

        def DOLLAR(self):
            return self.getToken(TSqlParser.DOLLAR, 0)

        def PLUS(self):
            return self.getToken(TSqlParser.PLUS, 0)

        def parameter(self):
            return self.getTypedRuleContext(TSqlParser.ParameterContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = TSqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1202, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 14471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1833,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 14456
                self.match(TSqlParser.STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 14457
                self.match(TSqlParser.BINARY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 14459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1202:
                    self.state = 14458
                    self.match(TSqlParser.MINUS)


                self.state = 14461
                _la = self._input.LA(1)
                if not(((((_la - 1168)) & ~0x3f) == 0 and ((1 << (_la - 1168)) & 49) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 14463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1202:
                    self.state = 14462
                    self.match(TSqlParser.MINUS)


                self.state = 14465
                localctx.dollar = self.match(TSqlParser.DOLLAR)
                self.state = 14467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1201 or _la==1202:
                    self.state = 14466
                    _la = self._input.LA(1)
                    if not(_la==1201 or _la==1202):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 14469
                _la = self._input.LA(1)
                if not(_la==1168 or _la==1172):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 14470
                self.parameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primitive_constantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dollar = None # Token

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def BINARY(self):
            return self.getToken(TSqlParser.BINARY, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def REAL(self):
            return self.getToken(TSqlParser.REAL, 0)

        def FLOAT(self):
            return self.getToken(TSqlParser.FLOAT, 0)

        def DOLLAR(self):
            return self.getToken(TSqlParser.DOLLAR, 0)

        def MINUS(self):
            return self.getToken(TSqlParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(TSqlParser.PLUS, 0)

        def parameter(self):
            return self.getTypedRuleContext(TSqlParser.ParameterContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_primitive_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitive_constant" ):
                listener.enterPrimitive_constant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitive_constant" ):
                listener.exitPrimitive_constant(self)




    def primitive_constant(self):

        localctx = TSqlParser.Primitive_constantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1204, self.RULE_primitive_constant)
        self._la = 0 # Token type
        try:
            self.state = 14482
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1170]:
                self.enterOuterAlt(localctx, 1)
                self.state = 14473
                self.match(TSqlParser.STRING)
                pass
            elif token in [1171]:
                self.enterOuterAlt(localctx, 2)
                self.state = 14474
                self.match(TSqlParser.BINARY)
                pass
            elif token in [1168, 1172, 1173]:
                self.enterOuterAlt(localctx, 3)
                self.state = 14475
                _la = self._input.LA(1)
                if not(((((_la - 1168)) & ~0x3f) == 0 and ((1 << (_la - 1168)) & 49) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [1191]:
                self.enterOuterAlt(localctx, 4)
                self.state = 14476
                localctx.dollar = self.match(TSqlParser.DOLLAR)
                self.state = 14478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1201 or _la==1202:
                    self.state = 14477
                    _la = self._input.LA(1)
                    if not(_la==1201 or _la==1202):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 14480
                _la = self._input.LA(1)
                if not(_la==1168 or _la==1172):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [1207]:
                self.enterOuterAlt(localctx, 5)
                self.state = 14481
                self.parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORT(self):
            return self.getToken(TSqlParser.ABORT, 0)

        def ABSOLUTE(self):
            return self.getToken(TSqlParser.ABSOLUTE, 0)

        def ACCENT_SENSITIVITY(self):
            return self.getToken(TSqlParser.ACCENT_SENSITIVITY, 0)

        def ACCESS(self):
            return self.getToken(TSqlParser.ACCESS, 0)

        def ACTION(self):
            return self.getToken(TSqlParser.ACTION, 0)

        def ACTIVATION(self):
            return self.getToken(TSqlParser.ACTIVATION, 0)

        def ACTIVE(self):
            return self.getToken(TSqlParser.ACTIVE, 0)

        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def ADDRESS(self):
            return self.getToken(TSqlParser.ADDRESS, 0)

        def AES_128(self):
            return self.getToken(TSqlParser.AES_128, 0)

        def AES_192(self):
            return self.getToken(TSqlParser.AES_192, 0)

        def AES_256(self):
            return self.getToken(TSqlParser.AES_256, 0)

        def AFFINITY(self):
            return self.getToken(TSqlParser.AFFINITY, 0)

        def AFTER(self):
            return self.getToken(TSqlParser.AFTER, 0)

        def AGGREGATE(self):
            return self.getToken(TSqlParser.AGGREGATE, 0)

        def ALGORITHM(self):
            return self.getToken(TSqlParser.ALGORITHM, 0)

        def ALL_CONSTRAINTS(self):
            return self.getToken(TSqlParser.ALL_CONSTRAINTS, 0)

        def ALL_ERRORMSGS(self):
            return self.getToken(TSqlParser.ALL_ERRORMSGS, 0)

        def ALL_INDEXES(self):
            return self.getToken(TSqlParser.ALL_INDEXES, 0)

        def ALL_LEVELS(self):
            return self.getToken(TSqlParser.ALL_LEVELS, 0)

        def ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(self):
            return self.getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, 0)

        def ALLOW_PAGE_LOCKS(self):
            return self.getToken(TSqlParser.ALLOW_PAGE_LOCKS, 0)

        def ALLOW_ROW_LOCKS(self):
            return self.getToken(TSqlParser.ALLOW_ROW_LOCKS, 0)

        def ALLOW_SNAPSHOT_ISOLATION(self):
            return self.getToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0)

        def ALLOWED(self):
            return self.getToken(TSqlParser.ALLOWED, 0)

        def ALWAYS(self):
            return self.getToken(TSqlParser.ALWAYS, 0)

        def ANSI_DEFAULTS(self):
            return self.getToken(TSqlParser.ANSI_DEFAULTS, 0)

        def ANSI_NULL_DEFAULT(self):
            return self.getToken(TSqlParser.ANSI_NULL_DEFAULT, 0)

        def ANSI_NULL_DFLT_OFF(self):
            return self.getToken(TSqlParser.ANSI_NULL_DFLT_OFF, 0)

        def ANSI_NULL_DFLT_ON(self):
            return self.getToken(TSqlParser.ANSI_NULL_DFLT_ON, 0)

        def ANSI_NULLS(self):
            return self.getToken(TSqlParser.ANSI_NULLS, 0)

        def ANSI_PADDING(self):
            return self.getToken(TSqlParser.ANSI_PADDING, 0)

        def ANSI_WARNINGS(self):
            return self.getToken(TSqlParser.ANSI_WARNINGS, 0)

        def APP_NAME(self):
            return self.getToken(TSqlParser.APP_NAME, 0)

        def APPLICATION_LOG(self):
            return self.getToken(TSqlParser.APPLICATION_LOG, 0)

        def APPLOCK_MODE(self):
            return self.getToken(TSqlParser.APPLOCK_MODE, 0)

        def APPLOCK_TEST(self):
            return self.getToken(TSqlParser.APPLOCK_TEST, 0)

        def APPLY(self):
            return self.getToken(TSqlParser.APPLY, 0)

        def ARITHABORT(self):
            return self.getToken(TSqlParser.ARITHABORT, 0)

        def ARITHIGNORE(self):
            return self.getToken(TSqlParser.ARITHIGNORE, 0)

        def ASCII(self):
            return self.getToken(TSqlParser.ASCII, 0)

        def ASSEMBLY(self):
            return self.getToken(TSqlParser.ASSEMBLY, 0)

        def ASSEMBLYPROPERTY(self):
            return self.getToken(TSqlParser.ASSEMBLYPROPERTY, 0)

        def AT_KEYWORD(self):
            return self.getToken(TSqlParser.AT_KEYWORD, 0)

        def AUDIT(self):
            return self.getToken(TSqlParser.AUDIT, 0)

        def AUDIT_GUID(self):
            return self.getToken(TSqlParser.AUDIT_GUID, 0)

        def AUTO(self):
            return self.getToken(TSqlParser.AUTO, 0)

        def AUTO_CLEANUP(self):
            return self.getToken(TSqlParser.AUTO_CLEANUP, 0)

        def AUTO_CLOSE(self):
            return self.getToken(TSqlParser.AUTO_CLOSE, 0)

        def AUTO_CREATE_STATISTICS(self):
            return self.getToken(TSqlParser.AUTO_CREATE_STATISTICS, 0)

        def AUTO_DROP(self):
            return self.getToken(TSqlParser.AUTO_DROP, 0)

        def AUTO_SHRINK(self):
            return self.getToken(TSqlParser.AUTO_SHRINK, 0)

        def AUTO_UPDATE_STATISTICS(self):
            return self.getToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0)

        def AUTO_UPDATE_STATISTICS_ASYNC(self):
            return self.getToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0)

        def AUTOGROW_ALL_FILES(self):
            return self.getToken(TSqlParser.AUTOGROW_ALL_FILES, 0)

        def AUTOGROW_SINGLE_FILE(self):
            return self.getToken(TSqlParser.AUTOGROW_SINGLE_FILE, 0)

        def AVAILABILITY(self):
            return self.getToken(TSqlParser.AVAILABILITY, 0)

        def AVG(self):
            return self.getToken(TSqlParser.AVG, 0)

        def BACKUP_CLONEDB(self):
            return self.getToken(TSqlParser.BACKUP_CLONEDB, 0)

        def BACKUP_PRIORITY(self):
            return self.getToken(TSqlParser.BACKUP_PRIORITY, 0)

        def BASE64(self):
            return self.getToken(TSqlParser.BASE64, 0)

        def BEGIN_DIALOG(self):
            return self.getToken(TSqlParser.BEGIN_DIALOG, 0)

        def BIGINT(self):
            return self.getToken(TSqlParser.BIGINT, 0)

        def BINARY_KEYWORD(self):
            return self.getToken(TSqlParser.BINARY_KEYWORD, 0)

        def BINARY_CHECKSUM(self):
            return self.getToken(TSqlParser.BINARY_CHECKSUM, 0)

        def BINDING(self):
            return self.getToken(TSqlParser.BINDING, 0)

        def BLOB_STORAGE(self):
            return self.getToken(TSqlParser.BLOB_STORAGE, 0)

        def BROKER(self):
            return self.getToken(TSqlParser.BROKER, 0)

        def BROKER_INSTANCE(self):
            return self.getToken(TSqlParser.BROKER_INSTANCE, 0)

        def BULK_LOGGED(self):
            return self.getToken(TSqlParser.BULK_LOGGED, 0)

        def CALLER(self):
            return self.getToken(TSqlParser.CALLER, 0)

        def CAP_CPU_PERCENT(self):
            return self.getToken(TSqlParser.CAP_CPU_PERCENT, 0)

        def CAST(self):
            return self.getToken(TSqlParser.CAST, 0)

        def TRY_CAST(self):
            return self.getToken(TSqlParser.TRY_CAST, 0)

        def CATALOG(self):
            return self.getToken(TSqlParser.CATALOG, 0)

        def CATCH(self):
            return self.getToken(TSqlParser.CATCH, 0)

        def CERT_ID(self):
            return self.getToken(TSqlParser.CERT_ID, 0)

        def CERTENCODED(self):
            return self.getToken(TSqlParser.CERTENCODED, 0)

        def CERTPRIVATEKEY(self):
            return self.getToken(TSqlParser.CERTPRIVATEKEY, 0)

        def CHANGE(self):
            return self.getToken(TSqlParser.CHANGE, 0)

        def CHANGE_RETENTION(self):
            return self.getToken(TSqlParser.CHANGE_RETENTION, 0)

        def CHANGE_TRACKING(self):
            return self.getToken(TSqlParser.CHANGE_TRACKING, 0)

        def CHAR(self):
            return self.getToken(TSqlParser.CHAR, 0)

        def CHARINDEX(self):
            return self.getToken(TSqlParser.CHARINDEX, 0)

        def CHECKALLOC(self):
            return self.getToken(TSqlParser.CHECKALLOC, 0)

        def CHECKCATALOG(self):
            return self.getToken(TSqlParser.CHECKCATALOG, 0)

        def CHECKCONSTRAINTS(self):
            return self.getToken(TSqlParser.CHECKCONSTRAINTS, 0)

        def CHECKDB(self):
            return self.getToken(TSqlParser.CHECKDB, 0)

        def CHECKFILEGROUP(self):
            return self.getToken(TSqlParser.CHECKFILEGROUP, 0)

        def CHECKSUM(self):
            return self.getToken(TSqlParser.CHECKSUM, 0)

        def CHECKSUM_AGG(self):
            return self.getToken(TSqlParser.CHECKSUM_AGG, 0)

        def CHECKTABLE(self):
            return self.getToken(TSqlParser.CHECKTABLE, 0)

        def CLEANTABLE(self):
            return self.getToken(TSqlParser.CLEANTABLE, 0)

        def CLEANUP(self):
            return self.getToken(TSqlParser.CLEANUP, 0)

        def CLONEDATABASE(self):
            return self.getToken(TSqlParser.CLONEDATABASE, 0)

        def COL_LENGTH(self):
            return self.getToken(TSqlParser.COL_LENGTH, 0)

        def COL_NAME(self):
            return self.getToken(TSqlParser.COL_NAME, 0)

        def COLLECTION(self):
            return self.getToken(TSqlParser.COLLECTION, 0)

        def COLUMN_ENCRYPTION_KEY(self):
            return self.getToken(TSqlParser.COLUMN_ENCRYPTION_KEY, 0)

        def COLUMN_MASTER_KEY(self):
            return self.getToken(TSqlParser.COLUMN_MASTER_KEY, 0)

        def COLUMNPROPERTY(self):
            return self.getToken(TSqlParser.COLUMNPROPERTY, 0)

        def COLUMNS(self):
            return self.getToken(TSqlParser.COLUMNS, 0)

        def COLUMNSTORE(self):
            return self.getToken(TSqlParser.COLUMNSTORE, 0)

        def COLUMNSTORE_ARCHIVE(self):
            return self.getToken(TSqlParser.COLUMNSTORE_ARCHIVE, 0)

        def COMMITTED(self):
            return self.getToken(TSqlParser.COMMITTED, 0)

        def COMPATIBILITY_LEVEL(self):
            return self.getToken(TSqlParser.COMPATIBILITY_LEVEL, 0)

        def COMPRESS_ALL_ROW_GROUPS(self):
            return self.getToken(TSqlParser.COMPRESS_ALL_ROW_GROUPS, 0)

        def COMPRESSION_DELAY(self):
            return self.getToken(TSqlParser.COMPRESSION_DELAY, 0)

        def CONCAT(self):
            return self.getToken(TSqlParser.CONCAT, 0)

        def CONCAT_WS(self):
            return self.getToken(TSqlParser.CONCAT_WS, 0)

        def CONCAT_NULL_YIELDS_NULL(self):
            return self.getToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0)

        def CONTENT(self):
            return self.getToken(TSqlParser.CONTENT, 0)

        def CONTROL(self):
            return self.getToken(TSqlParser.CONTROL, 0)

        def COOKIE(self):
            return self.getToken(TSqlParser.COOKIE, 0)

        def COUNT(self):
            return self.getToken(TSqlParser.COUNT, 0)

        def COUNT_BIG(self):
            return self.getToken(TSqlParser.COUNT_BIG, 0)

        def COUNTER(self):
            return self.getToken(TSqlParser.COUNTER, 0)

        def CPU(self):
            return self.getToken(TSqlParser.CPU, 0)

        def CREATE_NEW(self):
            return self.getToken(TSqlParser.CREATE_NEW, 0)

        def CREATION_DISPOSITION(self):
            return self.getToken(TSqlParser.CREATION_DISPOSITION, 0)

        def CREDENTIAL(self):
            return self.getToken(TSqlParser.CREDENTIAL, 0)

        def CRYPTOGRAPHIC(self):
            return self.getToken(TSqlParser.CRYPTOGRAPHIC, 0)

        def CUME_DIST(self):
            return self.getToken(TSqlParser.CUME_DIST, 0)

        def CURSOR_CLOSE_ON_COMMIT(self):
            return self.getToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0)

        def CURSOR_DEFAULT(self):
            return self.getToken(TSqlParser.CURSOR_DEFAULT, 0)

        def CURSOR_STATUS(self):
            return self.getToken(TSqlParser.CURSOR_STATUS, 0)

        def DATA(self):
            return self.getToken(TSqlParser.DATA, 0)

        def DATA_PURITY(self):
            return self.getToken(TSqlParser.DATA_PURITY, 0)

        def DATABASE_PRINCIPAL_ID(self):
            return self.getToken(TSqlParser.DATABASE_PRINCIPAL_ID, 0)

        def DATABASEPROPERTYEX(self):
            return self.getToken(TSqlParser.DATABASEPROPERTYEX, 0)

        def DATALENGTH(self):
            return self.getToken(TSqlParser.DATALENGTH, 0)

        def DATE_CORRELATION_OPTIMIZATION(self):
            return self.getToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0)

        def DATEADD(self):
            return self.getToken(TSqlParser.DATEADD, 0)

        def DATEDIFF(self):
            return self.getToken(TSqlParser.DATEDIFF, 0)

        def DATENAME(self):
            return self.getToken(TSqlParser.DATENAME, 0)

        def DATEPART(self):
            return self.getToken(TSqlParser.DATEPART, 0)

        def DAYS(self):
            return self.getToken(TSqlParser.DAYS, 0)

        def DB_CHAINING(self):
            return self.getToken(TSqlParser.DB_CHAINING, 0)

        def DB_FAILOVER(self):
            return self.getToken(TSqlParser.DB_FAILOVER, 0)

        def DB_ID(self):
            return self.getToken(TSqlParser.DB_ID, 0)

        def DB_NAME(self):
            return self.getToken(TSqlParser.DB_NAME, 0)

        def DBCC(self):
            return self.getToken(TSqlParser.DBCC, 0)

        def DBREINDEX(self):
            return self.getToken(TSqlParser.DBREINDEX, 0)

        def DECRYPTION(self):
            return self.getToken(TSqlParser.DECRYPTION, 0)

        def DEFAULT_DOUBLE_QUOTE(self):
            return self.getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0)

        def DEFAULT_FULLTEXT_LANGUAGE(self):
            return self.getToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0)

        def DEFAULT_LANGUAGE(self):
            return self.getToken(TSqlParser.DEFAULT_LANGUAGE, 0)

        def DEFINITION(self):
            return self.getToken(TSqlParser.DEFINITION, 0)

        def DELAY(self):
            return self.getToken(TSqlParser.DELAY, 0)

        def DELAYED_DURABILITY(self):
            return self.getToken(TSqlParser.DELAYED_DURABILITY, 0)

        def DELETED(self):
            return self.getToken(TSqlParser.DELETED, 0)

        def DENSE_RANK(self):
            return self.getToken(TSqlParser.DENSE_RANK, 0)

        def DEPENDENTS(self):
            return self.getToken(TSqlParser.DEPENDENTS, 0)

        def DES(self):
            return self.getToken(TSqlParser.DES, 0)

        def DESCRIPTION(self):
            return self.getToken(TSqlParser.DESCRIPTION, 0)

        def DESX(self):
            return self.getToken(TSqlParser.DESX, 0)

        def DETERMINISTIC(self):
            return self.getToken(TSqlParser.DETERMINISTIC, 0)

        def DHCP(self):
            return self.getToken(TSqlParser.DHCP, 0)

        def DIALOG(self):
            return self.getToken(TSqlParser.DIALOG, 0)

        def DIFFERENCE(self):
            return self.getToken(TSqlParser.DIFFERENCE, 0)

        def DIRECTORY_NAME(self):
            return self.getToken(TSqlParser.DIRECTORY_NAME, 0)

        def DISABLE(self):
            return self.getToken(TSqlParser.DISABLE, 0)

        def DISABLE_BROKER(self):
            return self.getToken(TSqlParser.DISABLE_BROKER, 0)

        def DISABLED(self):
            return self.getToken(TSqlParser.DISABLED, 0)

        def DOCUMENT(self):
            return self.getToken(TSqlParser.DOCUMENT, 0)

        def DROP_EXISTING(self):
            return self.getToken(TSqlParser.DROP_EXISTING, 0)

        def DROPCLEANBUFFERS(self):
            return self.getToken(TSqlParser.DROPCLEANBUFFERS, 0)

        def DYNAMIC(self):
            return self.getToken(TSqlParser.DYNAMIC, 0)

        def ELEMENTS(self):
            return self.getToken(TSqlParser.ELEMENTS, 0)

        def EMERGENCY(self):
            return self.getToken(TSqlParser.EMERGENCY, 0)

        def EMPTY(self):
            return self.getToken(TSqlParser.EMPTY, 0)

        def ENABLE(self):
            return self.getToken(TSqlParser.ENABLE, 0)

        def ENABLE_BROKER(self):
            return self.getToken(TSqlParser.ENABLE_BROKER, 0)

        def ENCRYPTED(self):
            return self.getToken(TSqlParser.ENCRYPTED, 0)

        def ENCRYPTED_VALUE(self):
            return self.getToken(TSqlParser.ENCRYPTED_VALUE, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def ENCRYPTION_TYPE(self):
            return self.getToken(TSqlParser.ENCRYPTION_TYPE, 0)

        def ENDPOINT_URL(self):
            return self.getToken(TSqlParser.ENDPOINT_URL, 0)

        def ERROR_BROKER_CONVERSATIONS(self):
            return self.getToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0)

        def ESTIMATEONLY(self):
            return self.getToken(TSqlParser.ESTIMATEONLY, 0)

        def EXCLUSIVE(self):
            return self.getToken(TSqlParser.EXCLUSIVE, 0)

        def EXECUTABLE(self):
            return self.getToken(TSqlParser.EXECUTABLE, 0)

        def EXIST(self):
            return self.getToken(TSqlParser.EXIST, 0)

        def EXIST_SQUARE_BRACKET(self):
            return self.getToken(TSqlParser.EXIST_SQUARE_BRACKET, 0)

        def EXPAND(self):
            return self.getToken(TSqlParser.EXPAND, 0)

        def EXPIRY_DATE(self):
            return self.getToken(TSqlParser.EXPIRY_DATE, 0)

        def EXPLICIT(self):
            return self.getToken(TSqlParser.EXPLICIT, 0)

        def EXTENDED_LOGICAL_CHECKS(self):
            return self.getToken(TSqlParser.EXTENDED_LOGICAL_CHECKS, 0)

        def FAIL_OPERATION(self):
            return self.getToken(TSqlParser.FAIL_OPERATION, 0)

        def FAILOVER_MODE(self):
            return self.getToken(TSqlParser.FAILOVER_MODE, 0)

        def FAILURE(self):
            return self.getToken(TSqlParser.FAILURE, 0)

        def FAILURE_CONDITION_LEVEL(self):
            return self.getToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0)

        def FAST(self):
            return self.getToken(TSqlParser.FAST, 0)

        def FAST_FORWARD(self):
            return self.getToken(TSqlParser.FAST_FORWARD, 0)

        def FILE_ID(self):
            return self.getToken(TSqlParser.FILE_ID, 0)

        def FILE_IDEX(self):
            return self.getToken(TSqlParser.FILE_IDEX, 0)

        def FILE_NAME(self):
            return self.getToken(TSqlParser.FILE_NAME, 0)

        def FILEGROUP(self):
            return self.getToken(TSqlParser.FILEGROUP, 0)

        def FILEGROUP_ID(self):
            return self.getToken(TSqlParser.FILEGROUP_ID, 0)

        def FILEGROUP_NAME(self):
            return self.getToken(TSqlParser.FILEGROUP_NAME, 0)

        def FILEGROUPPROPERTY(self):
            return self.getToken(TSqlParser.FILEGROUPPROPERTY, 0)

        def FILEGROWTH(self):
            return self.getToken(TSqlParser.FILEGROWTH, 0)

        def FILENAME(self):
            return self.getToken(TSqlParser.FILENAME, 0)

        def FILEPATH(self):
            return self.getToken(TSqlParser.FILEPATH, 0)

        def FILEPROPERTY(self):
            return self.getToken(TSqlParser.FILEPROPERTY, 0)

        def FILEPROPERTYEX(self):
            return self.getToken(TSqlParser.FILEPROPERTYEX, 0)

        def FILESTREAM(self):
            return self.getToken(TSqlParser.FILESTREAM, 0)

        def FILTER(self):
            return self.getToken(TSqlParser.FILTER, 0)

        def FIRST(self):
            return self.getToken(TSqlParser.FIRST, 0)

        def FIRST_VALUE(self):
            return self.getToken(TSqlParser.FIRST_VALUE, 0)

        def FMTONLY(self):
            return self.getToken(TSqlParser.FMTONLY, 0)

        def FOLLOWING(self):
            return self.getToken(TSqlParser.FOLLOWING, 0)

        def FORCE(self):
            return self.getToken(TSqlParser.FORCE, 0)

        def FORCE_FAILOVER_ALLOW_DATA_LOSS(self):
            return self.getToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0)

        def FORCED(self):
            return self.getToken(TSqlParser.FORCED, 0)

        def FORCEPLAN(self):
            return self.getToken(TSqlParser.FORCEPLAN, 0)

        def FORCESCAN(self):
            return self.getToken(TSqlParser.FORCESCAN, 0)

        def FORMAT(self):
            return self.getToken(TSqlParser.FORMAT, 0)

        def FORWARD_ONLY(self):
            return self.getToken(TSqlParser.FORWARD_ONLY, 0)

        def FREE(self):
            return self.getToken(TSqlParser.FREE, 0)

        def FULLSCAN(self):
            return self.getToken(TSqlParser.FULLSCAN, 0)

        def FULLTEXT(self):
            return self.getToken(TSqlParser.FULLTEXT, 0)

        def FULLTEXTCATALOGPROPERTY(self):
            return self.getToken(TSqlParser.FULLTEXTCATALOGPROPERTY, 0)

        def FULLTEXTSERVICEPROPERTY(self):
            return self.getToken(TSqlParser.FULLTEXTSERVICEPROPERTY, 0)

        def GB(self):
            return self.getToken(TSqlParser.GB, 0)

        def GENERATED(self):
            return self.getToken(TSqlParser.GENERATED, 0)

        def GETDATE(self):
            return self.getToken(TSqlParser.GETDATE, 0)

        def GETUTCDATE(self):
            return self.getToken(TSqlParser.GETUTCDATE, 0)

        def GLOBAL(self):
            return self.getToken(TSqlParser.GLOBAL, 0)

        def GO(self):
            return self.getToken(TSqlParser.GO, 0)

        def GREATEST(self):
            return self.getToken(TSqlParser.GREATEST, 0)

        def GROUP_MAX_REQUESTS(self):
            return self.getToken(TSqlParser.GROUP_MAX_REQUESTS, 0)

        def GROUPING(self):
            return self.getToken(TSqlParser.GROUPING, 0)

        def GROUPING_ID(self):
            return self.getToken(TSqlParser.GROUPING_ID, 0)

        def HADR(self):
            return self.getToken(TSqlParser.HADR, 0)

        def HAS_DBACCESS(self):
            return self.getToken(TSqlParser.HAS_DBACCESS, 0)

        def HAS_PERMS_BY_NAME(self):
            return self.getToken(TSqlParser.HAS_PERMS_BY_NAME, 0)

        def HASH(self):
            return self.getToken(TSqlParser.HASH, 0)

        def HEALTH_CHECK_TIMEOUT(self):
            return self.getToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0)

        def HIDDEN_KEYWORD(self):
            return self.getToken(TSqlParser.HIDDEN_KEYWORD, 0)

        def HIGH(self):
            return self.getToken(TSqlParser.HIGH, 0)

        def HONOR_BROKER_PRIORITY(self):
            return self.getToken(TSqlParser.HONOR_BROKER_PRIORITY, 0)

        def HOURS(self):
            return self.getToken(TSqlParser.HOURS, 0)

        def IDENT_CURRENT(self):
            return self.getToken(TSqlParser.IDENT_CURRENT, 0)

        def IDENT_INCR(self):
            return self.getToken(TSqlParser.IDENT_INCR, 0)

        def IDENT_SEED(self):
            return self.getToken(TSqlParser.IDENT_SEED, 0)

        def IDENTITY_VALUE(self):
            return self.getToken(TSqlParser.IDENTITY_VALUE, 0)

        def IGNORE_CONSTRAINTS(self):
            return self.getToken(TSqlParser.IGNORE_CONSTRAINTS, 0)

        def IGNORE_DUP_KEY(self):
            return self.getToken(TSqlParser.IGNORE_DUP_KEY, 0)

        def IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX(self):
            return self.getToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)

        def IGNORE_REPLICATED_TABLE_CACHE(self):
            return self.getToken(TSqlParser.IGNORE_REPLICATED_TABLE_CACHE, 0)

        def IGNORE_TRIGGERS(self):
            return self.getToken(TSqlParser.IGNORE_TRIGGERS, 0)

        def IMMEDIATE(self):
            return self.getToken(TSqlParser.IMMEDIATE, 0)

        def IMPERSONATE(self):
            return self.getToken(TSqlParser.IMPERSONATE, 0)

        def IMPLICIT_TRANSACTIONS(self):
            return self.getToken(TSqlParser.IMPLICIT_TRANSACTIONS, 0)

        def IMPORTANCE(self):
            return self.getToken(TSqlParser.IMPORTANCE, 0)

        def INCLUDE_NULL_VALUES(self):
            return self.getToken(TSqlParser.INCLUDE_NULL_VALUES, 0)

        def INCREMENTAL(self):
            return self.getToken(TSqlParser.INCREMENTAL, 0)

        def INDEX_COL(self):
            return self.getToken(TSqlParser.INDEX_COL, 0)

        def INDEXKEY_PROPERTY(self):
            return self.getToken(TSqlParser.INDEXKEY_PROPERTY, 0)

        def INDEXPROPERTY(self):
            return self.getToken(TSqlParser.INDEXPROPERTY, 0)

        def INITIATOR(self):
            return self.getToken(TSqlParser.INITIATOR, 0)

        def INPUT(self):
            return self.getToken(TSqlParser.INPUT, 0)

        def INSENSITIVE(self):
            return self.getToken(TSqlParser.INSENSITIVE, 0)

        def INSERTED(self):
            return self.getToken(TSqlParser.INSERTED, 0)

        def INT(self):
            return self.getToken(TSqlParser.INT, 0)

        def IP(self):
            return self.getToken(TSqlParser.IP, 0)

        def IS_MEMBER(self):
            return self.getToken(TSqlParser.IS_MEMBER, 0)

        def IS_ROLEMEMBER(self):
            return self.getToken(TSqlParser.IS_ROLEMEMBER, 0)

        def IS_SRVROLEMEMBER(self):
            return self.getToken(TSqlParser.IS_SRVROLEMEMBER, 0)

        def ISJSON(self):
            return self.getToken(TSqlParser.ISJSON, 0)

        def ISOLATION(self):
            return self.getToken(TSqlParser.ISOLATION, 0)

        def JOB(self):
            return self.getToken(TSqlParser.JOB, 0)

        def JSON(self):
            return self.getToken(TSqlParser.JSON, 0)

        def JSON_OBJECT(self):
            return self.getToken(TSqlParser.JSON_OBJECT, 0)

        def JSON_ARRAY(self):
            return self.getToken(TSqlParser.JSON_ARRAY, 0)

        def JSON_VALUE(self):
            return self.getToken(TSqlParser.JSON_VALUE, 0)

        def JSON_QUERY(self):
            return self.getToken(TSqlParser.JSON_QUERY, 0)

        def JSON_MODIFY(self):
            return self.getToken(TSqlParser.JSON_MODIFY, 0)

        def JSON_PATH_EXISTS(self):
            return self.getToken(TSqlParser.JSON_PATH_EXISTS, 0)

        def KB(self):
            return self.getToken(TSqlParser.KB, 0)

        def KEEP(self):
            return self.getToken(TSqlParser.KEEP, 0)

        def KEEPDEFAULTS(self):
            return self.getToken(TSqlParser.KEEPDEFAULTS, 0)

        def KEEPFIXED(self):
            return self.getToken(TSqlParser.KEEPFIXED, 0)

        def KEEPIDENTITY(self):
            return self.getToken(TSqlParser.KEEPIDENTITY, 0)

        def KEY_SOURCE(self):
            return self.getToken(TSqlParser.KEY_SOURCE, 0)

        def KEYS(self):
            return self.getToken(TSqlParser.KEYS, 0)

        def KEYSET(self):
            return self.getToken(TSqlParser.KEYSET, 0)

        def LAG(self):
            return self.getToken(TSqlParser.LAG, 0)

        def LAST(self):
            return self.getToken(TSqlParser.LAST, 0)

        def LAST_VALUE(self):
            return self.getToken(TSqlParser.LAST_VALUE, 0)

        def LEAD(self):
            return self.getToken(TSqlParser.LEAD, 0)

        def LEAST(self):
            return self.getToken(TSqlParser.LEAST, 0)

        def LEN(self):
            return self.getToken(TSqlParser.LEN, 0)

        def LEVEL(self):
            return self.getToken(TSqlParser.LEVEL, 0)

        def LIST(self):
            return self.getToken(TSqlParser.LIST, 0)

        def LISTENER(self):
            return self.getToken(TSqlParser.LISTENER, 0)

        def LISTENER_URL(self):
            return self.getToken(TSqlParser.LISTENER_URL, 0)

        def LOB_COMPACTION(self):
            return self.getToken(TSqlParser.LOB_COMPACTION, 0)

        def LOCAL(self):
            return self.getToken(TSqlParser.LOCAL, 0)

        def LOCATION(self):
            return self.getToken(TSqlParser.LOCATION, 0)

        def LOCK(self):
            return self.getToken(TSqlParser.LOCK, 0)

        def LOCK_ESCALATION(self):
            return self.getToken(TSqlParser.LOCK_ESCALATION, 0)

        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def LOGINPROPERTY(self):
            return self.getToken(TSqlParser.LOGINPROPERTY, 0)

        def LOOP(self):
            return self.getToken(TSqlParser.LOOP, 0)

        def LOW(self):
            return self.getToken(TSqlParser.LOW, 0)

        def LOWER(self):
            return self.getToken(TSqlParser.LOWER, 0)

        def LTRIM(self):
            return self.getToken(TSqlParser.LTRIM, 0)

        def MANUAL(self):
            return self.getToken(TSqlParser.MANUAL, 0)

        def MARK(self):
            return self.getToken(TSqlParser.MARK, 0)

        def MASKED(self):
            return self.getToken(TSqlParser.MASKED, 0)

        def MATERIALIZED(self):
            return self.getToken(TSqlParser.MATERIALIZED, 0)

        def MAX(self):
            return self.getToken(TSqlParser.MAX, 0)

        def MAX_CPU_PERCENT(self):
            return self.getToken(TSqlParser.MAX_CPU_PERCENT, 0)

        def MAX_DOP(self):
            return self.getToken(TSqlParser.MAX_DOP, 0)

        def MAX_FILES(self):
            return self.getToken(TSqlParser.MAX_FILES, 0)

        def MAX_IOPS_PER_VOLUME(self):
            return self.getToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0)

        def MAX_MEMORY_PERCENT(self):
            return self.getToken(TSqlParser.MAX_MEMORY_PERCENT, 0)

        def MAX_PROCESSES(self):
            return self.getToken(TSqlParser.MAX_PROCESSES, 0)

        def MAX_QUEUE_READERS(self):
            return self.getToken(TSqlParser.MAX_QUEUE_READERS, 0)

        def MAX_ROLLOVER_FILES(self):
            return self.getToken(TSqlParser.MAX_ROLLOVER_FILES, 0)

        def MAXDOP(self):
            return self.getToken(TSqlParser.MAXDOP, 0)

        def MAXRECURSION(self):
            return self.getToken(TSqlParser.MAXRECURSION, 0)

        def MAXSIZE(self):
            return self.getToken(TSqlParser.MAXSIZE, 0)

        def MB(self):
            return self.getToken(TSqlParser.MB, 0)

        def MEDIUM(self):
            return self.getToken(TSqlParser.MEDIUM, 0)

        def MEMORY_OPTIMIZED_DATA(self):
            return self.getToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0)

        def MESSAGE(self):
            return self.getToken(TSqlParser.MESSAGE, 0)

        def MIN(self):
            return self.getToken(TSqlParser.MIN, 0)

        def MIN_ACTIVE_ROWVERSION(self):
            return self.getToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0)

        def MIN_CPU_PERCENT(self):
            return self.getToken(TSqlParser.MIN_CPU_PERCENT, 0)

        def MIN_IOPS_PER_VOLUME(self):
            return self.getToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0)

        def MIN_MEMORY_PERCENT(self):
            return self.getToken(TSqlParser.MIN_MEMORY_PERCENT, 0)

        def MINUTES(self):
            return self.getToken(TSqlParser.MINUTES, 0)

        def MIRROR_ADDRESS(self):
            return self.getToken(TSqlParser.MIRROR_ADDRESS, 0)

        def MIXED_PAGE_ALLOCATION(self):
            return self.getToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0)

        def MODE(self):
            return self.getToken(TSqlParser.MODE, 0)

        def MODIFY(self):
            return self.getToken(TSqlParser.MODIFY, 0)

        def MODIFY_SQUARE_BRACKET(self):
            return self.getToken(TSqlParser.MODIFY_SQUARE_BRACKET, 0)

        def MOVE(self):
            return self.getToken(TSqlParser.MOVE, 0)

        def MULTI_USER(self):
            return self.getToken(TSqlParser.MULTI_USER, 0)

        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def NCHAR(self):
            return self.getToken(TSqlParser.NCHAR, 0)

        def NESTED_TRIGGERS(self):
            return self.getToken(TSqlParser.NESTED_TRIGGERS, 0)

        def NEW_ACCOUNT(self):
            return self.getToken(TSqlParser.NEW_ACCOUNT, 0)

        def NEW_BROKER(self):
            return self.getToken(TSqlParser.NEW_BROKER, 0)

        def NEW_PASSWORD(self):
            return self.getToken(TSqlParser.NEW_PASSWORD, 0)

        def NEWNAME(self):
            return self.getToken(TSqlParser.NEWNAME, 0)

        def NEXT(self):
            return self.getToken(TSqlParser.NEXT, 0)

        def NO(self):
            return self.getToken(TSqlParser.NO, 0)

        def NO_INFOMSGS(self):
            return self.getToken(TSqlParser.NO_INFOMSGS, 0)

        def NO_QUERYSTORE(self):
            return self.getToken(TSqlParser.NO_QUERYSTORE, 0)

        def NO_STATISTICS(self):
            return self.getToken(TSqlParser.NO_STATISTICS, 0)

        def NO_TRUNCATE(self):
            return self.getToken(TSqlParser.NO_TRUNCATE, 0)

        def NO_WAIT(self):
            return self.getToken(TSqlParser.NO_WAIT, 0)

        def NOCOUNT(self):
            return self.getToken(TSqlParser.NOCOUNT, 0)

        def NODES(self):
            return self.getToken(TSqlParser.NODES, 0)

        def NOEXEC(self):
            return self.getToken(TSqlParser.NOEXEC, 0)

        def NOEXPAND(self):
            return self.getToken(TSqlParser.NOEXPAND, 0)

        def NOINDEX(self):
            return self.getToken(TSqlParser.NOINDEX, 0)

        def NOLOCK(self):
            return self.getToken(TSqlParser.NOLOCK, 0)

        def NON_TRANSACTED_ACCESS(self):
            return self.getToken(TSqlParser.NON_TRANSACTED_ACCESS, 0)

        def NORECOMPUTE(self):
            return self.getToken(TSqlParser.NORECOMPUTE, 0)

        def NORECOVERY(self):
            return self.getToken(TSqlParser.NORECOVERY, 0)

        def NOTIFICATIONS(self):
            return self.getToken(TSqlParser.NOTIFICATIONS, 0)

        def NOWAIT(self):
            return self.getToken(TSqlParser.NOWAIT, 0)

        def NTILE(self):
            return self.getToken(TSqlParser.NTILE, 0)

        def NULL_DOUBLE_QUOTE(self):
            return self.getToken(TSqlParser.NULL_DOUBLE_QUOTE, 0)

        def NUMANODE(self):
            return self.getToken(TSqlParser.NUMANODE, 0)

        def NUMBER(self):
            return self.getToken(TSqlParser.NUMBER, 0)

        def NUMERIC_ROUNDABORT(self):
            return self.getToken(TSqlParser.NUMERIC_ROUNDABORT, 0)

        def OBJECT(self):
            return self.getToken(TSqlParser.OBJECT, 0)

        def OBJECT_DEFINITION(self):
            return self.getToken(TSqlParser.OBJECT_DEFINITION, 0)

        def OBJECT_ID(self):
            return self.getToken(TSqlParser.OBJECT_ID, 0)

        def OBJECT_NAME(self):
            return self.getToken(TSqlParser.OBJECT_NAME, 0)

        def OBJECT_SCHEMA_NAME(self):
            return self.getToken(TSqlParser.OBJECT_SCHEMA_NAME, 0)

        def OBJECTPROPERTY(self):
            return self.getToken(TSqlParser.OBJECTPROPERTY, 0)

        def OBJECTPROPERTYEX(self):
            return self.getToken(TSqlParser.OBJECTPROPERTYEX, 0)

        def OFFLINE(self):
            return self.getToken(TSqlParser.OFFLINE, 0)

        def OFFSET(self):
            return self.getToken(TSqlParser.OFFSET, 0)

        def OLD_ACCOUNT(self):
            return self.getToken(TSqlParser.OLD_ACCOUNT, 0)

        def ONLINE(self):
            return self.getToken(TSqlParser.ONLINE, 0)

        def ONLY(self):
            return self.getToken(TSqlParser.ONLY, 0)

        def OPEN_EXISTING(self):
            return self.getToken(TSqlParser.OPEN_EXISTING, 0)

        def OPENJSON(self):
            return self.getToken(TSqlParser.OPENJSON, 0)

        def OPTIMISTIC(self):
            return self.getToken(TSqlParser.OPTIMISTIC, 0)

        def OPTIMIZE(self):
            return self.getToken(TSqlParser.OPTIMIZE, 0)

        def OPTIMIZE_FOR_SEQUENTIAL_KEY(self):
            return self.getToken(TSqlParser.OPTIMIZE_FOR_SEQUENTIAL_KEY, 0)

        def ORIGINAL_DB_NAME(self):
            return self.getToken(TSqlParser.ORIGINAL_DB_NAME, 0)

        def ORIGINAL_LOGIN(self):
            return self.getToken(TSqlParser.ORIGINAL_LOGIN, 0)

        def OUT(self):
            return self.getToken(TSqlParser.OUT, 0)

        def OUTPUT(self):
            return self.getToken(TSqlParser.OUTPUT, 0)

        def OVERRIDE(self):
            return self.getToken(TSqlParser.OVERRIDE, 0)

        def OWNER(self):
            return self.getToken(TSqlParser.OWNER, 0)

        def OWNERSHIP(self):
            return self.getToken(TSqlParser.OWNERSHIP, 0)

        def PAD_INDEX(self):
            return self.getToken(TSqlParser.PAD_INDEX, 0)

        def PAGE_VERIFY(self):
            return self.getToken(TSqlParser.PAGE_VERIFY, 0)

        def PAGECOUNT(self):
            return self.getToken(TSqlParser.PAGECOUNT, 0)

        def PAGLOCK(self):
            return self.getToken(TSqlParser.PAGLOCK, 0)

        def PARAMETERIZATION(self):
            return self.getToken(TSqlParser.PARAMETERIZATION, 0)

        def PARSENAME(self):
            return self.getToken(TSqlParser.PARSENAME, 0)

        def PARSEONLY(self):
            return self.getToken(TSqlParser.PARSEONLY, 0)

        def PARTITION(self):
            return self.getToken(TSqlParser.PARTITION, 0)

        def PARTITIONS(self):
            return self.getToken(TSqlParser.PARTITIONS, 0)

        def PARTNER(self):
            return self.getToken(TSqlParser.PARTNER, 0)

        def PATH(self):
            return self.getToken(TSqlParser.PATH, 0)

        def PATINDEX(self):
            return self.getToken(TSqlParser.PATINDEX, 0)

        def PAUSE(self):
            return self.getToken(TSqlParser.PAUSE, 0)

        def PDW_SHOWSPACEUSED(self):
            return self.getToken(TSqlParser.PDW_SHOWSPACEUSED, 0)

        def PERCENT_RANK(self):
            return self.getToken(TSqlParser.PERCENT_RANK, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(TSqlParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(TSqlParser.PERCENTILE_DISC, 0)

        def PERMISSIONS(self):
            return self.getToken(TSqlParser.PERMISSIONS, 0)

        def PERSIST_SAMPLE_PERCENT(self):
            return self.getToken(TSqlParser.PERSIST_SAMPLE_PERCENT, 0)

        def PHYSICAL_ONLY(self):
            return self.getToken(TSqlParser.PHYSICAL_ONLY, 0)

        def POISON_MESSAGE_HANDLING(self):
            return self.getToken(TSqlParser.POISON_MESSAGE_HANDLING, 0)

        def POOL(self):
            return self.getToken(TSqlParser.POOL, 0)

        def PORT(self):
            return self.getToken(TSqlParser.PORT, 0)

        def PRECEDING(self):
            return self.getToken(TSqlParser.PRECEDING, 0)

        def PRIMARY_ROLE(self):
            return self.getToken(TSqlParser.PRIMARY_ROLE, 0)

        def PRIOR(self):
            return self.getToken(TSqlParser.PRIOR, 0)

        def PRIORITY(self):
            return self.getToken(TSqlParser.PRIORITY, 0)

        def PRIORITY_LEVEL(self):
            return self.getToken(TSqlParser.PRIORITY_LEVEL, 0)

        def PRIVATE(self):
            return self.getToken(TSqlParser.PRIVATE, 0)

        def PRIVATE_KEY(self):
            return self.getToken(TSqlParser.PRIVATE_KEY, 0)

        def PRIVILEGES(self):
            return self.getToken(TSqlParser.PRIVILEGES, 0)

        def PROCCACHE(self):
            return self.getToken(TSqlParser.PROCCACHE, 0)

        def PROCEDURE_NAME(self):
            return self.getToken(TSqlParser.PROCEDURE_NAME, 0)

        def PROPERTY(self):
            return self.getToken(TSqlParser.PROPERTY, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def PROVIDER_KEY_NAME(self):
            return self.getToken(TSqlParser.PROVIDER_KEY_NAME, 0)

        def PWDCOMPARE(self):
            return self.getToken(TSqlParser.PWDCOMPARE, 0)

        def PWDENCRYPT(self):
            return self.getToken(TSqlParser.PWDENCRYPT, 0)

        def QUERY(self):
            return self.getToken(TSqlParser.QUERY, 0)

        def QUERY_SQUARE_BRACKET(self):
            return self.getToken(TSqlParser.QUERY_SQUARE_BRACKET, 0)

        def QUEUE(self):
            return self.getToken(TSqlParser.QUEUE, 0)

        def QUEUE_DELAY(self):
            return self.getToken(TSqlParser.QUEUE_DELAY, 0)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(TSqlParser.QUOTED_IDENTIFIER, 0)

        def QUOTENAME(self):
            return self.getToken(TSqlParser.QUOTENAME, 0)

        def RANDOMIZED(self):
            return self.getToken(TSqlParser.RANDOMIZED, 0)

        def RANGE(self):
            return self.getToken(TSqlParser.RANGE, 0)

        def RANK(self):
            return self.getToken(TSqlParser.RANK, 0)

        def RC2(self):
            return self.getToken(TSqlParser.RC2, 0)

        def RC4(self):
            return self.getToken(TSqlParser.RC4, 0)

        def RC4_128(self):
            return self.getToken(TSqlParser.RC4_128, 0)

        def READ_COMMITTED_SNAPSHOT(self):
            return self.getToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0)

        def READ_ONLY(self):
            return self.getToken(TSqlParser.READ_ONLY, 0)

        def READ_ONLY_ROUTING_LIST(self):
            return self.getToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0)

        def READ_WRITE(self):
            return self.getToken(TSqlParser.READ_WRITE, 0)

        def READCOMMITTED(self):
            return self.getToken(TSqlParser.READCOMMITTED, 0)

        def READCOMMITTEDLOCK(self):
            return self.getToken(TSqlParser.READCOMMITTEDLOCK, 0)

        def READONLY(self):
            return self.getToken(TSqlParser.READONLY, 0)

        def READPAST(self):
            return self.getToken(TSqlParser.READPAST, 0)

        def READUNCOMMITTED(self):
            return self.getToken(TSqlParser.READUNCOMMITTED, 0)

        def READWRITE(self):
            return self.getToken(TSqlParser.READWRITE, 0)

        def REBUILD(self):
            return self.getToken(TSqlParser.REBUILD, 0)

        def RECEIVE(self):
            return self.getToken(TSqlParser.RECEIVE, 0)

        def RECOMPILE(self):
            return self.getToken(TSqlParser.RECOMPILE, 0)

        def RECOVERY(self):
            return self.getToken(TSqlParser.RECOVERY, 0)

        def RECURSIVE_TRIGGERS(self):
            return self.getToken(TSqlParser.RECURSIVE_TRIGGERS, 0)

        def RELATIVE(self):
            return self.getToken(TSqlParser.RELATIVE, 0)

        def REMOTE(self):
            return self.getToken(TSqlParser.REMOTE, 0)

        def REMOTE_PROC_TRANSACTIONS(self):
            return self.getToken(TSqlParser.REMOTE_PROC_TRANSACTIONS, 0)

        def REMOTE_SERVICE_NAME(self):
            return self.getToken(TSqlParser.REMOTE_SERVICE_NAME, 0)

        def REMOVE(self):
            return self.getToken(TSqlParser.REMOVE, 0)

        def REORGANIZE(self):
            return self.getToken(TSqlParser.REORGANIZE, 0)

        def REPAIR_ALLOW_DATA_LOSS(self):
            return self.getToken(TSqlParser.REPAIR_ALLOW_DATA_LOSS, 0)

        def REPAIR_FAST(self):
            return self.getToken(TSqlParser.REPAIR_FAST, 0)

        def REPAIR_REBUILD(self):
            return self.getToken(TSqlParser.REPAIR_REBUILD, 0)

        def REPEATABLE(self):
            return self.getToken(TSqlParser.REPEATABLE, 0)

        def REPEATABLEREAD(self):
            return self.getToken(TSqlParser.REPEATABLEREAD, 0)

        def REPLACE(self):
            return self.getToken(TSqlParser.REPLACE, 0)

        def REPLICA(self):
            return self.getToken(TSqlParser.REPLICA, 0)

        def REPLICATE(self):
            return self.getToken(TSqlParser.REPLICATE, 0)

        def REQUEST_MAX_CPU_TIME_SEC(self):
            return self.getToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, 0)

        def REQUEST_MAX_MEMORY_GRANT_PERCENT(self):
            return self.getToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, 0)

        def REQUEST_MEMORY_GRANT_TIMEOUT_SEC(self):
            return self.getToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, 0)

        def REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT(self):
            return self.getToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0)

        def RESAMPLE(self):
            return self.getToken(TSqlParser.RESAMPLE, 0)

        def RESERVE_DISK_SPACE(self):
            return self.getToken(TSqlParser.RESERVE_DISK_SPACE, 0)

        def RESOURCE(self):
            return self.getToken(TSqlParser.RESOURCE, 0)

        def RESOURCE_MANAGER_LOCATION(self):
            return self.getToken(TSqlParser.RESOURCE_MANAGER_LOCATION, 0)

        def RESTRICTED_USER(self):
            return self.getToken(TSqlParser.RESTRICTED_USER, 0)

        def RESUMABLE(self):
            return self.getToken(TSqlParser.RESUMABLE, 0)

        def RETENTION(self):
            return self.getToken(TSqlParser.RETENTION, 0)

        def REVERSE(self):
            return self.getToken(TSqlParser.REVERSE, 0)

        def ROBUST(self):
            return self.getToken(TSqlParser.ROBUST, 0)

        def ROOT(self):
            return self.getToken(TSqlParser.ROOT, 0)

        def ROUTE(self):
            return self.getToken(TSqlParser.ROUTE, 0)

        def ROW(self):
            return self.getToken(TSqlParser.ROW, 0)

        def ROW_NUMBER(self):
            return self.getToken(TSqlParser.ROW_NUMBER, 0)

        def ROWGUID(self):
            return self.getToken(TSqlParser.ROWGUID, 0)

        def ROWLOCK(self):
            return self.getToken(TSqlParser.ROWLOCK, 0)

        def ROWS(self):
            return self.getToken(TSqlParser.ROWS, 0)

        def RTRIM(self):
            return self.getToken(TSqlParser.RTRIM, 0)

        def SAMPLE(self):
            return self.getToken(TSqlParser.SAMPLE, 0)

        def SCHEMA_ID(self):
            return self.getToken(TSqlParser.SCHEMA_ID, 0)

        def SCHEMA_NAME(self):
            return self.getToken(TSqlParser.SCHEMA_NAME, 0)

        def SCHEMABINDING(self):
            return self.getToken(TSqlParser.SCHEMABINDING, 0)

        def SCOPE_IDENTITY(self):
            return self.getToken(TSqlParser.SCOPE_IDENTITY, 0)

        def SCOPED(self):
            return self.getToken(TSqlParser.SCOPED, 0)

        def SCROLL(self):
            return self.getToken(TSqlParser.SCROLL, 0)

        def SCROLL_LOCKS(self):
            return self.getToken(TSqlParser.SCROLL_LOCKS, 0)

        def SEARCH(self):
            return self.getToken(TSqlParser.SEARCH, 0)

        def SECONDARY(self):
            return self.getToken(TSqlParser.SECONDARY, 0)

        def SECONDARY_ONLY(self):
            return self.getToken(TSqlParser.SECONDARY_ONLY, 0)

        def SECONDARY_ROLE(self):
            return self.getToken(TSqlParser.SECONDARY_ROLE, 0)

        def SECONDS(self):
            return self.getToken(TSqlParser.SECONDS, 0)

        def SECRET(self):
            return self.getToken(TSqlParser.SECRET, 0)

        def SECURABLES(self):
            return self.getToken(TSqlParser.SECURABLES, 0)

        def SECURITY(self):
            return self.getToken(TSqlParser.SECURITY, 0)

        def SECURITY_LOG(self):
            return self.getToken(TSqlParser.SECURITY_LOG, 0)

        def SEEDING_MODE(self):
            return self.getToken(TSqlParser.SEEDING_MODE, 0)

        def SELF(self):
            return self.getToken(TSqlParser.SELF, 0)

        def SEMI_SENSITIVE(self):
            return self.getToken(TSqlParser.SEMI_SENSITIVE, 0)

        def SEND(self):
            return self.getToken(TSqlParser.SEND, 0)

        def SENT(self):
            return self.getToken(TSqlParser.SENT, 0)

        def SEQUENCE(self):
            return self.getToken(TSqlParser.SEQUENCE, 0)

        def SEQUENCE_NUMBER(self):
            return self.getToken(TSqlParser.SEQUENCE_NUMBER, 0)

        def SERIALIZABLE(self):
            return self.getToken(TSqlParser.SERIALIZABLE, 0)

        def SERVERPROPERTY(self):
            return self.getToken(TSqlParser.SERVERPROPERTY, 0)

        def SERVICEBROKER(self):
            return self.getToken(TSqlParser.SERVICEBROKER, 0)

        def SESSIONPROPERTY(self):
            return self.getToken(TSqlParser.SESSIONPROPERTY, 0)

        def SESSION_TIMEOUT(self):
            return self.getToken(TSqlParser.SESSION_TIMEOUT, 0)

        def SETERROR(self):
            return self.getToken(TSqlParser.SETERROR, 0)

        def SHARE(self):
            return self.getToken(TSqlParser.SHARE, 0)

        def SHARED(self):
            return self.getToken(TSqlParser.SHARED, 0)

        def SHOWCONTIG(self):
            return self.getToken(TSqlParser.SHOWCONTIG, 0)

        def SHOWPLAN(self):
            return self.getToken(TSqlParser.SHOWPLAN, 0)

        def SHOWPLAN_ALL(self):
            return self.getToken(TSqlParser.SHOWPLAN_ALL, 0)

        def SHOWPLAN_TEXT(self):
            return self.getToken(TSqlParser.SHOWPLAN_TEXT, 0)

        def SHOWPLAN_XML(self):
            return self.getToken(TSqlParser.SHOWPLAN_XML, 0)

        def SIGNATURE(self):
            return self.getToken(TSqlParser.SIGNATURE, 0)

        def SIMPLE(self):
            return self.getToken(TSqlParser.SIMPLE, 0)

        def SINGLE_USER(self):
            return self.getToken(TSqlParser.SINGLE_USER, 0)

        def SIZE(self):
            return self.getToken(TSqlParser.SIZE, 0)

        def SMALLINT(self):
            return self.getToken(TSqlParser.SMALLINT, 0)

        def SNAPSHOT(self):
            return self.getToken(TSqlParser.SNAPSHOT, 0)

        def SORT_IN_TEMPDB(self):
            return self.getToken(TSqlParser.SORT_IN_TEMPDB, 0)

        def SOUNDEX(self):
            return self.getToken(TSqlParser.SOUNDEX, 0)

        def SPACE_KEYWORD(self):
            return self.getToken(TSqlParser.SPACE_KEYWORD, 0)

        def SPARSE(self):
            return self.getToken(TSqlParser.SPARSE, 0)

        def SPATIAL_WINDOW_MAX_CELLS(self):
            return self.getToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0)

        def SQL_VARIANT_PROPERTY(self):
            return self.getToken(TSqlParser.SQL_VARIANT_PROPERTY, 0)

        def STANDBY(self):
            return self.getToken(TSqlParser.STANDBY, 0)

        def START_DATE(self):
            return self.getToken(TSqlParser.START_DATE, 0)

        def STATIC(self):
            return self.getToken(TSqlParser.STATIC, 0)

        def STATISTICS_INCREMENTAL(self):
            return self.getToken(TSqlParser.STATISTICS_INCREMENTAL, 0)

        def STATISTICS_NORECOMPUTE(self):
            return self.getToken(TSqlParser.STATISTICS_NORECOMPUTE, 0)

        def STATS_DATE(self):
            return self.getToken(TSqlParser.STATS_DATE, 0)

        def STATS_STREAM(self):
            return self.getToken(TSqlParser.STATS_STREAM, 0)

        def STATUS(self):
            return self.getToken(TSqlParser.STATUS, 0)

        def STATUSONLY(self):
            return self.getToken(TSqlParser.STATUSONLY, 0)

        def STDEV(self):
            return self.getToken(TSqlParser.STDEV, 0)

        def STDEVP(self):
            return self.getToken(TSqlParser.STDEVP, 0)

        def STOPLIST(self):
            return self.getToken(TSqlParser.STOPLIST, 0)

        def STR(self):
            return self.getToken(TSqlParser.STR, 0)

        def STRING_AGG(self):
            return self.getToken(TSqlParser.STRING_AGG, 0)

        def STRING_ESCAPE(self):
            return self.getToken(TSqlParser.STRING_ESCAPE, 0)

        def STUFF(self):
            return self.getToken(TSqlParser.STUFF, 0)

        def SUBJECT(self):
            return self.getToken(TSqlParser.SUBJECT, 0)

        def SUBSCRIBE(self):
            return self.getToken(TSqlParser.SUBSCRIBE, 0)

        def SUBSCRIPTION(self):
            return self.getToken(TSqlParser.SUBSCRIPTION, 0)

        def SUBSTRING(self):
            return self.getToken(TSqlParser.SUBSTRING, 0)

        def SUM(self):
            return self.getToken(TSqlParser.SUM, 0)

        def SUSER_ID(self):
            return self.getToken(TSqlParser.SUSER_ID, 0)

        def SUSER_NAME(self):
            return self.getToken(TSqlParser.SUSER_NAME, 0)

        def SUSER_SID(self):
            return self.getToken(TSqlParser.SUSER_SID, 0)

        def SUSER_SNAME(self):
            return self.getToken(TSqlParser.SUSER_SNAME, 0)

        def SUSPEND(self):
            return self.getToken(TSqlParser.SUSPEND, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def SYNCHRONOUS_COMMIT(self):
            return self.getToken(TSqlParser.SYNCHRONOUS_COMMIT, 0)

        def SYNONYM(self):
            return self.getToken(TSqlParser.SYNONYM, 0)

        def SYSTEM(self):
            return self.getToken(TSqlParser.SYSTEM, 0)

        def TABLERESULTS(self):
            return self.getToken(TSqlParser.TABLERESULTS, 0)

        def TABLOCK(self):
            return self.getToken(TSqlParser.TABLOCK, 0)

        def TABLOCKX(self):
            return self.getToken(TSqlParser.TABLOCKX, 0)

        def TAKE(self):
            return self.getToken(TSqlParser.TAKE, 0)

        def TARGET_RECOVERY_TIME(self):
            return self.getToken(TSqlParser.TARGET_RECOVERY_TIME, 0)

        def TB(self):
            return self.getToken(TSqlParser.TB, 0)

        def TEXTIMAGE_ON(self):
            return self.getToken(TSqlParser.TEXTIMAGE_ON, 0)

        def THROW(self):
            return self.getToken(TSqlParser.THROW, 0)

        def TIES(self):
            return self.getToken(TSqlParser.TIES, 0)

        def TIME(self):
            return self.getToken(TSqlParser.TIME, 0)

        def TIMEOUT(self):
            return self.getToken(TSqlParser.TIMEOUT, 0)

        def TIMER(self):
            return self.getToken(TSqlParser.TIMER, 0)

        def TINYINT(self):
            return self.getToken(TSqlParser.TINYINT, 0)

        def TORN_PAGE_DETECTION(self):
            return self.getToken(TSqlParser.TORN_PAGE_DETECTION, 0)

        def TRACKING(self):
            return self.getToken(TSqlParser.TRACKING, 0)

        def TRANSACTION_ID(self):
            return self.getToken(TSqlParser.TRANSACTION_ID, 0)

        def TRANSFORM_NOISE_WORDS(self):
            return self.getToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0)

        def TRANSLATE(self):
            return self.getToken(TSqlParser.TRANSLATE, 0)

        def TRIM(self):
            return self.getToken(TSqlParser.TRIM, 0)

        def TRIPLE_DES(self):
            return self.getToken(TSqlParser.TRIPLE_DES, 0)

        def TRIPLE_DES_3KEY(self):
            return self.getToken(TSqlParser.TRIPLE_DES_3KEY, 0)

        def TRUSTWORTHY(self):
            return self.getToken(TSqlParser.TRUSTWORTHY, 0)

        def TRY(self):
            return self.getToken(TSqlParser.TRY, 0)

        def TSQL(self):
            return self.getToken(TSqlParser.TSQL, 0)

        def TWO_DIGIT_YEAR_CUTOFF(self):
            return self.getToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def TYPE_ID(self):
            return self.getToken(TSqlParser.TYPE_ID, 0)

        def TYPE_NAME(self):
            return self.getToken(TSqlParser.TYPE_NAME, 0)

        def TYPE_WARNING(self):
            return self.getToken(TSqlParser.TYPE_WARNING, 0)

        def TYPEPROPERTY(self):
            return self.getToken(TSqlParser.TYPEPROPERTY, 0)

        def UNBOUNDED(self):
            return self.getToken(TSqlParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(TSqlParser.UNCOMMITTED, 0)

        def UNICODE(self):
            return self.getToken(TSqlParser.UNICODE, 0)

        def UNKNOWN(self):
            return self.getToken(TSqlParser.UNKNOWN, 0)

        def UNLIMITED(self):
            return self.getToken(TSqlParser.UNLIMITED, 0)

        def UNMASK(self):
            return self.getToken(TSqlParser.UNMASK, 0)

        def UOW(self):
            return self.getToken(TSqlParser.UOW, 0)

        def UPDLOCK(self):
            return self.getToken(TSqlParser.UPDLOCK, 0)

        def UPPER(self):
            return self.getToken(TSqlParser.UPPER, 0)

        def USER_ID(self):
            return self.getToken(TSqlParser.USER_ID, 0)

        def USER_NAME(self):
            return self.getToken(TSqlParser.USER_NAME, 0)

        def USING(self):
            return self.getToken(TSqlParser.USING, 0)

        def VALID_XML(self):
            return self.getToken(TSqlParser.VALID_XML, 0)

        def VALIDATION(self):
            return self.getToken(TSqlParser.VALIDATION, 0)

        def VALUE(self):
            return self.getToken(TSqlParser.VALUE, 0)

        def VALUE_SQUARE_BRACKET(self):
            return self.getToken(TSqlParser.VALUE_SQUARE_BRACKET, 0)

        def VAR(self):
            return self.getToken(TSqlParser.VAR, 0)

        def VARBINARY_KEYWORD(self):
            return self.getToken(TSqlParser.VARBINARY_KEYWORD, 0)

        def VARP(self):
            return self.getToken(TSqlParser.VARP, 0)

        def VERIFY_CLONEDB(self):
            return self.getToken(TSqlParser.VERIFY_CLONEDB, 0)

        def VERSION(self):
            return self.getToken(TSqlParser.VERSION, 0)

        def VIEW_METADATA(self):
            return self.getToken(TSqlParser.VIEW_METADATA, 0)

        def VIEWS(self):
            return self.getToken(TSqlParser.VIEWS, 0)

        def WAIT(self):
            return self.getToken(TSqlParser.WAIT, 0)

        def WELL_FORMED_XML(self):
            return self.getToken(TSqlParser.WELL_FORMED_XML, 0)

        def WITHOUT_ARRAY_WRAPPER(self):
            return self.getToken(TSqlParser.WITHOUT_ARRAY_WRAPPER, 0)

        def WORK(self):
            return self.getToken(TSqlParser.WORK, 0)

        def WORKLOAD(self):
            return self.getToken(TSqlParser.WORKLOAD, 0)

        def XLOCK(self):
            return self.getToken(TSqlParser.XLOCK, 0)

        def XML(self):
            return self.getToken(TSqlParser.XML, 0)

        def XML_COMPRESSION(self):
            return self.getToken(TSqlParser.XML_COMPRESSION, 0)

        def XMLDATA(self):
            return self.getToken(TSqlParser.XMLDATA, 0)

        def XMLNAMESPACES(self):
            return self.getToken(TSqlParser.XMLNAMESPACES, 0)

        def XMLSCHEMA(self):
            return self.getToken(TSqlParser.XMLSCHEMA, 0)

        def XSINIL(self):
            return self.getToken(TSqlParser.XSINIL, 0)

        def ZONE(self):
            return self.getToken(TSqlParser.ZONE, 0)

        def ABORT_AFTER_WAIT(self):
            return self.getToken(TSqlParser.ABORT_AFTER_WAIT, 0)

        def ABSENT(self):
            return self.getToken(TSqlParser.ABSENT, 0)

        def ADMINISTER(self):
            return self.getToken(TSqlParser.ADMINISTER, 0)

        def AES(self):
            return self.getToken(TSqlParser.AES, 0)

        def ALLOW_CONNECTIONS(self):
            return self.getToken(TSqlParser.ALLOW_CONNECTIONS, 0)

        def ALLOW_MULTIPLE_EVENT_LOSS(self):
            return self.getToken(TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS, 0)

        def ALLOW_SINGLE_EVENT_LOSS(self):
            return self.getToken(TSqlParser.ALLOW_SINGLE_EVENT_LOSS, 0)

        def ANONYMOUS(self):
            return self.getToken(TSqlParser.ANONYMOUS, 0)

        def APPEND(self):
            return self.getToken(TSqlParser.APPEND, 0)

        def APPLICATION(self):
            return self.getToken(TSqlParser.APPLICATION, 0)

        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def ASYNCHRONOUS_COMMIT(self):
            return self.getToken(TSqlParser.ASYNCHRONOUS_COMMIT, 0)

        def AUTHENTICATE(self):
            return self.getToken(TSqlParser.AUTHENTICATE, 0)

        def AUTHENTICATION(self):
            return self.getToken(TSqlParser.AUTHENTICATION, 0)

        def AUTOMATED_BACKUP_PREFERENCE(self):
            return self.getToken(TSqlParser.AUTOMATED_BACKUP_PREFERENCE, 0)

        def AUTOMATIC(self):
            return self.getToken(TSqlParser.AUTOMATIC, 0)

        def AVAILABILITY_MODE(self):
            return self.getToken(TSqlParser.AVAILABILITY_MODE, 0)

        def BEFORE(self):
            return self.getToken(TSqlParser.BEFORE, 0)

        def BLOCK(self):
            return self.getToken(TSqlParser.BLOCK, 0)

        def BLOCKERS(self):
            return self.getToken(TSqlParser.BLOCKERS, 0)

        def BLOCKSIZE(self):
            return self.getToken(TSqlParser.BLOCKSIZE, 0)

        def BLOCKING_HIERARCHY(self):
            return self.getToken(TSqlParser.BLOCKING_HIERARCHY, 0)

        def BUFFER(self):
            return self.getToken(TSqlParser.BUFFER, 0)

        def BUFFERCOUNT(self):
            return self.getToken(TSqlParser.BUFFERCOUNT, 0)

        def CACHE(self):
            return self.getToken(TSqlParser.CACHE, 0)

        def CALLED(self):
            return self.getToken(TSqlParser.CALLED, 0)

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def CHANGETABLE(self):
            return self.getToken(TSqlParser.CHANGETABLE, 0)

        def CHANGES(self):
            return self.getToken(TSqlParser.CHANGES, 0)

        def CHECK_POLICY(self):
            return self.getToken(TSqlParser.CHECK_POLICY, 0)

        def CHECK_EXPIRATION(self):
            return self.getToken(TSqlParser.CHECK_EXPIRATION, 0)

        def CLASSIFIER_FUNCTION(self):
            return self.getToken(TSqlParser.CLASSIFIER_FUNCTION, 0)

        def CLUSTER(self):
            return self.getToken(TSqlParser.CLUSTER, 0)

        def COMPRESS(self):
            return self.getToken(TSqlParser.COMPRESS, 0)

        def COMPRESSION(self):
            return self.getToken(TSqlParser.COMPRESSION, 0)

        def CONNECT(self):
            return self.getToken(TSqlParser.CONNECT, 0)

        def CONNECTION(self):
            return self.getToken(TSqlParser.CONNECTION, 0)

        def CONFIGURATION(self):
            return self.getToken(TSqlParser.CONFIGURATION, 0)

        def CONNECTIONPROPERTY(self):
            return self.getToken(TSqlParser.CONNECTIONPROPERTY, 0)

        def CONTAINMENT(self):
            return self.getToken(TSqlParser.CONTAINMENT, 0)

        def CONTEXT(self):
            return self.getToken(TSqlParser.CONTEXT, 0)

        def CONTEXT_INFO(self):
            return self.getToken(TSqlParser.CONTEXT_INFO, 0)

        def CONTINUE_AFTER_ERROR(self):
            return self.getToken(TSqlParser.CONTINUE_AFTER_ERROR, 0)

        def CONTRACT(self):
            return self.getToken(TSqlParser.CONTRACT, 0)

        def CONTRACT_NAME(self):
            return self.getToken(TSqlParser.CONTRACT_NAME, 0)

        def CONVERSATION(self):
            return self.getToken(TSqlParser.CONVERSATION, 0)

        def COPY_ONLY(self):
            return self.getToken(TSqlParser.COPY_ONLY, 0)

        def CURRENT_REQUEST_ID(self):
            return self.getToken(TSqlParser.CURRENT_REQUEST_ID, 0)

        def CURRENT_TRANSACTION_ID(self):
            return self.getToken(TSqlParser.CURRENT_TRANSACTION_ID, 0)

        def CYCLE(self):
            return self.getToken(TSqlParser.CYCLE, 0)

        def DATA_COMPRESSION(self):
            return self.getToken(TSqlParser.DATA_COMPRESSION, 0)

        def DATA_SOURCE(self):
            return self.getToken(TSqlParser.DATA_SOURCE, 0)

        def DATABASE_MIRRORING(self):
            return self.getToken(TSqlParser.DATABASE_MIRRORING, 0)

        def DATASPACE(self):
            return self.getToken(TSqlParser.DATASPACE, 0)

        def DDL(self):
            return self.getToken(TSqlParser.DDL, 0)

        def DECOMPRESS(self):
            return self.getToken(TSqlParser.DECOMPRESS, 0)

        def DEFAULT_DATABASE(self):
            return self.getToken(TSqlParser.DEFAULT_DATABASE, 0)

        def DEFAULT_SCHEMA(self):
            return self.getToken(TSqlParser.DEFAULT_SCHEMA, 0)

        def DIAGNOSTICS(self):
            return self.getToken(TSqlParser.DIAGNOSTICS, 0)

        def DIFFERENTIAL(self):
            return self.getToken(TSqlParser.DIFFERENTIAL, 0)

        def DISTRIBUTION(self):
            return self.getToken(TSqlParser.DISTRIBUTION, 0)

        def DTC_SUPPORT(self):
            return self.getToken(TSqlParser.DTC_SUPPORT, 0)

        def ENABLED(self):
            return self.getToken(TSqlParser.ENABLED, 0)

        def ENDPOINT(self):
            return self.getToken(TSqlParser.ENDPOINT, 0)

        def ERROR(self):
            return self.getToken(TSqlParser.ERROR, 0)

        def ERROR_LINE(self):
            return self.getToken(TSqlParser.ERROR_LINE, 0)

        def ERROR_MESSAGE(self):
            return self.getToken(TSqlParser.ERROR_MESSAGE, 0)

        def ERROR_NUMBER(self):
            return self.getToken(TSqlParser.ERROR_NUMBER, 0)

        def ERROR_PROCEDURE(self):
            return self.getToken(TSqlParser.ERROR_PROCEDURE, 0)

        def ERROR_SEVERITY(self):
            return self.getToken(TSqlParser.ERROR_SEVERITY, 0)

        def ERROR_STATE(self):
            return self.getToken(TSqlParser.ERROR_STATE, 0)

        def EVENT(self):
            return self.getToken(TSqlParser.EVENT, 0)

        def EVENTDATA(self):
            return self.getToken(TSqlParser.EVENTDATA, 0)

        def EVENT_RETENTION_MODE(self):
            return self.getToken(TSqlParser.EVENT_RETENTION_MODE, 0)

        def EXECUTABLE_FILE(self):
            return self.getToken(TSqlParser.EXECUTABLE_FILE, 0)

        def EXPIREDATE(self):
            return self.getToken(TSqlParser.EXPIREDATE, 0)

        def EXTENSION(self):
            return self.getToken(TSqlParser.EXTENSION, 0)

        def EXTERNAL_ACCESS(self):
            return self.getToken(TSqlParser.EXTERNAL_ACCESS, 0)

        def FAILOVER(self):
            return self.getToken(TSqlParser.FAILOVER, 0)

        def FAILURECONDITIONLEVEL(self):
            return self.getToken(TSqlParser.FAILURECONDITIONLEVEL, 0)

        def FAN_IN(self):
            return self.getToken(TSqlParser.FAN_IN, 0)

        def FILE_SNAPSHOT(self):
            return self.getToken(TSqlParser.FILE_SNAPSHOT, 0)

        def FORCESEEK(self):
            return self.getToken(TSqlParser.FORCESEEK, 0)

        def FORCE_SERVICE_ALLOW_DATA_LOSS(self):
            return self.getToken(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0)

        def FORMATMESSAGE(self):
            return self.getToken(TSqlParser.FORMATMESSAGE, 0)

        def GET(self):
            return self.getToken(TSqlParser.GET, 0)

        def GET_FILESTREAM_TRANSACTION_CONTEXT(self):
            return self.getToken(TSqlParser.GET_FILESTREAM_TRANSACTION_CONTEXT, 0)

        def GETANCESTOR(self):
            return self.getToken(TSqlParser.GETANCESTOR, 0)

        def GETANSINULL(self):
            return self.getToken(TSqlParser.GETANSINULL, 0)

        def GETDESCENDANT(self):
            return self.getToken(TSqlParser.GETDESCENDANT, 0)

        def GETLEVEL(self):
            return self.getToken(TSqlParser.GETLEVEL, 0)

        def GETREPARENTEDVALUE(self):
            return self.getToken(TSqlParser.GETREPARENTEDVALUE, 0)

        def GETROOT(self):
            return self.getToken(TSqlParser.GETROOT, 0)

        def GOVERNOR(self):
            return self.getToken(TSqlParser.GOVERNOR, 0)

        def HASHED(self):
            return self.getToken(TSqlParser.HASHED, 0)

        def HEALTHCHECKTIMEOUT(self):
            return self.getToken(TSqlParser.HEALTHCHECKTIMEOUT, 0)

        def HEAP(self):
            return self.getToken(TSqlParser.HEAP, 0)

        def HIERARCHYID(self):
            return self.getToken(TSqlParser.HIERARCHYID, 0)

        def HOST_ID(self):
            return self.getToken(TSqlParser.HOST_ID, 0)

        def HOST_NAME(self):
            return self.getToken(TSqlParser.HOST_NAME, 0)

        def IIF(self):
            return self.getToken(TSqlParser.IIF, 0)

        def IO(self):
            return self.getToken(TSqlParser.IO, 0)

        def INCLUDE(self):
            return self.getToken(TSqlParser.INCLUDE, 0)

        def INCREMENT(self):
            return self.getToken(TSqlParser.INCREMENT, 0)

        def INFINITE(self):
            return self.getToken(TSqlParser.INFINITE, 0)

        def INIT(self):
            return self.getToken(TSqlParser.INIT, 0)

        def INSTEAD(self):
            return self.getToken(TSqlParser.INSTEAD, 0)

        def ISDESCENDANTOF(self):
            return self.getToken(TSqlParser.ISDESCENDANTOF, 0)

        def ISNULL(self):
            return self.getToken(TSqlParser.ISNULL, 0)

        def ISNUMERIC(self):
            return self.getToken(TSqlParser.ISNUMERIC, 0)

        def KERBEROS(self):
            return self.getToken(TSqlParser.KERBEROS, 0)

        def KEY_PATH(self):
            return self.getToken(TSqlParser.KEY_PATH, 0)

        def KEY_STORE_PROVIDER_NAME(self):
            return self.getToken(TSqlParser.KEY_STORE_PROVIDER_NAME, 0)

        def LANGUAGE(self):
            return self.getToken(TSqlParser.LANGUAGE, 0)

        def LIBRARY(self):
            return self.getToken(TSqlParser.LIBRARY, 0)

        def LIFETIME(self):
            return self.getToken(TSqlParser.LIFETIME, 0)

        def LINKED(self):
            return self.getToken(TSqlParser.LINKED, 0)

        def LINUX(self):
            return self.getToken(TSqlParser.LINUX, 0)

        def LISTENER_IP(self):
            return self.getToken(TSqlParser.LISTENER_IP, 0)

        def LISTENER_PORT(self):
            return self.getToken(TSqlParser.LISTENER_PORT, 0)

        def LOCAL_SERVICE_NAME(self):
            return self.getToken(TSqlParser.LOCAL_SERVICE_NAME, 0)

        def LOG(self):
            return self.getToken(TSqlParser.LOG, 0)

        def MASK(self):
            return self.getToken(TSqlParser.MASK, 0)

        def MATCHED(self):
            return self.getToken(TSqlParser.MATCHED, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def MAX_MEMORY(self):
            return self.getToken(TSqlParser.MAX_MEMORY, 0)

        def MAXTRANSFER(self):
            return self.getToken(TSqlParser.MAXTRANSFER, 0)

        def MAXVALUE(self):
            return self.getToken(TSqlParser.MAXVALUE, 0)

        def MAX_DISPATCH_LATENCY(self):
            return self.getToken(TSqlParser.MAX_DISPATCH_LATENCY, 0)

        def MAX_DURATION(self):
            return self.getToken(TSqlParser.MAX_DURATION, 0)

        def MAX_EVENT_SIZE(self):
            return self.getToken(TSqlParser.MAX_EVENT_SIZE, 0)

        def MAX_SIZE(self):
            return self.getToken(TSqlParser.MAX_SIZE, 0)

        def MAX_OUTSTANDING_IO_PER_VOLUME(self):
            return self.getToken(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0)

        def MEDIADESCRIPTION(self):
            return self.getToken(TSqlParser.MEDIADESCRIPTION, 0)

        def MEDIANAME(self):
            return self.getToken(TSqlParser.MEDIANAME, 0)

        def MEMBER(self):
            return self.getToken(TSqlParser.MEMBER, 0)

        def MEMORY_PARTITION_MODE(self):
            return self.getToken(TSqlParser.MEMORY_PARTITION_MODE, 0)

        def MESSAGE_FORWARDING(self):
            return self.getToken(TSqlParser.MESSAGE_FORWARDING, 0)

        def MESSAGE_FORWARD_SIZE(self):
            return self.getToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0)

        def MINVALUE(self):
            return self.getToken(TSqlParser.MINVALUE, 0)

        def MIRROR(self):
            return self.getToken(TSqlParser.MIRROR, 0)

        def MUST_CHANGE(self):
            return self.getToken(TSqlParser.MUST_CHANGE, 0)

        def NEWID(self):
            return self.getToken(TSqlParser.NEWID, 0)

        def NEWSEQUENTIALID(self):
            return self.getToken(TSqlParser.NEWSEQUENTIALID, 0)

        def NOFORMAT(self):
            return self.getToken(TSqlParser.NOFORMAT, 0)

        def NOINIT(self):
            return self.getToken(TSqlParser.NOINIT, 0)

        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def NOREWIND(self):
            return self.getToken(TSqlParser.NOREWIND, 0)

        def NOSKIP(self):
            return self.getToken(TSqlParser.NOSKIP, 0)

        def NOUNLOAD(self):
            return self.getToken(TSqlParser.NOUNLOAD, 0)

        def NO_CHECKSUM(self):
            return self.getToken(TSqlParser.NO_CHECKSUM, 0)

        def NO_COMPRESSION(self):
            return self.getToken(TSqlParser.NO_COMPRESSION, 0)

        def NO_EVENT_LOSS(self):
            return self.getToken(TSqlParser.NO_EVENT_LOSS, 0)

        def NOTIFICATION(self):
            return self.getToken(TSqlParser.NOTIFICATION, 0)

        def NTLM(self):
            return self.getToken(TSqlParser.NTLM, 0)

        def OLD_PASSWORD(self):
            return self.getToken(TSqlParser.OLD_PASSWORD, 0)

        def ON_FAILURE(self):
            return self.getToken(TSqlParser.ON_FAILURE, 0)

        def OPERATIONS(self):
            return self.getToken(TSqlParser.OPERATIONS, 0)

        def PAGE(self):
            return self.getToken(TSqlParser.PAGE, 0)

        def PARAM_NODE(self):
            return self.getToken(TSqlParser.PARAM_NODE, 0)

        def PARTIAL(self):
            return self.getToken(TSqlParser.PARTIAL, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def PERMISSION_SET(self):
            return self.getToken(TSqlParser.PERMISSION_SET, 0)

        def PER_CPU(self):
            return self.getToken(TSqlParser.PER_CPU, 0)

        def PER_DB(self):
            return self.getToken(TSqlParser.PER_DB, 0)

        def PER_NODE(self):
            return self.getToken(TSqlParser.PER_NODE, 0)

        def PERSISTED(self):
            return self.getToken(TSqlParser.PERSISTED, 0)

        def PLATFORM(self):
            return self.getToken(TSqlParser.PLATFORM, 0)

        def POLICY(self):
            return self.getToken(TSqlParser.POLICY, 0)

        def PREDICATE(self):
            return self.getToken(TSqlParser.PREDICATE, 0)

        def PROCESS(self):
            return self.getToken(TSqlParser.PROCESS, 0)

        def PROFILE(self):
            return self.getToken(TSqlParser.PROFILE, 0)

        def PYTHON(self):
            return self.getToken(TSqlParser.PYTHON, 0)

        def R(self):
            return self.getToken(TSqlParser.R, 0)

        def READ_WRITE_FILEGROUPS(self):
            return self.getToken(TSqlParser.READ_WRITE_FILEGROUPS, 0)

        def REGENERATE(self):
            return self.getToken(TSqlParser.REGENERATE, 0)

        def RELATED_CONVERSATION(self):
            return self.getToken(TSqlParser.RELATED_CONVERSATION, 0)

        def RELATED_CONVERSATION_GROUP(self):
            return self.getToken(TSqlParser.RELATED_CONVERSATION_GROUP, 0)

        def REQUIRED(self):
            return self.getToken(TSqlParser.REQUIRED, 0)

        def RESET(self):
            return self.getToken(TSqlParser.RESET, 0)

        def RESOURCES(self):
            return self.getToken(TSqlParser.RESOURCES, 0)

        def RESTART(self):
            return self.getToken(TSqlParser.RESTART, 0)

        def RESUME(self):
            return self.getToken(TSqlParser.RESUME, 0)

        def RETAINDAYS(self):
            return self.getToken(TSqlParser.RETAINDAYS, 0)

        def RETURNS(self):
            return self.getToken(TSqlParser.RETURNS, 0)

        def REWIND(self):
            return self.getToken(TSqlParser.REWIND, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def ROUND_ROBIN(self):
            return self.getToken(TSqlParser.ROUND_ROBIN, 0)

        def ROWCOUNT_BIG(self):
            return self.getToken(TSqlParser.ROWCOUNT_BIG, 0)

        def RSA_512(self):
            return self.getToken(TSqlParser.RSA_512, 0)

        def RSA_1024(self):
            return self.getToken(TSqlParser.RSA_1024, 0)

        def RSA_2048(self):
            return self.getToken(TSqlParser.RSA_2048, 0)

        def RSA_3072(self):
            return self.getToken(TSqlParser.RSA_3072, 0)

        def RSA_4096(self):
            return self.getToken(TSqlParser.RSA_4096, 0)

        def SAFETY(self):
            return self.getToken(TSqlParser.SAFETY, 0)

        def SAFE(self):
            return self.getToken(TSqlParser.SAFE, 0)

        def SCHEDULER(self):
            return self.getToken(TSqlParser.SCHEDULER, 0)

        def SCHEME(self):
            return self.getToken(TSqlParser.SCHEME, 0)

        def SCRIPT(self):
            return self.getToken(TSqlParser.SCRIPT, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def SERVICE(self):
            return self.getToken(TSqlParser.SERVICE, 0)

        def SERVICE_BROKER(self):
            return self.getToken(TSqlParser.SERVICE_BROKER, 0)

        def SERVICE_NAME(self):
            return self.getToken(TSqlParser.SERVICE_NAME, 0)

        def SESSION(self):
            return self.getToken(TSqlParser.SESSION, 0)

        def SESSION_CONTEXT(self):
            return self.getToken(TSqlParser.SESSION_CONTEXT, 0)

        def SETTINGS(self):
            return self.getToken(TSqlParser.SETTINGS, 0)

        def SHRINKLOG(self):
            return self.getToken(TSqlParser.SHRINKLOG, 0)

        def SID(self):
            return self.getToken(TSqlParser.SID, 0)

        def SKIP_KEYWORD(self):
            return self.getToken(TSqlParser.SKIP_KEYWORD, 0)

        def SOFTNUMA(self):
            return self.getToken(TSqlParser.SOFTNUMA, 0)

        def SOURCE(self):
            return self.getToken(TSqlParser.SOURCE, 0)

        def SPECIFICATION(self):
            return self.getToken(TSqlParser.SPECIFICATION, 0)

        def SPLIT(self):
            return self.getToken(TSqlParser.SPLIT, 0)

        def SQL(self):
            return self.getToken(TSqlParser.SQL, 0)

        def SQLDUMPERFLAGS(self):
            return self.getToken(TSqlParser.SQLDUMPERFLAGS, 0)

        def SQLDUMPERPATH(self):
            return self.getToken(TSqlParser.SQLDUMPERPATH, 0)

        def SQLDUMPERTIMEOUT(self):
            return self.getToken(TSqlParser.SQLDUMPERTIMEOUT, 0)

        def STATE(self):
            return self.getToken(TSqlParser.STATE, 0)

        def STATS(self):
            return self.getToken(TSqlParser.STATS, 0)

        def START(self):
            return self.getToken(TSqlParser.START, 0)

        def STARTED(self):
            return self.getToken(TSqlParser.STARTED, 0)

        def STARTUP_STATE(self):
            return self.getToken(TSqlParser.STARTUP_STATE, 0)

        def STOP(self):
            return self.getToken(TSqlParser.STOP, 0)

        def STOPPED(self):
            return self.getToken(TSqlParser.STOPPED, 0)

        def STOP_ON_ERROR(self):
            return self.getToken(TSqlParser.STOP_ON_ERROR, 0)

        def SUPPORTED(self):
            return self.getToken(TSqlParser.SUPPORTED, 0)

        def SWITCH(self):
            return self.getToken(TSqlParser.SWITCH, 0)

        def TAPE(self):
            return self.getToken(TSqlParser.TAPE, 0)

        def TARGET(self):
            return self.getToken(TSqlParser.TARGET, 0)

        def TCP(self):
            return self.getToken(TSqlParser.TCP, 0)

        def TOSTRING(self):
            return self.getToken(TSqlParser.TOSTRING, 0)

        def TRACE(self):
            return self.getToken(TSqlParser.TRACE, 0)

        def TRACK_CAUSALITY(self):
            return self.getToken(TSqlParser.TRACK_CAUSALITY, 0)

        def TRANSFER(self):
            return self.getToken(TSqlParser.TRANSFER, 0)

        def UNCHECKED(self):
            return self.getToken(TSqlParser.UNCHECKED, 0)

        def UNLOCK(self):
            return self.getToken(TSqlParser.UNLOCK, 0)

        def UNSAFE(self):
            return self.getToken(TSqlParser.UNSAFE, 0)

        def URL(self):
            return self.getToken(TSqlParser.URL, 0)

        def USED(self):
            return self.getToken(TSqlParser.USED, 0)

        def VERBOSELOGGING(self):
            return self.getToken(TSqlParser.VERBOSELOGGING, 0)

        def VISIBILITY(self):
            return self.getToken(TSqlParser.VISIBILITY, 0)

        def WAIT_AT_LOW_PRIORITY(self):
            return self.getToken(TSqlParser.WAIT_AT_LOW_PRIORITY, 0)

        def WINDOWS(self):
            return self.getToken(TSqlParser.WINDOWS, 0)

        def WITHOUT(self):
            return self.getToken(TSqlParser.WITHOUT, 0)

        def WITNESS(self):
            return self.getToken(TSqlParser.WITNESS, 0)

        def XACT_ABORT(self):
            return self.getToken(TSqlParser.XACT_ABORT, 0)

        def XACT_STATE(self):
            return self.getToken(TSqlParser.XACT_STATE, 0)

        def ABS(self):
            return self.getToken(TSqlParser.ABS, 0)

        def ACOS(self):
            return self.getToken(TSqlParser.ACOS, 0)

        def ASIN(self):
            return self.getToken(TSqlParser.ASIN, 0)

        def ATAN(self):
            return self.getToken(TSqlParser.ATAN, 0)

        def ATN2(self):
            return self.getToken(TSqlParser.ATN2, 0)

        def CEILING(self):
            return self.getToken(TSqlParser.CEILING, 0)

        def COS(self):
            return self.getToken(TSqlParser.COS, 0)

        def COT(self):
            return self.getToken(TSqlParser.COT, 0)

        def DEGREES(self):
            return self.getToken(TSqlParser.DEGREES, 0)

        def EXP(self):
            return self.getToken(TSqlParser.EXP, 0)

        def FLOOR(self):
            return self.getToken(TSqlParser.FLOOR, 0)

        def LOG10(self):
            return self.getToken(TSqlParser.LOG10, 0)

        def PI(self):
            return self.getToken(TSqlParser.PI, 0)

        def POWER(self):
            return self.getToken(TSqlParser.POWER, 0)

        def RADIANS(self):
            return self.getToken(TSqlParser.RADIANS, 0)

        def RAND(self):
            return self.getToken(TSqlParser.RAND, 0)

        def ROUND(self):
            return self.getToken(TSqlParser.ROUND, 0)

        def SIGN(self):
            return self.getToken(TSqlParser.SIGN, 0)

        def SIN(self):
            return self.getToken(TSqlParser.SIN, 0)

        def SQRT(self):
            return self.getToken(TSqlParser.SQRT, 0)

        def SQUARE(self):
            return self.getToken(TSqlParser.SQUARE, 0)

        def TAN(self):
            return self.getToken(TSqlParser.TAN, 0)

        def CURRENT_TIMEZONE(self):
            return self.getToken(TSqlParser.CURRENT_TIMEZONE, 0)

        def CURRENT_TIMEZONE_ID(self):
            return self.getToken(TSqlParser.CURRENT_TIMEZONE_ID, 0)

        def DATE_BUCKET(self):
            return self.getToken(TSqlParser.DATE_BUCKET, 0)

        def DATEDIFF_BIG(self):
            return self.getToken(TSqlParser.DATEDIFF_BIG, 0)

        def DATEFROMPARTS(self):
            return self.getToken(TSqlParser.DATEFROMPARTS, 0)

        def DATETIME2FROMPARTS(self):
            return self.getToken(TSqlParser.DATETIME2FROMPARTS, 0)

        def DATETIMEFROMPARTS(self):
            return self.getToken(TSqlParser.DATETIMEFROMPARTS, 0)

        def DATETIMEOFFSETFROMPARTS(self):
            return self.getToken(TSqlParser.DATETIMEOFFSETFROMPARTS, 0)

        def DATETRUNC(self):
            return self.getToken(TSqlParser.DATETRUNC, 0)

        def DAY(self):
            return self.getToken(TSqlParser.DAY, 0)

        def EOMONTH(self):
            return self.getToken(TSqlParser.EOMONTH, 0)

        def ISDATE(self):
            return self.getToken(TSqlParser.ISDATE, 0)

        def MONTH(self):
            return self.getToken(TSqlParser.MONTH, 0)

        def SMALLDATETIMEFROMPARTS(self):
            return self.getToken(TSqlParser.SMALLDATETIMEFROMPARTS, 0)

        def SWITCHOFFSET(self):
            return self.getToken(TSqlParser.SWITCHOFFSET, 0)

        def SYSDATETIME(self):
            return self.getToken(TSqlParser.SYSDATETIME, 0)

        def SYSDATETIMEOFFSET(self):
            return self.getToken(TSqlParser.SYSDATETIMEOFFSET, 0)

        def SYSUTCDATETIME(self):
            return self.getToken(TSqlParser.SYSUTCDATETIME, 0)

        def TIMEFROMPARTS(self):
            return self.getToken(TSqlParser.TIMEFROMPARTS, 0)

        def TODATETIMEOFFSET(self):
            return self.getToken(TSqlParser.TODATETIMEOFFSET, 0)

        def YEAR(self):
            return self.getToken(TSqlParser.YEAR, 0)

        def QUARTER(self):
            return self.getToken(TSqlParser.QUARTER, 0)

        def DAYOFYEAR(self):
            return self.getToken(TSqlParser.DAYOFYEAR, 0)

        def WEEK(self):
            return self.getToken(TSqlParser.WEEK, 0)

        def HOUR(self):
            return self.getToken(TSqlParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(TSqlParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(TSqlParser.SECOND, 0)

        def MILLISECOND(self):
            return self.getToken(TSqlParser.MILLISECOND, 0)

        def MICROSECOND(self):
            return self.getToken(TSqlParser.MICROSECOND, 0)

        def NANOSECOND(self):
            return self.getToken(TSqlParser.NANOSECOND, 0)

        def TZOFFSET(self):
            return self.getToken(TSqlParser.TZOFFSET, 0)

        def ISO_WEEK(self):
            return self.getToken(TSqlParser.ISO_WEEK, 0)

        def WEEKDAY(self):
            return self.getToken(TSqlParser.WEEKDAY, 0)

        def YEAR_ABBR(self):
            return self.getToken(TSqlParser.YEAR_ABBR, 0)

        def QUARTER_ABBR(self):
            return self.getToken(TSqlParser.QUARTER_ABBR, 0)

        def MONTH_ABBR(self):
            return self.getToken(TSqlParser.MONTH_ABBR, 0)

        def DAYOFYEAR_ABBR(self):
            return self.getToken(TSqlParser.DAYOFYEAR_ABBR, 0)

        def DAY_ABBR(self):
            return self.getToken(TSqlParser.DAY_ABBR, 0)

        def WEEK_ABBR(self):
            return self.getToken(TSqlParser.WEEK_ABBR, 0)

        def HOUR_ABBR(self):
            return self.getToken(TSqlParser.HOUR_ABBR, 0)

        def MINUTE_ABBR(self):
            return self.getToken(TSqlParser.MINUTE_ABBR, 0)

        def SECOND_ABBR(self):
            return self.getToken(TSqlParser.SECOND_ABBR, 0)

        def MILLISECOND_ABBR(self):
            return self.getToken(TSqlParser.MILLISECOND_ABBR, 0)

        def MICROSECOND_ABBR(self):
            return self.getToken(TSqlParser.MICROSECOND_ABBR, 0)

        def NANOSECOND_ABBR(self):
            return self.getToken(TSqlParser.NANOSECOND_ABBR, 0)

        def TZOFFSET_ABBR(self):
            return self.getToken(TSqlParser.TZOFFSET_ABBR, 0)

        def ISO_WEEK_ABBR(self):
            return self.getToken(TSqlParser.ISO_WEEK_ABBR, 0)

        def WEEKDAY_ABBR(self):
            return self.getToken(TSqlParser.WEEKDAY_ABBR, 0)

        def SP_EXECUTESQL(self):
            return self.getToken(TSqlParser.SP_EXECUTESQL, 0)

        def VARCHAR(self):
            return self.getToken(TSqlParser.VARCHAR, 0)

        def NVARCHAR(self):
            return self.getToken(TSqlParser.NVARCHAR, 0)

        def PRECISION(self):
            return self.getToken(TSqlParser.PRECISION, 0)

        def FILESTREAM_ON(self):
            return self.getToken(TSqlParser.FILESTREAM_ON, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = TSqlParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1206, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14484
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -216243322660847650) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -6845834611130385) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -4691064178111676937) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 8067776519934725599) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -4908943387491794949) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & 8681809714895912701) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -4755875440852549633) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -873769796032868641) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & -2251799813685257) != 0) or ((((_la - 577)) & ~0x3f) == 0 and ((1 << (_la - 577)) & -13510937462965505) != 0) or ((((_la - 641)) & ~0x3f) == 0 and ((1 << (_la - 641)) & -18018799299309863) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & -18614732942495757) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & -651161675377934355) != 0) or ((((_la - 833)) & ~0x3f) == 0 and ((1 << (_la - 833)) & -387309693044787745) != 0) or ((((_la - 897)) & ~0x3f) == 0 and ((1 << (_la - 897)) & -17179877385) != 0) or ((((_la - 961)) & ~0x3f) == 0 and ((1 << (_la - 961)) & -864766183109689521) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & -18065741906573) != 0) or ((((_la - 1090)) & ~0x3f) == 0 and ((1 << (_la - 1090)) & -1) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(TSqlParser.ID, 0)

        def TEMP_ID(self):
            return self.getToken(TSqlParser.TEMP_ID, 0)

        def DOUBLE_QUOTE_ID(self):
            return self.getToken(TSqlParser.DOUBLE_QUOTE_ID, 0)

        def DOUBLE_QUOTE_BLANK(self):
            return self.getToken(TSqlParser.DOUBLE_QUOTE_BLANK, 0)

        def SQUARE_BRACKET_ID(self):
            return self.getToken(TSqlParser.SQUARE_BRACKET_ID, 0)

        def keyword(self):
            return self.getTypedRuleContext(TSqlParser.KeywordContext,0)


        def RAW(self):
            return self.getToken(TSqlParser.RAW, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_id_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_" ):
                listener.enterId_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_" ):
                listener.exitId_(self)




    def id_(self):

        localctx = TSqlParser.Id_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1208, self.RULE_id_)
        try:
            self.state = 14493
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1169]:
                self.enterOuterAlt(localctx, 1)
                self.state = 14486
                self.match(TSqlParser.ID)
                pass
            elif token in [1167]:
                self.enterOuterAlt(localctx, 2)
                self.state = 14487
                self.match(TSqlParser.TEMP_ID)
                pass
            elif token in [1162]:
                self.enterOuterAlt(localctx, 3)
                self.state = 14488
                self.match(TSqlParser.DOUBLE_QUOTE_ID)
                pass
            elif token in [1163]:
                self.enterOuterAlt(localctx, 4)
                self.state = 14489
                self.match(TSqlParser.DOUBLE_QUOTE_BLANK)
                pass
            elif token in [1165]:
                self.enterOuterAlt(localctx, 5)
                self.state = 14490
                self.match(TSqlParser.SQUARE_BRACKET_ID)
                pass
            elif token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153]:
                self.enterOuterAlt(localctx, 6)
                self.state = 14491
                self.keyword()
                pass
            elif token in [750]:
                self.enterOuterAlt(localctx, 7)
                self.state = 14492
                self.match(TSqlParser.RAW)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(TSqlParser.ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_simple_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_id" ):
                listener.enterSimple_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_id" ):
                listener.exitSimple_id(self)




    def simple_id(self):

        localctx = TSqlParser.Simple_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1210, self.RULE_simple_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14495
            self.match(TSqlParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_or_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(TSqlParser.Id_Context,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_id_or_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_or_string" ):
                listener.enterId_or_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_or_string" ):
                listener.exitId_or_string(self)




    def id_or_string(self):

        localctx = TSqlParser.Id_or_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1212, self.RULE_id_or_string)
        try:
            self.state = 14499
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 206, 209, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 655, 659, 660, 661, 662, 663, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 812, 813, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 888, 890, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1165, 1167, 1169]:
                self.enterOuterAlt(localctx, 1)
                self.state = 14497
                self.id_()
                pass
            elif token in [1170]:
                self.enterOuterAlt(localctx, 2)
                self.state = 14498
                self.match(TSqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comparison_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def GREATER(self):
            return self.getToken(TSqlParser.GREATER, 0)

        def LESS(self):
            return self.getToken(TSqlParser.LESS, 0)

        def EXCLAMATION(self):
            return self.getToken(TSqlParser.EXCLAMATION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_comparison_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_operator" ):
                listener.enterComparison_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_operator" ):
                listener.exitComparison_operator(self)




    def comparison_operator(self):

        localctx = TSqlParser.Comparison_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1214, self.RULE_comparison_operator)
        try:
            self.state = 14516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1838,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 14501
                self.match(TSqlParser.EQUAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 14502
                self.match(TSqlParser.GREATER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 14503
                self.match(TSqlParser.LESS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 14504
                self.match(TSqlParser.LESS)
                self.state = 14505
                self.match(TSqlParser.EQUAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 14506
                self.match(TSqlParser.GREATER)
                self.state = 14507
                self.match(TSqlParser.EQUAL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 14508
                self.match(TSqlParser.LESS)
                self.state = 14509
                self.match(TSqlParser.GREATER)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 14510
                self.match(TSqlParser.EXCLAMATION)
                self.state = 14511
                self.match(TSqlParser.EQUAL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 14512
                self.match(TSqlParser.EXCLAMATION)
                self.state = 14513
                self.match(TSqlParser.GREATER)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 14514
                self.match(TSqlParser.EXCLAMATION)
                self.state = 14515
                self.match(TSqlParser.LESS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS_ASSIGN(self):
            return self.getToken(TSqlParser.PLUS_ASSIGN, 0)

        def MINUS_ASSIGN(self):
            return self.getToken(TSqlParser.MINUS_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(TSqlParser.MULT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(TSqlParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(TSqlParser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(TSqlParser.AND_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(TSqlParser.XOR_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(TSqlParser.OR_ASSIGN, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_assignment_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_operator" ):
                listener.enterAssignment_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_operator" ):
                listener.exitAssignment_operator(self)




    def assignment_operator(self):

        localctx = TSqlParser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1216, self.RULE_assignment_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14518
            _la = self._input.LA(1)
            if not(((((_la - 1178)) & ~0x3f) == 0 and ((1 << (_la - 1178)) & 255) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_sizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def KB(self):
            return self.getToken(TSqlParser.KB, 0)

        def MB(self):
            return self.getToken(TSqlParser.MB, 0)

        def GB(self):
            return self.getToken(TSqlParser.GB, 0)

        def TB(self):
            return self.getToken(TSqlParser.TB, 0)

        def MODULE(self):
            return self.getToken(TSqlParser.MODULE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_file_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_size" ):
                listener.enterFile_size(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_size" ):
                listener.exitFile_size(self)




    def file_size(self):

        localctx = TSqlParser.File_sizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1218, self.RULE_file_size)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14520
            self.match(TSqlParser.DECIMAL)
            self.state = 14522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385 or _la==483 or _la==557 or _la==975 or _la==1200:
                self.state = 14521
                _la = self._input.LA(1)
                if not(_la==385 or _la==483 or _la==557 or _la==975 or _la==1200):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[47] = self.assembly_option_sempred
        self._predicates[457] = self.expression_sempred
        self._predicates[469] = self.search_condition_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def assembly_option_sempred(self, localctx:Assembly_optionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 3)
         

    def search_condition_sempred(self, localctx:Search_conditionContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 1)
         




